
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 20 19 00 	lgdtl  0x192018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc 1f 19 f0       	mov    $0xf0191fbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 22 00 00 00       	call   f010005f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	c7 05 5c 5d 87 f0 01 	movl   $0x1,0xf0875d5c
f0100049:	00 00 00 
f010004c:	90                   	nop
f010004d:	5d                   	pop    %ebp
f010004e:	c3                   	ret    

f010004f <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f010004f:	55                   	push   %ebp
f0100050:	89 e5                	mov    %esp,%ebp
f0100052:	c7 05 30 5d 87 f0 01 	movl   $0x1,0xf0875d30
f0100059:	00 00 00 
f010005c:	90                   	nop
f010005d:	5d                   	pop    %ebp
f010005e:	c3                   	ret    

f010005f <FOS_initialize>:
void print_welcome_message();
//=======================================

//First ever function called in FOS kernel
void FOS_initialize()
{
f010005f:	55                   	push   %ebp
f0100060:	89 e5                	mov    %esp,%ebp
f0100062:	83 ec 18             	sub    $0x18,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100065:	ba bc 5e 87 f0       	mov    $0xf0875ebc,%edx
f010006a:	b8 9c 51 87 f0       	mov    $0xf087519c,%eax
f010006f:	29 c2                	sub    %eax,%edx
f0100071:	89 d0                	mov    %edx,%eax
f0100073:	83 ec 04             	sub    $0x4,%esp
f0100076:	50                   	push   %eax
f0100077:	6a 00                	push   $0x0
f0100079:	68 9c 51 87 f0       	push   $0xf087519c
f010007e:	e8 37 10 03 00       	call   f01310ba <memset>
f0100083:	83 c4 10             	add    $0x10,%esp

	/*2022*/
	scheduler_status = SCH_UNINITIALIZED;
f0100086:	c7 05 58 5d 87 f0 ff 	movl   $0xffffffff,0xf0875d58
f010008d:	ff ff ff 

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100090:	e8 c5 0b 00 00       	call   f0100c5a <console_initialize>

	//print welcome message
	print_welcome_message();
f0100095:	e8 f2 00 00 00       	call   f010018c <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f010009a:	e8 6d 61 00 00       	call   f010620c <detect_memory>
	initialize_kernel_VM();
f010009f:	e8 f9 5c 00 00       	call   f0105d9d <initialize_kernel_VM>
	initialize_paging();
f01000a4:	e8 7a 64 00 00       	call   f0106523 <initialize_paging>
	//	page_check();

	// Lab 3 user environment initialization functions
	env_init();
f01000a9:	e8 48 9b 00 00       	call   f0109bf6 <env_init>
	idt_init();
f01000ae:	e8 00 b1 00 00       	call   f010b1b3 <idt_init>

	//Project initializations

	setPageReplacmentAlgorithmCLOCK();
f01000b3:	e8 33 dc 00 00       	call   f010dceb <setPageReplacmentAlgorithmCLOCK>
	setUHeapPlacementStrategyFIRSTFIT();
f01000b8:	e8 92 ff ff ff       	call   f010004f <setUHeapPlacementStrategyFIRSTFIT>
	setKHeapPlacementStrategyFIRSTFIT();
f01000bd:	e8 7d ff ff ff       	call   f010003f <setKHeapPlacementStrategyFIRSTFIT>

#if USE_KHEAP
	//2022:
	{
		int freeFrames_before = sys_calculate_free_frames() ;
f01000c2:	e8 d6 ca 00 00       	call   f010cb9d <sys_calculate_free_frames>
f01000c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		int freeDiskFrames_before = pf_calculate_free_frames() ;
f01000ca:	e8 f9 3c 00 00       	call   f0103dc8 <pf_calculate_free_frames>
f01000cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		initialize_dyn_block_system();
f01000d2:	e8 f2 75 00 00       	call   f01076c9 <initialize_dyn_block_system>
		int freeFrames_after = sys_calculate_free_frames() ;
f01000d7:	e8 c1 ca 00 00       	call   f010cb9d <sys_calculate_free_frames>
f01000dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
		int freeDiskFrames_after = pf_calculate_free_frames() ;
f01000df:	e8 e4 3c 00 00       	call   f0103dc8 <pf_calculate_free_frames>
f01000e4:	89 45 e8             	mov    %eax,-0x18(%ebp)
		test_initialize_dyn_block_system(freeFrames_before, freeDiskFrames_before, freeFrames_after, freeDiskFrames_after);
f01000e7:	ff 75 e8             	pushl  -0x18(%ebp)
f01000ea:	ff 75 ec             	pushl  -0x14(%ebp)
f01000ed:	ff 75 f0             	pushl  -0x10(%ebp)
f01000f0:	ff 75 f4             	pushl  -0xc(%ebp)
f01000f3:	e8 25 f9 02 00       	call   f012fa1d <test_initialize_dyn_block_system>
f01000f8:	83 c4 10             	add    $0x10,%esp
	}
	MAX_SHARES = (KERNEL_SHARES_ARR_INIT_SIZE) / sizeof(struct Share);
f01000fb:	c7 05 28 5d 87 f0 61 	movl   $0x61,0xf0875d28
f0100102:	00 00 00 
	MAX_SEMAPHORES = (KERNEL_SEMAPHORES_ARR_INIT_SIZE) / sizeof(struct Semaphore);
f0100105:	c7 05 b4 5c 87 f0 59 	movl   $0x59,0xf0875cb4
f010010c:	00 00 00 
#endif
	create_shares_array(MAX_SHARES);
f010010f:	a1 28 5d 87 f0       	mov    0xf0875d28,%eax
f0100114:	83 ec 0c             	sub    $0xc,%esp
f0100117:	50                   	push   %eax
f0100118:	e8 e0 6f 00 00       	call   f01070fd <create_shares_array>
f010011d:	83 c4 10             	add    $0x10,%esp
	create_semaphores_array(MAX_SEMAPHORES);
f0100120:	a1 b4 5c 87 f0       	mov    0xf0875cb4,%eax
f0100125:	83 ec 0c             	sub    $0xc,%esp
f0100128:	50                   	push   %eax
f0100129:	e8 4f dd 00 00       	call   f010de7d <create_semaphores_array>
f010012e:	83 c4 10             	add    $0x10,%esp



	enableBuffering(0);
f0100131:	83 ec 0c             	sub    $0xc,%esp
f0100134:	6a 00                	push   $0x0
f0100136:	e8 bd dc 00 00       	call   f010ddf8 <enableBuffering>
f010013b:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0) ;
f010013e:	83 ec 0c             	sub    $0xc,%esp
f0100141:	6a 00                	push   $0x0
f0100143:	e8 98 dc 00 00       	call   f010dde0 <enableModifiedBuffer>
f0100148:	83 c4 10             	add    $0x10,%esp
	setModifiedBufferLength(1000);
f010014b:	83 ec 0c             	sub    $0xc,%esp
f010014e:	68 e8 03 00 00       	push   $0x3e8
f0100153:	e8 b8 dc 00 00       	call   f010de10 <setModifiedBufferLength>
f0100158:	83 c4 10             	add    $0x10,%esp

	// Lab 4 multitasking initialization functions
	pic_init();
f010015b:	e8 b7 5a 00 00       	call   f0105c17 <pic_init>
	sched_init() ;
f0100160:	e8 60 47 00 00       	call   f01048c5 <sched_init>
	//Project initializations

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f0100165:	83 ec 0c             	sub    $0xc,%esp
f0100168:	68 60 31 13 f0       	push   $0xf0133160
f010016d:	e8 9c 0b 00 00       	call   f0100d0e <cprintf>
f0100172:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f0100175:	83 ec 0c             	sub    $0xc,%esp
f0100178:	68 8c 31 13 f0       	push   $0xf013318c
f010017d:	e8 8c 0b 00 00       	call   f0100d0e <cprintf>
f0100182:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f0100185:	e8 aa 0b 00 00       	call   f0100d34 <run_command_prompt>
	}
f010018a:	eb d9                	jmp    f0100165 <FOS_initialize+0x106>

f010018c <print_welcome_message>:
}


void print_welcome_message()
{
f010018c:	55                   	push   %ebp
f010018d:	89 e5                	mov    %esp,%ebp
f010018f:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f0100192:	83 ec 0c             	sub    $0xc,%esp
f0100195:	68 b1 31 13 f0       	push   $0xf01331b1
f010019a:	e8 6f 0b 00 00       	call   f0100d0e <cprintf>
f010019f:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01001a2:	83 ec 0c             	sub    $0xc,%esp
f01001a5:	68 b8 31 13 f0       	push   $0xf01331b8
f01001aa:	e8 5f 0b 00 00       	call   f0100d0e <cprintf>
f01001af:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01001b2:	83 ec 0c             	sub    $0xc,%esp
f01001b5:	68 00 32 13 f0       	push   $0xf0133200
f01001ba:	e8 4f 0b 00 00       	call   f0100d0e <cprintf>
f01001bf:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f01001c2:	83 ec 0c             	sub    $0xc,%esp
f01001c5:	68 48 32 13 f0       	push   $0xf0133248
f01001ca:	e8 3f 0b 00 00       	call   f0100d0e <cprintf>
f01001cf:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01001d2:	83 ec 0c             	sub    $0xc,%esp
f01001d5:	68 00 32 13 f0       	push   $0xf0133200
f01001da:	e8 2f 0b 00 00       	call   f0100d0e <cprintf>
f01001df:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01001e2:	83 ec 0c             	sub    $0xc,%esp
f01001e5:	68 b8 31 13 f0       	push   $0xf01331b8
f01001ea:	e8 1f 0b 00 00       	call   f0100d0e <cprintf>
f01001ef:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f01001f2:	83 ec 0c             	sub    $0xc,%esp
f01001f5:	68 8d 32 13 f0       	push   $0xf013328d
f01001fa:	e8 0f 0b 00 00       	call   f0100d0e <cprintf>
f01001ff:	83 c4 10             	add    $0x10,%esp
}
f0100202:	90                   	nop
f0100203:	c9                   	leave  
f0100204:	c3                   	ret    

f0100205 <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f0100205:	55                   	push   %ebp
f0100206:	89 e5                	mov    %esp,%ebp
f0100208:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010020b:	8b 45 10             	mov    0x10(%ebp),%eax
f010020e:	a3 a0 51 87 f0       	mov    %eax,0xf08751a0

	va_start(ap, fmt);
f0100213:	8d 45 10             	lea    0x10(%ebp),%eax
f0100216:	83 c0 04             	add    $0x4,%eax
f0100219:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f010021c:	83 ec 04             	sub    $0x4,%esp
f010021f:	ff 75 0c             	pushl  0xc(%ebp)
f0100222:	ff 75 08             	pushl  0x8(%ebp)
f0100225:	68 92 32 13 f0       	push   $0xf0133292
f010022a:	e8 df 0a 00 00       	call   f0100d0e <cprintf>
f010022f:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100232:	8b 45 10             	mov    0x10(%ebp),%eax
f0100235:	83 ec 08             	sub    $0x8,%esp
f0100238:	ff 75 f4             	pushl  -0xc(%ebp)
f010023b:	50                   	push   %eax
f010023c:	e8 a4 0a 00 00       	call   f0100ce5 <vcprintf>
f0100241:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100244:	83 ec 0c             	sub    $0xc,%esp
f0100247:	68 ab 32 13 f0       	push   $0xf01332ab
f010024c:	e8 bd 0a 00 00       	call   f0100d0e <cprintf>
f0100251:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f0100254:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f0100259:	85 c0                	test   %eax,%eax
f010025b:	74 12                	je     f010026f <_panic+0x6a>
f010025d:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f0100262:	8b 40 54             	mov    0x54(%eax),%eax
f0100265:	83 f8 02             	cmp    $0x2,%eax
f0100268:	75 05                	jne    f010026f <_panic+0x6a>
	{
		//2015
		env_exit();
f010026a:	e8 7c 98 00 00       	call   f0109aeb <env_exit>
		//env_run_cmd_prmpt() ;
	}

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010026f:	a1 58 5d 87 f0       	mov    0xf0875d58,%eax
f0100274:	83 f8 ff             	cmp    $0xffffffff,%eax
f0100277:	74 1b                	je     f0100294 <_panic+0x8f>
	{
		cprintf("scheduler_status=%d\n", scheduler_status);
f0100279:	a1 58 5d 87 f0       	mov    0xf0875d58,%eax
f010027e:	83 ec 08             	sub    $0x8,%esp
f0100281:	50                   	push   %eax
f0100282:	68 ad 32 13 f0       	push   $0xf01332ad
f0100287:	e8 82 0a 00 00       	call   f0100d0e <cprintf>
f010028c:	83 c4 10             	add    $0x10,%esp
		//2015
		fos_scheduler();
f010028f:	e8 92 44 00 00       	call   f0104726 <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f0100294:	c7 05 f4 53 87 f0 00 	movl   $0x0,0xf08753f4
f010029b:	00 00 00 
		lcr3(phys_page_directory);
f010029e:	a1 ac 5d 87 f0       	mov    0xf0875dac,%eax
f01002a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01002a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01002a9:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f01002ac:	83 ec 0c             	sub    $0xc,%esp
f01002af:	6a 00                	push   $0x0
f01002b1:	e8 7e 0a 00 00       	call   f0100d34 <run_command_prompt>
f01002b6:	83 c4 10             	add    $0x10,%esp
f01002b9:	eb f1                	jmp    f01002ac <_panic+0xa7>

f01002bb <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f01002bb:	55                   	push   %ebp
f01002bc:	89 e5                	mov    %esp,%ebp
f01002be:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01002c1:	8b 45 10             	mov    0x10(%ebp),%eax
f01002c4:	a3 a0 51 87 f0       	mov    %eax,0xf08751a0

	va_start(ap, fmt);
f01002c9:	8d 45 10             	lea    0x10(%ebp),%eax
f01002cc:	83 c0 04             	add    $0x4,%eax
f01002cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01002d2:	83 ec 04             	sub    $0x4,%esp
f01002d5:	ff 75 0c             	pushl  0xc(%ebp)
f01002d8:	ff 75 08             	pushl  0x8(%ebp)
f01002db:	68 92 32 13 f0       	push   $0xf0133292
f01002e0:	e8 29 0a 00 00       	call   f0100d0e <cprintf>
f01002e5:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01002e8:	8b 45 10             	mov    0x10(%ebp),%eax
f01002eb:	83 ec 08             	sub    $0x8,%esp
f01002ee:	ff 75 f4             	pushl  -0xc(%ebp)
f01002f1:	50                   	push   %eax
f01002f2:	e8 ee 09 00 00       	call   f0100ce5 <vcprintf>
f01002f7:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01002fa:	83 ec 0c             	sub    $0xc,%esp
f01002fd:	68 ab 32 13 f0       	push   $0xf01332ab
f0100302:	e8 07 0a 00 00       	call   f0100d0e <cprintf>
f0100307:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010030a:	a1 58 5d 87 f0       	mov    0xf0875d58,%eax
f010030f:	83 f8 ff             	cmp    $0xffffffff,%eax
f0100312:	74 27                	je     f010033b <_panic_all+0x80>
	{
		//exit all ready env's
		sched_exit_all_ready_envs();
f0100314:	e8 c2 51 00 00       	call   f01054db <sched_exit_all_ready_envs>
		if (curenv != NULL)
f0100319:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f010031e:	85 c0                	test   %eax,%eax
f0100320:	74 14                	je     f0100336 <_panic_all+0x7b>
		{
			//cprintf("exit curenv...........\n");
			sched_exit_env(curenv->env_id);
f0100322:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f0100327:	8b 40 4c             	mov    0x4c(%eax),%eax
f010032a:	83 ec 0c             	sub    $0xc,%esp
f010032d:	50                   	push   %eax
f010032e:	e8 6f 4f 00 00       	call   f01052a2 <sched_exit_env>
f0100333:	83 c4 10             	add    $0x10,%esp
			//env_run_cmd_prmpt() ;
		}

		fos_scheduler();
f0100336:	e8 eb 43 00 00       	call   f0104726 <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f010033b:	c7 05 f4 53 87 f0 00 	movl   $0x0,0xf08753f4
f0100342:	00 00 00 
		lcr3(phys_page_directory);
f0100345:	a1 ac 5d 87 f0       	mov    0xf0875dac,%eax
f010034a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010034d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100350:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f0100353:	83 ec 0c             	sub    $0xc,%esp
f0100356:	6a 00                	push   $0x0
f0100358:	e8 d7 09 00 00       	call   f0100d34 <run_command_prompt>
f010035d:	83 c4 10             	add    $0x10,%esp
f0100360:	eb f1                	jmp    f0100353 <_panic_all+0x98>

f0100362 <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f0100362:	55                   	push   %ebp
f0100363:	89 e5                	mov    %esp,%ebp
f0100365:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100368:	8b 45 10             	mov    0x10(%ebp),%eax
f010036b:	a3 a0 51 87 f0       	mov    %eax,0xf08751a0

	va_start(ap, fmt);
f0100370:	8d 45 10             	lea    0x10(%ebp),%eax
f0100373:	83 c0 04             	add    $0x4,%eax
f0100376:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f0100379:	83 ec 04             	sub    $0x4,%esp
f010037c:	ff 75 0c             	pushl  0xc(%ebp)
f010037f:	ff 75 08             	pushl  0x8(%ebp)
f0100382:	68 92 32 13 f0       	push   $0xf0133292
f0100387:	e8 82 09 00 00       	call   f0100d0e <cprintf>
f010038c:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f010038f:	8b 45 10             	mov    0x10(%ebp),%eax
f0100392:	83 ec 08             	sub    $0x8,%esp
f0100395:	ff 75 f4             	pushl  -0xc(%ebp)
f0100398:	50                   	push   %eax
f0100399:	e8 47 09 00 00       	call   f0100ce5 <vcprintf>
f010039e:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01003a1:	83 ec 0c             	sub    $0xc,%esp
f01003a4:	68 ab 32 13 f0       	push   $0xf01332ab
f01003a9:	e8 60 09 00 00       	call   f0100d0e <cprintf>
f01003ae:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01003b1:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f01003b6:	85 c0                	test   %eax,%eax
f01003b8:	74 28                	je     f01003e2 <_panic_into_prompt+0x80>
f01003ba:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f01003bf:	8b 40 54             	mov    0x54(%eax),%eax
f01003c2:	83 f8 02             	cmp    $0x2,%eax
f01003c5:	75 1b                	jne    f01003e2 <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f01003c7:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f01003cc:	83 ec 0c             	sub    $0xc,%esp
f01003cf:	50                   	push   %eax
f01003d0:	e8 85 47 00 00       	call   f0104b5a <sched_insert_exit>
f01003d5:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f01003d8:	c7 05 f4 53 87 f0 00 	movl   $0x0,0xf08753f4
f01003df:	00 00 00 
	}

	lcr3(phys_page_directory);
f01003e2:	a1 ac 5d 87 f0       	mov    0xf0875dac,%eax
f01003e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01003ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01003ed:	0f 22 d8             	mov    %eax,%cr3

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f01003f0:	a1 58 5d 87 f0       	mov    0xf0875d58,%eax
f01003f5:	83 f8 ff             	cmp    $0xffffffff,%eax
f01003f8:	74 0a                	je     f0100404 <_panic_into_prompt+0xa2>
	{
		scheduler_status = SCH_STOPPED;
f01003fa:	c7 05 58 5d 87 f0 00 	movl   $0x0,0xf0875d58
f0100401:	00 00 00 
	}
	while (1)
		run_command_prompt(NULL);
f0100404:	83 ec 0c             	sub    $0xc,%esp
f0100407:	6a 00                	push   $0x0
f0100409:	e8 26 09 00 00       	call   f0100d34 <run_command_prompt>
f010040e:	83 c4 10             	add    $0x10,%esp
f0100411:	eb f1                	jmp    f0100404 <_panic_into_prompt+0xa2>

f0100413 <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f0100413:	55                   	push   %ebp
f0100414:	89 e5                	mov    %esp,%ebp
f0100416:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0100419:	8d 45 10             	lea    0x10(%ebp),%eax
f010041c:	83 c0 04             	add    $0x4,%eax
f010041f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f0100422:	83 ec 04             	sub    $0x4,%esp
f0100425:	ff 75 0c             	pushl  0xc(%ebp)
f0100428:	ff 75 08             	pushl  0x8(%ebp)
f010042b:	68 c2 32 13 f0       	push   $0xf01332c2
f0100430:	e8 d9 08 00 00       	call   f0100d0e <cprintf>
f0100435:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100438:	8b 45 10             	mov    0x10(%ebp),%eax
f010043b:	83 ec 08             	sub    $0x8,%esp
f010043e:	ff 75 f4             	pushl  -0xc(%ebp)
f0100441:	50                   	push   %eax
f0100442:	e8 9e 08 00 00       	call   f0100ce5 <vcprintf>
f0100447:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010044a:	83 ec 0c             	sub    $0xc,%esp
f010044d:	68 ab 32 13 f0       	push   $0xf01332ab
f0100452:	e8 b7 08 00 00       	call   f0100d0e <cprintf>
f0100457:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f010045a:	90                   	nop
f010045b:	c9                   	leave  
f010045c:	c3                   	ret    

f010045d <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f010045d:	55                   	push   %ebp
f010045e:	89 e5                	mov    %esp,%ebp
f0100460:	83 ec 10             	sub    $0x10,%esp
f0100463:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010046a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010046d:	89 c2                	mov    %eax,%edx
f010046f:	ec                   	in     (%dx),%al
f0100470:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0100473:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f0100476:	0f b6 c0             	movzbl %al,%eax
f0100479:	83 e0 01             	and    $0x1,%eax
f010047c:	85 c0                	test   %eax,%eax
f010047e:	75 07                	jne    f0100487 <serial_proc_data+0x2a>
		return -1;
f0100480:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100485:	eb 16                	jmp    f010049d <serial_proc_data+0x40>
f0100487:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010048e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100491:	89 c2                	mov    %eax,%edx
f0100493:	ec                   	in     (%dx),%al
f0100494:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f0100497:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f010049a:	0f b6 c0             	movzbl %al,%eax
}
f010049d:	c9                   	leave  
f010049e:	c3                   	ret    

f010049f <serial_intr>:

void
serial_intr(void)
{
f010049f:	55                   	push   %ebp
f01004a0:	89 e5                	mov    %esp,%ebp
f01004a2:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f01004a5:	a1 c0 51 87 f0       	mov    0xf08751c0,%eax
f01004aa:	85 c0                	test   %eax,%eax
f01004ac:	74 10                	je     f01004be <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f01004ae:	83 ec 0c             	sub    $0xc,%esp
f01004b1:	68 5d 04 10 f0       	push   $0xf010045d
f01004b6:	e8 e4 05 00 00       	call   f0100a9f <cons_intr>
f01004bb:	83 c4 10             	add    $0x10,%esp
}
f01004be:	90                   	nop
f01004bf:	c9                   	leave  
f01004c0:	c3                   	ret    

f01004c1 <serial_init>:

void
serial_init(void)
{
f01004c1:	55                   	push   %ebp
f01004c2:	89 e5                	mov    %esp,%ebp
f01004c4:	83 ec 40             	sub    $0x40,%esp
f01004c7:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f01004ce:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01004d2:	8a 45 ce             	mov    -0x32(%ebp),%al
f01004d5:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01004d8:	ee                   	out    %al,(%dx)
f01004d9:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f01004e0:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f01004e4:	8a 45 cf             	mov    -0x31(%ebp),%al
f01004e7:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01004ea:	ee                   	out    %al,(%dx)
f01004eb:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f01004f2:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f01004f6:	8a 45 d0             	mov    -0x30(%ebp),%al
f01004f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01004fc:	ee                   	out    %al,(%dx)
f01004fd:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f0100504:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f0100508:	8a 45 d1             	mov    -0x2f(%ebp),%al
f010050b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010050e:	ee                   	out    %al,(%dx)
f010050f:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f0100516:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f010051a:	8a 45 d2             	mov    -0x2e(%ebp),%al
f010051d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0100520:	ee                   	out    %al,(%dx)
f0100521:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f0100528:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f010052c:	8a 45 d3             	mov    -0x2d(%ebp),%al
f010052f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100532:	ee                   	out    %al,(%dx)
f0100533:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f010053a:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f010053e:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0100541:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100544:	ee                   	out    %al,(%dx)
f0100545:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010054c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010054f:	89 c2                	mov    %eax,%edx
f0100551:	ec                   	in     (%dx),%al
f0100552:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f0100555:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f0100558:	3c ff                	cmp    $0xff,%al
f010055a:	0f 95 c0             	setne  %al
f010055d:	0f b6 c0             	movzbl %al,%eax
f0100560:	a3 c0 51 87 f0       	mov    %eax,0xf08751c0
f0100565:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010056c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010056f:	89 c2                	mov    %eax,%edx
f0100571:	ec                   	in     (%dx),%al
f0100572:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0100575:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f010057c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010057f:	89 c2                	mov    %eax,%edx
f0100581:	ec                   	in     (%dx),%al
f0100582:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f0100585:	90                   	nop
f0100586:	c9                   	leave  
f0100587:	c3                   	ret    

f0100588 <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f0100588:	55                   	push   %ebp
f0100589:	89 e5                	mov    %esp,%ebp
f010058b:	83 ec 20             	sub    $0x20,%esp
f010058e:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f0100595:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100598:	89 c2                	mov    %eax,%edx
f010059a:	ec                   	in     (%dx),%al
f010059b:	88 45 ec             	mov    %al,-0x14(%ebp)
f010059e:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f01005a5:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01005a8:	89 c2                	mov    %eax,%edx
f01005aa:	ec                   	in     (%dx),%al
f01005ab:	88 45 ed             	mov    %al,-0x13(%ebp)
f01005ae:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f01005b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01005b8:	89 c2                	mov    %eax,%edx
f01005ba:	ec                   	in     (%dx),%al
f01005bb:	88 45 ee             	mov    %al,-0x12(%ebp)
f01005be:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f01005c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01005c8:	89 c2                	mov    %eax,%edx
f01005ca:	ec                   	in     (%dx),%al
f01005cb:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f01005ce:	90                   	nop
f01005cf:	c9                   	leave  
f01005d0:	c3                   	ret    

f01005d1 <lpt_putc>:

static void
lpt_putc(int c)
{
f01005d1:	55                   	push   %ebp
f01005d2:	89 e5                	mov    %esp,%ebp
f01005d4:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01005d7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01005de:	eb 08                	jmp    f01005e8 <lpt_putc+0x17>
		delay();
f01005e0:	e8 a3 ff ff ff       	call   f0100588 <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01005e5:	ff 45 fc             	incl   -0x4(%ebp)
f01005e8:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f01005ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01005f2:	89 c2                	mov    %eax,%edx
f01005f4:	ec                   	in     (%dx),%al
f01005f5:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f01005f8:	8a 45 eb             	mov    -0x15(%ebp),%al
f01005fb:	84 c0                	test   %al,%al
f01005fd:	78 09                	js     f0100608 <lpt_putc+0x37>
f01005ff:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f0100606:	7e d8                	jle    f01005e0 <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f0100608:	8b 45 08             	mov    0x8(%ebp),%eax
f010060b:	0f b6 c0             	movzbl %al,%eax
f010060e:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f0100615:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100618:	8a 45 e8             	mov    -0x18(%ebp),%al
f010061b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010061e:	ee                   	out    %al,(%dx)
f010061f:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f0100626:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f010062a:	8a 45 e9             	mov    -0x17(%ebp),%al
f010062d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100630:	ee                   	out    %al,(%dx)
f0100631:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f0100638:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f010063c:	8a 45 ea             	mov    -0x16(%ebp),%al
f010063f:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100642:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f0100643:	90                   	nop
f0100644:	c9                   	leave  
f0100645:	c3                   	ret    

f0100646 <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f0100646:	55                   	push   %ebp
f0100647:	89 e5                	mov    %esp,%ebp
f0100649:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f010064c:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f0100653:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100656:	66 8b 00             	mov    (%eax),%ax
f0100659:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f010065d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100660:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f0100665:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100668:	66 8b 00             	mov    (%eax),%ax
f010066b:	66 3d 5a a5          	cmp    $0xa55a,%ax
f010066f:	74 13                	je     f0100684 <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f0100671:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f0100678:	c7 05 c4 51 87 f0 b4 	movl   $0x3b4,0xf08751c4
f010067f:	03 00 00 
f0100682:	eb 14                	jmp    f0100698 <cga_init+0x52>
	} else {
		*cp = was;
f0100684:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0100687:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f010068b:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f010068e:	c7 05 c4 51 87 f0 d4 	movl   $0x3d4,0xf08751c4
f0100695:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f0100698:	a1 c4 51 87 f0       	mov    0xf08751c4,%eax
f010069d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01006a0:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f01006a4:	8a 45 e0             	mov    -0x20(%ebp),%al
f01006a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01006aa:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f01006ab:	a1 c4 51 87 f0       	mov    0xf08751c4,%eax
f01006b0:	40                   	inc    %eax
f01006b1:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01006b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01006b7:	89 c2                	mov    %eax,%edx
f01006b9:	ec                   	in     (%dx),%al
f01006ba:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f01006bd:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01006c0:	0f b6 c0             	movzbl %al,%eax
f01006c3:	c1 e0 08             	shl    $0x8,%eax
f01006c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f01006c9:	a1 c4 51 87 f0       	mov    0xf08751c4,%eax
f01006ce:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01006d1:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01006d5:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01006d8:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01006db:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f01006dc:	a1 c4 51 87 f0       	mov    0xf08751c4,%eax
f01006e1:	40                   	inc    %eax
f01006e2:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01006e5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01006e8:	89 c2                	mov    %eax,%edx
f01006ea:	ec                   	in     (%dx),%al
f01006eb:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f01006ee:	8a 45 e3             	mov    -0x1d(%ebp),%al
f01006f1:	0f b6 c0             	movzbl %al,%eax
f01006f4:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f01006f7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01006fa:	a3 c8 51 87 f0       	mov    %eax,0xf08751c8
	crt_pos = pos;
f01006ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100702:	66 a3 cc 51 87 f0    	mov    %ax,0xf08751cc
}
f0100708:	90                   	nop
f0100709:	c9                   	leave  
f010070a:	c3                   	ret    

f010070b <cga_putc>:



void
cga_putc(int c)
{
f010070b:	55                   	push   %ebp
f010070c:	89 e5                	mov    %esp,%ebp
f010070e:	53                   	push   %ebx
f010070f:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f0100712:	8b 45 08             	mov    0x8(%ebp),%eax
f0100715:	b0 00                	mov    $0x0,%al
f0100717:	85 c0                	test   %eax,%eax
f0100719:	75 07                	jne    f0100722 <cga_putc+0x17>
		c |= 0x0700;
f010071b:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f0100722:	8b 45 08             	mov    0x8(%ebp),%eax
f0100725:	0f b6 c0             	movzbl %al,%eax
f0100728:	83 f8 09             	cmp    $0x9,%eax
f010072b:	0f 84 94 00 00 00    	je     f01007c5 <cga_putc+0xba>
f0100731:	83 f8 09             	cmp    $0x9,%eax
f0100734:	7f 0a                	jg     f0100740 <cga_putc+0x35>
f0100736:	83 f8 08             	cmp    $0x8,%eax
f0100739:	74 14                	je     f010074f <cga_putc+0x44>
f010073b:	e9 c8 00 00 00       	jmp    f0100808 <cga_putc+0xfd>
f0100740:	83 f8 0a             	cmp    $0xa,%eax
f0100743:	74 49                	je     f010078e <cga_putc+0x83>
f0100745:	83 f8 0d             	cmp    $0xd,%eax
f0100748:	74 53                	je     f010079d <cga_putc+0x92>
f010074a:	e9 b9 00 00 00       	jmp    f0100808 <cga_putc+0xfd>
	case '\b':
		if (crt_pos > 0) {
f010074f:	66 a1 cc 51 87 f0    	mov    0xf08751cc,%ax
f0100755:	66 85 c0             	test   %ax,%ax
f0100758:	0f 84 d0 00 00 00    	je     f010082e <cga_putc+0x123>
			crt_pos--;
f010075e:	66 a1 cc 51 87 f0    	mov    0xf08751cc,%ax
f0100764:	48                   	dec    %eax
f0100765:	66 a3 cc 51 87 f0    	mov    %ax,0xf08751cc
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f010076b:	8b 15 c8 51 87 f0    	mov    0xf08751c8,%edx
f0100771:	66 a1 cc 51 87 f0    	mov    0xf08751cc,%ax
f0100777:	0f b7 c0             	movzwl %ax,%eax
f010077a:	01 c0                	add    %eax,%eax
f010077c:	01 c2                	add    %eax,%edx
f010077e:	8b 45 08             	mov    0x8(%ebp),%eax
f0100781:	b0 00                	mov    $0x0,%al
f0100783:	83 c8 20             	or     $0x20,%eax
f0100786:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f0100789:	e9 a0 00 00 00       	jmp    f010082e <cga_putc+0x123>
	case '\n':
		crt_pos += CRT_COLS;
f010078e:	66 a1 cc 51 87 f0    	mov    0xf08751cc,%ax
f0100794:	83 c0 50             	add    $0x50,%eax
f0100797:	66 a3 cc 51 87 f0    	mov    %ax,0xf08751cc
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f010079d:	66 8b 0d cc 51 87 f0 	mov    0xf08751cc,%cx
f01007a4:	66 a1 cc 51 87 f0    	mov    0xf08751cc,%ax
f01007aa:	bb 50 00 00 00       	mov    $0x50,%ebx
f01007af:	ba 00 00 00 00       	mov    $0x0,%edx
f01007b4:	66 f7 f3             	div    %bx
f01007b7:	89 d0                	mov    %edx,%eax
f01007b9:	29 c1                	sub    %eax,%ecx
f01007bb:	89 c8                	mov    %ecx,%eax
f01007bd:	66 a3 cc 51 87 f0    	mov    %ax,0xf08751cc
		break;
f01007c3:	eb 6a                	jmp    f010082f <cga_putc+0x124>
	case '\t':
		cons_putc(' ');
f01007c5:	83 ec 0c             	sub    $0xc,%esp
f01007c8:	6a 20                	push   $0x20
f01007ca:	e8 69 04 00 00       	call   f0100c38 <cons_putc>
f01007cf:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007d2:	83 ec 0c             	sub    $0xc,%esp
f01007d5:	6a 20                	push   $0x20
f01007d7:	e8 5c 04 00 00       	call   f0100c38 <cons_putc>
f01007dc:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007df:	83 ec 0c             	sub    $0xc,%esp
f01007e2:	6a 20                	push   $0x20
f01007e4:	e8 4f 04 00 00       	call   f0100c38 <cons_putc>
f01007e9:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007ec:	83 ec 0c             	sub    $0xc,%esp
f01007ef:	6a 20                	push   $0x20
f01007f1:	e8 42 04 00 00       	call   f0100c38 <cons_putc>
f01007f6:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007f9:	83 ec 0c             	sub    $0xc,%esp
f01007fc:	6a 20                	push   $0x20
f01007fe:	e8 35 04 00 00       	call   f0100c38 <cons_putc>
f0100803:	83 c4 10             	add    $0x10,%esp
		break;
f0100806:	eb 27                	jmp    f010082f <cga_putc+0x124>
	default:
		crt_buf[crt_pos++] = c;		/* write the character */
f0100808:	8b 0d c8 51 87 f0    	mov    0xf08751c8,%ecx
f010080e:	66 a1 cc 51 87 f0    	mov    0xf08751cc,%ax
f0100814:	8d 50 01             	lea    0x1(%eax),%edx
f0100817:	66 89 15 cc 51 87 f0 	mov    %dx,0xf08751cc
f010081e:	0f b7 c0             	movzwl %ax,%eax
f0100821:	01 c0                	add    %eax,%eax
f0100823:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0100826:	8b 45 08             	mov    0x8(%ebp),%eax
f0100829:	66 89 02             	mov    %ax,(%edx)
		break;
f010082c:	eb 01                	jmp    f010082f <cga_putc+0x124>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f010082e:	90                   	nop
		crt_buf[crt_pos++] = c;		/* write the character */
		break;
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f010082f:	66 a1 cc 51 87 f0    	mov    0xf08751cc,%ax
f0100835:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100839:	76 58                	jbe    f0100893 <cga_putc+0x188>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f010083b:	a1 c8 51 87 f0       	mov    0xf08751c8,%eax
f0100840:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f0100846:	a1 c8 51 87 f0       	mov    0xf08751c8,%eax
f010084b:	83 ec 04             	sub    $0x4,%esp
f010084e:	68 00 0f 00 00       	push   $0xf00
f0100853:	52                   	push   %edx
f0100854:	50                   	push   %eax
f0100855:	e8 90 08 03 00       	call   f01310ea <memcpy>
f010085a:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f010085d:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f0100864:	eb 15                	jmp    f010087b <cga_putc+0x170>
			crt_buf[i] = 0x0700 | ' ';
f0100866:	8b 15 c8 51 87 f0    	mov    0xf08751c8,%edx
f010086c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010086f:	01 c0                	add    %eax,%eax
f0100871:	01 d0                	add    %edx,%eax
f0100873:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f0100878:	ff 45 f4             	incl   -0xc(%ebp)
f010087b:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f0100882:	7e e2                	jle    f0100866 <cga_putc+0x15b>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f0100884:	66 a1 cc 51 87 f0    	mov    0xf08751cc,%ax
f010088a:	83 e8 50             	sub    $0x50,%eax
f010088d:	66 a3 cc 51 87 f0    	mov    %ax,0xf08751cc
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f0100893:	a1 c4 51 87 f0       	mov    0xf08751c4,%eax
f0100898:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010089b:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010089f:	8a 45 e0             	mov    -0x20(%ebp),%al
f01008a2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01008a5:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f01008a6:	66 a1 cc 51 87 f0    	mov    0xf08751cc,%ax
f01008ac:	66 c1 e8 08          	shr    $0x8,%ax
f01008b0:	0f b6 c0             	movzbl %al,%eax
f01008b3:	8b 15 c4 51 87 f0    	mov    0xf08751c4,%edx
f01008b9:	42                   	inc    %edx
f01008ba:	89 55 ec             	mov    %edx,-0x14(%ebp)
f01008bd:	88 45 e1             	mov    %al,-0x1f(%ebp)
f01008c0:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01008c3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01008c6:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f01008c7:	a1 c4 51 87 f0       	mov    0xf08751c4,%eax
f01008cc:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01008cf:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f01008d3:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01008d6:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01008d9:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f01008da:	66 a1 cc 51 87 f0    	mov    0xf08751cc,%ax
f01008e0:	0f b6 c0             	movzbl %al,%eax
f01008e3:	8b 15 c4 51 87 f0    	mov    0xf08751c4,%edx
f01008e9:	42                   	inc    %edx
f01008ea:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f01008ed:	88 45 e3             	mov    %al,-0x1d(%ebp)
f01008f0:	8a 45 e3             	mov    -0x1d(%ebp),%al
f01008f3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01008f6:	ee                   	out    %al,(%dx)
}
f01008f7:	90                   	nop
f01008f8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01008fb:	c9                   	leave  
f01008fc:	c3                   	ret    

f01008fd <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f01008fd:	55                   	push   %ebp
f01008fe:	89 e5                	mov    %esp,%ebp
f0100900:	83 ec 28             	sub    $0x28,%esp
f0100903:	c7 45 e4 64 00 00 00 	movl   $0x64,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010090a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010090d:	89 c2                	mov    %eax,%edx
f010090f:	ec                   	in     (%dx),%al
f0100910:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f0100913:	8a 45 e3             	mov    -0x1d(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f0100916:	0f b6 c0             	movzbl %al,%eax
f0100919:	83 e0 01             	and    $0x1,%eax
f010091c:	85 c0                	test   %eax,%eax
f010091e:	75 0a                	jne    f010092a <kbd_proc_data+0x2d>
		return -1;
f0100920:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100925:	e9 54 01 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
f010092a:	c7 45 ec 60 00 00 00 	movl   $0x60,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100931:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100934:	89 c2                	mov    %eax,%edx
f0100936:	ec                   	in     (%dx),%al
f0100937:	88 45 e2             	mov    %al,-0x1e(%ebp)
	return data;
f010093a:	8a 45 e2             	mov    -0x1e(%ebp),%al

	data = inb(KBDATAP);
f010093d:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f0100940:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f0100944:	75 17                	jne    f010095d <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f0100946:	a1 e8 53 87 f0       	mov    0xf08753e8,%eax
f010094b:	83 c8 40             	or     $0x40,%eax
f010094e:	a3 e8 53 87 f0       	mov    %eax,0xf08753e8
		return 0;
f0100953:	b8 00 00 00 00       	mov    $0x0,%eax
f0100958:	e9 21 01 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
	} else if (data & 0x80) {
f010095d:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100960:	84 c0                	test   %al,%al
f0100962:	79 44                	jns    f01009a8 <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f0100964:	a1 e8 53 87 f0       	mov    0xf08753e8,%eax
f0100969:	83 e0 40             	and    $0x40,%eax
f010096c:	85 c0                	test   %eax,%eax
f010096e:	75 08                	jne    f0100978 <kbd_proc_data+0x7b>
f0100970:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100973:	83 e0 7f             	and    $0x7f,%eax
f0100976:	eb 03                	jmp    f010097b <kbd_proc_data+0x7e>
f0100978:	8a 45 f3             	mov    -0xd(%ebp),%al
f010097b:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f010097e:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100982:	8a 80 20 20 19 f0    	mov    -0xfe6dfe0(%eax),%al
f0100988:	83 c8 40             	or     $0x40,%eax
f010098b:	0f b6 c0             	movzbl %al,%eax
f010098e:	f7 d0                	not    %eax
f0100990:	89 c2                	mov    %eax,%edx
f0100992:	a1 e8 53 87 f0       	mov    0xf08753e8,%eax
f0100997:	21 d0                	and    %edx,%eax
f0100999:	a3 e8 53 87 f0       	mov    %eax,0xf08753e8
		return 0;
f010099e:	b8 00 00 00 00       	mov    $0x0,%eax
f01009a3:	e9 d6 00 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
	} else if (shift & E0ESC) {
f01009a8:	a1 e8 53 87 f0       	mov    0xf08753e8,%eax
f01009ad:	83 e0 40             	and    $0x40,%eax
f01009b0:	85 c0                	test   %eax,%eax
f01009b2:	74 11                	je     f01009c5 <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f01009b4:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f01009b8:	a1 e8 53 87 f0       	mov    0xf08753e8,%eax
f01009bd:	83 e0 bf             	and    $0xffffffbf,%eax
f01009c0:	a3 e8 53 87 f0       	mov    %eax,0xf08753e8
	}

	shift |= shiftcode[data];
f01009c5:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009c9:	8a 80 20 20 19 f0    	mov    -0xfe6dfe0(%eax),%al
f01009cf:	0f b6 d0             	movzbl %al,%edx
f01009d2:	a1 e8 53 87 f0       	mov    0xf08753e8,%eax
f01009d7:	09 d0                	or     %edx,%eax
f01009d9:	a3 e8 53 87 f0       	mov    %eax,0xf08753e8
	shift ^= togglecode[data];
f01009de:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009e2:	8a 80 20 21 19 f0    	mov    -0xfe6dee0(%eax),%al
f01009e8:	0f b6 d0             	movzbl %al,%edx
f01009eb:	a1 e8 53 87 f0       	mov    0xf08753e8,%eax
f01009f0:	31 d0                	xor    %edx,%eax
f01009f2:	a3 e8 53 87 f0       	mov    %eax,0xf08753e8

	c = charcode[shift & (CTL | SHIFT)][data];
f01009f7:	a1 e8 53 87 f0       	mov    0xf08753e8,%eax
f01009fc:	83 e0 03             	and    $0x3,%eax
f01009ff:	8b 14 85 20 25 19 f0 	mov    -0xfe6dae0(,%eax,4),%edx
f0100a06:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a0a:	01 d0                	add    %edx,%eax
f0100a0c:	8a 00                	mov    (%eax),%al
f0100a0e:	0f b6 c0             	movzbl %al,%eax
f0100a11:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (shift & CAPSLOCK) {
f0100a14:	a1 e8 53 87 f0       	mov    0xf08753e8,%eax
f0100a19:	83 e0 08             	and    $0x8,%eax
f0100a1c:	85 c0                	test   %eax,%eax
f0100a1e:	74 22                	je     f0100a42 <kbd_proc_data+0x145>
		if ('a' <= c && c <= 'z')
f0100a20:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100a24:	7e 0c                	jle    f0100a32 <kbd_proc_data+0x135>
f0100a26:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100a2a:	7f 06                	jg     f0100a32 <kbd_proc_data+0x135>
			c += 'A' - 'a';
f0100a2c:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f0100a30:	eb 10                	jmp    f0100a42 <kbd_proc_data+0x145>
		else if ('A' <= c && c <= 'Z')
f0100a32:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100a36:	7e 0a                	jle    f0100a42 <kbd_proc_data+0x145>
f0100a38:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f0100a3c:	7f 04                	jg     f0100a42 <kbd_proc_data+0x145>
			c += 'a' - 'A';
f0100a3e:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100a42:	a1 e8 53 87 f0       	mov    0xf08753e8,%eax
f0100a47:	f7 d0                	not    %eax
f0100a49:	83 e0 06             	and    $0x6,%eax
f0100a4c:	85 c0                	test   %eax,%eax
f0100a4e:	75 2b                	jne    f0100a7b <kbd_proc_data+0x17e>
f0100a50:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100a57:	75 22                	jne    f0100a7b <kbd_proc_data+0x17e>
		cprintf("Rebooting!\n");
f0100a59:	83 ec 0c             	sub    $0xc,%esp
f0100a5c:	68 dd 32 13 f0       	push   $0xf01332dd
f0100a61:	e8 a8 02 00 00       	call   f0100d0e <cprintf>
f0100a66:	83 c4 10             	add    $0x10,%esp
f0100a69:	c7 45 e8 92 00 00 00 	movl   $0x92,-0x18(%ebp)
f0100a70:	c6 45 e1 03          	movb   $0x3,-0x1f(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100a74:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100a77:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100a7a:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f0100a7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100a7e:	c9                   	leave  
f0100a7f:	c3                   	ret    

f0100a80 <kbd_intr>:

void
kbd_intr(void)
{
f0100a80:	55                   	push   %ebp
f0100a81:	89 e5                	mov    %esp,%ebp
f0100a83:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f0100a86:	83 ec 0c             	sub    $0xc,%esp
f0100a89:	68 fd 08 10 f0       	push   $0xf01008fd
f0100a8e:	e8 0c 00 00 00       	call   f0100a9f <cons_intr>
f0100a93:	83 c4 10             	add    $0x10,%esp
}
f0100a96:	90                   	nop
f0100a97:	c9                   	leave  
f0100a98:	c3                   	ret    

f0100a99 <kbd_init>:

void
kbd_init(void)
{
f0100a99:	55                   	push   %ebp
f0100a9a:	89 e5                	mov    %esp,%ebp
}
f0100a9c:	90                   	nop
f0100a9d:	5d                   	pop    %ebp
f0100a9e:	c3                   	ret    

f0100a9f <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f0100a9f:	55                   	push   %ebp
f0100aa0:	89 e5                	mov    %esp,%ebp
f0100aa2:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f0100aa5:	eb 35                	jmp    f0100adc <cons_intr+0x3d>
		if (c == 0)
f0100aa7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100aab:	75 02                	jne    f0100aaf <cons_intr+0x10>
			continue;
f0100aad:	eb 2d                	jmp    f0100adc <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f0100aaf:	a1 e4 53 87 f0       	mov    0xf08753e4,%eax
f0100ab4:	8d 50 01             	lea    0x1(%eax),%edx
f0100ab7:	89 15 e4 53 87 f0    	mov    %edx,0xf08753e4
f0100abd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100ac0:	88 90 e0 51 87 f0    	mov    %dl,-0xf78ae20(%eax)
		if (cons.wpos == CONSBUFSIZE)
f0100ac6:	a1 e4 53 87 f0       	mov    0xf08753e4,%eax
f0100acb:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100ad0:	75 0a                	jne    f0100adc <cons_intr+0x3d>
			cons.wpos = 0;
f0100ad2:	c7 05 e4 53 87 f0 00 	movl   $0x0,0xf08753e4
f0100ad9:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f0100adc:	8b 45 08             	mov    0x8(%ebp),%eax
f0100adf:	ff d0                	call   *%eax
f0100ae1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100ae4:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100ae8:	75 bd                	jne    f0100aa7 <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100aea:	90                   	nop
f0100aeb:	c9                   	leave  
f0100aec:	c3                   	ret    

f0100aed <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100aed:	55                   	push   %ebp
f0100aee:	89 e5                	mov    %esp,%ebp
f0100af0:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100af3:	e8 a7 f9 ff ff       	call   f010049f <serial_intr>
	kbd_intr();
f0100af8:	e8 83 ff ff ff       	call   f0100a80 <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100afd:	8b 15 e0 53 87 f0    	mov    0xf08753e0,%edx
f0100b03:	a1 e4 53 87 f0       	mov    0xf08753e4,%eax
f0100b08:	39 c2                	cmp    %eax,%edx
f0100b0a:	74 35                	je     f0100b41 <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100b0c:	a1 e0 53 87 f0       	mov    0xf08753e0,%eax
f0100b11:	8d 50 01             	lea    0x1(%eax),%edx
f0100b14:	89 15 e0 53 87 f0    	mov    %edx,0xf08753e0
f0100b1a:	8a 80 e0 51 87 f0    	mov    -0xf78ae20(%eax),%al
f0100b20:	0f b6 c0             	movzbl %al,%eax
f0100b23:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100b26:	a1 e0 53 87 f0       	mov    0xf08753e0,%eax
f0100b2b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b30:	75 0a                	jne    f0100b3c <cons_getc+0x4f>
			cons.rpos = 0;
f0100b32:	c7 05 e0 53 87 f0 00 	movl   $0x0,0xf08753e0
f0100b39:	00 00 00 
		return c;
f0100b3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100b3f:	eb 05                	jmp    f0100b46 <cons_getc+0x59>
	}
	return 0;
f0100b41:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100b46:	c9                   	leave  
f0100b47:	c3                   	ret    

f0100b48 <cons_getc2>:
// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100b48:	55                   	push   %ebp
f0100b49:	89 e5                	mov    %esp,%ebp
f0100b4b:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100b4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100b55:	a1 c0 51 87 f0       	mov    0xf08751c0,%eax
f0100b5a:	85 c0                	test   %eax,%eax
f0100b5c:	74 41                	je     f0100b9f <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100b5e:	e8 fa f8 ff ff       	call   f010045d <serial_proc_data>
f0100b63:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100b66:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100b6a:	74 33                	je     f0100b9f <cons_getc2+0x57>
				if (c1 == 0)
f0100b6c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100b70:	74 2d                	je     f0100b9f <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100b72:	a1 e4 53 87 f0       	mov    0xf08753e4,%eax
f0100b77:	8d 50 01             	lea    0x1(%eax),%edx
f0100b7a:	89 15 e4 53 87 f0    	mov    %edx,0xf08753e4
f0100b80:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100b83:	88 90 e0 51 87 f0    	mov    %dl,-0xf78ae20(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100b89:	a1 e4 53 87 f0       	mov    0xf08753e4,%eax
f0100b8e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b93:	75 0a                	jne    f0100b9f <cons_getc2+0x57>
						cons.wpos = 0;
f0100b95:	c7 05 e4 53 87 f0 00 	movl   $0x0,0xf08753e4
f0100b9c:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100b9f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100ba6:	e8 52 fd ff ff       	call   f01008fd <kbd_proc_data>
f0100bab:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100bae:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100bb2:	74 33                	je     f0100be7 <cons_getc2+0x9f>
			if (c2 == 0)
f0100bb4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100bb8:	74 2d                	je     f0100be7 <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100bba:	a1 e4 53 87 f0       	mov    0xf08753e4,%eax
f0100bbf:	8d 50 01             	lea    0x1(%eax),%edx
f0100bc2:	89 15 e4 53 87 f0    	mov    %edx,0xf08753e4
f0100bc8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100bcb:	88 90 e0 51 87 f0    	mov    %dl,-0xf78ae20(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100bd1:	a1 e4 53 87 f0       	mov    0xf08753e4,%eax
f0100bd6:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100bdb:	75 0a                	jne    f0100be7 <cons_getc2+0x9f>
					cons.wpos = 0;
f0100bdd:	c7 05 e4 53 87 f0 00 	movl   $0x0,0xf08753e4
f0100be4:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100be7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100beb:	7e 44                	jle    f0100c31 <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100bed:	8b 15 e0 53 87 f0    	mov    0xf08753e0,%edx
f0100bf3:	a1 e4 53 87 f0       	mov    0xf08753e4,%eax
f0100bf8:	39 c2                	cmp    %eax,%edx
f0100bfa:	74 35                	je     f0100c31 <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100bfc:	a1 e0 53 87 f0       	mov    0xf08753e0,%eax
f0100c01:	8d 50 01             	lea    0x1(%eax),%edx
f0100c04:	89 15 e0 53 87 f0    	mov    %edx,0xf08753e0
f0100c0a:	8a 80 e0 51 87 f0    	mov    -0xf78ae20(%eax),%al
f0100c10:	0f b6 c0             	movzbl %al,%eax
f0100c13:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100c16:	a1 e0 53 87 f0       	mov    0xf08753e0,%eax
f0100c1b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100c20:	75 0a                	jne    f0100c2c <cons_getc2+0xe4>
				cons.rpos = 0;
f0100c22:	c7 05 e0 53 87 f0 00 	movl   $0x0,0xf08753e0
f0100c29:	00 00 00 
			return c;
f0100c2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100c2f:	eb 05                	jmp    f0100c36 <cons_getc2+0xee>
		}
	}
	return 0;
f0100c31:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100c36:	c9                   	leave  
f0100c37:	c3                   	ret    

f0100c38 <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100c38:	55                   	push   %ebp
f0100c39:	89 e5                	mov    %esp,%ebp
f0100c3b:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100c3e:	ff 75 08             	pushl  0x8(%ebp)
f0100c41:	e8 8b f9 ff ff       	call   f01005d1 <lpt_putc>
f0100c46:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100c49:	83 ec 0c             	sub    $0xc,%esp
f0100c4c:	ff 75 08             	pushl  0x8(%ebp)
f0100c4f:	e8 b7 fa ff ff       	call   f010070b <cga_putc>
f0100c54:	83 c4 10             	add    $0x10,%esp
}
f0100c57:	90                   	nop
f0100c58:	c9                   	leave  
f0100c59:	c3                   	ret    

f0100c5a <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100c5a:	55                   	push   %ebp
f0100c5b:	89 e5                	mov    %esp,%ebp
f0100c5d:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100c60:	e8 e1 f9 ff ff       	call   f0100646 <cga_init>
	kbd_init();
f0100c65:	e8 2f fe ff ff       	call   f0100a99 <kbd_init>
	serial_init();
f0100c6a:	e8 52 f8 ff ff       	call   f01004c1 <serial_init>

	if (!serial_exists)
f0100c6f:	a1 c0 51 87 f0       	mov    0xf08751c0,%eax
f0100c74:	85 c0                	test   %eax,%eax
f0100c76:	75 10                	jne    f0100c88 <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100c78:	83 ec 0c             	sub    $0xc,%esp
f0100c7b:	68 e9 32 13 f0       	push   $0xf01332e9
f0100c80:	e8 89 00 00 00       	call   f0100d0e <cprintf>
f0100c85:	83 c4 10             	add    $0x10,%esp
}
f0100c88:	90                   	nop
f0100c89:	c9                   	leave  
f0100c8a:	c3                   	ret    

f0100c8b <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100c8b:	55                   	push   %ebp
f0100c8c:	89 e5                	mov    %esp,%ebp
f0100c8e:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100c91:	83 ec 0c             	sub    $0xc,%esp
f0100c94:	ff 75 08             	pushl  0x8(%ebp)
f0100c97:	e8 9c ff ff ff       	call   f0100c38 <cons_putc>
f0100c9c:	83 c4 10             	add    $0x10,%esp
}
f0100c9f:	90                   	nop
f0100ca0:	c9                   	leave  
f0100ca1:	c3                   	ret    

f0100ca2 <getchar>:

int
getchar(void)
{
f0100ca2:	55                   	push   %ebp
f0100ca3:	89 e5                	mov    %esp,%ebp
f0100ca5:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100ca8:	e8 40 fe ff ff       	call   f0100aed <cons_getc>
f0100cad:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100cb0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100cb4:	74 f2                	je     f0100ca8 <getchar+0x6>
		/* do nothing */;
	return c;
f0100cb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100cb9:	c9                   	leave  
f0100cba:	c3                   	ret    

f0100cbb <iscons>:

int
iscons(int fdnum)
{
f0100cbb:	55                   	push   %ebp
f0100cbc:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100cbe:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100cc3:	5d                   	pop    %ebp
f0100cc4:	c3                   	ret    

f0100cc5 <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f0100cc5:	55                   	push   %ebp
f0100cc6:	89 e5                	mov    %esp,%ebp
f0100cc8:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0100ccb:	83 ec 0c             	sub    $0xc,%esp
f0100cce:	ff 75 08             	pushl  0x8(%ebp)
f0100cd1:	e8 b5 ff ff ff       	call   f0100c8b <cputchar>
f0100cd6:	83 c4 10             	add    $0x10,%esp
	*cnt++;
f0100cd9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100cdc:	83 c0 04             	add    $0x4,%eax
f0100cdf:	89 45 0c             	mov    %eax,0xc(%ebp)
}
f0100ce2:	90                   	nop
f0100ce3:	c9                   	leave  
f0100ce4:	c3                   	ret    

f0100ce5 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0100ce5:	55                   	push   %ebp
f0100ce6:	89 e5                	mov    %esp,%ebp
f0100ce8:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0100ceb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0100cf2:	ff 75 0c             	pushl  0xc(%ebp)
f0100cf5:	ff 75 08             	pushl  0x8(%ebp)
f0100cf8:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0100cfb:	50                   	push   %eax
f0100cfc:	68 c5 0c 10 f0       	push   $0xf0100cc5
f0100d01:	e8 18 fb 02 00       	call   f013081e <vprintfmt>
f0100d06:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0100d09:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100d0c:	c9                   	leave  
f0100d0d:	c3                   	ret    

f0100d0e <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0100d0e:	55                   	push   %ebp
f0100d0f:	89 e5                	mov    %esp,%ebp
f0100d11:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f0100d14:	8d 45 0c             	lea    0xc(%ebp),%eax
f0100d17:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f0100d1a:	8b 45 08             	mov    0x8(%ebp),%eax
f0100d1d:	83 ec 08             	sub    $0x8,%esp
f0100d20:	ff 75 f4             	pushl  -0xc(%ebp)
f0100d23:	50                   	push   %eax
f0100d24:	e8 bc ff ff ff       	call   f0100ce5 <vcprintf>
f0100d29:	83 c4 10             	add    $0x10,%esp
f0100d2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f0100d2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0100d32:	c9                   	leave  
f0100d33:	c3                   	ret    

f0100d34 <run_command_prompt>:

//TODO: [PROJECT MS1] [COMMAND PROMPT] auto-complete

//invoke the command prompt
void run_command_prompt()
{
f0100d34:	55                   	push   %ebp
f0100d35:	89 e5                	mov    %esp,%ebp
f0100d37:	81 ec 08 04 00 00    	sub    $0x408,%esp
	char command_line[1024];

	while (1==1)
	{
		//get command line
		readline("FOS> ", command_line);
f0100d3d:	83 ec 08             	sub    $0x8,%esp
f0100d40:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100d46:	50                   	push   %eax
f0100d47:	68 06 33 13 f0       	push   $0xf0133306
f0100d4c:	e8 75 ff 02 00       	call   f0130cc6 <readline>
f0100d51:	83 c4 10             	add    $0x10,%esp

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f0100d54:	83 ec 0c             	sub    $0xc,%esp
f0100d57:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100d5d:	50                   	push   %eax
f0100d5e:	e8 0d 00 00 00       	call   f0100d70 <execute_command>
f0100d63:	83 c4 10             	add    $0x10,%esp
f0100d66:	85 c0                	test   %eax,%eax
f0100d68:	78 02                	js     f0100d6c <run_command_prompt+0x38>
				break;
	}
f0100d6a:	eb d1                	jmp    f0100d3d <run_command_prompt+0x9>
		readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0100d6c:	90                   	nop
	}
}
f0100d6d:	90                   	nop
f0100d6e:	c9                   	leave  
f0100d6f:	c3                   	ret    

f0100d70 <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0100d70:	55                   	push   %ebp
f0100d71:	89 e5                	mov    %esp,%ebp
f0100d73:	81 ec a8 00 00 00    	sub    $0xa8,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];
	char *auto_fun[MAX_ARGUMENTS];

	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f0100d79:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0100d7c:	50                   	push   %eax
f0100d7d:	8d 45 a0             	lea    -0x60(%ebp),%eax
f0100d80:	50                   	push   %eax
f0100d81:	68 0c 33 13 f0       	push   $0xf013330c
f0100d86:	ff 75 08             	pushl  0x8(%ebp)
f0100d89:	e8 72 07 03 00       	call   f0131500 <strsplit>
f0100d8e:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0100d91:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0100d94:	85 c0                	test   %eax,%eax
f0100d96:	75 0a                	jne    f0100da2 <execute_command+0x32>
		return 0;
f0100d98:	b8 00 00 00 00       	mov    $0x0,%eax
f0100d9d:	e9 37 01 00 00       	jmp    f0100ed9 <execute_command+0x169>

	// Lookup in the commands array and execute the command
	int command_found = 0;
f0100da2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int i ;
	int count = 0;
f0100da9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100db0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0100db7:	e9 8c 00 00 00       	jmp    f0100e48 <execute_command+0xd8>
	{
		if (strcmp(arguments[0], commands[i].name) == 0)
f0100dbc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100dbf:	89 d0                	mov    %edx,%eax
f0100dc1:	01 c0                	add    %eax,%eax
f0100dc3:	01 d0                	add    %edx,%eax
f0100dc5:	c1 e0 02             	shl    $0x2,%eax
f0100dc8:	05 40 25 19 f0       	add    $0xf0192540,%eax
f0100dcd:	8b 10                	mov    (%eax),%edx
f0100dcf:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100dd2:	83 ec 08             	sub    $0x8,%esp
f0100dd5:	52                   	push   %edx
f0100dd6:	50                   	push   %eax
f0100dd7:	e8 fc 01 03 00       	call   f0130fd8 <strcmp>
f0100ddc:	83 c4 10             	add    $0x10,%esp
f0100ddf:	85 c0                	test   %eax,%eax
f0100de1:	75 09                	jne    f0100dec <execute_command+0x7c>
		{
			command_found = 1;
f0100de3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
			break;
f0100dea:	eb 6c                	jmp    f0100e58 <execute_command+0xe8>
		}
		else if (strncmp(arguments[0], commands[i].name,strlen(arguments[0])) == 0)
f0100dec:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100def:	83 ec 0c             	sub    $0xc,%esp
f0100df2:	50                   	push   %eax
f0100df3:	e8 d4 00 03 00       	call   f0130ecc <strlen>
f0100df8:	83 c4 10             	add    $0x10,%esp
f0100dfb:	89 c1                	mov    %eax,%ecx
f0100dfd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e00:	89 d0                	mov    %edx,%eax
f0100e02:	01 c0                	add    %eax,%eax
f0100e04:	01 d0                	add    %edx,%eax
f0100e06:	c1 e0 02             	shl    $0x2,%eax
f0100e09:	05 40 25 19 f0       	add    $0xf0192540,%eax
f0100e0e:	8b 10                	mov    (%eax),%edx
f0100e10:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100e13:	83 ec 04             	sub    $0x4,%esp
f0100e16:	51                   	push   %ecx
f0100e17:	52                   	push   %edx
f0100e18:	50                   	push   %eax
f0100e19:	e8 f2 01 03 00       	call   f0131010 <strncmp>
f0100e1e:	83 c4 10             	add    $0x10,%esp
f0100e21:	85 c0                	test   %eax,%eax
f0100e23:	75 20                	jne    f0100e45 <execute_command+0xd5>
		{
			auto_fun[count] = commands[i].name;
f0100e25:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e28:	89 d0                	mov    %edx,%eax
f0100e2a:	01 c0                	add    %eax,%eax
f0100e2c:	01 d0                	add    %edx,%eax
f0100e2e:	c1 e0 02             	shl    $0x2,%eax
f0100e31:	05 40 25 19 f0       	add    $0xf0192540,%eax
f0100e36:	8b 10                	mov    (%eax),%edx
f0100e38:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100e3b:	89 94 85 60 ff ff ff 	mov    %edx,-0xa0(%ebp,%eax,4)
			count++;
f0100e42:	ff 45 ec             	incl   -0x14(%ebp)

	// Lookup in the commands array and execute the command
	int command_found = 0;
	int i ;
	int count = 0;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100e45:	ff 45 f0             	incl   -0x10(%ebp)
f0100e48:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e4b:	a1 ac 28 19 f0       	mov    0xf01928ac,%eax
f0100e50:	39 c2                	cmp    %eax,%edx
f0100e52:	0f 82 64 ff ff ff    	jb     f0100dbc <execute_command+0x4c>
			auto_fun[count] = commands[i].name;
			count++;
		}
	}

	if(command_found)
f0100e58:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100e5c:	74 2b                	je     f0100e89 <execute_command+0x119>
	{
		int return_value;
		return_value = commands[i].function_to_execute(number_of_arguments, arguments);
f0100e5e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e61:	89 d0                	mov    %edx,%eax
f0100e63:	01 c0                	add    %eax,%eax
f0100e65:	01 d0                	add    %edx,%eax
f0100e67:	c1 e0 02             	shl    $0x2,%eax
f0100e6a:	05 48 25 19 f0       	add    $0xf0192548,%eax
f0100e6f:	8b 00                	mov    (%eax),%eax
f0100e71:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0100e74:	83 ec 08             	sub    $0x8,%esp
f0100e77:	8d 4d a0             	lea    -0x60(%ebp),%ecx
f0100e7a:	51                   	push   %ecx
f0100e7b:	52                   	push   %edx
f0100e7c:	ff d0                	call   *%eax
f0100e7e:	83 c4 10             	add    $0x10,%esp
f0100e81:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		return return_value;
f0100e84:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100e87:	eb 50                	jmp    f0100ed9 <execute_command+0x169>
	}
	else if (count == 0)
f0100e89:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0100e8d:	75 16                	jne    f0100ea5 <execute_command+0x135>
	{
		//if not found, then it's unknown command
		cprintf("Unknown command '%s'\n", arguments[0]);
f0100e8f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100e92:	83 ec 08             	sub    $0x8,%esp
f0100e95:	50                   	push   %eax
f0100e96:	68 11 33 13 f0       	push   $0xf0133311
f0100e9b:	e8 6e fe ff ff       	call   f0100d0e <cprintf>
f0100ea0:	83 c4 10             	add    $0x10,%esp
f0100ea3:	eb 2f                	jmp    f0100ed4 <execute_command+0x164>
	}
	else
	{
		int loop;
		for(loop = 0; loop < count; loop++)
f0100ea5:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0100eac:	eb 1e                	jmp    f0100ecc <execute_command+0x15c>
			cprintf("%s\n", auto_fun[loop]);
f0100eae:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100eb1:	8b 84 85 60 ff ff ff 	mov    -0xa0(%ebp,%eax,4),%eax
f0100eb8:	83 ec 08             	sub    $0x8,%esp
f0100ebb:	50                   	push   %eax
f0100ebc:	68 27 33 13 f0       	push   $0xf0133327
f0100ec1:	e8 48 fe ff ff       	call   f0100d0e <cprintf>
f0100ec6:	83 c4 10             	add    $0x10,%esp
		cprintf("Unknown command '%s'\n", arguments[0]);
	}
	else
	{
		int loop;
		for(loop = 0; loop < count; loop++)
f0100ec9:	ff 45 e8             	incl   -0x18(%ebp)
f0100ecc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100ecf:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0100ed2:	7c da                	jl     f0100eae <execute_command+0x13e>
			cprintf("%s\n", auto_fun[loop]);
	}
	return 0;
f0100ed4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100ed9:	c9                   	leave  
f0100eda:	c3                   	ret    

f0100edb <setKHeapPlacementStrategyCONTALLOC>:
#define KHP_PLACE_FIRSTFIT 	0x1
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0100edb:	55                   	push   %ebp
f0100edc:	89 e5                	mov    %esp,%ebp
f0100ede:	c7 05 5c 5d 87 f0 00 	movl   $0x0,0xf0875d5c
f0100ee5:	00 00 00 
f0100ee8:	90                   	nop
f0100ee9:	5d                   	pop    %ebp
f0100eea:	c3                   	ret    

f0100eeb <setKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0100eeb:	55                   	push   %ebp
f0100eec:	89 e5                	mov    %esp,%ebp
f0100eee:	c7 05 5c 5d 87 f0 01 	movl   $0x1,0xf0875d5c
f0100ef5:	00 00 00 
f0100ef8:	90                   	nop
f0100ef9:	5d                   	pop    %ebp
f0100efa:	c3                   	ret    

f0100efb <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0100efb:	55                   	push   %ebp
f0100efc:	89 e5                	mov    %esp,%ebp
f0100efe:	c7 05 5c 5d 87 f0 02 	movl   $0x2,0xf0875d5c
f0100f05:	00 00 00 
f0100f08:	90                   	nop
f0100f09:	5d                   	pop    %ebp
f0100f0a:	c3                   	ret    

f0100f0b <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0100f0b:	55                   	push   %ebp
f0100f0c:	89 e5                	mov    %esp,%ebp
f0100f0e:	c7 05 5c 5d 87 f0 03 	movl   $0x3,0xf0875d5c
f0100f15:	00 00 00 
f0100f18:	90                   	nop
f0100f19:	5d                   	pop    %ebp
f0100f1a:	c3                   	ret    

f0100f1b <setKHeapPlacementStrategyWORSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0100f1b:	55                   	push   %ebp
f0100f1c:	89 e5                	mov    %esp,%ebp
f0100f1e:	c7 05 5c 5d 87 f0 04 	movl   $0x4,0xf0875d5c
f0100f25:	00 00 00 
f0100f28:	90                   	nop
f0100f29:	5d                   	pop    %ebp
f0100f2a:	c3                   	ret    

f0100f2b <isKHeapPlacementStrategyCONTALLOC>:

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0100f2b:	55                   	push   %ebp
f0100f2c:	89 e5                	mov    %esp,%ebp
f0100f2e:	a1 5c 5d 87 f0       	mov    0xf0875d5c,%eax
f0100f33:	85 c0                	test   %eax,%eax
f0100f35:	75 04                	jne    f0100f3b <isKHeapPlacementStrategyCONTALLOC+0x10>
f0100f37:	b0 01                	mov    $0x1,%al
f0100f39:	eb 02                	jmp    f0100f3d <isKHeapPlacementStrategyCONTALLOC+0x12>
f0100f3b:	b0 00                	mov    $0x0,%al
f0100f3d:	5d                   	pop    %ebp
f0100f3e:	c3                   	ret    

f0100f3f <isKHeapPlacementStrategyFIRSTFIT>:
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100f3f:	55                   	push   %ebp
f0100f40:	89 e5                	mov    %esp,%ebp
f0100f42:	a1 5c 5d 87 f0       	mov    0xf0875d5c,%eax
f0100f47:	83 f8 01             	cmp    $0x1,%eax
f0100f4a:	75 04                	jne    f0100f50 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0100f4c:	b0 01                	mov    $0x1,%al
f0100f4e:	eb 02                	jmp    f0100f52 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0100f50:	b0 00                	mov    $0x0,%al
f0100f52:	5d                   	pop    %ebp
f0100f53:	c3                   	ret    

f0100f54 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f0100f54:	55                   	push   %ebp
f0100f55:	89 e5                	mov    %esp,%ebp
f0100f57:	a1 5c 5d 87 f0       	mov    0xf0875d5c,%eax
f0100f5c:	83 f8 02             	cmp    $0x2,%eax
f0100f5f:	75 04                	jne    f0100f65 <isKHeapPlacementStrategyBESTFIT+0x11>
f0100f61:	b0 01                	mov    $0x1,%al
f0100f63:	eb 02                	jmp    f0100f67 <isKHeapPlacementStrategyBESTFIT+0x13>
f0100f65:	b0 00                	mov    $0x0,%al
f0100f67:	5d                   	pop    %ebp
f0100f68:	c3                   	ret    

f0100f69 <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0100f69:	55                   	push   %ebp
f0100f6a:	89 e5                	mov    %esp,%ebp
f0100f6c:	a1 5c 5d 87 f0       	mov    0xf0875d5c,%eax
f0100f71:	83 f8 03             	cmp    $0x3,%eax
f0100f74:	75 04                	jne    f0100f7a <isKHeapPlacementStrategyNEXTFIT+0x11>
f0100f76:	b0 01                	mov    $0x1,%al
f0100f78:	eb 02                	jmp    f0100f7c <isKHeapPlacementStrategyNEXTFIT+0x13>
f0100f7a:	b0 00                	mov    $0x0,%al
f0100f7c:	5d                   	pop    %ebp
f0100f7d:	c3                   	ret    

f0100f7e <isKHeapPlacementStrategyWORSTFIT>:
static inline uint8 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f0100f7e:	55                   	push   %ebp
f0100f7f:	89 e5                	mov    %esp,%ebp
f0100f81:	a1 5c 5d 87 f0       	mov    0xf0875d5c,%eax
f0100f86:	83 f8 04             	cmp    $0x4,%eax
f0100f89:	75 04                	jne    f0100f8f <isKHeapPlacementStrategyWORSTFIT+0x11>
f0100f8b:	b0 01                	mov    $0x1,%al
f0100f8d:	eb 02                	jmp    f0100f91 <isKHeapPlacementStrategyWORSTFIT+0x13>
f0100f8f:	b0 00                	mov    $0x0,%al
f0100f91:	5d                   	pop    %ebp
f0100f92:	c3                   	ret    

f0100f93 <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f0100f93:	55                   	push   %ebp
f0100f94:	89 e5                	mov    %esp,%ebp
f0100f96:	c7 05 30 5d 87 f0 01 	movl   $0x1,0xf0875d30
f0100f9d:	00 00 00 
f0100fa0:	90                   	nop
f0100fa1:	5d                   	pop    %ebp
f0100fa2:	c3                   	ret    

f0100fa3 <setUHeapPlacementStrategyBESTFIT>:
static inline void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f0100fa3:	55                   	push   %ebp
f0100fa4:	89 e5                	mov    %esp,%ebp
f0100fa6:	c7 05 30 5d 87 f0 02 	movl   $0x2,0xf0875d30
f0100fad:	00 00 00 
f0100fb0:	90                   	nop
f0100fb1:	5d                   	pop    %ebp
f0100fb2:	c3                   	ret    

f0100fb3 <setUHeapPlacementStrategyNEXTFIT>:
static inline void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f0100fb3:	55                   	push   %ebp
f0100fb4:	89 e5                	mov    %esp,%ebp
f0100fb6:	c7 05 30 5d 87 f0 03 	movl   $0x3,0xf0875d30
f0100fbd:	00 00 00 
f0100fc0:	90                   	nop
f0100fc1:	5d                   	pop    %ebp
f0100fc2:	c3                   	ret    

f0100fc3 <setUHeapPlacementStrategyWORSTFIT>:
static inline void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f0100fc3:	55                   	push   %ebp
f0100fc4:	89 e5                	mov    %esp,%ebp
f0100fc6:	c7 05 30 5d 87 f0 04 	movl   $0x4,0xf0875d30
f0100fcd:	00 00 00 
f0100fd0:	90                   	nop
f0100fd1:	5d                   	pop    %ebp
f0100fd2:	c3                   	ret    

f0100fd3 <isUHeapPlacementStrategyFIRSTFIT>:

static inline uint8 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100fd3:	55                   	push   %ebp
f0100fd4:	89 e5                	mov    %esp,%ebp
f0100fd6:	a1 30 5d 87 f0       	mov    0xf0875d30,%eax
f0100fdb:	83 f8 01             	cmp    $0x1,%eax
f0100fde:	75 04                	jne    f0100fe4 <isUHeapPlacementStrategyFIRSTFIT+0x11>
f0100fe0:	b0 01                	mov    $0x1,%al
f0100fe2:	eb 02                	jmp    f0100fe6 <isUHeapPlacementStrategyFIRSTFIT+0x13>
f0100fe4:	b0 00                	mov    $0x0,%al
f0100fe6:	5d                   	pop    %ebp
f0100fe7:	c3                   	ret    

f0100fe8 <isUHeapPlacementStrategyBESTFIT>:
static inline uint8 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f0100fe8:	55                   	push   %ebp
f0100fe9:	89 e5                	mov    %esp,%ebp
f0100feb:	a1 30 5d 87 f0       	mov    0xf0875d30,%eax
f0100ff0:	83 f8 02             	cmp    $0x2,%eax
f0100ff3:	75 04                	jne    f0100ff9 <isUHeapPlacementStrategyBESTFIT+0x11>
f0100ff5:	b0 01                	mov    $0x1,%al
f0100ff7:	eb 02                	jmp    f0100ffb <isUHeapPlacementStrategyBESTFIT+0x13>
f0100ff9:	b0 00                	mov    $0x0,%al
f0100ffb:	5d                   	pop    %ebp
f0100ffc:	c3                   	ret    

f0100ffd <isUHeapPlacementStrategyNEXTFIT>:
static inline uint8 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0100ffd:	55                   	push   %ebp
f0100ffe:	89 e5                	mov    %esp,%ebp
f0101000:	a1 30 5d 87 f0       	mov    0xf0875d30,%eax
f0101005:	83 f8 03             	cmp    $0x3,%eax
f0101008:	75 04                	jne    f010100e <isUHeapPlacementStrategyNEXTFIT+0x11>
f010100a:	b0 01                	mov    $0x1,%al
f010100c:	eb 02                	jmp    f0101010 <isUHeapPlacementStrategyNEXTFIT+0x13>
f010100e:	b0 00                	mov    $0x0,%al
f0101010:	5d                   	pop    %ebp
f0101011:	c3                   	ret    

f0101012 <isUHeapPlacementStrategyWORSTFIT>:
static inline uint8 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f0101012:	55                   	push   %ebp
f0101013:	89 e5                	mov    %esp,%ebp
f0101015:	a1 30 5d 87 f0       	mov    0xf0875d30,%eax
f010101a:	83 f8 04             	cmp    $0x4,%eax
f010101d:	75 04                	jne    f0101023 <isUHeapPlacementStrategyWORSTFIT+0x11>
f010101f:	b0 01                	mov    $0x1,%al
f0101021:	eb 02                	jmp    f0101025 <isUHeapPlacementStrategyWORSTFIT+0x13>
f0101023:	b0 00                	mov    $0x0,%al
f0101025:	5d                   	pop    %ebp
f0101026:	c3                   	ret    

f0101027 <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0101027:	55                   	push   %ebp
f0101028:	89 e5                	mov    %esp,%ebp
f010102a:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f010102d:	8b 45 08             	mov    0x8(%ebp),%eax
f0101030:	c1 e8 0c             	shr    $0xc,%eax
f0101033:	89 c2                	mov    %eax,%edx
f0101035:	a1 10 5d 87 f0       	mov    0xf0875d10,%eax
f010103a:	39 c2                	cmp    %eax,%edx
f010103c:	72 14                	jb     f0101052 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f010103e:	83 ec 04             	sub    $0x4,%esp
f0101041:	68 2c 33 13 f0       	push   $0xf013332c
f0101046:	6a 55                	push   $0x55
f0101048:	68 54 33 13 f0       	push   $0xf0133354
f010104d:	e8 b3 f1 ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f0101052:	8b 15 54 5d 87 f0    	mov    0xf0875d54,%edx
f0101058:	8b 45 08             	mov    0x8(%ebp),%eax
f010105b:	c1 e8 0c             	shr    $0xc,%eax
f010105e:	89 c1                	mov    %eax,%ecx
f0101060:	89 c8                	mov    %ecx,%eax
f0101062:	01 c0                	add    %eax,%eax
f0101064:	01 c8                	add    %ecx,%eax
f0101066:	c1 e0 03             	shl    $0x3,%eax
f0101069:	01 d0                	add    %edx,%eax
}
f010106b:	c9                   	leave  
f010106c:	c3                   	ret    

f010106d <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f010106d:	55                   	push   %ebp
f010106e:	89 e5                	mov    %esp,%ebp
f0101070:	53                   	push   %ebx
f0101071:	83 ec 14             	sub    $0x14,%esp
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0101074:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010107b:	eb 3b                	jmp    f01010b8 <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f010107d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0101080:	89 d0                	mov    %edx,%eax
f0101082:	01 c0                	add    %eax,%eax
f0101084:	01 d0                	add    %edx,%eax
f0101086:	c1 e0 02             	shl    $0x2,%eax
f0101089:	05 44 25 19 f0       	add    $0xf0192544,%eax
f010108e:	8b 10                	mov    (%eax),%edx
f0101090:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101093:	89 c8                	mov    %ecx,%eax
f0101095:	01 c0                	add    %eax,%eax
f0101097:	01 c8                	add    %ecx,%eax
f0101099:	c1 e0 02             	shl    $0x2,%eax
f010109c:	05 40 25 19 f0       	add    $0xf0192540,%eax
f01010a1:	8b 00                	mov    (%eax),%eax
f01010a3:	83 ec 04             	sub    $0x4,%esp
f01010a6:	52                   	push   %edx
f01010a7:	50                   	push   %eax
f01010a8:	68 ce 41 13 f0       	push   $0xf01341ce
f01010ad:	e8 5c fc ff ff       	call   f0100d0e <cprintf>
f01010b2:	83 c4 10             	add    $0x10,%esp

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f01010b5:	ff 45 f4             	incl   -0xc(%ebp)
f01010b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01010bb:	a1 ac 28 19 f0       	mov    0xf01928ac,%eax
f01010c0:	39 c2                	cmp    %eax,%edx
f01010c2:	72 b9                	jb     f010107d <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f01010c4:	83 ec 0c             	sub    $0xc,%esp
f01010c7:	68 d7 41 13 f0       	push   $0xf01341d7
f01010cc:	e8 3d fc ff ff       	call   f0100d0e <cprintf>
f01010d1:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f01010d4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01010db:	eb 42                	jmp    f010111f <command_help+0xb2>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f01010dd:	8b 0d 14 2d 19 f0    	mov    0xf0192d14,%ecx
f01010e3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01010e6:	89 d0                	mov    %edx,%eax
f01010e8:	01 c0                	add    %eax,%eax
f01010ea:	01 d0                	add    %edx,%eax
f01010ec:	c1 e0 02             	shl    $0x2,%eax
f01010ef:	01 c8                	add    %ecx,%eax
f01010f1:	8b 50 04             	mov    0x4(%eax),%edx
f01010f4:	8b 1d 14 2d 19 f0    	mov    0xf0192d14,%ebx
f01010fa:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01010fd:	89 c8                	mov    %ecx,%eax
f01010ff:	01 c0                	add    %eax,%eax
f0101101:	01 c8                	add    %ecx,%eax
f0101103:	c1 e0 02             	shl    $0x2,%eax
f0101106:	01 d8                	add    %ebx,%eax
f0101108:	8b 00                	mov    (%eax),%eax
f010110a:	83 ec 04             	sub    $0x4,%esp
f010110d:	52                   	push   %edx
f010110e:	50                   	push   %eax
f010110f:	68 ec 41 13 f0       	push   $0xf01341ec
f0101114:	e8 f5 fb ff ff       	call   f0100d0e <cprintf>
f0101119:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f010111c:	ff 45 f4             	incl   -0xc(%ebp)
f010111f:	a1 18 2d 19 f0       	mov    0xf0192d18,%eax
f0101124:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0101127:	7c b4                	jl     f01010dd <command_help+0x70>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f0101129:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010112e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0101131:	c9                   	leave  
f0101132:	c3                   	ret    

f0101133 <command_kernel_info>:

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f0101133:	55                   	push   %ebp
f0101134:	89 e5                	mov    %esp,%ebp
f0101136:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f0101139:	83 ec 0c             	sub    $0xc,%esp
f010113c:	68 08 42 13 f0       	push   $0xf0134208
f0101141:	e8 c8 fb ff ff       	call   f0100d0e <cprintf>
f0101146:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f0101149:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f010114e:	83 ec 04             	sub    $0x4,%esp
f0101151:	50                   	push   %eax
f0101152:	68 0c 00 10 f0       	push   $0xf010000c
f0101157:	68 24 42 13 f0       	push   $0xf0134224
f010115c:	e8 ad fb ff ff       	call   f0100d0e <cprintf>
f0101161:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f0101164:	b8 51 31 13 00       	mov    $0x133151,%eax
f0101169:	83 ec 04             	sub    $0x4,%esp
f010116c:	50                   	push   %eax
f010116d:	68 51 31 13 f0       	push   $0xf0133151
f0101172:	68 60 42 13 f0       	push   $0xf0134260
f0101177:	e8 92 fb ff ff       	call   f0100d0e <cprintf>
f010117c:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f010117f:	b8 9c 51 87 00       	mov    $0x87519c,%eax
f0101184:	83 ec 04             	sub    $0x4,%esp
f0101187:	50                   	push   %eax
f0101188:	68 9c 51 87 f0       	push   $0xf087519c
f010118d:	68 9c 42 13 f0       	push   $0xf013429c
f0101192:	e8 77 fb ff ff       	call   f0100d0e <cprintf>
f0101197:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f010119a:	b8 bc 5e 87 00       	mov    $0x875ebc,%eax
f010119f:	83 ec 04             	sub    $0x4,%esp
f01011a2:	50                   	push   %eax
f01011a3:	68 bc 5e 87 f0       	push   $0xf0875ebc
f01011a8:	68 e4 42 13 f0       	push   $0xf01342e4
f01011ad:	e8 5c fb ff ff       	call   f0100d0e <cprintf>
f01011b2:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f01011b5:	b8 bc 5e 87 f0       	mov    $0xf0875ebc,%eax
f01011ba:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f01011c0:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f01011c5:	29 c2                	sub    %eax,%edx
f01011c7:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f01011c9:	85 c0                	test   %eax,%eax
f01011cb:	79 05                	jns    f01011d2 <command_kernel_info+0x9f>
f01011cd:	05 ff 03 00 00       	add    $0x3ff,%eax
f01011d2:	c1 f8 0a             	sar    $0xa,%eax
f01011d5:	83 ec 08             	sub    $0x8,%esp
f01011d8:	50                   	push   %eax
f01011d9:	68 20 43 13 f0       	push   $0xf0134320
f01011de:	e8 2b fb ff ff       	call   f0100d0e <cprintf>
f01011e3:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f01011e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01011eb:	c9                   	leave  
f01011ec:	c3                   	ret    

f01011ed <command_kernel_base_info>:

//===========================================================================
//Lab3.Examples
//=============
int command_kernel_base_info(int number_of_arguments, char **arguments)
{
f01011ed:	55                   	push   %ebp
f01011ee:	89 e5                	mov    %esp,%ebp
f01011f0:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "ikb"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011f3:	83 ec 04             	sub    $0x4,%esp
f01011f6:	68 4c 43 13 f0       	push   $0xf013434c
f01011fb:	68 b0 00 00 00       	push   $0xb0
f0101200:	68 6d 43 13 f0       	push   $0xf013436d
f0101205:	e8 fb ef ff ff       	call   f0100205 <_panic>

f010120a <command_del_kernel_base>:
	return 0;
}


int command_del_kernel_base(int number_of_arguments, char **arguments)
{
f010120a:	55                   	push   %ebp
f010120b:	89 e5                	mov    %esp,%ebp
f010120d:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "dkb"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101210:	83 ec 04             	sub    $0x4,%esp
f0101213:	68 4c 43 13 f0       	push   $0xf013434c
f0101218:	68 ba 00 00 00       	push   $0xba
f010121d:	68 6d 43 13 f0       	push   $0xf013436d
f0101222:	e8 de ef ff ff       	call   f0100205 <_panic>

f0101227 <command_share_page>:

	return 0;
}

int command_share_page(int number_of_arguments, char **arguments)
{
f0101227:	55                   	push   %ebp
f0101228:	89 e5                	mov    %esp,%ebp
f010122a:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "shr"
	//Comment the following line
	panic("Function is not implemented yet!");
f010122d:	83 ec 04             	sub    $0x4,%esp
f0101230:	68 4c 43 13 f0       	push   $0xf013434c
f0101235:	68 c3 00 00 00       	push   $0xc3
f010123a:	68 6d 43 13 f0       	push   $0xf013436d
f010123f:	e8 c1 ef ff ff       	call   f0100205 <_panic>

f0101244 <command_show_mapping>:

//===========================================================================
//Lab4.Hands.On
//=============
int command_show_mapping(int number_of_arguments, char **arguments)
{
f0101244:	55                   	push   %ebp
f0101245:	89 e5                	mov    %esp,%ebp
f0101247:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sm"
	//Comment the following line
	panic("Function is not implemented yet!");
f010124a:	83 ec 04             	sub    $0x4,%esp
f010124d:	68 4c 43 13 f0       	push   $0xf013434c
f0101252:	68 cf 00 00 00       	push   $0xcf
f0101257:	68 6d 43 13 f0       	push   $0xf013436d
f010125c:	e8 a4 ef ff ff       	call   f0100205 <_panic>

f0101261 <command_set_permission>:

	return 0 ;
}

int command_set_permission(int number_of_arguments, char **arguments)
{
f0101261:	55                   	push   %ebp
f0101262:	89 e5                	mov    %esp,%ebp
f0101264:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sp"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101267:	83 ec 04             	sub    $0x4,%esp
f010126a:	68 4c 43 13 f0       	push   $0xf013434c
f010126f:	68 d8 00 00 00       	push   $0xd8
f0101274:	68 6d 43 13 f0       	push   $0xf013436d
f0101279:	e8 87 ef ff ff       	call   f0100205 <_panic>

f010127e <command_share_range>:

	return 0 ;
}

int command_share_range(int number_of_arguments, char **arguments)
{
f010127e:	55                   	push   %ebp
f010127f:	89 e5                	mov    %esp,%ebp
f0101281:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sr"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101284:	83 ec 04             	sub    $0x4,%esp
f0101287:	68 4c 43 13 f0       	push   $0xf013434c
f010128c:	68 e1 00 00 00       	push   $0xe1
f0101291:	68 6d 43 13 f0       	push   $0xf013436d
f0101296:	e8 6a ef ff ff       	call   f0100205 <_panic>

f010129b <command_nr>:
//===========================================================================
//Lab5.Examples
//==============
//[1] Number of references on the given physical address
int command_nr(int number_of_arguments, char **arguments)
{
f010129b:	55                   	push   %ebp
f010129c:	89 e5                	mov    %esp,%ebp
f010129e:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "nr"
	//Comment the following line
	panic("Function is not implemented yet!");
f01012a1:	83 ec 04             	sub    $0x4,%esp
f01012a4:	68 4c 43 13 f0       	push   $0xf013434c
f01012a9:	68 ee 00 00 00       	push   $0xee
f01012ae:	68 6d 43 13 f0       	push   $0xf013436d
f01012b3:	e8 4d ef ff ff       	call   f0100205 <_panic>

f01012b8 <command_ap>:
	return 0;
}

//[2] Allocate Page: If the given user virtual address is mapped, do nothing. Else, allocate a single frame and map it to a given virtual address in the user space
int command_ap(int number_of_arguments, char **arguments)
{
f01012b8:	55                   	push   %ebp
f01012b9:	89 e5                	mov    %esp,%ebp
f01012bb:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "ap"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f01012be:	8b 45 0c             	mov    0xc(%ebp),%eax
f01012c1:	83 c0 04             	add    $0x4,%eax
f01012c4:	8b 00                	mov    (%eax),%eax
f01012c6:	83 ec 04             	sub    $0x4,%esp
f01012c9:	6a 10                	push   $0x10
f01012cb:	6a 00                	push   $0x0
f01012cd:	50                   	push   %eax
f01012ce:	e8 59 ff 02 00       	call   f013122c <strtol>
f01012d3:	83 c4 10             	add    $0x10,%esp
f01012d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct FrameInfo* ptr_frame_info;
	int ret = allocate_frame(&ptr_frame_info) ;
f01012d9:	83 ec 0c             	sub    $0xc,%esp
f01012dc:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01012df:	50                   	push   %eax
f01012e0:	e8 0d 56 00 00       	call   f01068f2 <allocate_frame>
f01012e5:	83 c4 10             	add    $0x10,%esp
f01012e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	map_frame(ptr_page_directory, ptr_frame_info, va, PERM_USER | PERM_WRITEABLE);
f01012eb:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01012ee:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f01012f3:	6a 06                	push   $0x6
f01012f5:	ff 75 f4             	pushl  -0xc(%ebp)
f01012f8:	52                   	push   %edx
f01012f9:	50                   	push   %eax
f01012fa:	e8 42 5a 00 00       	call   f0106d41 <map_frame>
f01012ff:	83 c4 10             	add    $0x10,%esp

	return 0 ;
f0101302:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101307:	c9                   	leave  
f0101308:	c3                   	ret    

f0101309 <command_fp>:

//[3] Free Page: Un-map a single page at the given virtual address in the user space
int command_fp(int number_of_arguments, char **arguments)
{
f0101309:	55                   	push   %ebp
f010130a:	89 e5                	mov    %esp,%ebp
f010130c:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "fp"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f010130f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101312:	83 c0 04             	add    $0x4,%eax
f0101315:	8b 00                	mov    (%eax),%eax
f0101317:	83 ec 04             	sub    $0x4,%esp
f010131a:	6a 10                	push   $0x10
f010131c:	6a 00                	push   $0x0
f010131e:	50                   	push   %eax
f010131f:	e8 08 ff 02 00       	call   f013122c <strtol>
f0101324:	83 c4 10             	add    $0x10,%esp
f0101327:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// Un-map the page at this address
	unmap_frame(ptr_page_directory, va);
f010132a:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f010132f:	83 ec 08             	sub    $0x8,%esp
f0101332:	ff 75 f4             	pushl  -0xc(%ebp)
f0101335:	50                   	push   %eax
f0101336:	e8 3b 5b 00 00       	call   f0106e76 <unmap_frame>
f010133b:	83 c4 10             	add    $0x10,%esp

	return 0;
f010133e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101343:	c9                   	leave  
f0101344:	c3                   	ret    

f0101345 <command_asp>:
//===========================================================================
//Lab5.Hands-on
//==============
//[1] Allocate Shared Pages
int command_asp(int number_of_arguments, char **arguments)
{
f0101345:	55                   	push   %ebp
f0101346:	89 e5                	mov    %esp,%ebp
f0101348:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "asp"
	//Comment the following line
	panic("Function is not implemented yet!");
f010134b:	83 ec 04             	sub    $0x4,%esp
f010134e:	68 4c 43 13 f0       	push   $0xf013434c
f0101353:	68 18 01 00 00       	push   $0x118
f0101358:	68 6d 43 13 f0       	push   $0xf013436d
f010135d:	e8 a3 ee ff ff       	call   f0100205 <_panic>

f0101362 <command_cfp>:
}


//[2] Count Free Pages in Range
int command_cfp(int number_of_arguments, char **arguments)
{
f0101362:	55                   	push   %ebp
f0101363:	89 e5                	mov    %esp,%ebp
f0101365:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "cfp"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101368:	83 ec 04             	sub    $0x4,%esp
f010136b:	68 4c 43 13 f0       	push   $0xf013434c
f0101370:	68 23 01 00 00       	push   $0x123
f0101375:	68 6d 43 13 f0       	push   $0xf013436d
f010137a:	e8 86 ee ff ff       	call   f0100205 <_panic>

f010137f <command_ft>:

//===========================================================================
//Lab6.Examples
//=============
int command_ft(int number_of_arguments, char **arguments)
{
f010137f:	55                   	push   %ebp
f0101380:	89 e5                	mov    %esp,%ebp
	//TODO: LAB6 Example: fill this function. corresponding command name is "ft"
	//Comment the following line

	return 0;
f0101382:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101387:	5d                   	pop    %ebp
f0101388:	c3                   	ret    

f0101389 <command_writeusermem>:

//*****************************************************************************************//
//***************************** PROJECT HELPERS COMMAND ***********************************//
//*****************************************************************************************//
int command_writeusermem(int number_of_arguments, char **arguments)
{
f0101389:	55                   	push   %ebp
f010138a:	89 e5                	mov    %esp,%ebp
f010138c:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 3)
f010138f:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0101393:	75 37                	jne    f01013cc <command_writeusermem+0x43>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f0101395:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101398:	83 c0 04             	add    $0x4,%eax
f010139b:	8b 00                	mov    (%eax),%eax
f010139d:	83 ec 04             	sub    $0x4,%esp
f01013a0:	6a 10                	push   $0x10
f01013a2:	6a 00                	push   $0x0
f01013a4:	50                   	push   %eax
f01013a5:	e8 82 fe 02 00       	call   f013122c <strtol>
f01013aa:	83 c4 10             	add    $0x10,%esp
f01013ad:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address) ;
f01013b0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01013b3:	89 45 d8             	mov    %eax,-0x28(%ebp)

		*ptr = arguments[2][0];
f01013b6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013b9:	83 c0 08             	add    $0x8,%eax
f01013bc:	8b 00                	mov    (%eax),%eax
f01013be:	8a 00                	mov    (%eax),%al
f01013c0:	88 c2                	mov    %al,%dl
f01013c2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01013c5:	88 10                	mov    %dl,(%eax)
f01013c7:	e9 b9 00 00 00       	jmp    f0101485 <command_writeusermem+0xfc>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 4)
f01013cc:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01013d0:	0f 85 9f 00 00 00    	jne    f0101475 <command_writeusermem+0xec>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01013d6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013d9:	83 c0 04             	add    $0x4,%eax
f01013dc:	8b 00                	mov    (%eax),%eax
f01013de:	83 ec 04             	sub    $0x4,%esp
f01013e1:	6a 0a                	push   $0xa
f01013e3:	6a 00                	push   $0x0
f01013e5:	50                   	push   %eax
f01013e6:	e8 41 fe 02 00       	call   f013122c <strtol>
f01013eb:	83 c4 10             	add    $0x10,%esp
f01013ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f01013f1:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f01013f8:	83 ec 04             	sub    $0x4,%esp
f01013fb:	6a 00                	push   $0x0
f01013fd:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101400:	50                   	push   %eax
f0101401:	ff 75 f4             	pushl  -0xc(%ebp)
f0101404:	e8 01 87 00 00       	call   f0109b0a <envid2env>
f0101409:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f010140c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010140f:	83 c0 08             	add    $0x8,%eax
f0101412:	8b 00                	mov    (%eax),%eax
f0101414:	83 ec 04             	sub    $0x4,%esp
f0101417:	6a 10                	push   $0x10
f0101419:	6a 00                	push   $0x0
f010141b:	50                   	push   %eax
f010141c:	e8 0b fe 02 00       	call   f013122c <strtol>
f0101421:	83 c4 10             	add    $0x10,%esp
f0101424:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f0101427:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010142a:	85 c0                	test   %eax,%eax
f010142c:	75 07                	jne    f0101435 <command_writeusermem+0xac>
f010142e:	b8 00 00 00 00       	mov    $0x0,%eax
f0101433:	eb 55                	jmp    f010148a <command_writeusermem+0x101>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101435:	0f 20 d8             	mov    %cr3,%eax
f0101438:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f010143b:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f010143e:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32) (env->env_cr3));
f0101441:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101444:	8b 40 60             	mov    0x60(%eax),%eax
f0101447:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010144a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010144d:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0101450:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101453:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		*ptr = arguments[3][0];
f0101456:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101459:	83 c0 0c             	add    $0xc,%eax
f010145c:	8b 00                	mov    (%eax),%eax
f010145e:	8a 00                	mov    (%eax),%al
f0101460:	88 c2                	mov    %al,%dl
f0101462:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101465:	88 10                	mov    %dl,(%eax)
f0101467:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010146a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010146d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101470:	0f 22 d8             	mov    %eax,%cr3
f0101473:	eb 10                	jmp    f0101485 <command_writeusermem+0xfc>
		lcr3(oldDir);
	}
	else
	{
		cprintf("wum command: invalid number of arguments\n") ;
f0101475:	83 ec 0c             	sub    $0xc,%esp
f0101478:	68 84 43 13 f0       	push   $0xf0134384
f010147d:	e8 8c f8 ff ff       	call   f0100d0e <cprintf>
f0101482:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101485:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010148a:	c9                   	leave  
f010148b:	c3                   	ret    

f010148c <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f010148c:	55                   	push   %ebp
f010148d:	89 e5                	mov    %esp,%ebp
f010148f:	83 ec 28             	sub    $0x28,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101492:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101495:	83 c0 04             	add    $0x4,%eax
f0101498:	8b 00                	mov    (%eax),%eax
f010149a:	83 ec 04             	sub    $0x4,%esp
f010149d:	6a 10                	push   $0x10
f010149f:	6a 00                	push   $0x0
f01014a1:	50                   	push   %eax
f01014a2:	e8 85 fd 02 00       	call   f013122c <strtol>
f01014a7:	83 c4 10             	add    $0x10,%esp
f01014aa:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01014af:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f01014b2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014b5:	83 c0 08             	add    $0x8,%eax
f01014b8:	8b 00                	mov    (%eax),%eax
f01014ba:	83 ec 04             	sub    $0x4,%esp
f01014bd:	6a 0a                	push   $0xa
f01014bf:	6a 00                	push   $0x0
f01014c1:	50                   	push   %eax
f01014c2:	e8 65 fd 02 00       	call   f013122c <strtol>
f01014c7:	83 c4 10             	add    $0x10,%esp
f01014ca:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int c, i=0;
f01014cd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int stringLen = strlen(arguments[3]);
f01014d4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014d7:	83 c0 0c             	add    $0xc,%eax
f01014da:	8b 00                	mov    (%eax),%eax
f01014dc:	83 ec 0c             	sub    $0xc,%esp
f01014df:	50                   	push   %eax
f01014e0:	e8 e7 f9 02 00       	call   f0130ecc <strlen>
f01014e5:	83 c4 10             	add    $0x10,%esp
f01014e8:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	for(c=0; c<size; c++)
f01014eb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01014f2:	eb 30                	jmp    f0101524 <command_writemem_k+0x98>
	{
		for(i=0;i < stringLen; i++)
f01014f4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01014fb:	eb 1c                	jmp    f0101519 <command_writemem_k+0x8d>
		{
			*address = arguments[3][i];
f01014fd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101500:	83 c0 0c             	add    $0xc,%eax
f0101503:	8b 10                	mov    (%eax),%edx
f0101505:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101508:	01 d0                	add    %edx,%eax
f010150a:	8a 00                	mov    (%eax),%al
f010150c:	88 c2                	mov    %al,%dl
f010150e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101511:	88 10                	mov    %dl,(%eax)
			address++;
f0101513:	ff 45 f4             	incl   -0xc(%ebp)
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
	{
		for(i=0;i < stringLen; i++)
f0101516:	ff 45 ec             	incl   -0x14(%ebp)
f0101519:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010151c:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010151f:	7c dc                	jl     f01014fd <command_writemem_k+0x71>
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
f0101521:	ff 45 f0             	incl   -0x10(%ebp)
f0101524:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101527:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010152a:	7c c8                	jl     f01014f4 <command_writemem_k+0x68>
		{
			*address = arguments[3][i];
			address++;
		}
	}
	return 0;
f010152c:	b8 00 00 00 00       	mov    $0x0,%eax


}
f0101531:	c9                   	leave  
f0101532:	c3                   	ret    

f0101533 <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f0101533:	55                   	push   %ebp
f0101534:	89 e5                	mov    %esp,%ebp
f0101536:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 2)
f0101539:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010153d:	75 42                	jne    f0101581 <command_readusermem+0x4e>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f010153f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101542:	83 c0 04             	add    $0x4,%eax
f0101545:	8b 00                	mov    (%eax),%eax
f0101547:	83 ec 04             	sub    $0x4,%esp
f010154a:	6a 10                	push   $0x10
f010154c:	6a 00                	push   $0x0
f010154e:	50                   	push   %eax
f010154f:	e8 d8 fc 02 00       	call   f013122c <strtol>
f0101554:	83 c4 10             	add    $0x10,%esp
f0101557:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address ) ;
f010155a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010155d:	89 45 d8             	mov    %eax,-0x28(%ebp)

		cprintf("value at address %x = %c\n", ptr, *ptr);
f0101560:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101563:	8a 00                	mov    (%eax),%al
f0101565:	0f b6 c0             	movzbl %al,%eax
f0101568:	83 ec 04             	sub    $0x4,%esp
f010156b:	50                   	push   %eax
f010156c:	ff 75 d8             	pushl  -0x28(%ebp)
f010156f:	68 ae 43 13 f0       	push   $0xf01343ae
f0101574:	e8 95 f7 ff ff       	call   f0100d0e <cprintf>
f0101579:	83 c4 10             	add    $0x10,%esp
f010157c:	e9 c4 00 00 00       	jmp    f0101645 <command_readusermem+0x112>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 3)
f0101581:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0101585:	0f 85 aa 00 00 00    	jne    f0101635 <command_readusermem+0x102>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f010158b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010158e:	83 c0 04             	add    $0x4,%eax
f0101591:	8b 00                	mov    (%eax),%eax
f0101593:	83 ec 04             	sub    $0x4,%esp
f0101596:	6a 0a                	push   $0xa
f0101598:	6a 00                	push   $0x0
f010159a:	50                   	push   %eax
f010159b:	e8 8c fc 02 00       	call   f013122c <strtol>
f01015a0:	83 c4 10             	add    $0x10,%esp
f01015a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f01015a6:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f01015ad:	83 ec 04             	sub    $0x4,%esp
f01015b0:	6a 00                	push   $0x0
f01015b2:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01015b5:	50                   	push   %eax
f01015b6:	ff 75 f4             	pushl  -0xc(%ebp)
f01015b9:	e8 4c 85 00 00       	call   f0109b0a <envid2env>
f01015be:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f01015c1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01015c4:	83 c0 08             	add    $0x8,%eax
f01015c7:	8b 00                	mov    (%eax),%eax
f01015c9:	83 ec 04             	sub    $0x4,%esp
f01015cc:	6a 10                	push   $0x10
f01015ce:	6a 00                	push   $0x0
f01015d0:	50                   	push   %eax
f01015d1:	e8 56 fc 02 00       	call   f013122c <strtol>
f01015d6:	83 c4 10             	add    $0x10,%esp
f01015d9:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f01015dc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01015df:	85 c0                	test   %eax,%eax
f01015e1:	75 07                	jne    f01015ea <command_readusermem+0xb7>
f01015e3:	b8 00 00 00 00       	mov    $0x0,%eax
f01015e8:	eb 60                	jmp    f010164a <command_readusermem+0x117>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01015ea:	0f 20 d8             	mov    %cr3,%eax
f01015ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f01015f0:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f01015f3:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32)( env->env_cr3));
f01015f6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01015f9:	8b 40 60             	mov    0x60(%eax),%eax
f01015fc:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01015ff:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101602:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0101605:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101608:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		cprintf("value at address %x = %c\n", address, *ptr);
f010160b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010160e:	8a 00                	mov    (%eax),%al
f0101610:	0f b6 c0             	movzbl %al,%eax
f0101613:	83 ec 04             	sub    $0x4,%esp
f0101616:	50                   	push   %eax
f0101617:	ff 75 f0             	pushl  -0x10(%ebp)
f010161a:	68 ae 43 13 f0       	push   $0xf01343ae
f010161f:	e8 ea f6 ff ff       	call   f0100d0e <cprintf>
f0101624:	83 c4 10             	add    $0x10,%esp
f0101627:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010162a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010162d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101630:	0f 22 d8             	mov    %eax,%cr3
f0101633:	eb 10                	jmp    f0101645 <command_readusermem+0x112>

		lcr3(oldDir);
	}
	else
	{
		cprintf("rum command: invalid number of arguments\n") ;
f0101635:	83 ec 0c             	sub    $0xc,%esp
f0101638:	68 c8 43 13 f0       	push   $0xf01343c8
f010163d:	e8 cc f6 ff ff       	call   f0100d0e <cprintf>
f0101642:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101645:	b8 00 00 00 00       	mov    $0x0,%eax

}
f010164a:	c9                   	leave  
f010164b:	c3                   	ret    

f010164c <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f010164c:	55                   	push   %ebp
f010164d:	89 e5                	mov    %esp,%ebp
f010164f:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101652:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101655:	83 c0 04             	add    $0x4,%eax
f0101658:	8b 00                	mov    (%eax),%eax
f010165a:	83 ec 04             	sub    $0x4,%esp
f010165d:	6a 10                	push   $0x10
f010165f:	6a 00                	push   $0x0
f0101661:	50                   	push   %eax
f0101662:	e8 c5 fb 02 00       	call   f013122c <strtol>
f0101667:	83 c4 10             	add    $0x10,%esp
f010166a:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010166f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f0101672:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101675:	83 c0 08             	add    $0x8,%eax
f0101678:	8b 00                	mov    (%eax),%eax
f010167a:	83 ec 04             	sub    $0x4,%esp
f010167d:	6a 0a                	push   $0xa
f010167f:	6a 00                	push   $0x0
f0101681:	50                   	push   %eax
f0101682:	e8 a5 fb 02 00       	call   f013122c <strtol>
f0101687:	83 c4 10             	add    $0x10,%esp
f010168a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int i=0;
f010168d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for(;i < size; i++)
f0101694:	eb 22                	jmp    f01016b8 <command_readmem_k+0x6c>
	{
		cprintf("%c",*address++);
f0101696:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101699:	8d 50 01             	lea    0x1(%eax),%edx
f010169c:	89 55 f4             	mov    %edx,-0xc(%ebp)
f010169f:	8a 00                	mov    (%eax),%al
f01016a1:	0f b6 c0             	movzbl %al,%eax
f01016a4:	83 ec 08             	sub    $0x8,%esp
f01016a7:	50                   	push   %eax
f01016a8:	68 f2 43 13 f0       	push   $0xf01343f2
f01016ad:	e8 5c f6 ff ff       	call   f0100d0e <cprintf>
f01016b2:	83 c4 10             	add    $0x10,%esp
int command_readmem_k(int number_of_arguments, char **arguments)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int i=0;
	for(;i < size; i++)
f01016b5:	ff 45 f0             	incl   -0x10(%ebp)
f01016b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01016bb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01016be:	7c d6                	jl     f0101696 <command_readmem_k+0x4a>
	{
		cprintf("%c",*address++);
	}
	cprintf("\n");
f01016c0:	83 ec 0c             	sub    $0xc,%esp
f01016c3:	68 f5 43 13 f0       	push   $0xf01343f5
f01016c8:	e8 41 f6 ff ff       	call   f0100d0e <cprintf>
f01016cd:	83 c4 10             	add    $0x10,%esp
	return 0;
f01016d0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01016d5:	c9                   	leave  
f01016d6:	c3                   	ret    

f01016d7 <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f01016d7:	55                   	push   %ebp
f01016d8:	89 e5                	mov    %esp,%ebp
f01016da:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01016dd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016e0:	83 c0 04             	add    $0x4,%eax
f01016e3:	8b 00                	mov    (%eax),%eax
f01016e5:	83 ec 04             	sub    $0x4,%esp
f01016e8:	6a 0a                	push   $0xa
f01016ea:	6a 00                	push   $0x0
f01016ec:	50                   	push   %eax
f01016ed:	e8 3a fb 02 00       	call   f013122c <strtol>
f01016f2:	83 c4 10             	add    $0x10,%esp
f01016f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f01016f8:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f01016ff:	83 ec 04             	sub    $0x4,%esp
f0101702:	6a 00                	push   $0x0
f0101704:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101707:	50                   	push   %eax
f0101708:	ff 75 ec             	pushl  -0x14(%ebp)
f010170b:	e8 fa 83 00 00       	call   f0109b0a <envid2env>
f0101710:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f0101713:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101716:	83 c0 08             	add    $0x8,%eax
f0101719:	8b 00                	mov    (%eax),%eax
f010171b:	83 ec 04             	sub    $0x4,%esp
f010171e:	6a 10                	push   $0x10
f0101720:	6a 00                	push   $0x0
f0101722:	50                   	push   %eax
f0101723:	e8 04 fb 02 00       	call   f013122c <strtol>
f0101728:	83 c4 10             	add    $0x10,%esp
f010172b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f010172e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101731:	83 c0 0c             	add    $0xc,%eax
f0101734:	8b 00                	mov    (%eax),%eax
f0101736:	83 ec 04             	sub    $0x4,%esp
f0101739:	6a 0a                	push   $0xa
f010173b:	6a 00                	push   $0x0
f010173d:	50                   	push   %eax
f010173e:	e8 e9 fa 02 00       	call   f013122c <strtol>
f0101743:	83 c4 10             	add    $0x10,%esp
f0101746:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f0101749:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010174c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f010174f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101752:	85 c0                	test   %eax,%eax
f0101754:	75 07                	jne    f010175d <command_readuserblock+0x86>
f0101756:	b8 00 00 00 00       	mov    $0x0,%eax
f010175b:	eb 65                	jmp    f01017c2 <command_readuserblock+0xeb>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f010175d:	0f 20 d8             	mov    %cr3,%eax
f0101760:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f0101763:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f0101766:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f0101769:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010176c:	8b 40 60             	mov    0x60(%eax),%eax
f010176f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101772:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101775:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f0101778:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010177f:	eb 28                	jmp    f01017a9 <command_readuserblock+0xd2>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f0101781:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101784:	8a 00                	mov    (%eax),%al
f0101786:	0f b6 d0             	movzbl %al,%edx
f0101789:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010178c:	8a 00                	mov    (%eax),%al
f010178e:	0f b6 c0             	movzbl %al,%eax
f0101791:	52                   	push   %edx
f0101792:	50                   	push   %eax
f0101793:	ff 75 f4             	pushl  -0xc(%ebp)
f0101796:	68 f7 43 13 f0       	push   $0xf01343f7
f010179b:	e8 6e f5 ff ff       	call   f0100d0e <cprintf>
f01017a0:	83 c4 10             	add    $0x10,%esp
		ptr++;
f01017a3:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f01017a6:	ff 45 f0             	incl   -0x10(%ebp)
f01017a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01017ac:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01017af:	7c d0                	jl     f0101781 <command_readuserblock+0xaa>
f01017b1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01017b4:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01017b7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01017ba:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f01017bd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01017c2:	c9                   	leave  
f01017c3:	c3                   	ret    

f01017c4 <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f01017c4:	55                   	push   %ebp
f01017c5:	89 e5                	mov    %esp,%ebp
f01017c7:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01017ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f01017cd:	83 c0 04             	add    $0x4,%eax
f01017d0:	8b 00                	mov    (%eax),%eax
f01017d2:	83 ec 04             	sub    $0x4,%esp
f01017d5:	6a 0a                	push   $0xa
f01017d7:	6a 00                	push   $0x0
f01017d9:	50                   	push   %eax
f01017da:	e8 4d fa 02 00       	call   f013122c <strtol>
f01017df:	83 c4 10             	add    $0x10,%esp
f01017e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f01017e5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f01017ec:	83 ec 04             	sub    $0x4,%esp
f01017ef:	6a 00                	push   $0x0
f01017f1:	8d 45 d8             	lea    -0x28(%ebp),%eax
f01017f4:	50                   	push   %eax
f01017f5:	ff 75 f4             	pushl  -0xc(%ebp)
f01017f8:	e8 0d 83 00 00       	call   f0109b0a <envid2env>
f01017fd:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0101800:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101803:	85 c0                	test   %eax,%eax
f0101805:	75 0a                	jne    f0101811 <command_remove_table+0x4d>
f0101807:	b8 00 00 00 00       	mov    $0x0,%eax
f010180c:	e9 c7 00 00 00       	jmp    f01018d8 <command_remove_table+0x114>

	uint32 address = strtol(arguments[2], NULL, 16);
f0101811:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101814:	83 c0 08             	add    $0x8,%eax
f0101817:	8b 00                	mov    (%eax),%eax
f0101819:	83 ec 04             	sub    $0x4,%esp
f010181c:	6a 10                	push   $0x10
f010181e:	6a 00                	push   $0x0
f0101820:	50                   	push   %eax
f0101821:	e8 06 fa 02 00       	call   f013122c <strtol>
f0101826:	83 c4 10             	add    $0x10,%esp
f0101829:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f010182c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010182f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f0101832:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101835:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101838:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010183b:	c1 ea 16             	shr    $0x16,%edx
f010183e:	c1 e2 02             	shl    $0x2,%edx
f0101841:	01 d0                	add    %edx,%eax
f0101843:	8b 00                	mov    (%eax),%eax
f0101845:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010184a:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//remove the table
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(va))
f010184d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101850:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f0101855:	77 1c                	ja     f0101873 <command_remove_table+0xaf>
	{
		kfree((void*)kheap_virtual_address(table_pa));
f0101857:	83 ec 0c             	sub    $0xc,%esp
f010185a:	ff 75 e8             	pushl  -0x18(%ebp)
f010185d:	e8 15 62 00 00       	call   f0107a77 <kheap_virtual_address>
f0101862:	83 c4 10             	add    $0x10,%esp
f0101865:	83 ec 0c             	sub    $0xc,%esp
f0101868:	50                   	push   %eax
f0101869:	e8 e2 60 00 00       	call   f0107950 <kfree>
f010186e:	83 c4 10             	add    $0x10,%esp
f0101871:	eb 28                	jmp    f010189b <command_remove_table+0xd7>
	}
	else
	{
		// get the physical address and FrameInfo of the page table
		struct FrameInfo *table_FrameInfo = to_frame_info(table_pa);
f0101873:	83 ec 0c             	sub    $0xc,%esp
f0101876:	ff 75 e8             	pushl  -0x18(%ebp)
f0101879:	e8 a9 f7 ff ff       	call   f0101027 <to_frame_info>
f010187e:	83 c4 10             	add    $0x10,%esp
f0101881:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_FrameInfo->references = 0;
f0101884:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101887:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_FrameInfo);
f010188d:	83 ec 0c             	sub    $0xc,%esp
f0101890:	ff 75 e4             	pushl  -0x1c(%ebp)
f0101893:	e8 6f 51 00 00       	call   f0106a07 <free_frame>
f0101898:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f010189b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010189e:	c1 e8 16             	shr    $0x16,%eax
f01018a1:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f01018a4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01018a7:	8b 40 5c             	mov    0x5c(%eax),%eax
f01018aa:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01018ad:	c1 e2 02             	shl    $0x2,%edx
f01018b0:	01 c2                	add    %eax,%edx
f01018b2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01018b5:	8b 40 5c             	mov    0x5c(%eax),%eax
f01018b8:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f01018bb:	c1 e1 02             	shl    $0x2,%ecx
f01018be:	01 c8                	add    %ecx,%eax
f01018c0:	8b 00                	mov    (%eax),%eax
f01018c2:	83 e0 fe             	and    $0xfffffffe,%eax
f01018c5:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01018c7:	0f 20 d8             	mov    %cr3,%eax
f01018ca:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01018cd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01018d0:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f01018d3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01018d8:	c9                   	leave  
f01018d9:	c3                   	ret    

f01018da <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f01018da:	55                   	push   %ebp
f01018db:	89 e5                	mov    %esp,%ebp
f01018dd:	83 ec 28             	sub    $0x28,%esp
	if (number_of_arguments < 3 || number_of_arguments > 4)
f01018e0:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f01018e4:	7e 06                	jle    f01018ec <command_allocuserpage+0x12>
f01018e6:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01018ea:	7e 1a                	jle    f0101906 <command_allocuserpage+0x2c>
	{
		cprintf("aup command: invalid number of arguments\n") ;
f01018ec:	83 ec 0c             	sub    $0xc,%esp
f01018ef:	68 08 44 13 f0       	push   $0xf0134408
f01018f4:	e8 15 f4 ff ff       	call   f0100d0e <cprintf>
f01018f9:	83 c4 10             	add    $0x10,%esp
		return 0;
f01018fc:	b8 00 00 00 00       	mov    $0x0,%eax
f0101901:	e9 46 01 00 00       	jmp    f0101a4c <command_allocuserpage+0x172>
	}
	int32 envId = strtol(arguments[1],NULL, 10);
f0101906:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101909:	83 c0 04             	add    $0x4,%eax
f010190c:	8b 00                	mov    (%eax),%eax
f010190e:	83 ec 04             	sub    $0x4,%esp
f0101911:	6a 0a                	push   $0xa
f0101913:	6a 00                	push   $0x0
f0101915:	50                   	push   %eax
f0101916:	e8 11 f9 02 00       	call   f013122c <strtol>
f010191b:	83 c4 10             	add    $0x10,%esp
f010191e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct Env* env = NULL;
f0101921:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	envid2env(envId, &env, 0 );
f0101928:	83 ec 04             	sub    $0x4,%esp
f010192b:	6a 00                	push   $0x0
f010192d:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0101930:	50                   	push   %eax
f0101931:	ff 75 f0             	pushl  -0x10(%ebp)
f0101934:	e8 d1 81 00 00       	call   f0109b0a <envid2env>
f0101939:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f010193c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010193f:	85 c0                	test   %eax,%eax
f0101941:	75 0a                	jne    f010194d <command_allocuserpage+0x73>
f0101943:	b8 00 00 00 00       	mov    $0x0,%eax
f0101948:	e9 ff 00 00 00       	jmp    f0101a4c <command_allocuserpage+0x172>

	uint32 va = strtol(arguments[2], NULL, 16);
f010194d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101950:	83 c0 08             	add    $0x8,%eax
f0101953:	8b 00                	mov    (%eax),%eax
f0101955:	83 ec 04             	sub    $0x4,%esp
f0101958:	6a 10                	push   $0x10
f010195a:	6a 00                	push   $0x0
f010195c:	50                   	push   %eax
f010195d:	e8 ca f8 02 00       	call   f013122c <strtol>
f0101962:	83 c4 10             	add    $0x10,%esp
f0101965:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct FrameInfo * ptr_FrameInfo ;
	int ret = allocate_frame(&ptr_FrameInfo);
f0101968:	83 ec 0c             	sub    $0xc,%esp
f010196b:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010196e:	50                   	push   %eax
f010196f:	e8 7e 4f 00 00       	call   f01068f2 <allocate_frame>
f0101974:	83 c4 10             	add    $0x10,%esp
f0101977:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f010197a:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f010197e:	75 1a                	jne    f010199a <command_allocuserpage+0xc0>
	{
		cprintf("ERROR: no enough memory\n");
f0101980:	83 ec 0c             	sub    $0xc,%esp
f0101983:	68 32 44 13 f0       	push   $0xf0134432
f0101988:	e8 81 f3 ff ff       	call   f0100d0e <cprintf>
f010198d:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101990:	b8 00 00 00 00       	mov    $0x0,%eax
f0101995:	e9 b2 00 00 00       	jmp    f0101a4c <command_allocuserpage+0x172>
	}

	if (number_of_arguments == 3)
f010199a:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f010199e:	75 1d                	jne    f01019bd <command_allocuserpage+0xe3>
	{
		// Map this frame to the given user virtual address with PERM_WRITEABLE
		map_frame(env->env_page_directory, ptr_FrameInfo, va, PERM_WRITEABLE | PERM_USER);
f01019a0:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01019a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01019a6:	8b 40 5c             	mov    0x5c(%eax),%eax
f01019a9:	6a 06                	push   $0x6
f01019ab:	ff 75 ec             	pushl  -0x14(%ebp)
f01019ae:	52                   	push   %edx
f01019af:	50                   	push   %eax
f01019b0:	e8 8c 53 00 00       	call   f0106d41 <map_frame>
f01019b5:	83 c4 10             	add    $0x10,%esp
f01019b8:	e9 8a 00 00 00       	jmp    f0101a47 <command_allocuserpage+0x16d>
	}
	else if (number_of_arguments == 4)
f01019bd:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01019c1:	0f 85 80 00 00 00    	jne    f0101a47 <command_allocuserpage+0x16d>
	{
		// Map this frame to the given user virtual address with the given permission
		uint32 rw ;
		if (arguments[3][0] == 'r' || arguments[3][0] == 'R')
f01019c7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019ca:	83 c0 0c             	add    $0xc,%eax
f01019cd:	8b 00                	mov    (%eax),%eax
f01019cf:	8a 00                	mov    (%eax),%al
f01019d1:	3c 72                	cmp    $0x72,%al
f01019d3:	74 0e                	je     f01019e3 <command_allocuserpage+0x109>
f01019d5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019d8:	83 c0 0c             	add    $0xc,%eax
f01019db:	8b 00                	mov    (%eax),%eax
f01019dd:	8a 00                	mov    (%eax),%al
f01019df:	3c 52                	cmp    $0x52,%al
f01019e1:	75 09                	jne    f01019ec <command_allocuserpage+0x112>
			rw = 0 ;
f01019e3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01019ea:	eb 3c                	jmp    f0101a28 <command_allocuserpage+0x14e>
		else if (arguments[3][0] == 'w' || arguments[3][0] == 'W')
f01019ec:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019ef:	83 c0 0c             	add    $0xc,%eax
f01019f2:	8b 00                	mov    (%eax),%eax
f01019f4:	8a 00                	mov    (%eax),%al
f01019f6:	3c 77                	cmp    $0x77,%al
f01019f8:	74 0e                	je     f0101a08 <command_allocuserpage+0x12e>
f01019fa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019fd:	83 c0 0c             	add    $0xc,%eax
f0101a00:	8b 00                	mov    (%eax),%eax
f0101a02:	8a 00                	mov    (%eax),%al
f0101a04:	3c 57                	cmp    $0x57,%al
f0101a06:	75 09                	jne    f0101a11 <command_allocuserpage+0x137>
			rw = PERM_WRITEABLE ;
f0101a08:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101a0f:	eb 17                	jmp    f0101a28 <command_allocuserpage+0x14e>
		else
		{
			cprintf("aup command: wrong permission (r/w)... will continue as writable\n") ;
f0101a11:	83 ec 0c             	sub    $0xc,%esp
f0101a14:	68 4c 44 13 f0       	push   $0xf013444c
f0101a19:	e8 f0 f2 ff ff       	call   f0100d0e <cprintf>
f0101a1e:	83 c4 10             	add    $0x10,%esp
			rw = PERM_WRITEABLE ;
f0101a21:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
		}

		map_frame(env->env_page_directory, ptr_FrameInfo, va, rw | PERM_USER);
f0101a28:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101a2b:	83 c8 04             	or     $0x4,%eax
f0101a2e:	89 c1                	mov    %eax,%ecx
f0101a30:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101a33:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101a36:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101a39:	51                   	push   %ecx
f0101a3a:	ff 75 ec             	pushl  -0x14(%ebp)
f0101a3d:	52                   	push   %edx
f0101a3e:	50                   	push   %eax
f0101a3f:	e8 fd 52 00 00       	call   f0106d41 <map_frame>
f0101a44:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101a47:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101a4c:	c9                   	leave  
f0101a4d:	c3                   	ret    

f0101a4e <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f0101a4e:	55                   	push   %ebp
f0101a4f:	89 e5                	mov    %esp,%ebp
f0101a51:	56                   	push   %esi
f0101a52:	53                   	push   %ebx
f0101a53:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f0101a56:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0101a59:	83 ec 0c             	sub    $0xc,%esp
f0101a5c:	50                   	push   %eax
f0101a5d:	e8 79 55 00 00       	call   f0106fdb <calculate_available_frames>
f0101a62:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0101a65:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101a68:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101a6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f0101a6e:	8b 75 ec             	mov    -0x14(%ebp),%esi
f0101a71:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0101a74:	01 de                	add    %ebx,%esi
f0101a76:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0101a79:	01 f3                	add    %esi,%ebx
f0101a7b:	83 ec 0c             	sub    $0xc,%esp
f0101a7e:	51                   	push   %ecx
f0101a7f:	52                   	push   %edx
f0101a80:	50                   	push   %eax
f0101a81:	53                   	push   %ebx
f0101a82:	68 90 44 13 f0       	push   $0xf0134490
f0101a87:	e8 82 f2 ff ff       	call   f0100d0e <cprintf>
f0101a8c:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0101a8f:	a1 74 5d 87 f0       	mov    0xf0875d74,%eax
f0101a94:	83 ec 08             	sub    $0x8,%esp
f0101a97:	50                   	push   %eax
f0101a98:	68 e8 44 13 f0       	push   $0xf01344e8
f0101a9d:	e8 6c f2 ff ff       	call   f0100d0e <cprintf>
f0101aa2:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101aa5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101aaa:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0101aad:	5b                   	pop    %ebx
f0101aae:	5e                   	pop    %esi
f0101aaf:	5d                   	pop    %ebp
f0101ab0:	c3                   	ret    

f0101ab1 <CreateEnv>:

//2020
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f0101ab1:	55                   	push   %ebp
f0101ab2:	89 e5                	mov    %esp,%ebp
f0101ab4:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f0101ab7:	c7 45 f4 88 13 00 00 	movl   $0x1388,-0xc(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f0101abe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f0101ac5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
#if USE_KHEAP
	{
		switch (number_of_arguments)
f0101acc:	8b 45 08             	mov    0x8(%ebp),%eax
f0101acf:	83 f8 04             	cmp    $0x4,%eax
f0101ad2:	0f 84 94 00 00 00    	je     f0101b6c <CreateEnv+0xbb>
f0101ad8:	83 f8 05             	cmp    $0x5,%eax
f0101adb:	74 0e                	je     f0101aeb <CreateEnv+0x3a>
f0101add:	83 f8 03             	cmp    $0x3,%eax
f0101ae0:	0f 84 ec 00 00 00    	je     f0101bd2 <CreateEnv+0x121>
f0101ae6:	e9 2f 01 00 00       	jmp    f0101c1a <CreateEnv+0x169>
		{
		case 5:
			if(!isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101aeb:	83 ec 0c             	sub    $0xc,%esp
f0101aee:	6a 02                	push   $0x2
f0101af0:	e8 4e c2 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f0101af5:	83 c4 10             	add    $0x10,%esp
f0101af8:	85 c0                	test   %eax,%eax
f0101afa:	75 1a                	jne    f0101b16 <CreateEnv+0x65>
			{
				cprintf("ERROR: Current Replacement is NOT LRU LISTS, invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0101afc:	83 ec 0c             	sub    $0xc,%esp
f0101aff:	68 24 45 13 f0       	push   $0xf0134524
f0101b04:	e8 05 f2 ff ff       	call   f0100d0e <cprintf>
f0101b09:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101b0c:	b8 00 00 00 00       	mov    $0x0,%eax
f0101b11:	e9 d5 01 00 00       	jmp    f0101ceb <CreateEnv+0x23a>
			}
			percent_WS_pages_to_remove = strtol(arguments[4], NULL, 10);
f0101b16:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b19:	83 c0 10             	add    $0x10,%eax
f0101b1c:	8b 00                	mov    (%eax),%eax
f0101b1e:	83 ec 04             	sub    $0x4,%esp
f0101b21:	6a 0a                	push   $0xa
f0101b23:	6a 00                	push   $0x0
f0101b25:	50                   	push   %eax
f0101b26:	e8 01 f7 02 00       	call   f013122c <strtol>
f0101b2b:	83 c4 10             	add    $0x10,%esp
f0101b2e:	89 45 ec             	mov    %eax,-0x14(%ebp)
			LRUSecondListSize = strtol(arguments[3], NULL, 10);
f0101b31:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b34:	83 c0 0c             	add    $0xc,%eax
f0101b37:	8b 00                	mov    (%eax),%eax
f0101b39:	83 ec 04             	sub    $0x4,%esp
f0101b3c:	6a 0a                	push   $0xa
f0101b3e:	6a 00                	push   $0x0
f0101b40:	50                   	push   %eax
f0101b41:	e8 e6 f6 02 00       	call   f013122c <strtol>
f0101b46:	83 c4 10             	add    $0x10,%esp
f0101b49:	89 45 f0             	mov    %eax,-0x10(%ebp)
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101b4c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b4f:	83 c0 08             	add    $0x8,%eax
f0101b52:	8b 00                	mov    (%eax),%eax
f0101b54:	83 ec 04             	sub    $0x4,%esp
f0101b57:	6a 0a                	push   $0xa
f0101b59:	6a 00                	push   $0x0
f0101b5b:	50                   	push   %eax
f0101b5c:	e8 cb f6 02 00       	call   f013122c <strtol>
f0101b61:	83 c4 10             	add    $0x10,%esp
f0101b64:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101b67:	e9 c8 00 00 00       	jmp    f0101c34 <CreateEnv+0x183>
		case 4:
			if(!isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101b6c:	83 ec 0c             	sub    $0xc,%esp
f0101b6f:	6a 02                	push   $0x2
f0101b71:	e8 cd c1 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f0101b76:	83 c4 10             	add    $0x10,%esp
f0101b79:	85 c0                	test   %eax,%eax
f0101b7b:	75 1d                	jne    f0101b9a <CreateEnv+0xe9>
			{
				percent_WS_pages_to_remove = strtol(arguments[3], NULL, 10);
f0101b7d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b80:	83 c0 0c             	add    $0xc,%eax
f0101b83:	8b 00                	mov    (%eax),%eax
f0101b85:	83 ec 04             	sub    $0x4,%esp
f0101b88:	6a 0a                	push   $0xa
f0101b8a:	6a 00                	push   $0x0
f0101b8c:	50                   	push   %eax
f0101b8d:	e8 9a f6 02 00       	call   f013122c <strtol>
f0101b92:	83 c4 10             	add    $0x10,%esp
f0101b95:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0101b98:	eb 1b                	jmp    f0101bb5 <CreateEnv+0x104>
			}
			else
			{
				LRUSecondListSize = strtol(arguments[3], NULL, 10);
f0101b9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b9d:	83 c0 0c             	add    $0xc,%eax
f0101ba0:	8b 00                	mov    (%eax),%eax
f0101ba2:	83 ec 04             	sub    $0x4,%esp
f0101ba5:	6a 0a                	push   $0xa
f0101ba7:	6a 00                	push   $0x0
f0101ba9:	50                   	push   %eax
f0101baa:	e8 7d f6 02 00       	call   f013122c <strtol>
f0101baf:	83 c4 10             	add    $0x10,%esp
f0101bb2:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101bb5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101bb8:	83 c0 08             	add    $0x8,%eax
f0101bbb:	8b 00                	mov    (%eax),%eax
f0101bbd:	83 ec 04             	sub    $0x4,%esp
f0101bc0:	6a 0a                	push   $0xa
f0101bc2:	6a 00                	push   $0x0
f0101bc4:	50                   	push   %eax
f0101bc5:	e8 62 f6 02 00       	call   f013122c <strtol>
f0101bca:	83 c4 10             	add    $0x10,%esp
f0101bcd:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101bd0:	eb 62                	jmp    f0101c34 <CreateEnv+0x183>
		case 3:
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101bd2:	83 ec 0c             	sub    $0xc,%esp
f0101bd5:	6a 02                	push   $0x2
f0101bd7:	e8 67 c1 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f0101bdc:	83 c4 10             	add    $0x10,%esp
f0101bdf:	85 c0                	test   %eax,%eax
f0101be1:	74 1a                	je     f0101bfd <CreateEnv+0x14c>
			{
				cprintf("ERROR: Current Replacement is LRU LISTS, Please specify a working set size in the 3rd arg and LRU second list size in the 4th arg, aborting.\n");
f0101be3:	83 ec 0c             	sub    $0xc,%esp
f0101be6:	68 e4 45 13 f0       	push   $0xf01345e4
f0101beb:	e8 1e f1 ff ff       	call   f0100d0e <cprintf>
f0101bf0:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101bf3:	b8 00 00 00 00       	mov    $0x0,%eax
f0101bf8:	e9 ee 00 00 00       	jmp    f0101ceb <CreateEnv+0x23a>
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101bfd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101c00:	83 c0 08             	add    $0x8,%eax
f0101c03:	8b 00                	mov    (%eax),%eax
f0101c05:	83 ec 04             	sub    $0x4,%esp
f0101c08:	6a 0a                	push   $0xa
f0101c0a:	6a 00                	push   $0x0
f0101c0c:	50                   	push   %eax
f0101c0d:	e8 1a f6 02 00       	call   f013122c <strtol>
f0101c12:	83 c4 10             	add    $0x10,%esp
f0101c15:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101c18:	eb 1a                	jmp    f0101c34 <CreateEnv+0x183>
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0101c1a:	83 ec 0c             	sub    $0xc,%esp
f0101c1d:	68 74 46 13 f0       	push   $0xf0134674
f0101c22:	e8 e7 f0 ff ff       	call   f0100d0e <cprintf>
f0101c27:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0101c2a:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c2f:	e9 b7 00 00 00       	jmp    f0101ceb <CreateEnv+0x23a>

			break;
		}
		if(pageWSSize > __PWS_MAX_SIZE)
f0101c34:	81 7d f4 88 13 00 00 	cmpl   $0x1388,-0xc(%ebp)
f0101c3b:	76 1f                	jbe    f0101c5c <CreateEnv+0x1ab>
		{
			cprintf("ERROR: size of WS must be less than or equal to %d... aborting", __PWS_MAX_SIZE);
f0101c3d:	83 ec 08             	sub    $0x8,%esp
f0101c40:	68 88 13 00 00       	push   $0x1388
f0101c45:	68 0c 47 13 f0       	push   $0xf013470c
f0101c4a:	e8 bf f0 ff ff       	call   f0100d0e <cprintf>
f0101c4f:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0101c52:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c57:	e9 8f 00 00 00       	jmp    f0101ceb <CreateEnv+0x23a>
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101c5c:	83 ec 0c             	sub    $0xc,%esp
f0101c5f:	6a 02                	push   $0x2
f0101c61:	e8 dd c0 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f0101c66:	83 c4 10             	add    $0x10,%esp
f0101c69:	85 c0                	test   %eax,%eax
f0101c6b:	74 20                	je     f0101c8d <CreateEnv+0x1dc>
		{
			if (LRUSecondListSize > pageWSSize - 1)
f0101c6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101c70:	48                   	dec    %eax
f0101c71:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0101c74:	73 17                	jae    f0101c8d <CreateEnv+0x1dc>
			{
				cprintf("ERROR: size of LRU second list can't equal/exceed the size of the page WS... aborting\n");
f0101c76:	83 ec 0c             	sub    $0xc,%esp
f0101c79:	68 4c 47 13 f0       	push   $0xf013474c
f0101c7e:	e8 8b f0 ff ff       	call   f0100d0e <cprintf>
f0101c83:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101c86:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c8b:	eb 5e                	jmp    f0101ceb <CreateEnv+0x23a>
			}
		}
		assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101c8d:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f0101c91:	76 19                	jbe    f0101cac <CreateEnv+0x1fb>
f0101c93:	68 a4 47 13 f0       	push   $0xf01347a4
f0101c98:	68 e9 47 13 f0       	push   $0xf01347e9
f0101c9d:	68 5a 02 00 00       	push   $0x25a
f0101ca2:	68 6d 43 13 f0       	push   $0xf013436d
f0101ca7:	e8 59 e5 ff ff       	call   f0100205 <_panic>
		{
			LRUSecondListSize = __LRU_SNDLST_SIZE;
		}
	}
#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101cac:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f0101cb0:	76 19                	jbe    f0101ccb <CreateEnv+0x21a>
f0101cb2:	68 a4 47 13 f0       	push   $0xf01347a4
f0101cb7:	68 e9 47 13 f0       	push   $0xf01347e9
f0101cbc:	68 71 02 00 00       	push   $0x271
f0101cc1:	68 6d 43 13 f0       	push   $0xf013436d
f0101cc6:	e8 3a e5 ff ff       	call   f0100205 <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f0101ccb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101cce:	83 c0 04             	add    $0x4,%eax
f0101cd1:	8b 00                	mov    (%eax),%eax
f0101cd3:	ff 75 ec             	pushl  -0x14(%ebp)
f0101cd6:	ff 75 f0             	pushl  -0x10(%ebp)
f0101cd9:	ff 75 f4             	pushl  -0xc(%ebp)
f0101cdc:	50                   	push   %eax
f0101cdd:	e8 81 71 00 00       	call   f0108e63 <env_create>
f0101ce2:	83 c4 10             	add    $0x10,%esp
f0101ce5:	89 45 e8             	mov    %eax,-0x18(%ebp)

	return env;
f0101ce8:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0101ceb:	c9                   	leave  
f0101cec:	c3                   	ret    

f0101ced <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f0101ced:	55                   	push   %ebp
f0101cee:	89 e5                	mov    %esp,%ebp
f0101cf0:	83 ec 18             	sub    $0x18,%esp
	//[1] Create and initialize a new environment for the program to be run
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101cf3:	83 ec 08             	sub    $0x8,%esp
f0101cf6:	ff 75 0c             	pushl  0xc(%ebp)
f0101cf9:	ff 75 08             	pushl  0x8(%ebp)
f0101cfc:	e8 b0 fd ff ff       	call   f0101ab1 <CreateEnv>
f0101d01:	83 c4 10             	add    $0x10,%esp
f0101d04:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0101d07:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101d0b:	75 07                	jne    f0101d14 <command_run_program+0x27>
f0101d0d:	b8 00 00 00 00       	mov    $0x0,%eax
f0101d12:	eb 46                	jmp    f0101d5a <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101d14:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d17:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101d1a:	83 ec 08             	sub    $0x8,%esp
f0101d1d:	50                   	push   %eax
f0101d1e:	68 fe 47 13 f0       	push   $0xf01347fe
f0101d23:	e8 e6 ef ff ff       	call   f0100d0e <cprintf>
f0101d28:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f0101d2b:	c7 05 74 5d 87 f0 00 	movl   $0x0,0xf0875d74
f0101d32:	00 00 00 

	//[2] Run the created environment by adding it to the "ready" queue then invoke the scheduler to execute it
	sched_new_env(env);
f0101d35:	83 ec 0c             	sub    $0xc,%esp
f0101d38:	ff 75 f4             	pushl  -0xc(%ebp)
f0101d3b:	e8 c4 34 00 00       	call   f0105204 <sched_new_env>
f0101d40:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f0101d43:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d46:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101d49:	83 ec 0c             	sub    $0xc,%esp
f0101d4c:	50                   	push   %eax
f0101d4d:	e8 cf 34 00 00       	call   f0105221 <sched_run_env>
f0101d52:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101d55:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d5a:	c9                   	leave  
f0101d5b:	c3                   	ret    

f0101d5c <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f0101d5c:	55                   	push   %ebp
f0101d5d:	89 e5                	mov    %esp,%ebp
f0101d5f:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101d62:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d65:	83 c0 04             	add    $0x4,%eax
f0101d68:	8b 00                	mov    (%eax),%eax
f0101d6a:	83 ec 04             	sub    $0x4,%esp
f0101d6d:	6a 0a                	push   $0xa
f0101d6f:	6a 00                	push   $0x0
f0101d71:	50                   	push   %eax
f0101d72:	e8 b5 f4 02 00       	call   f013122c <strtol>
f0101d77:	83 c4 10             	add    $0x10,%esp
f0101d7a:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f0101d7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d80:	83 ec 0c             	sub    $0xc,%esp
f0101d83:	50                   	push   %eax
f0101d84:	e8 b6 38 00 00       	call   f010563f <sched_kill_env>
f0101d89:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101d8c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d91:	c9                   	leave  
f0101d92:	c3                   	ret    

f0101d93 <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f0101d93:	55                   	push   %ebp
f0101d94:	89 e5                	mov    %esp,%ebp
f0101d96:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101d99:	83 ec 08             	sub    $0x8,%esp
f0101d9c:	ff 75 0c             	pushl  0xc(%ebp)
f0101d9f:	ff 75 08             	pushl  0x8(%ebp)
f0101da2:	e8 0a fd ff ff       	call   f0101ab1 <CreateEnv>
f0101da7:	83 c4 10             	add    $0x10,%esp
f0101daa:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f0101dad:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101db1:	75 07                	jne    f0101dba <commnad_load_env+0x27>
		return 0 ;
f0101db3:	b8 00 00 00 00       	mov    $0x0,%eax
f0101db8:	eb 2a                	jmp    f0101de4 <commnad_load_env+0x51>

	sched_new_env(env) ;
f0101dba:	83 ec 0c             	sub    $0xc,%esp
f0101dbd:	ff 75 f4             	pushl  -0xc(%ebp)
f0101dc0:	e8 3f 34 00 00       	call   f0105204 <sched_new_env>
f0101dc5:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101dc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101dcb:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101dce:	83 ec 08             	sub    $0x8,%esp
f0101dd1:	50                   	push   %eax
f0101dd2:	68 fe 47 13 f0       	push   $0xf01347fe
f0101dd7:	e8 32 ef ff ff       	call   f0100d0e <cprintf>
f0101ddc:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ddf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101de4:	c9                   	leave  
f0101de5:	c3                   	ret    

f0101de6 <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f0101de6:	55                   	push   %ebp
f0101de7:	89 e5                	mov    %esp,%ebp
f0101de9:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f0101dec:	c7 05 74 5d 87 f0 00 	movl   $0x0,0xf0875d74
f0101df3:	00 00 00 
	sched_run_all();
f0101df6:	e8 51 30 00 00       	call   f0104e4c <sched_run_all>

	return 0 ;
f0101dfb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e00:	c9                   	leave  
f0101e01:	c3                   	ret    

f0101e02 <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f0101e02:	55                   	push   %ebp
f0101e03:	89 e5                	mov    %esp,%ebp
f0101e05:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f0101e08:	e8 35 2e 00 00       	call   f0104c42 <sched_print_all>

	return 0 ;
f0101e0d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e12:	c9                   	leave  
f0101e13:	c3                   	ret    

f0101e14 <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f0101e14:	55                   	push   %ebp
f0101e15:	89 e5                	mov    %esp,%ebp
f0101e17:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f0101e1a:	e8 a0 30 00 00       	call   f0104ebf <sched_kill_all>

	return 0 ;
f0101e1f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e24:	c9                   	leave  
f0101e25:	c3                   	ret    

f0101e26 <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0101e26:	55                   	push   %ebp
f0101e27:	89 e5                	mov    %esp,%ebp
f0101e29:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f0101e2c:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0101e30:	7f 1a                	jg     f0101e4c <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101e32:	83 ec 0c             	sub    $0xc,%esp
f0101e35:	68 14 48 13 f0       	push   $0xf0134814
f0101e3a:	e8 cf ee ff ff       	call   f0100d0e <cprintf>
f0101e3f:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101e42:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e47:	e9 83 00 00 00       	jmp    f0101ecf <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f0101e4c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101e4f:	83 c0 04             	add    $0x4,%eax
f0101e52:	8b 00                	mov    (%eax),%eax
f0101e54:	83 ec 04             	sub    $0x4,%esp
f0101e57:	6a 0a                	push   $0xa
f0101e59:	6a 00                	push   $0x0
f0101e5b:	50                   	push   %eax
f0101e5c:	e8 cb f3 02 00       	call   f013122c <strtol>
f0101e61:	83 c4 10             	add    $0x10,%esp
f0101e64:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f0101e67:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0101e6b:	75 20                	jne    f0101e8d <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101e6d:	83 ec 0c             	sub    $0xc,%esp
f0101e70:	ff 75 f4             	pushl  -0xc(%ebp)
f0101e73:	e8 40 be 00 00       	call   f010dcb8 <setPageReplacmentAlgorithmLRU>
f0101e78:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f0101e7b:	83 ec 0c             	sub    $0xc,%esp
f0101e7e:	68 74 48 13 f0       	push   $0xf0134874
f0101e83:	e8 86 ee ff ff       	call   f0100d0e <cprintf>
f0101e88:	83 c4 10             	add    $0x10,%esp
f0101e8b:	eb 3d                	jmp    f0101eca <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f0101e8d:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0101e91:	75 20                	jne    f0101eb3 <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101e93:	83 ec 0c             	sub    $0xc,%esp
f0101e96:	ff 75 f4             	pushl  -0xc(%ebp)
f0101e99:	e8 1a be 00 00       	call   f010dcb8 <setPageReplacmentAlgorithmLRU>
f0101e9e:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f0101ea1:	83 ec 0c             	sub    $0xc,%esp
f0101ea4:	68 b8 48 13 f0       	push   $0xf01348b8
f0101ea9:	e8 60 ee ff ff       	call   f0100d0e <cprintf>
f0101eae:	83 c4 10             	add    $0x10,%esp
f0101eb1:	eb 17                	jmp    f0101eca <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101eb3:	83 ec 0c             	sub    $0xc,%esp
f0101eb6:	68 f8 48 13 f0       	push   $0xf01348f8
f0101ebb:	e8 4e ee ff ff       	call   f0100d0e <cprintf>
f0101ec0:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101ec3:	b8 00 00 00 00       	mov    $0x0,%eax
f0101ec8:	eb 05                	jmp    f0101ecf <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f0101eca:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101ecf:	c9                   	leave  
f0101ed0:	c3                   	ret    

f0101ed1 <command_set_page_rep_nthCLOCK>:
//2021
int command_set_page_rep_nthCLOCK(int number_of_arguments, char **arguments)
{
f0101ed1:	55                   	push   %ebp
f0101ed2:	89 e5                	mov    %esp,%ebp
f0101ed4:	83 ec 18             	sub    $0x18,%esp
	uint32 PageWSMaxSweeps = strtol(arguments[1], NULL, 10);
f0101ed7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101eda:	83 c0 04             	add    $0x4,%eax
f0101edd:	8b 00                	mov    (%eax),%eax
f0101edf:	83 ec 04             	sub    $0x4,%esp
f0101ee2:	6a 0a                	push   $0xa
f0101ee4:	6a 00                	push   $0x0
f0101ee6:	50                   	push   %eax
f0101ee7:	e8 40 f3 02 00       	call   f013122c <strtol>
f0101eec:	83 c4 10             	add    $0x10,%esp
f0101eef:	89 45 f4             	mov    %eax,-0xc(%ebp)
	setPageReplacmentAlgorithmNchanceCLOCK(PageWSMaxSweeps);
f0101ef2:	83 ec 0c             	sub    $0xc,%esp
f0101ef5:	ff 75 f4             	pushl  -0xc(%ebp)
f0101ef8:	e8 2e be 00 00       	call   f010dd2b <setPageReplacmentAlgorithmNchanceCLOCK>
f0101efd:	83 c4 10             	add    $0x10,%esp
	cprintf("Page replacement algorithm is now N chance CLOCK\n");
f0101f00:	83 ec 0c             	sub    $0xc,%esp
f0101f03:	68 4c 49 13 f0       	push   $0xf013494c
f0101f08:	e8 01 ee ff ff       	call   f0100d0e <cprintf>
f0101f0d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f10:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f15:	c9                   	leave  
f0101f16:	c3                   	ret    

f0101f17 <command_set_page_rep_CLOCK>:
int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f0101f17:	55                   	push   %ebp
f0101f18:	89 e5                	mov    %esp,%ebp
f0101f1a:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f0101f1d:	e8 c9 bd 00 00       	call   f010dceb <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f0101f22:	83 ec 0c             	sub    $0xc,%esp
f0101f25:	68 80 49 13 f0       	push   $0xf0134980
f0101f2a:	e8 df ed ff ff       	call   f0100d0e <cprintf>
f0101f2f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f32:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f37:	c9                   	leave  
f0101f38:	c3                   	ret    

f0101f39 <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f0101f39:	55                   	push   %ebp
f0101f3a:	89 e5                	mov    %esp,%ebp
f0101f3c:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f0101f3f:	e8 b7 bd 00 00       	call   f010dcfb <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0101f44:	83 ec 0c             	sub    $0xc,%esp
f0101f47:	68 ac 49 13 f0       	push   $0xf01349ac
f0101f4c:	e8 bd ed ff ff       	call   f0100d0e <cprintf>
f0101f51:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f54:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f59:	c9                   	leave  
f0101f5a:	c3                   	ret    

f0101f5b <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f0101f5b:	55                   	push   %ebp
f0101f5c:	89 e5                	mov    %esp,%ebp
f0101f5e:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f0101f61:	e8 a5 bd 00 00       	call   f010dd0b <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0101f66:	83 ec 0c             	sub    $0xc,%esp
f0101f69:	68 d4 49 13 f0       	push   $0xf01349d4
f0101f6e:	e8 9b ed ff ff       	call   f0100d0e <cprintf>
f0101f73:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f76:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f7b:	c9                   	leave  
f0101f7c:	c3                   	ret    

f0101f7d <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f0101f7d:	55                   	push   %ebp
f0101f7e:	89 e5                	mov    %esp,%ebp
f0101f80:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f0101f83:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101f86:	83 c0 04             	add    $0x4,%eax
f0101f89:	8b 00                	mov    (%eax),%eax
f0101f8b:	83 ec 04             	sub    $0x4,%esp
f0101f8e:	6a 0a                	push   $0xa
f0101f90:	6a 00                	push   $0x0
f0101f92:	50                   	push   %eax
f0101f93:	e8 94 f2 02 00       	call   f013122c <strtol>
f0101f98:	83 c4 10             	add    $0x10,%esp
f0101f9b:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f0101f9e:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0101fa2:	83 ec 0c             	sub    $0xc,%esp
f0101fa5:	50                   	push   %eax
f0101fa6:	e8 67 28 00 00       	call   f0104812 <sched_init_RR>
f0101fab:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f0101fae:	a1 2c 5d 87 f0       	mov    0xf0875d2c,%eax
f0101fb3:	8a 00                	mov    (%eax),%al
f0101fb5:	0f b6 c0             	movzbl %al,%eax
f0101fb8:	83 ec 08             	sub    $0x8,%esp
f0101fbb:	50                   	push   %eax
f0101fbc:	68 08 4a 13 f0       	push   $0xf0134a08
f0101fc1:	e8 48 ed ff ff       	call   f0100d0e <cprintf>
f0101fc6:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101fc9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101fce:	c9                   	leave  
f0101fcf:	c3                   	ret    

f0101fd0 <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f0101fd0:	55                   	push   %ebp
f0101fd1:	89 e5                	mov    %esp,%ebp
f0101fd3:	53                   	push   %ebx
f0101fd4:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0101fd7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101fda:	83 c0 04             	add    $0x4,%eax
f0101fdd:	8b 00                	mov    (%eax),%eax
f0101fdf:	83 ec 04             	sub    $0x4,%esp
f0101fe2:	6a 0a                	push   $0xa
f0101fe4:	6a 00                	push   $0x0
f0101fe6:	50                   	push   %eax
f0101fe7:	e8 40 f2 02 00       	call   f013122c <strtol>
f0101fec:	83 c4 10             	add    $0x10,%esp
f0101fef:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0101ff2:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101ff9:	eb 2e                	jmp    f0102029 <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f0101ffb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101ffe:	8d 58 fe             	lea    -0x2(%eax),%ebx
f0102001:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102004:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010200b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010200e:	01 d0                	add    %edx,%eax
f0102010:	8b 00                	mov    (%eax),%eax
f0102012:	83 ec 04             	sub    $0x4,%esp
f0102015:	6a 0a                	push   $0xa
f0102017:	6a 00                	push   $0x0
f0102019:	50                   	push   %eax
f010201a:	e8 0d f2 02 00       	call   f013122c <strtol>
f010201f:	83 c4 10             	add    $0x10,%esp
f0102022:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0102026:	ff 45 f4             	incl   -0xc(%ebp)
f0102029:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010202c:	3b 45 08             	cmp    0x8(%ebp),%eax
f010202f:	7c ca                	jl     f0101ffb <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f0102031:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f0102035:	83 ec 08             	sub    $0x8,%esp
f0102038:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f010203b:	52                   	push   %edx
f010203c:	50                   	push   %eax
f010203d:	e8 5b 28 00 00       	call   f010489d <sched_init_MLFQ>
f0102042:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f0102045:	83 ec 0c             	sub    $0xc,%esp
f0102048:	68 40 4a 13 f0       	push   $0xf0134a40
f010204d:	e8 bc ec ff ff       	call   f0100d0e <cprintf>
f0102052:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0102055:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010205c:	eb 24                	jmp    f0102082 <command_sch_MLFQ+0xb2>
	{
		cprintf("%d   ", quantums[i]) ;
f010205e:	8b 15 2c 5d 87 f0    	mov    0xf0875d2c,%edx
f0102064:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102067:	01 d0                	add    %edx,%eax
f0102069:	8a 00                	mov    (%eax),%al
f010206b:	0f b6 c0             	movzbl %al,%eax
f010206e:	83 ec 08             	sub    $0x8,%esp
f0102071:	50                   	push   %eax
f0102072:	68 6d 4a 13 f0       	push   $0xf0134a6d
f0102077:	e8 92 ec ff ff       	call   f0100d0e <cprintf>
f010207c:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f010207f:	ff 45 f0             	incl   -0x10(%ebp)
f0102082:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0102087:	0f b6 c0             	movzbl %al,%eax
f010208a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010208d:	7f cf                	jg     f010205e <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f010208f:	83 ec 0c             	sub    $0xc,%esp
f0102092:	68 f5 43 13 f0       	push   $0xf01343f5
f0102097:	e8 72 ec ff ff       	call   f0100d0e <cprintf>
f010209c:	83 c4 10             	add    $0x10,%esp
	return 0;
f010209f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01020a4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01020a7:	c9                   	leave  
f01020a8:	c3                   	ret    

f01020a9 <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f01020a9:	55                   	push   %ebp
f01020aa:	89 e5                	mov    %esp,%ebp
f01020ac:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f01020af:	e8 8d 23 00 00       	call   f0104441 <isSchedMethodMLFQ>
f01020b4:	85 c0                	test   %eax,%eax
f01020b6:	74 5c                	je     f0102114 <command_print_sch_method+0x6b>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f01020b8:	83 ec 0c             	sub    $0xc,%esp
f01020bb:	68 74 4a 13 f0       	push   $0xf0134a74
f01020c0:	e8 49 ec ff ff       	call   f0100d0e <cprintf>
f01020c5:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f01020c8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01020cf:	eb 24                	jmp    f01020f5 <command_print_sch_method+0x4c>
		{
			cprintf("%d   ", quantums[i]) ;
f01020d1:	8b 15 2c 5d 87 f0    	mov    0xf0875d2c,%edx
f01020d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01020da:	01 d0                	add    %edx,%eax
f01020dc:	8a 00                	mov    (%eax),%al
f01020de:	0f b6 c0             	movzbl %al,%eax
f01020e1:	83 ec 08             	sub    $0x8,%esp
f01020e4:	50                   	push   %eax
f01020e5:	68 6d 4a 13 f0       	push   $0xf0134a6d
f01020ea:	e8 1f ec ff ff       	call   f0100d0e <cprintf>
f01020ef:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f01020f2:	ff 45 f4             	incl   -0xc(%ebp)
f01020f5:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01020fa:	0f b6 c0             	movzbl %al,%eax
f01020fd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0102100:	7f cf                	jg     f01020d1 <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f0102102:	83 ec 0c             	sub    $0xc,%esp
f0102105:	68 f5 43 13 f0       	push   $0xf01343f5
f010210a:	e8 ff eb ff ff       	call   f0100d0e <cprintf>
f010210f:	83 c4 10             	add    $0x10,%esp
f0102112:	eb 36                	jmp    f010214a <command_print_sch_method+0xa1>
	}
	else if (isSchedMethodRR())
f0102114:	e8 0e 23 00 00       	call   f0104427 <isSchedMethodRR>
f0102119:	85 c0                	test   %eax,%eax
f010211b:	74 1d                	je     f010213a <command_print_sch_method+0x91>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f010211d:	a1 2c 5d 87 f0       	mov    0xf0875d2c,%eax
f0102122:	8a 00                	mov    (%eax),%al
f0102124:	0f b6 c0             	movzbl %al,%eax
f0102127:	83 ec 08             	sub    $0x8,%esp
f010212a:	50                   	push   %eax
f010212b:	68 a8 4a 13 f0       	push   $0xf0134aa8
f0102130:	e8 d9 eb ff ff       	call   f0100d0e <cprintf>
f0102135:	83 c4 10             	add    $0x10,%esp
f0102138:	eb 10                	jmp    f010214a <command_print_sch_method+0xa1>
	}

	else
		cprintf("Current scheduler method is UNDEFINED\n");
f010213a:	83 ec 0c             	sub    $0xc,%esp
f010213d:	68 e4 4a 13 f0       	push   $0xf0134ae4
f0102142:	e8 c7 eb ff ff       	call   f0100d0e <cprintf>
f0102147:	83 c4 10             	add    $0x10,%esp

	return 0;
f010214a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010214f:	c9                   	leave  
f0102150:	c3                   	ret    

f0102151 <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f0102151:	55                   	push   %ebp
f0102152:	89 e5                	mov    %esp,%ebp
f0102154:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f0102157:	8b 45 0c             	mov    0xc(%ebp),%eax
f010215a:	83 c0 04             	add    $0x4,%eax
f010215d:	8b 00                	mov    (%eax),%eax
f010215f:	83 ec 04             	sub    $0x4,%esp
f0102162:	6a 0a                	push   $0xa
f0102164:	6a 00                	push   $0x0
f0102166:	50                   	push   %eax
f0102167:	e8 c0 f0 02 00       	call   f013122c <strtol>
f010216c:	83 c4 10             	add    $0x10,%esp
f010216f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f0102172:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102175:	0f b6 c0             	movzbl %al,%eax
f0102178:	83 ec 0c             	sub    $0xc,%esp
f010217b:	50                   	push   %eax
f010217c:	e8 d1 df 02 00       	call   f0130152 <chksch>
f0102181:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f0102184:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102188:	75 12                	jne    f010219c <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f010218a:	83 ec 0c             	sub    $0xc,%esp
f010218d:	68 0c 4b 13 f0       	push   $0xf0134b0c
f0102192:	e8 77 eb ff ff       	call   f0100d0e <cprintf>
f0102197:	83 c4 10             	add    $0x10,%esp
f010219a:	eb 16                	jmp    f01021b2 <command_sch_test+0x61>
	else if (status == 1)
f010219c:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01021a0:	75 10                	jne    f01021b2 <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f01021a2:	83 ec 0c             	sub    $0xc,%esp
f01021a5:	68 34 4b 13 f0       	push   $0xf0134b34
f01021aa:	e8 5f eb ff ff       	call   f0100d0e <cprintf>
f01021af:	83 c4 10             	add    $0x10,%esp
	return 0;
f01021b2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01021b7:	c9                   	leave  
f01021b8:	c3                   	ret    

f01021b9 <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f01021b9:	55                   	push   %ebp
f01021ba:	89 e5                	mov    %esp,%ebp
f01021bc:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f01021bf:	e8 95 bb 00 00       	call   f010dd59 <isPageReplacmentAlgorithmCLOCK>
f01021c4:	85 c0                	test   %eax,%eax
f01021c6:	74 15                	je     f01021dd <command_print_page_rep+0x24>
		cprintf("Page replacement algorithm is CLOCK\n");
f01021c8:	83 ec 0c             	sub    $0xc,%esp
f01021cb:	68 58 4b 13 f0       	push   $0xf0134b58
f01021d0:	e8 39 eb ff ff       	call   f0100d0e <cprintf>
f01021d5:	83 c4 10             	add    $0x10,%esp
f01021d8:	e9 8c 00 00 00       	jmp    f0102269 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f01021dd:	83 ec 0c             	sub    $0xc,%esp
f01021e0:	6a 01                	push   $0x1
f01021e2:	e8 5c bb 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f01021e7:	83 c4 10             	add    $0x10,%esp
f01021ea:	85 c0                	test   %eax,%eax
f01021ec:	74 12                	je     f0102200 <command_print_page_rep+0x47>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f01021ee:	83 ec 0c             	sub    $0xc,%esp
f01021f1:	68 80 4b 13 f0       	push   $0xf0134b80
f01021f6:	e8 13 eb ff ff       	call   f0100d0e <cprintf>
f01021fb:	83 c4 10             	add    $0x10,%esp
f01021fe:	eb 69                	jmp    f0102269 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0102200:	83 ec 0c             	sub    $0xc,%esp
f0102203:	6a 02                	push   $0x2
f0102205:	e8 39 bb 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f010220a:	83 c4 10             	add    $0x10,%esp
f010220d:	85 c0                	test   %eax,%eax
f010220f:	74 12                	je     f0102223 <command_print_page_rep+0x6a>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f0102211:	83 ec 0c             	sub    $0xc,%esp
f0102214:	68 c0 4b 13 f0       	push   $0xf0134bc0
f0102219:	e8 f0 ea ff ff       	call   f0100d0e <cprintf>
f010221e:	83 c4 10             	add    $0x10,%esp
f0102221:	eb 46                	jmp    f0102269 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmFIFO())
f0102223:	e8 4c bb 00 00       	call   f010dd74 <isPageReplacmentAlgorithmFIFO>
f0102228:	85 c0                	test   %eax,%eax
f010222a:	74 12                	je     f010223e <command_print_page_rep+0x85>
		cprintf("Page replacement algorithm is FIFO\n");
f010222c:	83 ec 0c             	sub    $0xc,%esp
f010222f:	68 fc 4b 13 f0       	push   $0xf0134bfc
f0102234:	e8 d5 ea ff ff       	call   f0100d0e <cprintf>
f0102239:	83 c4 10             	add    $0x10,%esp
f010223c:	eb 2b                	jmp    f0102269 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f010223e:	e8 4c bb 00 00       	call   f010dd8f <isPageReplacmentAlgorithmModifiedCLOCK>
f0102243:	85 c0                	test   %eax,%eax
f0102245:	74 12                	je     f0102259 <command_print_page_rep+0xa0>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f0102247:	83 ec 0c             	sub    $0xc,%esp
f010224a:	68 20 4c 13 f0       	push   $0xf0134c20
f010224f:	e8 ba ea ff ff       	call   f0100d0e <cprintf>
f0102254:	83 c4 10             	add    $0x10,%esp
f0102257:	eb 10                	jmp    f0102269 <command_print_page_rep+0xb0>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f0102259:	83 ec 0c             	sub    $0xc,%esp
f010225c:	68 50 4c 13 f0       	push   $0xf0134c50
f0102261:	e8 a8 ea ff ff       	call   f0100d0e <cprintf>
f0102266:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102269:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010226e:	c9                   	leave  
f010226f:	c3                   	ret    

f0102270 <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f0102270:	55                   	push   %ebp
f0102271:	89 e5                	mov    %esp,%ebp
f0102273:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f0102276:	e8 18 ed ff ff       	call   f0100f93 <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f010227b:	83 ec 0c             	sub    $0xc,%esp
f010227e:	68 7c 4c 13 f0       	push   $0xf0134c7c
f0102283:	e8 86 ea ff ff       	call   f0100d0e <cprintf>
f0102288:	83 c4 10             	add    $0x10,%esp
	return 0;
f010228b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102290:	c9                   	leave  
f0102291:	c3                   	ret    

f0102292 <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0102292:	55                   	push   %ebp
f0102293:	89 e5                	mov    %esp,%ebp
f0102295:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f0102298:	e8 06 ed ff ff       	call   f0100fa3 <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f010229d:	83 ec 0c             	sub    $0xc,%esp
f01022a0:	68 ac 4c 13 f0       	push   $0xf0134cac
f01022a5:	e8 64 ea ff ff       	call   f0100d0e <cprintf>
f01022aa:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022ad:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022b2:	c9                   	leave  
f01022b3:	c3                   	ret    

f01022b4 <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f01022b4:	55                   	push   %ebp
f01022b5:	89 e5                	mov    %esp,%ebp
f01022b7:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f01022ba:	e8 f4 ec ff ff       	call   f0100fb3 <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f01022bf:	83 ec 0c             	sub    $0xc,%esp
f01022c2:	68 dc 4c 13 f0       	push   $0xf0134cdc
f01022c7:	e8 42 ea ff ff       	call   f0100d0e <cprintf>
f01022cc:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022cf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022d4:	c9                   	leave  
f01022d5:	c3                   	ret    

f01022d6 <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f01022d6:	55                   	push   %ebp
f01022d7:	89 e5                	mov    %esp,%ebp
f01022d9:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f01022dc:	e8 e2 ec ff ff       	call   f0100fc3 <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f01022e1:	83 ec 0c             	sub    $0xc,%esp
f01022e4:	68 0c 4d 13 f0       	push   $0xf0134d0c
f01022e9:	e8 20 ea ff ff       	call   f0100d0e <cprintf>
f01022ee:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022f1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022f6:	c9                   	leave  
f01022f7:	c3                   	ret    

f01022f8 <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f01022f8:	55                   	push   %ebp
f01022f9:	89 e5                	mov    %esp,%ebp
f01022fb:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f01022fe:	e8 d0 ec ff ff       	call   f0100fd3 <isUHeapPlacementStrategyFIRSTFIT>
f0102303:	84 c0                	test   %al,%al
f0102305:	74 12                	je     f0102319 <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f0102307:	83 ec 0c             	sub    $0xc,%esp
f010230a:	68 3c 4d 13 f0       	push   $0xf0134d3c
f010230f:	e8 fa e9 ff ff       	call   f0100d0e <cprintf>
f0102314:	83 c4 10             	add    $0x10,%esp
f0102317:	eb 61                	jmp    f010237a <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f0102319:	e8 ca ec ff ff       	call   f0100fe8 <isUHeapPlacementStrategyBESTFIT>
f010231e:	84 c0                	test   %al,%al
f0102320:	74 12                	je     f0102334 <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f0102322:	83 ec 0c             	sub    $0xc,%esp
f0102325:	68 68 4d 13 f0       	push   $0xf0134d68
f010232a:	e8 df e9 ff ff       	call   f0100d0e <cprintf>
f010232f:	83 c4 10             	add    $0x10,%esp
f0102332:	eb 46                	jmp    f010237a <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f0102334:	e8 c4 ec ff ff       	call   f0100ffd <isUHeapPlacementStrategyNEXTFIT>
f0102339:	84 c0                	test   %al,%al
f010233b:	74 12                	je     f010234f <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f010233d:	83 ec 0c             	sub    $0xc,%esp
f0102340:	68 94 4d 13 f0       	push   $0xf0134d94
f0102345:	e8 c4 e9 ff ff       	call   f0100d0e <cprintf>
f010234a:	83 c4 10             	add    $0x10,%esp
f010234d:	eb 2b                	jmp    f010237a <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f010234f:	e8 be ec ff ff       	call   f0101012 <isUHeapPlacementStrategyWORSTFIT>
f0102354:	84 c0                	test   %al,%al
f0102356:	74 12                	je     f010236a <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f0102358:	83 ec 0c             	sub    $0xc,%esp
f010235b:	68 c0 4d 13 f0       	push   $0xf0134dc0
f0102360:	e8 a9 e9 ff ff       	call   f0100d0e <cprintf>
f0102365:	83 c4 10             	add    $0x10,%esp
f0102368:	eb 10                	jmp    f010237a <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f010236a:	83 ec 0c             	sub    $0xc,%esp
f010236d:	68 ec 4d 13 f0       	push   $0xf0134dec
f0102372:	e8 97 e9 ff ff       	call   f0100d0e <cprintf>
f0102377:	83 c4 10             	add    $0x10,%esp

	return 0;
f010237a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010237f:	c9                   	leave  
f0102380:	c3                   	ret    

f0102381 <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f0102381:	55                   	push   %ebp
f0102382:	89 e5                	mov    %esp,%ebp
f0102384:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f0102387:	e8 4f eb ff ff       	call   f0100edb <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f010238c:	83 ec 0c             	sub    $0xc,%esp
f010238f:	68 18 4e 13 f0       	push   $0xf0134e18
f0102394:	e8 75 e9 ff ff       	call   f0100d0e <cprintf>
f0102399:	83 c4 10             	add    $0x10,%esp
	return 0;
f010239c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023a1:	c9                   	leave  
f01023a2:	c3                   	ret    

f01023a3 <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f01023a3:	55                   	push   %ebp
f01023a4:	89 e5                	mov    %esp,%ebp
f01023a6:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f01023a9:	e8 3d eb ff ff       	call   f0100eeb <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f01023ae:	83 ec 0c             	sub    $0xc,%esp
f01023b1:	68 18 4e 13 f0       	push   $0xf0134e18
f01023b6:	e8 53 e9 ff ff       	call   f0100d0e <cprintf>
f01023bb:	83 c4 10             	add    $0x10,%esp
	return 0;
f01023be:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023c3:	c9                   	leave  
f01023c4:	c3                   	ret    

f01023c5 <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f01023c5:	55                   	push   %ebp
f01023c6:	89 e5                	mov    %esp,%ebp
f01023c8:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f01023cb:	e8 2b eb ff ff       	call   f0100efb <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f01023d0:	83 ec 0c             	sub    $0xc,%esp
f01023d3:	68 4c 4e 13 f0       	push   $0xf0134e4c
f01023d8:	e8 31 e9 ff ff       	call   f0100d0e <cprintf>
f01023dd:	83 c4 10             	add    $0x10,%esp
	return 0;
f01023e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023e5:	c9                   	leave  
f01023e6:	c3                   	ret    

f01023e7 <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f01023e7:	55                   	push   %ebp
f01023e8:	89 e5                	mov    %esp,%ebp
f01023ea:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f01023ed:	e8 19 eb ff ff       	call   f0100f0b <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f01023f2:	83 ec 0c             	sub    $0xc,%esp
f01023f5:	68 7c 4e 13 f0       	push   $0xf0134e7c
f01023fa:	e8 0f e9 ff ff       	call   f0100d0e <cprintf>
f01023ff:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102402:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102407:	c9                   	leave  
f0102408:	c3                   	ret    

f0102409 <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0102409:	55                   	push   %ebp
f010240a:	89 e5                	mov    %esp,%ebp
f010240c:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f010240f:	e8 07 eb ff ff       	call   f0100f1b <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f0102414:	83 ec 0c             	sub    $0xc,%esp
f0102417:	68 ac 4e 13 f0       	push   $0xf0134eac
f010241c:	e8 ed e8 ff ff       	call   f0100d0e <cprintf>
f0102421:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102424:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102429:	c9                   	leave  
f010242a:	c3                   	ret    

f010242b <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f010242b:	55                   	push   %ebp
f010242c:	89 e5                	mov    %esp,%ebp
f010242e:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f0102431:	e8 f5 ea ff ff       	call   f0100f2b <isKHeapPlacementStrategyCONTALLOC>
f0102436:	84 c0                	test   %al,%al
f0102438:	74 12                	je     f010244c <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f010243a:	83 ec 0c             	sub    $0xc,%esp
f010243d:	68 e0 4e 13 f0       	push   $0xf0134ee0
f0102442:	e8 c7 e8 ff ff       	call   f0100d0e <cprintf>
f0102447:	83 c4 10             	add    $0x10,%esp
f010244a:	eb 7c                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f010244c:	e8 ee ea ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f0102451:	84 c0                	test   %al,%al
f0102453:	74 12                	je     f0102467 <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0102455:	83 ec 0c             	sub    $0xc,%esp
f0102458:	68 1c 4f 13 f0       	push   $0xf0134f1c
f010245d:	e8 ac e8 ff ff       	call   f0100d0e <cprintf>
f0102462:	83 c4 10             	add    $0x10,%esp
f0102465:	eb 61                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f0102467:	e8 e8 ea ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f010246c:	84 c0                	test   %al,%al
f010246e:	74 12                	je     f0102482 <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f0102470:	83 ec 0c             	sub    $0xc,%esp
f0102473:	68 4c 4f 13 f0       	push   $0xf0134f4c
f0102478:	e8 91 e8 ff ff       	call   f0100d0e <cprintf>
f010247d:	83 c4 10             	add    $0x10,%esp
f0102480:	eb 46                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f0102482:	e8 e2 ea ff ff       	call   f0100f69 <isKHeapPlacementStrategyNEXTFIT>
f0102487:	84 c0                	test   %al,%al
f0102489:	74 12                	je     f010249d <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f010248b:	83 ec 0c             	sub    $0xc,%esp
f010248e:	68 78 4f 13 f0       	push   $0xf0134f78
f0102493:	e8 76 e8 ff ff       	call   f0100d0e <cprintf>
f0102498:	83 c4 10             	add    $0x10,%esp
f010249b:	eb 2b                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f010249d:	e8 dc ea ff ff       	call   f0100f7e <isKHeapPlacementStrategyWORSTFIT>
f01024a2:	84 c0                	test   %al,%al
f01024a4:	74 12                	je     f01024b8 <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f01024a6:	83 ec 0c             	sub    $0xc,%esp
f01024a9:	68 a4 4f 13 f0       	push   $0xf0134fa4
f01024ae:	e8 5b e8 ff ff       	call   f0100d0e <cprintf>
f01024b3:	83 c4 10             	add    $0x10,%esp
f01024b6:	eb 10                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f01024b8:	83 ec 0c             	sub    $0xc,%esp
f01024bb:	68 d4 4f 13 f0       	push   $0xf0134fd4
f01024c0:	e8 49 e8 ff ff       	call   f0100d0e <cprintf>
f01024c5:	83 c4 10             	add    $0x10,%esp

	return 0;
f01024c8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01024cd:	c9                   	leave  
f01024ce:	c3                   	ret    

f01024cf <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f01024cf:	55                   	push   %ebp
f01024d0:	89 e5                	mov    %esp,%ebp
f01024d2:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01024d5:	e8 2c b9 00 00       	call   f010de06 <isBufferingEnabled>
f01024da:	84 c0                	test   %al,%al
f01024dc:	75 12                	jne    f01024f0 <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f01024de:	83 ec 0c             	sub    $0xc,%esp
f01024e1:	68 04 50 13 f0       	push   $0xf0135004
f01024e6:	e8 23 e8 ff ff       	call   f0100d0e <cprintf>
f01024eb:	83 c4 10             	add    $0x10,%esp
f01024ee:	eb 1d                	jmp    f010250d <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f01024f0:	83 ec 0c             	sub    $0xc,%esp
f01024f3:	6a 00                	push   $0x0
f01024f5:	e8 e6 b8 00 00       	call   f010dde0 <enableModifiedBuffer>
f01024fa:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f01024fd:	83 ec 0c             	sub    $0xc,%esp
f0102500:	68 40 50 13 f0       	push   $0xf0135040
f0102505:	e8 04 e8 ff ff       	call   f0100d0e <cprintf>
f010250a:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f010250d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102512:	c9                   	leave  
f0102513:	c3                   	ret    

f0102514 <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f0102514:	55                   	push   %ebp
f0102515:	89 e5                	mov    %esp,%ebp
f0102517:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010251a:	e8 e7 b8 00 00       	call   f010de06 <isBufferingEnabled>
f010251f:	84 c0                	test   %al,%al
f0102521:	75 12                	jne    f0102535 <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f0102523:	83 ec 0c             	sub    $0xc,%esp
f0102526:	68 04 50 13 f0       	push   $0xf0135004
f010252b:	e8 de e7 ff ff       	call   f0100d0e <cprintf>
f0102530:	83 c4 10             	add    $0x10,%esp
f0102533:	eb 1d                	jmp    f0102552 <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f0102535:	83 ec 0c             	sub    $0xc,%esp
f0102538:	6a 01                	push   $0x1
f010253a:	e8 a1 b8 00 00       	call   f010dde0 <enableModifiedBuffer>
f010253f:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f0102542:	83 ec 0c             	sub    $0xc,%esp
f0102545:	68 64 50 13 f0       	push   $0xf0135064
f010254a:	e8 bf e7 ff ff       	call   f0100d0e <cprintf>
f010254f:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102552:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102557:	c9                   	leave  
f0102558:	c3                   	ret    

f0102559 <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f0102559:	55                   	push   %ebp
f010255a:	89 e5                	mov    %esp,%ebp
f010255c:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f010255f:	83 ec 0c             	sub    $0xc,%esp
f0102562:	6a 00                	push   $0x0
f0102564:	e8 8f b8 00 00       	call   f010ddf8 <enableBuffering>
f0102569:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f010256c:	83 ec 0c             	sub    $0xc,%esp
f010256f:	6a 00                	push   $0x0
f0102571:	e8 6a b8 00 00       	call   f010dde0 <enableModifiedBuffer>
f0102576:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f0102579:	83 ec 0c             	sub    $0xc,%esp
f010257c:	68 84 50 13 f0       	push   $0xf0135084
f0102581:	e8 88 e7 ff ff       	call   f0100d0e <cprintf>
f0102586:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102589:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010258e:	c9                   	leave  
f010258f:	c3                   	ret    

f0102590 <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f0102590:	55                   	push   %ebp
f0102591:	89 e5                	mov    %esp,%ebp
f0102593:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f0102596:	83 ec 0c             	sub    $0xc,%esp
f0102599:	6a 01                	push   $0x1
f010259b:	e8 58 b8 00 00       	call   f010ddf8 <enableBuffering>
f01025a0:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f01025a3:	83 ec 0c             	sub    $0xc,%esp
f01025a6:	6a 01                	push   $0x1
f01025a8:	e8 33 b8 00 00       	call   f010dde0 <enableModifiedBuffer>
f01025ad:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f01025b0:	e8 69 b8 00 00       	call   f010de1e <getModifiedBufferLength>
f01025b5:	85 c0                	test   %eax,%eax
f01025b7:	75 59                	jne    f0102612 <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f01025b9:	83 ec 0c             	sub    $0xc,%esp
f01025bc:	68 a0 50 13 f0       	push   $0xf01350a0
f01025c1:	e8 48 e7 ff ff       	call   f0100d0e <cprintf>
f01025c6:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f01025c9:	83 ec 08             	sub    $0x8,%esp
f01025cc:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01025cf:	50                   	push   %eax
f01025d0:	68 d0 50 13 f0       	push   $0xf01350d0
f01025d5:	e8 ec e6 02 00       	call   f0130cc6 <readline>
f01025da:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f01025dd:	83 ec 04             	sub    $0x4,%esp
f01025e0:	6a 0a                	push   $0xa
f01025e2:	6a 00                	push   $0x0
f01025e4:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01025e7:	50                   	push   %eax
f01025e8:	e8 3f ec 02 00       	call   f013122c <strtol>
f01025ed:	83 c4 10             	add    $0x10,%esp
f01025f0:	83 ec 0c             	sub    $0xc,%esp
f01025f3:	50                   	push   %eax
f01025f4:	e8 17 b8 00 00       	call   f010de10 <setModifiedBufferLength>
f01025f9:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f01025fc:	e8 1d b8 00 00       	call   f010de1e <getModifiedBufferLength>
f0102601:	83 ec 08             	sub    $0x8,%esp
f0102604:	50                   	push   %eax
f0102605:	68 fc 50 13 f0       	push   $0xf01350fc
f010260a:	e8 ff e6 ff ff       	call   f0100d0e <cprintf>
f010260f:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f0102612:	83 ec 0c             	sub    $0xc,%esp
f0102615:	68 21 51 13 f0       	push   $0xf0135121
f010261a:	e8 ef e6 ff ff       	call   f0100d0e <cprintf>
f010261f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102622:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102627:	c9                   	leave  
f0102628:	c3                   	ret    

f0102629 <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0102629:	55                   	push   %ebp
f010262a:	89 e5                	mov    %esp,%ebp
f010262c:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010262f:	e8 d2 b7 00 00       	call   f010de06 <isBufferingEnabled>
f0102634:	84 c0                	test   %al,%al
f0102636:	75 12                	jne    f010264a <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f0102638:	83 ec 0c             	sub    $0xc,%esp
f010263b:	68 3c 51 13 f0       	push   $0xf013513c
f0102640:	e8 c9 e6 ff ff       	call   f0100d0e <cprintf>
f0102645:	83 c4 10             	add    $0x10,%esp
f0102648:	eb 19                	jmp    f0102663 <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f010264a:	e8 9f b7 00 00       	call   f010ddee <isModifiedBufferEnabled>
f010264f:	84 c0                	test   %al,%al
f0102651:	75 10                	jne    f0102663 <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f0102653:	83 ec 0c             	sub    $0xc,%esp
f0102656:	68 8c 51 13 f0       	push   $0xf013518c
f010265b:	e8 ae e6 ff ff       	call   f0100d0e <cprintf>
f0102660:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f0102663:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102666:	83 c0 04             	add    $0x4,%eax
f0102669:	8b 00                	mov    (%eax),%eax
f010266b:	83 ec 04             	sub    $0x4,%esp
f010266e:	6a 0a                	push   $0xa
f0102670:	6a 00                	push   $0x0
f0102672:	50                   	push   %eax
f0102673:	e8 b4 eb 02 00       	call   f013122c <strtol>
f0102678:	83 c4 10             	add    $0x10,%esp
f010267b:	83 ec 0c             	sub    $0xc,%esp
f010267e:	50                   	push   %eax
f010267f:	e8 8c b7 00 00       	call   f010de10 <setModifiedBufferLength>
f0102684:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0102687:	e8 92 b7 00 00       	call   f010de1e <getModifiedBufferLength>
f010268c:	83 ec 08             	sub    $0x8,%esp
f010268f:	50                   	push   %eax
f0102690:	68 fc 50 13 f0       	push   $0xf01350fc
f0102695:	e8 74 e6 ff ff       	call   f0100d0e <cprintf>
f010269a:	83 c4 10             	add    $0x10,%esp
	return 0;
f010269d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026a2:	c9                   	leave  
f01026a3:	c3                   	ret    

f01026a4 <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f01026a4:	55                   	push   %ebp
f01026a5:	89 e5                	mov    %esp,%ebp
f01026a7:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01026aa:	e8 57 b7 00 00       	call   f010de06 <isBufferingEnabled>
f01026af:	84 c0                	test   %al,%al
f01026b1:	75 12                	jne    f01026c5 <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f01026b3:	83 ec 0c             	sub    $0xc,%esp
f01026b6:	68 3c 51 13 f0       	push   $0xf013513c
f01026bb:	e8 4e e6 ff ff       	call   f0100d0e <cprintf>
f01026c0:	83 c4 10             	add    $0x10,%esp
f01026c3:	eb 19                	jmp    f01026de <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f01026c5:	e8 24 b7 00 00       	call   f010ddee <isModifiedBufferEnabled>
f01026ca:	84 c0                	test   %al,%al
f01026cc:	75 10                	jne    f01026de <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f01026ce:	83 ec 0c             	sub    $0xc,%esp
f01026d1:	68 8c 51 13 f0       	push   $0xf013518c
f01026d6:	e8 33 e6 ff ff       	call   f0100d0e <cprintf>
f01026db:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f01026de:	e8 3b b7 00 00       	call   f010de1e <getModifiedBufferLength>
f01026e3:	83 ec 08             	sub    $0x8,%esp
f01026e6:	50                   	push   %eax
f01026e7:	68 d2 51 13 f0       	push   $0xf01351d2
f01026ec:	e8 1d e6 ff ff       	call   f0100d0e <cprintf>
f01026f1:	83 c4 10             	add    $0x10,%esp
	return 0;
f01026f4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026f9:	c9                   	leave  
f01026fa:	c3                   	ret    

f01026fb <command_test_kmalloc>:

/*TESTING Commands*/
int command_test_kmalloc(int number_of_arguments, char **arguments)
{
f01026fb:	55                   	push   %ebp
f01026fc:	89 e5                	mov    %esp,%ebp
f01026fe:	83 ec 18             	sub    $0x18,%esp
	int testNum = 0 ;
f0102701:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (number_of_arguments==2)
f0102708:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010270c:	75 1b                	jne    f0102729 <command_test_kmalloc+0x2e>
		testNum = strtol(arguments[1], NULL, 10);
f010270e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102711:	83 c0 04             	add    $0x4,%eax
f0102714:	8b 00                	mov    (%eax),%eax
f0102716:	83 ec 04             	sub    $0x4,%esp
f0102719:	6a 0a                	push   $0xa
f010271b:	6a 00                	push   $0x0
f010271d:	50                   	push   %eax
f010271e:	e8 09 eb 02 00       	call   f013122c <strtol>
f0102723:	83 c4 10             	add    $0x10,%esp
f0102726:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (isKHeapPlacementStrategyCONTALLOC())
f0102729:	e8 fd e7 ff ff       	call   f0100f2b <isKHeapPlacementStrategyCONTALLOC>
f010272e:	84 c0                	test   %al,%al
f0102730:	74 0a                	je     f010273c <command_test_kmalloc+0x41>
		test_kmalloc();
f0102732:	e8 84 4c 01 00       	call   f01173bb <test_kmalloc>
f0102737:	e9 e8 00 00 00       	jmp    f0102824 <command_test_kmalloc+0x129>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f010273c:	e8 fe e7 ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f0102741:	84 c0                	test   %al,%al
f0102743:	74 44                	je     f0102789 <command_test_kmalloc+0x8e>
	{
		if (testNum == 0)
f0102745:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102749:	75 1a                	jne    f0102765 <command_test_kmalloc+0x6a>
		{
			cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f010274b:	83 ec 0c             	sub    $0xc,%esp
f010274e:	68 f0 51 13 f0       	push   $0xf01351f0
f0102753:	e8 b6 e5 ff ff       	call   f0100d0e <cprintf>
f0102758:	83 c4 10             	add    $0x10,%esp
			return 0;
f010275b:	b8 00 00 00 00       	mov    $0x0,%eax
f0102760:	e9 c4 00 00 00       	jmp    f0102829 <command_test_kmalloc+0x12e>
		}
		//Test FIRST FIT allocation
		if (testNum == 1)
f0102765:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102769:	75 0a                	jne    f0102775 <command_test_kmalloc+0x7a>
			test_kmalloc_firstfit1();
f010276b:	e8 d4 9a 01 00       	call   f011c244 <test_kmalloc_firstfit1>
f0102770:	e9 af 00 00 00       	jmp    f0102824 <command_test_kmalloc+0x129>
		else if (testNum == 2)
f0102775:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102779:	0f 85 a5 00 00 00    	jne    f0102824 <command_test_kmalloc+0x129>
			test_kmalloc_firstfit2();
f010277f:	e8 62 ae 01 00       	call   f011d5e6 <test_kmalloc_firstfit2>
f0102784:	e9 9b 00 00 00       	jmp    f0102824 <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyBESTFIT())
f0102789:	e8 c6 e7 ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f010278e:	84 c0                	test   %al,%al
f0102790:	74 44                	je     f01027d6 <command_test_kmalloc+0xdb>
	{
		if (testNum == 0)
f0102792:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102796:	75 17                	jne    f01027af <command_test_kmalloc+0xb4>
		{
			cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f0102798:	83 ec 0c             	sub    $0xc,%esp
f010279b:	68 40 52 13 f0       	push   $0xf0135240
f01027a0:	e8 69 e5 ff ff       	call   f0100d0e <cprintf>
f01027a5:	83 c4 10             	add    $0x10,%esp
			return 0;
f01027a8:	b8 00 00 00 00       	mov    $0x0,%eax
f01027ad:	eb 7a                	jmp    f0102829 <command_test_kmalloc+0x12e>
		}
		if (testNum == 1)
f01027af:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01027b3:	75 07                	jne    f01027bc <command_test_kmalloc+0xc1>
			test_kmalloc();
f01027b5:	e8 01 4c 01 00       	call   f01173bb <test_kmalloc>
f01027ba:	eb 68                	jmp    f0102824 <command_test_kmalloc+0x129>
		else if (testNum == 2)
f01027bc:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f01027c0:	75 07                	jne    f01027c9 <command_test_kmalloc+0xce>
			test_kmalloc_bestfit1();
f01027c2:	e8 47 75 01 00       	call   f0119d0e <test_kmalloc_bestfit1>
f01027c7:	eb 5b                	jmp    f0102824 <command_test_kmalloc+0x129>
		else if (testNum == 3)
f01027c9:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f01027cd:	75 55                	jne    f0102824 <command_test_kmalloc+0x129>
			test_kmalloc_bestfit2();
f01027cf:	e8 90 87 01 00       	call   f011af64 <test_kmalloc_bestfit2>
f01027d4:	eb 4e                	jmp    f0102824 <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyNEXTFIT())
f01027d6:	e8 8e e7 ff ff       	call   f0100f69 <isKHeapPlacementStrategyNEXTFIT>
f01027db:	84 c0                	test   %al,%al
f01027dd:	74 37                	je     f0102816 <command_test_kmalloc+0x11b>
	{
		if (testNum == 0)
f01027df:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01027e3:	75 17                	jne    f01027fc <command_test_kmalloc+0x101>
		{
			cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f01027e5:	83 ec 0c             	sub    $0xc,%esp
f01027e8:	68 90 52 13 f0       	push   $0xf0135290
f01027ed:	e8 1c e5 ff ff       	call   f0100d0e <cprintf>
f01027f2:	83 c4 10             	add    $0x10,%esp
			return 0;
f01027f5:	b8 00 00 00 00       	mov    $0x0,%eax
f01027fa:	eb 2d                	jmp    f0102829 <command_test_kmalloc+0x12e>
		}
		//Test cont. allocation
		if (testNum == 1)
f01027fc:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102800:	75 07                	jne    f0102809 <command_test_kmalloc+0x10e>
			test_kmalloc();
f0102802:	e8 b4 4b 01 00       	call   f01173bb <test_kmalloc>
f0102807:	eb 1b                	jmp    f0102824 <command_test_kmalloc+0x129>
		//Test nextfit strategy
		else if (testNum == 2)
f0102809:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010280d:	75 15                	jne    f0102824 <command_test_kmalloc+0x129>
			test_kmalloc_nextfit();
f010280f:	e8 05 5e 01 00       	call   f0118619 <test_kmalloc_nextfit>
f0102814:	eb 0e                	jmp    f0102824 <command_test_kmalloc+0x129>

	}
	else if (isKHeapPlacementStrategyWORSTFIT())
f0102816:	e8 63 e7 ff ff       	call   f0100f7e <isKHeapPlacementStrategyWORSTFIT>
f010281b:	84 c0                	test   %al,%al
f010281d:	74 05                	je     f0102824 <command_test_kmalloc+0x129>
		test_kmalloc_worstfit();
f010281f:	e8 57 bc 01 00       	call   f011e47b <test_kmalloc_worstfit>
	return 0;
f0102824:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102829:	c9                   	leave  
f010282a:	c3                   	ret    

f010282b <command_test_kfree>:
int command_test_kfree(int number_of_arguments, char **arguments)
{
f010282b:	55                   	push   %ebp
f010282c:	89 e5                	mov    %esp,%ebp
f010282e:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f0102831:	e8 1e e7 ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f0102836:	84 c0                	test   %al,%al
f0102838:	75 09                	jne    f0102843 <command_test_kfree+0x18>
f010283a:	e8 00 e7 ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f010283f:	84 c0                	test   %al,%al
f0102841:	74 07                	je     f010284a <command_test_kfree+0x1f>
	{
		test_kfree_bestfirstfit();
f0102843:	e8 d5 f3 01 00       	call   f0121c1d <test_kfree_bestfirstfit>
f0102848:	eb 05                	jmp    f010284f <command_test_kfree+0x24>
	}
	else //NEXT & CONT
	{
		test_kfree();
f010284a:	e8 7c d2 01 00       	call   f011facb <test_kfree>
	}
	return 0;
f010284f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102854:	c9                   	leave  
f0102855:	c3                   	ret    

f0102856 <command_test_kheap_phys_addr>:
int command_test_kheap_phys_addr(int number_of_arguments, char **arguments)
{
f0102856:	55                   	push   %ebp
f0102857:	89 e5                	mov    %esp,%ebp
f0102859:	83 ec 08             	sub    $0x8,%esp
	test_kheap_phys_addr();
f010285c:	e8 b8 0d 02 00       	call   f0123619 <test_kheap_phys_addr>
	return 0;
f0102861:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102866:	c9                   	leave  
f0102867:	c3                   	ret    

f0102868 <command_test_kheap_virt_addr>:
int command_test_kheap_virt_addr(int number_of_arguments, char **arguments)
{
f0102868:	55                   	push   %ebp
f0102869:	89 e5                	mov    %esp,%ebp
f010286b:	83 ec 08             	sub    $0x8,%esp
	test_kheap_virt_addr();
f010286e:	e8 76 22 02 00       	call   f0124ae9 <test_kheap_virt_addr>
	return 0;
f0102873:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102878:	c9                   	leave  
f0102879:	c3                   	ret    

f010287a <command_test_three_creation_functions>:
int command_test_three_creation_functions(int number_of_arguments, char **arguments)
{
f010287a:	55                   	push   %ebp
f010287b:	89 e5                	mov    %esp,%ebp
f010287d:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f0102880:	e8 41 37 02 00       	call   f0125fc6 <test_three_creation_functions>
	return 0;
f0102885:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010288a:	c9                   	leave  
f010288b:	c3                   	ret    

f010288c <command_test_krealloc>:

int command_test_krealloc(int number_of_arguments, char **arguments) {
f010288c:	55                   	push   %ebp
f010288d:	89 e5                	mov    %esp,%ebp
f010288f:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyNEXTFIT())
f0102892:	e8 d2 e6 ff ff       	call   f0100f69 <isKHeapPlacementStrategyNEXTFIT>
f0102897:	84 c0                	test   %al,%al
f0102899:	74 07                	je     f01028a2 <command_test_krealloc+0x16>
		test_krealloc();
f010289b:	e8 3d 91 02 00       	call   f012b9dd <test_krealloc>
f01028a0:	eb 0e                	jmp    f01028b0 <command_test_krealloc+0x24>
	else if (isKHeapPlacementStrategyBESTFIT())
f01028a2:	e8 ad e6 ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f01028a7:	84 c0                	test   %al,%al
f01028a9:	74 05                	je     f01028b0 <command_test_krealloc+0x24>
		test_krealloc_BF();
f01028ab:	e8 dd b0 02 00       	call   f012d98d <test_krealloc_BF>
	return 0;
f01028b0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028b5:	c9                   	leave  
f01028b6:	c3                   	ret    

f01028b7 <command_test_priority1>:

int command_test_priority1(int number_of_arguments, char **arguments)
{
f01028b7:	55                   	push   %ebp
f01028b8:	89 e5                	mov    %esp,%ebp
f01028ba:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f01028bd:	e8 0e 37 01 00       	call   f0115fd0 <test_priority_normal_and_higher>
	return 0;
f01028c2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028c7:	c9                   	leave  
f01028c8:	c3                   	ret    

f01028c9 <command_test_priority2>:

int command_test_priority2(int number_of_arguments, char **arguments)
{
f01028c9:	55                   	push   %ebp
f01028ca:	89 e5                	mov    %esp,%ebp
f01028cc:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f01028cf:	e8 e2 40 01 00       	call   f01169b6 <test_priority_normal_and_lower>
	return 0;
f01028d4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028d9:	c9                   	leave  
f01028da:	c3                   	ret    

f01028db <command_test_kfreeall>:

int command_test_kfreeall(int number_of_arguments, char **arguments)
{
f01028db:	55                   	push   %ebp
f01028dc:	89 e5                	mov    %esp,%ebp
f01028de:	83 ec 08             	sub    $0x8,%esp
	test_kfreeall();
f01028e1:	e8 1a 39 02 00       	call   f0126200 <test_kfreeall>
	return 0;
f01028e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028eb:	c9                   	leave  
f01028ec:	c3                   	ret    

f01028ed <command_test_kexpand>:

int command_test_kexpand(int number_of_arguments, char **arguments)
{
f01028ed:	55                   	push   %ebp
f01028ee:	89 e5                	mov    %esp,%ebp
f01028f0:	83 ec 08             	sub    $0x8,%esp
	test_kexpand();
f01028f3:	e8 f4 4f 02 00       	call   f01278ec <test_kexpand>
	return 0;
f01028f8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028fd:	c9                   	leave  
f01028fe:	c3                   	ret    

f01028ff <command_test_kshrink>:

int command_test_kshrink(int number_of_arguments, char **arguments)
{
f01028ff:	55                   	push   %ebp
f0102900:	89 e5                	mov    %esp,%ebp
f0102902:	83 ec 08             	sub    $0x8,%esp
	test_kshrink();
f0102905:	e8 63 5d 02 00       	call   f012866d <test_kshrink>
	return 0;
f010290a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010290f:	c9                   	leave  
f0102910:	c3                   	ret    

f0102911 <command_test_kfreelast>:

int command_test_kfreelast(int number_of_arguments, char **arguments)
{
f0102911:	55                   	push   %ebp
f0102912:	89 e5                	mov    %esp,%ebp
f0102914:	83 ec 08             	sub    $0x8,%esp
	test_kfreelast();
f0102917:	e8 3e 6c 02 00       	call   f012955a <test_kfreelast>
	return 0;
f010291c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102921:	c9                   	leave  
f0102922:	c3                   	ret    

f0102923 <command_test_sc_MLFQ>:

int command_test_sc_MLFQ(int number_of_arguments, char **arguments)
{
f0102923:	55                   	push   %ebp
f0102924:	89 e5                	mov    %esp,%ebp
f0102926:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f0102929:	8b 45 0c             	mov    0xc(%ebp),%eax
f010292c:	83 c0 04             	add    $0x4,%eax
f010292f:	8b 00                	mov    (%eax),%eax
f0102931:	83 ec 04             	sub    $0x4,%esp
f0102934:	6a 0a                	push   $0xa
f0102936:	6a 00                	push   $0x0
f0102938:	50                   	push   %eax
f0102939:	e8 ee e8 02 00       	call   f013122c <strtol>
f010293e:	83 c4 10             	add    $0x10,%esp
f0102941:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f0102944:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f010294b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f0102952:	a1 f4 5c 87 f0       	mov    0xf0875cf4,%eax
f0102957:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010295a:	eb 3d                	jmp    f0102999 <command_test_sc_MLFQ+0x76>
	{
		if (strcmp(e->prog_name, "tmlfq_2") == 0)
f010295c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010295f:	05 5c 05 00 00       	add    $0x55c,%eax
f0102964:	83 ec 08             	sub    $0x8,%esp
f0102967:	68 de 52 13 f0       	push   $0xf01352de
f010296c:	50                   	push   %eax
f010296d:	e8 66 e6 02 00       	call   f0130fd8 <strcmp>
f0102972:	83 c4 10             	add    $0x10,%esp
f0102975:	85 c0                	test   %eax,%eax
f0102977:	75 12                	jne    f010298b <command_test_sc_MLFQ+0x68>
		{
			if (firstTime)
f0102979:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010297d:	74 07                	je     f0102986 <command_test_sc_MLFQ+0x63>
				firstTime = 0;
f010297f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cnt++ ;
f0102986:	ff 45 f4             	incl   -0xc(%ebp)
f0102989:	eb 06                	jmp    f0102991 <command_test_sc_MLFQ+0x6e>
		}
		else if (!firstTime)
f010298b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010298f:	74 31                	je     f01029c2 <command_test_sc_MLFQ+0x9f>
{
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f0102991:	a1 fc 5c 87 f0       	mov    0xf0875cfc,%eax
f0102996:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0102999:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010299d:	74 08                	je     f01029a7 <command_test_sc_MLFQ+0x84>
f010299f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01029a2:	8b 40 44             	mov    0x44(%eax),%eax
f01029a5:	eb 05                	jmp    f01029ac <command_test_sc_MLFQ+0x89>
f01029a7:	b8 00 00 00 00       	mov    $0x0,%eax
f01029ac:	a3 fc 5c 87 f0       	mov    %eax,0xf0875cfc
f01029b1:	a1 fc 5c 87 f0       	mov    0xf0875cfc,%eax
f01029b6:	85 c0                	test   %eax,%eax
f01029b8:	75 a2                	jne    f010295c <command_test_sc_MLFQ+0x39>
f01029ba:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01029be:	75 9c                	jne    f010295c <command_test_sc_MLFQ+0x39>
f01029c0:	eb 01                	jmp    f01029c3 <command_test_sc_MLFQ+0xa0>
			if (firstTime)
				firstTime = 0;
			cnt++ ;
		}
		else if (!firstTime)
			break;
f01029c2:	90                   	nop
	}
	if(cnt == numOfSlave2)
f01029c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01029c6:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01029c9:	75 12                	jne    f01029dd <command_test_sc_MLFQ+0xba>
	{
		cprintf("Congratulations... MLFQScenario# completed successfully\n");
f01029cb:	83 ec 0c             	sub    $0xc,%esp
f01029ce:	68 e8 52 13 f0       	push   $0xf01352e8
f01029d3:	e8 36 e3 ff ff       	call   f0100d0e <cprintf>
f01029d8:	83 c4 10             	add    $0x10,%esp
f01029db:	eb 17                	jmp    f01029f4 <command_test_sc_MLFQ+0xd1>
	}
	else
	{
		panic("MLFQScenario# failed\n");
f01029dd:	83 ec 04             	sub    $0x4,%esp
f01029e0:	68 21 53 13 f0       	push   $0xf0135321
f01029e5:	68 8b 04 00 00       	push   $0x48b
f01029ea:	68 6d 43 13 f0       	push   $0xf013436d
f01029ef:	e8 11 d8 ff ff       	call   f0100205 <_panic>
	}
	return 0;
f01029f4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01029f9:	c9                   	leave  
f01029fa:	c3                   	ret    

f01029fb <command_test_autocomplete>:


/*2022*/
int command_test_autocomplete(int number_of_arguments, char **arguments)
{
f01029fb:	55                   	push   %ebp
f01029fc:	89 e5                	mov    %esp,%ebp
f01029fe:	83 ec 18             	sub    $0x18,%esp
	int x = TestAutoCompleteCommand();
f0102a01:	e8 c6 e2 00 00       	call   f0110ccc <TestAutoCompleteCommand>
f0102a06:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return 0;
f0102a09:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a0e:	c9                   	leave  
f0102a0f:	c3                   	ret    

f0102a10 <command_test_lists>:
int command_test_lists(int number_of_arguments, char **arguments)
{
f0102a10:	55                   	push   %ebp
f0102a11:	89 e5                	mov    %esp,%ebp
f0102a13:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102a16:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102a1a:	74 1a                	je     f0102a36 <command_test_lists+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstlsts <testname>\n") ;
f0102a1c:	83 ec 0c             	sub    $0xc,%esp
f0102a1f:	68 38 53 13 f0       	push   $0xf0135338
f0102a24:	e8 e5 e2 ff ff       	call   f0100d0e <cprintf>
f0102a29:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102a2c:	b8 00 00 00 00       	mov    $0x0,%eax
f0102a31:	e9 82 01 00 00       	jmp    f0102bb8 <command_test_lists+0x1a8>
	}
	// Test 1 Example for initialize_MemBlocksList: tstlsts init 5
	if(strcmp(arguments[1], "init") == 0)
f0102a36:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a39:	83 c0 04             	add    $0x4,%eax
f0102a3c:	8b 00                	mov    (%eax),%eax
f0102a3e:	83 ec 08             	sub    $0x8,%esp
f0102a41:	68 70 53 13 f0       	push   $0xf0135370
f0102a46:	50                   	push   %eax
f0102a47:	e8 8c e5 02 00       	call   f0130fd8 <strcmp>
f0102a4c:	83 c4 10             	add    $0x10,%esp
f0102a4f:	85 c0                	test   %eax,%eax
f0102a51:	75 0a                	jne    f0102a5d <command_test_lists+0x4d>
	{
		test_initialize_MemBlocksList();
f0102a53:	e8 1e b8 00 00       	call   f010e276 <test_initialize_MemBlocksList>
f0102a58:	e9 56 01 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 2 Example for insert_sorted: tstlsts insrt
	else if(strcmp(arguments[1], "insrt") == 0)
f0102a5d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a60:	83 c0 04             	add    $0x4,%eax
f0102a63:	8b 00                	mov    (%eax),%eax
f0102a65:	83 ec 08             	sub    $0x8,%esp
f0102a68:	68 75 53 13 f0       	push   $0xf0135375
f0102a6d:	50                   	push   %eax
f0102a6e:	e8 65 e5 02 00       	call   f0130fd8 <strcmp>
f0102a73:	83 c4 10             	add    $0x10,%esp
f0102a76:	85 c0                	test   %eax,%eax
f0102a78:	75 0a                	jne    f0102a84 <command_test_lists+0x74>
	{
		test_insert_sorted_allocList();
f0102a7a:	e8 0b b9 00 00       	call   f010e38a <test_insert_sorted_allocList>
f0102a7f:	e9 2f 01 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 3 Example for find_block: tstlsts find
	else if(strcmp(arguments[1], "find") == 0)
f0102a84:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a87:	83 c0 04             	add    $0x4,%eax
f0102a8a:	8b 00                	mov    (%eax),%eax
f0102a8c:	83 ec 08             	sub    $0x8,%esp
f0102a8f:	68 7b 53 13 f0       	push   $0xf013537b
f0102a94:	50                   	push   %eax
f0102a95:	e8 3e e5 02 00       	call   f0130fd8 <strcmp>
f0102a9a:	83 c4 10             	add    $0x10,%esp
f0102a9d:	85 c0                	test   %eax,%eax
f0102a9f:	75 0a                	jne    f0102aab <command_test_lists+0x9b>
	{
		test_find_block();
f0102aa1:	e8 a2 bd 00 00       	call   f010e848 <test_find_block>
f0102aa6:	e9 08 01 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 4 Example for alloc_block_FF: tstlsts FF
	else if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102aab:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102aae:	83 c0 04             	add    $0x4,%eax
f0102ab1:	8b 00                	mov    (%eax),%eax
f0102ab3:	83 ec 08             	sub    $0x8,%esp
f0102ab6:	68 80 53 13 f0       	push   $0xf0135380
f0102abb:	50                   	push   %eax
f0102abc:	e8 17 e5 02 00       	call   f0130fd8 <strcmp>
f0102ac1:	83 c4 10             	add    $0x10,%esp
f0102ac4:	85 c0                	test   %eax,%eax
f0102ac6:	74 1d                	je     f0102ae5 <command_test_lists+0xd5>
f0102ac8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102acb:	83 c0 04             	add    $0x4,%eax
f0102ace:	8b 00                	mov    (%eax),%eax
f0102ad0:	83 ec 08             	sub    $0x8,%esp
f0102ad3:	68 83 53 13 f0       	push   $0xf0135383
f0102ad8:	50                   	push   %eax
f0102ad9:	e8 fa e4 02 00       	call   f0130fd8 <strcmp>
f0102ade:	83 c4 10             	add    $0x10,%esp
f0102ae1:	85 c0                	test   %eax,%eax
f0102ae3:	75 0a                	jne    f0102aef <command_test_lists+0xdf>
	{
		test_alloc_block_FF();
f0102ae5:	e8 b9 c0 00 00       	call   f010eba3 <test_alloc_block_FF>
f0102aea:	e9 c4 00 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 5 Example for alloc_block_BF: tstlsts BF
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102aef:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102af2:	83 c0 04             	add    $0x4,%eax
f0102af5:	8b 00                	mov    (%eax),%eax
f0102af7:	83 ec 08             	sub    $0x8,%esp
f0102afa:	68 86 53 13 f0       	push   $0xf0135386
f0102aff:	50                   	push   %eax
f0102b00:	e8 d3 e4 02 00       	call   f0130fd8 <strcmp>
f0102b05:	83 c4 10             	add    $0x10,%esp
f0102b08:	85 c0                	test   %eax,%eax
f0102b0a:	74 1d                	je     f0102b29 <command_test_lists+0x119>
f0102b0c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b0f:	83 c0 04             	add    $0x4,%eax
f0102b12:	8b 00                	mov    (%eax),%eax
f0102b14:	83 ec 08             	sub    $0x8,%esp
f0102b17:	68 89 53 13 f0       	push   $0xf0135389
f0102b1c:	50                   	push   %eax
f0102b1d:	e8 b6 e4 02 00       	call   f0130fd8 <strcmp>
f0102b22:	83 c4 10             	add    $0x10,%esp
f0102b25:	85 c0                	test   %eax,%eax
f0102b27:	75 0a                	jne    f0102b33 <command_test_lists+0x123>
	{
		test_alloc_block_BF();
f0102b29:	e8 f3 c4 00 00       	call   f010f021 <test_alloc_block_BF>
f0102b2e:	e9 80 00 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 6 Example for alloc_block_NF: tstlsts NF
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102b33:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b36:	83 c0 04             	add    $0x4,%eax
f0102b39:	8b 00                	mov    (%eax),%eax
f0102b3b:	83 ec 08             	sub    $0x8,%esp
f0102b3e:	68 8c 53 13 f0       	push   $0xf013538c
f0102b43:	50                   	push   %eax
f0102b44:	e8 8f e4 02 00       	call   f0130fd8 <strcmp>
f0102b49:	83 c4 10             	add    $0x10,%esp
f0102b4c:	85 c0                	test   %eax,%eax
f0102b4e:	74 1d                	je     f0102b6d <command_test_lists+0x15d>
f0102b50:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b53:	83 c0 04             	add    $0x4,%eax
f0102b56:	8b 00                	mov    (%eax),%eax
f0102b58:	83 ec 08             	sub    $0x8,%esp
f0102b5b:	68 8f 53 13 f0       	push   $0xf013538f
f0102b60:	50                   	push   %eax
f0102b61:	e8 72 e4 02 00       	call   f0130fd8 <strcmp>
f0102b66:	83 c4 10             	add    $0x10,%esp
f0102b69:	85 c0                	test   %eax,%eax
f0102b6b:	75 07                	jne    f0102b74 <command_test_lists+0x164>
	{
		test_alloc_block_NF();
f0102b6d:	e8 36 cb 00 00       	call   f010f6a8 <test_alloc_block_NF>
f0102b72:	eb 3f                	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 7 Example for alloc_block_NF: tstlsts merge
	else if(strcmp(arguments[1], "MERGE") == 0 || strcmp(arguments[1], "merge") == 0)
f0102b74:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b77:	83 c0 04             	add    $0x4,%eax
f0102b7a:	8b 00                	mov    (%eax),%eax
f0102b7c:	83 ec 08             	sub    $0x8,%esp
f0102b7f:	68 92 53 13 f0       	push   $0xf0135392
f0102b84:	50                   	push   %eax
f0102b85:	e8 4e e4 02 00       	call   f0130fd8 <strcmp>
f0102b8a:	83 c4 10             	add    $0x10,%esp
f0102b8d:	85 c0                	test   %eax,%eax
f0102b8f:	74 1d                	je     f0102bae <command_test_lists+0x19e>
f0102b91:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b94:	83 c0 04             	add    $0x4,%eax
f0102b97:	8b 00                	mov    (%eax),%eax
f0102b99:	83 ec 08             	sub    $0x8,%esp
f0102b9c:	68 98 53 13 f0       	push   $0xf0135398
f0102ba1:	50                   	push   %eax
f0102ba2:	e8 31 e4 02 00       	call   f0130fd8 <strcmp>
f0102ba7:	83 c4 10             	add    $0x10,%esp
f0102baa:	85 c0                	test   %eax,%eax
f0102bac:	75 05                	jne    f0102bb3 <command_test_lists+0x1a3>
	{
		test_insert_sorted_with_merge_freeList();
f0102bae:	e8 83 d3 00 00       	call   f010ff36 <test_insert_sorted_with_merge_freeList>
	}
	return 0;
f0102bb3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102bb8:	c9                   	leave  
f0102bb9:	c3                   	ret    

f0102bba <command_test_chunks>:

int command_test_chunks(int number_of_arguments, char **arguments)
{
f0102bba:	55                   	push   %ebp
f0102bbb:	89 e5                	mov    %esp,%ebp
f0102bbd:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102bc0:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102bc4:	74 1a                	je     f0102be0 <command_test_chunks+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstchunk <testname>\n") ;
f0102bc6:	83 ec 0c             	sub    $0xc,%esp
f0102bc9:	68 a0 53 13 f0       	push   $0xf01353a0
f0102bce:	e8 3b e1 ff ff       	call   f0100d0e <cprintf>
f0102bd3:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102bd6:	b8 00 00 00 00       	mov    $0x0,%eax
f0102bdb:	e9 e1 00 00 00       	jmp    f0102cc1 <command_test_chunks+0x107>
	}
	// CUT-PASTE Test
	if(strcmp(arguments[1], "cutpaste") == 0)
f0102be0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102be3:	83 c0 04             	add    $0x4,%eax
f0102be6:	8b 00                	mov    (%eax),%eax
f0102be8:	83 ec 08             	sub    $0x8,%esp
f0102beb:	68 d9 53 13 f0       	push   $0xf01353d9
f0102bf0:	50                   	push   %eax
f0102bf1:	e8 e2 e3 02 00       	call   f0130fd8 <strcmp>
f0102bf6:	83 c4 10             	add    $0x10,%esp
f0102bf9:	85 c0                	test   %eax,%eax
f0102bfb:	75 0a                	jne    f0102c07 <command_test_chunks+0x4d>
	{
		test_cut_paste_pages();
f0102bfd:	e8 5e eb 00 00       	call   f0111760 <test_cut_paste_pages>
f0102c02:	e9 b5 00 00 00       	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// COPY-PASTE Test
	else if(strcmp(arguments[1], "copypaste") == 0)
f0102c07:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c0a:	83 c0 04             	add    $0x4,%eax
f0102c0d:	8b 00                	mov    (%eax),%eax
f0102c0f:	83 ec 08             	sub    $0x8,%esp
f0102c12:	68 e2 53 13 f0       	push   $0xf01353e2
f0102c17:	50                   	push   %eax
f0102c18:	e8 bb e3 02 00       	call   f0130fd8 <strcmp>
f0102c1d:	83 c4 10             	add    $0x10,%esp
f0102c20:	85 c0                	test   %eax,%eax
f0102c22:	75 0a                	jne    f0102c2e <command_test_chunks+0x74>
	{
		test_copy_paste_chunk();
f0102c24:	e8 82 f5 00 00       	call   f01121ab <test_copy_paste_chunk>
f0102c29:	e9 8e 00 00 00       	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// SHARE Test
	else if(strcmp(arguments[1], "share") == 0)
f0102c2e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c31:	83 c0 04             	add    $0x4,%eax
f0102c34:	8b 00                	mov    (%eax),%eax
f0102c36:	83 ec 08             	sub    $0x8,%esp
f0102c39:	68 ec 53 13 f0       	push   $0xf01353ec
f0102c3e:	50                   	push   %eax
f0102c3f:	e8 94 e3 02 00       	call   f0130fd8 <strcmp>
f0102c44:	83 c4 10             	add    $0x10,%esp
f0102c47:	85 c0                	test   %eax,%eax
f0102c49:	75 07                	jne    f0102c52 <command_test_chunks+0x98>
	{
		test_share_chunk();
f0102c4b:	e8 59 06 01 00       	call   f01132a9 <test_share_chunk>
f0102c50:	eb 6a                	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// ALLOCATE Test
	else if(strcmp(arguments[1], "allocate") == 0)
f0102c52:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c55:	83 c0 04             	add    $0x4,%eax
f0102c58:	8b 00                	mov    (%eax),%eax
f0102c5a:	83 ec 08             	sub    $0x8,%esp
f0102c5d:	68 f2 53 13 f0       	push   $0xf01353f2
f0102c62:	50                   	push   %eax
f0102c63:	e8 70 e3 02 00       	call   f0130fd8 <strcmp>
f0102c68:	83 c4 10             	add    $0x10,%esp
f0102c6b:	85 c0                	test   %eax,%eax
f0102c6d:	75 07                	jne    f0102c76 <command_test_chunks+0xbc>
	{
		test_allocate_chunk();
f0102c6f:	e8 5d 10 01 00       	call   f0113cd1 <test_allocate_chunk>
f0102c74:	eb 46                	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// REQUIRED SPACE Test
	else if(strcmp(arguments[1], "required_space") == 0)
f0102c76:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c79:	83 c0 04             	add    $0x4,%eax
f0102c7c:	8b 00                	mov    (%eax),%eax
f0102c7e:	83 ec 08             	sub    $0x8,%esp
f0102c81:	68 fb 53 13 f0       	push   $0xf01353fb
f0102c86:	50                   	push   %eax
f0102c87:	e8 4c e3 02 00       	call   f0130fd8 <strcmp>
f0102c8c:	83 c4 10             	add    $0x10,%esp
f0102c8f:	85 c0                	test   %eax,%eax
f0102c91:	75 07                	jne    f0102c9a <command_test_chunks+0xe0>
	{
		test_calculate_required_frames();
f0102c93:	e8 e8 18 01 00       	call   f0114580 <test_calculate_required_frames>
f0102c98:	eb 22                	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// ALLOCATED SPACE Test
	else if(strcmp(arguments[1], "allocated_space") == 0)
f0102c9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c9d:	83 c0 04             	add    $0x4,%eax
f0102ca0:	8b 00                	mov    (%eax),%eax
f0102ca2:	83 ec 08             	sub    $0x8,%esp
f0102ca5:	68 0a 54 13 f0       	push   $0xf013540a
f0102caa:	50                   	push   %eax
f0102cab:	e8 28 e3 02 00       	call   f0130fd8 <strcmp>
f0102cb0:	83 c4 10             	add    $0x10,%esp
f0102cb3:	85 c0                	test   %eax,%eax
f0102cb5:	75 05                	jne    f0102cbc <command_test_chunks+0x102>
	{
		test_calculate_allocated_space();
f0102cb7:	e8 38 21 01 00       	call   f0114df4 <test_calculate_allocated_space>
	}
	return 0;
f0102cbc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102cc1:	c9                   	leave  
f0102cc2:	c3                   	ret    

f0102cc3 <command_test_paging_manipulation>:

int command_test_paging_manipulation(int number_of_arguments, char **arguments)
{
f0102cc3:	55                   	push   %ebp
f0102cc4:	89 e5                	mov    %esp,%ebp
f0102cc6:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102cc9:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102ccd:	74 1a                	je     f0102ce9 <command_test_paging_manipulation+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstpg <testname>\n") ;
f0102ccf:	83 ec 0c             	sub    $0xc,%esp
f0102cd2:	68 1c 54 13 f0       	push   $0xf013541c
f0102cd7:	e8 32 e0 ff ff       	call   f0100d0e <cprintf>
f0102cdc:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102cdf:	b8 00 00 00 00       	mov    $0x0,%eax
f0102ce4:	e9 e1 00 00 00       	jmp    f0102dca <command_test_paging_manipulation+0x107>
	}
	// Test 1.1-Set/Clear permissions: tstpg scperm1
	if(strcmp(arguments[1], "scperm1") == 0)
f0102ce9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cec:	83 c0 04             	add    $0x4,%eax
f0102cef:	8b 00                	mov    (%eax),%eax
f0102cf1:	83 ec 08             	sub    $0x8,%esp
f0102cf4:	68 52 54 13 f0       	push   $0xf0135452
f0102cf9:	50                   	push   %eax
f0102cfa:	e8 d9 e2 02 00       	call   f0130fd8 <strcmp>
f0102cff:	83 c4 10             	add    $0x10,%esp
f0102d02:	85 c0                	test   %eax,%eax
f0102d04:	75 0a                	jne    f0102d10 <command_test_paging_manipulation+0x4d>
	{
		test_pt_set_page_permissions();
f0102d06:	e8 46 e1 00 00       	call   f0110e51 <test_pt_set_page_permissions>
f0102d0b:	e9 b5 00 00 00       	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 1.2-Set/Clear permissions: tstpg scperm2
	else if(strcmp(arguments[1], "scperm2") == 0)
f0102d10:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d13:	83 c0 04             	add    $0x4,%eax
f0102d16:	8b 00                	mov    (%eax),%eax
f0102d18:	83 ec 08             	sub    $0x8,%esp
f0102d1b:	68 5a 54 13 f0       	push   $0xf013545a
f0102d20:	50                   	push   %eax
f0102d21:	e8 b2 e2 02 00       	call   f0130fd8 <strcmp>
f0102d26:	83 c4 10             	add    $0x10,%esp
f0102d29:	85 c0                	test   %eax,%eax
f0102d2b:	75 0a                	jne    f0102d37 <command_test_paging_manipulation+0x74>
	{
		test_pt_set_page_permissions_invalid_va();
f0102d2d:	e8 82 e3 00 00       	call   f01110b4 <test_pt_set_page_permissions_invalid_va>
f0102d32:	e9 8e 00 00 00       	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 2-Get permissions: tstpg getperm
	else if(strcmp(arguments[1], "getperm") == 0)
f0102d37:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d3a:	83 c0 04             	add    $0x4,%eax
f0102d3d:	8b 00                	mov    (%eax),%eax
f0102d3f:	83 ec 08             	sub    $0x8,%esp
f0102d42:	68 62 54 13 f0       	push   $0xf0135462
f0102d47:	50                   	push   %eax
f0102d48:	e8 8b e2 02 00       	call   f0130fd8 <strcmp>
f0102d4d:	83 c4 10             	add    $0x10,%esp
f0102d50:	85 c0                	test   %eax,%eax
f0102d52:	75 07                	jne    f0102d5b <command_test_paging_manipulation+0x98>
	{
		test_pt_get_page_permissions();
f0102d54:	e8 a4 e3 00 00       	call   f01110fd <test_pt_get_page_permissions>
f0102d59:	eb 6a                	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 3.1-Clear entry: tstpg clear1
	else if(strcmp(arguments[1], "clear1") == 0)
f0102d5b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d5e:	83 c0 04             	add    $0x4,%eax
f0102d61:	8b 00                	mov    (%eax),%eax
f0102d63:	83 ec 08             	sub    $0x8,%esp
f0102d66:	68 6a 54 13 f0       	push   $0xf013546a
f0102d6b:	50                   	push   %eax
f0102d6c:	e8 67 e2 02 00       	call   f0130fd8 <strcmp>
f0102d71:	83 c4 10             	add    $0x10,%esp
f0102d74:	85 c0                	test   %eax,%eax
f0102d76:	75 07                	jne    f0102d7f <command_test_paging_manipulation+0xbc>
	{
		test_pt_clear_page_table_entry();
f0102d78:	e8 c4 e4 00 00       	call   f0111241 <test_pt_clear_page_table_entry>
f0102d7d:	eb 46                	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 3.2-Clear entry: tstpg clear2
	else if(strcmp(arguments[1], "clear2") == 0)
f0102d7f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d82:	83 c0 04             	add    $0x4,%eax
f0102d85:	8b 00                	mov    (%eax),%eax
f0102d87:	83 ec 08             	sub    $0x8,%esp
f0102d8a:	68 71 54 13 f0       	push   $0xf0135471
f0102d8f:	50                   	push   %eax
f0102d90:	e8 43 e2 02 00       	call   f0130fd8 <strcmp>
f0102d95:	83 c4 10             	add    $0x10,%esp
f0102d98:	85 c0                	test   %eax,%eax
f0102d9a:	75 07                	jne    f0102da3 <command_test_paging_manipulation+0xe0>
	{
		test_pt_clear_page_table_entry_invalid_va();
f0102d9c:	e8 f9 e5 00 00       	call   f011139a <test_pt_clear_page_table_entry_invalid_va>
f0102da1:	eb 22                	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 4-Convert virtual to physical: tstpg v2p
	else if(strcmp(arguments[1], "v2p") == 0)
f0102da3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102da6:	83 c0 04             	add    $0x4,%eax
f0102da9:	8b 00                	mov    (%eax),%eax
f0102dab:	83 ec 08             	sub    $0x8,%esp
f0102dae:	68 78 54 13 f0       	push   $0xf0135478
f0102db3:	50                   	push   %eax
f0102db4:	e8 1f e2 02 00       	call   f0130fd8 <strcmp>
f0102db9:	83 c4 10             	add    $0x10,%esp
f0102dbc:	85 c0                	test   %eax,%eax
f0102dbe:	75 05                	jne    f0102dc5 <command_test_paging_manipulation+0x102>
	{
		test_virtual_to_physical();
f0102dc0:	e8 0d e6 00 00       	call   f01113d2 <test_virtual_to_physical>
	}
	return 0;
f0102dc5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102dca:	c9                   	leave  
f0102dcb:	c3                   	ret    

f0102dcc <command_test_kheap>:

int command_test_kheap(int number_of_arguments, char **arguments)
{
f0102dcc:	55                   	push   %ebp
f0102dcd:	89 e5                	mov    %esp,%ebp
f0102dcf:	83 ec 18             	sub    $0x18,%esp
	// Parameters Validation Checking
	if (strcmp(arguments[2], "kmalloc") == 0 && number_of_arguments != 4)
f0102dd2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102dd5:	83 c0 08             	add    $0x8,%eax
f0102dd8:	8b 00                	mov    (%eax),%eax
f0102dda:	83 ec 08             	sub    $0x8,%esp
f0102ddd:	68 7c 54 13 f0       	push   $0xf013547c
f0102de2:	50                   	push   %eax
f0102de3:	e8 f0 e1 02 00       	call   f0130fd8 <strcmp>
f0102de8:	83 c4 10             	add    $0x10,%esp
f0102deb:	85 c0                	test   %eax,%eax
f0102ded:	75 20                	jne    f0102e0f <command_test_kheap+0x43>
f0102def:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102df3:	74 1a                	je     f0102e0f <command_test_kheap+0x43>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> kmalloc <1 or 2 or 3>\n") ;
f0102df5:	83 ec 0c             	sub    $0xc,%esp
f0102df8:	68 84 54 13 f0       	push   $0xf0135484
f0102dfd:	e8 0c df ff ff       	call   f0100d0e <cprintf>
f0102e02:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102e05:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e0a:	e9 33 03 00 00       	jmp    f0103142 <command_test_kheap+0x376>
	}
	if (strcmp(arguments[2], "kmalloc") != 0 && number_of_arguments != 3)
f0102e0f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e12:	83 c0 08             	add    $0x8,%eax
f0102e15:	8b 00                	mov    (%eax),%eax
f0102e17:	83 ec 08             	sub    $0x8,%esp
f0102e1a:	68 7c 54 13 f0       	push   $0xf013547c
f0102e1f:	50                   	push   %eax
f0102e20:	e8 b3 e1 02 00       	call   f0130fd8 <strcmp>
f0102e25:	83 c4 10             	add    $0x10,%esp
f0102e28:	85 c0                	test   %eax,%eax
f0102e2a:	74 20                	je     f0102e4c <command_test_kheap+0x80>
f0102e2c:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102e30:	74 1a                	je     f0102e4c <command_test_kheap+0x80>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> <testname>\n") ;
f0102e32:	83 ec 0c             	sub    $0xc,%esp
f0102e35:	68 d4 54 13 f0       	push   $0xf01354d4
f0102e3a:	e8 cf de ff ff       	call   f0100d0e <cprintf>
f0102e3f:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102e42:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e47:	e9 f6 02 00 00       	jmp    f0103142 <command_test_kheap+0x376>
	}

	// Setting Strategy
	if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102e4c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e4f:	83 c0 04             	add    $0x4,%eax
f0102e52:	8b 00                	mov    (%eax),%eax
f0102e54:	83 ec 08             	sub    $0x8,%esp
f0102e57:	68 80 53 13 f0       	push   $0xf0135380
f0102e5c:	50                   	push   %eax
f0102e5d:	e8 76 e1 02 00       	call   f0130fd8 <strcmp>
f0102e62:	83 c4 10             	add    $0x10,%esp
f0102e65:	85 c0                	test   %eax,%eax
f0102e67:	74 1d                	je     f0102e86 <command_test_kheap+0xba>
f0102e69:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e6c:	83 c0 04             	add    $0x4,%eax
f0102e6f:	8b 00                	mov    (%eax),%eax
f0102e71:	83 ec 08             	sub    $0x8,%esp
f0102e74:	68 83 53 13 f0       	push   $0xf0135383
f0102e79:	50                   	push   %eax
f0102e7a:	e8 59 e1 02 00       	call   f0130fd8 <strcmp>
f0102e7f:	83 c4 10             	add    $0x10,%esp
f0102e82:	85 c0                	test   %eax,%eax
f0102e84:	75 1a                	jne    f0102ea0 <command_test_kheap+0xd4>
	{
		setKHeapPlacementStrategyFIRSTFIT();
f0102e86:	e8 60 e0 ff ff       	call   f0100eeb <setKHeapPlacementStrategyFIRSTFIT>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0102e8b:	83 ec 0c             	sub    $0xc,%esp
f0102e8e:	68 1c 4f 13 f0       	push   $0xf0134f1c
f0102e93:	e8 76 de ff ff       	call   f0100d0e <cprintf>
f0102e98:	83 c4 10             	add    $0x10,%esp
f0102e9b:	e9 a0 00 00 00       	jmp    f0102f40 <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102ea0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ea3:	83 c0 04             	add    $0x4,%eax
f0102ea6:	8b 00                	mov    (%eax),%eax
f0102ea8:	83 ec 08             	sub    $0x8,%esp
f0102eab:	68 86 53 13 f0       	push   $0xf0135386
f0102eb0:	50                   	push   %eax
f0102eb1:	e8 22 e1 02 00       	call   f0130fd8 <strcmp>
f0102eb6:	83 c4 10             	add    $0x10,%esp
f0102eb9:	85 c0                	test   %eax,%eax
f0102ebb:	74 1d                	je     f0102eda <command_test_kheap+0x10e>
f0102ebd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ec0:	83 c0 04             	add    $0x4,%eax
f0102ec3:	8b 00                	mov    (%eax),%eax
f0102ec5:	83 ec 08             	sub    $0x8,%esp
f0102ec8:	68 89 53 13 f0       	push   $0xf0135389
f0102ecd:	50                   	push   %eax
f0102ece:	e8 05 e1 02 00       	call   f0130fd8 <strcmp>
f0102ed3:	83 c4 10             	add    $0x10,%esp
f0102ed6:	85 c0                	test   %eax,%eax
f0102ed8:	75 17                	jne    f0102ef1 <command_test_kheap+0x125>
	{
		setKHeapPlacementStrategyBESTFIT();
f0102eda:	e8 1c e0 ff ff       	call   f0100efb <setKHeapPlacementStrategyBESTFIT>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f0102edf:	83 ec 0c             	sub    $0xc,%esp
f0102ee2:	68 4c 4f 13 f0       	push   $0xf0134f4c
f0102ee7:	e8 22 de ff ff       	call   f0100d0e <cprintf>
f0102eec:	83 c4 10             	add    $0x10,%esp
f0102eef:	eb 4f                	jmp    f0102f40 <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102ef1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ef4:	83 c0 04             	add    $0x4,%eax
f0102ef7:	8b 00                	mov    (%eax),%eax
f0102ef9:	83 ec 08             	sub    $0x8,%esp
f0102efc:	68 8c 53 13 f0       	push   $0xf013538c
f0102f01:	50                   	push   %eax
f0102f02:	e8 d1 e0 02 00       	call   f0130fd8 <strcmp>
f0102f07:	83 c4 10             	add    $0x10,%esp
f0102f0a:	85 c0                	test   %eax,%eax
f0102f0c:	74 1d                	je     f0102f2b <command_test_kheap+0x15f>
f0102f0e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f11:	83 c0 04             	add    $0x4,%eax
f0102f14:	8b 00                	mov    (%eax),%eax
f0102f16:	83 ec 08             	sub    $0x8,%esp
f0102f19:	68 8f 53 13 f0       	push   $0xf013538f
f0102f1e:	50                   	push   %eax
f0102f1f:	e8 b4 e0 02 00       	call   f0130fd8 <strcmp>
f0102f24:	83 c4 10             	add    $0x10,%esp
f0102f27:	85 c0                	test   %eax,%eax
f0102f29:	75 15                	jne    f0102f40 <command_test_kheap+0x174>
	{
		setKHeapPlacementStrategyNEXTFIT();
f0102f2b:	e8 db df ff ff       	call   f0100f0b <setKHeapPlacementStrategyNEXTFIT>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f0102f30:	83 ec 0c             	sub    $0xc,%esp
f0102f33:	68 78 4f 13 f0       	push   $0xf0134f78
f0102f38:	e8 d1 dd ff ff       	call   f0100d0e <cprintf>
f0102f3d:	83 c4 10             	add    $0x10,%esp
	}

	// Test 1-kmalloc: tstkheap FF kmalloc 1
	if(strcmp(arguments[2], "kmalloc") == 0)
f0102f40:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f43:	83 c0 08             	add    $0x8,%eax
f0102f46:	8b 00                	mov    (%eax),%eax
f0102f48:	83 ec 08             	sub    $0x8,%esp
f0102f4b:	68 7c 54 13 f0       	push   $0xf013547c
f0102f50:	50                   	push   %eax
f0102f51:	e8 82 e0 02 00       	call   f0130fd8 <strcmp>
f0102f56:	83 c4 10             	add    $0x10,%esp
f0102f59:	85 c0                	test   %eax,%eax
f0102f5b:	0f 85 13 01 00 00    	jne    f0103074 <command_test_kheap+0x2a8>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f0102f61:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f64:	83 c0 0c             	add    $0xc,%eax
f0102f67:	8b 00                	mov    (%eax),%eax
f0102f69:	83 ec 04             	sub    $0x4,%esp
f0102f6c:	6a 0a                	push   $0xa
f0102f6e:	6a 00                	push   $0x0
f0102f70:	50                   	push   %eax
f0102f71:	e8 b6 e2 02 00       	call   f013122c <strtol>
f0102f76:	83 c4 10             	add    $0x10,%esp
f0102f79:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f0102f7c:	e8 be df ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f0102f81:	84 c0                	test   %al,%al
f0102f83:	74 54                	je     f0102fd9 <command_test_kheap+0x20d>
		{
			if (testNum == 0)
f0102f85:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102f89:	75 1a                	jne    f0102fa5 <command_test_kheap+0x1d9>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f0102f8b:	83 ec 0c             	sub    $0xc,%esp
f0102f8e:	68 f0 51 13 f0       	push   $0xf01351f0
f0102f93:	e8 76 dd ff ff       	call   f0100d0e <cprintf>
f0102f98:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102f9b:	b8 00 00 00 00       	mov    $0x0,%eax
f0102fa0:	e9 9d 01 00 00       	jmp    f0103142 <command_test_kheap+0x376>
			}
			//Test FIRST FIT allocation
			if (testNum == 1)
f0102fa5:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102fa9:	75 0a                	jne    f0102fb5 <command_test_kheap+0x1e9>
				test_kmalloc();
f0102fab:	e8 0b 44 01 00       	call   f01173bb <test_kmalloc>
f0102fb0:	e9 b5 00 00 00       	jmp    f010306a <command_test_kheap+0x29e>
			else if (testNum == 2)
f0102fb5:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102fb9:	75 0a                	jne    f0102fc5 <command_test_kheap+0x1f9>
				test_kmalloc_firstfit1();
f0102fbb:	e8 84 92 01 00       	call   f011c244 <test_kmalloc_firstfit1>
f0102fc0:	e9 a5 00 00 00       	jmp    f010306a <command_test_kheap+0x29e>
			else if (testNum == 3)
f0102fc5:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102fc9:	0f 85 9b 00 00 00    	jne    f010306a <command_test_kheap+0x29e>
				test_kmalloc_firstfit2();
f0102fcf:	e8 12 a6 01 00       	call   f011d5e6 <test_kmalloc_firstfit2>
f0102fd4:	e9 91 00 00 00       	jmp    f010306a <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyBESTFIT())
f0102fd9:	e8 76 df ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f0102fde:	84 c0                	test   %al,%al
f0102fe0:	74 47                	je     f0103029 <command_test_kheap+0x25d>
		{
			if (testNum == 0)
f0102fe2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102fe6:	75 1a                	jne    f0103002 <command_test_kheap+0x236>
			{
				cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f0102fe8:	83 ec 0c             	sub    $0xc,%esp
f0102feb:	68 40 52 13 f0       	push   $0xf0135240
f0102ff0:	e8 19 dd ff ff       	call   f0100d0e <cprintf>
f0102ff5:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102ff8:	b8 00 00 00 00       	mov    $0x0,%eax
f0102ffd:	e9 40 01 00 00       	jmp    f0103142 <command_test_kheap+0x376>
			}
			if (testNum == 1)
f0103002:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0103006:	75 07                	jne    f010300f <command_test_kheap+0x243>
				test_kmalloc();
f0103008:	e8 ae 43 01 00       	call   f01173bb <test_kmalloc>
f010300d:	eb 5b                	jmp    f010306a <command_test_kheap+0x29e>
			else if (testNum == 2)
f010300f:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0103013:	75 07                	jne    f010301c <command_test_kheap+0x250>
				test_kmalloc_bestfit1();
f0103015:	e8 f4 6c 01 00       	call   f0119d0e <test_kmalloc_bestfit1>
f010301a:	eb 4e                	jmp    f010306a <command_test_kheap+0x29e>
			else if (testNum == 3)
f010301c:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0103020:	75 48                	jne    f010306a <command_test_kheap+0x29e>
				test_kmalloc_bestfit2();
f0103022:	e8 3d 7f 01 00       	call   f011af64 <test_kmalloc_bestfit2>
f0103027:	eb 41                	jmp    f010306a <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyNEXTFIT())
f0103029:	e8 3b df ff ff       	call   f0100f69 <isKHeapPlacementStrategyNEXTFIT>
f010302e:	84 c0                	test   %al,%al
f0103030:	74 38                	je     f010306a <command_test_kheap+0x29e>
		{
			if (testNum == 0)
f0103032:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103036:	75 1a                	jne    f0103052 <command_test_kheap+0x286>
			{
				cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f0103038:	83 ec 0c             	sub    $0xc,%esp
f010303b:	68 90 52 13 f0       	push   $0xf0135290
f0103040:	e8 c9 dc ff ff       	call   f0100d0e <cprintf>
f0103045:	83 c4 10             	add    $0x10,%esp
				return 0;
f0103048:	b8 00 00 00 00       	mov    $0x0,%eax
f010304d:	e9 f0 00 00 00       	jmp    f0103142 <command_test_kheap+0x376>
			}
			//Test cont. allocation
			if (testNum == 1)
f0103052:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0103056:	75 07                	jne    f010305f <command_test_kheap+0x293>
				test_kmalloc();
f0103058:	e8 5e 43 01 00       	call   f01173bb <test_kmalloc>
f010305d:	eb 0b                	jmp    f010306a <command_test_kheap+0x29e>
			//Test nextfit strategy
			else if (testNum == 2)
f010305f:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0103063:	75 05                	jne    f010306a <command_test_kheap+0x29e>
				test_kmalloc_nextfit();
f0103065:	e8 af 55 01 00       	call   f0118619 <test_kmalloc_nextfit>
		}
		return 0;
f010306a:	b8 00 00 00 00       	mov    $0x0,%eax
f010306f:	e9 ce 00 00 00       	jmp    f0103142 <command_test_kheap+0x376>
	}
	// Test 2-kfree: tstkheap FF kfree
	else if(strcmp(arguments[2], "kfree") == 0)
f0103074:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103077:	83 c0 08             	add    $0x8,%eax
f010307a:	8b 00                	mov    (%eax),%eax
f010307c:	83 ec 08             	sub    $0x8,%esp
f010307f:	68 18 55 13 f0       	push   $0xf0135518
f0103084:	50                   	push   %eax
f0103085:	e8 4e df 02 00       	call   f0130fd8 <strcmp>
f010308a:	83 c4 10             	add    $0x10,%esp
f010308d:	85 c0                	test   %eax,%eax
f010308f:	75 28                	jne    f01030b9 <command_test_kheap+0x2ed>
	{
		if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f0103091:	e8 be de ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f0103096:	84 c0                	test   %al,%al
f0103098:	75 09                	jne    f01030a3 <command_test_kheap+0x2d7>
f010309a:	e8 a0 de ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f010309f:	84 c0                	test   %al,%al
f01030a1:	74 07                	je     f01030aa <command_test_kheap+0x2de>
		{
			test_kfree_bestfirstfit();
f01030a3:	e8 75 eb 01 00       	call   f0121c1d <test_kfree_bestfirstfit>
f01030a8:	eb 05                	jmp    f01030af <command_test_kheap+0x2e3>
		}
		else //NEXT & CONT
		{
			test_kfree();
f01030aa:	e8 1c ca 01 00       	call   f011facb <test_kfree>
		}
		return 0;
f01030af:	b8 00 00 00 00       	mov    $0x0,%eax
f01030b4:	e9 89 00 00 00       	jmp    f0103142 <command_test_kheap+0x376>
	}
	// Test 3-kphysaddr: tstkheap FF kphysaddr
	else if(strcmp(arguments[2], "kphysaddr") == 0)
f01030b9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030bc:	83 c0 08             	add    $0x8,%eax
f01030bf:	8b 00                	mov    (%eax),%eax
f01030c1:	83 ec 08             	sub    $0x8,%esp
f01030c4:	68 1e 55 13 f0       	push   $0xf013551e
f01030c9:	50                   	push   %eax
f01030ca:	e8 09 df 02 00       	call   f0130fd8 <strcmp>
f01030cf:	83 c4 10             	add    $0x10,%esp
f01030d2:	85 c0                	test   %eax,%eax
f01030d4:	75 0c                	jne    f01030e2 <command_test_kheap+0x316>
	{
		test_kheap_phys_addr();
f01030d6:	e8 3e 05 02 00       	call   f0123619 <test_kheap_phys_addr>
		return 0;
f01030db:	b8 00 00 00 00       	mov    $0x0,%eax
f01030e0:	eb 60                	jmp    f0103142 <command_test_kheap+0x376>
	}
	// Test 4-kvirtaddr: tstkheap FF kvirtaddr
	else if(strcmp(arguments[2], "kvirtaddr") == 0)
f01030e2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030e5:	83 c0 08             	add    $0x8,%eax
f01030e8:	8b 00                	mov    (%eax),%eax
f01030ea:	83 ec 08             	sub    $0x8,%esp
f01030ed:	68 28 55 13 f0       	push   $0xf0135528
f01030f2:	50                   	push   %eax
f01030f3:	e8 e0 de 02 00       	call   f0130fd8 <strcmp>
f01030f8:	83 c4 10             	add    $0x10,%esp
f01030fb:	85 c0                	test   %eax,%eax
f01030fd:	75 0c                	jne    f010310b <command_test_kheap+0x33f>
	{
		test_kheap_virt_addr();
f01030ff:	e8 e5 19 02 00       	call   f0124ae9 <test_kheap_virt_addr>
		return 0;
f0103104:	b8 00 00 00 00       	mov    $0x0,%eax
f0103109:	eb 37                	jmp    f0103142 <command_test_kheap+0x376>
	}
	// Test 5-krealloc: tstkheap BF krealloc
	else if(strcmp(arguments[2], "krealloc") == 0)
f010310b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010310e:	83 c0 08             	add    $0x8,%eax
f0103111:	8b 00                	mov    (%eax),%eax
f0103113:	83 ec 08             	sub    $0x8,%esp
f0103116:	68 32 55 13 f0       	push   $0xf0135532
f010311b:	50                   	push   %eax
f010311c:	e8 b7 de 02 00       	call   f0130fd8 <strcmp>
f0103121:	83 c4 10             	add    $0x10,%esp
f0103124:	85 c0                	test   %eax,%eax
f0103126:	75 15                	jne    f010313d <command_test_kheap+0x371>
	{
		if (isKHeapPlacementStrategyBESTFIT())
f0103128:	e8 27 de ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f010312d:	84 c0                	test   %al,%al
f010312f:	74 05                	je     f0103136 <command_test_kheap+0x36a>
		{
			test_krealloc_BF();
f0103131:	e8 57 a8 02 00       	call   f012d98d <test_krealloc_BF>
		}
		return 0;
f0103136:	b8 00 00 00 00       	mov    $0x0,%eax
f010313b:	eb 05                	jmp    f0103142 <command_test_kheap+0x376>
	}
	return 0;
f010313d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103142:	c9                   	leave  
f0103143:	c3                   	ret    

f0103144 <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f0103144:	55                   	push   %ebp
f0103145:	89 e5                	mov    %esp,%ebp
f0103147:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f010314a:	8b 45 08             	mov    0x8(%ebp),%eax
f010314d:	05 00 14 00 00       	add    $0x1400,%eax
f0103152:	c1 e0 03             	shl    $0x3,%eax
f0103155:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0103158:	83 ec 04             	sub    $0x4,%esp
f010315b:	6a 08                	push   $0x8
f010315d:	ff 75 0c             	pushl  0xc(%ebp)
f0103160:	ff 75 f4             	pushl  -0xc(%ebp)
f0103163:	e8 b7 e4 02 00       	call   f013161f <ide_read>
f0103168:	83 c4 10             	add    $0x10,%esp
f010316b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f010316e:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103171:	c9                   	leave  
f0103172:	c3                   	ret    

f0103173 <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f0103173:	55                   	push   %ebp
f0103174:	89 e5                	mov    %esp,%ebp
f0103176:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0103179:	8b 45 08             	mov    0x8(%ebp),%eax
f010317c:	05 00 14 00 00       	add    $0x1400,%eax
f0103181:	c1 e0 03             	shl    $0x3,%eax
f0103184:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0103187:	83 ec 04             	sub    $0x4,%esp
f010318a:	6a 08                	push   $0x8
f010318c:	ff 75 0c             	pushl  0xc(%ebp)
f010318f:	ff 75 f4             	pushl  -0xc(%ebp)
f0103192:	e8 c8 e5 02 00       	call   f013175f <ide_write>
f0103197:	83 c4 10             	add    $0x10,%esp
f010319a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f010319d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01031a1:	74 14                	je     f01031b7 <write_disk_page+0x44>
		panic("Error writing on disk\n");
f01031a3:	83 ec 04             	sub    $0x4,%esp
f01031a6:	68 3c 55 13 f0       	push   $0xf013553c
f01031ab:	6a 2e                	push   $0x2e
f01031ad:	68 53 55 13 f0       	push   $0xf0135553
f01031b2:	e8 4e d0 ff ff       	call   f0100205 <_panic>
	return success;
f01031b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01031ba:	c9                   	leave  
f01031bb:	c3                   	ret    

f01031bc <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f01031bc:	55                   	push   %ebp
f01031bd:	89 e5                	mov    %esp,%ebp
f01031bf:	53                   	push   %ebx
f01031c0:	83 ec 14             	sub    $0x14,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f01031c3:	c7 05 b8 5d 87 f0 00 	movl   $0x0,0xf0875db8
f01031ca:	00 00 00 
f01031cd:	c7 05 bc 5d 87 f0 00 	movl   $0x0,0xf0875dbc
f01031d4:	00 00 00 
f01031d7:	c7 05 c4 5d 87 f0 00 	movl   $0x0,0xf0875dc4
f01031de:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f01031e1:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f01031e8:	e9 e8 00 00 00       	jmp    f01032d5 <initialize_disk_page_file+0x119>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f01031ed:	8b 0d dc 5c 87 f0    	mov    0xf0875cdc,%ecx
f01031f3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01031f6:	89 d0                	mov    %edx,%eax
f01031f8:	01 c0                	add    %eax,%eax
f01031fa:	01 d0                	add    %edx,%eax
f01031fc:	c1 e0 03             	shl    $0x3,%eax
f01031ff:	01 c8                	add    %ecx,%eax
f0103201:	83 ec 0c             	sub    $0xc,%esp
f0103204:	50                   	push   %eax
f0103205:	e8 cd 36 00 00       	call   f01068d7 <initialize_frame_info>
f010320a:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f010320d:	8b 0d dc 5c 87 f0    	mov    0xf0875cdc,%ecx
f0103213:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103216:	89 d0                	mov    %edx,%eax
f0103218:	01 c0                	add    %eax,%eax
f010321a:	01 d0                	add    %edx,%eax
f010321c:	c1 e0 03             	shl    $0x3,%eax
f010321f:	01 c8                	add    %ecx,%eax
f0103221:	85 c0                	test   %eax,%eax
f0103223:	75 14                	jne    f0103239 <initialize_disk_page_file+0x7d>
f0103225:	83 ec 04             	sub    $0x4,%esp
f0103228:	68 70 55 13 f0       	push   $0xf0135570
f010322d:	6a 59                	push   $0x59
f010322f:	68 53 55 13 f0       	push   $0xf0135553
f0103234:	e8 cc cf ff ff       	call   f0100205 <_panic>
f0103239:	8b 0d dc 5c 87 f0    	mov    0xf0875cdc,%ecx
f010323f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103242:	89 d0                	mov    %edx,%eax
f0103244:	01 c0                	add    %eax,%eax
f0103246:	01 d0                	add    %edx,%eax
f0103248:	c1 e0 03             	shl    $0x3,%eax
f010324b:	01 c8                	add    %ecx,%eax
f010324d:	8b 15 b8 5d 87 f0    	mov    0xf0875db8,%edx
f0103253:	89 10                	mov    %edx,(%eax)
f0103255:	8b 00                	mov    (%eax),%eax
f0103257:	85 c0                	test   %eax,%eax
f0103259:	74 1f                	je     f010327a <initialize_disk_page_file+0xbe>
f010325b:	8b 15 b8 5d 87 f0    	mov    0xf0875db8,%edx
f0103261:	8b 1d dc 5c 87 f0    	mov    0xf0875cdc,%ebx
f0103267:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010326a:	89 c8                	mov    %ecx,%eax
f010326c:	01 c0                	add    %eax,%eax
f010326e:	01 c8                	add    %ecx,%eax
f0103270:	c1 e0 03             	shl    $0x3,%eax
f0103273:	01 d8                	add    %ebx,%eax
f0103275:	89 42 04             	mov    %eax,0x4(%edx)
f0103278:	eb 19                	jmp    f0103293 <initialize_disk_page_file+0xd7>
f010327a:	8b 0d dc 5c 87 f0    	mov    0xf0875cdc,%ecx
f0103280:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103283:	89 d0                	mov    %edx,%eax
f0103285:	01 c0                	add    %eax,%eax
f0103287:	01 d0                	add    %edx,%eax
f0103289:	c1 e0 03             	shl    $0x3,%eax
f010328c:	01 c8                	add    %ecx,%eax
f010328e:	a3 bc 5d 87 f0       	mov    %eax,0xf0875dbc
f0103293:	8b 0d dc 5c 87 f0    	mov    0xf0875cdc,%ecx
f0103299:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010329c:	89 d0                	mov    %edx,%eax
f010329e:	01 c0                	add    %eax,%eax
f01032a0:	01 d0                	add    %edx,%eax
f01032a2:	c1 e0 03             	shl    $0x3,%eax
f01032a5:	01 c8                	add    %ecx,%eax
f01032a7:	a3 b8 5d 87 f0       	mov    %eax,0xf0875db8
f01032ac:	8b 0d dc 5c 87 f0    	mov    0xf0875cdc,%ecx
f01032b2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01032b5:	89 d0                	mov    %edx,%eax
f01032b7:	01 c0                	add    %eax,%eax
f01032b9:	01 d0                	add    %edx,%eax
f01032bb:	c1 e0 03             	shl    $0x3,%eax
f01032be:	01 c8                	add    %ecx,%eax
f01032c0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01032c7:	a1 c4 5d 87 f0       	mov    0xf0875dc4,%eax
f01032cc:	40                   	inc    %eax
f01032cd:	a3 c4 5d 87 f0       	mov    %eax,0xf0875dc4
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f01032d2:	ff 45 f4             	incl   -0xc(%ebp)
f01032d5:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f01032dc:	0f 8e 0b ff ff ff    	jle    f01031ed <initialize_disk_page_file+0x31>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f01032e2:	90                   	nop
f01032e3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01032e6:	c9                   	leave  
f01032e7:	c3                   	ret    

f01032e8 <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct FrameInfo *ptr_frame_info)
{
f01032e8:	55                   	push   %ebp
f01032e9:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f01032eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01032ee:	8b 15 dc 5c 87 f0    	mov    0xf0875cdc,%edx
f01032f4:	29 d0                	sub    %edx,%eax
f01032f6:	c1 f8 03             	sar    $0x3,%eax
f01032f9:	89 c2                	mov    %eax,%edx
f01032fb:	89 d0                	mov    %edx,%eax
f01032fd:	c1 e0 02             	shl    $0x2,%eax
f0103300:	01 d0                	add    %edx,%eax
f0103302:	c1 e0 02             	shl    $0x2,%eax
f0103305:	01 d0                	add    %edx,%eax
f0103307:	c1 e0 02             	shl    $0x2,%eax
f010330a:	01 d0                	add    %edx,%eax
f010330c:	89 c1                	mov    %eax,%ecx
f010330e:	c1 e1 08             	shl    $0x8,%ecx
f0103311:	01 c8                	add    %ecx,%eax
f0103313:	89 c1                	mov    %eax,%ecx
f0103315:	c1 e1 10             	shl    $0x10,%ecx
f0103318:	01 c8                	add    %ecx,%eax
f010331a:	01 c0                	add    %eax,%eax
f010331c:	01 d0                	add    %edx,%eax
}
f010331e:	5d                   	pop    %ebp
f010331f:	c3                   	ret    

f0103320 <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f0103320:	55                   	push   %ebp
f0103321:	89 e5                	mov    %esp,%ebp
f0103323:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct FrameInfo *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f0103326:	a1 b8 5d 87 f0       	mov    0xf0875db8,%eax
f010332b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f010332e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103332:	75 0a                	jne    f010333e <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f0103334:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103339:	e9 a7 00 00 00       	jmp    f01033e5 <allocate_disk_frame+0xc5>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f010333e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103342:	75 14                	jne    f0103358 <allocate_disk_frame+0x38>
f0103344:	83 ec 04             	sub    $0x4,%esp
f0103347:	68 93 55 13 f0       	push   $0xf0135593
f010334c:	6a 78                	push   $0x78
f010334e:	68 53 55 13 f0       	push   $0xf0135553
f0103353:	e8 ad ce ff ff       	call   f0100205 <_panic>
f0103358:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010335b:	8b 00                	mov    (%eax),%eax
f010335d:	85 c0                	test   %eax,%eax
f010335f:	74 10                	je     f0103371 <allocate_disk_frame+0x51>
f0103361:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103364:	8b 00                	mov    (%eax),%eax
f0103366:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103369:	8b 52 04             	mov    0x4(%edx),%edx
f010336c:	89 50 04             	mov    %edx,0x4(%eax)
f010336f:	eb 0b                	jmp    f010337c <allocate_disk_frame+0x5c>
f0103371:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103374:	8b 40 04             	mov    0x4(%eax),%eax
f0103377:	a3 bc 5d 87 f0       	mov    %eax,0xf0875dbc
f010337c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010337f:	8b 40 04             	mov    0x4(%eax),%eax
f0103382:	85 c0                	test   %eax,%eax
f0103384:	74 0f                	je     f0103395 <allocate_disk_frame+0x75>
f0103386:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103389:	8b 40 04             	mov    0x4(%eax),%eax
f010338c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010338f:	8b 12                	mov    (%edx),%edx
f0103391:	89 10                	mov    %edx,(%eax)
f0103393:	eb 0a                	jmp    f010339f <allocate_disk_frame+0x7f>
f0103395:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103398:	8b 00                	mov    (%eax),%eax
f010339a:	a3 b8 5d 87 f0       	mov    %eax,0xf0875db8
f010339f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01033a2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01033a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01033ab:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01033b2:	a1 c4 5d 87 f0       	mov    0xf0875dc4,%eax
f01033b7:	48                   	dec    %eax
f01033b8:	a3 c4 5d 87 f0       	mov    %eax,0xf0875dc4
	initialize_frame_info(ptr_frame_info);
f01033bd:	83 ec 0c             	sub    $0xc,%esp
f01033c0:	ff 75 f4             	pushl  -0xc(%ebp)
f01033c3:	e8 0f 35 00 00       	call   f01068d7 <initialize_frame_info>
f01033c8:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f01033cb:	83 ec 0c             	sub    $0xc,%esp
f01033ce:	ff 75 f4             	pushl  -0xc(%ebp)
f01033d1:	e8 12 ff ff ff       	call   f01032e8 <to_disk_frame_number>
f01033d6:	83 c4 10             	add    $0x10,%esp
f01033d9:	89 c2                	mov    %eax,%edx
f01033db:	8b 45 08             	mov    0x8(%ebp),%eax
f01033de:	89 10                	mov    %edx,(%eax)
	return 0;
f01033e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01033e5:	c9                   	leave  
f01033e6:	c3                   	ret    

f01033e7 <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f01033e7:	55                   	push   %ebp
f01033e8:	89 e5                	mov    %esp,%ebp
f01033ea:	53                   	push   %ebx
f01033eb:	83 ec 04             	sub    $0x4,%esp
	// Fill this function in
	if(dfn == 0) return;
f01033ee:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01033f2:	0f 84 ca 00 00 00    	je     f01034c2 <free_disk_frame+0xdb>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f01033f8:	8b 0d dc 5c 87 f0    	mov    0xf0875cdc,%ecx
f01033fe:	8b 55 08             	mov    0x8(%ebp),%edx
f0103401:	89 d0                	mov    %edx,%eax
f0103403:	01 c0                	add    %eax,%eax
f0103405:	01 d0                	add    %edx,%eax
f0103407:	c1 e0 03             	shl    $0x3,%eax
f010340a:	01 c8                	add    %ecx,%eax
f010340c:	85 c0                	test   %eax,%eax
f010340e:	75 17                	jne    f0103427 <free_disk_frame+0x40>
f0103410:	83 ec 04             	sub    $0x4,%esp
f0103413:	68 70 55 13 f0       	push   $0xf0135570
f0103418:	68 85 00 00 00       	push   $0x85
f010341d:	68 53 55 13 f0       	push   $0xf0135553
f0103422:	e8 de cd ff ff       	call   f0100205 <_panic>
f0103427:	8b 0d dc 5c 87 f0    	mov    0xf0875cdc,%ecx
f010342d:	8b 55 08             	mov    0x8(%ebp),%edx
f0103430:	89 d0                	mov    %edx,%eax
f0103432:	01 c0                	add    %eax,%eax
f0103434:	01 d0                	add    %edx,%eax
f0103436:	c1 e0 03             	shl    $0x3,%eax
f0103439:	01 c8                	add    %ecx,%eax
f010343b:	8b 15 b8 5d 87 f0    	mov    0xf0875db8,%edx
f0103441:	89 10                	mov    %edx,(%eax)
f0103443:	8b 00                	mov    (%eax),%eax
f0103445:	85 c0                	test   %eax,%eax
f0103447:	74 1f                	je     f0103468 <free_disk_frame+0x81>
f0103449:	8b 15 b8 5d 87 f0    	mov    0xf0875db8,%edx
f010344f:	8b 1d dc 5c 87 f0    	mov    0xf0875cdc,%ebx
f0103455:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0103458:	89 c8                	mov    %ecx,%eax
f010345a:	01 c0                	add    %eax,%eax
f010345c:	01 c8                	add    %ecx,%eax
f010345e:	c1 e0 03             	shl    $0x3,%eax
f0103461:	01 d8                	add    %ebx,%eax
f0103463:	89 42 04             	mov    %eax,0x4(%edx)
f0103466:	eb 19                	jmp    f0103481 <free_disk_frame+0x9a>
f0103468:	8b 0d dc 5c 87 f0    	mov    0xf0875cdc,%ecx
f010346e:	8b 55 08             	mov    0x8(%ebp),%edx
f0103471:	89 d0                	mov    %edx,%eax
f0103473:	01 c0                	add    %eax,%eax
f0103475:	01 d0                	add    %edx,%eax
f0103477:	c1 e0 03             	shl    $0x3,%eax
f010347a:	01 c8                	add    %ecx,%eax
f010347c:	a3 bc 5d 87 f0       	mov    %eax,0xf0875dbc
f0103481:	8b 0d dc 5c 87 f0    	mov    0xf0875cdc,%ecx
f0103487:	8b 55 08             	mov    0x8(%ebp),%edx
f010348a:	89 d0                	mov    %edx,%eax
f010348c:	01 c0                	add    %eax,%eax
f010348e:	01 d0                	add    %edx,%eax
f0103490:	c1 e0 03             	shl    $0x3,%eax
f0103493:	01 c8                	add    %ecx,%eax
f0103495:	a3 b8 5d 87 f0       	mov    %eax,0xf0875db8
f010349a:	8b 0d dc 5c 87 f0    	mov    0xf0875cdc,%ecx
f01034a0:	8b 55 08             	mov    0x8(%ebp),%edx
f01034a3:	89 d0                	mov    %edx,%eax
f01034a5:	01 c0                	add    %eax,%eax
f01034a7:	01 d0                	add    %edx,%eax
f01034a9:	c1 e0 03             	shl    $0x3,%eax
f01034ac:	01 c8                	add    %ecx,%eax
f01034ae:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01034b5:	a1 c4 5d 87 f0       	mov    0xf0875dc4,%eax
f01034ba:	40                   	inc    %eax
f01034bb:	a3 c4 5d 87 f0       	mov    %eax,0xf0875dc4
f01034c0:	eb 01                	jmp    f01034c3 <free_disk_frame+0xdc>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f01034c2:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f01034c3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01034c6:	c9                   	leave  
f01034c7:	c3                   	ret    

f01034c8 <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const uint32 virtual_address, int create, uint32 **ptr_disk_page_table)
{
f01034c8:	55                   	push   %ebp
f01034c9:	89 e5                	mov    %esp,%ebp
f01034cb:	53                   	push   %ebx
f01034cc:	83 ec 14             	sub    $0x14,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f01034cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01034d2:	c1 e8 16             	shr    $0x16,%eax
f01034d5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01034dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01034df:	01 d0                	add    %edx,%eax
f01034e1:	8b 00                	mov    (%eax),%eax
f01034e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f01034e6:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f01034ed:	77 1d                	ja     f010350c <get_disk_page_table+0x44>
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
f01034ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01034f2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01034f7:	83 ec 0c             	sub    $0xc,%esp
f01034fa:	50                   	push   %eax
f01034fb:	e8 77 45 00 00       	call   f0107a77 <kheap_virtual_address>
f0103500:	83 c4 10             	add    $0x10,%esp
f0103503:	89 c2                	mov    %eax,%edx
f0103505:	8b 45 14             	mov    0x14(%ebp),%eax
f0103508:	89 10                	mov    %edx,(%eax)
f010350a:	eb 44                	jmp    f0103550 <get_disk_page_table+0x88>
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f010350c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010350f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103514:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103517:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010351a:	c1 e8 0c             	shr    $0xc,%eax
f010351d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103520:	a1 10 5d 87 f0       	mov    0xf0875d10,%eax
f0103525:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103528:	72 17                	jb     f0103541 <get_disk_page_table+0x79>
f010352a:	ff 75 f0             	pushl  -0x10(%ebp)
f010352d:	68 b4 55 13 f0       	push   $0xf01355b4
f0103532:	68 92 00 00 00       	push   $0x92
f0103537:	68 53 55 13 f0       	push   $0xf0135553
f010353c:	e8 c4 cc ff ff       	call   f0100205 <_panic>
f0103541:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103544:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103549:	89 c2                	mov    %eax,%edx
f010354b:	8b 45 14             	mov    0x14(%ebp),%eax
f010354e:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f0103550:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103554:	0f 85 80 00 00 00    	jne    f01035da <get_disk_page_table+0x112>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f010355a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010355e:	74 6a                	je     f01035ca <get_disk_page_table+0x102>
		{

#if USE_KHEAP
			{
				*ptr_disk_page_table = (uint32*)kmalloc(PAGE_SIZE);
f0103560:	83 ec 0c             	sub    $0xc,%esp
f0103563:	68 00 10 00 00       	push   $0x1000
f0103568:	e8 18 43 00 00       	call   f0107885 <kmalloc>
f010356d:	83 c4 10             	add    $0x10,%esp
f0103570:	89 c2                	mov    %eax,%edx
f0103572:	8b 45 14             	mov    0x14(%ebp),%eax
f0103575:	89 10                	mov    %edx,(%eax)
				if(*ptr_disk_page_table == NULL)
f0103577:	8b 45 14             	mov    0x14(%ebp),%eax
f010357a:	8b 00                	mov    (%eax),%eax
f010357c:	85 c0                	test   %eax,%eax
f010357e:	75 07                	jne    f0103587 <get_disk_page_table+0xbf>
				{
					return E_NO_VM;
f0103580:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103585:	eb 58                	jmp    f01035df <get_disk_page_table+0x117>
				}
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f0103587:	8b 45 0c             	mov    0xc(%ebp),%eax
f010358a:	c1 e8 16             	shr    $0x16,%eax
f010358d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103594:	8b 45 08             	mov    0x8(%ebp),%eax
f0103597:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f010359a:	8b 45 14             	mov    0x14(%ebp),%eax
f010359d:	8b 00                	mov    (%eax),%eax
f010359f:	83 ec 0c             	sub    $0xc,%esp
f01035a2:	50                   	push   %eax
f01035a3:	e8 fb 44 00 00       	call   f0107aa3 <kheap_physical_address>
f01035a8:	83 c4 10             	add    $0x10,%esp
f01035ab:	83 c8 01             	or     $0x1,%eax
f01035ae:	89 03                	mov    %eax,(%ebx)
				ptr_frame_info->references = 1;
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
			}
#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f01035b0:	8b 45 14             	mov    0x14(%ebp),%eax
f01035b3:	8b 00                	mov    (%eax),%eax
f01035b5:	83 ec 04             	sub    $0x4,%esp
f01035b8:	68 00 10 00 00       	push   $0x1000
f01035bd:	6a 00                	push   $0x0
f01035bf:	50                   	push   %eax
f01035c0:	e8 f5 da 02 00       	call   f01310ba <memset>
f01035c5:	83 c4 10             	add    $0x10,%esp
f01035c8:	eb 10                	jmp    f01035da <get_disk_page_table+0x112>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f01035ca:	8b 45 14             	mov    0x14(%ebp),%eax
f01035cd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f01035d3:	b8 00 00 00 00       	mov    $0x0,%eax
f01035d8:	eb 05                	jmp    f01035df <get_disk_page_table+0x117>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f01035da:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01035df:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01035e2:	c9                   	leave  
f01035e3:	c3                   	ret    

f01035e4 <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f01035e4:	55                   	push   %ebp
f01035e5:	89 e5                	mov    %esp,%ebp
f01035e7:	83 ec 28             	sub    $0x28,%esp
f01035ea:	8b 45 10             	mov    0x10(%ebp),%eax
f01035ed:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f01035f0:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f01035f4:	74 75                	je     f010366b <pf_add_empty_env_page+0x87>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f01035f6:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f01035fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103600:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103605:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103608:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010360b:	ba 00 00 00 00       	mov    $0x0,%edx
f0103610:	f7 75 f4             	divl   -0xc(%ebp)
f0103613:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103616:	29 d0                	sub    %edx,%eax
f0103618:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010361b:	73 32                	jae    f010364f <pf_add_empty_env_page+0x6b>
f010361d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103620:	8b 90 58 05 00 00    	mov    0x558(%eax),%edx
f0103626:	b8 00 00 00 00       	mov    $0x0,%eax
f010362b:	29 d0                	sub    %edx,%eax
f010362d:	c1 e0 0c             	shl    $0xc,%eax
f0103630:	2d 00 20 40 11       	sub    $0x11402000,%eax
f0103635:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103638:	76 15                	jbe    f010364f <pf_add_empty_env_page+0x6b>
			ptr_env->nNewPageAdded++ ;
f010363a:	8b 45 08             	mov    0x8(%ebp),%eax
f010363d:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f0103643:	8d 50 01             	lea    0x1(%eax),%edx
f0103646:	8b 45 08             	mov    0x8(%ebp),%eax
f0103649:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f010364f:	a1 60 5d 87 f0       	mov    0xf0875d60,%eax
f0103654:	83 ec 04             	sub    $0x4,%esp
f0103657:	50                   	push   %eax
f0103658:	ff 75 0c             	pushl  0xc(%ebp)
f010365b:	ff 75 08             	pushl  0x8(%ebp)
f010365e:	e8 b2 00 00 00       	call   f0103715 <pf_add_env_page>
f0103663:	83 c4 10             	add    $0x10,%esp
f0103666:	e9 a8 00 00 00       	jmp    f0103713 <pf_add_empty_env_page+0x12f>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010366b:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103672:	76 19                	jbe    f010368d <pf_add_empty_env_page+0xa9>
f0103674:	68 e4 55 13 f0       	push   $0xf01355e4
f0103679:	68 0a 56 13 f0       	push   $0xf013560a
f010367e:	68 d1 00 00 00       	push   $0xd1
f0103683:	68 53 55 13 f0       	push   $0xf0135553
f0103688:	e8 78 cb ff ff       	call   f0100205 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010368d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103690:	83 c0 64             	add    $0x64,%eax
f0103693:	83 ec 08             	sub    $0x8,%esp
f0103696:	50                   	push   %eax
f0103697:	ff 75 08             	pushl  0x8(%ebp)
f010369a:	e8 10 06 00 00       	call   f0103caf <get_disk_page_directory>
f010369f:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f01036a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01036a5:	8b 40 64             	mov    0x64(%eax),%eax
f01036a8:	8d 55 ec             	lea    -0x14(%ebp),%edx
f01036ab:	52                   	push   %edx
f01036ac:	6a 01                	push   $0x1
f01036ae:	ff 75 0c             	pushl  0xc(%ebp)
f01036b1:	50                   	push   %eax
f01036b2:	e8 11 fe ff ff       	call   f01034c8 <get_disk_page_table>
f01036b7:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01036ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01036bd:	8b 55 0c             	mov    0xc(%ebp),%edx
f01036c0:	c1 ea 0c             	shr    $0xc,%edx
f01036c3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01036c9:	c1 e2 02             	shl    $0x2,%edx
f01036cc:	01 d0                	add    %edx,%eax
f01036ce:	8b 00                	mov    (%eax),%eax
f01036d0:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f01036d3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01036d6:	85 c0                	test   %eax,%eax
f01036d8:	75 34                	jne    f010370e <pf_add_empty_env_page+0x12a>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f01036da:	83 ec 0c             	sub    $0xc,%esp
f01036dd:	8d 45 e8             	lea    -0x18(%ebp),%eax
f01036e0:	50                   	push   %eax
f01036e1:	e8 3a fc ff ff       	call   f0103320 <allocate_disk_frame>
f01036e6:	83 c4 10             	add    $0x10,%esp
f01036e9:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01036ec:	75 07                	jne    f01036f5 <pf_add_empty_env_page+0x111>
f01036ee:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01036f3:	eb 1e                	jmp    f0103713 <pf_add_empty_env_page+0x12f>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f01036f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01036f8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01036fb:	c1 ea 0c             	shr    $0xc,%edx
f01036fe:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103704:	c1 e2 02             	shl    $0x2,%edx
f0103707:	01 c2                	add    %eax,%edx
f0103709:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010370c:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f010370e:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0103713:	c9                   	leave  
f0103714:	c3                   	ret    

f0103715 <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f0103715:	55                   	push   %ebp
f0103716:	89 e5                	mov    %esp,%ebp
f0103718:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010371b:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103722:	76 19                	jbe    f010373d <pf_add_env_page+0x28>
f0103724:	68 e4 55 13 f0       	push   $0xf01355e4
f0103729:	68 0a 56 13 f0       	push   $0xf013560a
f010372e:	68 e6 00 00 00       	push   $0xe6
f0103733:	68 53 55 13 f0       	push   $0xf0135553
f0103738:	e8 c8 ca ff ff       	call   f0100205 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010373d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103740:	83 c0 64             	add    $0x64,%eax
f0103743:	83 ec 08             	sub    $0x8,%esp
f0103746:	50                   	push   %eax
f0103747:	ff 75 08             	pushl  0x8(%ebp)
f010374a:	e8 60 05 00 00       	call   f0103caf <get_disk_page_directory>
f010374f:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103752:	8b 45 08             	mov    0x8(%ebp),%eax
f0103755:	8b 40 64             	mov    0x64(%eax),%eax
f0103758:	8d 55 f0             	lea    -0x10(%ebp),%edx
f010375b:	52                   	push   %edx
f010375c:	6a 01                	push   $0x1
f010375e:	ff 75 0c             	pushl  0xc(%ebp)
f0103761:	50                   	push   %eax
f0103762:	e8 61 fd ff ff       	call   f01034c8 <get_disk_page_table>
f0103767:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010376a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010376d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103770:	c1 ea 0c             	shr    $0xc,%edx
f0103773:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103779:	c1 e2 02             	shl    $0x2,%edx
f010377c:	01 d0                	add    %edx,%eax
f010377e:	8b 00                	mov    (%eax),%eax
f0103780:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f0103783:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103786:	85 c0                	test   %eax,%eax
f0103788:	75 34                	jne    f01037be <pf_add_env_page+0xa9>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010378a:	83 ec 0c             	sub    $0xc,%esp
f010378d:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0103790:	50                   	push   %eax
f0103791:	e8 8a fb ff ff       	call   f0103320 <allocate_disk_frame>
f0103796:	83 c4 10             	add    $0x10,%esp
f0103799:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010379c:	75 07                	jne    f01037a5 <pf_add_env_page+0x90>
f010379e:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01037a3:	eb 31                	jmp    f01037d6 <pf_add_env_page+0xc1>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f01037a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01037a8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01037ab:	c1 ea 0c             	shr    $0xc,%edx
f01037ae:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01037b4:	c1 e2 02             	shl    $0x2,%edx
f01037b7:	01 c2                	add    %eax,%edx
f01037b9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01037bc:	89 02                	mov    %eax,(%edx)
	//	uint32 oldDir = rcr3();
	//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
	//	int ret = write_disk_page(dfn, (void*)dataSrc);
	//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f01037be:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01037c1:	83 ec 08             	sub    $0x8,%esp
f01037c4:	ff 75 10             	pushl  0x10(%ebp)
f01037c7:	50                   	push   %eax
f01037c8:	e8 a6 f9 ff ff       	call   f0103173 <write_disk_page>
f01037cd:	83 c4 10             	add    $0x10,%esp
f01037d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f01037d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01037d6:	c9                   	leave  
f01037d7:	c3                   	ret    

f01037d8 <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, uint32 virtual_address, struct FrameInfo* modified_page_frame_info)
{
f01037d8:	55                   	push   %ebp
f01037d9:	89 e5                	mov    %esp,%ebp
f01037db:	83 ec 38             	sub    $0x38,%esp
	int ret;
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f01037de:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f01037e5:	76 19                	jbe    f0103800 <pf_update_env_page+0x28>
f01037e7:	68 e4 55 13 f0       	push   $0xf01355e4
f01037ec:	68 0a 56 13 f0       	push   $0xf013560a
f01037f1:	68 08 01 00 00       	push   $0x108
f01037f6:	68 53 55 13 f0       	push   $0xf0135553
f01037fb:	e8 05 ca ff ff       	call   f0100205 <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103800:	8b 45 08             	mov    0x8(%ebp),%eax
f0103803:	83 c0 64             	add    $0x64,%eax
f0103806:	83 ec 08             	sub    $0x8,%esp
f0103809:	50                   	push   %eax
f010380a:	ff 75 08             	pushl  0x8(%ebp)
f010380d:	e8 9d 04 00 00       	call   f0103caf <get_disk_page_directory>
f0103812:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103815:	8b 45 08             	mov    0x8(%ebp),%eax
f0103818:	8b 40 64             	mov    0x64(%eax),%eax
f010381b:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010381e:	52                   	push   %edx
f010381f:	6a 00                	push   $0x0
f0103821:	ff 75 0c             	pushl  0xc(%ebp)
f0103824:	50                   	push   %eax
f0103825:	e8 9e fc ff ff       	call   f01034c8 <get_disk_page_table>
f010382a:	83 c4 10             	add    $0x10,%esp

	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
f010382d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103830:	85 c0                	test   %eax,%eax
f0103832:	74 29                	je     f010385d <pf_update_env_page+0x85>
f0103834:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103837:	85 c0                	test   %eax,%eax
f0103839:	0f 84 43 01 00 00    	je     f0103982 <pf_update_env_page+0x1aa>
f010383f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103842:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103845:	c1 ea 0c             	shr    $0xc,%edx
f0103848:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010384e:	c1 e2 02             	shl    $0x2,%edx
f0103851:	01 d0                	add    %edx,%eax
f0103853:	8b 00                	mov    (%eax),%eax
f0103855:	85 c0                	test   %eax,%eax
f0103857:	0f 85 25 01 00 00    	jne    f0103982 <pf_update_env_page+0x1aa>
	{
		uint32 VA = (uint32)virtual_address ;
f010385d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103860:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
f0103863:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103866:	85 c0                	test   %eax,%eax
f0103868:	79 09                	jns    f0103873 <pf_update_env_page+0x9b>
f010386a:	81 7d f4 ff ff ff 9f 	cmpl   $0x9fffffff,-0xc(%ebp)
f0103871:	76 38                	jbe    f01038ab <pf_update_env_page+0xd3>
f0103873:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f010387a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010387d:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103882:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103885:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103888:	ba 00 00 00 00       	mov    $0x0,%edx
f010388d:	f7 75 f0             	divl   -0x10(%ebp)
f0103890:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103893:	29 d0                	sub    %edx,%eax
f0103895:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0103898:	0f 87 cd 00 00 00    	ja     f010396b <pf_update_env_page+0x193>
f010389e:	81 7d f4 ff df bf ee 	cmpl   $0xeebfdfff,-0xc(%ebp)
f01038a5:	0f 87 c0 00 00 00    	ja     f010396b <pf_update_env_page+0x193>
		{
			uint32 *ptr_table ;
			struct FrameInfo* ptr_fi = get_frame_info(ptr_env->env_page_directory, virtual_address, &ptr_table);
f01038ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01038ae:	8b 40 5c             	mov    0x5c(%eax),%eax
f01038b1:	83 ec 04             	sub    $0x4,%esp
f01038b4:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f01038b7:	52                   	push   %edx
f01038b8:	ff 75 0c             	pushl  0xc(%ebp)
f01038bb:	50                   	push   %eax
f01038bc:	e8 45 35 00 00       	call   f0106e06 <get_frame_info>
f01038c1:	83 c4 10             	add    $0x10,%esp
f01038c4:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//if VA already mapped on the same modified_page_frame_info, then write it directly from the VA
			if (ptr_fi == modified_page_frame_info)
f01038c7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01038ca:	3b 45 10             	cmp    0x10(%ebp),%eax
f01038cd:	75 52                	jne    f0103921 <pf_update_env_page+0x149>
			{
				ret = pf_add_env_page(ptr_env, VA, (void*)virtual_address) ;
f01038cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01038d2:	83 ec 04             	sub    $0x4,%esp
f01038d5:	50                   	push   %eax
f01038d6:	ff 75 f4             	pushl  -0xc(%ebp)
f01038d9:	ff 75 08             	pushl  0x8(%ebp)
f01038dc:	e8 34 fe ff ff       	call   f0103715 <pf_add_env_page>
f01038e1:	83 c4 10             	add    $0x10,%esp
f01038e4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f01038e7:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f01038eb:	75 17                	jne    f0103904 <pf_update_env_page+0x12c>
				{
					panic("pf_update_env_page: page file out of space!") ;
f01038ed:	83 ec 04             	sub    $0x4,%esp
f01038f0:	68 20 56 13 f0       	push   $0xf0135620
f01038f5:	68 1d 01 00 00       	push   $0x11d
f01038fa:	68 53 55 13 f0       	push   $0xf0135553
f01038ff:	e8 01 c9 ff ff       	call   f0100205 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f0103904:	8b 45 08             	mov    0x8(%ebp),%eax
f0103907:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f010390d:	8d 50 01             	lea    0x1(%eax),%edx
f0103910:	8b 45 08             	mov    0x8(%ebp),%eax
f0103913:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
				return ret ;
f0103919:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010391c:	e9 17 01 00 00       	jmp    f0103a38 <pf_update_env_page+0x260>
			}
			//Else, just add a new empty page to the page file, then update it with the given modified_page_frame_info in the below code
			else
			{
				ret = pf_add_empty_env_page(ptr_env, VA, 0);
f0103921:	83 ec 04             	sub    $0x4,%esp
f0103924:	6a 00                	push   $0x0
f0103926:	ff 75 f4             	pushl  -0xc(%ebp)
f0103929:	ff 75 08             	pushl  0x8(%ebp)
f010392c:	e8 b3 fc ff ff       	call   f01035e4 <pf_add_empty_env_page>
f0103931:	83 c4 10             	add    $0x10,%esp
f0103934:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f0103937:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f010393b:	75 17                	jne    f0103954 <pf_update_env_page+0x17c>
				{
					panic("pf_update_env_page: attempt to add a new page, but page file out of space!") ;
f010393d:	83 ec 04             	sub    $0x4,%esp
f0103940:	68 4c 56 13 f0       	push   $0xf013564c
f0103945:	68 28 01 00 00       	push   $0x128
f010394a:	68 53 55 13 f0       	push   $0xf0135553
f010394f:	e8 b1 c8 ff ff       	call   f0100205 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f0103954:	8b 45 08             	mov    0x8(%ebp),%eax
f0103957:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f010395d:	8d 50 01             	lea    0x1(%eax),%edx
f0103960:	8b 45 08             	mov    0x8(%ebp),%eax
f0103963:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
	{
		uint32 VA = (uint32)virtual_address ;
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
		{
f0103969:	eb 17                	jmp    f0103982 <pf_update_env_page+0x1aa>
				ptr_env->nNewPageAdded++ ;
			}
		}
		else
		{
			panic("pf_update_env_page: Invalid Access - Attempt to add a new page to page file that's outside the USER HEAP and USER STACK!");
f010396b:	83 ec 04             	sub    $0x4,%esp
f010396e:	68 98 56 13 f0       	push   $0xf0135698
f0103973:	68 2f 01 00 00       	push   $0x12f
f0103978:	68 53 55 13 f0       	push   $0xf0135553
f010397d:	e8 83 c8 ff ff       	call   f0100205 <_panic>
		}
	}
	//2022 END========================================

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103982:	8b 45 08             	mov    0x8(%ebp),%eax
f0103985:	8b 40 64             	mov    0x64(%eax),%eax
f0103988:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010398b:	52                   	push   %edx
f010398c:	6a 00                	push   $0x0
f010398e:	ff 75 0c             	pushl  0xc(%ebp)
f0103991:	50                   	push   %eax
f0103992:	e8 31 fb ff ff       	call   f01034c8 <get_disk_page_table>
f0103997:	83 c4 10             	add    $0x10,%esp
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010399a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010399d:	8b 55 0c             	mov    0xc(%ebp),%edx
f01039a0:	c1 ea 0c             	shr    $0xc,%edx
f01039a3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01039a9:	c1 e2 02             	shl    $0x2,%edx
f01039ac:	01 d0                	add    %edx,%eax
f01039ae:	8b 00                	mov    (%eax),%eax
f01039b0:	89 45 e0             	mov    %eax,-0x20(%ebp)
#if USE_KHEAP
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unused VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(ptr_env->env_page_directory, modified_page_frame_info, USER_LIMIT, 0);
f01039b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01039b6:	8b 40 5c             	mov    0x5c(%eax),%eax
f01039b9:	6a 00                	push   $0x0
f01039bb:	68 00 00 80 ef       	push   $0xef800000
f01039c0:	ff 75 10             	pushl  0x10(%ebp)
f01039c3:	50                   	push   %eax
f01039c4:	e8 78 33 00 00       	call   f0106d41 <map_frame>
f01039c9:	83 c4 10             	add    $0x10,%esp
		ret = write_disk_page(dfn, (void*)ROUNDDOWN(USER_LIMIT, PAGE_SIZE));
f01039cc:	c7 45 dc 00 00 80 ef 	movl   $0xef800000,-0x24(%ebp)
f01039d3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01039d6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01039db:	83 ec 08             	sub    $0x8,%esp
f01039de:	50                   	push   %eax
f01039df:	ff 75 e0             	pushl  -0x20(%ebp)
f01039e2:	e8 8c f7 ff ff       	call   f0103173 <write_disk_page>
f01039e7:	83 c4 10             	add    $0x10,%esp
f01039ea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// TEMPORARILY increase the references to prevent unmap_frame from removing the frame
		modified_page_frame_info->references += 1;
f01039ed:	8b 45 10             	mov    0x10(%ebp),%eax
f01039f0:	8b 40 08             	mov    0x8(%eax),%eax
f01039f3:	40                   	inc    %eax
f01039f4:	8b 55 10             	mov    0x10(%ebp),%edx
f01039f7:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(ptr_env->env_page_directory, USER_LIMIT);
f01039fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01039fe:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103a01:	83 ec 08             	sub    $0x8,%esp
f0103a04:	68 00 00 80 ef       	push   $0xef800000
f0103a09:	50                   	push   %eax
f0103a0a:	e8 67 34 00 00       	call   f0106e76 <unmap_frame>
f0103a0f:	83 c4 10             	add    $0x10,%esp
		// Return it to its original status
		modified_page_frame_info->references -= 1;
f0103a12:	8b 45 10             	mov    0x10(%ebp),%eax
f0103a15:	8b 40 08             	mov    0x8(%eax),%eax
f0103a18:	48                   	dec    %eax
f0103a19:	8b 55 10             	mov    0x10(%ebp),%edx
f0103a1c:	66 89 42 08          	mov    %ax,0x8(%edx)
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f0103a20:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a23:	8b 80 50 05 00 00    	mov    0x550(%eax),%eax
f0103a29:	8d 50 01             	lea    0x1(%eax),%edx
f0103a2c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a2f:	89 90 50 05 00 00    	mov    %edx,0x550(%eax)
	//======================

	return ret;
f0103a35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f0103a38:	c9                   	leave  
f0103a39:	c3                   	ret    

f0103a3a <pf_read_env_page>:

int pf_read_env_page(struct Env* ptr_env, void* virtual_address)
{
f0103a3a:	55                   	push   %ebp
f0103a3b:	89 e5                	mov    %esp,%ebp
f0103a3d:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f0103a40:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103a43:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103a46:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103a49:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103a4e:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103a51:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a54:	8b 40 64             	mov    0x64(%eax),%eax
f0103a57:	85 c0                	test   %eax,%eax
f0103a59:	75 0a                	jne    f0103a65 <pf_read_env_page+0x2b>
f0103a5b:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103a60:	e9 90 00 00 00       	jmp    f0103af5 <pf_read_env_page+0xbb>

	get_disk_page_table(ptr_env->disk_env_pgdir, (uint32) virtual_address, 0, &ptr_disk_page_table);
f0103a65:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103a68:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a6b:	8b 40 64             	mov    0x64(%eax),%eax
f0103a6e:	8d 4d e8             	lea    -0x18(%ebp),%ecx
f0103a71:	51                   	push   %ecx
f0103a72:	6a 00                	push   $0x0
f0103a74:	52                   	push   %edx
f0103a75:	50                   	push   %eax
f0103a76:	e8 4d fa ff ff       	call   f01034c8 <get_disk_page_table>
f0103a7b:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103a7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103a81:	85 c0                	test   %eax,%eax
f0103a83:	75 07                	jne    f0103a8c <pf_read_env_page+0x52>
f0103a85:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103a8a:	eb 69                	jmp    f0103af5 <pf_read_env_page+0xbb>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103a8c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103a8f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103a92:	c1 ea 0c             	shr    $0xc,%edx
f0103a95:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103a9b:	c1 e2 02             	shl    $0x2,%edx
f0103a9e:	01 d0                	add    %edx,%eax
f0103aa0:	8b 00                	mov    (%eax),%eax
f0103aa2:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103aa5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103aa9:	75 07                	jne    f0103ab2 <pf_read_env_page+0x78>
f0103aab:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103ab0:	eb 43                	jmp    f0103af5 <pf_read_env_page+0xbb>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f0103ab2:	83 ec 08             	sub    $0x8,%esp
f0103ab5:	ff 75 0c             	pushl  0xc(%ebp)
f0103ab8:	ff 75 f0             	pushl  -0x10(%ebp)
f0103abb:	e8 84 f6 ff ff       	call   f0103144 <read_disk_page>
f0103ac0:	83 c4 10             	add    $0x10,%esp
f0103ac3:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(ptr_env->env_page_directory, (uint32)virtual_address, 0, PERM_MODIFIED);
f0103ac6:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103ac9:	8b 45 08             	mov    0x8(%ebp),%eax
f0103acc:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103acf:	6a 40                	push   $0x40
f0103ad1:	6a 00                	push   $0x0
f0103ad3:	52                   	push   %edx
f0103ad4:	50                   	push   %eax
f0103ad5:	e8 d3 40 00 00       	call   f0107bad <pt_set_page_permissions>
f0103ada:	83 c4 10             	add    $0x10,%esp

	//2020
	ptr_env->nPageIn++ ;
f0103add:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ae0:	8b 80 4c 05 00 00    	mov    0x54c(%eax),%eax
f0103ae6:	8d 50 01             	lea    0x1(%eax),%edx
f0103ae9:	8b 45 08             	mov    0x8(%ebp),%eax
f0103aec:	89 90 4c 05 00 00    	mov    %edx,0x54c(%eax)
	//======================

	return disk_read_error;
f0103af2:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f0103af5:	c9                   	leave  
f0103af6:	c3                   	ret    

f0103af7 <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f0103af7:	55                   	push   %ebp
f0103af8:	89 e5                	mov    %esp,%ebp
f0103afa:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103afd:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b00:	8b 40 64             	mov    0x64(%eax),%eax
f0103b03:	85 c0                	test   %eax,%eax
f0103b05:	74 62                	je     f0103b69 <pf_remove_env_page+0x72>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103b07:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b0a:	8b 40 64             	mov    0x64(%eax),%eax
f0103b0d:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0103b10:	52                   	push   %edx
f0103b11:	6a 00                	push   $0x0
f0103b13:	ff 75 0c             	pushl  0xc(%ebp)
f0103b16:	50                   	push   %eax
f0103b17:	e8 ac f9 ff ff       	call   f01034c8 <get_disk_page_table>
f0103b1c:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f0103b1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b22:	85 c0                	test   %eax,%eax
f0103b24:	74 46                	je     f0103b6c <pf_remove_env_page+0x75>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103b26:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b29:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103b2c:	c1 ea 0c             	shr    $0xc,%edx
f0103b2f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103b35:	c1 e2 02             	shl    $0x2,%edx
f0103b38:	01 d0                	add    %edx,%eax
f0103b3a:	8b 00                	mov    (%eax),%eax
f0103b3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f0103b3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b42:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103b45:	c1 ea 0c             	shr    $0xc,%edx
f0103b48:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103b4e:	c1 e2 02             	shl    $0x2,%edx
f0103b51:	01 d0                	add    %edx,%eax
f0103b53:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0103b59:	83 ec 0c             	sub    $0xc,%esp
f0103b5c:	ff 75 f4             	pushl  -0xc(%ebp)
f0103b5f:	e8 83 f8 ff ff       	call   f01033e7 <free_disk_frame>
f0103b64:	83 c4 10             	add    $0x10,%esp
f0103b67:	eb 04                	jmp    f0103b6d <pf_remove_env_page+0x76>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103b69:	90                   	nop
f0103b6a:	eb 01                	jmp    f0103b6d <pf_remove_env_page+0x76>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f0103b6c:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103b6d:	c9                   	leave  
f0103b6e:	c3                   	ret    

f0103b6f <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f0103b6f:	55                   	push   %ebp
f0103b70:	89 e5                	mov    %esp,%ebp
f0103b72:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103b75:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103b7c:	e9 b8 00 00 00       	jmp    f0103c39 <pf_free_env+0xca>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f0103b81:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b84:	8b 40 64             	mov    0x64(%eax),%eax
f0103b87:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103b8a:	c1 e2 02             	shl    $0x2,%edx
f0103b8d:	01 d0                	add    %edx,%eax
f0103b8f:	8b 00                	mov    (%eax),%eax
f0103b91:	83 e0 01             	and    $0x1,%eax
f0103b94:	85 c0                	test   %eax,%eax
f0103b96:	0f 84 99 00 00 00    	je     f0103c35 <pf_free_env+0xc6>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f0103b9c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b9f:	8b 40 64             	mov    0x64(%eax),%eax
f0103ba2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103ba5:	c1 e2 02             	shl    $0x2,%edx
f0103ba8:	01 d0                	add    %edx,%eax
f0103baa:	8b 00                	mov    (%eax),%eax
f0103bac:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103bb1:	89 45 ec             	mov    %eax,-0x14(%ebp)
		uint32 *pt;
#if USE_KHEAP
		{
			pt = (uint32*) kheap_virtual_address(pa);
f0103bb4:	83 ec 0c             	sub    $0xc,%esp
f0103bb7:	ff 75 ec             	pushl  -0x14(%ebp)
f0103bba:	e8 b8 3e 00 00       	call   f0107a77 <kheap_virtual_address>
f0103bbf:	83 c4 10             	add    $0x10,%esp
f0103bc2:	89 45 e8             	mov    %eax,-0x18(%ebp)
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103bc5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0103bcc:	eb 3a                	jmp    f0103c08 <pf_free_env+0x99>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f0103bce:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103bd1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103bd8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103bdb:	01 d0                	add    %edx,%eax
f0103bdd:	8b 00                	mov    (%eax),%eax
f0103bdf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			pt[pteno] = 0;
f0103be2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103be5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103bec:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103bef:	01 d0                	add    %edx,%eax
f0103bf1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f0103bf7:	83 ec 0c             	sub    $0xc,%esp
f0103bfa:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103bfd:	e8 e5 f7 ff ff       	call   f01033e7 <free_disk_frame>
f0103c02:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103c05:	ff 45 f0             	incl   -0x10(%ebp)
f0103c08:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f0103c0f:	76 bd                	jbe    f0103bce <pf_free_env+0x5f>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f0103c11:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c14:	8b 40 64             	mov    0x64(%eax),%eax
f0103c17:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c1a:	c1 e2 02             	shl    $0x2,%edx
f0103c1d:	01 d0                	add    %edx,%eax
f0103c1f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
#if USE_KHEAP
		{
			kfree(pt);
f0103c25:	83 ec 0c             	sub    $0xc,%esp
f0103c28:	ff 75 e8             	pushl  -0x18(%ebp)
f0103c2b:	e8 20 3d 00 00       	call   f0107950 <kfree>
f0103c30:	83 c4 10             	add    $0x10,%esp
f0103c33:	eb 01                	jmp    f0103c36 <pf_free_env+0xc7>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f0103c35:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103c36:	ff 45 f4             	incl   -0xc(%ebp)
f0103c39:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103c40:	0f 86 3b ff ff ff    	jbe    f0103b81 <pf_free_env+0x12>
	}

	// free the disk page directory of the environment
#if USE_KHEAP
	{
		kfree(ptr_env->disk_env_pgdir);
f0103c46:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c49:	8b 40 64             	mov    0x64(%eax),%eax
f0103c4c:	83 ec 0c             	sub    $0xc,%esp
f0103c4f:	50                   	push   %eax
f0103c50:	e8 fb 3c 00 00       	call   f0107950 <kfree>
f0103c55:	83 c4 10             	add    $0x10,%esp
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
	}
#endif
	ptr_env->disk_env_pgdir = 0;
f0103c58:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c5b:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	ptr_env->disk_env_pgdir_PA = 0;
f0103c62:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c65:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f0103c6c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c6f:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103c72:	85 c0                	test   %eax,%eax
f0103c74:	74 36                	je     f0103cac <pf_free_env+0x13d>
		return;
	__pf_remove_env_all_tables(ptr_env);
f0103c76:	83 ec 0c             	sub    $0xc,%esp
f0103c79:	ff 75 08             	pushl  0x8(%ebp)
f0103c7c:	e8 05 03 00 00       	call   f0103f86 <__pf_remove_env_all_tables>
f0103c81:	83 c4 10             	add    $0x10,%esp


#if USE_KHEAP
	{
		kfree(ptr_env->disk_env_tabledir);
f0103c84:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c87:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103c8a:	83 ec 0c             	sub    $0xc,%esp
f0103c8d:	50                   	push   %eax
f0103c8e:	e8 bd 3c 00 00       	call   f0107950 <kfree>
f0103c93:	83 c4 10             	add    $0x10,%esp
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
	}
#endif
	ptr_env->disk_env_tabledir = 0;
f0103c96:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c99:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	ptr_env->disk_env_tabledir_PA = 0;
f0103ca0:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ca3:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)
f0103caa:	eb 01                	jmp    f0103cad <pf_free_env+0x13e>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f0103cac:	90                   	nop
	}
#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f0103cad:	c9                   	leave  
f0103cae:	c3                   	ret    

f0103caf <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f0103caf:	55                   	push   %ebp
f0103cb0:	89 e5                	mov    %esp,%ebp
f0103cb2:	83 ec 08             	sub    $0x8,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f0103cb5:	8b 45 08             	mov    0x8(%ebp),%eax
f0103cb8:	8b 50 64             	mov    0x64(%eax),%edx
f0103cbb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cbe:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f0103cc0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cc3:	8b 00                	mov    (%eax),%eax
f0103cc5:	85 c0                	test   %eax,%eax
f0103cc7:	75 58                	jne    f0103d21 <get_disk_page_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
#if USE_KHEAP
		{
			*ptr_disk_page_directory = kmalloc(PAGE_SIZE);
f0103cc9:	83 ec 0c             	sub    $0xc,%esp
f0103ccc:	68 00 10 00 00       	push   $0x1000
f0103cd1:	e8 af 3b 00 00       	call   f0107885 <kmalloc>
f0103cd6:	83 c4 10             	add    $0x10,%esp
f0103cd9:	89 c2                	mov    %eax,%edx
f0103cdb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cde:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_page_directory == NULL)
f0103ce0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103ce3:	8b 00                	mov    (%eax),%eax
f0103ce5:	85 c0                	test   %eax,%eax
f0103ce7:	75 07                	jne    f0103cf0 <get_disk_page_directory+0x41>
			{
				return E_NO_VM;
f0103ce9:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103cee:	eb 36                	jmp    f0103d26 <get_disk_page_directory+0x77>
			}
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
f0103cf0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cf3:	8b 00                	mov    (%eax),%eax
f0103cf5:	83 ec 0c             	sub    $0xc,%esp
f0103cf8:	50                   	push   %eax
f0103cf9:	e8 a5 3d 00 00       	call   f0107aa3 <kheap_physical_address>
f0103cfe:	83 c4 10             	add    $0x10,%esp
f0103d01:	89 c2                	mov    %eax,%edx
f0103d03:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d06:	89 50 68             	mov    %edx,0x68(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
		}
#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f0103d09:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d0c:	8b 00                	mov    (%eax),%eax
f0103d0e:	83 ec 04             	sub    $0x4,%esp
f0103d11:	68 00 10 00 00       	push   $0x1000
f0103d16:	6a 00                	push   $0x0
f0103d18:	50                   	push   %eax
f0103d19:	e8 9c d3 02 00       	call   f01310ba <memset>
f0103d1e:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103d21:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103d26:	c9                   	leave  
f0103d27:	c3                   	ret    

f0103d28 <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f0103d28:	55                   	push   %ebp
f0103d29:	89 e5                	mov    %esp,%ebp
f0103d2b:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f0103d2e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103d35:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103d3c:	eb 78                	jmp    f0103db6 <pf_calculate_allocated_pages+0x8e>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f0103d3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d41:	8b 40 64             	mov    0x64(%eax),%eax
f0103d44:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103d47:	c1 e2 02             	shl    $0x2,%edx
f0103d4a:	01 d0                	add    %edx,%eax
f0103d4c:	8b 00                	mov    (%eax),%eax
f0103d4e:	83 e0 01             	and    $0x1,%eax
f0103d51:	85 c0                	test   %eax,%eax
f0103d53:	74 5d                	je     f0103db2 <pf_calculate_allocated_pages+0x8a>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f0103d55:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d58:	8b 40 64             	mov    0x64(%eax),%eax
f0103d5b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103d5e:	c1 e2 02             	shl    $0x2,%edx
f0103d61:	01 d0                	add    %edx,%eax
f0103d63:	8b 00                	mov    (%eax),%eax
f0103d65:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103d6a:	89 45 e8             	mov    %eax,-0x18(%ebp)
#if USE_KHEAP
		{
			pt = (uint32*) kheap_virtual_address(pa);
f0103d6d:	83 ec 0c             	sub    $0xc,%esp
f0103d70:	ff 75 e8             	pushl  -0x18(%ebp)
f0103d73:	e8 ff 3c 00 00       	call   f0107a77 <kheap_virtual_address>
f0103d78:	83 c4 10             	add    $0x10,%esp
f0103d7b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103d7e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0103d85:	eb 20                	jmp    f0103da7 <pf_calculate_allocated_pages+0x7f>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f0103d87:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103d8a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103d91:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103d94:	01 d0                	add    %edx,%eax
f0103d96:	8b 00                	mov    (%eax),%eax
f0103d98:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if(dfn != 0)
f0103d9b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0103d9f:	74 03                	je     f0103da4 <pf_calculate_allocated_pages+0x7c>
				counter ++;
f0103da1:	ff 45 f0             	incl   -0x10(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103da4:	ff 45 ec             	incl   -0x14(%ebp)
f0103da7:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f0103dae:	76 d7                	jbe    f0103d87 <pf_calculate_allocated_pages+0x5f>
f0103db0:	eb 01                	jmp    f0103db3 <pf_calculate_allocated_pages+0x8b>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f0103db2:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103db3:	ff 45 f4             	incl   -0xc(%ebp)
f0103db6:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103dbd:	0f 86 7b ff ff ff    	jbe    f0103d3e <pf_calculate_allocated_pages+0x16>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f0103dc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103dc6:	c9                   	leave  
f0103dc7:	c3                   	ret    

f0103dc8 <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f0103dc8:	55                   	push   %ebp
f0103dc9:	89 e5                	mov    %esp,%ebp
f0103dcb:	83 ec 10             	sub    $0x10,%esp
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f0103dce:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103dd5:	a1 b8 5d 87 f0       	mov    0xf0875db8,%eax
f0103dda:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103ddd:	eb 0b                	jmp    f0103dea <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f0103ddf:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103de2:	a1 c0 5d 87 f0       	mov    0xf0875dc0,%eax
f0103de7:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103dea:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103dee:	74 07                	je     f0103df7 <pf_calculate_free_frames+0x2f>
f0103df0:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0103df3:	8b 00                	mov    (%eax),%eax
f0103df5:	eb 05                	jmp    f0103dfc <pf_calculate_free_frames+0x34>
f0103df7:	b8 00 00 00 00       	mov    $0x0,%eax
f0103dfc:	a3 c0 5d 87 f0       	mov    %eax,0xf0875dc0
f0103e01:	a1 c0 5d 87 f0       	mov    0xf0875dc0,%eax
f0103e06:	85 c0                	test   %eax,%eax
f0103e08:	75 d5                	jne    f0103ddf <pf_calculate_free_frames+0x17>
f0103e0a:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103e0e:	75 cf                	jne    f0103ddf <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f0103e10:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0103e13:	c9                   	leave  
f0103e14:	c3                   	ret    

f0103e15 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f0103e15:	55                   	push   %ebp
f0103e16:	89 e5                	mov    %esp,%ebp
f0103e18:	83 ec 08             	sub    $0x8,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f0103e1b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e1e:	8b 50 6c             	mov    0x6c(%eax),%edx
f0103e21:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e24:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f0103e26:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e29:	8b 00                	mov    (%eax),%eax
f0103e2b:	85 c0                	test   %eax,%eax
f0103e2d:	75 58                	jne    f0103e87 <get_disk_table_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
#if USE_KHEAP
		{
			*ptr_disk_table_directory = kmalloc(PAGE_SIZE);
f0103e2f:	83 ec 0c             	sub    $0xc,%esp
f0103e32:	68 00 10 00 00       	push   $0x1000
f0103e37:	e8 49 3a 00 00       	call   f0107885 <kmalloc>
f0103e3c:	83 c4 10             	add    $0x10,%esp
f0103e3f:	89 c2                	mov    %eax,%edx
f0103e41:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e44:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_table_directory == NULL)
f0103e46:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e49:	8b 00                	mov    (%eax),%eax
f0103e4b:	85 c0                	test   %eax,%eax
f0103e4d:	75 07                	jne    f0103e56 <get_disk_table_directory+0x41>
			{
				return E_NO_VM;
f0103e4f:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103e54:	eb 36                	jmp    f0103e8c <get_disk_table_directory+0x77>
			}
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
f0103e56:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e59:	8b 00                	mov    (%eax),%eax
f0103e5b:	83 ec 0c             	sub    $0xc,%esp
f0103e5e:	50                   	push   %eax
f0103e5f:	e8 3f 3c 00 00       	call   f0107aa3 <kheap_physical_address>
f0103e64:	83 c4 10             	add    $0x10,%esp
f0103e67:	89 c2                	mov    %eax,%edx
f0103e69:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e6c:	89 50 70             	mov    %edx,0x70(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
		}
#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f0103e6f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e72:	8b 00                	mov    (%eax),%eax
f0103e74:	83 ec 04             	sub    $0x4,%esp
f0103e77:	68 00 10 00 00       	push   $0x1000
f0103e7c:	6a 00                	push   $0x0
f0103e7e:	50                   	push   %eax
f0103e7f:	e8 36 d2 02 00       	call   f01310ba <memset>
f0103e84:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103e87:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103e8c:	c9                   	leave  
f0103e8d:	c3                   	ret    

f0103e8e <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103e8e:	55                   	push   %ebp
f0103e8f:	89 e5                	mov    %esp,%ebp
f0103e91:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f0103e94:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103e9b:	76 19                	jbe    f0103eb6 <__pf_write_env_table+0x28>
f0103e9d:	68 e4 55 13 f0       	push   $0xf01355e4
f0103ea2:	68 0a 56 13 f0       	push   $0xf013560a
f0103ea7:	68 5a 02 00 00       	push   $0x25a
f0103eac:	68 53 55 13 f0       	push   $0xf0135553
f0103eb1:	e8 4f c3 ff ff       	call   f0100205 <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f0103eb6:	8b 45 08             	mov    0x8(%ebp),%eax
f0103eb9:	83 c0 6c             	add    $0x6c,%eax
f0103ebc:	83 ec 08             	sub    $0x8,%esp
f0103ebf:	50                   	push   %eax
f0103ec0:	ff 75 08             	pushl  0x8(%ebp)
f0103ec3:	e8 4d ff ff ff       	call   f0103e15 <get_disk_table_directory>
f0103ec8:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103ecb:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ece:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103ed1:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103ed4:	c1 ea 16             	shr    $0x16,%edx
f0103ed7:	c1 e2 02             	shl    $0x2,%edx
f0103eda:	01 d0                	add    %edx,%eax
f0103edc:	8b 00                	mov    (%eax),%eax
f0103ede:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f0103ee1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103ee4:	85 c0                	test   %eax,%eax
f0103ee6:	75 31                	jne    f0103f19 <__pf_write_env_table+0x8b>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103ee8:	83 ec 0c             	sub    $0xc,%esp
f0103eeb:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0103eee:	50                   	push   %eax
f0103eef:	e8 2c f4 ff ff       	call   f0103320 <allocate_disk_frame>
f0103ef4:	83 c4 10             	add    $0x10,%esp
f0103ef7:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103efa:	75 07                	jne    f0103f03 <__pf_write_env_table+0x75>
f0103efc:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103f01:	eb 2e                	jmp    f0103f31 <__pf_write_env_table+0xa3>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f0103f03:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f06:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f09:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f0c:	c1 ea 16             	shr    $0x16,%edx
f0103f0f:	c1 e2 02             	shl    $0x2,%edx
f0103f12:	01 c2                	add    %eax,%edx
f0103f14:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f17:	89 02                	mov    %eax,(%edx)
	//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f0103f19:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f1c:	83 ec 08             	sub    $0x8,%esp
f0103f1f:	ff 75 10             	pushl  0x10(%ebp)
f0103f22:	50                   	push   %eax
f0103f23:	e8 4b f2 ff ff       	call   f0103173 <write_disk_page>
f0103f28:	83 c4 10             	add    $0x10,%esp
f0103f2b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f0103f2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103f31:	c9                   	leave  
f0103f32:	c3                   	ret    

f0103f33 <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103f33:	55                   	push   %ebp
f0103f34:	89 e5                	mov    %esp,%ebp
f0103f36:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103f39:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f3c:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f3f:	85 c0                	test   %eax,%eax
f0103f41:	75 07                	jne    f0103f4a <__pf_read_env_table+0x17>
f0103f43:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103f48:	eb 3a                	jmp    f0103f84 <__pf_read_env_table+0x51>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103f4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f4d:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f50:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f53:	c1 ea 16             	shr    $0x16,%edx
f0103f56:	c1 e2 02             	shl    $0x2,%edx
f0103f59:	01 d0                	add    %edx,%eax
f0103f5b:	8b 00                	mov    (%eax),%eax
f0103f5d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103f60:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103f64:	75 07                	jne    f0103f6d <__pf_read_env_table+0x3a>
f0103f66:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103f6b:	eb 17                	jmp    f0103f84 <__pf_read_env_table+0x51>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f0103f6d:	83 ec 08             	sub    $0x8,%esp
f0103f70:	ff 75 10             	pushl  0x10(%ebp)
f0103f73:	ff 75 f4             	pushl  -0xc(%ebp)
f0103f76:	e8 c9 f1 ff ff       	call   f0103144 <read_disk_page>
f0103f7b:	83 c4 10             	add    $0x10,%esp
f0103f7e:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f0103f81:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103f84:	c9                   	leave  
f0103f85:	c3                   	ret    

f0103f86 <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f0103f86:	55                   	push   %ebp
f0103f87:	89 e5                	mov    %esp,%ebp
f0103f89:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103f8c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f8f:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f92:	85 c0                	test   %eax,%eax
f0103f94:	74 4c                	je     f0103fe2 <__pf_remove_env_all_tables+0x5c>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103f96:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103f9d:	eb 38                	jmp    f0103fd7 <__pf_remove_env_all_tables+0x51>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f0103f9f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fa2:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103fa5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103fa8:	c1 e2 02             	shl    $0x2,%edx
f0103fab:	01 d0                	add    %edx,%eax
f0103fad:	8b 00                	mov    (%eax),%eax
f0103faf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f0103fb2:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fb5:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103fb8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103fbb:	c1 e2 02             	shl    $0x2,%edx
f0103fbe:	01 d0                	add    %edx,%eax
f0103fc0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f0103fc6:	83 ec 0c             	sub    $0xc,%esp
f0103fc9:	ff 75 f0             	pushl  -0x10(%ebp)
f0103fcc:	e8 16 f4 ff ff       	call   f01033e7 <free_disk_frame>
f0103fd1:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103fd4:	ff 45 f4             	incl   -0xc(%ebp)
f0103fd7:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103fde:	76 bf                	jbe    f0103f9f <__pf_remove_env_all_tables+0x19>
f0103fe0:	eb 01                	jmp    f0103fe3 <__pf_remove_env_all_tables+0x5d>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103fe2:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103fe3:	c9                   	leave  
f0103fe4:	c3                   	ret    

f0103fe5 <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f0103fe5:	55                   	push   %ebp
f0103fe6:	89 e5                	mov    %esp,%ebp
f0103fe8:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f0103feb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0103fef:	75 10                	jne    f0104001 <__pf_remove_env_table+0x1c>
		cprintf("REMOVING table 0 from page file\n");
f0103ff1:	83 ec 0c             	sub    $0xc,%esp
f0103ff4:	68 14 57 13 f0       	push   $0xf0135714
f0103ff9:	e8 10 cd ff ff       	call   f0100d0e <cprintf>
f0103ffe:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f0104001:	8b 45 08             	mov    0x8(%ebp),%eax
f0104004:	8b 40 6c             	mov    0x6c(%eax),%eax
f0104007:	85 c0                	test   %eax,%eax
f0104009:	74 3d                	je     f0104048 <__pf_remove_env_table+0x63>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010400b:	8b 45 08             	mov    0x8(%ebp),%eax
f010400e:	8b 40 6c             	mov    0x6c(%eax),%eax
f0104011:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104014:	c1 ea 16             	shr    $0x16,%edx
f0104017:	c1 e2 02             	shl    $0x2,%edx
f010401a:	01 d0                	add    %edx,%eax
f010401c:	8b 00                	mov    (%eax),%eax
f010401e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f0104021:	8b 45 08             	mov    0x8(%ebp),%eax
f0104024:	8b 40 6c             	mov    0x6c(%eax),%eax
f0104027:	8b 55 0c             	mov    0xc(%ebp),%edx
f010402a:	c1 ea 16             	shr    $0x16,%edx
f010402d:	c1 e2 02             	shl    $0x2,%edx
f0104030:	01 d0                	add    %edx,%eax
f0104032:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0104038:	83 ec 0c             	sub    $0xc,%esp
f010403b:	ff 75 f4             	pushl  -0xc(%ebp)
f010403e:	e8 a4 f3 ff ff       	call   f01033e7 <free_disk_frame>
f0104043:	83 c4 10             	add    $0x10,%esp
f0104046:	eb 01                	jmp    f0104049 <__pf_remove_env_table+0x64>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
		cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f0104048:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f0104049:	c9                   	leave  
f010404a:	c3                   	ret    

f010404b <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f010404b:	55                   	push   %ebp
f010404c:	89 e5                	mov    %esp,%ebp
f010404e:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f0104051:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f0104058:	eb 1f                	jmp    f0104079 <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f010405a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010405d:	83 ec 04             	sub    $0x4,%esp
f0104060:	6a 08                	push   $0x8
f0104062:	ff 75 08             	pushl  0x8(%ebp)
f0104065:	50                   	push   %eax
f0104066:	e8 f4 d6 02 00       	call   f013175f <ide_write>
f010406b:	83 c4 10             	add    $0x10,%esp
f010406e:	85 c0                	test   %eax,%eax
f0104070:	75 12                	jne    f0104084 <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f0104072:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f0104079:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f0104080:	7e d8                	jle    f010405a <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0104082:	eb 01                	jmp    f0104085 <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f0104084:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0104085:	90                   	nop
f0104086:	c9                   	leave  
f0104087:	c3                   	ret    

f0104088 <mc146818_read>:
#include <kern/cpu/picirq.h>


unsigned
mc146818_read(unsigned reg)
{
f0104088:	55                   	push   %ebp
f0104089:	89 e5                	mov    %esp,%ebp
f010408b:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f010408e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104091:	0f b6 c0             	movzbl %al,%eax
f0104094:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f010409b:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010409e:	8a 45 f6             	mov    -0xa(%ebp),%al
f01040a1:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01040a4:	ee                   	out    %al,(%dx)
f01040a5:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01040ac:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01040af:	89 c2                	mov    %eax,%edx
f01040b1:	ec                   	in     (%dx),%al
f01040b2:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f01040b5:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f01040b8:	0f b6 c0             	movzbl %al,%eax
}
f01040bb:	c9                   	leave  
f01040bc:	c3                   	ret    

f01040bd <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f01040bd:	55                   	push   %ebp
f01040be:	89 e5                	mov    %esp,%ebp
f01040c0:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f01040c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01040c6:	0f b6 c0             	movzbl %al,%eax
f01040c9:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f01040d0:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01040d3:	8a 45 f6             	mov    -0xa(%ebp),%al
f01040d6:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01040d9:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f01040da:	8b 45 0c             	mov    0xc(%ebp),%eax
f01040dd:	0f b6 c0             	movzbl %al,%eax
f01040e0:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f01040e7:	88 45 f7             	mov    %al,-0x9(%ebp)
f01040ea:	8a 45 f7             	mov    -0x9(%ebp),%al
f01040ed:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01040f0:	ee                   	out    %al,(%dx)
}
f01040f1:	90                   	nop
f01040f2:	c9                   	leave  
f01040f3:	c3                   	ret    

f01040f4 <kclock_start>:


void
kclock_start(uint8 quantum_in_ms)
{
f01040f4:	55                   	push   %ebp
f01040f5:	89 e5                	mov    %esp,%ebp
f01040f7:	53                   	push   %ebx
f01040f8:	83 ec 24             	sub    $0x24,%esp
f01040fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01040fe:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104101:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104108:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f010410c:	8a 45 ef             	mov    -0x11(%ebp),%al
f010410f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104112:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104113:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104117:	77 48                	ja     f0104161 <kclock_start+0x6d>
f0104119:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104120:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f0104124:	8a 45 ee             	mov    -0x12(%ebp),%al
f0104127:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010412a:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f010412b:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f010412f:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104134:	99                   	cltd   
f0104135:	f7 fb                	idiv   %ebx
f0104137:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f010413d:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104141:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104146:	99                   	cltd   
f0104147:	f7 fb                	idiv   %ebx
f0104149:	89 c3                	mov    %eax,%ebx
f010414b:	89 c8                	mov    %ecx,%eax
f010414d:	99                   	cltd   
f010414e:	f7 fb                	idiv   %ebx
f0104150:	0f b7 c0             	movzwl %ax,%eax
f0104153:	83 ec 0c             	sub    $0xc,%esp
f0104156:	50                   	push   %eax
f0104157:	e8 b8 01 00 00       	call   f0104314 <kclock_write_cnt0_LSB_first>
f010415c:	83 c4 10             	add    $0x10,%esp
f010415f:	eb 13                	jmp    f0104174 <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104161:	6a 35                	push   $0x35
f0104163:	68 38 57 13 f0       	push   $0xf0135738
f0104168:	6a 33                	push   $0x33
f010416a:	68 94 57 13 f0       	push   $0xf0135794
f010416f:	e8 91 c0 ff ff       	call   f0100205 <_panic>
//	cprintf("c = %d\n", c) ;

//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104174:	66 a1 b0 28 19 f0    	mov    0xf01928b0,%ax
f010417a:	0f b7 c0             	movzwl %ax,%eax
f010417d:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104182:	83 ec 0c             	sub    $0xc,%esp
f0104185:	50                   	push   %eax
f0104186:	e8 bc 1b 00 00       	call   f0105d47 <irq_setmask_8259A>
f010418b:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f010418e:	90                   	nop
f010418f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104192:	c9                   	leave  
f0104193:	c3                   	ret    

f0104194 <kclock_stop>:

void
kclock_stop(void)
{
f0104194:	55                   	push   %ebp
f0104195:	89 e5                	mov    %esp,%ebp
f0104197:	83 ec 18             	sub    $0x18,%esp
f010419a:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01041a1:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f01041a5:	8a 45 f3             	mov    -0xd(%ebp),%al
f01041a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01041ab:	ee                   	out    %al,(%dx)
//	for (int i = 0 ; i <20; i++)
//	{
//		cnt0 = kclock_read_cnt0();
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}
	irq_setmask_8259A(0xFFFF);
f01041ac:	83 ec 0c             	sub    $0xc,%esp
f01041af:	68 ff ff 00 00       	push   $0xffff
f01041b4:	e8 8e 1b 00 00       	call   f0105d47 <irq_setmask_8259A>
f01041b9:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f01041bc:	90                   	nop
f01041bd:	c9                   	leave  
f01041be:	c3                   	ret    

f01041bf <kclock_resume>:

void
kclock_resume(void)
{
f01041bf:	55                   	push   %ebp
f01041c0:	89 e5                	mov    %esp,%ebp
f01041c2:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f01041c5:	e8 8c 01 00 00       	call   f0104356 <kclock_read_cnt0>
f01041ca:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f01041ce:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f01041d3:	77 06                	ja     f01041db <kclock_resume+0x1c>
	{
		cnt0 = 20;
f01041d5:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f01041db:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f01041df:	83 e0 01             	and    $0x1,%eax
f01041e2:	66 85 c0             	test   %ax,%ax
f01041e5:	74 09                	je     f01041f0 <kclock_resume+0x31>
		cnt0++;
f01041e7:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f01041eb:	40                   	inc    %eax
f01041ec:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f01041f0:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f01041f7:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f01041fb:	8a 45 ef             	mov    -0x11(%ebp),%al
f01041fe:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104201:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104202:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0104206:	83 ec 0c             	sub    $0xc,%esp
f0104209:	50                   	push   %eax
f010420a:	e8 05 01 00 00       	call   f0104314 <kclock_write_cnt0_LSB_first>
f010420f:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104212:	66 a1 b0 28 19 f0    	mov    0xf01928b0,%ax
f0104218:	0f b7 c0             	movzwl %ax,%eax
f010421b:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104220:	83 ec 0c             	sub    $0xc,%esp
f0104223:	50                   	push   %eax
f0104224:	e8 1e 1b 00 00       	call   f0105d47 <irq_setmask_8259A>
f0104229:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f010422c:	90                   	nop
f010422d:	c9                   	leave  
f010422e:	c3                   	ret    

f010422f <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f010422f:	55                   	push   %ebp
f0104230:	89 e5                	mov    %esp,%ebp
f0104232:	83 ec 28             	sub    $0x28,%esp
f0104235:	8b 45 08             	mov    0x8(%ebp),%eax
f0104238:	88 45 e4             	mov    %al,-0x1c(%ebp)
f010423b:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104242:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104246:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104249:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010424c:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f010424d:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f0104251:	83 ec 0c             	sub    $0xc,%esp
f0104254:	50                   	push   %eax
f0104255:	e8 ba 00 00 00       	call   f0104314 <kclock_write_cnt0_LSB_first>
f010425a:	83 c4 10             	add    $0x10,%esp
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f010425d:	66 a1 b0 28 19 f0    	mov    0xf01928b0,%ax
f0104263:	0f b7 c0             	movzwl %ax,%eax
f0104266:	25 fe ff 00 00       	and    $0xfffe,%eax
f010426b:	83 ec 0c             	sub    $0xc,%esp
f010426e:	50                   	push   %eax
f010426f:	e8 d3 1a 00 00       	call   f0105d47 <irq_setmask_8259A>
f0104274:	83 c4 10             	add    $0x10,%esp

}
f0104277:	90                   	nop
f0104278:	c9                   	leave  
f0104279:	c3                   	ret    

f010427a <kclock_set_quantum>:
//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f010427a:	55                   	push   %ebp
f010427b:	89 e5                	mov    %esp,%ebp
f010427d:	53                   	push   %ebx
f010427e:	83 ec 24             	sub    $0x24,%esp
f0104281:	8b 45 08             	mov    0x8(%ebp),%eax
f0104284:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104287:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f010428b:	77 6c                	ja     f01042f9 <kclock_set_quantum+0x7f>
	{
		int cnt = TIMER_DIV((1000/quantum_in_ms));
f010428d:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104291:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104296:	99                   	cltd   
f0104297:	f7 fb                	idiv   %ebx
f0104299:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f010429f:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01042a3:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f01042a8:	99                   	cltd   
f01042a9:	f7 fb                	idiv   %ebx
f01042ab:	89 c3                	mov    %eax,%ebx
f01042ad:	89 c8                	mov    %ecx,%eax
f01042af:	99                   	cltd   
f01042b0:	f7 fb                	idiv   %ebx
f01042b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cnt%2 == 1)
f01042b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01042b8:	25 01 00 00 80       	and    $0x80000001,%eax
f01042bd:	85 c0                	test   %eax,%eax
f01042bf:	79 05                	jns    f01042c6 <kclock_set_quantum+0x4c>
f01042c1:	48                   	dec    %eax
f01042c2:	83 c8 fe             	or     $0xfffffffe,%eax
f01042c5:	40                   	inc    %eax
f01042c6:	83 f8 01             	cmp    $0x1,%eax
f01042c9:	75 03                	jne    f01042ce <kclock_set_quantum+0x54>
			cnt++;
f01042cb:	ff 45 f4             	incl   -0xc(%ebp)
f01042ce:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f01042d5:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f01042d9:	8a 45 ef             	mov    -0x11(%ebp),%al
f01042dc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01042df:	ee                   	out    %al,(%dx)

		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f01042e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01042e3:	0f b7 c0             	movzwl %ax,%eax
f01042e6:	83 ec 0c             	sub    $0xc,%esp
f01042e9:	50                   	push   %eax
f01042ea:	e8 25 00 00 00       	call   f0104314 <kclock_write_cnt0_LSB_first>
f01042ef:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f01042f2:	e8 9d fe ff ff       	call   f0104194 <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f01042f7:	eb 16                	jmp    f010430f <kclock_set_quantum+0x95>
		kclock_stop();
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f01042f9:	6a 35                	push   $0x35
f01042fb:	68 38 57 13 f0       	push   $0xf0135738
f0104300:	68 c9 00 00 00       	push   $0xc9
f0104305:	68 94 57 13 f0       	push   $0xf0135794
f010430a:	e8 f6 be ff ff       	call   f0100205 <_panic>
	}
}
f010430f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104312:	c9                   	leave  
f0104313:	c3                   	ret    

f0104314 <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f0104314:	55                   	push   %ebp
f0104315:	89 e5                	mov    %esp,%ebp
f0104317:	83 ec 14             	sub    $0x14,%esp
f010431a:	8b 45 08             	mov    0x8(%ebp),%eax
f010431d:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f0104321:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104324:	0f b6 c0             	movzbl %al,%eax
f0104327:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f010432e:	88 45 f6             	mov    %al,-0xa(%ebp)
f0104331:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104334:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104337:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f0104338:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010433b:	66 c1 e8 08          	shr    $0x8,%ax
f010433f:	0f b6 c0             	movzbl %al,%eax
f0104342:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f0104349:	88 45 f7             	mov    %al,-0x9(%ebp)
f010434c:	8a 45 f7             	mov    -0x9(%ebp),%al
f010434f:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0104352:	ee                   	out    %al,(%dx)
}
f0104353:	90                   	nop
f0104354:	c9                   	leave  
f0104355:	c3                   	ret    

f0104356 <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f0104356:	55                   	push   %ebp
f0104357:	89 e5                	mov    %esp,%ebp
f0104359:	83 ec 20             	sub    $0x20,%esp
f010435c:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104363:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104366:	89 c2                	mov    %eax,%edx
f0104368:	ec                   	in     (%dx),%al
f0104369:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f010436c:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f010436f:	88 45 ff             	mov    %al,-0x1(%ebp)
f0104372:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104379:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010437c:	89 c2                	mov    %eax,%edx
f010437e:	ec                   	in     (%dx),%al
f010437f:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f0104382:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104385:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104388:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f010438c:	c1 e0 08             	shl    $0x8,%eax
f010438f:	89 c2                	mov    %eax,%edx
f0104391:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104395:	09 d0                	or     %edx,%eax
f0104397:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f010439b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010439e:	c9                   	leave  
f010439f:	c3                   	ret    

f01043a0 <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f01043a0:	55                   	push   %ebp
f01043a1:	89 e5                	mov    %esp,%ebp
f01043a3:	83 ec 30             	sub    $0x30,%esp
f01043a6:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01043ad:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01043b0:	89 c2                	mov    %eax,%edx
f01043b2:	ec                   	in     (%dx),%al
f01043b3:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f01043b6:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f01043b9:	88 45 ff             	mov    %al,-0x1(%ebp)
f01043bc:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01043c3:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01043c7:	8a 45 dc             	mov    -0x24(%ebp),%al
f01043ca:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01043cd:	ee                   	out    %al,(%dx)
f01043ce:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01043d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01043d8:	89 c2                	mov    %eax,%edx
f01043da:	ec                   	in     (%dx),%al
f01043db:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f01043de:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f01043e1:	88 45 f3             	mov    %al,-0xd(%ebp)
f01043e4:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01043eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01043ee:	89 c2                	mov    %eax,%edx
f01043f0:	ec                   	in     (%dx),%al
f01043f1:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f01043f4:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f01043f7:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f01043fa:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f01043fe:	c1 e0 08             	shl    $0x8,%eax
f0104401:	89 c2                	mov    %eax,%edx
f0104403:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0104407:	09 d0                	or     %edx,%eax
f0104409:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f010440d:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104411:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f0104418:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010441b:	8a 45 df             	mov    -0x21(%ebp),%al
f010441e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0104421:	ee                   	out    %al,(%dx)

	return cnt0 ;
f0104422:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0104425:	c9                   	leave  
f0104426:	c3                   	ret    

f0104427 <isSchedMethodRR>:
//void on_clock_update_WS_time_stamps();
extern void cleanup_buffers(struct Env* e);
//================

void sched_delete_ready_queues() ;
uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f0104427:	55                   	push   %ebp
f0104428:	89 e5                	mov    %esp,%ebp
f010442a:	a1 4c 5d 87 f0       	mov    0xf0875d4c,%eax
f010442f:	85 c0                	test   %eax,%eax
f0104431:	75 07                	jne    f010443a <isSchedMethodRR+0x13>
f0104433:	b8 01 00 00 00       	mov    $0x1,%eax
f0104438:	eb 05                	jmp    f010443f <isSchedMethodRR+0x18>
f010443a:	b8 00 00 00 00       	mov    $0x0,%eax
f010443f:	5d                   	pop    %ebp
f0104440:	c3                   	ret    

f0104441 <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f0104441:	55                   	push   %ebp
f0104442:	89 e5                	mov    %esp,%ebp
f0104444:	a1 4c 5d 87 f0       	mov    0xf0875d4c,%eax
f0104449:	83 f8 01             	cmp    $0x1,%eax
f010444c:	75 07                	jne    f0104455 <isSchedMethodMLFQ+0x14>
f010444e:	b8 01 00 00 00       	mov    $0x1,%eax
f0104453:	eb 05                	jmp    f010445a <isSchedMethodMLFQ+0x19>
f0104455:	b8 00 00 00 00       	mov    $0x0,%eax
f010445a:	5d                   	pop    %ebp
f010445b:	c3                   	ret    

f010445c <init_queue>:

//==================================================================================//
//============================== HELPER FUNCTIONS ==================================//
//==================================================================================//
void init_queue(struct Env_Queue* queue)
{
f010445c:	55                   	push   %ebp
f010445d:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f010445f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104463:	74 1d                	je     f0104482 <init_queue+0x26>
	{
		LIST_INIT(queue);
f0104465:	8b 45 08             	mov    0x8(%ebp),%eax
f0104468:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010446e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104471:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0104478:	8b 45 08             	mov    0x8(%ebp),%eax
f010447b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f0104482:	90                   	nop
f0104483:	5d                   	pop    %ebp
f0104484:	c3                   	ret    

f0104485 <queue_size>:

int queue_size(struct Env_Queue* queue)
{
f0104485:	55                   	push   %ebp
f0104486:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104488:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010448c:	74 08                	je     f0104496 <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f010448e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104491:	8b 40 0c             	mov    0xc(%eax),%eax
f0104494:	eb 05                	jmp    f010449b <queue_size+0x16>
	}
	else
	{
		return 0;
f0104496:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f010449b:	5d                   	pop    %ebp
f010449c:	c3                   	ret    

f010449d <enqueue>:

void enqueue(struct Env_Queue* queue, struct Env* env)
{
f010449d:	55                   	push   %ebp
f010449e:	89 e5                	mov    %esp,%ebp
f01044a0:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f01044a3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01044a7:	75 16                	jne    f01044bf <enqueue+0x22>
f01044a9:	68 a8 57 13 f0       	push   $0xf01357a8
f01044ae:	68 b6 57 13 f0       	push   $0xf01357b6
f01044b3:	6a 2d                	push   $0x2d
f01044b5:	68 cb 57 13 f0       	push   $0xf01357cb
f01044ba:	e8 46 bd ff ff       	call   f0100205 <_panic>
	if(env != NULL)
f01044bf:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01044c3:	74 66                	je     f010452b <enqueue+0x8e>
	{
		LIST_INSERT_HEAD(queue, env);
f01044c5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01044c9:	75 14                	jne    f01044df <enqueue+0x42>
f01044cb:	83 ec 04             	sub    $0x4,%esp
f01044ce:	68 dc 57 13 f0       	push   $0xf01357dc
f01044d3:	6a 30                	push   $0x30
f01044d5:	68 cb 57 13 f0       	push   $0xf01357cb
f01044da:	e8 26 bd ff ff       	call   f0100205 <_panic>
f01044df:	8b 45 08             	mov    0x8(%ebp),%eax
f01044e2:	8b 10                	mov    (%eax),%edx
f01044e4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01044e7:	89 50 44             	mov    %edx,0x44(%eax)
f01044ea:	8b 45 0c             	mov    0xc(%ebp),%eax
f01044ed:	8b 40 44             	mov    0x44(%eax),%eax
f01044f0:	85 c0                	test   %eax,%eax
f01044f2:	74 0d                	je     f0104501 <enqueue+0x64>
f01044f4:	8b 45 08             	mov    0x8(%ebp),%eax
f01044f7:	8b 00                	mov    (%eax),%eax
f01044f9:	8b 55 0c             	mov    0xc(%ebp),%edx
f01044fc:	89 50 48             	mov    %edx,0x48(%eax)
f01044ff:	eb 09                	jmp    f010450a <enqueue+0x6d>
f0104501:	8b 45 08             	mov    0x8(%ebp),%eax
f0104504:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104507:	89 50 04             	mov    %edx,0x4(%eax)
f010450a:	8b 45 08             	mov    0x8(%ebp),%eax
f010450d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104510:	89 10                	mov    %edx,(%eax)
f0104512:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104515:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010451c:	8b 45 08             	mov    0x8(%ebp),%eax
f010451f:	8b 40 0c             	mov    0xc(%eax),%eax
f0104522:	8d 50 01             	lea    0x1(%eax),%edx
f0104525:	8b 45 08             	mov    0x8(%ebp),%eax
f0104528:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f010452b:	90                   	nop
f010452c:	c9                   	leave  
f010452d:	c3                   	ret    

f010452e <dequeue>:

struct Env* dequeue(struct Env_Queue* queue)
{
f010452e:	55                   	push   %ebp
f010452f:	89 e5                	mov    %esp,%ebp
f0104531:	83 ec 18             	sub    $0x18,%esp
	if (queue == NULL) return NULL;
f0104534:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104538:	75 0a                	jne    f0104544 <dequeue+0x16>
f010453a:	b8 00 00 00 00       	mov    $0x0,%eax
f010453f:	e9 a0 00 00 00       	jmp    f01045e4 <dequeue+0xb6>
	struct Env* envItem = LIST_LAST(queue);
f0104544:	8b 45 08             	mov    0x8(%ebp),%eax
f0104547:	8b 40 04             	mov    0x4(%eax),%eax
f010454a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (envItem != NULL)
f010454d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104551:	0f 84 8a 00 00 00    	je     f01045e1 <dequeue+0xb3>
	{
		LIST_REMOVE(queue, envItem);
f0104557:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010455b:	75 14                	jne    f0104571 <dequeue+0x43>
f010455d:	83 ec 04             	sub    $0x4,%esp
f0104560:	68 ff 57 13 f0       	push   $0xf01357ff
f0104565:	6a 3a                	push   $0x3a
f0104567:	68 cb 57 13 f0       	push   $0xf01357cb
f010456c:	e8 94 bc ff ff       	call   f0100205 <_panic>
f0104571:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104574:	8b 40 44             	mov    0x44(%eax),%eax
f0104577:	85 c0                	test   %eax,%eax
f0104579:	74 11                	je     f010458c <dequeue+0x5e>
f010457b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010457e:	8b 40 44             	mov    0x44(%eax),%eax
f0104581:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104584:	8b 52 48             	mov    0x48(%edx),%edx
f0104587:	89 50 48             	mov    %edx,0x48(%eax)
f010458a:	eb 0c                	jmp    f0104598 <dequeue+0x6a>
f010458c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010458f:	8b 50 48             	mov    0x48(%eax),%edx
f0104592:	8b 45 08             	mov    0x8(%ebp),%eax
f0104595:	89 50 04             	mov    %edx,0x4(%eax)
f0104598:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010459b:	8b 40 48             	mov    0x48(%eax),%eax
f010459e:	85 c0                	test   %eax,%eax
f01045a0:	74 11                	je     f01045b3 <dequeue+0x85>
f01045a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045a5:	8b 40 48             	mov    0x48(%eax),%eax
f01045a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01045ab:	8b 52 44             	mov    0x44(%edx),%edx
f01045ae:	89 50 44             	mov    %edx,0x44(%eax)
f01045b1:	eb 0b                	jmp    f01045be <dequeue+0x90>
f01045b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045b6:	8b 50 44             	mov    0x44(%eax),%edx
f01045b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01045bc:	89 10                	mov    %edx,(%eax)
f01045be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045c1:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01045c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045cb:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01045d2:	8b 45 08             	mov    0x8(%ebp),%eax
f01045d5:	8b 40 0c             	mov    0xc(%eax),%eax
f01045d8:	8d 50 ff             	lea    -0x1(%eax),%edx
f01045db:	8b 45 08             	mov    0x8(%ebp),%eax
f01045de:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f01045e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01045e4:	c9                   	leave  
f01045e5:	c3                   	ret    

f01045e6 <remove_from_queue>:

void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f01045e6:	55                   	push   %ebp
f01045e7:	89 e5                	mov    %esp,%ebp
f01045e9:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f01045ec:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01045f0:	75 16                	jne    f0104608 <remove_from_queue+0x22>
f01045f2:	68 a8 57 13 f0       	push   $0xf01357a8
f01045f7:	68 b6 57 13 f0       	push   $0xf01357b6
f01045fc:	6a 41                	push   $0x41
f01045fe:	68 cb 57 13 f0       	push   $0xf01357cb
f0104603:	e8 fd bb ff ff       	call   f0100205 <_panic>

	if (e != NULL)
f0104608:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010460c:	0f 84 8a 00 00 00    	je     f010469c <remove_from_queue+0xb6>
	{
		LIST_REMOVE(queue, e);
f0104612:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104616:	75 14                	jne    f010462c <remove_from_queue+0x46>
f0104618:	83 ec 04             	sub    $0x4,%esp
f010461b:	68 ff 57 13 f0       	push   $0xf01357ff
f0104620:	6a 45                	push   $0x45
f0104622:	68 cb 57 13 f0       	push   $0xf01357cb
f0104627:	e8 d9 bb ff ff       	call   f0100205 <_panic>
f010462c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010462f:	8b 40 44             	mov    0x44(%eax),%eax
f0104632:	85 c0                	test   %eax,%eax
f0104634:	74 11                	je     f0104647 <remove_from_queue+0x61>
f0104636:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104639:	8b 40 44             	mov    0x44(%eax),%eax
f010463c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010463f:	8b 52 48             	mov    0x48(%edx),%edx
f0104642:	89 50 48             	mov    %edx,0x48(%eax)
f0104645:	eb 0c                	jmp    f0104653 <remove_from_queue+0x6d>
f0104647:	8b 45 0c             	mov    0xc(%ebp),%eax
f010464a:	8b 50 48             	mov    0x48(%eax),%edx
f010464d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104650:	89 50 04             	mov    %edx,0x4(%eax)
f0104653:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104656:	8b 40 48             	mov    0x48(%eax),%eax
f0104659:	85 c0                	test   %eax,%eax
f010465b:	74 11                	je     f010466e <remove_from_queue+0x88>
f010465d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104660:	8b 40 48             	mov    0x48(%eax),%eax
f0104663:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104666:	8b 52 44             	mov    0x44(%edx),%edx
f0104669:	89 50 44             	mov    %edx,0x44(%eax)
f010466c:	eb 0b                	jmp    f0104679 <remove_from_queue+0x93>
f010466e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104671:	8b 50 44             	mov    0x44(%eax),%edx
f0104674:	8b 45 08             	mov    0x8(%ebp),%eax
f0104677:	89 10                	mov    %edx,(%eax)
f0104679:	8b 45 0c             	mov    0xc(%ebp),%eax
f010467c:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104683:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104686:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010468d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104690:	8b 40 0c             	mov    0xc(%eax),%eax
f0104693:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104696:	8b 45 08             	mov    0x8(%ebp),%eax
f0104699:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f010469c:	90                   	nop
f010469d:	c9                   	leave  
f010469e:	c3                   	ret    

f010469f <find_env_in_queue>:

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f010469f:	55                   	push   %ebp
f01046a0:	89 e5                	mov    %esp,%ebp
f01046a2:	83 ec 10             	sub    $0x10,%esp
	if (queue == NULL) return NULL;
f01046a5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01046a9:	75 07                	jne    f01046b2 <find_env_in_queue+0x13>
f01046ab:	b8 00 00 00 00       	mov    $0x0,%eax
f01046b0:	eb 58                	jmp    f010470a <find_env_in_queue+0x6b>

	struct Env * ptr_env=NULL;
f01046b2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f01046b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01046bc:	8b 00                	mov    (%eax),%eax
f01046be:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01046c1:	eb 19                	jmp    f01046dc <find_env_in_queue+0x3d>
	{
		if(ptr_env->env_id == envID)
f01046c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046c6:	8b 40 4c             	mov    0x4c(%eax),%eax
f01046c9:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01046cc:	75 05                	jne    f01046d3 <find_env_in_queue+0x34>
		{
			return ptr_env;
f01046ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046d1:	eb 37                	jmp    f010470a <find_env_in_queue+0x6b>
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	if (queue == NULL) return NULL;

	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f01046d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01046d6:	8b 40 08             	mov    0x8(%eax),%eax
f01046d9:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01046dc:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01046e0:	74 08                	je     f01046ea <find_env_in_queue+0x4b>
f01046e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046e5:	8b 40 44             	mov    0x44(%eax),%eax
f01046e8:	eb 05                	jmp    f01046ef <find_env_in_queue+0x50>
f01046ea:	b8 00 00 00 00       	mov    $0x0,%eax
f01046ef:	8b 55 08             	mov    0x8(%ebp),%edx
f01046f2:	89 42 08             	mov    %eax,0x8(%edx)
f01046f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01046f8:	8b 40 08             	mov    0x8(%eax),%eax
f01046fb:	85 c0                	test   %eax,%eax
f01046fd:	75 c4                	jne    f01046c3 <find_env_in_queue+0x24>
f01046ff:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0104703:	75 be                	jne    f01046c3 <find_env_in_queue+0x24>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f0104705:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010470a:	c9                   	leave  
f010470b:	c3                   	ret    

f010470c <fos_scheduler_MLFQ>:
//==================================================================================//

struct Env* fos_scheduler_MLFQ()
{
f010470c:	55                   	push   %ebp
f010470d:	89 e5                	mov    %esp,%ebp
f010470f:	83 ec 08             	sub    $0x8,%esp
	//Apply the MLFQ with the specified levels to pick up the next environment
	//Note: the "curenv" (if exist) should be placed in its correct queue
	// your code is here, remove the panic and write your code
	panic("fos_scheduler_MLFQ() is not implemented yet...!!");
f0104712:	83 ec 04             	sub    $0x4,%esp
f0104715:	68 20 58 13 f0       	push   $0xf0135820
f010471a:	6a 5e                	push   $0x5e
f010471c:	68 cb 57 13 f0       	push   $0xf01357cb
f0104721:	e8 df ba ff ff       	call   f0100205 <_panic>

f0104726 <fos_scheduler>:

}

void
fos_scheduler(void)
{
f0104726:	55                   	push   %ebp
f0104727:	89 e5                	mov    %esp,%ebp
f0104729:	83 ec 18             	sub    $0x18,%esp
	chk1();
f010472c:	e8 5a ba 02 00       	call   f013018b <chk1>
	scheduler_status = SCH_STARTED;
f0104731:	c7 05 58 5d 87 f0 01 	movl   $0x1,0xf0875d58
f0104738:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f010473b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f0104742:	a1 4c 5d 87 f0       	mov    0xf0875d4c,%eax
f0104747:	85 c0                	test   %eax,%eax
f0104749:	75 4d                	jne    f0104798 <fos_scheduler+0x72>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f010474b:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f0104750:	85 c0                	test   %eax,%eax
f0104752:	74 18                	je     f010476c <fos_scheduler+0x46>
		{
			enqueue(&(env_ready_queues[0]), curenv);
f0104754:	8b 15 f4 53 87 f0    	mov    0xf08753f4,%edx
f010475a:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f010475f:	83 ec 08             	sub    $0x8,%esp
f0104762:	52                   	push   %edx
f0104763:	50                   	push   %eax
f0104764:	e8 34 fd ff ff       	call   f010449d <enqueue>
f0104769:	83 c4 10             	add    $0x10,%esp
		}

		//Pick the next environment from the ready queue
		next_env = dequeue(&(env_ready_queues[0]));
f010476c:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f0104771:	83 ec 0c             	sub    $0xc,%esp
f0104774:	50                   	push   %eax
f0104775:	e8 b4 fd ff ff       	call   f010452e <dequeue>
f010477a:	83 c4 10             	add    $0x10,%esp
f010477d:	89 45 f4             	mov    %eax,-0xc(%ebp)

		//Reset the quantum
		//2017: Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f0104780:	a1 2c 5d 87 f0       	mov    0xf0875d2c,%eax
f0104785:	8a 00                	mov    (%eax),%al
f0104787:	0f b6 c0             	movzbl %al,%eax
f010478a:	83 ec 0c             	sub    $0xc,%esp
f010478d:	50                   	push   %eax
f010478e:	e8 e7 fa ff ff       	call   f010427a <kclock_set_quantum>
f0104793:	83 c4 10             	add    $0x10,%esp
f0104796:	eb 12                	jmp    f01047aa <fos_scheduler+0x84>
		//uint16 cnt0 = kclock_read_cnt0_latch() ;
		//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	}
	else if (scheduler_method == SCH_MLFQ)
f0104798:	a1 4c 5d 87 f0       	mov    0xf0875d4c,%eax
f010479d:	83 f8 01             	cmp    $0x1,%eax
f01047a0:	75 08                	jne    f01047aa <fos_scheduler+0x84>
	{
		next_env = fos_scheduler_MLFQ();
f01047a2:	e8 65 ff ff ff       	call   f010470c <fos_scheduler_MLFQ>
f01047a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}


	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f01047aa:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f01047af:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f01047b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01047b5:	a3 f4 53 87 f0       	mov    %eax,0xf08753f4
	chk2(next_env) ;
f01047ba:	83 ec 0c             	sub    $0xc,%esp
f01047bd:	ff 75 f4             	pushl  -0xc(%ebp)
f01047c0:	e8 03 ba 02 00       	call   f01301c8 <chk2>
f01047c5:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f01047c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01047cb:	a3 f4 53 87 f0       	mov    %eax,0xf08753f4

	//sched_print_all();

	if(next_env != NULL)
f01047d0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01047d4:	74 0b                	je     f01047e1 <fos_scheduler+0xbb>
	{
//		cprintf("\nScheduler select program '%s' [%d]... counter = %d\n", next_env->prog_name, next_env->env_id, kclock_read_cnt0());
//		cprintf("Q0 = %d, Q1 = %d, Q2 = %d, Q3 = %d\n", queue_size(&(env_ready_queues[0])), queue_size(&(env_ready_queues[1])), queue_size(&(env_ready_queues[2])), queue_size(&(env_ready_queues[3])));
		env_run(next_env);
f01047d6:	83 ec 0c             	sub    $0xc,%esp
f01047d9:	ff 75 f4             	pushl  -0xc(%ebp)
f01047dc:	e8 8b 52 00 00       	call   f0109a6c <env_run>
	}
	else
	{
		/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
		curenv = NULL;
f01047e1:	c7 05 f4 53 87 f0 00 	movl   $0x0,0xf08753f4
f01047e8:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f01047eb:	a1 ac 5d 87 f0       	mov    0xf0875dac,%eax
f01047f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01047f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01047f6:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f01047f9:	c7 05 58 5d 87 f0 00 	movl   $0x0,0xf0875d58
f0104800:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f0104803:	83 ec 0c             	sub    $0xc,%esp
f0104806:	6a 00                	push   $0x0
f0104808:	e8 27 c5 ff ff       	call   f0100d34 <run_command_prompt>
f010480d:	83 c4 10             	add    $0x10,%esp
f0104810:	eb f1                	jmp    f0104803 <fos_scheduler+0xdd>

f0104812 <sched_init_RR>:

	}
}

void sched_init_RR(uint8 quantum)
{
f0104812:	55                   	push   %ebp
f0104813:	89 e5                	mov    %esp,%ebp
f0104815:	83 ec 18             	sub    $0x18,%esp
f0104818:	8b 45 08             	mov    0x8(%ebp),%eax
f010481b:	88 45 f4             	mov    %al,-0xc(%ebp)


	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f010481e:	c6 05 80 5d 87 f0 01 	movb   $0x1,0xf0875d80
#if USE_KHEAP
	sched_delete_ready_queues();
f0104825:	e8 e5 00 00 00       	call   f010490f <sched_delete_ready_queues>
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
f010482a:	83 ec 0c             	sub    $0xc,%esp
f010482d:	6a 10                	push   $0x10
f010482f:	e8 51 30 00 00       	call   f0107885 <kmalloc>
f0104834:	83 c4 10             	add    $0x10,%esp
f0104837:	a3 e8 5c 87 f0       	mov    %eax,0xf0875ce8
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
f010483c:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0104841:	0f b6 c0             	movzbl %al,%eax
f0104844:	83 ec 0c             	sub    $0xc,%esp
f0104847:	50                   	push   %eax
f0104848:	e8 38 30 00 00       	call   f0107885 <kmalloc>
f010484d:	83 c4 10             	add    $0x10,%esp
f0104850:	a3 2c 5d 87 f0       	mov    %eax,0xf0875d2c
#endif
	quantums[0] = quantum;
f0104855:	a1 2c 5d 87 f0       	mov    0xf0875d2c,%eax
f010485a:	8a 55 f4             	mov    -0xc(%ebp),%dl
f010485d:	88 10                	mov    %dl,(%eax)
	kclock_set_quantum(quantums[0]);
f010485f:	a1 2c 5d 87 f0       	mov    0xf0875d2c,%eax
f0104864:	8a 00                	mov    (%eax),%al
f0104866:	0f b6 c0             	movzbl %al,%eax
f0104869:	83 ec 0c             	sub    $0xc,%esp
f010486c:	50                   	push   %eax
f010486d:	e8 08 fa ff ff       	call   f010427a <kclock_set_quantum>
f0104872:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f0104875:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f010487a:	83 ec 0c             	sub    $0xc,%esp
f010487d:	50                   	push   %eax
f010487e:	e8 d9 fb ff ff       	call   f010445c <init_queue>
f0104883:	83 c4 10             	add    $0x10,%esp

	//=========================================
	//DON'T CHANGE THESE LINES=================
	scheduler_status = SCH_STOPPED;
f0104886:	c7 05 58 5d 87 f0 00 	movl   $0x0,0xf0875d58
f010488d:	00 00 00 
	scheduler_method = SCH_RR;
f0104890:	c7 05 4c 5d 87 f0 00 	movl   $0x0,0xf0875d4c
f0104897:	00 00 00 
	//=========================================
	//=========================================
}
f010489a:	90                   	nop
f010489b:	c9                   	leave  
f010489c:	c3                   	ret    

f010489d <sched_init_MLFQ>:

void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f010489d:	55                   	push   %ebp
f010489e:	89 e5                	mov    %esp,%ebp
f01048a0:	83 ec 18             	sub    $0x18,%esp
f01048a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01048a6:	88 45 f4             	mov    %al,-0xc(%ebp)
#if USE_KHEAP
	//=========================================
	//DON'T CHANGE THESE LINES=================
	sched_delete_ready_queues();
f01048a9:	e8 61 00 00 00       	call   f010490f <sched_delete_ready_queues>

	//=========================================
	//=========================================
	// your code is here, remove the panic and write your code
	panic("sched_init_MLFQ() is not implemented yet...!!");
f01048ae:	83 ec 04             	sub    $0x4,%esp
f01048b1:	68 54 58 13 f0       	push   $0xf0135854
f01048b6:	68 d1 00 00 00       	push   $0xd1
f01048bb:	68 cb 57 13 f0       	push   $0xf01357cb
f01048c0:	e8 40 b9 ff ff       	call   f0100205 <_panic>

f01048c5 <sched_init>:

}


void sched_init()
{
f01048c5:	55                   	push   %ebp
f01048c6:	89 e5                	mov    %esp,%ebp
f01048c8:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f01048cb:	c7 05 08 5d 87 f0 00 	movl   $0x0,0xf0875d08
f01048d2:	00 00 00 

	sched_init_RR(CLOCK_INTERVAL_IN_MS);
f01048d5:	83 ec 0c             	sub    $0xc,%esp
f01048d8:	6a 0a                	push   $0xa
f01048da:	e8 33 ff ff ff       	call   f0104812 <sched_init_RR>
f01048df:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f01048e2:	83 ec 0c             	sub    $0xc,%esp
f01048e5:	68 3c 5d 87 f0       	push   $0xf0875d3c
f01048ea:	e8 6d fb ff ff       	call   f010445c <init_queue>
f01048ef:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f01048f2:	83 ec 0c             	sub    $0xc,%esp
f01048f5:	68 f4 5c 87 f0       	push   $0xf0875cf4
f01048fa:	e8 5d fb ff ff       	call   f010445c <init_queue>
f01048ff:	83 c4 10             	add    $0x10,%esp
	scheduler_status = SCH_STOPPED;
f0104902:	c7 05 58 5d 87 f0 00 	movl   $0x0,0xf0875d58
f0104909:	00 00 00 
}
f010490c:	90                   	nop
f010490d:	c9                   	leave  
f010490e:	c3                   	ret    

f010490f <sched_delete_ready_queues>:

void sched_delete_ready_queues()
{
f010490f:	55                   	push   %ebp
f0104910:	89 e5                	mov    %esp,%ebp
f0104912:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	if (env_ready_queues != NULL)
f0104915:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f010491a:	85 c0                	test   %eax,%eax
f010491c:	74 11                	je     f010492f <sched_delete_ready_queues+0x20>
		kfree(env_ready_queues);
f010491e:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f0104923:	83 ec 0c             	sub    $0xc,%esp
f0104926:	50                   	push   %eax
f0104927:	e8 24 30 00 00       	call   f0107950 <kfree>
f010492c:	83 c4 10             	add    $0x10,%esp
	if (quantums != NULL)
f010492f:	a1 2c 5d 87 f0       	mov    0xf0875d2c,%eax
f0104934:	85 c0                	test   %eax,%eax
f0104936:	74 11                	je     f0104949 <sched_delete_ready_queues+0x3a>
		kfree(quantums);
f0104938:	a1 2c 5d 87 f0       	mov    0xf0875d2c,%eax
f010493d:	83 ec 0c             	sub    $0xc,%esp
f0104940:	50                   	push   %eax
f0104941:	e8 0a 30 00 00       	call   f0107950 <kfree>
f0104946:	83 c4 10             	add    $0x10,%esp
#endif
}
f0104949:	90                   	nop
f010494a:	c9                   	leave  
f010494b:	c3                   	ret    

f010494c <sched_insert_ready>:
void sched_insert_ready(struct Env* env)
{
f010494c:	55                   	push   %ebp
f010494d:	89 e5                	mov    %esp,%ebp
f010494f:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104952:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104956:	74 1e                	je     f0104976 <sched_insert_ready+0x2a>
	{
		env->env_status = ENV_READY ;
f0104958:	8b 45 08             	mov    0x8(%ebp),%eax
f010495b:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		enqueue(&(env_ready_queues[0]), env);
f0104962:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f0104967:	83 ec 08             	sub    $0x8,%esp
f010496a:	ff 75 08             	pushl  0x8(%ebp)
f010496d:	50                   	push   %eax
f010496e:	e8 2a fb ff ff       	call   f010449d <enqueue>
f0104973:	83 c4 10             	add    $0x10,%esp
	}
}
f0104976:	90                   	nop
f0104977:	c9                   	leave  
f0104978:	c3                   	ret    

f0104979 <sched_remove_ready>:


void sched_remove_ready(struct Env* env)
{
f0104979:	55                   	push   %ebp
f010497a:	89 e5                	mov    %esp,%ebp
f010497c:	83 ec 18             	sub    $0x18,%esp
	if(env != NULL)
f010497f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104983:	0f 84 fe 00 00 00    	je     f0104a87 <sched_remove_ready+0x10e>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104989:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104990:	e9 e1 00 00 00       	jmp    f0104a76 <sched_remove_ready+0xfd>
		{
			struct Env * ptr_env = find_env_in_queue(&(env_ready_queues[i]), env->env_id);
f0104995:	8b 45 08             	mov    0x8(%ebp),%eax
f0104998:	8b 40 4c             	mov    0x4c(%eax),%eax
f010499b:	89 c2                	mov    %eax,%edx
f010499d:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f01049a2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01049a5:	c1 e1 04             	shl    $0x4,%ecx
f01049a8:	01 c8                	add    %ecx,%eax
f01049aa:	52                   	push   %edx
f01049ab:	50                   	push   %eax
f01049ac:	e8 ee fc ff ff       	call   f010469f <find_env_in_queue>
f01049b1:	83 c4 08             	add    $0x8,%esp
f01049b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (ptr_env != NULL)
f01049b7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01049bb:	0f 84 b2 00 00 00    	je     f0104a73 <sched_remove_ready+0xfa>
			{
				LIST_REMOVE(&(env_ready_queues[i]), env);
f01049c1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01049c5:	75 17                	jne    f01049de <sched_remove_ready+0x65>
f01049c7:	83 ec 04             	sub    $0x4,%esp
f01049ca:	68 ff 57 13 f0       	push   $0xf01357ff
f01049cf:	68 0b 01 00 00       	push   $0x10b
f01049d4:	68 cb 57 13 f0       	push   $0xf01357cb
f01049d9:	e8 27 b8 ff ff       	call   f0100205 <_panic>
f01049de:	8b 45 08             	mov    0x8(%ebp),%eax
f01049e1:	8b 40 44             	mov    0x44(%eax),%eax
f01049e4:	85 c0                	test   %eax,%eax
f01049e6:	74 11                	je     f01049f9 <sched_remove_ready+0x80>
f01049e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01049eb:	8b 40 44             	mov    0x44(%eax),%eax
f01049ee:	8b 55 08             	mov    0x8(%ebp),%edx
f01049f1:	8b 52 48             	mov    0x48(%edx),%edx
f01049f4:	89 50 48             	mov    %edx,0x48(%eax)
f01049f7:	eb 16                	jmp    f0104a0f <sched_remove_ready+0x96>
f01049f9:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f01049fe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a01:	c1 e2 04             	shl    $0x4,%edx
f0104a04:	01 c2                	add    %eax,%edx
f0104a06:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a09:	8b 40 48             	mov    0x48(%eax),%eax
f0104a0c:	89 42 04             	mov    %eax,0x4(%edx)
f0104a0f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a12:	8b 40 48             	mov    0x48(%eax),%eax
f0104a15:	85 c0                	test   %eax,%eax
f0104a17:	74 11                	je     f0104a2a <sched_remove_ready+0xb1>
f0104a19:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a1c:	8b 40 48             	mov    0x48(%eax),%eax
f0104a1f:	8b 55 08             	mov    0x8(%ebp),%edx
f0104a22:	8b 52 44             	mov    0x44(%edx),%edx
f0104a25:	89 50 44             	mov    %edx,0x44(%eax)
f0104a28:	eb 15                	jmp    f0104a3f <sched_remove_ready+0xc6>
f0104a2a:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f0104a2f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a32:	c1 e2 04             	shl    $0x4,%edx
f0104a35:	01 c2                	add    %eax,%edx
f0104a37:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a3a:	8b 40 44             	mov    0x44(%eax),%eax
f0104a3d:	89 02                	mov    %eax,(%edx)
f0104a3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a42:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104a49:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a4c:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104a53:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f0104a58:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a5b:	c1 e2 04             	shl    $0x4,%edx
f0104a5e:	01 d0                	add    %edx,%eax
f0104a60:	8b 50 0c             	mov    0xc(%eax),%edx
f0104a63:	4a                   	dec    %edx
f0104a64:	89 50 0c             	mov    %edx,0xc(%eax)
				env->env_status = ENV_UNKNOWN;
f0104a67:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a6a:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
				return;
f0104a71:	eb 14                	jmp    f0104a87 <sched_remove_ready+0x10e>

void sched_remove_ready(struct Env* env)
{
	if(env != NULL)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104a73:	ff 45 f4             	incl   -0xc(%ebp)
f0104a76:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0104a7b:	0f b6 c0             	movzbl %al,%eax
f0104a7e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0104a81:	0f 8f 0e ff ff ff    	jg     f0104995 <sched_remove_ready+0x1c>
				env->env_status = ENV_UNKNOWN;
				return;
			}
		}
	}
}
f0104a87:	c9                   	leave  
f0104a88:	c3                   	ret    

f0104a89 <sched_insert_new>:

void sched_insert_new(struct Env* env)
{
f0104a89:	55                   	push   %ebp
f0104a8a:	89 e5                	mov    %esp,%ebp
f0104a8c:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104a8f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104a93:	74 1d                	je     f0104ab2 <sched_insert_new+0x29>
	{
		env->env_status = ENV_NEW ;
f0104a95:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a98:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		enqueue(&env_new_queue, env);
f0104a9f:	83 ec 08             	sub    $0x8,%esp
f0104aa2:	ff 75 08             	pushl  0x8(%ebp)
f0104aa5:	68 3c 5d 87 f0       	push   $0xf0875d3c
f0104aaa:	e8 ee f9 ff ff       	call   f010449d <enqueue>
f0104aaf:	83 c4 10             	add    $0x10,%esp
	}
}
f0104ab2:	90                   	nop
f0104ab3:	c9                   	leave  
f0104ab4:	c3                   	ret    

f0104ab5 <sched_remove_new>:
void sched_remove_new(struct Env* env)
{
f0104ab5:	55                   	push   %ebp
f0104ab6:	89 e5                	mov    %esp,%ebp
f0104ab8:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104abb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104abf:	0f 84 92 00 00 00    	je     f0104b57 <sched_remove_new+0xa2>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f0104ac5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104ac9:	75 17                	jne    f0104ae2 <sched_remove_new+0x2d>
f0104acb:	83 ec 04             	sub    $0x4,%esp
f0104ace:	68 ff 57 13 f0       	push   $0xf01357ff
f0104ad3:	68 1f 01 00 00       	push   $0x11f
f0104ad8:	68 cb 57 13 f0       	push   $0xf01357cb
f0104add:	e8 23 b7 ff ff       	call   f0100205 <_panic>
f0104ae2:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ae5:	8b 40 44             	mov    0x44(%eax),%eax
f0104ae8:	85 c0                	test   %eax,%eax
f0104aea:	74 11                	je     f0104afd <sched_remove_new+0x48>
f0104aec:	8b 45 08             	mov    0x8(%ebp),%eax
f0104aef:	8b 40 44             	mov    0x44(%eax),%eax
f0104af2:	8b 55 08             	mov    0x8(%ebp),%edx
f0104af5:	8b 52 48             	mov    0x48(%edx),%edx
f0104af8:	89 50 48             	mov    %edx,0x48(%eax)
f0104afb:	eb 0b                	jmp    f0104b08 <sched_remove_new+0x53>
f0104afd:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b00:	8b 40 48             	mov    0x48(%eax),%eax
f0104b03:	a3 40 5d 87 f0       	mov    %eax,0xf0875d40
f0104b08:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b0b:	8b 40 48             	mov    0x48(%eax),%eax
f0104b0e:	85 c0                	test   %eax,%eax
f0104b10:	74 11                	je     f0104b23 <sched_remove_new+0x6e>
f0104b12:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b15:	8b 40 48             	mov    0x48(%eax),%eax
f0104b18:	8b 55 08             	mov    0x8(%ebp),%edx
f0104b1b:	8b 52 44             	mov    0x44(%edx),%edx
f0104b1e:	89 50 44             	mov    %edx,0x44(%eax)
f0104b21:	eb 0b                	jmp    f0104b2e <sched_remove_new+0x79>
f0104b23:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b26:	8b 40 44             	mov    0x44(%eax),%eax
f0104b29:	a3 3c 5d 87 f0       	mov    %eax,0xf0875d3c
f0104b2e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b31:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104b38:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b3b:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104b42:	a1 48 5d 87 f0       	mov    0xf0875d48,%eax
f0104b47:	48                   	dec    %eax
f0104b48:	a3 48 5d 87 f0       	mov    %eax,0xf0875d48
		env->env_status = ENV_UNKNOWN;
f0104b4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b50:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104b57:	90                   	nop
f0104b58:	c9                   	leave  
f0104b59:	c3                   	ret    

f0104b5a <sched_insert_exit>:

void sched_insert_exit(struct Env* env)
{
f0104b5a:	55                   	push   %ebp
f0104b5b:	89 e5                	mov    %esp,%ebp
f0104b5d:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104b60:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104b64:	74 34                	je     f0104b9a <sched_insert_exit+0x40>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f0104b66:	e8 9b 92 00 00       	call   f010de06 <isBufferingEnabled>
f0104b6b:	84 c0                	test   %al,%al
f0104b6d:	74 0e                	je     f0104b7d <sched_insert_exit+0x23>
f0104b6f:	83 ec 0c             	sub    $0xc,%esp
f0104b72:	ff 75 08             	pushl  0x8(%ebp)
f0104b75:	e8 60 63 00 00       	call   f010aeda <cleanup_buffers>
f0104b7a:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f0104b7d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b80:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		enqueue(&env_exit_queue, env);
f0104b87:	83 ec 08             	sub    $0x8,%esp
f0104b8a:	ff 75 08             	pushl  0x8(%ebp)
f0104b8d:	68 f4 5c 87 f0       	push   $0xf0875cf4
f0104b92:	e8 06 f9 ff ff       	call   f010449d <enqueue>
f0104b97:	83 c4 10             	add    $0x10,%esp
	}
}
f0104b9a:	90                   	nop
f0104b9b:	c9                   	leave  
f0104b9c:	c3                   	ret    

f0104b9d <sched_remove_exit>:
void sched_remove_exit(struct Env* env)
{
f0104b9d:	55                   	push   %ebp
f0104b9e:	89 e5                	mov    %esp,%ebp
f0104ba0:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104ba3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104ba7:	0f 84 92 00 00 00    	je     f0104c3f <sched_remove_exit+0xa2>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f0104bad:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104bb1:	75 17                	jne    f0104bca <sched_remove_exit+0x2d>
f0104bb3:	83 ec 04             	sub    $0x4,%esp
f0104bb6:	68 ff 57 13 f0       	push   $0xf01357ff
f0104bbb:	68 31 01 00 00       	push   $0x131
f0104bc0:	68 cb 57 13 f0       	push   $0xf01357cb
f0104bc5:	e8 3b b6 ff ff       	call   f0100205 <_panic>
f0104bca:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bcd:	8b 40 44             	mov    0x44(%eax),%eax
f0104bd0:	85 c0                	test   %eax,%eax
f0104bd2:	74 11                	je     f0104be5 <sched_remove_exit+0x48>
f0104bd4:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bd7:	8b 40 44             	mov    0x44(%eax),%eax
f0104bda:	8b 55 08             	mov    0x8(%ebp),%edx
f0104bdd:	8b 52 48             	mov    0x48(%edx),%edx
f0104be0:	89 50 48             	mov    %edx,0x48(%eax)
f0104be3:	eb 0b                	jmp    f0104bf0 <sched_remove_exit+0x53>
f0104be5:	8b 45 08             	mov    0x8(%ebp),%eax
f0104be8:	8b 40 48             	mov    0x48(%eax),%eax
f0104beb:	a3 f8 5c 87 f0       	mov    %eax,0xf0875cf8
f0104bf0:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bf3:	8b 40 48             	mov    0x48(%eax),%eax
f0104bf6:	85 c0                	test   %eax,%eax
f0104bf8:	74 11                	je     f0104c0b <sched_remove_exit+0x6e>
f0104bfa:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bfd:	8b 40 48             	mov    0x48(%eax),%eax
f0104c00:	8b 55 08             	mov    0x8(%ebp),%edx
f0104c03:	8b 52 44             	mov    0x44(%edx),%edx
f0104c06:	89 50 44             	mov    %edx,0x44(%eax)
f0104c09:	eb 0b                	jmp    f0104c16 <sched_remove_exit+0x79>
f0104c0b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c0e:	8b 40 44             	mov    0x44(%eax),%eax
f0104c11:	a3 f4 5c 87 f0       	mov    %eax,0xf0875cf4
f0104c16:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c19:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104c20:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c23:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104c2a:	a1 00 5d 87 f0       	mov    0xf0875d00,%eax
f0104c2f:	48                   	dec    %eax
f0104c30:	a3 00 5d 87 f0       	mov    %eax,0xf0875d00
		env->env_status = ENV_UNKNOWN;
f0104c35:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c38:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104c3f:	90                   	nop
f0104c40:	c9                   	leave  
f0104c41:	c3                   	ret    

f0104c42 <sched_print_all>:

void sched_print_all()
{
f0104c42:	55                   	push   %ebp
f0104c43:	89 e5                	mov    %esp,%ebp
f0104c45:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104c48:	a1 3c 5d 87 f0       	mov    0xf0875d3c,%eax
f0104c4d:	85 c0                	test   %eax,%eax
f0104c4f:	74 6c                	je     f0104cbd <sched_print_all+0x7b>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f0104c51:	83 ec 0c             	sub    $0xc,%esp
f0104c54:	68 84 58 13 f0       	push   $0xf0135884
f0104c59:	e8 b0 c0 ff ff       	call   f0100d0e <cprintf>
f0104c5e:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104c61:	a1 3c 5d 87 f0       	mov    0xf0875d3c,%eax
f0104c66:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c69:	eb 29                	jmp    f0104c94 <sched_print_all+0x52>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104c6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c6e:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104c74:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c77:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104c7a:	83 ec 04             	sub    $0x4,%esp
f0104c7d:	52                   	push   %edx
f0104c7e:	50                   	push   %eax
f0104c7f:	68 a6 58 13 f0       	push   $0xf01358a6
f0104c84:	e8 85 c0 ff ff       	call   f0100d0e <cprintf>
f0104c89:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104c8c:	a1 44 5d 87 f0       	mov    0xf0875d44,%eax
f0104c91:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104c98:	74 08                	je     f0104ca2 <sched_print_all+0x60>
f0104c9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c9d:	8b 40 44             	mov    0x44(%eax),%eax
f0104ca0:	eb 05                	jmp    f0104ca7 <sched_print_all+0x65>
f0104ca2:	b8 00 00 00 00       	mov    $0x0,%eax
f0104ca7:	a3 44 5d 87 f0       	mov    %eax,0xf0875d44
f0104cac:	a1 44 5d 87 f0       	mov    0xf0875d44,%eax
f0104cb1:	85 c0                	test   %eax,%eax
f0104cb3:	75 b6                	jne    f0104c6b <sched_print_all+0x29>
f0104cb5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104cb9:	75 b0                	jne    f0104c6b <sched_print_all+0x29>
f0104cbb:	eb 10                	jmp    f0104ccd <sched_print_all+0x8b>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f0104cbd:	83 ec 0c             	sub    $0xc,%esp
f0104cc0:	68 b0 58 13 f0       	push   $0xf01358b0
f0104cc5:	e8 44 c0 ff ff       	call   f0100d0e <cprintf>
f0104cca:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104ccd:	83 ec 0c             	sub    $0xc,%esp
f0104cd0:	68 cc 58 13 f0       	push   $0xf01358cc
f0104cd5:	e8 34 c0 ff ff       	call   f0100d0e <cprintf>
f0104cda:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104cdd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104ce4:	e9 ca 00 00 00       	jmp    f0104db3 <sched_print_all+0x171>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104ce9:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f0104cee:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104cf1:	c1 e2 04             	shl    $0x4,%edx
f0104cf4:	01 d0                	add    %edx,%eax
f0104cf6:	8b 00                	mov    (%eax),%eax
f0104cf8:	85 c0                	test   %eax,%eax
f0104cfa:	0f 84 8d 00 00 00    	je     f0104d8d <sched_print_all+0x14b>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f0104d00:	83 ec 08             	sub    $0x8,%esp
f0104d03:	ff 75 f0             	pushl  -0x10(%ebp)
f0104d06:	68 00 59 13 f0       	push   $0xf0135900
f0104d0b:	e8 fe bf ff ff       	call   f0100d0e <cprintf>
f0104d10:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104d13:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f0104d18:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104d1b:	c1 e2 04             	shl    $0x4,%edx
f0104d1e:	01 d0                	add    %edx,%eax
f0104d20:	8b 00                	mov    (%eax),%eax
f0104d22:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d25:	eb 34                	jmp    f0104d5b <sched_print_all+0x119>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104d27:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d2a:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104d30:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d33:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104d36:	83 ec 04             	sub    $0x4,%esp
f0104d39:	52                   	push   %edx
f0104d3a:	50                   	push   %eax
f0104d3b:	68 a6 58 13 f0       	push   $0xf01358a6
f0104d40:	e8 c9 bf ff ff       	call   f0100d0e <cprintf>
f0104d45:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104d48:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f0104d4d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104d50:	c1 e2 04             	shl    $0x4,%edx
f0104d53:	01 d0                	add    %edx,%eax
f0104d55:	8b 40 08             	mov    0x8(%eax),%eax
f0104d58:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d5b:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f0104d60:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104d63:	c1 e2 04             	shl    $0x4,%edx
f0104d66:	01 d0                	add    %edx,%eax
f0104d68:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d6c:	74 08                	je     f0104d76 <sched_print_all+0x134>
f0104d6e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104d71:	8b 52 44             	mov    0x44(%edx),%edx
f0104d74:	eb 05                	jmp    f0104d7b <sched_print_all+0x139>
f0104d76:	ba 00 00 00 00       	mov    $0x0,%edx
f0104d7b:	89 50 08             	mov    %edx,0x8(%eax)
f0104d7e:	8b 40 08             	mov    0x8(%eax),%eax
f0104d81:	85 c0                	test   %eax,%eax
f0104d83:	75 a2                	jne    f0104d27 <sched_print_all+0xe5>
f0104d85:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d89:	75 9c                	jne    f0104d27 <sched_print_all+0xe5>
f0104d8b:	eb 13                	jmp    f0104da0 <sched_print_all+0x15e>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f0104d8d:	83 ec 08             	sub    $0x8,%esp
f0104d90:	ff 75 f0             	pushl  -0x10(%ebp)
f0104d93:	68 28 59 13 f0       	push   $0xf0135928
f0104d98:	e8 71 bf ff ff       	call   f0100d0e <cprintf>
f0104d9d:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0104da0:	83 ec 0c             	sub    $0xc,%esp
f0104da3:	68 cc 58 13 f0       	push   $0xf01358cc
f0104da8:	e8 61 bf ff ff       	call   f0100d0e <cprintf>
f0104dad:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104db0:	ff 45 f0             	incl   -0x10(%ebp)
f0104db3:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0104db8:	0f b6 c0             	movzbl %al,%eax
f0104dbb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0104dbe:	0f 8f 25 ff ff ff    	jg     f0104ce9 <sched_print_all+0xa7>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f0104dc4:	a1 f4 5c 87 f0       	mov    0xf0875cf4,%eax
f0104dc9:	85 c0                	test   %eax,%eax
f0104dcb:	74 6c                	je     f0104e39 <sched_print_all+0x1f7>
	{
		cprintf("The processes in EXIT queue are:\n");
f0104dcd:	83 ec 0c             	sub    $0xc,%esp
f0104dd0:	68 4c 59 13 f0       	push   $0xf013594c
f0104dd5:	e8 34 bf ff ff       	call   f0100d0e <cprintf>
f0104dda:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104ddd:	a1 f4 5c 87 f0       	mov    0xf0875cf4,%eax
f0104de2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104de5:	eb 29                	jmp    f0104e10 <sched_print_all+0x1ce>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104de7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104dea:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104df0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104df3:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104df6:	83 ec 04             	sub    $0x4,%esp
f0104df9:	52                   	push   %edx
f0104dfa:	50                   	push   %eax
f0104dfb:	68 a6 58 13 f0       	push   $0xf01358a6
f0104e00:	e8 09 bf ff ff       	call   f0100d0e <cprintf>
f0104e05:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104e08:	a1 fc 5c 87 f0       	mov    0xf0875cfc,%eax
f0104e0d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e10:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e14:	74 08                	je     f0104e1e <sched_print_all+0x1dc>
f0104e16:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e19:	8b 40 44             	mov    0x44(%eax),%eax
f0104e1c:	eb 05                	jmp    f0104e23 <sched_print_all+0x1e1>
f0104e1e:	b8 00 00 00 00       	mov    $0x0,%eax
f0104e23:	a3 fc 5c 87 f0       	mov    %eax,0xf0875cfc
f0104e28:	a1 fc 5c 87 f0       	mov    0xf0875cfc,%eax
f0104e2d:	85 c0                	test   %eax,%eax
f0104e2f:	75 b6                	jne    f0104de7 <sched_print_all+0x1a5>
f0104e31:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e35:	75 b0                	jne    f0104de7 <sched_print_all+0x1a5>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f0104e37:	eb 10                	jmp    f0104e49 <sched_print_all+0x207>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0104e39:	83 ec 0c             	sub    $0xc,%esp
f0104e3c:	68 6e 59 13 f0       	push   $0xf013596e
f0104e41:	e8 c8 be ff ff       	call   f0100d0e <cprintf>
f0104e46:	83 c4 10             	add    $0x10,%esp
	}
}
f0104e49:	90                   	nop
f0104e4a:	c9                   	leave  
f0104e4b:	c3                   	ret    

f0104e4c <sched_run_all>:

void sched_run_all()
{
f0104e4c:	55                   	push   %ebp
f0104e4d:	89 e5                	mov    %esp,%ebp
f0104e4f:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0104e52:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104e59:	a1 3c 5d 87 f0       	mov    0xf0875d3c,%eax
f0104e5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e61:	eb 24                	jmp    f0104e87 <sched_run_all+0x3b>
	{
		sched_remove_new(ptr_env);
f0104e63:	83 ec 0c             	sub    $0xc,%esp
f0104e66:	ff 75 f4             	pushl  -0xc(%ebp)
f0104e69:	e8 47 fc ff ff       	call   f0104ab5 <sched_remove_new>
f0104e6e:	83 c4 10             	add    $0x10,%esp
		sched_insert_ready(ptr_env);
f0104e71:	83 ec 0c             	sub    $0xc,%esp
f0104e74:	ff 75 f4             	pushl  -0xc(%ebp)
f0104e77:	e8 d0 fa ff ff       	call   f010494c <sched_insert_ready>
f0104e7c:	83 c4 10             	add    $0x10,%esp
}

void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104e7f:	a1 44 5d 87 f0       	mov    0xf0875d44,%eax
f0104e84:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e87:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e8b:	74 08                	je     f0104e95 <sched_run_all+0x49>
f0104e8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e90:	8b 40 44             	mov    0x44(%eax),%eax
f0104e93:	eb 05                	jmp    f0104e9a <sched_run_all+0x4e>
f0104e95:	b8 00 00 00 00       	mov    $0x0,%eax
f0104e9a:	a3 44 5d 87 f0       	mov    %eax,0xf0875d44
f0104e9f:	a1 44 5d 87 f0       	mov    0xf0875d44,%eax
f0104ea4:	85 c0                	test   %eax,%eax
f0104ea6:	75 bb                	jne    f0104e63 <sched_run_all+0x17>
f0104ea8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104eac:	75 b5                	jne    f0104e63 <sched_run_all+0x17>
	{
		sched_remove_new(ptr_env);
		sched_insert_ready(ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f0104eae:	a1 58 5d 87 f0       	mov    0xf0875d58,%eax
f0104eb3:	85 c0                	test   %eax,%eax
f0104eb5:	75 05                	jne    f0104ebc <sched_run_all+0x70>
		fos_scheduler();
f0104eb7:	e8 6a f8 ff ff       	call   f0104726 <fos_scheduler>
}
f0104ebc:	90                   	nop
f0104ebd:	c9                   	leave  
f0104ebe:	c3                   	ret    

f0104ebf <sched_kill_all>:

void sched_kill_all()
{
f0104ebf:	55                   	push   %ebp
f0104ec0:	89 e5                	mov    %esp,%ebp
f0104ec2:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104ec5:	a1 3c 5d 87 f0       	mov    0xf0875d3c,%eax
f0104eca:	85 c0                	test   %eax,%eax
f0104ecc:	0f 84 98 00 00 00    	je     f0104f6a <sched_kill_all+0xab>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f0104ed2:	83 ec 0c             	sub    $0xc,%esp
f0104ed5:	68 8c 59 13 f0       	push   $0xf013598c
f0104eda:	e8 2f be ff ff       	call   f0100d0e <cprintf>
f0104edf:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104ee2:	a1 3c 5d 87 f0       	mov    0xf0875d3c,%eax
f0104ee7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104eea:	eb 55                	jmp    f0104f41 <sched_kill_all+0x82>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104eec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104eef:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104ef5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ef8:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104efb:	83 ec 04             	sub    $0x4,%esp
f0104efe:	52                   	push   %edx
f0104eff:	50                   	push   %eax
f0104f00:	68 b8 59 13 f0       	push   $0xf01359b8
f0104f05:	e8 04 be ff ff       	call   f0100d0e <cprintf>
f0104f0a:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0104f0d:	83 ec 0c             	sub    $0xc,%esp
f0104f10:	ff 75 f4             	pushl  -0xc(%ebp)
f0104f13:	e8 9d fb ff ff       	call   f0104ab5 <sched_remove_new>
f0104f18:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0104f1b:	83 ec 0c             	sub    $0xc,%esp
f0104f1e:	ff 75 f4             	pushl  -0xc(%ebp)
f0104f21:	e8 9a 4b 00 00       	call   f0109ac0 <env_free>
f0104f26:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0104f29:	83 ec 0c             	sub    $0xc,%esp
f0104f2c:	68 cb 59 13 f0       	push   $0xf01359cb
f0104f31:	e8 d8 bd ff ff       	call   f0100d0e <cprintf>
f0104f36:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104f39:	a1 44 5d 87 f0       	mov    0xf0875d44,%eax
f0104f3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104f41:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f45:	74 08                	je     f0104f4f <sched_kill_all+0x90>
f0104f47:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f4a:	8b 40 44             	mov    0x44(%eax),%eax
f0104f4d:	eb 05                	jmp    f0104f54 <sched_kill_all+0x95>
f0104f4f:	b8 00 00 00 00       	mov    $0x0,%eax
f0104f54:	a3 44 5d 87 f0       	mov    %eax,0xf0875d44
f0104f59:	a1 44 5d 87 f0       	mov    0xf0875d44,%eax
f0104f5e:	85 c0                	test   %eax,%eax
f0104f60:	75 8a                	jne    f0104eec <sched_kill_all+0x2d>
f0104f62:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f66:	75 84                	jne    f0104eec <sched_kill_all+0x2d>
f0104f68:	eb 10                	jmp    f0104f7a <sched_kill_all+0xbb>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f0104f6a:	83 ec 0c             	sub    $0xc,%esp
f0104f6d:	68 d1 59 13 f0       	push   $0xf01359d1
f0104f72:	e8 97 bd ff ff       	call   f0100d0e <cprintf>
f0104f77:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104f7a:	83 ec 0c             	sub    $0xc,%esp
f0104f7d:	68 cc 58 13 f0       	push   $0xf01358cc
f0104f82:	e8 87 bd ff ff       	call   f0100d0e <cprintf>
f0104f87:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104f8a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104f91:	e9 99 01 00 00       	jmp    f010512f <sched_kill_all+0x270>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104f96:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f0104f9b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104f9e:	c1 e2 04             	shl    $0x4,%edx
f0104fa1:	01 d0                	add    %edx,%eax
f0104fa3:	8b 00                	mov    (%eax),%eax
f0104fa5:	85 c0                	test   %eax,%eax
f0104fa7:	0f 84 5c 01 00 00    	je     f0105109 <sched_kill_all+0x24a>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f0104fad:	83 ec 08             	sub    $0x8,%esp
f0104fb0:	ff 75 f0             	pushl  -0x10(%ebp)
f0104fb3:	68 ec 59 13 f0       	push   $0xf01359ec
f0104fb8:	e8 51 bd ff ff       	call   f0100d0e <cprintf>
f0104fbd:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104fc0:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f0104fc5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104fc8:	c1 e2 04             	shl    $0x4,%edx
f0104fcb:	01 d0                	add    %edx,%eax
f0104fcd:	8b 00                	mov    (%eax),%eax
f0104fcf:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104fd2:	e9 f8 00 00 00       	jmp    f01050cf <sched_kill_all+0x210>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104fd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fda:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104fe0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fe3:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104fe6:	83 ec 04             	sub    $0x4,%esp
f0104fe9:	52                   	push   %edx
f0104fea:	50                   	push   %eax
f0104feb:	68 b8 59 13 f0       	push   $0xf01359b8
f0104ff0:	e8 19 bd ff ff       	call   f0100d0e <cprintf>
f0104ff5:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0104ff8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104ffc:	75 17                	jne    f0105015 <sched_kill_all+0x156>
f0104ffe:	83 ec 04             	sub    $0x4,%esp
f0105001:	68 ff 57 13 f0       	push   $0xf01357ff
f0105006:	68 8c 01 00 00       	push   $0x18c
f010500b:	68 cb 57 13 f0       	push   $0xf01357cb
f0105010:	e8 f0 b1 ff ff       	call   f0100205 <_panic>
f0105015:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105018:	8b 40 44             	mov    0x44(%eax),%eax
f010501b:	85 c0                	test   %eax,%eax
f010501d:	74 11                	je     f0105030 <sched_kill_all+0x171>
f010501f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105022:	8b 40 44             	mov    0x44(%eax),%eax
f0105025:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105028:	8b 52 48             	mov    0x48(%edx),%edx
f010502b:	89 50 48             	mov    %edx,0x48(%eax)
f010502e:	eb 16                	jmp    f0105046 <sched_kill_all+0x187>
f0105030:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f0105035:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105038:	c1 e2 04             	shl    $0x4,%edx
f010503b:	01 c2                	add    %eax,%edx
f010503d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105040:	8b 40 48             	mov    0x48(%eax),%eax
f0105043:	89 42 04             	mov    %eax,0x4(%edx)
f0105046:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105049:	8b 40 48             	mov    0x48(%eax),%eax
f010504c:	85 c0                	test   %eax,%eax
f010504e:	74 11                	je     f0105061 <sched_kill_all+0x1a2>
f0105050:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105053:	8b 40 48             	mov    0x48(%eax),%eax
f0105056:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105059:	8b 52 44             	mov    0x44(%edx),%edx
f010505c:	89 50 44             	mov    %edx,0x44(%eax)
f010505f:	eb 15                	jmp    f0105076 <sched_kill_all+0x1b7>
f0105061:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f0105066:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105069:	c1 e2 04             	shl    $0x4,%edx
f010506c:	01 c2                	add    %eax,%edx
f010506e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105071:	8b 40 44             	mov    0x44(%eax),%eax
f0105074:	89 02                	mov    %eax,(%edx)
f0105076:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105079:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105080:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105083:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010508a:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f010508f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105092:	c1 e2 04             	shl    $0x4,%edx
f0105095:	01 d0                	add    %edx,%eax
f0105097:	8b 50 0c             	mov    0xc(%eax),%edx
f010509a:	4a                   	dec    %edx
f010509b:	89 50 0c             	mov    %edx,0xc(%eax)
				env_free(ptr_env);
f010509e:	83 ec 0c             	sub    $0xc,%esp
f01050a1:	ff 75 f4             	pushl  -0xc(%ebp)
f01050a4:	e8 17 4a 00 00       	call   f0109ac0 <env_free>
f01050a9:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01050ac:	83 ec 0c             	sub    $0xc,%esp
f01050af:	68 cb 59 13 f0       	push   $0xf01359cb
f01050b4:	e8 55 bc ff ff       	call   f0100d0e <cprintf>
f01050b9:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01050bc:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f01050c1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01050c4:	c1 e2 04             	shl    $0x4,%edx
f01050c7:	01 d0                	add    %edx,%eax
f01050c9:	8b 40 08             	mov    0x8(%eax),%eax
f01050cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01050cf:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f01050d4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01050d7:	c1 e2 04             	shl    $0x4,%edx
f01050da:	01 d0                	add    %edx,%eax
f01050dc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01050e0:	74 08                	je     f01050ea <sched_kill_all+0x22b>
f01050e2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01050e5:	8b 52 44             	mov    0x44(%edx),%edx
f01050e8:	eb 05                	jmp    f01050ef <sched_kill_all+0x230>
f01050ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01050ef:	89 50 08             	mov    %edx,0x8(%eax)
f01050f2:	8b 40 08             	mov    0x8(%eax),%eax
f01050f5:	85 c0                	test   %eax,%eax
f01050f7:	0f 85 da fe ff ff    	jne    f0104fd7 <sched_kill_all+0x118>
f01050fd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105101:	0f 85 d0 fe ff ff    	jne    f0104fd7 <sched_kill_all+0x118>
f0105107:	eb 13                	jmp    f010511c <sched_kill_all+0x25d>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f0105109:	83 ec 08             	sub    $0x8,%esp
f010510c:	ff 75 f0             	pushl  -0x10(%ebp)
f010510f:	68 28 59 13 f0       	push   $0xf0135928
f0105114:	e8 f5 bb ff ff       	call   f0100d0e <cprintf>
f0105119:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f010511c:	83 ec 0c             	sub    $0xc,%esp
f010511f:	68 cc 58 13 f0       	push   $0xf01358cc
f0105124:	e8 e5 bb ff ff       	call   f0100d0e <cprintf>
f0105129:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f010512c:	ff 45 f0             	incl   -0x10(%ebp)
f010512f:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0105134:	0f b6 c0             	movzbl %al,%eax
f0105137:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010513a:	0f 8f 56 fe ff ff    	jg     f0104f96 <sched_kill_all+0xd7>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f0105140:	a1 f4 5c 87 f0       	mov    0xf0875cf4,%eax
f0105145:	85 c0                	test   %eax,%eax
f0105147:	0f 84 98 00 00 00    	je     f01051e5 <sched_kill_all+0x326>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f010514d:	83 ec 0c             	sub    $0xc,%esp
f0105150:	68 20 5a 13 f0       	push   $0xf0135a20
f0105155:	e8 b4 bb ff ff       	call   f0100d0e <cprintf>
f010515a:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f010515d:	a1 f4 5c 87 f0       	mov    0xf0875cf4,%eax
f0105162:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105165:	eb 55                	jmp    f01051bc <sched_kill_all+0x2fd>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105167:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010516a:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0105170:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105173:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105176:	83 ec 04             	sub    $0x4,%esp
f0105179:	52                   	push   %edx
f010517a:	50                   	push   %eax
f010517b:	68 b8 59 13 f0       	push   $0xf01359b8
f0105180:	e8 89 bb ff ff       	call   f0100d0e <cprintf>
f0105185:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f0105188:	83 ec 0c             	sub    $0xc,%esp
f010518b:	ff 75 f4             	pushl  -0xc(%ebp)
f010518e:	e8 0a fa ff ff       	call   f0104b9d <sched_remove_exit>
f0105193:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105196:	83 ec 0c             	sub    $0xc,%esp
f0105199:	ff 75 f4             	pushl  -0xc(%ebp)
f010519c:	e8 1f 49 00 00       	call   f0109ac0 <env_free>
f01051a1:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01051a4:	83 ec 0c             	sub    $0xc,%esp
f01051a7:	68 cb 59 13 f0       	push   $0xf01359cb
f01051ac:	e8 5d bb ff ff       	call   f0100d0e <cprintf>
f01051b1:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01051b4:	a1 fc 5c 87 f0       	mov    0xf0875cfc,%eax
f01051b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01051bc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051c0:	74 08                	je     f01051ca <sched_kill_all+0x30b>
f01051c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01051c5:	8b 40 44             	mov    0x44(%eax),%eax
f01051c8:	eb 05                	jmp    f01051cf <sched_kill_all+0x310>
f01051ca:	b8 00 00 00 00       	mov    $0x0,%eax
f01051cf:	a3 fc 5c 87 f0       	mov    %eax,0xf0875cfc
f01051d4:	a1 fc 5c 87 f0       	mov    0xf0875cfc,%eax
f01051d9:	85 c0                	test   %eax,%eax
f01051db:	75 8a                	jne    f0105167 <sched_kill_all+0x2a8>
f01051dd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051e1:	75 84                	jne    f0105167 <sched_kill_all+0x2a8>
f01051e3:	eb 10                	jmp    f01051f5 <sched_kill_all+0x336>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f01051e5:	83 ec 0c             	sub    $0xc,%esp
f01051e8:	68 6e 59 13 f0       	push   $0xf013596e
f01051ed:	e8 1c bb ff ff       	call   f0100d0e <cprintf>
f01051f2:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f01051f5:	c7 05 f4 53 87 f0 00 	movl   $0x0,0xf08753f4
f01051fc:	00 00 00 
	fos_scheduler();
f01051ff:	e8 22 f5 ff ff       	call   f0104726 <fos_scheduler>

f0105204 <sched_new_env>:
}


void sched_new_env(struct Env* e)
{
f0105204:	55                   	push   %ebp
f0105205:	89 e5                	mov    %esp,%ebp
f0105207:	83 ec 08             	sub    $0x8,%esp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f010520a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010520e:	74 0e                	je     f010521e <sched_new_env+0x1a>
	{
		sched_insert_new(e);
f0105210:	83 ec 0c             	sub    $0xc,%esp
f0105213:	ff 75 08             	pushl  0x8(%ebp)
f0105216:	e8 6e f8 ff ff       	call   f0104a89 <sched_insert_new>
f010521b:	83 c4 10             	add    $0x10,%esp
	}
}
f010521e:	90                   	nop
f010521f:	c9                   	leave  
f0105220:	c3                   	ret    

f0105221 <sched_run_env>:
	sched_insert_new(e);
}
 */

void sched_run_env(uint32 envId)
{
f0105221:	55                   	push   %ebp
f0105222:	89 e5                	mov    %esp,%ebp
f0105224:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105227:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f010522e:	a1 3c 5d 87 f0       	mov    0xf0875d3c,%eax
f0105233:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105236:	eb 3d                	jmp    f0105275 <sched_run_env+0x54>
	{
		if(ptr_env->env_id == envId)
f0105238:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010523b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010523e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105241:	75 2a                	jne    f010526d <sched_run_env+0x4c>
		{
			sched_remove_new(ptr_env);
f0105243:	83 ec 0c             	sub    $0xc,%esp
f0105246:	ff 75 f4             	pushl  -0xc(%ebp)
f0105249:	e8 67 f8 ff ff       	call   f0104ab5 <sched_remove_new>
f010524e:	83 c4 10             	add    $0x10,%esp
			sched_insert_ready(ptr_env);
f0105251:	83 ec 0c             	sub    $0xc,%esp
f0105254:	ff 75 f4             	pushl  -0xc(%ebp)
f0105257:	e8 f0 f6 ff ff       	call   f010494c <sched_insert_ready>
f010525c:	83 c4 10             	add    $0x10,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f010525f:	a1 58 5d 87 f0       	mov    0xf0875d58,%eax
f0105264:	85 c0                	test   %eax,%eax
f0105266:	75 36                	jne    f010529e <sched_run_env+0x7d>
			{
				fos_scheduler();
f0105268:	e8 b9 f4 ff ff       	call   f0104726 <fos_scheduler>
 */

void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f010526d:	a1 44 5d 87 f0       	mov    0xf0875d44,%eax
f0105272:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105275:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105279:	74 08                	je     f0105283 <sched_run_env+0x62>
f010527b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010527e:	8b 40 44             	mov    0x44(%eax),%eax
f0105281:	eb 05                	jmp    f0105288 <sched_run_env+0x67>
f0105283:	b8 00 00 00 00       	mov    $0x0,%eax
f0105288:	a3 44 5d 87 f0       	mov    %eax,0xf0875d44
f010528d:	a1 44 5d 87 f0       	mov    0xf0875d44,%eax
f0105292:	85 c0                	test   %eax,%eax
f0105294:	75 a2                	jne    f0105238 <sched_run_env+0x17>
f0105296:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010529a:	75 9c                	jne    f0105238 <sched_run_env+0x17>
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f010529c:	eb 01                	jmp    f010529f <sched_run_env+0x7e>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f010529e:	90                   	nop
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f010529f:	90                   	nop
f01052a0:	c9                   	leave  
f01052a1:	c3                   	ret    

f01052a2 <sched_exit_env>:

void sched_exit_env(uint32 envId)
{
f01052a2:	55                   	push   %ebp
f01052a3:	89 e5                	mov    %esp,%ebp
f01052a5:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01052a8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f01052af:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f01052b6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01052ba:	75 59                	jne    f0105315 <sched_exit_env+0x73>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01052bc:	a1 3c 5d 87 f0       	mov    0xf0875d3c,%eax
f01052c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01052c4:	eb 28                	jmp    f01052ee <sched_exit_env+0x4c>
				{
			if(ptr_env->env_id == envId)
f01052c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052c9:	8b 40 4c             	mov    0x4c(%eax),%eax
f01052cc:	3b 45 08             	cmp    0x8(%ebp),%eax
f01052cf:	75 15                	jne    f01052e6 <sched_exit_env+0x44>
			{
				sched_remove_new(ptr_env);
f01052d1:	83 ec 0c             	sub    $0xc,%esp
f01052d4:	ff 75 f4             	pushl  -0xc(%ebp)
f01052d7:	e8 d9 f7 ff ff       	call   f0104ab5 <sched_remove_new>
f01052dc:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01052df:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01052e6:	a1 44 5d 87 f0       	mov    0xf0875d44,%eax
f01052eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01052ee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01052f2:	74 08                	je     f01052fc <sched_exit_env+0x5a>
f01052f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052f7:	8b 40 44             	mov    0x44(%eax),%eax
f01052fa:	eb 05                	jmp    f0105301 <sched_exit_env+0x5f>
f01052fc:	b8 00 00 00 00       	mov    $0x0,%eax
f0105301:	a3 44 5d 87 f0       	mov    %eax,0xf0875d44
f0105306:	a1 44 5d 87 f0       	mov    0xf0875d44,%eax
f010530b:	85 c0                	test   %eax,%eax
f010530d:	75 b7                	jne    f01052c6 <sched_exit_env+0x24>
f010530f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105313:	75 b1                	jne    f01052c6 <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
				}
	}
	if (!found)
f0105315:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105319:	0f 85 67 01 00 00    	jne    f0105486 <sched_exit_env+0x1e4>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010531f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0105326:	e9 47 01 00 00       	jmp    f0105472 <sched_exit_env+0x1d0>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f010532b:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f0105330:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105333:	c1 e2 04             	shl    $0x4,%edx
f0105336:	01 d0                	add    %edx,%eax
f0105338:	8b 00                	mov    (%eax),%eax
f010533a:	85 c0                	test   %eax,%eax
f010533c:	0f 84 27 01 00 00    	je     f0105469 <sched_exit_env+0x1c7>
			{
				ptr_env=NULL;
f0105342:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105349:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f010534e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105351:	c1 e2 04             	shl    $0x4,%edx
f0105354:	01 d0                	add    %edx,%eax
f0105356:	8b 00                	mov    (%eax),%eax
f0105358:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010535b:	e9 d1 00 00 00       	jmp    f0105431 <sched_exit_env+0x18f>
				{
					if(ptr_env->env_id == envId)
f0105360:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105363:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105366:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105369:	0f 85 af 00 00 00    	jne    f010541e <sched_exit_env+0x17c>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f010536f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105373:	75 17                	jne    f010538c <sched_exit_env+0xea>
f0105375:	83 ec 04             	sub    $0x4,%esp
f0105378:	68 ff 57 13 f0       	push   $0xf01357ff
f010537d:	68 f7 01 00 00       	push   $0x1f7
f0105382:	68 cb 57 13 f0       	push   $0xf01357cb
f0105387:	e8 79 ae ff ff       	call   f0100205 <_panic>
f010538c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010538f:	8b 40 44             	mov    0x44(%eax),%eax
f0105392:	85 c0                	test   %eax,%eax
f0105394:	74 11                	je     f01053a7 <sched_exit_env+0x105>
f0105396:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105399:	8b 40 44             	mov    0x44(%eax),%eax
f010539c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010539f:	8b 52 48             	mov    0x48(%edx),%edx
f01053a2:	89 50 48             	mov    %edx,0x48(%eax)
f01053a5:	eb 16                	jmp    f01053bd <sched_exit_env+0x11b>
f01053a7:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f01053ac:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01053af:	c1 e2 04             	shl    $0x4,%edx
f01053b2:	01 c2                	add    %eax,%edx
f01053b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053b7:	8b 40 48             	mov    0x48(%eax),%eax
f01053ba:	89 42 04             	mov    %eax,0x4(%edx)
f01053bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053c0:	8b 40 48             	mov    0x48(%eax),%eax
f01053c3:	85 c0                	test   %eax,%eax
f01053c5:	74 11                	je     f01053d8 <sched_exit_env+0x136>
f01053c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053ca:	8b 40 48             	mov    0x48(%eax),%eax
f01053cd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01053d0:	8b 52 44             	mov    0x44(%edx),%edx
f01053d3:	89 50 44             	mov    %edx,0x44(%eax)
f01053d6:	eb 15                	jmp    f01053ed <sched_exit_env+0x14b>
f01053d8:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f01053dd:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01053e0:	c1 e2 04             	shl    $0x4,%edx
f01053e3:	01 c2                	add    %eax,%edx
f01053e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053e8:	8b 40 44             	mov    0x44(%eax),%eax
f01053eb:	89 02                	mov    %eax,(%edx)
f01053ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053f0:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01053f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053fa:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105401:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f0105406:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105409:	c1 e2 04             	shl    $0x4,%edx
f010540c:	01 d0                	add    %edx,%eax
f010540e:	8b 50 0c             	mov    0xc(%eax),%edx
f0105411:	4a                   	dec    %edx
f0105412:	89 50 0c             	mov    %edx,0xc(%eax)
						found = 1;
f0105415:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f010541c:	eb 4b                	jmp    f0105469 <sched_exit_env+0x1c7>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010541e:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f0105423:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105426:	c1 e2 04             	shl    $0x4,%edx
f0105429:	01 d0                	add    %edx,%eax
f010542b:	8b 40 08             	mov    0x8(%eax),%eax
f010542e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105431:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f0105436:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105439:	c1 e2 04             	shl    $0x4,%edx
f010543c:	01 d0                	add    %edx,%eax
f010543e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105442:	74 08                	je     f010544c <sched_exit_env+0x1aa>
f0105444:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105447:	8b 52 44             	mov    0x44(%edx),%edx
f010544a:	eb 05                	jmp    f0105451 <sched_exit_env+0x1af>
f010544c:	ba 00 00 00 00       	mov    $0x0,%edx
f0105451:	89 50 08             	mov    %edx,0x8(%eax)
f0105454:	8b 40 08             	mov    0x8(%eax),%eax
f0105457:	85 c0                	test   %eax,%eax
f0105459:	0f 85 01 ff ff ff    	jne    f0105360 <sched_exit_env+0xbe>
f010545f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105463:	0f 85 f7 fe ff ff    	jne    f0105360 <sched_exit_env+0xbe>
						found = 1;
						break;
					}
				}
			}
			if (found)
f0105469:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010546d:	75 16                	jne    f0105485 <sched_exit_env+0x1e3>
			}
				}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010546f:	ff 45 ec             	incl   -0x14(%ebp)
f0105472:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0105477:	0f b6 c0             	movzbl %al,%eax
f010547a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010547d:	0f 8f a8 fe ff ff    	jg     f010532b <sched_exit_env+0x89>
f0105483:	eb 01                	jmp    f0105486 <sched_exit_env+0x1e4>
						break;
					}
				}
			}
			if (found)
				break;
f0105485:	90                   	nop
		}
	}
	if (!found)
f0105486:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010548a:	75 1c                	jne    f01054a8 <sched_exit_env+0x206>
	{
		if (curenv->env_id == envId)
f010548c:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f0105491:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105494:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105497:	75 0f                	jne    f01054a8 <sched_exit_env+0x206>
		{
			ptr_env = curenv;
f0105499:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f010549e:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f01054a1:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f01054a8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01054ac:	74 2a                	je     f01054d8 <sched_exit_env+0x236>
	{
		sched_insert_exit(ptr_env);
f01054ae:	83 ec 0c             	sub    $0xc,%esp
f01054b1:	ff 75 f4             	pushl  -0xc(%ebp)
f01054b4:	e8 a1 f6 ff ff       	call   f0104b5a <sched_insert_exit>
f01054b9:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f01054bc:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f01054c1:	8b 40 4c             	mov    0x4c(%eax),%eax
f01054c4:	3b 45 08             	cmp    0x8(%ebp),%eax
f01054c7:	75 0f                	jne    f01054d8 <sched_exit_env+0x236>
		{
			curenv = NULL;
f01054c9:	c7 05 f4 53 87 f0 00 	movl   $0x0,0xf08753f4
f01054d0:	00 00 00 
			fos_scheduler();
f01054d3:	e8 4e f2 ff ff       	call   f0104726 <fos_scheduler>
		}
	}
}
f01054d8:	90                   	nop
f01054d9:	c9                   	leave  
f01054da:	c3                   	ret    

f01054db <sched_exit_all_ready_envs>:

/*2018*/
void sched_exit_all_ready_envs()
{
f01054db:	55                   	push   %ebp
f01054dc:	89 e5                	mov    %esp,%ebp
f01054de:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01054e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01054e8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01054ef:	e9 37 01 00 00       	jmp    f010562b <sched_exit_all_ready_envs+0x150>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f01054f4:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f01054f9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01054fc:	c1 e2 04             	shl    $0x4,%edx
f01054ff:	01 d0                	add    %edx,%eax
f0105501:	8b 00                	mov    (%eax),%eax
f0105503:	85 c0                	test   %eax,%eax
f0105505:	0f 84 1d 01 00 00    	je     f0105628 <sched_exit_all_ready_envs+0x14d>
		{
			ptr_env=NULL;
f010550b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105512:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f0105517:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010551a:	c1 e2 04             	shl    $0x4,%edx
f010551d:	01 d0                	add    %edx,%eax
f010551f:	8b 00                	mov    (%eax),%eax
f0105521:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105524:	e9 c7 00 00 00       	jmp    f01055f0 <sched_exit_all_ready_envs+0x115>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105529:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010552d:	75 17                	jne    f0105546 <sched_exit_all_ready_envs+0x6b>
f010552f:	83 ec 04             	sub    $0x4,%esp
f0105532:	68 ff 57 13 f0       	push   $0xf01357ff
f0105537:	68 22 02 00 00       	push   $0x222
f010553c:	68 cb 57 13 f0       	push   $0xf01357cb
f0105541:	e8 bf ac ff ff       	call   f0100205 <_panic>
f0105546:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105549:	8b 40 44             	mov    0x44(%eax),%eax
f010554c:	85 c0                	test   %eax,%eax
f010554e:	74 11                	je     f0105561 <sched_exit_all_ready_envs+0x86>
f0105550:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105553:	8b 40 44             	mov    0x44(%eax),%eax
f0105556:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105559:	8b 52 48             	mov    0x48(%edx),%edx
f010555c:	89 50 48             	mov    %edx,0x48(%eax)
f010555f:	eb 16                	jmp    f0105577 <sched_exit_all_ready_envs+0x9c>
f0105561:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f0105566:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105569:	c1 e2 04             	shl    $0x4,%edx
f010556c:	01 c2                	add    %eax,%edx
f010556e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105571:	8b 40 48             	mov    0x48(%eax),%eax
f0105574:	89 42 04             	mov    %eax,0x4(%edx)
f0105577:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010557a:	8b 40 48             	mov    0x48(%eax),%eax
f010557d:	85 c0                	test   %eax,%eax
f010557f:	74 11                	je     f0105592 <sched_exit_all_ready_envs+0xb7>
f0105581:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105584:	8b 40 48             	mov    0x48(%eax),%eax
f0105587:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010558a:	8b 52 44             	mov    0x44(%edx),%edx
f010558d:	89 50 44             	mov    %edx,0x44(%eax)
f0105590:	eb 15                	jmp    f01055a7 <sched_exit_all_ready_envs+0xcc>
f0105592:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f0105597:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010559a:	c1 e2 04             	shl    $0x4,%edx
f010559d:	01 c2                	add    %eax,%edx
f010559f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055a2:	8b 40 44             	mov    0x44(%eax),%eax
f01055a5:	89 02                	mov    %eax,(%edx)
f01055a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055aa:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01055b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055b4:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01055bb:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f01055c0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01055c3:	c1 e2 04             	shl    $0x4,%edx
f01055c6:	01 d0                	add    %edx,%eax
f01055c8:	8b 50 0c             	mov    0xc(%eax),%edx
f01055cb:	4a                   	dec    %edx
f01055cc:	89 50 0c             	mov    %edx,0xc(%eax)
				sched_insert_exit(ptr_env);
f01055cf:	83 ec 0c             	sub    $0xc,%esp
f01055d2:	ff 75 f4             	pushl  -0xc(%ebp)
f01055d5:	e8 80 f5 ff ff       	call   f0104b5a <sched_insert_exit>
f01055da:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01055dd:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f01055e2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01055e5:	c1 e2 04             	shl    $0x4,%edx
f01055e8:	01 d0                	add    %edx,%eax
f01055ea:	8b 40 08             	mov    0x8(%eax),%eax
f01055ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01055f0:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f01055f5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01055f8:	c1 e2 04             	shl    $0x4,%edx
f01055fb:	01 d0                	add    %edx,%eax
f01055fd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105601:	74 08                	je     f010560b <sched_exit_all_ready_envs+0x130>
f0105603:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105606:	8b 52 44             	mov    0x44(%edx),%edx
f0105609:	eb 05                	jmp    f0105610 <sched_exit_all_ready_envs+0x135>
f010560b:	ba 00 00 00 00       	mov    $0x0,%edx
f0105610:	89 50 08             	mov    %edx,0x8(%eax)
f0105613:	8b 40 08             	mov    0x8(%eax),%eax
f0105616:	85 c0                	test   %eax,%eax
f0105618:	0f 85 0b ff ff ff    	jne    f0105529 <sched_exit_all_ready_envs+0x4e>
f010561e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105622:	0f 85 01 ff ff ff    	jne    f0105529 <sched_exit_all_ready_envs+0x4e>

/*2018*/
void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105628:	ff 45 f0             	incl   -0x10(%ebp)
f010562b:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0105630:	0f b6 c0             	movzbl %al,%eax
f0105633:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105636:	0f 8f b8 fe ff ff    	jg     f01054f4 <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f010563c:	90                   	nop
f010563d:	c9                   	leave  
f010563e:	c3                   	ret    

f010563f <sched_kill_env>:

/*2015*/
void sched_kill_env(uint32 envId)
{
f010563f:	55                   	push   %ebp
f0105640:	89 e5                	mov    %esp,%ebp
f0105642:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105645:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f010564c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0105653:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105657:	0f 85 a0 00 00 00    	jne    f01056fd <sched_kill_env+0xbe>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010565d:	a1 3c 5d 87 f0       	mov    0xf0875d3c,%eax
f0105662:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105665:	eb 67                	jmp    f01056ce <sched_kill_env+0x8f>
					{
			if(ptr_env->env_id == envId)
f0105667:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010566a:	8b 40 4c             	mov    0x4c(%eax),%eax
f010566d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105670:	75 54                	jne    f01056c6 <sched_kill_env+0x87>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f0105672:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105675:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f010567b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010567e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105681:	83 ec 04             	sub    $0x4,%esp
f0105684:	52                   	push   %edx
f0105685:	50                   	push   %eax
f0105686:	68 4c 5a 13 f0       	push   $0xf0135a4c
f010568b:	e8 7e b6 ff ff       	call   f0100d0e <cprintf>
f0105690:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f0105693:	83 ec 0c             	sub    $0xc,%esp
f0105696:	ff 75 f4             	pushl  -0xc(%ebp)
f0105699:	e8 17 f4 ff ff       	call   f0104ab5 <sched_remove_new>
f010569e:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f01056a1:	83 ec 0c             	sub    $0xc,%esp
f01056a4:	ff 75 f4             	pushl  -0xc(%ebp)
f01056a7:	e8 14 44 00 00       	call   f0109ac0 <env_free>
f01056ac:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01056af:	83 ec 0c             	sub    $0xc,%esp
f01056b2:	68 cb 59 13 f0       	push   $0xf01359cb
f01056b7:	e8 52 b6 ff ff       	call   f0100d0e <cprintf>
f01056bc:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01056bf:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01056c6:	a1 44 5d 87 f0       	mov    0xf0875d44,%eax
f01056cb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01056ce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056d2:	74 08                	je     f01056dc <sched_kill_env+0x9d>
f01056d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056d7:	8b 40 44             	mov    0x44(%eax),%eax
f01056da:	eb 05                	jmp    f01056e1 <sched_kill_env+0xa2>
f01056dc:	b8 00 00 00 00       	mov    $0x0,%eax
f01056e1:	a3 44 5d 87 f0       	mov    %eax,0xf0875d44
f01056e6:	a1 44 5d 87 f0       	mov    0xf0875d44,%eax
f01056eb:	85 c0                	test   %eax,%eax
f01056ed:	0f 85 74 ff ff ff    	jne    f0105667 <sched_kill_env+0x28>
f01056f3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056f7:	0f 85 6a ff ff ff    	jne    f0105667 <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
					}
	}
	if (!found)
f01056fd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105701:	0f 85 a6 01 00 00    	jne    f01058ad <sched_kill_env+0x26e>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105707:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010570e:	e9 86 01 00 00       	jmp    f0105899 <sched_kill_env+0x25a>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105713:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f0105718:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010571b:	c1 e2 04             	shl    $0x4,%edx
f010571e:	01 d0                	add    %edx,%eax
f0105720:	8b 00                	mov    (%eax),%eax
f0105722:	85 c0                	test   %eax,%eax
f0105724:	0f 84 66 01 00 00    	je     f0105890 <sched_kill_env+0x251>
			{
				ptr_env=NULL;
f010572a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105731:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f0105736:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105739:	c1 e2 04             	shl    $0x4,%edx
f010573c:	01 d0                	add    %edx,%eax
f010573e:	8b 00                	mov    (%eax),%eax
f0105740:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105743:	e9 10 01 00 00       	jmp    f0105858 <sched_kill_env+0x219>
				{
					if(ptr_env->env_id == envId)
f0105748:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010574b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010574e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105751:	0f 85 ee 00 00 00    	jne    f0105845 <sched_kill_env+0x206>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f0105757:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010575a:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0105760:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105763:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105766:	ff 75 ec             	pushl  -0x14(%ebp)
f0105769:	52                   	push   %edx
f010576a:	50                   	push   %eax
f010576b:	68 74 5a 13 f0       	push   $0xf0135a74
f0105770:	e8 99 b5 ff ff       	call   f0100d0e <cprintf>
f0105775:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105778:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010577c:	75 17                	jne    f0105795 <sched_kill_env+0x156>
f010577e:	83 ec 04             	sub    $0x4,%esp
f0105781:	68 ff 57 13 f0       	push   $0xf01357ff
f0105786:	68 49 02 00 00       	push   $0x249
f010578b:	68 cb 57 13 f0       	push   $0xf01357cb
f0105790:	e8 70 aa ff ff       	call   f0100205 <_panic>
f0105795:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105798:	8b 40 44             	mov    0x44(%eax),%eax
f010579b:	85 c0                	test   %eax,%eax
f010579d:	74 11                	je     f01057b0 <sched_kill_env+0x171>
f010579f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057a2:	8b 40 44             	mov    0x44(%eax),%eax
f01057a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01057a8:	8b 52 48             	mov    0x48(%edx),%edx
f01057ab:	89 50 48             	mov    %edx,0x48(%eax)
f01057ae:	eb 16                	jmp    f01057c6 <sched_kill_env+0x187>
f01057b0:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f01057b5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01057b8:	c1 e2 04             	shl    $0x4,%edx
f01057bb:	01 c2                	add    %eax,%edx
f01057bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057c0:	8b 40 48             	mov    0x48(%eax),%eax
f01057c3:	89 42 04             	mov    %eax,0x4(%edx)
f01057c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057c9:	8b 40 48             	mov    0x48(%eax),%eax
f01057cc:	85 c0                	test   %eax,%eax
f01057ce:	74 11                	je     f01057e1 <sched_kill_env+0x1a2>
f01057d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057d3:	8b 40 48             	mov    0x48(%eax),%eax
f01057d6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01057d9:	8b 52 44             	mov    0x44(%edx),%edx
f01057dc:	89 50 44             	mov    %edx,0x44(%eax)
f01057df:	eb 15                	jmp    f01057f6 <sched_kill_env+0x1b7>
f01057e1:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f01057e6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01057e9:	c1 e2 04             	shl    $0x4,%edx
f01057ec:	01 c2                	add    %eax,%edx
f01057ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057f1:	8b 40 44             	mov    0x44(%eax),%eax
f01057f4:	89 02                	mov    %eax,(%edx)
f01057f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057f9:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105800:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105803:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010580a:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f010580f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105812:	c1 e2 04             	shl    $0x4,%edx
f0105815:	01 d0                	add    %edx,%eax
f0105817:	8b 50 0c             	mov    0xc(%eax),%edx
f010581a:	4a                   	dec    %edx
f010581b:	89 50 0c             	mov    %edx,0xc(%eax)
						env_free(ptr_env);
f010581e:	83 ec 0c             	sub    $0xc,%esp
f0105821:	ff 75 f4             	pushl  -0xc(%ebp)
f0105824:	e8 97 42 00 00       	call   f0109ac0 <env_free>
f0105829:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f010582c:	83 ec 0c             	sub    $0xc,%esp
f010582f:	68 cb 59 13 f0       	push   $0xf01359cb
f0105834:	e8 d5 b4 ff ff       	call   f0100d0e <cprintf>
f0105839:	83 c4 10             	add    $0x10,%esp
						found = 1;
f010583c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0105843:	eb 4b                	jmp    f0105890 <sched_kill_env+0x251>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105845:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f010584a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010584d:	c1 e2 04             	shl    $0x4,%edx
f0105850:	01 d0                	add    %edx,%eax
f0105852:	8b 40 08             	mov    0x8(%eax),%eax
f0105855:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105858:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f010585d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105860:	c1 e2 04             	shl    $0x4,%edx
f0105863:	01 d0                	add    %edx,%eax
f0105865:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105869:	74 08                	je     f0105873 <sched_kill_env+0x234>
f010586b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010586e:	8b 52 44             	mov    0x44(%edx),%edx
f0105871:	eb 05                	jmp    f0105878 <sched_kill_env+0x239>
f0105873:	ba 00 00 00 00       	mov    $0x0,%edx
f0105878:	89 50 08             	mov    %edx,0x8(%eax)
f010587b:	8b 40 08             	mov    0x8(%eax),%eax
f010587e:	85 c0                	test   %eax,%eax
f0105880:	0f 85 c2 fe ff ff    	jne    f0105748 <sched_kill_env+0x109>
f0105886:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010588a:	0f 85 b8 fe ff ff    	jne    f0105748 <sched_kill_env+0x109>
						break;
						//return;
					}
				}
			}
			if (found)
f0105890:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105894:	75 16                	jne    f01058ac <sched_kill_env+0x26d>
			}
					}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105896:	ff 45 ec             	incl   -0x14(%ebp)
f0105899:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f010589e:	0f b6 c0             	movzbl %al,%eax
f01058a1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01058a4:	0f 8f 69 fe ff ff    	jg     f0105713 <sched_kill_env+0xd4>
f01058aa:	eb 01                	jmp    f01058ad <sched_kill_env+0x26e>
						//return;
					}
				}
			}
			if (found)
				break;
f01058ac:	90                   	nop
		}
	}
	if (!found)
f01058ad:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01058b1:	0f 85 a7 00 00 00    	jne    f010595e <sched_kill_env+0x31f>
	{
		ptr_env=NULL;
f01058b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01058be:	a1 f4 5c 87 f0       	mov    0xf0875cf4,%eax
f01058c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01058c6:	eb 67                	jmp    f010592f <sched_kill_env+0x2f0>
		{
			if(ptr_env->env_id == envId)
f01058c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058cb:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058ce:	3b 45 08             	cmp    0x8(%ebp),%eax
f01058d1:	75 54                	jne    f0105927 <sched_kill_env+0x2e8>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f01058d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058d6:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f01058dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058df:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058e2:	83 ec 04             	sub    $0x4,%esp
f01058e5:	52                   	push   %edx
f01058e6:	50                   	push   %eax
f01058e7:	68 a0 5a 13 f0       	push   $0xf0135aa0
f01058ec:	e8 1d b4 ff ff       	call   f0100d0e <cprintf>
f01058f1:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f01058f4:	83 ec 0c             	sub    $0xc,%esp
f01058f7:	ff 75 f4             	pushl  -0xc(%ebp)
f01058fa:	e8 9e f2 ff ff       	call   f0104b9d <sched_remove_exit>
f01058ff:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f0105902:	83 ec 0c             	sub    $0xc,%esp
f0105905:	ff 75 f4             	pushl  -0xc(%ebp)
f0105908:	e8 b3 41 00 00       	call   f0109ac0 <env_free>
f010590d:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105910:	83 ec 0c             	sub    $0xc,%esp
f0105913:	68 cb 59 13 f0       	push   $0xf01359cb
f0105918:	e8 f1 b3 ff ff       	call   f0100d0e <cprintf>
f010591d:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105920:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105927:	a1 fc 5c 87 f0       	mov    0xf0875cfc,%eax
f010592c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010592f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105933:	74 08                	je     f010593d <sched_kill_env+0x2fe>
f0105935:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105938:	8b 40 44             	mov    0x44(%eax),%eax
f010593b:	eb 05                	jmp    f0105942 <sched_kill_env+0x303>
f010593d:	b8 00 00 00 00       	mov    $0x0,%eax
f0105942:	a3 fc 5c 87 f0       	mov    %eax,0xf0875cfc
f0105947:	a1 fc 5c 87 f0       	mov    0xf0875cfc,%eax
f010594c:	85 c0                	test   %eax,%eax
f010594e:	0f 85 74 ff ff ff    	jne    f01058c8 <sched_kill_env+0x289>
f0105954:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105958:	0f 85 6a ff ff ff    	jne    f01058c8 <sched_kill_env+0x289>
				//return;
			}
		}
	}

	if (!found)
f010595e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105962:	0f 85 a0 00 00 00    	jne    f0105a08 <sched_kill_env+0x3c9>
	{
		if (curenv->env_id == envId)
f0105968:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f010596d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105970:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105973:	0f 85 8f 00 00 00    	jne    f0105a08 <sched_kill_env+0x3c9>
		{
			ptr_env = curenv;
f0105979:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f010597e:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_id == ENV_RUNNABLE);
f0105981:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105984:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105987:	83 f8 02             	cmp    $0x2,%eax
f010598a:	74 19                	je     f01059a5 <sched_kill_env+0x366>
f010598c:	68 c8 5a 13 f0       	push   $0xf0135ac8
f0105991:	68 b6 57 13 f0       	push   $0xf01357b6
f0105996:	68 6c 02 00 00       	push   $0x26c
f010599b:	68 cb 57 13 f0       	push   $0xf01357cb
f01059a0:	e8 60 a8 ff ff       	call   f0100205 <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f01059a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059a8:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f01059ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059b1:	8b 40 4c             	mov    0x4c(%eax),%eax
f01059b4:	83 ec 04             	sub    $0x4,%esp
f01059b7:	52                   	push   %edx
f01059b8:	50                   	push   %eax
f01059b9:	68 e8 5a 13 f0       	push   $0xf0135ae8
f01059be:	e8 4b b3 ff ff       	call   f0100d0e <cprintf>
f01059c3:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f01059c6:	83 ec 0c             	sub    $0xc,%esp
f01059c9:	ff 75 f4             	pushl  -0xc(%ebp)
f01059cc:	e8 ef 40 00 00       	call   f0109ac0 <env_free>
f01059d1:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01059d4:	83 ec 0c             	sub    $0xc,%esp
f01059d7:	68 cb 59 13 f0       	push   $0xf01359cb
f01059dc:	e8 2d b3 ff ff       	call   f0100d0e <cprintf>
f01059e1:	83 c4 10             	add    $0x10,%esp
			found = 1;
f01059e4:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//If it's the curenv, then reset it and reinvoke the scheduler
			//as there's no meaning to return back to a killed env
			//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
			lcr3(phys_page_directory);
f01059eb:	a1 ac 5d 87 f0       	mov    0xf0875dac,%eax
f01059f0:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01059f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01059f6:	0f 22 d8             	mov    %eax,%cr3
			curenv = NULL;
f01059f9:	c7 05 f4 53 87 f0 00 	movl   $0x0,0xf08753f4
f0105a00:	00 00 00 
			fos_scheduler();
f0105a03:	e8 1e ed ff ff       	call   f0104726 <fos_scheduler>
		}
	}
}
f0105a08:	90                   	nop
f0105a09:	c9                   	leave  
f0105a0a:	c3                   	ret    

f0105a0b <clock_interrupt_handler>:


void clock_interrupt_handler()
{
f0105a0b:	55                   	push   %ebp
f0105a0c:	89 e5                	mov    %esp,%ebp
f0105a0e:	83 ec 08             	sub    $0x8,%esp
	//cputchar('i');

	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f0105a11:	83 ec 0c             	sub    $0xc,%esp
f0105a14:	6a 01                	push   $0x1
f0105a16:	e8 28 83 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f0105a1b:	83 c4 10             	add    $0x10,%esp
f0105a1e:	85 c0                	test   %eax,%eax
f0105a20:	74 05                	je     f0105a27 <clock_interrupt_handler+0x1c>
	{
		update_WS_time_stamps();
f0105a22:	e8 05 00 00 00       	call   f0105a2c <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f0105a27:	e8 fa ec ff ff       	call   f0104726 <fos_scheduler>

f0105a2c <update_WS_time_stamps>:
}

void update_WS_time_stamps()
{
f0105a2c:	55                   	push   %ebp
f0105a2d:	89 e5                	mov    %esp,%ebp
f0105a2f:	53                   	push   %ebx
f0105a30:	83 ec 24             	sub    $0x24,%esp
	struct Env *curr_env_ptr = curenv;
f0105a33:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f0105a38:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f0105a3b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0105a3f:	0f 84 cc 01 00 00    	je     f0105c11 <update_WS_time_stamps+0x1e5>
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0105a45:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0105a4c:	e9 cf 00 00 00       	jmp    f0105b20 <update_WS_time_stamps+0xf4>
			{
				if( curr_env_ptr->ptr_pageWorkingSet[i].empty != 1)
f0105a51:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a54:	8b 48 78             	mov    0x78(%eax),%ecx
f0105a57:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105a5a:	89 d0                	mov    %edx,%eax
f0105a5c:	01 c0                	add    %eax,%eax
f0105a5e:	01 d0                	add    %edx,%eax
f0105a60:	c1 e0 03             	shl    $0x3,%eax
f0105a63:	01 c8                	add    %ecx,%eax
f0105a65:	8a 40 04             	mov    0x4(%eax),%al
f0105a68:	3c 01                	cmp    $0x1,%al
f0105a6a:	0f 84 ad 00 00 00    	je     f0105b1d <update_WS_time_stamps+0xf1>
				{
					//update the time if the page was referenced
					uint32 page_va = curr_env_ptr->ptr_pageWorkingSet[i].virtual_address ;
f0105a70:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a73:	8b 48 78             	mov    0x78(%eax),%ecx
f0105a76:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105a79:	89 d0                	mov    %edx,%eax
f0105a7b:	01 c0                	add    %eax,%eax
f0105a7d:	01 d0                	add    %edx,%eax
f0105a7f:	c1 e0 03             	shl    $0x3,%eax
f0105a82:	01 c8                	add    %ecx,%eax
f0105a84:	8b 00                	mov    (%eax),%eax
f0105a86:	89 45 e8             	mov    %eax,-0x18(%ebp)
					uint32 perm = pt_get_page_permissions(curr_env_ptr->env_page_directory, page_va) ;
f0105a89:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a8c:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105a8f:	83 ec 08             	sub    $0x8,%esp
f0105a92:	ff 75 e8             	pushl  -0x18(%ebp)
f0105a95:	50                   	push   %eax
f0105a96:	e8 c6 21 00 00       	call   f0107c61 <pt_get_page_permissions>
f0105a9b:	83 c4 10             	add    $0x10,%esp
f0105a9e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->ptr_pageWorkingSet[i].time_stamp;
f0105aa1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105aa4:	8b 48 78             	mov    0x78(%eax),%ecx
f0105aa7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105aaa:	89 d0                	mov    %edx,%eax
f0105aac:	01 c0                	add    %eax,%eax
f0105aae:	01 d0                	add    %edx,%eax
f0105ab0:	c1 e0 03             	shl    $0x3,%eax
f0105ab3:	01 c8                	add    %ecx,%eax
f0105ab5:	8b 40 08             	mov    0x8(%eax),%eax
f0105ab8:	89 45 e0             	mov    %eax,-0x20(%ebp)

					if (perm & PERM_USED)
f0105abb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105abe:	83 e0 20             	and    $0x20,%eax
f0105ac1:	85 c0                	test   %eax,%eax
f0105ac3:	74 3b                	je     f0105b00 <update_WS_time_stamps+0xd4>
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0105ac5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105ac8:	8b 48 78             	mov    0x78(%eax),%ecx
f0105acb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105ace:	89 d0                	mov    %edx,%eax
f0105ad0:	01 c0                	add    %eax,%eax
f0105ad2:	01 d0                	add    %edx,%eax
f0105ad4:	c1 e0 03             	shl    $0x3,%eax
f0105ad7:	01 c8                	add    %ecx,%eax
f0105ad9:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105adc:	c1 ea 02             	shr    $0x2,%edx
f0105adf:	81 ca 00 00 00 80    	or     $0x80000000,%edx
f0105ae5:	89 50 08             	mov    %edx,0x8(%eax)
						pt_set_page_permissions(curr_env_ptr->env_page_directory, page_va, 0 , PERM_USED) ;
f0105ae8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105aeb:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105aee:	6a 20                	push   $0x20
f0105af0:	6a 00                	push   $0x0
f0105af2:	ff 75 e8             	pushl  -0x18(%ebp)
f0105af5:	50                   	push   %eax
f0105af6:	e8 b2 20 00 00       	call   f0107bad <pt_set_page_permissions>
f0105afb:	83 c4 10             	add    $0x10,%esp
f0105afe:	eb 1d                	jmp    f0105b1d <update_WS_time_stamps+0xf1>
					}
					else
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2);
f0105b00:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b03:	8b 48 78             	mov    0x78(%eax),%ecx
f0105b06:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105b09:	89 d0                	mov    %edx,%eax
f0105b0b:	01 c0                	add    %eax,%eax
f0105b0d:	01 d0                	add    %edx,%eax
f0105b0f:	c1 e0 03             	shl    $0x3,%eax
f0105b12:	01 c8                	add    %ecx,%eax
f0105b14:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105b17:	c1 ea 02             	shr    $0x2,%edx
f0105b1a:	89 50 08             	mov    %edx,0x8(%eax)

	if(curr_env_ptr != NULL)
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0105b1d:	ff 45 f4             	incl   -0xc(%ebp)
f0105b20:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b23:	8b 50 74             	mov    0x74(%eax),%edx
f0105b26:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b29:	39 c2                	cmp    %eax,%edx
f0105b2b:	0f 87 20 ff ff ff    	ja     f0105a51 <update_WS_time_stamps+0x25>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105b31:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105b38:	e9 ca 00 00 00       	jmp    f0105c07 <update_WS_time_stamps+0x1db>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f0105b3d:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105b40:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b43:	89 d0                	mov    %edx,%eax
f0105b45:	01 c0                	add    %eax,%eax
f0105b47:	01 d0                	add    %edx,%eax
f0105b49:	c1 e0 03             	shl    $0x3,%eax
f0105b4c:	01 c8                	add    %ecx,%eax
f0105b4e:	83 e8 80             	sub    $0xffffff80,%eax
f0105b51:	8a 00                	mov    (%eax),%al
f0105b53:	3c 01                	cmp    $0x1,%al
f0105b55:	0f 84 a9 00 00 00    	je     f0105c04 <update_WS_time_stamps+0x1d8>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f0105b5b:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105b5e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b61:	89 d0                	mov    %edx,%eax
f0105b63:	01 c0                	add    %eax,%eax
f0105b65:	01 d0                	add    %edx,%eax
f0105b67:	c1 e0 03             	shl    $0x3,%eax
f0105b6a:	01 c8                	add    %ecx,%eax
f0105b6c:	83 c0 7c             	add    $0x7c,%eax
f0105b6f:	8b 00                	mov    (%eax),%eax
f0105b71:	89 45 dc             	mov    %eax,-0x24(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f0105b74:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105b77:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b7a:	89 d0                	mov    %edx,%eax
f0105b7c:	01 c0                	add    %eax,%eax
f0105b7e:	01 d0                	add    %edx,%eax
f0105b80:	c1 e0 03             	shl    $0x3,%eax
f0105b83:	01 c8                	add    %ecx,%eax
f0105b85:	05 84 00 00 00       	add    $0x84,%eax
f0105b8a:	8b 00                	mov    (%eax),%eax
f0105b8c:	89 45 d8             	mov    %eax,-0x28(%ebp)

					if (pd_is_table_used(curr_env_ptr->env_page_directory, table_va))
f0105b8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b92:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105b95:	83 ec 08             	sub    $0x8,%esp
f0105b98:	ff 75 dc             	pushl  -0x24(%ebp)
f0105b9b:	50                   	push   %eax
f0105b9c:	e8 df 21 00 00       	call   f0107d80 <pd_is_table_used>
f0105ba1:	83 c4 10             	add    $0x10,%esp
f0105ba4:	85 c0                	test   %eax,%eax
f0105ba6:	74 3c                	je     f0105be4 <update_WS_time_stamps+0x1b8>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0105ba8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105bab:	c1 e8 02             	shr    $0x2,%eax
f0105bae:	0d 00 00 00 80       	or     $0x80000000,%eax
f0105bb3:	89 c1                	mov    %eax,%ecx
f0105bb5:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105bb8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105bbb:	89 d0                	mov    %edx,%eax
f0105bbd:	01 c0                	add    %eax,%eax
f0105bbf:	01 d0                	add    %edx,%eax
f0105bc1:	c1 e0 03             	shl    $0x3,%eax
f0105bc4:	01 d8                	add    %ebx,%eax
f0105bc6:	05 84 00 00 00       	add    $0x84,%eax
f0105bcb:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr->env_page_directory, table_va);
f0105bcd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105bd0:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105bd3:	83 ec 08             	sub    $0x8,%esp
f0105bd6:	ff 75 dc             	pushl  -0x24(%ebp)
f0105bd9:	50                   	push   %eax
f0105bda:	e8 c5 21 00 00       	call   f0107da4 <pd_set_table_unused>
f0105bdf:	83 c4 10             	add    $0x10,%esp
f0105be2:	eb 20                	jmp    f0105c04 <update_WS_time_stamps+0x1d8>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f0105be4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105be7:	c1 e8 02             	shr    $0x2,%eax
f0105bea:	89 c1                	mov    %eax,%ecx
f0105bec:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105bef:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105bf2:	89 d0                	mov    %edx,%eax
f0105bf4:	01 c0                	add    %eax,%eax
f0105bf6:	01 d0                	add    %edx,%eax
f0105bf8:	c1 e0 03             	shl    $0x3,%eax
f0105bfb:	01 d8                	add    %ebx,%eax
f0105bfd:	05 84 00 00 00       	add    $0x84,%eax
f0105c02:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105c04:	ff 45 f0             	incl   -0x10(%ebp)
f0105c07:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f0105c0b:	0f 8e 2c ff ff ff    	jle    f0105b3d <update_WS_time_stamps+0x111>
					}
				}
			}
		}
	}
}
f0105c11:	90                   	nop
f0105c12:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0105c15:	c9                   	leave  
f0105c16:	c3                   	ret    

f0105c17 <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f0105c17:	55                   	push   %ebp
f0105c18:	89 e5                	mov    %esp,%ebp
f0105c1a:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f0105c1d:	c7 05 ec 53 87 f0 01 	movl   $0x1,0xf08753ec
f0105c24:	00 00 00 
f0105c27:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f0105c2e:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0105c32:	8a 45 b2             	mov    -0x4e(%ebp),%al
f0105c35:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105c38:	ee                   	out    %al,(%dx)
f0105c39:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f0105c40:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f0105c44:	8a 45 b3             	mov    -0x4d(%ebp),%al
f0105c47:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105c4a:	ee                   	out    %al,(%dx)
f0105c4b:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f0105c52:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f0105c56:	8a 45 b4             	mov    -0x4c(%ebp),%al
f0105c59:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105c5c:	ee                   	out    %al,(%dx)
f0105c5d:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f0105c64:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f0105c68:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0105c6b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0105c6e:	ee                   	out    %al,(%dx)
f0105c6f:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f0105c76:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0105c7a:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0105c7d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0105c80:	ee                   	out    %al,(%dx)
f0105c81:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f0105c88:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0105c8c:	8a 45 b7             	mov    -0x49(%ebp),%al
f0105c8f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105c92:	ee                   	out    %al,(%dx)
f0105c93:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0105c9a:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0105c9e:	8a 45 b8             	mov    -0x48(%ebp),%al
f0105ca1:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0105ca4:	ee                   	out    %al,(%dx)
f0105ca5:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0105cac:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0105cb0:	8a 45 b9             	mov    -0x47(%ebp),%al
f0105cb3:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105cb6:	ee                   	out    %al,(%dx)
f0105cb7:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f0105cbe:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f0105cc2:	8a 45 ba             	mov    -0x46(%ebp),%al
f0105cc5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0105cc8:	ee                   	out    %al,(%dx)
f0105cc9:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0105cd0:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f0105cd4:	8a 45 bb             	mov    -0x45(%ebp),%al
f0105cd7:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0105cda:	ee                   	out    %al,(%dx)
f0105cdb:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f0105ce2:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f0105ce6:	8a 45 bc             	mov    -0x44(%ebp),%al
f0105ce9:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0105cec:	ee                   	out    %al,(%dx)
f0105ced:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f0105cf4:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f0105cf8:	8a 45 bd             	mov    -0x43(%ebp),%al
f0105cfb:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0105cfe:	ee                   	out    %al,(%dx)
f0105cff:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f0105d06:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f0105d0a:	8a 45 be             	mov    -0x42(%ebp),%al
f0105d0d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0105d10:	ee                   	out    %al,(%dx)
f0105d11:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f0105d18:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f0105d1c:	8a 45 bf             	mov    -0x41(%ebp),%al
f0105d1f:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0105d22:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f0105d23:	66 a1 b0 28 19 f0    	mov    0xf01928b0,%ax
f0105d29:	66 83 f8 ff          	cmp    $0xffff,%ax
f0105d2d:	74 15                	je     f0105d44 <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f0105d2f:	66 a1 b0 28 19 f0    	mov    0xf01928b0,%ax
f0105d35:	0f b7 c0             	movzwl %ax,%eax
f0105d38:	83 ec 0c             	sub    $0xc,%esp
f0105d3b:	50                   	push   %eax
f0105d3c:	e8 06 00 00 00       	call   f0105d47 <irq_setmask_8259A>
f0105d41:	83 c4 10             	add    $0x10,%esp
}
f0105d44:	90                   	nop
f0105d45:	c9                   	leave  
f0105d46:	c3                   	ret    

f0105d47 <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f0105d47:	55                   	push   %ebp
f0105d48:	89 e5                	mov    %esp,%ebp
f0105d4a:	83 ec 14             	sub    $0x14,%esp
f0105d4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105d50:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f0105d54:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105d57:	66 a3 b0 28 19 f0    	mov    %ax,0xf01928b0
	if (!didinit)
f0105d5d:	a1 ec 53 87 f0       	mov    0xf08753ec,%eax
f0105d62:	85 c0                	test   %eax,%eax
f0105d64:	74 34                	je     f0105d9a <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f0105d66:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105d69:	0f b6 c0             	movzbl %al,%eax
f0105d6c:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f0105d73:	88 45 f6             	mov    %al,-0xa(%ebp)
f0105d76:	8a 45 f6             	mov    -0xa(%ebp),%al
f0105d79:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0105d7c:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f0105d7d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105d80:	66 c1 e8 08          	shr    $0x8,%ax
f0105d84:	0f b6 c0             	movzbl %al,%eax
f0105d87:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0105d8e:	88 45 f7             	mov    %al,-0x9(%ebp)
f0105d91:	8a 45 f7             	mov    -0x9(%ebp),%al
f0105d94:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0105d97:	ee                   	out    %al,(%dx)
f0105d98:	eb 01                	jmp    f0105d9b <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f0105d9a:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f0105d9b:	c9                   	leave  
f0105d9c:	c3                   	ret    

f0105d9d <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f0105d9d:	55                   	push   %ebp
f0105d9e:	89 e5                	mov    %esp,%ebp
f0105da0:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f0105da3:	83 ec 08             	sub    $0x8,%esp
f0105da6:	68 00 10 00 00       	push   $0x1000
f0105dab:	68 00 10 00 00       	push   $0x1000
f0105db0:	e8 6a 02 00 00       	call   f010601f <boot_allocate_space>
f0105db5:	83 c4 10             	add    $0x10,%esp
f0105db8:	a3 7c 5d 87 f0       	mov    %eax,0xf0875d7c
	memset(ptr_page_directory, 0, PAGE_SIZE);
f0105dbd:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0105dc2:	83 ec 04             	sub    $0x4,%esp
f0105dc5:	68 00 10 00 00       	push   $0x1000
f0105dca:	6a 00                	push   $0x0
f0105dcc:	50                   	push   %eax
f0105dcd:	e8 e8 b2 02 00       	call   f01310ba <memset>
f0105dd2:	83 c4 10             	add    $0x10,%esp
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0105dd5:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0105dda:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0105ddd:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f0105de4:	77 14                	ja     f0105dfa <initialize_kernel_VM+0x5d>
f0105de6:	ff 75 e8             	pushl  -0x18(%ebp)
f0105de9:	68 14 5b 13 f0       	push   $0xf0135b14
f0105dee:	6a 45                	push   $0x45
f0105df0:	68 48 5b 13 f0       	push   $0xf0135b48
f0105df5:	e8 0b a4 ff ff       	call   f0100205 <_panic>
f0105dfa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105dfd:	05 00 00 00 10       	add    $0x10000000,%eax
f0105e02:	a3 ac 5d 87 f0       	mov    %eax,0xf0875dac
	// Map the kernel stack with VA range :
	//  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	// to physical address : "phys_stack_bottom".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
	boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f0105e07:	c7 45 e4 00 a0 18 f0 	movl   $0xf018a000,-0x1c(%ebp)
f0105e0e:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f0105e15:	77 14                	ja     f0105e2b <initialize_kernel_VM+0x8e>
f0105e17:	ff 75 e4             	pushl  -0x1c(%ebp)
f0105e1a:	68 14 5b 13 f0       	push   $0xf0135b14
f0105e1f:	6a 4d                	push   $0x4d
f0105e21:	68 48 5b 13 f0       	push   $0xf0135b48
f0105e26:	e8 da a3 ff ff       	call   f0100205 <_panic>
f0105e2b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105e2e:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105e34:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0105e39:	83 ec 0c             	sub    $0xc,%esp
f0105e3c:	6a 02                	push   $0x2
f0105e3e:	52                   	push   %edx
f0105e3f:	68 00 80 00 00       	push   $0x8000
f0105e44:	68 00 80 bf ef       	push   $0xefbf8000
f0105e49:	50                   	push   %eax
f0105e4a:	e8 31 02 00 00       	call   f0106080 <boot_map_range>
f0105e4f:	83 c4 20             	add    $0x20,%esp
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f0105e52:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f0105e59:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int nTables=0;
f0105e60:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105e67:	eb 25                	jmp    f0105e8e <initialize_kernel_VM+0xf1>
	{
		++nTables;
f0105e69:	ff 45 ec             	incl   -0x14(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f0105e6c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105e6f:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0105e74:	83 ec 04             	sub    $0x4,%esp
f0105e77:	6a 01                	push   $0x1
f0105e79:	52                   	push   %edx
f0105e7a:	50                   	push   %eax
f0105e7b:	e8 74 02 00 00       	call   f01060f4 <boot_get_page_table>
f0105e80:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105e83:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f0105e8a:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f0105e8e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105e92:	72 d5                	jb     f0105e69 <initialize_kernel_VM+0xcc>
f0105e94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105e98:	77 06                	ja     f0105ea0 <initialize_kernel_VM+0x103>
f0105e9a:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f0105e9e:	76 c9                	jbe    f0105e69 <initialize_kernel_VM+0xcc>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct FrameInfo) ;
f0105ea0:	8b 15 10 5d 87 f0    	mov    0xf0875d10,%edx
f0105ea6:	89 d0                	mov    %edx,%eax
f0105ea8:	01 c0                	add    %eax,%eax
f0105eaa:	01 d0                	add    %edx,%eax
f0105eac:	c1 e0 03             	shl    $0x3,%eax
f0105eaf:	89 45 e0             	mov    %eax,-0x20(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f0105eb2:	83 ec 08             	sub    $0x8,%esp
f0105eb5:	68 00 10 00 00       	push   $0x1000
f0105eba:	ff 75 e0             	pushl  -0x20(%ebp)
f0105ebd:	e8 5d 01 00 00       	call   f010601f <boot_allocate_space>
f0105ec2:	83 c4 10             	add    $0x10,%esp
f0105ec5:	a3 54 5d 87 f0       	mov    %eax,0xf0875d54
	memset(frames_info, 0, array_size);
f0105eca:	a1 54 5d 87 f0       	mov    0xf0875d54,%eax
f0105ecf:	83 ec 04             	sub    $0x4,%esp
f0105ed2:	ff 75 e0             	pushl  -0x20(%ebp)
f0105ed5:	6a 00                	push   $0x0
f0105ed7:	50                   	push   %eax
f0105ed8:	e8 dd b1 02 00       	call   f01310ba <memset>
f0105edd:	83 c4 10             	add    $0x10,%esp
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct FrameInfo);
f0105ee0:	c7 45 dc 00 c0 30 00 	movl   $0x30c000,-0x24(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f0105ee7:	83 ec 08             	sub    $0x8,%esp
f0105eea:	68 00 10 00 00       	push   $0x1000
f0105eef:	ff 75 dc             	pushl  -0x24(%ebp)
f0105ef2:	e8 28 01 00 00       	call   f010601f <boot_allocate_space>
f0105ef7:	83 c4 10             	add    $0x10,%esp
f0105efa:	a3 dc 5c 87 f0       	mov    %eax,0xf0875cdc
	memset(disk_frames_info , 0, disk_array_size);
f0105eff:	a1 dc 5c 87 f0       	mov    0xf0875cdc,%eax
f0105f04:	83 ec 04             	sub    $0x4,%esp
f0105f07:	ff 75 dc             	pushl  -0x24(%ebp)
f0105f0a:	6a 00                	push   $0x0
f0105f0c:	50                   	push   %eax
f0105f0d:	e8 a8 b1 02 00       	call   f01310ba <memset>
f0105f12:	83 c4 10             	add    $0x10,%esp

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f0105f15:	e8 d5 04 00 00       	call   f01063ef <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("Max Envs = %d, Nearest Pow of 2 = %d\n",NENV, NEARPOW2NENV);
f0105f1a:	83 ec 0c             	sub    $0xc,%esp
f0105f1d:	68 b1 02 00 00       	push   $0x2b1
f0105f22:	e8 17 9d 02 00       	call   f012fc3e <nearest_pow2_ceil>
f0105f27:	83 c4 10             	add    $0x10,%esp
f0105f2a:	83 ec 04             	sub    $0x4,%esp
f0105f2d:	50                   	push   %eax
f0105f2e:	68 b1 02 00 00       	push   $0x2b1
f0105f33:	68 68 5b 13 f0       	push   $0xf0135b68
f0105f38:	e8 d1 ad ff ff       	call   f0100d0e <cprintf>
f0105f3d:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f0105f40:	c7 45 d8 f0 fa 0f 00 	movl   $0xffaf0,-0x28(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f0105f47:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105f4a:	83 ec 08             	sub    $0x8,%esp
f0105f4d:	68 00 10 00 00       	push   $0x1000
f0105f52:	50                   	push   %eax
f0105f53:	e8 c7 00 00 00       	call   f010601f <boot_allocate_space>
f0105f58:	83 c4 10             	add    $0x10,%esp
f0105f5b:	a3 f0 53 87 f0       	mov    %eax,0xf08753f0
	memset(envs , 0, envs_size);
f0105f60:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105f63:	a1 f0 53 87 f0       	mov    0xf08753f0,%eax
f0105f68:	83 ec 04             	sub    $0x4,%esp
f0105f6b:	52                   	push   %edx
f0105f6c:	6a 00                	push   $0x0
f0105f6e:	50                   	push   %eax
f0105f6f:	e8 46 b1 02 00       	call   f01310ba <memset>
f0105f74:	83 c4 10             	add    $0x10,%esp

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f0105f77:	a1 f0 53 87 f0       	mov    0xf08753f0,%eax
f0105f7c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0105f7f:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f0105f86:	77 17                	ja     f0105f9f <initialize_kernel_VM+0x202>
f0105f88:	ff 75 d4             	pushl  -0x2c(%ebp)
f0105f8b:	68 14 5b 13 f0       	push   $0xf0135b14
f0105f90:	68 96 00 00 00       	push   $0x96
f0105f95:	68 48 5b 13 f0       	push   $0xf0135b48
f0105f9a:	e8 66 a2 ff ff       	call   f0100205 <_panic>
f0105f9f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0105fa2:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f0105fa8:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105fab:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0105fb0:	83 ec 0c             	sub    $0xc,%esp
f0105fb3:	6a 04                	push   $0x4
f0105fb5:	51                   	push   %ecx
f0105fb6:	52                   	push   %edx
f0105fb7:	68 00 00 c0 ee       	push   $0xeec00000
f0105fbc:	50                   	push   %eax
f0105fbd:	e8 be 00 00 00       	call   f0106080 <boot_map_range>
f0105fc2:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0105fc5:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0105fca:	05 ec 0e 00 00       	add    $0xeec,%eax
f0105fcf:	8b 15 7c 5d 87 f0    	mov    0xf0875d7c,%edx
f0105fd5:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f0105fdb:	8b 12                	mov    (%edx),%edx
f0105fdd:	83 ca 05             	or     $0x5,%edx
f0105fe0:	89 10                	mov    %edx,(%eax)
#if USE_KHEAP
	{
		// MAKE SURE THAT THIS MAPPING HAPPENS AFTER ALL BOOT ALLOCATIONS (boot_allocate_space)
		// calls are fininshed, and no remaining data to be allocated for the kernel
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f0105fe2:	a1 78 5d 87 f0       	mov    0xf0875d78,%eax
f0105fe7:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105fed:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0105ff2:	83 ec 0c             	sub    $0xc,%esp
f0105ff5:	6a 02                	push   $0x2
f0105ff7:	6a 00                	push   $0x0
f0105ff9:	52                   	push   %edx
f0105ffa:	68 00 00 00 f0       	push   $0xf0000000
f0105fff:	50                   	push   %eax
f0106000:	e8 7b 00 00 00       	call   f0106080 <boot_map_range>
f0106005:	83 c4 20             	add    $0x20,%esp
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f0106008:	e8 18 a4 02 00       	call   f0130425 <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f010600d:	c7 05 f0 5c 87 f0 19 	movl   $0x19,0xf0875cf0
f0106014:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f0106017:	e8 d3 02 00 00       	call   f01062ef <turn_on_paging>
}
f010601c:	90                   	nop
f010601d:	c9                   	leave  
f010601e:	c3                   	ret    

f010601f <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f010601f:	55                   	push   %ebp
f0106020:	89 e5                	mov    %esp,%ebp
f0106022:	83 ec 10             	sub    $0x10,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f0106025:	a1 78 5d 87 f0       	mov    0xf0875d78,%eax
f010602a:	85 c0                	test   %eax,%eax
f010602c:	75 0a                	jne    f0106038 <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f010602e:	c7 05 78 5d 87 f0 bc 	movl   $0xf0875ebc,0xf0875d78
f0106035:	5e 87 f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f0106038:	8b 45 0c             	mov    0xc(%ebp),%eax
f010603b:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010603e:	a1 78 5d 87 f0       	mov    0xf0875d78,%eax
f0106043:	89 c2                	mov    %eax,%edx
f0106045:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106048:	01 d0                	add    %edx,%eax
f010604a:	48                   	dec    %eax
f010604b:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010604e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0106051:	ba 00 00 00 00       	mov    $0x0,%edx
f0106056:	f7 75 fc             	divl   -0x4(%ebp)
f0106059:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010605c:	29 d0                	sub    %edx,%eax
f010605e:	a3 78 5d 87 f0       	mov    %eax,0xf0875d78

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f0106063:	a1 78 5d 87 f0       	mov    0xf0875d78,%eax
f0106068:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f010606b:	8b 15 78 5d 87 f0    	mov    0xf0875d78,%edx
f0106071:	8b 45 08             	mov    0x8(%ebp),%eax
f0106074:	01 d0                	add    %edx,%eax
f0106076:	a3 78 5d 87 f0       	mov    %eax,0xf0875d78

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	//memset(ptr_allocated_mem, 0, size);

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f010607b:	8b 45 f4             	mov    -0xc(%ebp),%eax

}
f010607e:	c9                   	leave  
f010607f:	c3                   	ret    

f0106080 <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f0106080:	55                   	push   %ebp
f0106081:	89 e5                	mov    %esp,%ebp
f0106083:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f0106086:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f010608d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0106094:	eb 53                	jmp    f01060e9 <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f0106096:	83 ec 04             	sub    $0x4,%esp
f0106099:	6a 01                	push   $0x1
f010609b:	ff 75 0c             	pushl  0xc(%ebp)
f010609e:	ff 75 08             	pushl  0x8(%ebp)
f01060a1:	e8 4e 00 00 00       	call   f01060f4 <boot_get_page_table>
f01060a6:	83 c4 10             	add    $0x10,%esp
f01060a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f01060ac:	8b 45 0c             	mov    0xc(%ebp),%eax
f01060af:	c1 e8 0c             	shr    $0xc,%eax
f01060b2:	25 ff 03 00 00       	and    $0x3ff,%eax
f01060b7:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f01060ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01060bd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01060c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01060c7:	01 c2                	add    %eax,%edx
f01060c9:	8b 45 18             	mov    0x18(%ebp),%eax
f01060cc:	0b 45 14             	or     0x14(%ebp),%eax
f01060cf:	83 c8 01             	or     $0x1,%eax
f01060d2:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f01060d4:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f01060db:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f01060e2:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01060e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01060ec:	3b 45 10             	cmp    0x10(%ebp),%eax
f01060ef:	72 a5                	jb     f0106096 <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f01060f1:	90                   	nop
f01060f2:	c9                   	leave  
f01060f3:	c3                   	ret    

f01060f4 <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f01060f4:	55                   	push   %ebp
f01060f5:	89 e5                	mov    %esp,%ebp
f01060f7:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f01060fa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01060fd:	c1 e8 16             	shr    $0x16,%eax
f0106100:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f0106103:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106106:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010610d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106110:	01 d0                	add    %edx,%eax
f0106112:	8b 00                	mov    (%eax),%eax
f0106114:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f0106117:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010611a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010611f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f0106122:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106125:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106128:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010612b:	c1 e8 0c             	shr    $0xc,%eax
f010612e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106131:	a1 10 5d 87 f0       	mov    0xf0875d10,%eax
f0106136:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106139:	72 17                	jb     f0106152 <boot_get_page_table+0x5e>
f010613b:	ff 75 e8             	pushl  -0x18(%ebp)
f010613e:	68 90 5b 13 f0       	push   $0xf0135b90
f0106143:	68 15 01 00 00       	push   $0x115
f0106148:	68 48 5b 13 f0       	push   $0xf0135b48
f010614d:	e8 b3 a0 ff ff       	call   f0100205 <_panic>
f0106152:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106155:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010615a:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f010615d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106161:	75 72                	jne    f01061d5 <boot_get_page_table+0xe1>
	{
		if (create)
f0106163:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0106167:	74 65                	je     f01061ce <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f0106169:	83 ec 08             	sub    $0x8,%esp
f010616c:	68 00 10 00 00       	push   $0x1000
f0106171:	68 00 10 00 00       	push   $0x1000
f0106176:	e8 a4 fe ff ff       	call   f010601f <boot_allocate_space>
f010617b:	83 c4 10             	add    $0x10,%esp
f010617e:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f0106181:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106184:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106187:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f010618e:	77 17                	ja     f01061a7 <boot_get_page_table+0xb3>
f0106190:	ff 75 dc             	pushl  -0x24(%ebp)
f0106193:	68 14 5b 13 f0       	push   $0xf0135b14
f0106198:	68 1b 01 00 00       	push   $0x11b
f010619d:	68 48 5b 13 f0       	push   $0xf0135b48
f01061a2:	e8 5e a0 ff ff       	call   f0100205 <_panic>
f01061a7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01061aa:	05 00 00 00 10       	add    $0x10000000,%eax
f01061af:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f01061b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01061b5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01061bc:	8b 45 08             	mov    0x8(%ebp),%eax
f01061bf:	01 d0                	add    %edx,%eax
f01061c1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01061c4:	83 ca 03             	or     $0x3,%edx
f01061c7:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f01061c9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01061cc:	eb 0a                	jmp    f01061d8 <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f01061ce:	b8 00 00 00 00       	mov    $0x0,%eax
f01061d3:	eb 03                	jmp    f01061d8 <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f01061d5:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f01061d8:	c9                   	leave  
f01061d9:	c3                   	ret    

f01061da <nvram_read>:


int nvram_read(int r)
{
f01061da:	55                   	push   %ebp
f01061db:	89 e5                	mov    %esp,%ebp
f01061dd:	53                   	push   %ebx
f01061de:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f01061e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01061e4:	83 ec 0c             	sub    $0xc,%esp
f01061e7:	50                   	push   %eax
f01061e8:	e8 9b de ff ff       	call   f0104088 <mc146818_read>
f01061ed:	83 c4 10             	add    $0x10,%esp
f01061f0:	89 c3                	mov    %eax,%ebx
f01061f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01061f5:	40                   	inc    %eax
f01061f6:	83 ec 0c             	sub    $0xc,%esp
f01061f9:	50                   	push   %eax
f01061fa:	e8 89 de ff ff       	call   f0104088 <mc146818_read>
f01061ff:	83 c4 10             	add    $0x10,%esp
f0106202:	c1 e0 08             	shl    $0x8,%eax
f0106205:	09 d8                	or     %ebx,%eax
}
f0106207:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010620a:	c9                   	leave  
f010620b:	c3                   	ret    

f010620c <detect_memory>:

void detect_memory()
{
f010620c:	55                   	push   %ebp
f010620d:	89 e5                	mov    %esp,%ebp
f010620f:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f0106212:	83 ec 0c             	sub    $0xc,%esp
f0106215:	6a 15                	push   $0x15
f0106217:	e8 be ff ff ff       	call   f01061da <nvram_read>
f010621c:	83 c4 10             	add    $0x10,%esp
f010621f:	c1 e0 0a             	shl    $0xa,%eax
f0106222:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106225:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106228:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010622d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f0106230:	83 ec 0c             	sub    $0xc,%esp
f0106233:	6a 17                	push   $0x17
f0106235:	e8 a0 ff ff ff       	call   f01061da <nvram_read>
f010623a:	83 c4 10             	add    $0x10,%esp
f010623d:	c1 e0 0a             	shl    $0xa,%eax
f0106240:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106243:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106246:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010624b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f010624e:	83 ec 0c             	sub    $0xc,%esp
f0106251:	6a 34                	push   $0x34
f0106253:	e8 82 ff ff ff       	call   f01061da <nvram_read>
f0106258:	83 c4 10             	add    $0x10,%esp
f010625b:	c1 e0 10             	shl    $0x10,%eax
f010625e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0106261:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106264:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106269:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f010626c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0106270:	74 18                	je     f010628a <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f0106272:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106275:	05 00 00 00 01       	add    $0x1000000,%eax
f010627a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f010627d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106280:	2d 00 00 10 00       	sub    $0x100000,%eax
f0106285:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106288:	eb 19                	jmp    f01062a3 <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f010628a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010628e:	74 0d                	je     f010629d <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f0106290:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106293:	05 00 00 10 00       	add    $0x100000,%eax
f0106298:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010629b:	eb 06                	jmp    f01062a3 <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f010629d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f01062a3:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
		while(1);
	}
	number_of_frames = maxpa / PAGE_SIZE;
f01062aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062ad:	c1 e8 0c             	shr    $0xc,%eax
f01062b0:	a3 10 5d 87 f0       	mov    %eax,0xf0875d10

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f01062b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062b8:	c1 e8 0a             	shr    $0xa,%eax
f01062bb:	83 ec 08             	sub    $0x8,%esp
f01062be:	50                   	push   %eax
f01062bf:	68 c0 5b 13 f0       	push   $0xf0135bc0
f01062c4:	e8 45 aa ff ff       	call   f0100d0e <cprintf>
f01062c9:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f01062cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062cf:	c1 e8 0a             	shr    $0xa,%eax
f01062d2:	89 c2                	mov    %eax,%edx
f01062d4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01062d7:	c1 e8 0a             	shr    $0xa,%eax
f01062da:	83 ec 04             	sub    $0x4,%esp
f01062dd:	52                   	push   %edx
f01062de:	50                   	push   %eax
f01062df:	68 e1 5b 13 f0       	push   $0xf0135be1
f01062e4:	e8 25 aa ff ff       	call   f0100d0e <cprintf>
f01062e9:	83 c4 10             	add    $0x10,%esp
}
f01062ec:	90                   	nop
f01062ed:	c9                   	leave  
f01062ee:	c3                   	ret    

f01062ef <turn_on_paging>:
// --------------------------------------------------------------
// Set up initial memory mappings and turn on MMU.
// --------------------------------------------------------------

void turn_on_paging()
{
f01062ef:	55                   	push   %ebp
f01062f0:	89 e5                	mov    %esp,%ebp
f01062f2:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f01062f5:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f01062fc:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106303:	eb 24                	jmp    f0106329 <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f0106305:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f010630a:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010630d:	c1 e2 02             	shl    $0x2,%edx
f0106310:	01 c2                	add    %eax,%edx
f0106312:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0106317:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f010631a:	c1 e1 02             	shl    $0x2,%ecx
f010631d:	01 c8                	add    %ecx,%eax
f010631f:	8b 00                	mov    (%eax),%eax
f0106321:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106323:	ff 45 fc             	incl   -0x4(%ebp)
f0106326:	ff 45 f8             	incl   -0x8(%ebp)
f0106329:	a1 78 5d 87 f0       	mov    0xf0875d78,%eax
f010632e:	c1 e8 16             	shr    $0x16,%eax
f0106331:	89 c2                	mov    %eax,%edx
f0106333:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106336:	39 c2                	cmp    %eax,%edx
f0106338:	77 cb                	ja     f0106305 <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f010633a:	a1 ac 5d 87 f0       	mov    0xf0875dac,%eax
f010633f:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0106342:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106345:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f0106348:	0f 20 c0             	mov    %cr0,%eax
f010634b:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f010634e:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f0106351:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f0106354:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f010635b:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f010635f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106362:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f0106365:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106368:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f010636b:	0f 01 15 f0 28 19 f0 	lgdtl  0xf01928f0
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f0106372:	b8 23 00 00 00       	mov    $0x23,%eax
f0106377:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f0106379:	b8 23 00 00 00       	mov    $0x23,%eax
f010637e:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f0106380:	b8 10 00 00 00       	mov    $0x10,%eax
f0106385:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f0106387:	b8 10 00 00 00       	mov    $0x10,%eax
f010638c:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f010638e:	b8 10 00 00 00       	mov    $0x10,%eax
f0106393:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f0106395:	ea 9c 63 10 f0 08 00 	ljmp   $0x8,$0xf010639c
	asm volatile("lldt %%ax" :: "a" (0));
f010639c:	b8 00 00 00 00       	mov    $0x0,%eax
f01063a1:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f01063a4:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f01063ab:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01063b2:	eb 19                	jmp    f01063cd <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f01063b4:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f01063b9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01063bc:	c1 e2 02             	shl    $0x2,%edx
f01063bf:	01 d0                	add    %edx,%eax
f01063c1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01063c7:	ff 45 f4             	incl   -0xc(%ebp)
f01063ca:	ff 45 f0             	incl   -0x10(%ebp)
f01063cd:	a1 78 5d 87 f0       	mov    0xf0875d78,%eax
f01063d2:	c1 e8 16             	shr    $0x16,%eax
f01063d5:	89 c2                	mov    %eax,%edx
f01063d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01063da:	39 c2                	cmp    %eax,%edx
f01063dc:	77 d6                	ja     f01063b4 <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f01063de:	a1 ac 5d 87 f0       	mov    0xf0875dac,%eax
f01063e3:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01063e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01063e9:	0f 22 d8             	mov    %eax,%cr3
}
f01063ec:	90                   	nop
f01063ed:	c9                   	leave  
f01063ee:	c3                   	ret    

f01063ef <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f01063ef:	55                   	push   %ebp
f01063f0:	89 e5                	mov    %esp,%ebp
f01063f2:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f01063f5:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f01063fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01063fd:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f0106404:	77 17                	ja     f010641d <setup_listing_to_all_page_tables_entries+0x2e>
f0106406:	ff 75 f4             	pushl  -0xc(%ebp)
f0106409:	68 14 5b 13 f0       	push   $0xf0135b14
f010640e:	68 ab 01 00 00       	push   $0x1ab
f0106413:	68 48 5b 13 f0       	push   $0xf0135b48
f0106418:	e8 e8 9d ff ff       	call   f0100205 <_panic>
f010641d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106420:	05 00 00 00 10       	add    $0x10000000,%eax
f0106425:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f0106428:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f010642d:	05 fc 0e 00 00       	add    $0xefc,%eax
f0106432:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106435:	83 ca 03             	or     $0x3,%edx
f0106438:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f010643a:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f010643f:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f0106445:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f010644a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010644d:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f0106454:	77 17                	ja     f010646d <setup_listing_to_all_page_tables_entries+0x7e>
f0106456:	ff 75 ec             	pushl  -0x14(%ebp)
f0106459:	68 14 5b 13 f0       	push   $0xf0135b14
f010645e:	68 b0 01 00 00       	push   $0x1b0
f0106463:	68 48 5b 13 f0       	push   $0xf0135b48
f0106468:	e8 98 9d ff ff       	call   f0100205 <_panic>
f010646d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106470:	05 00 00 00 10       	add    $0x10000000,%eax
f0106475:	83 c8 05             	or     $0x5,%eax
f0106478:	89 02                	mov    %eax,(%edx)

}
f010647a:	90                   	nop
f010647b:	c9                   	leave  
f010647c:	c3                   	ret    

f010647d <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010647d:	55                   	push   %ebp
f010647e:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0106480:	8b 45 08             	mov    0x8(%ebp),%eax
f0106483:	8b 15 54 5d 87 f0    	mov    0xf0875d54,%edx
f0106489:	29 d0                	sub    %edx,%eax
f010648b:	c1 f8 03             	sar    $0x3,%eax
f010648e:	89 c2                	mov    %eax,%edx
f0106490:	89 d0                	mov    %edx,%eax
f0106492:	c1 e0 02             	shl    $0x2,%eax
f0106495:	01 d0                	add    %edx,%eax
f0106497:	c1 e0 02             	shl    $0x2,%eax
f010649a:	01 d0                	add    %edx,%eax
f010649c:	c1 e0 02             	shl    $0x2,%eax
f010649f:	01 d0                	add    %edx,%eax
f01064a1:	89 c1                	mov    %eax,%ecx
f01064a3:	c1 e1 08             	shl    $0x8,%ecx
f01064a6:	01 c8                	add    %ecx,%eax
f01064a8:	89 c1                	mov    %eax,%ecx
f01064aa:	c1 e1 10             	shl    $0x10,%ecx
f01064ad:	01 c8                	add    %ecx,%eax
f01064af:	01 c0                	add    %eax,%eax
f01064b1:	01 d0                	add    %edx,%eax
}
f01064b3:	5d                   	pop    %ebp
f01064b4:	c3                   	ret    

f01064b5 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f01064b5:	55                   	push   %ebp
f01064b6:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01064b8:	ff 75 08             	pushl  0x8(%ebp)
f01064bb:	e8 bd ff ff ff       	call   f010647d <to_frame_number>
f01064c0:	83 c4 04             	add    $0x4,%esp
f01064c3:	c1 e0 0c             	shl    $0xc,%eax
}
f01064c6:	c9                   	leave  
f01064c7:	c3                   	ret    

f01064c8 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f01064c8:	55                   	push   %ebp
f01064c9:	89 e5                	mov    %esp,%ebp
f01064cb:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f01064ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01064d1:	c1 e8 0c             	shr    $0xc,%eax
f01064d4:	89 c2                	mov    %eax,%edx
f01064d6:	a1 10 5d 87 f0       	mov    0xf0875d10,%eax
f01064db:	39 c2                	cmp    %eax,%edx
f01064dd:	72 14                	jb     f01064f3 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f01064df:	83 ec 04             	sub    $0x4,%esp
f01064e2:	68 00 5c 13 f0       	push   $0xf0135c00
f01064e7:	6a 55                	push   $0x55
f01064e9:	68 25 5c 13 f0       	push   $0xf0135c25
f01064ee:	e8 12 9d ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f01064f3:	8b 15 54 5d 87 f0    	mov    0xf0875d54,%edx
f01064f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01064fc:	c1 e8 0c             	shr    $0xc,%eax
f01064ff:	89 c1                	mov    %eax,%ecx
f0106501:	89 c8                	mov    %ecx,%eax
f0106503:	01 c0                	add    %eax,%eax
f0106505:	01 c8                	add    %ecx,%eax
f0106507:	c1 e0 03             	shl    $0x3,%eax
f010650a:	01 d0                	add    %edx,%eax
}
f010650c:	c9                   	leave  
f010650d:	c3                   	ret    

f010650e <tlb_invalidate>:




void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f010650e:	55                   	push   %ebp
f010650f:	89 e5                	mov    %esp,%ebp
f0106511:	83 ec 10             	sub    $0x10,%esp
f0106514:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106517:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f010651a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010651d:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f0106520:	90                   	nop
f0106521:	c9                   	leave  
f0106522:	c3                   	ret    

f0106523 <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f0106523:	55                   	push   %ebp
f0106524:	89 e5                	mov    %esp,%ebp
f0106526:	53                   	push   %ebx
f0106527:	83 ec 24             	sub    $0x24,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&free_frame_list);
f010652a:	c7 05 18 5d 87 f0 00 	movl   $0x0,0xf0875d18
f0106531:	00 00 00 
f0106534:	c7 05 1c 5d 87 f0 00 	movl   $0x0,0xf0875d1c
f010653b:	00 00 00 
f010653e:	c7 05 24 5d 87 f0 00 	movl   $0x0,0xf0875d24
f0106545:	00 00 00 
	LIST_INIT(&modified_frame_list);
f0106548:	c7 05 b8 5c 87 f0 00 	movl   $0x0,0xf0875cb8
f010654f:	00 00 00 
f0106552:	c7 05 bc 5c 87 f0 00 	movl   $0x0,0xf0875cbc
f0106559:	00 00 00 
f010655c:	c7 05 c4 5c 87 f0 00 	movl   $0x0,0xf0875cc4
f0106563:	00 00 00 

	frames_info[0].references = 1;
f0106566:	a1 54 5d 87 f0       	mov    0xf0875d54,%eax
f010656b:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f0106571:	a1 54 5d 87 f0       	mov    0xf0875d54,%eax
f0106576:	83 c0 18             	add    $0x18,%eax
f0106579:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f010657f:	a1 54 5d 87 f0       	mov    0xf0875d54,%eax
f0106584:	83 c0 30             	add    $0x30,%eax
f0106587:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f010658d:	c7 05 60 5d 87 f0 00 	movl   $0xf0001000,0xf0875d60
f0106594:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f0106597:	c7 05 84 5d 87 f0 00 	movl   $0xf0002000,0xf0875d84
f010659e:	20 00 f0 
	i =0;
f01065a1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f01065a8:	eb 1f                	jmp    f01065c9 <initialize_paging+0xa6>
	{
		ptr_zero_page[i]=0;
f01065aa:	8b 15 60 5d 87 f0    	mov    0xf0875d60,%edx
f01065b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065b3:	01 d0                	add    %edx,%eax
f01065b5:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f01065b8:	8b 15 84 5d 87 f0    	mov    0xf0875d84,%edx
f01065be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065c1:	01 d0                	add    %edx,%eax
f01065c3:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f01065c6:	ff 45 f4             	incl   -0xc(%ebp)
f01065c9:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f01065d0:	7e d8                	jle    f01065aa <initialize_paging+0x87>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f01065d2:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f01065d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01065dc:	05 ff ff 09 00       	add    $0x9ffff,%eax
f01065e1:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01065e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01065e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01065ec:	f7 75 f0             	divl   -0x10(%ebp)
f01065ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01065f2:	29 d0                	sub    %edx,%eax
f01065f4:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01065f7:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f01065fe:	e9 e8 00 00 00       	jmp    f01066eb <initialize_paging+0x1c8>
	{

		initialize_frame_info(&(frames_info[i]));
f0106603:	8b 0d 54 5d 87 f0    	mov    0xf0875d54,%ecx
f0106609:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010660c:	89 d0                	mov    %edx,%eax
f010660e:	01 c0                	add    %eax,%eax
f0106610:	01 d0                	add    %edx,%eax
f0106612:	c1 e0 03             	shl    $0x3,%eax
f0106615:	01 c8                	add    %ecx,%eax
f0106617:	83 ec 0c             	sub    $0xc,%esp
f010661a:	50                   	push   %eax
f010661b:	e8 b7 02 00 00       	call   f01068d7 <initialize_frame_info>
f0106620:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f0106623:	8b 0d 54 5d 87 f0    	mov    0xf0875d54,%ecx
f0106629:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010662c:	89 d0                	mov    %edx,%eax
f010662e:	01 c0                	add    %eax,%eax
f0106630:	01 d0                	add    %edx,%eax
f0106632:	c1 e0 03             	shl    $0x3,%eax
f0106635:	01 c8                	add    %ecx,%eax
f0106637:	85 c0                	test   %eax,%eax
f0106639:	75 14                	jne    f010664f <initialize_paging+0x12c>
f010663b:	83 ec 04             	sub    $0x4,%esp
f010663e:	68 40 5c 13 f0       	push   $0xf0135c40
f0106643:	6a 5c                	push   $0x5c
f0106645:	68 63 5c 13 f0       	push   $0xf0135c63
f010664a:	e8 b6 9b ff ff       	call   f0100205 <_panic>
f010664f:	8b 0d 54 5d 87 f0    	mov    0xf0875d54,%ecx
f0106655:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106658:	89 d0                	mov    %edx,%eax
f010665a:	01 c0                	add    %eax,%eax
f010665c:	01 d0                	add    %edx,%eax
f010665e:	c1 e0 03             	shl    $0x3,%eax
f0106661:	01 c8                	add    %ecx,%eax
f0106663:	8b 15 18 5d 87 f0    	mov    0xf0875d18,%edx
f0106669:	89 10                	mov    %edx,(%eax)
f010666b:	8b 00                	mov    (%eax),%eax
f010666d:	85 c0                	test   %eax,%eax
f010666f:	74 1f                	je     f0106690 <initialize_paging+0x16d>
f0106671:	8b 15 18 5d 87 f0    	mov    0xf0875d18,%edx
f0106677:	8b 1d 54 5d 87 f0    	mov    0xf0875d54,%ebx
f010667d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0106680:	89 c8                	mov    %ecx,%eax
f0106682:	01 c0                	add    %eax,%eax
f0106684:	01 c8                	add    %ecx,%eax
f0106686:	c1 e0 03             	shl    $0x3,%eax
f0106689:	01 d8                	add    %ebx,%eax
f010668b:	89 42 04             	mov    %eax,0x4(%edx)
f010668e:	eb 19                	jmp    f01066a9 <initialize_paging+0x186>
f0106690:	8b 0d 54 5d 87 f0    	mov    0xf0875d54,%ecx
f0106696:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106699:	89 d0                	mov    %edx,%eax
f010669b:	01 c0                	add    %eax,%eax
f010669d:	01 d0                	add    %edx,%eax
f010669f:	c1 e0 03             	shl    $0x3,%eax
f01066a2:	01 c8                	add    %ecx,%eax
f01066a4:	a3 1c 5d 87 f0       	mov    %eax,0xf0875d1c
f01066a9:	8b 0d 54 5d 87 f0    	mov    0xf0875d54,%ecx
f01066af:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066b2:	89 d0                	mov    %edx,%eax
f01066b4:	01 c0                	add    %eax,%eax
f01066b6:	01 d0                	add    %edx,%eax
f01066b8:	c1 e0 03             	shl    $0x3,%eax
f01066bb:	01 c8                	add    %ecx,%eax
f01066bd:	a3 18 5d 87 f0       	mov    %eax,0xf0875d18
f01066c2:	8b 0d 54 5d 87 f0    	mov    0xf0875d54,%ecx
f01066c8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066cb:	89 d0                	mov    %edx,%eax
f01066cd:	01 c0                	add    %eax,%eax
f01066cf:	01 d0                	add    %edx,%eax
f01066d1:	c1 e0 03             	shl    $0x3,%eax
f01066d4:	01 c8                	add    %ecx,%eax
f01066d6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01066dd:	a1 24 5d 87 f0       	mov    0xf0875d24,%eax
f01066e2:	40                   	inc    %eax
f01066e3:	a3 24 5d 87 f0       	mov    %eax,0xf0875d24
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01066e8:	ff 45 f4             	incl   -0xc(%ebp)
f01066eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01066ee:	85 c0                	test   %eax,%eax
f01066f0:	79 05                	jns    f01066f7 <initialize_paging+0x1d4>
f01066f2:	05 ff 0f 00 00       	add    $0xfff,%eax
f01066f7:	c1 f8 0c             	sar    $0xc,%eax
f01066fa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01066fd:	0f 8f 00 ff ff ff    	jg     f0106603 <initialize_paging+0xe0>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0106703:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f010670a:	eb 1d                	jmp    f0106729 <initialize_paging+0x206>
	{
		frames_info[i].references = 1;
f010670c:	8b 0d 54 5d 87 f0    	mov    0xf0875d54,%ecx
f0106712:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106715:	89 d0                	mov    %edx,%eax
f0106717:	01 c0                	add    %eax,%eax
f0106719:	01 d0                	add    %edx,%eax
f010671b:	c1 e0 03             	shl    $0x3,%eax
f010671e:	01 c8                	add    %ecx,%eax
f0106720:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0106726:	ff 45 f4             	incl   -0xc(%ebp)
f0106729:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0106730:	7e da                	jle    f010670c <initialize_paging+0x1e9>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f0106732:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0106739:	a1 78 5d 87 f0       	mov    0xf0875d78,%eax
f010673e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0106741:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0106748:	77 14                	ja     f010675e <initialize_paging+0x23b>
f010674a:	ff 75 e0             	pushl  -0x20(%ebp)
f010674d:	68 80 5c 13 f0       	push   $0xf0135c80
f0106752:	6a 64                	push   $0x64
f0106754:	68 63 5c 13 f0       	push   $0xf0135c63
f0106759:	e8 a7 9a ff ff       	call   f0100205 <_panic>
f010675e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106761:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0106767:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010676a:	01 d0                	add    %edx,%eax
f010676c:	48                   	dec    %eax
f010676d:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106770:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106773:	ba 00 00 00 00       	mov    $0x0,%edx
f0106778:	f7 75 e4             	divl   -0x1c(%ebp)
f010677b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010677e:	29 d0                	sub    %edx,%eax
f0106780:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0106783:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f010678a:	eb 1d                	jmp    f01067a9 <initialize_paging+0x286>
	{
		frames_info[i].references = 1;
f010678c:	8b 0d 54 5d 87 f0    	mov    0xf0875d54,%ecx
f0106792:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106795:	89 d0                	mov    %edx,%eax
f0106797:	01 c0                	add    %eax,%eax
f0106799:	01 d0                	add    %edx,%eax
f010679b:	c1 e0 03             	shl    $0x3,%eax
f010679e:	01 c8                	add    %ecx,%eax
f01067a0:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f01067a6:	ff 45 f4             	incl   -0xc(%ebp)
f01067a9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01067ac:	85 c0                	test   %eax,%eax
f01067ae:	79 05                	jns    f01067b5 <initialize_paging+0x292>
f01067b0:	05 ff 0f 00 00       	add    $0xfff,%eax
f01067b5:	c1 f8 0c             	sar    $0xc,%eax
f01067b8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01067bb:	7f cf                	jg     f010678c <initialize_paging+0x269>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01067bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01067c0:	85 c0                	test   %eax,%eax
f01067c2:	79 05                	jns    f01067c9 <initialize_paging+0x2a6>
f01067c4:	05 ff 0f 00 00       	add    $0xfff,%eax
f01067c9:	c1 f8 0c             	sar    $0xc,%eax
f01067cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01067cf:	e9 e8 00 00 00       	jmp    f01068bc <initialize_paging+0x399>
	{
		initialize_frame_info(&(frames_info[i]));
f01067d4:	8b 0d 54 5d 87 f0    	mov    0xf0875d54,%ecx
f01067da:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067dd:	89 d0                	mov    %edx,%eax
f01067df:	01 c0                	add    %eax,%eax
f01067e1:	01 d0                	add    %edx,%eax
f01067e3:	c1 e0 03             	shl    $0x3,%eax
f01067e6:	01 c8                	add    %ecx,%eax
f01067e8:	83 ec 0c             	sub    $0xc,%esp
f01067eb:	50                   	push   %eax
f01067ec:	e8 e6 00 00 00       	call   f01068d7 <initialize_frame_info>
f01067f1:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f01067f4:	8b 0d 54 5d 87 f0    	mov    0xf0875d54,%ecx
f01067fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067fd:	89 d0                	mov    %edx,%eax
f01067ff:	01 c0                	add    %eax,%eax
f0106801:	01 d0                	add    %edx,%eax
f0106803:	c1 e0 03             	shl    $0x3,%eax
f0106806:	01 c8                	add    %ecx,%eax
f0106808:	85 c0                	test   %eax,%eax
f010680a:	75 14                	jne    f0106820 <initialize_paging+0x2fd>
f010680c:	83 ec 04             	sub    $0x4,%esp
f010680f:	68 40 5c 13 f0       	push   $0xf0135c40
f0106814:	6a 70                	push   $0x70
f0106816:	68 63 5c 13 f0       	push   $0xf0135c63
f010681b:	e8 e5 99 ff ff       	call   f0100205 <_panic>
f0106820:	8b 0d 54 5d 87 f0    	mov    0xf0875d54,%ecx
f0106826:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106829:	89 d0                	mov    %edx,%eax
f010682b:	01 c0                	add    %eax,%eax
f010682d:	01 d0                	add    %edx,%eax
f010682f:	c1 e0 03             	shl    $0x3,%eax
f0106832:	01 c8                	add    %ecx,%eax
f0106834:	8b 15 18 5d 87 f0    	mov    0xf0875d18,%edx
f010683a:	89 10                	mov    %edx,(%eax)
f010683c:	8b 00                	mov    (%eax),%eax
f010683e:	85 c0                	test   %eax,%eax
f0106840:	74 1f                	je     f0106861 <initialize_paging+0x33e>
f0106842:	8b 15 18 5d 87 f0    	mov    0xf0875d18,%edx
f0106848:	8b 1d 54 5d 87 f0    	mov    0xf0875d54,%ebx
f010684e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0106851:	89 c8                	mov    %ecx,%eax
f0106853:	01 c0                	add    %eax,%eax
f0106855:	01 c8                	add    %ecx,%eax
f0106857:	c1 e0 03             	shl    $0x3,%eax
f010685a:	01 d8                	add    %ebx,%eax
f010685c:	89 42 04             	mov    %eax,0x4(%edx)
f010685f:	eb 19                	jmp    f010687a <initialize_paging+0x357>
f0106861:	8b 0d 54 5d 87 f0    	mov    0xf0875d54,%ecx
f0106867:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010686a:	89 d0                	mov    %edx,%eax
f010686c:	01 c0                	add    %eax,%eax
f010686e:	01 d0                	add    %edx,%eax
f0106870:	c1 e0 03             	shl    $0x3,%eax
f0106873:	01 c8                	add    %ecx,%eax
f0106875:	a3 1c 5d 87 f0       	mov    %eax,0xf0875d1c
f010687a:	8b 0d 54 5d 87 f0    	mov    0xf0875d54,%ecx
f0106880:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106883:	89 d0                	mov    %edx,%eax
f0106885:	01 c0                	add    %eax,%eax
f0106887:	01 d0                	add    %edx,%eax
f0106889:	c1 e0 03             	shl    $0x3,%eax
f010688c:	01 c8                	add    %ecx,%eax
f010688e:	a3 18 5d 87 f0       	mov    %eax,0xf0875d18
f0106893:	8b 0d 54 5d 87 f0    	mov    0xf0875d54,%ecx
f0106899:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010689c:	89 d0                	mov    %edx,%eax
f010689e:	01 c0                	add    %eax,%eax
f01068a0:	01 d0                	add    %edx,%eax
f01068a2:	c1 e0 03             	shl    $0x3,%eax
f01068a5:	01 c8                	add    %ecx,%eax
f01068a7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01068ae:	a1 24 5d 87 f0       	mov    0xf0875d24,%eax
f01068b3:	40                   	inc    %eax
f01068b4:	a3 24 5d 87 f0       	mov    %eax,0xf0875d24
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01068b9:	ff 45 f4             	incl   -0xc(%ebp)
f01068bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01068bf:	a1 10 5d 87 f0       	mov    0xf0875d10,%eax
f01068c4:	39 c2                	cmp    %eax,%edx
f01068c6:	0f 82 08 ff ff ff    	jb     f01067d4 <initialize_paging+0x2b1>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f01068cc:	e8 eb c8 ff ff       	call   f01031bc <initialize_disk_page_file>
}
f01068d1:	90                   	nop
f01068d2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01068d5:	c9                   	leave  
f01068d6:	c3                   	ret    

f01068d7 <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct FrameInfo *ptr_frame_info)
{
f01068d7:	55                   	push   %ebp
f01068d8:	89 e5                	mov    %esp,%ebp
f01068da:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f01068dd:	83 ec 04             	sub    $0x4,%esp
f01068e0:	6a 18                	push   $0x18
f01068e2:	6a 00                	push   $0x0
f01068e4:	ff 75 08             	pushl  0x8(%ebp)
f01068e7:	e8 ce a7 02 00       	call   f01310ba <memset>
f01068ec:	83 c4 10             	add    $0x10,%esp
}
f01068ef:	90                   	nop
f01068f0:	c9                   	leave  
f01068f1:	c3                   	ret    

f01068f2 <allocate_frame>:
// Hint: references should not be incremented

//extern void env_free(struct Env *e);

int allocate_frame(struct FrameInfo **ptr_frame_info)
{
f01068f2:	55                   	push   %ebp
f01068f3:	89 e5                	mov    %esp,%ebp
f01068f5:	83 ec 18             	sub    $0x18,%esp
	*ptr_frame_info = LIST_FIRST(&free_frame_list);
f01068f8:	8b 15 18 5d 87 f0    	mov    0xf0875d18,%edx
f01068fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0106901:	89 10                	mov    %edx,(%eax)
	int c = 0;
f0106903:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (*ptr_frame_info == NULL)
f010690a:	8b 45 08             	mov    0x8(%ebp),%eax
f010690d:	8b 00                	mov    (%eax),%eax
f010690f:	85 c0                	test   %eax,%eax
f0106911:	75 17                	jne    f010692a <allocate_frame+0x38>
	{
		//[KERNEL MEM] Free RAM when it's FULL
		// Write your code here, remove the panic and write your code
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f0106913:	83 ec 04             	sub    $0x4,%esp
f0106916:	68 b4 5c 13 f0       	push   $0xf0135cb4
f010691b:	68 99 00 00 00       	push   $0x99
f0106920:	68 63 5c 13 f0       	push   $0xf0135c63
f0106925:	e8 db 98 ff ff       	call   f0100205 <_panic>
	}

	LIST_REMOVE(&free_frame_list,*ptr_frame_info);
f010692a:	8b 45 08             	mov    0x8(%ebp),%eax
f010692d:	8b 00                	mov    (%eax),%eax
f010692f:	85 c0                	test   %eax,%eax
f0106931:	75 17                	jne    f010694a <allocate_frame+0x58>
f0106933:	83 ec 04             	sub    $0x4,%esp
f0106936:	68 01 5d 13 f0       	push   $0xf0135d01
f010693b:	68 9c 00 00 00       	push   $0x9c
f0106940:	68 63 5c 13 f0       	push   $0xf0135c63
f0106945:	e8 bb 98 ff ff       	call   f0100205 <_panic>
f010694a:	8b 45 08             	mov    0x8(%ebp),%eax
f010694d:	8b 00                	mov    (%eax),%eax
f010694f:	8b 00                	mov    (%eax),%eax
f0106951:	85 c0                	test   %eax,%eax
f0106953:	74 14                	je     f0106969 <allocate_frame+0x77>
f0106955:	8b 45 08             	mov    0x8(%ebp),%eax
f0106958:	8b 00                	mov    (%eax),%eax
f010695a:	8b 00                	mov    (%eax),%eax
f010695c:	8b 55 08             	mov    0x8(%ebp),%edx
f010695f:	8b 12                	mov    (%edx),%edx
f0106961:	8b 52 04             	mov    0x4(%edx),%edx
f0106964:	89 50 04             	mov    %edx,0x4(%eax)
f0106967:	eb 0d                	jmp    f0106976 <allocate_frame+0x84>
f0106969:	8b 45 08             	mov    0x8(%ebp),%eax
f010696c:	8b 00                	mov    (%eax),%eax
f010696e:	8b 40 04             	mov    0x4(%eax),%eax
f0106971:	a3 1c 5d 87 f0       	mov    %eax,0xf0875d1c
f0106976:	8b 45 08             	mov    0x8(%ebp),%eax
f0106979:	8b 00                	mov    (%eax),%eax
f010697b:	8b 40 04             	mov    0x4(%eax),%eax
f010697e:	85 c0                	test   %eax,%eax
f0106980:	74 13                	je     f0106995 <allocate_frame+0xa3>
f0106982:	8b 45 08             	mov    0x8(%ebp),%eax
f0106985:	8b 00                	mov    (%eax),%eax
f0106987:	8b 40 04             	mov    0x4(%eax),%eax
f010698a:	8b 55 08             	mov    0x8(%ebp),%edx
f010698d:	8b 12                	mov    (%edx),%edx
f010698f:	8b 12                	mov    (%edx),%edx
f0106991:	89 10                	mov    %edx,(%eax)
f0106993:	eb 0c                	jmp    f01069a1 <allocate_frame+0xaf>
f0106995:	8b 45 08             	mov    0x8(%ebp),%eax
f0106998:	8b 00                	mov    (%eax),%eax
f010699a:	8b 00                	mov    (%eax),%eax
f010699c:	a3 18 5d 87 f0       	mov    %eax,0xf0875d18
f01069a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01069a4:	8b 00                	mov    (%eax),%eax
f01069a6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01069ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01069af:	8b 00                	mov    (%eax),%eax
f01069b1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01069b8:	a1 24 5d 87 f0       	mov    0xf0875d24,%eax
f01069bd:	48                   	dec    %eax
f01069be:	a3 24 5d 87 f0       	mov    %eax,0xf0875d24

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/

	if((*ptr_frame_info)->isBuffered)
f01069c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01069c6:	8b 00                	mov    (%eax),%eax
f01069c8:	8a 40 14             	mov    0x14(%eax),%al
f01069cb:	84 c0                	test   %al,%al
f01069cd:	74 20                	je     f01069ef <allocate_frame+0xfd>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->environment->env_page_directory,(*ptr_frame_info)->va);
f01069cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01069d2:	8b 00                	mov    (%eax),%eax
f01069d4:	8b 50 0c             	mov    0xc(%eax),%edx
f01069d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01069da:	8b 00                	mov    (%eax),%eax
f01069dc:	8b 40 10             	mov    0x10(%eax),%eax
f01069df:	8b 40 5c             	mov    0x5c(%eax),%eax
f01069e2:	83 ec 08             	sub    $0x8,%esp
f01069e5:	52                   	push   %edx
f01069e6:	50                   	push   %eax
f01069e7:	e8 d0 12 00 00       	call   f0107cbc <pt_clear_page_table_entry>
f01069ec:	83 c4 10             	add    $0x10,%esp
	}

	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f01069ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01069f2:	8b 00                	mov    (%eax),%eax
f01069f4:	83 ec 0c             	sub    $0xc,%esp
f01069f7:	50                   	push   %eax
f01069f8:	e8 da fe ff ff       	call   f01068d7 <initialize_frame_info>
f01069fd:	83 c4 10             	add    $0x10,%esp
	return 0;
f0106a00:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106a05:	c9                   	leave  
f0106a06:	c3                   	ret    

f0106a07 <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct FrameInfo *ptr_frame_info)
{
f0106a07:	55                   	push   %ebp
f0106a08:	89 e5                	mov    %esp,%ebp
f0106a0a:	83 ec 08             	sub    $0x8,%esp
	/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	initialize_frame_info(ptr_frame_info);
f0106a0d:	83 ec 0c             	sub    $0xc,%esp
f0106a10:	ff 75 08             	pushl  0x8(%ebp)
f0106a13:	e8 bf fe ff ff       	call   f01068d7 <initialize_frame_info>
f0106a18:	83 c4 10             	add    $0x10,%esp
	/*=============================================================================*/

	// Fill this function in
	LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f0106a1b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0106a1f:	75 17                	jne    f0106a38 <free_frame+0x31>
f0106a21:	83 ec 04             	sub    $0x4,%esp
f0106a24:	68 40 5c 13 f0       	push   $0xf0135c40
f0106a29:	68 b9 00 00 00       	push   $0xb9
f0106a2e:	68 63 5c 13 f0       	push   $0xf0135c63
f0106a33:	e8 cd 97 ff ff       	call   f0100205 <_panic>
f0106a38:	8b 15 18 5d 87 f0    	mov    0xf0875d18,%edx
f0106a3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a41:	89 10                	mov    %edx,(%eax)
f0106a43:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a46:	8b 00                	mov    (%eax),%eax
f0106a48:	85 c0                	test   %eax,%eax
f0106a4a:	74 0d                	je     f0106a59 <free_frame+0x52>
f0106a4c:	a1 18 5d 87 f0       	mov    0xf0875d18,%eax
f0106a51:	8b 55 08             	mov    0x8(%ebp),%edx
f0106a54:	89 50 04             	mov    %edx,0x4(%eax)
f0106a57:	eb 08                	jmp    f0106a61 <free_frame+0x5a>
f0106a59:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a5c:	a3 1c 5d 87 f0       	mov    %eax,0xf0875d1c
f0106a61:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a64:	a3 18 5d 87 f0       	mov    %eax,0xf0875d18
f0106a69:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a6c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106a73:	a1 24 5d 87 f0       	mov    0xf0875d24,%eax
f0106a78:	40                   	inc    %eax
f0106a79:	a3 24 5d 87 f0       	mov    %eax,0xf0875d24
	//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));


}
f0106a7e:	90                   	nop
f0106a7f:	c9                   	leave  
f0106a80:	c3                   	ret    

f0106a81 <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct FrameInfo* ptr_frame_info)
{
f0106a81:	55                   	push   %ebp
f0106a82:	89 e5                	mov    %esp,%ebp
f0106a84:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f0106a87:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a8a:	8b 40 08             	mov    0x8(%eax),%eax
f0106a8d:	48                   	dec    %eax
f0106a8e:	8b 55 08             	mov    0x8(%ebp),%edx
f0106a91:	66 89 42 08          	mov    %ax,0x8(%edx)
f0106a95:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a98:	8b 40 08             	mov    0x8(%eax),%eax
f0106a9b:	66 85 c0             	test   %ax,%ax
f0106a9e:	75 0e                	jne    f0106aae <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f0106aa0:	83 ec 0c             	sub    $0xc,%esp
f0106aa3:	ff 75 08             	pushl  0x8(%ebp)
f0106aa6:	e8 5c ff ff ff       	call   f0106a07 <free_frame>
f0106aab:	83 c4 10             	add    $0x10,%esp
}
f0106aae:	90                   	nop
f0106aaf:	c9                   	leave  
f0106ab0:	c3                   	ret    

f0106ab1 <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106ab1:	55                   	push   %ebp
f0106ab2:	89 e5                	mov    %esp,%ebp
f0106ab4:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106ab7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106aba:	c1 e8 16             	shr    $0x16,%eax
f0106abd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106ac4:	8b 45 08             	mov    0x8(%ebp),%eax
f0106ac7:	01 d0                	add    %edx,%eax
f0106ac9:	8b 00                	mov    (%eax),%eax
f0106acb:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//2022: check PERM_PRESENT of the table first before calculating its PA
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0106ace:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ad1:	83 e0 01             	and    $0x1,%eax
f0106ad4:	85 c0                	test   %eax,%eax
f0106ad6:	74 74                	je     f0106b4c <get_page_table+0x9b>
	{
		//	cprintf("gpt .07, page_directory_entry= %x \n",page_directory_entry);
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106ad8:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106adf:	77 1d                	ja     f0106afe <get_page_table+0x4d>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106ae1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ae4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106ae9:	83 ec 0c             	sub    $0xc,%esp
f0106aec:	50                   	push   %eax
f0106aed:	e8 85 0f 00 00       	call   f0107a77 <kheap_virtual_address>
f0106af2:	83 c4 10             	add    $0x10,%esp
f0106af5:	89 c2                	mov    %eax,%edx
f0106af7:	8b 45 10             	mov    0x10(%ebp),%eax
f0106afa:	89 10                	mov    %edx,(%eax)
f0106afc:	eb 44                	jmp    f0106b42 <get_page_table+0x91>
			//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106afe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b01:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106b06:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106b09:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106b0c:	c1 e8 0c             	shr    $0xc,%eax
f0106b0f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106b12:	a1 10 5d 87 f0       	mov    0xf0875d10,%eax
f0106b17:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0106b1a:	72 17                	jb     f0106b33 <get_page_table+0x82>
f0106b1c:	ff 75 f0             	pushl  -0x10(%ebp)
f0106b1f:	68 20 5d 13 f0       	push   $0xf0135d20
f0106b24:	68 e2 00 00 00       	push   $0xe2
f0106b29:	68 63 5c 13 f0       	push   $0xf0135c63
f0106b2e:	e8 d2 96 ff ff       	call   f0100205 <_panic>
f0106b33:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106b36:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106b3b:	89 c2                	mov    %eax,%edx
f0106b3d:	8b 45 10             	mov    0x10(%ebp),%eax
f0106b40:	89 10                	mov    %edx,(%eax)
		}
		return TABLE_IN_MEMORY;
f0106b42:	b8 00 00 00 00       	mov    $0x0,%eax
f0106b47:	e9 b9 00 00 00       	jmp    f0106c05 <get_page_table+0x154>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0106b4c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106b50:	0f 84 a1 00 00 00    	je     f0106bf7 <get_page_table+0x146>
f0106b56:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b59:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f0106b5c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106b5f:	0f 22 d0             	mov    %eax,%cr2
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f0106b62:	83 ec 0c             	sub    $0xc,%esp
f0106b65:	6a 00                	push   $0x0
f0106b67:	e8 43 5b 00 00       	call   f010c6af <fault_handler>
f0106b6c:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106b6f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b72:	c1 e8 16             	shr    $0x16,%eax
f0106b75:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106b7c:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b7f:	01 d0                	add    %edx,%eax
f0106b81:	8b 00                	mov    (%eax),%eax
f0106b83:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106b86:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106b8d:	77 1d                	ja     f0106bac <get_page_table+0xfb>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106b8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b92:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106b97:	83 ec 0c             	sub    $0xc,%esp
f0106b9a:	50                   	push   %eax
f0106b9b:	e8 d7 0e 00 00       	call   f0107a77 <kheap_virtual_address>
f0106ba0:	83 c4 10             	add    $0x10,%esp
f0106ba3:	89 c2                	mov    %eax,%edx
f0106ba5:	8b 45 10             	mov    0x10(%ebp),%eax
f0106ba8:	89 10                	mov    %edx,(%eax)
f0106baa:	eb 44                	jmp    f0106bf0 <get_page_table+0x13f>
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106bac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106baf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106bb4:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106bb7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106bba:	c1 e8 0c             	shr    $0xc,%eax
f0106bbd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106bc0:	a1 10 5d 87 f0       	mov    0xf0875d10,%eax
f0106bc5:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106bc8:	72 17                	jb     f0106be1 <get_page_table+0x130>
f0106bca:	ff 75 e8             	pushl  -0x18(%ebp)
f0106bcd:	68 20 5d 13 f0       	push   $0xf0135d20
f0106bd2:	68 fa 00 00 00       	push   $0xfa
f0106bd7:	68 63 5c 13 f0       	push   $0xf0135c63
f0106bdc:	e8 24 96 ff ff       	call   f0100205 <_panic>
f0106be1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106be4:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106be9:	89 c2                	mov    %eax,%edx
f0106beb:	8b 45 10             	mov    0x10(%ebp),%eax
f0106bee:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f0106bf0:	b8 00 00 00 00       	mov    $0x0,%eax
f0106bf5:	eb 0e                	jmp    f0106c05 <get_page_table+0x154>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f0106bf7:	8b 45 10             	mov    0x10(%ebp),%eax
f0106bfa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f0106c00:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f0106c05:	c9                   	leave  
f0106c06:	c3                   	ret    

f0106c07 <create_page_table>:

void * create_page_table(uint32 *ptr_directory, const uint32 virtual_address)
{
f0106c07:	55                   	push   %ebp
f0106c08:	89 e5                	mov    %esp,%ebp
f0106c0a:	53                   	push   %ebx
f0106c0b:	83 ec 14             	sub    $0x14,%esp
	//	b.	clear the TLB cache (using "tlbflush()")

	//change this "return" according to your answer

#if USE_KHEAP
	uint32 * ptr_page_table = kmalloc(PAGE_SIZE);
f0106c0e:	83 ec 0c             	sub    $0xc,%esp
f0106c11:	68 00 10 00 00       	push   $0x1000
f0106c16:	e8 6a 0c 00 00       	call   f0107885 <kmalloc>
f0106c1b:	83 c4 10             	add    $0x10,%esp
f0106c1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_page_table == NULL)
f0106c21:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106c25:	75 17                	jne    f0106c3e <create_page_table+0x37>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0106c27:	83 ec 04             	sub    $0x4,%esp
f0106c2a:	68 4f 5d 13 f0       	push   $0xf0135d4f
f0106c2f:	68 18 01 00 00       	push   $0x118
f0106c34:	68 63 5c 13 f0       	push   $0xf0135c63
f0106c39:	e8 c7 95 ff ff       	call   f0100205 <_panic>
	}
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f0106c3e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106c41:	c1 e8 16             	shr    $0x16,%eax
f0106c44:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106c4b:	8b 45 08             	mov    0x8(%ebp),%eax
f0106c4e:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f0106c51:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c54:	83 ec 0c             	sub    $0xc,%esp
f0106c57:	50                   	push   %eax
f0106c58:	e8 46 0e 00 00       	call   f0107aa3 <kheap_physical_address>
f0106c5d:	83 c4 10             	add    $0x10,%esp
f0106c60:	83 c8 07             	or     $0x7,%eax
f0106c63:	89 03                	mov    %eax,(%ebx)
			kheap_physical_address((unsigned int)ptr_page_table)
			, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);

	//================
	memset(ptr_page_table , 0, PAGE_SIZE);
f0106c65:	83 ec 04             	sub    $0x4,%esp
f0106c68:	68 00 10 00 00       	push   $0x1000
f0106c6d:	6a 00                	push   $0x0
f0106c6f:	ff 75 f4             	pushl  -0xc(%ebp)
f0106c72:	e8 43 a4 02 00       	call   f01310ba <memset>
f0106c77:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106c7a:	0f 20 d8             	mov    %cr3,%eax
f0106c7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106c80:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106c83:	0f 22 d8             	mov    %eax,%cr3
#else
	uint32 * ptr_page_table ;
	__static_cpt(ptr_directory, virtual_address, &ptr_page_table) ;
#endif

	return ptr_page_table;
f0106c86:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0106c89:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106c8c:	c9                   	leave  
f0106c8d:	c3                   	ret    

f0106c8e <__static_cpt>:

void __static_cpt(uint32 *ptr_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106c8e:	55                   	push   %ebp
f0106c8f:	89 e5                	mov    %esp,%ebp
f0106c91:	83 ec 28             	sub    $0x28,%esp
	struct FrameInfo* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f0106c94:	83 ec 0c             	sub    $0xc,%esp
f0106c97:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0106c9a:	50                   	push   %eax
f0106c9b:	e8 52 fc ff ff       	call   f01068f2 <allocate_frame>
f0106ca0:	83 c4 10             	add    $0x10,%esp
f0106ca3:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f0106ca6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106ca9:	83 ec 0c             	sub    $0xc,%esp
f0106cac:	50                   	push   %eax
f0106cad:	e8 03 f8 ff ff       	call   f01064b5 <to_physical_address>
f0106cb2:	83 c4 10             	add    $0x10,%esp
f0106cb5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0106cb8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106cbb:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106cbe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106cc1:	c1 e8 0c             	shr    $0xc,%eax
f0106cc4:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106cc7:	a1 10 5d 87 f0       	mov    0xf0875d10,%eax
f0106ccc:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0106ccf:	72 17                	jb     f0106ce8 <__static_cpt+0x5a>
f0106cd1:	ff 75 ec             	pushl  -0x14(%ebp)
f0106cd4:	68 20 5d 13 f0       	push   $0xf0135d20
f0106cd9:	68 30 01 00 00       	push   $0x130
f0106cde:	68 63 5c 13 f0       	push   $0xf0135c63
f0106ce3:	e8 1d 95 ff ff       	call   f0100205 <_panic>
f0106ce8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106ceb:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106cf0:	89 c2                	mov    %eax,%edx
f0106cf2:	8b 45 10             	mov    0x10(%ebp),%eax
f0106cf5:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f0106cf7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106cfa:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f0106d00:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106d03:	c1 e8 16             	shr    $0x16,%eax
f0106d06:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106d0d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106d10:	01 d0                	add    %edx,%eax
f0106d12:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106d15:	83 ca 07             	or     $0x7,%edx
f0106d18:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f0106d1a:	8b 45 10             	mov    0x10(%ebp),%eax
f0106d1d:	8b 00                	mov    (%eax),%eax
f0106d1f:	83 ec 04             	sub    $0x4,%esp
f0106d22:	68 00 10 00 00       	push   $0x1000
f0106d27:	6a 00                	push   $0x0
f0106d29:	50                   	push   %eax
f0106d2a:	e8 8b a3 02 00       	call   f01310ba <memset>
f0106d2f:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106d32:	0f 20 d8             	mov    %cr3,%eax
f0106d35:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106d38:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106d3b:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0106d3e:	90                   	nop
f0106d3f:	c9                   	leave  
f0106d40:	c3                   	ret    

f0106d41 <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106d41:	55                   	push   %ebp
f0106d42:	89 e5                	mov    %esp,%ebp
f0106d44:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106d47:	ff 75 0c             	pushl  0xc(%ebp)
f0106d4a:	e8 66 f7 ff ff       	call   f01064b5 <to_physical_address>
f0106d4f:	83 c4 04             	add    $0x4,%esp
f0106d52:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f0106d55:	83 ec 04             	sub    $0x4,%esp
f0106d58:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0106d5b:	50                   	push   %eax
f0106d5c:	ff 75 10             	pushl  0x10(%ebp)
f0106d5f:	ff 75 08             	pushl  0x8(%ebp)
f0106d62:	e8 4a fd ff ff       	call   f0106ab1 <get_page_table>
f0106d67:	83 c4 10             	add    $0x10,%esp
f0106d6a:	83 f8 01             	cmp    $0x1,%eax
f0106d6d:	75 1b                	jne    f0106d8a <map_frame+0x49>
		//page_directory_entry = ptr_page_directory[PDX(virtual_address)];
		//ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
		=============================================================================================*/
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(ptr_page_directory, (uint32)virtual_address);
f0106d6f:	83 ec 08             	sub    $0x8,%esp
f0106d72:	ff 75 10             	pushl  0x10(%ebp)
f0106d75:	ff 75 08             	pushl  0x8(%ebp)
f0106d78:	e8 8a fe ff ff       	call   f0106c07 <create_page_table>
f0106d7d:	83 c4 10             	add    $0x10,%esp
f0106d80:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//cprintf("======>page table created using kheap for VA %x at dir = %x PT = %x\n", virtual_address, ptr_page_directory[PDX(virtual_address)], ptr_page_table);
			uint32* ptr_page_table2 =NULL;
f0106d83:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0106d8a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106d8d:	8b 55 10             	mov    0x10(%ebp),%edx
f0106d90:	c1 ea 0c             	shr    $0xc,%edx
f0106d93:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106d99:	c1 e2 02             	shl    $0x2,%edx
f0106d9c:	01 d0                	add    %edx,%eax
f0106d9e:	8b 00                	mov    (%eax),%eax
f0106da0:	89 45 ec             	mov    %eax,-0x14(%ebp)

	}*/

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f0106da3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106da6:	83 e0 01             	and    $0x1,%eax
f0106da9:	85 c0                	test   %eax,%eax
f0106dab:	74 25                	je     f0106dd2 <map_frame+0x91>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f0106dad:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106db0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106db5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106db8:	75 07                	jne    f0106dc1 <map_frame+0x80>
			return 0;
f0106dba:	b8 00 00 00 00       	mov    $0x0,%eax
f0106dbf:	eb 43                	jmp    f0106e04 <map_frame+0xc3>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f0106dc1:	83 ec 08             	sub    $0x8,%esp
f0106dc4:	ff 75 10             	pushl  0x10(%ebp)
f0106dc7:	ff 75 08             	pushl  0x8(%ebp)
f0106dca:	e8 a7 00 00 00       	call   f0106e76 <unmap_frame>
f0106dcf:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f0106dd2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106dd5:	8b 40 08             	mov    0x8(%eax),%eax
f0106dd8:	40                   	inc    %eax
f0106dd9:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106ddc:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106de0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106de3:	8b 55 10             	mov    0x10(%ebp),%edx
f0106de6:	c1 ea 0c             	shr    $0xc,%edx
f0106de9:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106def:	c1 e2 02             	shl    $0x2,%edx
f0106df2:	01 c2                	add    %eax,%edx
f0106df4:	8b 45 14             	mov    0x14(%ebp),%eax
f0106df7:	0b 45 f4             	or     -0xc(%ebp),%eax
f0106dfa:	83 c8 01             	or     $0x1,%eax
f0106dfd:	89 02                	mov    %eax,(%edx)

	return 0;
f0106dff:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106e04:	c9                   	leave  
f0106e05:	c3                   	ret    

f0106e06 <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct FrameInfo * get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table)
{
f0106e06:	55                   	push   %ebp
f0106e07:	89 e5                	mov    %esp,%ebp
f0106e09:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f0106e0c:	83 ec 04             	sub    $0x4,%esp
f0106e0f:	ff 75 10             	pushl  0x10(%ebp)
f0106e12:	ff 75 0c             	pushl  0xc(%ebp)
f0106e15:	ff 75 08             	pushl  0x8(%ebp)
f0106e18:	e8 94 fc ff ff       	call   f0106ab1 <get_page_table>
f0106e1d:	83 c4 10             	add    $0x10,%esp
f0106e20:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f0106e23:	8b 45 10             	mov    0x10(%ebp),%eax
f0106e26:	8b 00                	mov    (%eax),%eax
f0106e28:	85 c0                	test   %eax,%eax
f0106e2a:	74 43                	je     f0106e6f <get_frame_info+0x69>
	{
		uint32 index_page_table = PTX(virtual_address);
f0106e2c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106e2f:	c1 e8 0c             	shr    $0xc,%eax
f0106e32:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106e37:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f0106e3a:	8b 45 10             	mov    0x10(%ebp),%eax
f0106e3d:	8b 00                	mov    (%eax),%eax
f0106e3f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106e42:	c1 e2 02             	shl    $0x2,%edx
f0106e45:	01 d0                	add    %edx,%eax
f0106e47:	8b 00                	mov    (%eax),%eax
f0106e49:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if( page_table_entry != 0)
f0106e4c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106e50:	74 16                	je     f0106e68 <get_frame_info+0x62>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f0106e52:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106e55:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106e5a:	83 ec 0c             	sub    $0xc,%esp
f0106e5d:	50                   	push   %eax
f0106e5e:	e8 65 f6 ff ff       	call   f01064c8 <to_frame_info>
f0106e63:	83 c4 10             	add    $0x10,%esp
f0106e66:	eb 0c                	jmp    f0106e74 <get_frame_info+0x6e>
		}
		return 0;
f0106e68:	b8 00 00 00 00       	mov    $0x0,%eax
f0106e6d:	eb 05                	jmp    f0106e74 <get_frame_info+0x6e>
	}
	return 0;
f0106e6f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106e74:	c9                   	leave  
f0106e75:	c3                   	ret    

f0106e76 <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, uint32 virtual_address)
{
f0106e76:	55                   	push   %ebp
f0106e77:	89 e5                	mov    %esp,%ebp
f0106e79:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct FrameInfo* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f0106e7c:	83 ec 04             	sub    $0x4,%esp
f0106e7f:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0106e82:	50                   	push   %eax
f0106e83:	ff 75 0c             	pushl  0xc(%ebp)
f0106e86:	ff 75 08             	pushl  0x8(%ebp)
f0106e89:	e8 78 ff ff ff       	call   f0106e06 <get_frame_info>
f0106e8e:	83 c4 10             	add    $0x10,%esp
f0106e91:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f0106e94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106e98:	74 60                	je     f0106efa <unmap_frame+0x84>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0106e9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106e9d:	8a 40 14             	mov    0x14(%eax),%al
f0106ea0:	84 c0                	test   %al,%al
f0106ea2:	74 1c                	je     f0106ec0 <unmap_frame+0x4a>
f0106ea4:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106eab:	77 13                	ja     f0106ec0 <unmap_frame+0x4a>
			cprintf("Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f0106ead:	83 ec 08             	sub    $0x8,%esp
f0106eb0:	ff 75 0c             	pushl  0xc(%ebp)
f0106eb3:	68 6c 5d 13 f0       	push   $0xf0135d6c
f0106eb8:	e8 51 9e ff ff       	call   f0100d0e <cprintf>
f0106ebd:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f0106ec0:	83 ec 0c             	sub    $0xc,%esp
f0106ec3:	ff 75 f4             	pushl  -0xc(%ebp)
f0106ec6:	e8 b6 fb ff ff       	call   f0106a81 <decrement_references>
f0106ecb:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0106ece:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106ed1:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106ed4:	c1 ea 0c             	shr    $0xc,%edx
f0106ed7:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106edd:	c1 e2 02             	shl    $0x2,%edx
f0106ee0:	01 d0                	add    %edx,%eax
f0106ee2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(ptr_page_directory, (void *)virtual_address);
f0106ee8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106eeb:	83 ec 08             	sub    $0x8,%esp
f0106eee:	50                   	push   %eax
f0106eef:	ff 75 08             	pushl  0x8(%ebp)
f0106ef2:	e8 17 f6 ff ff       	call   f010650e <tlb_invalidate>
f0106ef7:	83 c4 10             	add    $0x10,%esp
	}
}
f0106efa:	90                   	nop
f0106efb:	c9                   	leave  
f0106efc:	c3                   	ret    

f0106efd <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106efd:	55                   	push   %ebp
f0106efe:	89 e5                	mov    %esp,%ebp
f0106f00:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106f03:	ff 75 0c             	pushl  0xc(%ebp)
f0106f06:	e8 aa f5 ff ff       	call   f01064b5 <to_physical_address>
f0106f0b:	83 c4 04             	add    $0x4,%esp
f0106f0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106f11:	8b 45 10             	mov    0x10(%ebp),%eax
f0106f14:	c1 e8 16             	shr    $0x16,%eax
f0106f17:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106f1e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106f21:	01 d0                	add    %edx,%eax
f0106f23:	8b 00                	mov    (%eax),%eax
f0106f25:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106f28:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0106f2f:	77 19                	ja     f0106f4a <loadtime_map_frame+0x4d>
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106f31:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f34:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106f39:	83 ec 0c             	sub    $0xc,%esp
f0106f3c:	50                   	push   %eax
f0106f3d:	e8 35 0b 00 00       	call   f0107a77 <kheap_virtual_address>
f0106f42:	83 c4 10             	add    $0x10,%esp
f0106f45:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106f48:	eb 40                	jmp    f0106f8a <loadtime_map_frame+0x8d>
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106f4a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f4d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106f52:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106f55:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106f58:	c1 e8 0c             	shr    $0xc,%eax
f0106f5b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106f5e:	a1 10 5d 87 f0       	mov    0xf0875d10,%eax
f0106f63:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106f66:	72 17                	jb     f0106f7f <loadtime_map_frame+0x82>
f0106f68:	ff 75 e8             	pushl  -0x18(%ebp)
f0106f6b:	68 20 5d 13 f0       	push   $0xf0135d20
f0106f70:	68 e6 01 00 00       	push   $0x1e6
f0106f75:	68 63 5c 13 f0       	push   $0xf0135c63
f0106f7a:	e8 86 92 ff ff       	call   f0100205 <_panic>
f0106f7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106f82:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106f87:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f0106f8a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106f8e:	75 14                	jne    f0106fa4 <loadtime_map_frame+0xa7>
	{
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(ptr_page_directory, virtual_address);
f0106f90:	83 ec 08             	sub    $0x8,%esp
f0106f93:	ff 75 10             	pushl  0x10(%ebp)
f0106f96:	ff 75 08             	pushl  0x8(%ebp)
f0106f99:	e8 69 fc ff ff       	call   f0106c07 <create_page_table>
f0106f9e:	83 c4 10             	add    $0x10,%esp
f0106fa1:	89 45 f4             	mov    %eax,-0xc(%ebp)
			__static_cpt(ptr_page_directory, virtual_address, &ptr_page_table);
		}
#endif
	}

	ptr_frame_info->references++;
f0106fa4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106fa7:	8b 40 08             	mov    0x8(%eax),%eax
f0106faa:	40                   	inc    %eax
f0106fab:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106fae:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106fb2:	8b 45 10             	mov    0x10(%ebp),%eax
f0106fb5:	c1 e8 0c             	shr    $0xc,%eax
f0106fb8:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106fbd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106fc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106fc7:	01 c2                	add    %eax,%edx
f0106fc9:	8b 45 14             	mov    0x14(%ebp),%eax
f0106fcc:	0b 45 f0             	or     -0x10(%ebp),%eax
f0106fcf:	83 c8 01             	or     $0x1,%eax
f0106fd2:	89 02                	mov    %eax,(%edx)

	return 0;
f0106fd4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106fd9:	c9                   	leave  
f0106fda:	c3                   	ret    

f0106fdb <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f0106fdb:	55                   	push   %ebp
f0106fdc:	89 e5                	mov    %esp,%ebp
f0106fde:	57                   	push   %edi
f0106fdf:	56                   	push   %esi
f0106fe0:	53                   	push   %ebx
f0106fe1:	83 ec 20             	sub    $0x20,%esp

	//calculate the free frames from the free frame list
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f0106fe4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 totalFreeBuffered = 0 ;
f0106feb:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 totalModified = 0 ;
f0106ff2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	LIST_FOREACH(ptr, &free_frame_list)
f0106ff9:	a1 18 5d 87 f0       	mov    0xf0875d18,%eax
f0106ffe:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107001:	eb 1a                	jmp    f010701d <calculate_available_frames+0x42>
	{
		if (ptr->isBuffered)
f0107003:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107006:	8a 40 14             	mov    0x14(%eax),%al
f0107009:	84 c0                	test   %al,%al
f010700b:	74 05                	je     f0107012 <calculate_available_frames+0x37>
			totalFreeBuffered++ ;
f010700d:	ff 45 e8             	incl   -0x18(%ebp)
f0107010:	eb 03                	jmp    f0107015 <calculate_available_frames+0x3a>
		else
			totalFreeUnBuffered++ ;
f0107012:	ff 45 ec             	incl   -0x14(%ebp)
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
	uint32 totalFreeBuffered = 0 ;
	uint32 totalModified = 0 ;

	LIST_FOREACH(ptr, &free_frame_list)
f0107015:	a1 20 5d 87 f0       	mov    0xf0875d20,%eax
f010701a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010701d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107021:	74 07                	je     f010702a <calculate_available_frames+0x4f>
f0107023:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107026:	8b 00                	mov    (%eax),%eax
f0107028:	eb 05                	jmp    f010702f <calculate_available_frames+0x54>
f010702a:	b8 00 00 00 00       	mov    $0x0,%eax
f010702f:	a3 20 5d 87 f0       	mov    %eax,0xf0875d20
f0107034:	a1 20 5d 87 f0       	mov    0xf0875d20,%eax
f0107039:	85 c0                	test   %eax,%eax
f010703b:	75 c6                	jne    f0107003 <calculate_available_frames+0x28>
f010703d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107041:	75 c0                	jne    f0107003 <calculate_available_frames+0x28>
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0107043:	a1 b8 5c 87 f0       	mov    0xf0875cb8,%eax
f0107048:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010704b:	eb 0b                	jmp    f0107058 <calculate_available_frames+0x7d>
	{
		totalModified++ ;
f010704d:	ff 45 e4             	incl   -0x1c(%ebp)
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0107050:	a1 c0 5c 87 f0       	mov    0xf0875cc0,%eax
f0107055:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107058:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010705c:	74 07                	je     f0107065 <calculate_available_frames+0x8a>
f010705e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107061:	8b 00                	mov    (%eax),%eax
f0107063:	eb 05                	jmp    f010706a <calculate_available_frames+0x8f>
f0107065:	b8 00 00 00 00       	mov    $0x0,%eax
f010706a:	a3 c0 5c 87 f0       	mov    %eax,0xf0875cc0
f010706f:	a1 c0 5c 87 f0       	mov    0xf0875cc0,%eax
f0107074:	85 c0                	test   %eax,%eax
f0107076:	75 d5                	jne    f010704d <calculate_available_frames+0x72>
f0107078:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010707c:	75 cf                	jne    f010704d <calculate_available_frames+0x72>
	{
		totalModified++ ;
	}

	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f010707e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107081:	89 45 d8             	mov    %eax,-0x28(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f0107084:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107087:	89 45 dc             	mov    %eax,-0x24(%ebp)
	counters.modified = totalModified;
f010708a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010708d:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return counters;
f0107090:	8b 45 08             	mov    0x8(%ebp),%eax
f0107093:	89 c3                	mov    %eax,%ebx
f0107095:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0107098:	ba 03 00 00 00       	mov    $0x3,%edx
f010709d:	89 df                	mov    %ebx,%edi
f010709f:	89 c6                	mov    %eax,%esi
f01070a1:	89 d1                	mov    %edx,%ecx
f01070a3:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f01070a5:	8b 45 08             	mov    0x8(%ebp),%eax
f01070a8:	83 c4 20             	add    $0x20,%esp
f01070ab:	5b                   	pop    %ebx
f01070ac:	5e                   	pop    %esi
f01070ad:	5f                   	pop    %edi
f01070ae:	5d                   	pop    %ebp
f01070af:	c2 04 00             	ret    $0x4

f01070b2 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f01070b2:	55                   	push   %ebp
f01070b3:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01070b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01070b8:	8b 15 54 5d 87 f0    	mov    0xf0875d54,%edx
f01070be:	29 d0                	sub    %edx,%eax
f01070c0:	c1 f8 03             	sar    $0x3,%eax
f01070c3:	89 c2                	mov    %eax,%edx
f01070c5:	89 d0                	mov    %edx,%eax
f01070c7:	c1 e0 02             	shl    $0x2,%eax
f01070ca:	01 d0                	add    %edx,%eax
f01070cc:	c1 e0 02             	shl    $0x2,%eax
f01070cf:	01 d0                	add    %edx,%eax
f01070d1:	c1 e0 02             	shl    $0x2,%eax
f01070d4:	01 d0                	add    %edx,%eax
f01070d6:	89 c1                	mov    %eax,%ecx
f01070d8:	c1 e1 08             	shl    $0x8,%ecx
f01070db:	01 c8                	add    %ecx,%eax
f01070dd:	89 c1                	mov    %eax,%ecx
f01070df:	c1 e1 10             	shl    $0x10,%ecx
f01070e2:	01 c8                	add    %ecx,%eax
f01070e4:	01 c0                	add    %eax,%eax
f01070e6:	01 d0                	add    %edx,%eax
}
f01070e8:	5d                   	pop    %ebp
f01070e9:	c3                   	ret    

f01070ea <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f01070ea:	55                   	push   %ebp
f01070eb:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01070ed:	ff 75 08             	pushl  0x8(%ebp)
f01070f0:	e8 bd ff ff ff       	call   f01070b2 <to_frame_number>
f01070f5:	83 c4 04             	add    $0x4,%esp
f01070f8:	c1 e0 0c             	shl    $0xc,%eax
}
f01070fb:	c9                   	leave  
f01070fc:	c3                   	ret    

f01070fd <create_shares_array>:
// [1] Create "shares" array:
//===========================
//Dynamically allocate the array of shared objects
//initialize the array of shared objects by 0's and empty = 1
void create_shares_array(uint32 numOfElements)
{
f01070fd:	55                   	push   %ebp
f01070fe:	89 e5                	mov    %esp,%ebp
f0107100:	83 ec 18             	sub    $0x18,%esp
#if USE_KHEAP
	MAX_SHARES  = numOfElements ;
f0107103:	8b 45 08             	mov    0x8(%ebp),%eax
f0107106:	a3 28 5d 87 f0       	mov    %eax,0xf0875d28
	shares = kmalloc(numOfElements*sizeof(struct Share));
f010710b:	8b 55 08             	mov    0x8(%ebp),%edx
f010710e:	89 d0                	mov    %edx,%eax
f0107110:	c1 e0 02             	shl    $0x2,%eax
f0107113:	01 d0                	add    %edx,%eax
f0107115:	c1 e0 02             	shl    $0x2,%eax
f0107118:	01 d0                	add    %edx,%eax
f010711a:	c1 e0 02             	shl    $0x2,%eax
f010711d:	83 ec 0c             	sub    $0xc,%esp
f0107120:	50                   	push   %eax
f0107121:	e8 5f 07 00 00       	call   f0107885 <kmalloc>
f0107126:	83 c4 10             	add    $0x10,%esp
f0107129:	a3 ec 5c 87 f0       	mov    %eax,0xf0875cec
	if (shares == NULL)
f010712e:	a1 ec 5c 87 f0       	mov    0xf0875cec,%eax
f0107133:	85 c0                	test   %eax,%eax
f0107135:	75 14                	jne    f010714b <create_shares_array+0x4e>
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
f0107137:	83 ec 04             	sub    $0x4,%esp
f010713a:	68 90 5d 13 f0       	push   $0xf0135d90
f010713f:	6a 21                	push   $0x21
f0107141:	68 d4 5d 13 f0       	push   $0xf0135dd4
f0107146:	e8 ba 90 ff ff       	call   f0100205 <_panic>
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f010714b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0107152:	eb 4b                	jmp    f010719f <create_shares_array+0xa2>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
f0107154:	8b 0d ec 5c 87 f0    	mov    0xf0875cec,%ecx
f010715a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010715d:	89 d0                	mov    %edx,%eax
f010715f:	c1 e0 02             	shl    $0x2,%eax
f0107162:	01 d0                	add    %edx,%eax
f0107164:	c1 e0 02             	shl    $0x2,%eax
f0107167:	01 d0                	add    %edx,%eax
f0107169:	c1 e0 02             	shl    $0x2,%eax
f010716c:	01 c8                	add    %ecx,%eax
f010716e:	83 ec 04             	sub    $0x4,%esp
f0107171:	6a 54                	push   $0x54
f0107173:	6a 00                	push   $0x0
f0107175:	50                   	push   %eax
f0107176:	e8 3f 9f 02 00       	call   f01310ba <memset>
f010717b:	83 c4 10             	add    $0x10,%esp
		shares[i].empty = 1;
f010717e:	8b 0d ec 5c 87 f0    	mov    0xf0875cec,%ecx
f0107184:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107187:	89 d0                	mov    %edx,%eax
f0107189:	c1 e0 02             	shl    $0x2,%eax
f010718c:	01 d0                	add    %edx,%eax
f010718e:	c1 e0 02             	shl    $0x2,%eax
f0107191:	01 d0                	add    %edx,%eax
f0107193:	c1 e0 02             	shl    $0x2,%eax
f0107196:	01 c8                	add    %ecx,%eax
f0107198:	c6 40 4d 01          	movb   $0x1,0x4d(%eax)
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f010719c:	ff 45 f4             	incl   -0xc(%ebp)
f010719f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071a2:	a1 28 5d 87 f0       	mov    0xf0875d28,%eax
f01071a7:	39 c2                	cmp    %eax,%edx
f01071a9:	72 a9                	jb     f0107154 <create_shares_array+0x57>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
		shares[i].empty = 1;
	}
}
f01071ab:	90                   	nop
f01071ac:	c9                   	leave  
f01071ad:	c3                   	ret    

f01071ae <allocate_share_object>:
//	a) if succeed:
//		1. allocatedObject (pointer to struct Share) passed by reference
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
f01071ae:	55                   	push   %ebp
f01071af:	89 e5                	mov    %esp,%ebp
f01071b1:	53                   	push   %ebx
f01071b2:	83 ec 14             	sub    $0x14,%esp
	int32 sharedObjectID = -1 ;
f01071b5:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SHARES; ++i)
f01071bc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01071c3:	eb 2c                	jmp    f01071f1 <allocate_share_object+0x43>
	{
		if (shares[i].empty)
f01071c5:	8b 0d ec 5c 87 f0    	mov    0xf0875cec,%ecx
f01071cb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01071ce:	89 d0                	mov    %edx,%eax
f01071d0:	c1 e0 02             	shl    $0x2,%eax
f01071d3:	01 d0                	add    %edx,%eax
f01071d5:	c1 e0 02             	shl    $0x2,%eax
f01071d8:	01 d0                	add    %edx,%eax
f01071da:	c1 e0 02             	shl    $0x2,%eax
f01071dd:	01 c8                	add    %ecx,%eax
f01071df:	8a 40 4d             	mov    0x4d(%eax),%al
f01071e2:	84 c0                	test   %al,%al
f01071e4:	74 08                	je     f01071ee <allocate_share_object+0x40>
		{
			sharedObjectID = i;
f01071e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01071e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f01071ec:	eb 0f                	jmp    f01071fd <allocate_share_object+0x4f>
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
	int32 sharedObjectID = -1 ;
	for (int i = 0; i < MAX_SHARES; ++i)
f01071ee:	ff 45 f0             	incl   -0x10(%ebp)
f01071f1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01071f4:	a1 28 5d 87 f0       	mov    0xf0875d28,%eax
f01071f9:	39 c2                	cmp    %eax,%edx
f01071fb:	72 c8                	jb     f01071c5 <allocate_share_object+0x17>
			sharedObjectID = i;
			break;
		}
	}

	if (sharedObjectID == -1)
f01071fd:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0107201:	75 0a                	jne    f010720d <allocate_share_object+0x5f>
	{
		return E_NO_SHARE ;
f0107203:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
f0107208:	e9 94 00 00 00       	jmp    f01072a1 <allocate_share_object+0xf3>
		}
#endif
*/
	}

	*allocatedObject = &(shares[sharedObjectID]);
f010720d:	8b 0d ec 5c 87 f0    	mov    0xf0875cec,%ecx
f0107213:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107216:	89 d0                	mov    %edx,%eax
f0107218:	c1 e0 02             	shl    $0x2,%eax
f010721b:	01 d0                	add    %edx,%eax
f010721d:	c1 e0 02             	shl    $0x2,%eax
f0107220:	01 d0                	add    %edx,%eax
f0107222:	c1 e0 02             	shl    $0x2,%eax
f0107225:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0107228:	8b 45 08             	mov    0x8(%ebp),%eax
f010722b:	89 10                	mov    %edx,(%eax)
	shares[sharedObjectID].empty = 0;
f010722d:	8b 0d ec 5c 87 f0    	mov    0xf0875cec,%ecx
f0107233:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107236:	89 d0                	mov    %edx,%eax
f0107238:	c1 e0 02             	shl    $0x2,%eax
f010723b:	01 d0                	add    %edx,%eax
f010723d:	c1 e0 02             	shl    $0x2,%eax
f0107240:	01 d0                	add    %edx,%eax
f0107242:	c1 e0 02             	shl    $0x2,%eax
f0107245:	01 c8                	add    %ecx,%eax
f0107247:	c6 40 4d 00          	movb   $0x0,0x4d(%eax)

#if USE_KHEAP
	{
		shares[sharedObjectID].framesStorage = create_frames_storage();
f010724b:	8b 0d ec 5c 87 f0    	mov    0xf0875cec,%ecx
f0107251:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107254:	89 d0                	mov    %edx,%eax
f0107256:	c1 e0 02             	shl    $0x2,%eax
f0107259:	01 d0                	add    %edx,%eax
f010725b:	c1 e0 02             	shl    $0x2,%eax
f010725e:	01 d0                	add    %edx,%eax
f0107260:	c1 e0 02             	shl    $0x2,%eax
f0107263:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
f0107266:	e8 97 01 00 00       	call   f0107402 <create_frames_storage>
f010726b:	89 43 50             	mov    %eax,0x50(%ebx)
	}
#endif
	memset(shares[sharedObjectID].framesStorage, 0, PAGE_SIZE);
f010726e:	8b 0d ec 5c 87 f0    	mov    0xf0875cec,%ecx
f0107274:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107277:	89 d0                	mov    %edx,%eax
f0107279:	c1 e0 02             	shl    $0x2,%eax
f010727c:	01 d0                	add    %edx,%eax
f010727e:	c1 e0 02             	shl    $0x2,%eax
f0107281:	01 d0                	add    %edx,%eax
f0107283:	c1 e0 02             	shl    $0x2,%eax
f0107286:	01 c8                	add    %ecx,%eax
f0107288:	8b 40 50             	mov    0x50(%eax),%eax
f010728b:	83 ec 04             	sub    $0x4,%esp
f010728e:	68 00 10 00 00       	push   $0x1000
f0107293:	6a 00                	push   $0x0
f0107295:	50                   	push   %eax
f0107296:	e8 1f 9e 02 00       	call   f01310ba <memset>
f010729b:	83 c4 10             	add    $0x10,%esp

	return sharedObjectID;
f010729e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01072a1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01072a4:	c9                   	leave  
f01072a5:	c3                   	ret    

f01072a6 <get_share_object_ID>:
//Search for the given shared object in the "shares" array
//Return:
//	a) if found: SharedObjectID (index of the shared object in the array)
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
f01072a6:	55                   	push   %ebp
f01072a7:	89 e5                	mov    %esp,%ebp
f01072a9:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f01072ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(; i< MAX_SHARES; ++i)
f01072b3:	eb 7b                	jmp    f0107330 <get_share_object_ID+0x8a>
	{
		if (shares[i].empty)
f01072b5:	8b 0d ec 5c 87 f0    	mov    0xf0875cec,%ecx
f01072bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072be:	89 d0                	mov    %edx,%eax
f01072c0:	c1 e0 02             	shl    $0x2,%eax
f01072c3:	01 d0                	add    %edx,%eax
f01072c5:	c1 e0 02             	shl    $0x2,%eax
f01072c8:	01 d0                	add    %edx,%eax
f01072ca:	c1 e0 02             	shl    $0x2,%eax
f01072cd:	01 c8                	add    %ecx,%eax
f01072cf:	8a 40 4d             	mov    0x4d(%eax),%al
f01072d2:	84 c0                	test   %al,%al
f01072d4:	75 56                	jne    f010732c <get_share_object_ID+0x86>
			continue;

		//cprintf("shared var name = %s compared with %s\n", name, shares[i].name);
		if(shares[i].ownerID == ownerID && strcmp(name, shares[i].name)==0)
f01072d6:	8b 0d ec 5c 87 f0    	mov    0xf0875cec,%ecx
f01072dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072df:	89 d0                	mov    %edx,%eax
f01072e1:	c1 e0 02             	shl    $0x2,%eax
f01072e4:	01 d0                	add    %edx,%eax
f01072e6:	c1 e0 02             	shl    $0x2,%eax
f01072e9:	01 d0                	add    %edx,%eax
f01072eb:	c1 e0 02             	shl    $0x2,%eax
f01072ee:	01 c8                	add    %ecx,%eax
f01072f0:	8b 00                	mov    (%eax),%eax
f01072f2:	3b 45 08             	cmp    0x8(%ebp),%eax
f01072f5:	75 36                	jne    f010732d <get_share_object_ID+0x87>
f01072f7:	8b 0d ec 5c 87 f0    	mov    0xf0875cec,%ecx
f01072fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107300:	89 d0                	mov    %edx,%eax
f0107302:	c1 e0 02             	shl    $0x2,%eax
f0107305:	01 d0                	add    %edx,%eax
f0107307:	c1 e0 02             	shl    $0x2,%eax
f010730a:	01 d0                	add    %edx,%eax
f010730c:	c1 e0 02             	shl    $0x2,%eax
f010730f:	01 c8                	add    %ecx,%eax
f0107311:	83 c0 04             	add    $0x4,%eax
f0107314:	83 ec 08             	sub    $0x8,%esp
f0107317:	50                   	push   %eax
f0107318:	ff 75 0c             	pushl  0xc(%ebp)
f010731b:	e8 b8 9c 02 00       	call   f0130fd8 <strcmp>
f0107320:	83 c4 10             	add    $0x10,%esp
f0107323:	85 c0                	test   %eax,%eax
f0107325:	75 06                	jne    f010732d <get_share_object_ID+0x87>
		{
			//cprintf("%s found\n", name);
			return i;
f0107327:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010732a:	eb 19                	jmp    f0107345 <get_share_object_ID+0x9f>
	int i=0;

	for(; i< MAX_SHARES; ++i)
	{
		if (shares[i].empty)
			continue;
f010732c:	90                   	nop
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
	int i=0;

	for(; i< MAX_SHARES; ++i)
f010732d:	ff 45 f4             	incl   -0xc(%ebp)
f0107330:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107333:	a1 28 5d 87 f0       	mov    0xf0875d28,%eax
f0107338:	39 c2                	cmp    %eax,%edx
f010733a:	0f 82 75 ff ff ff    	jb     f01072b5 <get_share_object_ID+0xf>
		{
			//cprintf("%s found\n", name);
			return i;
		}
	}
	return E_SHARED_MEM_NOT_EXISTS;
f0107340:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
f0107345:	c9                   	leave  
f0107346:	c3                   	ret    

f0107347 <free_share_object>:
//delete the given sharedObjectID from the "shares" array
//Return:
//	a) 0 if succeed
//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists
int free_share_object(uint32 sharedObjectID)
{
f0107347:	55                   	push   %ebp
f0107348:	89 e5                	mov    %esp,%ebp
f010734a:	83 ec 08             	sub    $0x8,%esp
	if (sharedObjectID >= MAX_SHARES)
f010734d:	a1 28 5d 87 f0       	mov    0xf0875d28,%eax
f0107352:	39 45 08             	cmp    %eax,0x8(%ebp)
f0107355:	72 0a                	jb     f0107361 <free_share_object+0x1a>
		return E_SHARED_MEM_NOT_EXISTS;
f0107357:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f010735c:	e9 9f 00 00 00       	jmp    f0107400 <free_share_object+0xb9>

	//panic("deleteSharedObject: not implemented yet");
	clear_frames_storage(shares[sharedObjectID].framesStorage);
f0107361:	8b 0d ec 5c 87 f0    	mov    0xf0875cec,%ecx
f0107367:	8b 55 08             	mov    0x8(%ebp),%edx
f010736a:	89 d0                	mov    %edx,%eax
f010736c:	c1 e0 02             	shl    $0x2,%eax
f010736f:	01 d0                	add    %edx,%eax
f0107371:	c1 e0 02             	shl    $0x2,%eax
f0107374:	01 d0                	add    %edx,%eax
f0107376:	c1 e0 02             	shl    $0x2,%eax
f0107379:	01 c8                	add    %ecx,%eax
f010737b:	8b 40 50             	mov    0x50(%eax),%eax
f010737e:	83 ec 0c             	sub    $0xc,%esp
f0107381:	50                   	push   %eax
f0107382:	e8 52 01 00 00       	call   f01074d9 <clear_frames_storage>
f0107387:	83 c4 10             	add    $0x10,%esp
#if USE_KHEAP
	kfree(shares[sharedObjectID].framesStorage);
f010738a:	8b 0d ec 5c 87 f0    	mov    0xf0875cec,%ecx
f0107390:	8b 55 08             	mov    0x8(%ebp),%edx
f0107393:	89 d0                	mov    %edx,%eax
f0107395:	c1 e0 02             	shl    $0x2,%eax
f0107398:	01 d0                	add    %edx,%eax
f010739a:	c1 e0 02             	shl    $0x2,%eax
f010739d:	01 d0                	add    %edx,%eax
f010739f:	c1 e0 02             	shl    $0x2,%eax
f01073a2:	01 c8                	add    %ecx,%eax
f01073a4:	8b 40 50             	mov    0x50(%eax),%eax
f01073a7:	83 ec 0c             	sub    $0xc,%esp
f01073aa:	50                   	push   %eax
f01073ab:	e8 a0 05 00 00       	call   f0107950 <kfree>
f01073b0:	83 c4 10             	add    $0x10,%esp
#endif
	memset(&(shares[sharedObjectID]), 0, sizeof(struct Share));
f01073b3:	8b 0d ec 5c 87 f0    	mov    0xf0875cec,%ecx
f01073b9:	8b 55 08             	mov    0x8(%ebp),%edx
f01073bc:	89 d0                	mov    %edx,%eax
f01073be:	c1 e0 02             	shl    $0x2,%eax
f01073c1:	01 d0                	add    %edx,%eax
f01073c3:	c1 e0 02             	shl    $0x2,%eax
f01073c6:	01 d0                	add    %edx,%eax
f01073c8:	c1 e0 02             	shl    $0x2,%eax
f01073cb:	01 c8                	add    %ecx,%eax
f01073cd:	83 ec 04             	sub    $0x4,%esp
f01073d0:	6a 54                	push   $0x54
f01073d2:	6a 00                	push   $0x0
f01073d4:	50                   	push   %eax
f01073d5:	e8 e0 9c 02 00       	call   f01310ba <memset>
f01073da:	83 c4 10             	add    $0x10,%esp
	shares[sharedObjectID].empty = 1;
f01073dd:	8b 0d ec 5c 87 f0    	mov    0xf0875cec,%ecx
f01073e3:	8b 55 08             	mov    0x8(%ebp),%edx
f01073e6:	89 d0                	mov    %edx,%eax
f01073e8:	c1 e0 02             	shl    $0x2,%eax
f01073eb:	01 d0                	add    %edx,%eax
f01073ed:	c1 e0 02             	shl    $0x2,%eax
f01073f0:	01 d0                	add    %edx,%eax
f01073f2:	c1 e0 02             	shl    $0x2,%eax
f01073f5:	01 c8                	add    %ecx,%eax
f01073f7:	c6 40 4d 01          	movb   $0x1,0x4d(%eax)

	return 0;
f01073fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0107400:	c9                   	leave  
f0107401:	c3                   	ret    

f0107402 <create_frames_storage>:
//===========================
// [5] Create frames_storage:
//===========================
// if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
inline uint32* create_frames_storage()
{
f0107402:	55                   	push   %ebp
f0107403:	89 e5                	mov    %esp,%ebp
f0107405:	83 ec 18             	sub    $0x18,%esp
	uint32* frames_storage = kmalloc(PAGE_SIZE);
f0107408:	83 ec 0c             	sub    $0xc,%esp
f010740b:	68 00 10 00 00       	push   $0x1000
f0107410:	e8 70 04 00 00       	call   f0107885 <kmalloc>
f0107415:	83 c4 10             	add    $0x10,%esp
f0107418:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(frames_storage == NULL)
f010741b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010741f:	75 17                	jne    f0107438 <create_frames_storage+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0107421:	83 ec 04             	sub    $0x4,%esp
f0107424:	68 f5 5d 13 f0       	push   $0xf0135df5
f0107429:	68 a5 00 00 00       	push   $0xa5
f010742e:	68 d4 5d 13 f0       	push   $0xf0135dd4
f0107433:	e8 cd 8d ff ff       	call   f0100205 <_panic>
	}
	return frames_storage;
f0107438:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010743b:	c9                   	leave  
f010743c:	c3                   	ret    

f010743d <add_frame_to_storage>:
//===========================
// [6] Add frame to storage:
//===========================
// Add a frame info to the storage of frames at the given index
inline void add_frame_to_storage(uint32* frames_storage, struct FrameInfo* ptr_frame_info, uint32 index)
{
f010743d:	55                   	push   %ebp
f010743e:	89 e5                	mov    %esp,%ebp
f0107440:	53                   	push   %ebx
f0107441:	83 ec 14             	sub    $0x14,%esp
	uint32 va = index * PAGE_SIZE ;
f0107444:	8b 45 10             	mov    0x10(%ebp),%eax
f0107447:	c1 e0 0c             	shl    $0xc,%eax
f010744a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	int r = get_page_table(frames_storage,  va, &ptr_page_table);
f010744d:	83 ec 04             	sub    $0x4,%esp
f0107450:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107453:	50                   	push   %eax
f0107454:	ff 75 f4             	pushl  -0xc(%ebp)
f0107457:	ff 75 08             	pushl  0x8(%ebp)
f010745a:	e8 52 f6 ff ff       	call   f0106ab1 <get_page_table>
f010745f:	83 c4 10             	add    $0x10,%esp
f0107462:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(r == TABLE_NOT_EXIST)
f0107465:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0107469:	75 14                	jne    f010747f <add_frame_to_storage+0x42>
	{
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(frames_storage, (uint32)va);
f010746b:	83 ec 08             	sub    $0x8,%esp
f010746e:	ff 75 f4             	pushl  -0xc(%ebp)
f0107471:	ff 75 08             	pushl  0x8(%ebp)
f0107474:	e8 8e f7 ff ff       	call   f0106c07 <create_page_table>
f0107479:	83 c4 10             	add    $0x10,%esp
f010747c:	89 45 ec             	mov    %eax,-0x14(%ebp)
			__static_cpt(frames_storage, (uint32)va, &ptr_page_table);

		}
#endif
	}
	ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f010747f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107482:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107485:	c1 ea 0c             	shr    $0xc,%edx
f0107488:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010748e:	c1 e2 02             	shl    $0x2,%edx
f0107491:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f0107494:	83 ec 0c             	sub    $0xc,%esp
f0107497:	ff 75 0c             	pushl  0xc(%ebp)
f010749a:	e8 4b fc ff ff       	call   f01070ea <to_physical_address>
f010749f:	83 c4 10             	add    $0x10,%esp
f01074a2:	83 c8 01             	or     $0x1,%eax
f01074a5:	89 03                	mov    %eax,(%ebx)
}
f01074a7:	90                   	nop
f01074a8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01074ab:	c9                   	leave  
f01074ac:	c3                   	ret    

f01074ad <get_frame_from_storage>:
//===========================
// [7] Get frame from storage:
//===========================
// Get a frame info from the storage of frames at the given index
inline struct FrameInfo* get_frame_from_storage(uint32* frames_storage, uint32 index)
{
f01074ad:	55                   	push   %ebp
f01074ae:	89 e5                	mov    %esp,%ebp
f01074b0:	83 ec 18             	sub    $0x18,%esp
	struct FrameInfo* ptr_frame_info;
	uint32 *ptr_page_table ;
	uint32 va = index * PAGE_SIZE ;
f01074b3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01074b6:	c1 e0 0c             	shl    $0xc,%eax
f01074b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_frame_info = get_frame_info(frames_storage,  va, &ptr_page_table);
f01074bc:	83 ec 04             	sub    $0x4,%esp
f01074bf:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01074c2:	50                   	push   %eax
f01074c3:	ff 75 f4             	pushl  -0xc(%ebp)
f01074c6:	ff 75 08             	pushl  0x8(%ebp)
f01074c9:	e8 38 f9 ff ff       	call   f0106e06 <get_frame_info>
f01074ce:	83 c4 10             	add    $0x10,%esp
f01074d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return ptr_frame_info;
f01074d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01074d7:	c9                   	leave  
f01074d8:	c3                   	ret    

f01074d9 <clear_frames_storage>:

//===========================
// [8] Clear the frames_storage:
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
f01074d9:	55                   	push   %ebp
f01074da:	89 e5                	mov    %esp,%ebp
f01074dc:	83 ec 18             	sub    $0x18,%esp
	int fourMega = 1024 * PAGE_SIZE ;
f01074df:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f01074e6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01074ed:	eb 5b                	jmp    f010754a <clear_frames_storage+0x71>
	{
		if (frames_storage[i] != 0)
f01074ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074f2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01074f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01074fc:	01 d0                	add    %edx,%eax
f01074fe:	8b 00                	mov    (%eax),%eax
f0107500:	85 c0                	test   %eax,%eax
f0107502:	74 43                	je     f0107547 <clear_frames_storage+0x6e>
		{
#if USE_KHEAP
			{
				kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
f0107504:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107507:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010750e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107511:	01 d0                	add    %edx,%eax
f0107513:	8b 00                	mov    (%eax),%eax
f0107515:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010751a:	83 ec 0c             	sub    $0xc,%esp
f010751d:	50                   	push   %eax
f010751e:	e8 54 05 00 00       	call   f0107a77 <kheap_virtual_address>
f0107523:	83 c4 10             	add    $0x10,%esp
f0107526:	83 ec 0c             	sub    $0xc,%esp
f0107529:	50                   	push   %eax
f010752a:	e8 21 04 00 00       	call   f0107950 <kfree>
f010752f:	83 c4 10             	add    $0x10,%esp
#else
			{
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
			}
#endif
			frames_storage[i] = 0;
f0107532:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107535:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010753c:	8b 45 08             	mov    0x8(%ebp),%eax
f010753f:	01 d0                	add    %edx,%eax
f0107541:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
	int fourMega = 1024 * PAGE_SIZE ;
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107547:	ff 45 f4             	incl   -0xc(%ebp)
f010754a:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0107551:	7e 9c                	jle    f01074ef <clear_frames_storage+0x16>
			}
#endif
			frames_storage[i] = 0;
		}
	}
}
f0107553:	90                   	nop
f0107554:	c9                   	leave  
f0107555:	c3                   	ret    

f0107556 <getSizeOfSharedObject>:

//==============================
// [9] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f0107556:	55                   	push   %ebp
f0107557:	89 e5                	mov    %esp,%ebp
f0107559:	83 ec 18             	sub    $0x18,%esp
	// RETURN:
	//	a) If found, return size of shared object
	//	b) Else, return E_SHARED_MEM_NOT_EXISTS
	//

	int shareObjectID = get_share_object_ID(ownerID, shareName);
f010755c:	83 ec 08             	sub    $0x8,%esp
f010755f:	ff 75 0c             	pushl  0xc(%ebp)
f0107562:	ff 75 08             	pushl  0x8(%ebp)
f0107565:	e8 3c fd ff ff       	call   f01072a6 <get_share_object_ID>
f010756a:	83 c4 10             	add    $0x10,%esp
f010756d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (shareObjectID == E_SHARED_MEM_NOT_EXISTS)
f0107570:	83 7d f4 f0          	cmpl   $0xfffffff0,-0xc(%ebp)
f0107574:	75 07                	jne    f010757d <getSizeOfSharedObject+0x27>
		return E_SHARED_MEM_NOT_EXISTS;
f0107576:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f010757b:	eb 1d                	jmp    f010759a <getSizeOfSharedObject+0x44>
	else
		return shares[shareObjectID].size;
f010757d:	8b 0d ec 5c 87 f0    	mov    0xf0875cec,%ecx
f0107583:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107586:	89 d0                	mov    %edx,%eax
f0107588:	c1 e0 02             	shl    $0x2,%eax
f010758b:	01 d0                	add    %edx,%eax
f010758d:	c1 e0 02             	shl    $0x2,%eax
f0107590:	01 d0                	add    %edx,%eax
f0107592:	c1 e0 02             	shl    $0x2,%eax
f0107595:	01 c8                	add    %ecx,%eax
f0107597:	8b 40 44             	mov    0x44(%eax),%eax

	return 0;
}
f010759a:	c9                   	leave  
f010759b:	c3                   	ret    

f010759c <createSharedObject>:

//=========================
// [1] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010759c:	55                   	push   %ebp
f010759d:	89 e5                	mov    %esp,%ebp
f010759f:	83 ec 18             	sub    $0x18,%esp
f01075a2:	8b 45 14             	mov    0x14(%ebp),%eax
f01075a5:	88 45 f4             	mov    %al,-0xc(%ebp)
	//TODO: [PROJECT MS3] [SHARING - KERNEL SIDE] createSharedObject()
	// your code is here, remove the panic and write your code
	panic("createSharedObject() is not implemented yet...!!");
f01075a8:	83 ec 04             	sub    $0x4,%esp
f01075ab:	68 14 5e 13 f0       	push   $0xf0135e14
f01075b0:	68 10 01 00 00       	push   $0x110
f01075b5:	68 d4 5d 13 f0       	push   $0xf0135dd4
f01075ba:	e8 46 8c ff ff       	call   f0100205 <_panic>

f01075bf <getSharedObject>:

//======================
// [2] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f01075bf:	55                   	push   %ebp
f01075c0:	89 e5                	mov    %esp,%ebp
f01075c2:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [SHARING - KERNEL SIDE] getSharedObject()
	// your code is here, remove the panic and write your code
	panic("getSharedObject() is not implemented yet...!!");
f01075c5:	83 ec 04             	sub    $0x4,%esp
f01075c8:	68 48 5e 13 f0       	push   $0xf0135e48
f01075cd:	68 23 01 00 00       	push   $0x123
f01075d2:	68 d4 5d 13 f0       	push   $0xf0135dd4
f01075d7:	e8 29 8c ff ff       	call   f0100205 <_panic>

f01075dc <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f01075dc:	55                   	push   %ebp
f01075dd:	89 e5                	mov    %esp,%ebp
f01075df:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [SHARING - KERNEL SIDE] freeSharedObject()
	// your code is here, remove the panic and write your code
	panic("freeSharedObject() is not implemented yet...!!");
f01075e2:	83 ec 04             	sub    $0x4,%esp
f01075e5:	68 78 5e 13 f0       	push   $0xf0135e78
f01075ea:	68 3a 01 00 00       	push   $0x13a
f01075ef:	68 d4 5d 13 f0       	push   $0xf0135dd4
f01075f4:	e8 0c 8c ff ff       	call   f0100205 <_panic>

f01075f9 <isKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f01075f9:	55                   	push   %ebp
f01075fa:	89 e5                	mov    %esp,%ebp
f01075fc:	a1 5c 5d 87 f0       	mov    0xf0875d5c,%eax
f0107601:	83 f8 01             	cmp    $0x1,%eax
f0107604:	75 04                	jne    f010760a <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0107606:	b0 01                	mov    $0x1,%al
f0107608:	eb 02                	jmp    f010760c <isKHeapPlacementStrategyFIRSTFIT+0x13>
f010760a:	b0 00                	mov    $0x0,%al
f010760c:	5d                   	pop    %ebp
f010760d:	c3                   	ret    

f010760e <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f010760e:	55                   	push   %ebp
f010760f:	89 e5                	mov    %esp,%ebp
f0107611:	a1 5c 5d 87 f0       	mov    0xf0875d5c,%eax
f0107616:	83 f8 02             	cmp    $0x2,%eax
f0107619:	75 04                	jne    f010761f <isKHeapPlacementStrategyBESTFIT+0x11>
f010761b:	b0 01                	mov    $0x1,%al
f010761d:	eb 02                	jmp    f0107621 <isKHeapPlacementStrategyBESTFIT+0x13>
f010761f:	b0 00                	mov    $0x0,%al
f0107621:	5d                   	pop    %ebp
f0107622:	c3                   	ret    

f0107623 <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0107623:	55                   	push   %ebp
f0107624:	89 e5                	mov    %esp,%ebp
f0107626:	a1 5c 5d 87 f0       	mov    0xf0875d5c,%eax
f010762b:	83 f8 03             	cmp    $0x3,%eax
f010762e:	75 04                	jne    f0107634 <isKHeapPlacementStrategyNEXTFIT+0x11>
f0107630:	b0 01                	mov    $0x1,%al
f0107632:	eb 02                	jmp    f0107636 <isKHeapPlacementStrategyNEXTFIT+0x13>
f0107634:	b0 00                	mov    $0x0,%al
f0107636:	5d                   	pop    %ebp
f0107637:	c3                   	ret    

f0107638 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0107638:	55                   	push   %ebp
f0107639:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010763b:	8b 45 08             	mov    0x8(%ebp),%eax
f010763e:	8b 15 54 5d 87 f0    	mov    0xf0875d54,%edx
f0107644:	29 d0                	sub    %edx,%eax
f0107646:	c1 f8 03             	sar    $0x3,%eax
f0107649:	89 c2                	mov    %eax,%edx
f010764b:	89 d0                	mov    %edx,%eax
f010764d:	c1 e0 02             	shl    $0x2,%eax
f0107650:	01 d0                	add    %edx,%eax
f0107652:	c1 e0 02             	shl    $0x2,%eax
f0107655:	01 d0                	add    %edx,%eax
f0107657:	c1 e0 02             	shl    $0x2,%eax
f010765a:	01 d0                	add    %edx,%eax
f010765c:	89 c1                	mov    %eax,%ecx
f010765e:	c1 e1 08             	shl    $0x8,%ecx
f0107661:	01 c8                	add    %ecx,%eax
f0107663:	89 c1                	mov    %eax,%ecx
f0107665:	c1 e1 10             	shl    $0x10,%ecx
f0107668:	01 c8                	add    %ecx,%eax
f010766a:	01 c0                	add    %eax,%eax
f010766c:	01 d0                	add    %edx,%eax
}
f010766e:	5d                   	pop    %ebp
f010766f:	c3                   	ret    

f0107670 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107670:	55                   	push   %ebp
f0107671:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0107673:	ff 75 08             	pushl  0x8(%ebp)
f0107676:	e8 bd ff ff ff       	call   f0107638 <to_frame_number>
f010767b:	83 c4 04             	add    $0x4,%esp
f010767e:	c1 e0 0c             	shl    $0xc,%eax
}
f0107681:	c9                   	leave  
f0107682:	c3                   	ret    

f0107683 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0107683:	55                   	push   %ebp
f0107684:	89 e5                	mov    %esp,%ebp
f0107686:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0107689:	8b 45 08             	mov    0x8(%ebp),%eax
f010768c:	c1 e8 0c             	shr    $0xc,%eax
f010768f:	89 c2                	mov    %eax,%edx
f0107691:	a1 10 5d 87 f0       	mov    0xf0875d10,%eax
f0107696:	39 c2                	cmp    %eax,%edx
f0107698:	72 14                	jb     f01076ae <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f010769a:	83 ec 04             	sub    $0x4,%esp
f010769d:	68 a8 5e 13 f0       	push   $0xf0135ea8
f01076a2:	6a 55                	push   $0x55
f01076a4:	68 cd 5e 13 f0       	push   $0xf0135ecd
f01076a9:	e8 57 8b ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f01076ae:	8b 15 54 5d 87 f0    	mov    0xf0875d54,%edx
f01076b4:	8b 45 08             	mov    0x8(%ebp),%eax
f01076b7:	c1 e8 0c             	shr    $0xc,%eax
f01076ba:	89 c1                	mov    %eax,%ecx
f01076bc:	89 c8                	mov    %ecx,%eax
f01076be:	01 c0                	add    %eax,%eax
f01076c0:	01 c8                	add    %ecx,%eax
f01076c2:	c1 e0 03             	shl    $0x3,%eax
f01076c5:	01 d0                	add    %edx,%eax
}
f01076c7:	c9                   	leave  
f01076c8:	c3                   	ret    

f01076c9 <initialize_dyn_block_system>:
//NOTE: All kernel heap allocations are multiples of PAGE_SIZE (4KB)//
//==================================================================//
//==================================================================//

void initialize_dyn_block_system()
{
f01076c9:	55                   	push   %ebp
f01076ca:	89 e5                	mov    %esp,%ebp
f01076cc:	83 ec 18             	sub    $0x18,%esp
//TODO: [PROJECT MS2] [KERNEL HEAP] initialize_dyn_block_system
	// your code is here, remove the panic and write your code
	//kpanic_into_prompt("initialize_dyn_block_system() is not implemented yet...!!");

	//1.Initialize two lists (AllocMemBlocksList & FreeMemBlocksList) [Hint: use LIST_INIT()]
	LIST_INIT(&AllocMemBlocksList);
f01076cf:	c7 05 c8 5c 87 f0 00 	movl   $0x0,0xf0875cc8
f01076d6:	00 00 00 
f01076d9:	c7 05 cc 5c 87 f0 00 	movl   $0x0,0xf0875ccc
f01076e0:	00 00 00 
f01076e3:	c7 05 d4 5c 87 f0 00 	movl   $0x0,0xf0875cd4
f01076ea:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f01076ed:	c7 05 64 5d 87 f0 00 	movl   $0x0,0xf0875d64
f01076f4:	00 00 00 
f01076f7:	c7 05 68 5d 87 f0 00 	movl   $0x0,0xf0875d68
f01076fe:	00 00 00 
f0107701:	c7 05 70 5d 87 f0 00 	movl   $0x0,0xf0875d70
f0107708:	00 00 00 
	uint32 arr_size = 0;
f010770b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//DO NOTHING
#else
	 //Dynamically allocate the array of MemBlockNodes remember to:

	 //2. set MAX_MEM_BLOCK_CNT with the chosen size of the array
	 MAX_MEM_BLOCK_CNT = (KERNEL_HEAP_MAX-KERNEL_HEAP_START)/PAGE_SIZE;
f0107712:	c7 05 04 5d 87 f0 ff 	movl   $0x9fff,0xf0875d04
f0107719:	9f 00 00 

	 //3. assign starting address of MemBlockNodes array
	 MemBlockNodes  =(struct MemBlock*) KERNEL_HEAP_START;
f010771c:	c7 05 d8 5c 87 f0 00 	movl   $0xf6000000,0xf0875cd8
f0107723:	00 00 f6 

	 //4.calculate the total size of memory required for the MemBlockNodes array (size of all the Structs)
	 arr_size =  ROUNDUP(MAX_MEM_BLOCK_CNT * sizeof(struct MemBlock), PAGE_SIZE);
f0107726:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f010772d:	a1 04 5d 87 f0       	mov    0xf0875d04,%eax
f0107732:	c1 e0 04             	shl    $0x4,%eax
f0107735:	89 c2                	mov    %eax,%edx
f0107737:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010773a:	01 d0                	add    %edx,%eax
f010773c:	48                   	dec    %eax
f010773d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107740:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107743:	ba 00 00 00 00       	mov    $0x0,%edx
f0107748:	f7 75 f0             	divl   -0x10(%ebp)
f010774b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010774e:	29 d0                	sub    %edx,%eax
f0107750:	89 45 f4             	mov    %eax,-0xc(%ebp)

	 //5. allocate_chunk for this total memory size, with correct startAddress
	 allocate_chunk(ptr_page_directory, KERNEL_HEAP_START , arr_size , PERM_WRITEABLE | PERM_PRESENT);
f0107753:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0107758:	6a 03                	push   $0x3
f010775a:	ff 75 f4             	pushl  -0xc(%ebp)
f010775d:	68 00 00 00 f6       	push   $0xf6000000
f0107762:	50                   	push   %eax
f0107763:	e8 bd 13 00 00       	call   f0108b25 <allocate_chunk>
f0107768:	83 c4 10             	add    $0x10,%esp
	 //HINT: can use alloc_chunk(...) function
#endif
	//6.Initialize AvailableMemBlocksList by filling it with the MemBlockNodes
	initialize_MemBlocksList(MAX_MEM_BLOCK_CNT);
f010776b:	a1 04 5d 87 f0       	mov    0xf0875d04,%eax
f0107770:	83 ec 0c             	sub    $0xc,%esp
f0107773:	50                   	push   %eax
f0107774:	e8 bd a2 02 00       	call   f0131a36 <initialize_MemBlocksList>
f0107779:	83 c4 10             	add    $0x10,%esp
	//7. Take a block from the AvailableMemBlocksList and fill its size with all of the heap size (without size allocated for the array) and think what should the start address be?
	struct MemBlock * NewBlock = LIST_FIRST(&AvailableMemBlocksList);
f010777c:	a1 98 5d 87 f0       	mov    0xf0875d98,%eax
f0107781:	89 45 e8             	mov    %eax,-0x18(%ebp)
	NewBlock->sva = KERNEL_HEAP_START + arr_size;
f0107784:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107787:	8d 90 00 00 00 f6    	lea    -0xa000000(%eax),%edx
f010778d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107790:	89 50 08             	mov    %edx,0x8(%eax)
	NewBlock->size = (KERNEL_HEAP_MAX-KERNEL_HEAP_START) - arr_size;
f0107793:	b8 00 f0 ff 09       	mov    $0x9fff000,%eax
f0107798:	2b 45 f4             	sub    -0xc(%ebp),%eax
f010779b:	89 c2                	mov    %eax,%edx
f010779d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077a0:	89 50 0c             	mov    %edx,0xc(%eax)
	LIST_REMOVE(&AvailableMemBlocksList,NewBlock);
f01077a3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01077a7:	75 14                	jne    f01077bd <initialize_dyn_block_system+0xf4>
f01077a9:	83 ec 04             	sub    $0x4,%esp
f01077ac:	68 e7 5e 13 f0       	push   $0xf0135ee7
f01077b1:	6a 30                	push   $0x30
f01077b3:	68 05 5f 13 f0       	push   $0xf0135f05
f01077b8:	e8 48 8a ff ff       	call   f0100205 <_panic>
f01077bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077c0:	8b 00                	mov    (%eax),%eax
f01077c2:	85 c0                	test   %eax,%eax
f01077c4:	74 10                	je     f01077d6 <initialize_dyn_block_system+0x10d>
f01077c6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077c9:	8b 00                	mov    (%eax),%eax
f01077cb:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01077ce:	8b 52 04             	mov    0x4(%edx),%edx
f01077d1:	89 50 04             	mov    %edx,0x4(%eax)
f01077d4:	eb 0b                	jmp    f01077e1 <initialize_dyn_block_system+0x118>
f01077d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077d9:	8b 40 04             	mov    0x4(%eax),%eax
f01077dc:	a3 9c 5d 87 f0       	mov    %eax,0xf0875d9c
f01077e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077e4:	8b 40 04             	mov    0x4(%eax),%eax
f01077e7:	85 c0                	test   %eax,%eax
f01077e9:	74 0f                	je     f01077fa <initialize_dyn_block_system+0x131>
f01077eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077ee:	8b 40 04             	mov    0x4(%eax),%eax
f01077f1:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01077f4:	8b 12                	mov    (%edx),%edx
f01077f6:	89 10                	mov    %edx,(%eax)
f01077f8:	eb 0a                	jmp    f0107804 <initialize_dyn_block_system+0x13b>
f01077fa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077fd:	8b 00                	mov    (%eax),%eax
f01077ff:	a3 98 5d 87 f0       	mov    %eax,0xf0875d98
f0107804:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107807:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010780d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107810:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107817:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f010781c:	48                   	dec    %eax
f010781d:	a3 a4 5d 87 f0       	mov    %eax,0xf0875da4
	//8. Insert a new MemBlock with the remaining heap size into the FreeMemBlocksList
	LIST_INSERT_HEAD(&FreeMemBlocksList, NewBlock);
f0107822:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0107826:	75 14                	jne    f010783c <initialize_dyn_block_system+0x173>
f0107828:	83 ec 04             	sub    $0x4,%esp
f010782b:	68 18 5f 13 f0       	push   $0xf0135f18
f0107830:	6a 32                	push   $0x32
f0107832:	68 05 5f 13 f0       	push   $0xf0135f05
f0107837:	e8 c9 89 ff ff       	call   f0100205 <_panic>
f010783c:	8b 15 64 5d 87 f0    	mov    0xf0875d64,%edx
f0107842:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107845:	89 10                	mov    %edx,(%eax)
f0107847:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010784a:	8b 00                	mov    (%eax),%eax
f010784c:	85 c0                	test   %eax,%eax
f010784e:	74 0d                	je     f010785d <initialize_dyn_block_system+0x194>
f0107850:	a1 64 5d 87 f0       	mov    0xf0875d64,%eax
f0107855:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107858:	89 50 04             	mov    %edx,0x4(%eax)
f010785b:	eb 08                	jmp    f0107865 <initialize_dyn_block_system+0x19c>
f010785d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107860:	a3 68 5d 87 f0       	mov    %eax,0xf0875d68
f0107865:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107868:	a3 64 5d 87 f0       	mov    %eax,0xf0875d64
f010786d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107870:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107877:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f010787c:	40                   	inc    %eax
f010787d:	a3 70 5d 87 f0       	mov    %eax,0xf0875d70

}
f0107882:	90                   	nop
f0107883:	c9                   	leave  
f0107884:	c3                   	ret    

f0107885 <kmalloc>:

void* kmalloc(unsigned int size)
{
f0107885:	55                   	push   %ebp
f0107886:	89 e5                	mov    %esp,%ebp
f0107888:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kmalloc
	// your code is here, remove the panic and write your code
	//kpanic_into_prompt("kmalloc() is not implemented yet...!!");
	uint32 allocate_size=ROUNDUP(size,PAGE_SIZE);
f010788b:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0107892:	8b 55 08             	mov    0x8(%ebp),%edx
f0107895:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107898:	01 d0                	add    %edx,%eax
f010789a:	48                   	dec    %eax
f010789b:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010789e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01078a1:	ba 00 00 00 00       	mov    $0x0,%edx
f01078a6:	f7 75 f0             	divl   -0x10(%ebp)
f01078a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01078ac:	29 d0                	sub    %edx,%eax
f01078ae:	89 45 e8             	mov    %eax,-0x18(%ebp)
	struct MemBlock * mem_block;

	if(isKHeapPlacementStrategyFIRSTFIT())
f01078b1:	e8 43 fd ff ff       	call   f01075f9 <isKHeapPlacementStrategyFIRSTFIT>
f01078b6:	84 c0                	test   %al,%al
f01078b8:	74 13                	je     f01078cd <kmalloc+0x48>
		mem_block = alloc_block_FF(allocate_size);
f01078ba:	83 ec 0c             	sub    $0xc,%esp
f01078bd:	ff 75 e8             	pushl  -0x18(%ebp)
f01078c0:	e8 33 a5 02 00       	call   f0131df8 <alloc_block_FF>
f01078c5:	83 c4 10             	add    $0x10,%esp
f01078c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01078cb:	eb 36                	jmp    f0107903 <kmalloc+0x7e>
	else if (isKHeapPlacementStrategyBESTFIT())
f01078cd:	e8 3c fd ff ff       	call   f010760e <isKHeapPlacementStrategyBESTFIT>
f01078d2:	84 c0                	test   %al,%al
f01078d4:	74 13                	je     f01078e9 <kmalloc+0x64>
		mem_block = alloc_block_BF(allocate_size);
f01078d6:	83 ec 0c             	sub    $0xc,%esp
f01078d9:	ff 75 e8             	pushl  -0x18(%ebp)
f01078dc:	e8 e4 a6 02 00       	call   f0131fc5 <alloc_block_BF>
f01078e1:	83 c4 10             	add    $0x10,%esp
f01078e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01078e7:	eb 1a                	jmp    f0107903 <kmalloc+0x7e>
	else if (isKHeapPlacementStrategyNEXTFIT())
f01078e9:	e8 35 fd ff ff       	call   f0107623 <isKHeapPlacementStrategyNEXTFIT>
f01078ee:	84 c0                	test   %al,%al
f01078f0:	74 11                	je     f0107903 <kmalloc+0x7e>
		mem_block = alloc_block_NF(allocate_size);
f01078f2:	83 ec 0c             	sub    $0xc,%esp
f01078f5:	ff 75 e8             	pushl  -0x18(%ebp)
f01078f8:	e8 d9 a8 02 00       	call   f01321d6 <alloc_block_NF>
f01078fd:	83 c4 10             	add    $0x10,%esp
f0107900:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if (mem_block != NULL )
f0107903:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107907:	74 40                	je     f0107949 <kmalloc+0xc4>
	{
		int result = allocate_chunk(ptr_page_directory,mem_block->sva,allocate_size,PERM_WRITEABLE| PERM_PRESENT);
f0107909:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010790c:	8b 50 08             	mov    0x8(%eax),%edx
f010790f:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0107914:	6a 03                	push   $0x3
f0107916:	ff 75 e8             	pushl  -0x18(%ebp)
f0107919:	52                   	push   %edx
f010791a:	50                   	push   %eax
f010791b:	e8 05 12 00 00       	call   f0108b25 <allocate_chunk>
f0107920:	83 c4 10             	add    $0x10,%esp
f0107923:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (result == 0)
f0107926:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010792a:	75 16                	jne    f0107942 <kmalloc+0xbd>
		{
			insert_sorted_allocList(mem_block);
f010792c:	83 ec 0c             	sub    $0xc,%esp
f010792f:	ff 75 f4             	pushl  -0xc(%ebp)
f0107932:	e8 34 a2 02 00       	call   f0131b6b <insert_sorted_allocList>
f0107937:	83 c4 10             	add    $0x10,%esp
			return (uint32 *) mem_block->sva;
f010793a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010793d:	8b 40 08             	mov    0x8(%eax),%eax
f0107940:	eb 0c                	jmp    f010794e <kmalloc+0xc9>
		}
		else
			return 	NULL;
f0107942:	b8 00 00 00 00       	mov    $0x0,%eax
f0107947:	eb 05                	jmp    f010794e <kmalloc+0xc9>
	}
	return NULL;
f0107949:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010794e:	c9                   	leave  
f010794f:	c3                   	ret    

f0107950 <kfree>:
void kfree(void* virtual_address)
{
f0107950:	55                   	push   %ebp
f0107951:	89 e5                	mov    %esp,%ebp
f0107953:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kfree
	// Write your code here, remove the panic and write your code
	//panic("kfree() is not implemented yet...!!");
	struct MemBlock * mem_block = find_block(&AllocMemBlocksList,(uint32)virtual_address);
f0107956:	8b 45 08             	mov    0x8(%ebp),%eax
f0107959:	83 ec 08             	sub    $0x8,%esp
f010795c:	50                   	push   %eax
f010795d:	68 c8 5c 87 f0       	push   $0xf0875cc8
f0107962:	e8 ac a1 02 00       	call   f0131b13 <find_block>
f0107967:	83 c4 10             	add    $0x10,%esp
f010796a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(mem_block != NULL)
f010796d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107971:	0f 84 fd 00 00 00    	je     f0107a74 <kfree+0x124>
	{
		LIST_REMOVE(&AllocMemBlocksList,mem_block);
f0107977:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010797b:	75 14                	jne    f0107991 <kfree+0x41>
f010797d:	83 ec 04             	sub    $0x4,%esp
f0107980:	68 e7 5e 13 f0       	push   $0xf0135ee7
f0107985:	6a 5a                	push   $0x5a
f0107987:	68 05 5f 13 f0       	push   $0xf0135f05
f010798c:	e8 74 88 ff ff       	call   f0100205 <_panic>
f0107991:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107994:	8b 00                	mov    (%eax),%eax
f0107996:	85 c0                	test   %eax,%eax
f0107998:	74 10                	je     f01079aa <kfree+0x5a>
f010799a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010799d:	8b 00                	mov    (%eax),%eax
f010799f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01079a2:	8b 52 04             	mov    0x4(%edx),%edx
f01079a5:	89 50 04             	mov    %edx,0x4(%eax)
f01079a8:	eb 0b                	jmp    f01079b5 <kfree+0x65>
f01079aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079ad:	8b 40 04             	mov    0x4(%eax),%eax
f01079b0:	a3 cc 5c 87 f0       	mov    %eax,0xf0875ccc
f01079b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079b8:	8b 40 04             	mov    0x4(%eax),%eax
f01079bb:	85 c0                	test   %eax,%eax
f01079bd:	74 0f                	je     f01079ce <kfree+0x7e>
f01079bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079c2:	8b 40 04             	mov    0x4(%eax),%eax
f01079c5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01079c8:	8b 12                	mov    (%edx),%edx
f01079ca:	89 10                	mov    %edx,(%eax)
f01079cc:	eb 0a                	jmp    f01079d8 <kfree+0x88>
f01079ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079d1:	8b 00                	mov    (%eax),%eax
f01079d3:	a3 c8 5c 87 f0       	mov    %eax,0xf0875cc8
f01079d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079db:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01079e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079e4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01079eb:	a1 d4 5c 87 f0       	mov    0xf0875cd4,%eax
f01079f0:	48                   	dec    %eax
f01079f1:	a3 d4 5c 87 f0       	mov    %eax,0xf0875cd4
		uint32 start = ROUNDDOWN(mem_block->sva,PAGE_SIZE);
f01079f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079f9:	8b 40 08             	mov    0x8(%eax),%eax
f01079fc:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01079ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107a02:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107a07:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32 end = ROUNDUP(mem_block->sva+mem_block->size,PAGE_SIZE);
f0107a0a:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0107a11:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107a14:	8b 50 08             	mov    0x8(%eax),%edx
f0107a17:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107a1a:	8b 40 0c             	mov    0xc(%eax),%eax
f0107a1d:	01 c2                	add    %eax,%edx
f0107a1f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107a22:	01 d0                	add    %edx,%eax
f0107a24:	48                   	dec    %eax
f0107a25:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0107a28:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107a2b:	ba 00 00 00 00       	mov    $0x0,%edx
f0107a30:	f7 75 e4             	divl   -0x1c(%ebp)
f0107a33:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107a36:	29 d0                	sub    %edx,%eax
f0107a38:	89 45 dc             	mov    %eax,-0x24(%ebp)

		for(uint32 i = start ; i < end; i += PAGE_SIZE)
f0107a3b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107a3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107a41:	eb 1b                	jmp    f0107a5e <kfree+0x10e>
			unmap_frame(ptr_page_directory , i);
f0107a43:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0107a48:	83 ec 08             	sub    $0x8,%esp
f0107a4b:	ff 75 f4             	pushl  -0xc(%ebp)
f0107a4e:	50                   	push   %eax
f0107a4f:	e8 22 f4 ff ff       	call   f0106e76 <unmap_frame>
f0107a54:	83 c4 10             	add    $0x10,%esp
	{
		LIST_REMOVE(&AllocMemBlocksList,mem_block);
		uint32 start = ROUNDDOWN(mem_block->sva,PAGE_SIZE);
		uint32 end = ROUNDUP(mem_block->sva+mem_block->size,PAGE_SIZE);

		for(uint32 i = start ; i < end; i += PAGE_SIZE)
f0107a57:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0107a5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107a61:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0107a64:	72 dd                	jb     f0107a43 <kfree+0xf3>
			unmap_frame(ptr_page_directory , i);

		insert_sorted_with_merge_freeList(mem_block);
f0107a66:	83 ec 0c             	sub    $0xc,%esp
f0107a69:	ff 75 f0             	pushl  -0x10(%ebp)
f0107a6c:	e8 32 ad 02 00       	call   f01327a3 <insert_sorted_with_merge_freeList>
f0107a71:	83 c4 10             	add    $0x10,%esp
	}
}
f0107a74:	90                   	nop
f0107a75:	c9                   	leave  
f0107a76:	c3                   	ret    

f0107a77 <kheap_virtual_address>:

unsigned int kheap_virtual_address(unsigned int physical_address)
{
f0107a77:	55                   	push   %ebp
f0107a78:	89 e5                	mov    %esp,%ebp
f0107a7a:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_virtual_address
	// Write your code here, remove the panic and write your code
//	panic("kheap_virtual_address() is not implemented yet...!!");

	struct FrameInfo *convert_to_va=to_frame_info(physical_address);
f0107a7d:	83 ec 0c             	sub    $0xc,%esp
f0107a80:	ff 75 08             	pushl  0x8(%ebp)
f0107a83:	e8 fb fb ff ff       	call   f0107683 <to_frame_info>
f0107a88:	83 c4 10             	add    $0x10,%esp
f0107a8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(convert_to_va!=NULL)
f0107a8e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107a92:	74 08                	je     f0107a9c <kheap_virtual_address+0x25>
		return convert_to_va->va;
f0107a94:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107a97:	8b 40 0c             	mov    0xc(%eax),%eax
f0107a9a:	eb 05                	jmp    f0107aa1 <kheap_virtual_address+0x2a>
	else
		return 0;
f0107a9c:	b8 00 00 00 00       	mov    $0x0,%eax
	//return the virtual address corresponding to given physical_address
	//refer to the project presentation and documentation for details
	//EFFICIENT IMPLEMENTATION ~O(1) IS REQUIRED ==================
}
f0107aa1:	c9                   	leave  
f0107aa2:	c3                   	ret    

f0107aa3 <kheap_physical_address>:

unsigned int kheap_physical_address(unsigned int virtual_address)
{
f0107aa3:	55                   	push   %ebp
f0107aa4:	89 e5                	mov    %esp,%ebp
f0107aa6:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_physical_address
	// Write your code here, remove the panic and write your code
	//panic("kheap_physical_address() is not implemented yet...!!");
	uint32 *ptr_page=NULL;
f0107aa9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	struct FrameInfo *frame_of_the_va = get_frame_info(ptr_page_directory,virtual_address,&ptr_page);
f0107ab0:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0107ab5:	83 ec 04             	sub    $0x4,%esp
f0107ab8:	8d 55 ec             	lea    -0x14(%ebp),%edx
f0107abb:	52                   	push   %edx
f0107abc:	ff 75 08             	pushl  0x8(%ebp)
f0107abf:	50                   	push   %eax
f0107ac0:	e8 41 f3 ff ff       	call   f0106e06 <get_frame_info>
f0107ac5:	83 c4 10             	add    $0x10,%esp
f0107ac8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 address_physical=to_physical_address(frame_of_the_va);
f0107acb:	83 ec 0c             	sub    $0xc,%esp
f0107ace:	ff 75 f4             	pushl  -0xc(%ebp)
f0107ad1:	e8 9a fb ff ff       	call   f0107670 <to_physical_address>
f0107ad6:	83 c4 10             	add    $0x10,%esp
f0107ad9:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(frame_of_the_va != NULL)
f0107adc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107ae0:	74 05                	je     f0107ae7 <kheap_physical_address+0x44>
		return address_physical;
f0107ae2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107ae5:	eb 05                	jmp    f0107aec <kheap_physical_address+0x49>
	return 0;
f0107ae7:	b8 00 00 00 00       	mov    $0x0,%eax

	//return the physical address corresponding to given virtual_address
	//refer to the project presentation and documentation for details
}
f0107aec:	c9                   	leave  
f0107aed:	c3                   	ret    

f0107aee <kfreeall>:


void kfreeall()
{
f0107aee:	55                   	push   %ebp
f0107aef:	89 e5                	mov    %esp,%ebp
f0107af1:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107af4:	83 ec 04             	sub    $0x4,%esp
f0107af7:	68 3b 5f 13 f0       	push   $0xf0135f3b
f0107afc:	68 89 00 00 00       	push   $0x89
f0107b01:	68 05 5f 13 f0       	push   $0xf0135f05
f0107b06:	e8 fa 86 ff ff       	call   f0100205 <_panic>

f0107b0b <kshrink>:

}

void kshrink(uint32 newSize)
{
f0107b0b:	55                   	push   %ebp
f0107b0c:	89 e5                	mov    %esp,%ebp
f0107b0e:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107b11:	83 ec 04             	sub    $0x4,%esp
f0107b14:	68 3b 5f 13 f0       	push   $0xf0135f3b
f0107b19:	68 8f 00 00 00       	push   $0x8f
f0107b1e:	68 05 5f 13 f0       	push   $0xf0135f05
f0107b23:	e8 dd 86 ff ff       	call   f0100205 <_panic>

f0107b28 <kexpand>:
}

void kexpand(uint32 newSize)
{
f0107b28:	55                   	push   %ebp
f0107b29:	89 e5                	mov    %esp,%ebp
f0107b2b:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107b2e:	83 ec 04             	sub    $0x4,%esp
f0107b31:	68 3b 5f 13 f0       	push   $0xf0135f3b
f0107b36:	68 94 00 00 00       	push   $0x94
f0107b3b:	68 05 5f 13 f0       	push   $0xf0135f05
f0107b40:	e8 c0 86 ff ff       	call   f0100205 <_panic>

f0107b45 <krealloc>:

//	A call with virtual_address = null is equivalent to kmalloc().
//	A call with new_size = zero is equivalent to kfree().

void *krealloc(void *virtual_address, uint32 new_size)
{
f0107b45:	55                   	push   %ebp
f0107b46:	89 e5                	mov    %esp,%ebp
f0107b48:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [KERNEL HEAP] krealloc
	// Write your code here, remove the panic and write your code
	panic("krealloc() is not implemented yet...!!");
f0107b4b:	83 ec 04             	sub    $0x4,%esp
f0107b4e:	68 4c 5f 13 f0       	push   $0xf0135f4c
f0107b53:	68 ab 00 00 00       	push   $0xab
f0107b58:	68 05 5f 13 f0       	push   $0xf0135f05
f0107b5d:	e8 a3 86 ff ff       	call   f0100205 <_panic>

f0107b62 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0107b62:	55                   	push   %ebp
f0107b63:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0107b65:	8b 45 08             	mov    0x8(%ebp),%eax
f0107b68:	8b 15 54 5d 87 f0    	mov    0xf0875d54,%edx
f0107b6e:	29 d0                	sub    %edx,%eax
f0107b70:	c1 f8 03             	sar    $0x3,%eax
f0107b73:	89 c2                	mov    %eax,%edx
f0107b75:	89 d0                	mov    %edx,%eax
f0107b77:	c1 e0 02             	shl    $0x2,%eax
f0107b7a:	01 d0                	add    %edx,%eax
f0107b7c:	c1 e0 02             	shl    $0x2,%eax
f0107b7f:	01 d0                	add    %edx,%eax
f0107b81:	c1 e0 02             	shl    $0x2,%eax
f0107b84:	01 d0                	add    %edx,%eax
f0107b86:	89 c1                	mov    %eax,%ecx
f0107b88:	c1 e1 08             	shl    $0x8,%ecx
f0107b8b:	01 c8                	add    %ecx,%eax
f0107b8d:	89 c1                	mov    %eax,%ecx
f0107b8f:	c1 e1 10             	shl    $0x10,%ecx
f0107b92:	01 c8                	add    %ecx,%eax
f0107b94:	01 c0                	add    %eax,%eax
f0107b96:	01 d0                	add    %edx,%eax
}
f0107b98:	5d                   	pop    %ebp
f0107b99:	c3                   	ret    

f0107b9a <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107b9a:	55                   	push   %ebp
f0107b9b:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0107b9d:	ff 75 08             	pushl  0x8(%ebp)
f0107ba0:	e8 bd ff ff ff       	call   f0107b62 <to_frame_number>
f0107ba5:	83 c4 04             	add    $0x4,%esp
f0107ba8:	c1 e0 0c             	shl    $0xc,%eax
}
f0107bab:	c9                   	leave  
f0107bac:	c3                   	ret    

f0107bad <pt_set_page_permissions>:
 */
#include "memory_manager.h"

/*[2.1] PAGE TABLE ENTRIES MANIPULATION */
inline void pt_set_page_permissions(uint32* page_directory, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f0107bad:	55                   	push   %ebp
f0107bae:	89 e5                	mov    %esp,%ebp
f0107bb0:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_set_page_permissions
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0107bb3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107bba:	83 ec 04             	sub    $0x4,%esp
f0107bbd:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0107bc0:	50                   	push   %eax
f0107bc1:	ff 75 0c             	pushl  0xc(%ebp)
f0107bc4:	ff 75 08             	pushl  0x8(%ebp)
f0107bc7:	e8 e5 ee ff ff       	call   f0106ab1 <get_page_table>
f0107bcc:	83 c4 10             	add    $0x10,%esp

	if (page_table_point!=NULL)
f0107bcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107bd2:	85 c0                	test   %eax,%eax
f0107bd4:	74 75                	je     f0107c4b <pt_set_page_permissions+0x9e>
	{
		page_table_point[PTX(virtual_address)] &= ~(permissions_to_clear);
f0107bd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107bd9:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107bdc:	c1 ea 0c             	shr    $0xc,%edx
f0107bdf:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107be5:	c1 e2 02             	shl    $0x2,%edx
f0107be8:	01 d0                	add    %edx,%eax
f0107bea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107bed:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0107bf0:	c1 e9 0c             	shr    $0xc,%ecx
f0107bf3:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107bf9:	c1 e1 02             	shl    $0x2,%ecx
f0107bfc:	01 ca                	add    %ecx,%edx
f0107bfe:	8b 12                	mov    (%edx),%edx
f0107c00:	8b 4d 14             	mov    0x14(%ebp),%ecx
f0107c03:	f7 d1                	not    %ecx
f0107c05:	21 ca                	and    %ecx,%edx
f0107c07:	89 10                	mov    %edx,(%eax)
		page_table_point[PTX(virtual_address)] |= permissions_to_set;
f0107c09:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c0c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107c0f:	c1 ea 0c             	shr    $0xc,%edx
f0107c12:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107c18:	c1 e2 02             	shl    $0x2,%edx
f0107c1b:	01 c2                	add    %eax,%edx
f0107c1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c20:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0107c23:	c1 e9 0c             	shr    $0xc,%ecx
f0107c26:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107c2c:	c1 e1 02             	shl    $0x2,%ecx
f0107c2f:	01 c8                	add    %ecx,%eax
f0107c31:	8b 00                	mov    (%eax),%eax
f0107c33:	0b 45 10             	or     0x10(%ebp),%eax
f0107c36:	89 02                	mov    %eax,(%edx)
		tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107c38:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107c3b:	83 ec 08             	sub    $0x8,%esp
f0107c3e:	50                   	push   %eax
f0107c3f:	6a 00                	push   $0x0
f0107c41:	e8 c8 e8 ff ff       	call   f010650e <tlb_invalidate>
f0107c46:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		panic("Page Table doesn't exist...!");
	}
}
f0107c49:	eb 14                	jmp    f0107c5f <pt_set_page_permissions+0xb2>
		page_table_point[PTX(virtual_address)] |= permissions_to_set;
		tlb_invalidate((void *)NULL, (void *)virtual_address);
	}
	else
	{
		panic("Page Table doesn't exist...!");
f0107c4b:	83 ec 04             	sub    $0x4,%esp
f0107c4e:	68 73 5f 13 f0       	push   $0xf0135f73
f0107c53:	6a 19                	push   $0x19
f0107c55:	68 90 5f 13 f0       	push   $0xf0135f90
f0107c5a:	e8 a6 85 ff ff       	call   f0100205 <_panic>
	}
}
f0107c5f:	c9                   	leave  
f0107c60:	c3                   	ret    

f0107c61 <pt_get_page_permissions>:

inline int pt_get_page_permissions(uint32* page_directory, uint32 virtual_address )
{
f0107c61:	55                   	push   %ebp
f0107c62:	89 e5                	mov    %esp,%ebp
f0107c64:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_get_page_permissions
	// Write your code here, remove the panic and write your code

	uint32* page_table_point=NULL;
f0107c67:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 entry_of_page_table;
	uint32 Permissions_of_entry;
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107c6e:	83 ec 04             	sub    $0x4,%esp
f0107c71:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107c74:	50                   	push   %eax
f0107c75:	ff 75 0c             	pushl  0xc(%ebp)
f0107c78:	ff 75 08             	pushl  0x8(%ebp)
f0107c7b:	e8 31 ee ff ff       	call   f0106ab1 <get_page_table>
f0107c80:	83 c4 10             	add    $0x10,%esp
	if(page_table_point!=NULL)
f0107c83:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107c86:	85 c0                	test   %eax,%eax
f0107c88:	74 2b                	je     f0107cb5 <pt_get_page_permissions+0x54>
	{
		entry_of_page_table=page_table_point[PTX(virtual_address)];
f0107c8a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107c8d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107c90:	c1 ea 0c             	shr    $0xc,%edx
f0107c93:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107c99:	c1 e2 02             	shl    $0x2,%edx
f0107c9c:	01 d0                	add    %edx,%eax
f0107c9e:	8b 00                	mov    (%eax),%eax
f0107ca0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		Permissions_of_entry=entry_of_page_table&=0x00000FFF;
f0107ca3:	81 65 f4 ff 0f 00 00 	andl   $0xfff,-0xc(%ebp)
f0107caa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107cad:	89 45 f0             	mov    %eax,-0x10(%ebp)


		return Permissions_of_entry;
f0107cb0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107cb3:	eb 05                	jmp    f0107cba <pt_get_page_permissions+0x59>
	}

	else
	{
		return -1;
f0107cb5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
}
f0107cba:	c9                   	leave  
f0107cbb:	c3                   	ret    

f0107cbc <pt_clear_page_table_entry>:

inline void pt_clear_page_table_entry(uint32* page_directory, uint32 virtual_address)
{
f0107cbc:	55                   	push   %ebp
f0107cbd:	89 e5                	mov    %esp,%ebp
f0107cbf:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_clear_page_table_entry
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0107cc2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107cc9:	83 ec 04             	sub    $0x4,%esp
f0107ccc:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0107ccf:	50                   	push   %eax
f0107cd0:	ff 75 0c             	pushl  0xc(%ebp)
f0107cd3:	ff 75 08             	pushl  0x8(%ebp)
f0107cd6:	e8 d6 ed ff ff       	call   f0106ab1 <get_page_table>
f0107cdb:	83 c4 10             	add    $0x10,%esp
	if (page_table_point!=NULL)
f0107cde:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ce1:	85 c0                	test   %eax,%eax
f0107ce3:	74 2d                	je     f0107d12 <pt_clear_page_table_entry+0x56>
	{
		page_table_point[PTX(virtual_address)] = 0;
f0107ce5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ce8:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107ceb:	c1 ea 0c             	shr    $0xc,%edx
f0107cee:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107cf4:	c1 e2 02             	shl    $0x2,%edx
f0107cf7:	01 d0                	add    %edx,%eax
f0107cf9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107cff:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107d02:	83 ec 08             	sub    $0x8,%esp
f0107d05:	50                   	push   %eax
f0107d06:	6a 00                	push   $0x0
f0107d08:	e8 01 e8 ff ff       	call   f010650e <tlb_invalidate>
f0107d0d:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		panic("Page Table doesn't exist...!");
	}
}
f0107d10:	eb 14                	jmp    f0107d26 <pt_clear_page_table_entry+0x6a>
		page_table_point[PTX(virtual_address)] = 0;
		tlb_invalidate((void *)NULL, (void *)virtual_address);
	}
	else
	{
		panic("Page Table doesn't exist...!");
f0107d12:	83 ec 04             	sub    $0x4,%esp
f0107d15:	68 73 5f 13 f0       	push   $0xf0135f73
f0107d1a:	6a 42                	push   $0x42
f0107d1c:	68 90 5f 13 f0       	push   $0xf0135f90
f0107d21:	e8 df 84 ff ff       	call   f0100205 <_panic>
	}
}
f0107d26:	c9                   	leave  
f0107d27:	c3                   	ret    

f0107d28 <virtual_to_physical>:

/***********************************************************************************************/

/*[2.2] ADDRESS CONVERTION*/
inline int virtual_to_physical(uint32* page_directory, uint32 virtual_address)
{
f0107d28:	55                   	push   %ebp
f0107d29:	89 e5                	mov    %esp,%ebp
f0107d2b:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] virtual_to_physical
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0107d2e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107d35:	83 ec 04             	sub    $0x4,%esp
f0107d38:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0107d3b:	50                   	push   %eax
f0107d3c:	ff 75 0c             	pushl  0xc(%ebp)
f0107d3f:	ff 75 08             	pushl  0x8(%ebp)
f0107d42:	e8 6a ed ff ff       	call   f0106ab1 <get_page_table>
f0107d47:	83 c4 10             	add    $0x10,%esp

	if(page_table_point != NULL)
f0107d4a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107d4d:	85 c0                	test   %eax,%eax
f0107d4f:	74 28                	je     f0107d79 <virtual_to_physical+0x51>
	{
		struct FrameInfo * frame_info = get_frame_info(page_directory,virtual_address,&page_table_point);
f0107d51:	83 ec 04             	sub    $0x4,%esp
f0107d54:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0107d57:	50                   	push   %eax
f0107d58:	ff 75 0c             	pushl  0xc(%ebp)
f0107d5b:	ff 75 08             	pushl  0x8(%ebp)
f0107d5e:	e8 a3 f0 ff ff       	call   f0106e06 <get_frame_info>
f0107d63:	83 c4 10             	add    $0x10,%esp
f0107d66:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return to_physical_address(frame_info);
f0107d69:	83 ec 0c             	sub    $0xc,%esp
f0107d6c:	ff 75 f4             	pushl  -0xc(%ebp)
f0107d6f:	e8 26 fe ff ff       	call   f0107b9a <to_physical_address>
f0107d74:	83 c4 10             	add    $0x10,%esp
f0107d77:	eb 05                	jmp    f0107d7e <virtual_to_physical+0x56>
	}
	return -1;
f0107d79:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
f0107d7e:	c9                   	leave  
f0107d7f:	c3                   	ret    

f0107d80 <pd_is_table_used>:

///============================================================================================
/// Dealing with page directory entry flags

inline uint32 pd_is_table_used(uint32* page_directory, uint32 virtual_address)
{
f0107d80:	55                   	push   %ebp
f0107d81:	89 e5                	mov    %esp,%ebp
	return ( (page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f0107d83:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107d86:	c1 e8 16             	shr    $0x16,%eax
f0107d89:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107d90:	8b 45 08             	mov    0x8(%ebp),%eax
f0107d93:	01 d0                	add    %edx,%eax
f0107d95:	8b 00                	mov    (%eax),%eax
f0107d97:	83 e0 20             	and    $0x20,%eax
f0107d9a:	85 c0                	test   %eax,%eax
f0107d9c:	0f 95 c0             	setne  %al
f0107d9f:	0f b6 c0             	movzbl %al,%eax
}
f0107da2:	5d                   	pop    %ebp
f0107da3:	c3                   	ret    

f0107da4 <pd_set_table_unused>:

inline void pd_set_table_unused(uint32* page_directory, uint32 virtual_address)
{
f0107da4:	55                   	push   %ebp
f0107da5:	89 e5                	mov    %esp,%ebp
f0107da7:	83 ec 08             	sub    $0x8,%esp
	page_directory[PDX(virtual_address)] &= (~PERM_USED);
f0107daa:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107dad:	c1 e8 16             	shr    $0x16,%eax
f0107db0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107db7:	8b 45 08             	mov    0x8(%ebp),%eax
f0107dba:	01 d0                	add    %edx,%eax
f0107dbc:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107dbf:	c1 ea 16             	shr    $0x16,%edx
f0107dc2:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0107dc9:	8b 55 08             	mov    0x8(%ebp),%edx
f0107dcc:	01 ca                	add    %ecx,%edx
f0107dce:	8b 12                	mov    (%edx),%edx
f0107dd0:	83 e2 df             	and    $0xffffffdf,%edx
f0107dd3:	89 10                	mov    %edx,(%eax)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107dd5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107dd8:	83 ec 08             	sub    $0x8,%esp
f0107ddb:	50                   	push   %eax
f0107ddc:	6a 00                	push   $0x0
f0107dde:	e8 2b e7 ff ff       	call   f010650e <tlb_invalidate>
f0107de3:	83 c4 10             	add    $0x10,%esp
}
f0107de6:	90                   	nop
f0107de7:	c9                   	leave  
f0107de8:	c3                   	ret    

f0107de9 <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(uint32* page_directory, uint32 virtual_address)
{
f0107de9:	55                   	push   %ebp
f0107dea:	89 e5                	mov    %esp,%ebp
f0107dec:	83 ec 10             	sub    $0x10,%esp
	page_directory[PDX(virtual_address)] = 0 ;
f0107def:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107df2:	c1 e8 16             	shr    $0x16,%eax
f0107df5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107dfc:	8b 45 08             	mov    0x8(%ebp),%eax
f0107dff:	01 d0                	add    %edx,%eax
f0107e01:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0107e07:	0f 20 d8             	mov    %cr3,%eax
f0107e0a:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0107e0d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0107e10:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0107e13:	90                   	nop
f0107e14:	c9                   	leave  
f0107e15:	c3                   	ret    

f0107e16 <env_page_ws_get_size>:

///============================================================================================
/// Dealing with environment working set

inline uint32 env_page_ws_get_size(struct Env *e)
{
f0107e16:	55                   	push   %ebp
f0107e17:	89 e5                	mov    %esp,%ebp
f0107e19:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0107e1c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0107e23:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f0107e2a:	eb 21                	jmp    f0107e4d <env_page_ws_get_size+0x37>
f0107e2c:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e2f:	8b 48 78             	mov    0x78(%eax),%ecx
f0107e32:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0107e35:	89 d0                	mov    %edx,%eax
f0107e37:	01 c0                	add    %eax,%eax
f0107e39:	01 d0                	add    %edx,%eax
f0107e3b:	c1 e0 03             	shl    $0x3,%eax
f0107e3e:	01 c8                	add    %ecx,%eax
f0107e40:	8a 40 04             	mov    0x4(%eax),%al
f0107e43:	84 c0                	test   %al,%al
f0107e45:	75 03                	jne    f0107e4a <env_page_ws_get_size+0x34>
f0107e47:	ff 45 f8             	incl   -0x8(%ebp)
f0107e4a:	ff 45 fc             	incl   -0x4(%ebp)
f0107e4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e50:	8b 50 74             	mov    0x74(%eax),%edx
f0107e53:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0107e56:	39 c2                	cmp    %eax,%edx
f0107e58:	77 d2                	ja     f0107e2c <env_page_ws_get_size+0x16>
	return counter;
f0107e5a:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0107e5d:	c9                   	leave  
f0107e5e:	c3                   	ret    

f0107e5f <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0107e5f:	55                   	push   %ebp
f0107e60:	89 e5                	mov    %esp,%ebp
f0107e62:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0107e65:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f0107e6c:	eb 4c                	jmp    f0107eba <env_page_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f0107e6e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e71:	8b 48 78             	mov    0x78(%eax),%ecx
f0107e74:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107e77:	89 d0                	mov    %edx,%eax
f0107e79:	01 c0                	add    %eax,%eax
f0107e7b:	01 d0                	add    %edx,%eax
f0107e7d:	c1 e0 03             	shl    $0x3,%eax
f0107e80:	01 c8                	add    %ecx,%eax
f0107e82:	8b 00                	mov    (%eax),%eax
f0107e84:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107e87:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107e8a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107e8f:	89 c2                	mov    %eax,%edx
f0107e91:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107e94:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107e97:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107e9a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107e9f:	39 c2                	cmp    %eax,%edx
f0107ea1:	75 14                	jne    f0107eb7 <env_page_ws_invalidate+0x58>
		{
			env_page_ws_clear_entry(e, i);
f0107ea3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ea6:	83 ec 08             	sub    $0x8,%esp
f0107ea9:	50                   	push   %eax
f0107eaa:	ff 75 08             	pushl  0x8(%ebp)
f0107ead:	e8 b9 00 00 00       	call   f0107f6b <env_page_ws_clear_entry>
f0107eb2:	83 c4 10             	add    $0x10,%esp
			break;
f0107eb5:	eb 10                	jmp    f0107ec7 <env_page_ws_invalidate+0x68>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f0107eb7:	ff 45 f4             	incl   -0xc(%ebp)
f0107eba:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ebd:	8b 50 74             	mov    0x74(%eax),%edx
f0107ec0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ec3:	39 c2                	cmp    %eax,%edx
f0107ec5:	77 a7                	ja     f0107e6e <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f0107ec7:	90                   	nop
f0107ec8:	c9                   	leave  
f0107ec9:	c3                   	ret    

f0107eca <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0107eca:	55                   	push   %ebp
f0107ecb:	89 e5                	mov    %esp,%ebp
f0107ecd:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f0107ed0:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ed3:	8b 40 74             	mov    0x74(%eax),%eax
f0107ed6:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107ed9:	77 16                	ja     f0107ef1 <env_page_ws_set_entry+0x27>
f0107edb:	68 ac 5f 13 f0       	push   $0xf0135fac
f0107ee0:	68 e2 5f 13 f0       	push   $0xf0135fe2
f0107ee5:	6a 26                	push   $0x26
f0107ee7:	68 f8 5f 13 f0       	push   $0xf0135ff8
f0107eec:	e8 14 83 ff ff       	call   f0100205 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f0107ef1:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0107ef8:	76 16                	jbe    f0107f10 <env_page_ws_set_entry+0x46>
f0107efa:	68 18 60 13 f0       	push   $0xf0136018
f0107eff:	68 e2 5f 13 f0       	push   $0xf0135fe2
f0107f04:	6a 27                	push   $0x27
f0107f06:	68 f8 5f 13 f0       	push   $0xf0135ff8
f0107f0b:	e8 f5 82 ff ff       	call   f0100205 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f0107f10:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f13:	8b 48 78             	mov    0x78(%eax),%ecx
f0107f16:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f19:	89 d0                	mov    %edx,%eax
f0107f1b:	01 c0                	add    %eax,%eax
f0107f1d:	01 d0                	add    %edx,%eax
f0107f1f:	c1 e0 03             	shl    $0x3,%eax
f0107f22:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0107f25:	8b 45 10             	mov    0x10(%ebp),%eax
f0107f28:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107f2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107f2e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107f33:	89 02                	mov    %eax,(%edx)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f0107f35:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f38:	8b 48 78             	mov    0x78(%eax),%ecx
f0107f3b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f3e:	89 d0                	mov    %edx,%eax
f0107f40:	01 c0                	add    %eax,%eax
f0107f42:	01 d0                	add    %edx,%eax
f0107f44:	c1 e0 03             	shl    $0x3,%eax
f0107f47:	01 c8                	add    %ecx,%eax
f0107f49:	c6 40 04 00          	movb   $0x0,0x4(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f0107f4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f50:	8b 48 78             	mov    0x78(%eax),%ecx
f0107f53:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f56:	89 d0                	mov    %edx,%eax
f0107f58:	01 c0                	add    %eax,%eax
f0107f5a:	01 d0                	add    %edx,%eax
f0107f5c:	c1 e0 03             	shl    $0x3,%eax
f0107f5f:	01 c8                	add    %ecx,%eax
f0107f61:	c7 40 08 00 00 00 80 	movl   $0x80000000,0x8(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f0107f68:	90                   	nop
}
f0107f69:	c9                   	leave  
f0107f6a:	c3                   	ret    

f0107f6b <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0107f6b:	55                   	push   %ebp
f0107f6c:	89 e5                	mov    %esp,%ebp
f0107f6e:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0107f71:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f74:	8b 40 74             	mov    0x74(%eax),%eax
f0107f77:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107f7a:	77 16                	ja     f0107f92 <env_page_ws_clear_entry+0x27>
f0107f7c:	68 4c 60 13 f0       	push   $0xf013604c
f0107f81:	68 e2 5f 13 f0       	push   $0xf0135fe2
f0107f86:	6a 32                	push   $0x32
f0107f88:	68 f8 5f 13 f0       	push   $0xf0135ff8
f0107f8d:	e8 73 82 ff ff       	call   f0100205 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f0107f92:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f95:	8b 48 78             	mov    0x78(%eax),%ecx
f0107f98:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f9b:	89 d0                	mov    %edx,%eax
f0107f9d:	01 c0                	add    %eax,%eax
f0107f9f:	01 d0                	add    %edx,%eax
f0107fa1:	c1 e0 03             	shl    $0x3,%eax
f0107fa4:	01 c8                	add    %ecx,%eax
f0107fa6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f0107fac:	8b 45 08             	mov    0x8(%ebp),%eax
f0107faf:	8b 48 78             	mov    0x78(%eax),%ecx
f0107fb2:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107fb5:	89 d0                	mov    %edx,%eax
f0107fb7:	01 c0                	add    %eax,%eax
f0107fb9:	01 d0                	add    %edx,%eax
f0107fbb:	c1 e0 03             	shl    $0x3,%eax
f0107fbe:	01 c8                	add    %ecx,%eax
f0107fc0:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f0107fc4:	8b 45 08             	mov    0x8(%ebp),%eax
f0107fc7:	8b 48 78             	mov    0x78(%eax),%ecx
f0107fca:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107fcd:	89 d0                	mov    %edx,%eax
f0107fcf:	01 c0                	add    %eax,%eax
f0107fd1:	01 d0                	add    %edx,%eax
f0107fd3:	c1 e0 03             	shl    $0x3,%eax
f0107fd6:	01 c8                	add    %ecx,%eax
f0107fd8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
f0107fdf:	90                   	nop
f0107fe0:	c9                   	leave  
f0107fe1:	c3                   	ret    

f0107fe2 <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0107fe2:	55                   	push   %ebp
f0107fe3:	89 e5                	mov    %esp,%ebp
f0107fe5:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0107fe8:	8b 45 08             	mov    0x8(%ebp),%eax
f0107feb:	8b 40 74             	mov    0x74(%eax),%eax
f0107fee:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107ff1:	77 16                	ja     f0108009 <env_page_ws_get_virtual_address+0x27>
f0107ff3:	68 4c 60 13 f0       	push   $0xf013604c
f0107ff8:	68 e2 5f 13 f0       	push   $0xf0135fe2
f0107ffd:	6a 3a                	push   $0x3a
f0107fff:	68 f8 5f 13 f0       	push   $0xf0135ff8
f0108004:	e8 fc 81 ff ff       	call   f0100205 <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f0108009:	8b 45 08             	mov    0x8(%ebp),%eax
f010800c:	8b 48 78             	mov    0x78(%eax),%ecx
f010800f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108012:	89 d0                	mov    %edx,%eax
f0108014:	01 c0                	add    %eax,%eax
f0108016:	01 d0                	add    %edx,%eax
f0108018:	c1 e0 03             	shl    $0x3,%eax
f010801b:	01 c8                	add    %ecx,%eax
f010801d:	8b 00                	mov    (%eax),%eax
f010801f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108022:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108025:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f010802a:	c9                   	leave  
f010802b:	c3                   	ret    

f010802c <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f010802c:	55                   	push   %ebp
f010802d:	89 e5                	mov    %esp,%ebp
f010802f:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0108032:	8b 45 08             	mov    0x8(%ebp),%eax
f0108035:	8b 40 74             	mov    0x74(%eax),%eax
f0108038:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010803b:	77 16                	ja     f0108053 <env_page_ws_get_time_stamp+0x27>
f010803d:	68 4c 60 13 f0       	push   $0xf013604c
f0108042:	68 e2 5f 13 f0       	push   $0xf0135fe2
f0108047:	6a 40                	push   $0x40
f0108049:	68 f8 5f 13 f0       	push   $0xf0135ff8
f010804e:	e8 b2 81 ff ff       	call   f0100205 <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f0108053:	8b 45 08             	mov    0x8(%ebp),%eax
f0108056:	8b 48 78             	mov    0x78(%eax),%ecx
f0108059:	8b 55 0c             	mov    0xc(%ebp),%edx
f010805c:	89 d0                	mov    %edx,%eax
f010805e:	01 c0                	add    %eax,%eax
f0108060:	01 d0                	add    %edx,%eax
f0108062:	c1 e0 03             	shl    $0x3,%eax
f0108065:	01 c8                	add    %ecx,%eax
f0108067:	8b 40 08             	mov    0x8(%eax),%eax
}
f010806a:	c9                   	leave  
f010806b:	c3                   	ret    

f010806c <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f010806c:	55                   	push   %ebp
f010806d:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f010806f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108072:	8b 48 78             	mov    0x78(%eax),%ecx
f0108075:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108078:	89 d0                	mov    %edx,%eax
f010807a:	01 c0                	add    %eax,%eax
f010807c:	01 d0                	add    %edx,%eax
f010807e:	c1 e0 03             	shl    $0x3,%eax
f0108081:	01 c8                	add    %ecx,%eax
f0108083:	8a 40 04             	mov    0x4(%eax),%al
f0108086:	0f b6 c0             	movzbl %al,%eax
}
f0108089:	5d                   	pop    %ebp
f010808a:	c3                   	ret    

f010808b <env_page_ws_print>:

void env_page_ws_print(struct Env *e)
{
f010808b:	55                   	push   %ebp
f010808c:	89 e5                	mov    %esp,%ebp
f010808e:	53                   	push   %ebx
f010808f:	83 ec 24             	sub    $0x24,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108092:	83 ec 0c             	sub    $0xc,%esp
f0108095:	6a 02                	push   $0x2
f0108097:	e8 a7 5c 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f010809c:	83 c4 10             	add    $0x10,%esp
f010809f:	85 c0                	test   %eax,%eax
f01080a1:	0f 84 fe 00 00 00    	je     f01081a5 <env_page_ws_print+0x11a>
	{
		int i = 0;
f01080a7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f01080ae:	83 ec 0c             	sub    $0xc,%esp
f01080b1:	68 84 60 13 f0       	push   $0xf0136084
f01080b6:	e8 53 8c ff ff       	call   f0100d0e <cprintf>
f01080bb:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f01080be:	8b 45 08             	mov    0x8(%ebp),%eax
f01080c1:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f01080c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01080ca:	eb 2c                	jmp    f01080f8 <env_page_ws_print+0x6d>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f01080cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01080cf:	8b 10                	mov    (%eax),%edx
f01080d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01080d4:	8d 48 01             	lea    0x1(%eax),%ecx
f01080d7:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f01080da:	83 ec 04             	sub    $0x4,%esp
f01080dd:	52                   	push   %edx
f01080de:	50                   	push   %eax
f01080df:	68 9e 60 13 f0       	push   $0xf013609e
f01080e4:	e8 25 8c ff ff       	call   f0100d0e <cprintf>
f01080e9:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f01080ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01080ef:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f01080f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01080f8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01080fc:	74 08                	je     f0108106 <env_page_ws_print+0x7b>
f01080fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108101:	8b 40 10             	mov    0x10(%eax),%eax
f0108104:	eb 05                	jmp    f010810b <env_page_ws_print+0x80>
f0108106:	b8 00 00 00 00       	mov    $0x0,%eax
f010810b:	8b 55 08             	mov    0x8(%ebp),%edx
f010810e:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f0108114:	8b 45 08             	mov    0x8(%ebp),%eax
f0108117:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010811d:	85 c0                	test   %eax,%eax
f010811f:	75 ab                	jne    f01080cc <env_page_ws_print+0x41>
f0108121:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108125:	75 a5                	jne    f01080cc <env_page_ws_print+0x41>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f0108127:	83 ec 0c             	sub    $0xc,%esp
f010812a:	68 a6 60 13 f0       	push   $0xf01360a6
f010812f:	e8 da 8b ff ff       	call   f0100d0e <cprintf>
f0108134:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f0108137:	8b 45 08             	mov    0x8(%ebp),%eax
f010813a:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f0108140:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108143:	eb 2c                	jmp    f0108171 <env_page_ws_print+0xe6>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f0108145:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108148:	8b 10                	mov    (%eax),%edx
f010814a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010814d:	8d 48 01             	lea    0x1(%eax),%ecx
f0108150:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0108153:	83 ec 04             	sub    $0x4,%esp
f0108156:	52                   	push   %edx
f0108157:	50                   	push   %eax
f0108158:	68 9e 60 13 f0       	push   $0xf013609e
f010815d:	e8 ac 8b ff ff       	call   f0100d0e <cprintf>
f0108162:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f0108165:	8b 45 08             	mov    0x8(%ebp),%eax
f0108168:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010816e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108171:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108175:	74 08                	je     f010817f <env_page_ws_print+0xf4>
f0108177:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010817a:	8b 40 10             	mov    0x10(%eax),%eax
f010817d:	eb 05                	jmp    f0108184 <env_page_ws_print+0xf9>
f010817f:	b8 00 00 00 00       	mov    $0x0,%eax
f0108184:	8b 55 08             	mov    0x8(%ebp),%edx
f0108187:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010818d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108190:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0108196:	85 c0                	test   %eax,%eax
f0108198:	75 ab                	jne    f0108145 <env_page_ws_print+0xba>
f010819a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010819e:	75 a5                	jne    f0108145 <env_page_ws_print+0xba>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f01081a0:	e9 95 01 00 00       	jmp    f010833a <env_page_ws_print+0x2af>
		}
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
f01081a5:	83 ec 0c             	sub    $0xc,%esp
f01081a8:	68 c1 60 13 f0       	push   $0xf01360c1
f01081ad:	e8 5c 8b ff ff       	call   f0100d0e <cprintf>
f01081b2:	83 c4 10             	add    $0x10,%esp
		for(i=0; i< (e->page_WS_max_size); i++ )
f01081b5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01081bc:	e9 6a 01 00 00       	jmp    f010832b <env_page_ws_print+0x2a0>
		{
			if (e->ptr_pageWorkingSet[i].empty)
f01081c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01081c4:	8b 48 78             	mov    0x78(%eax),%ecx
f01081c7:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01081ca:	89 d0                	mov    %edx,%eax
f01081cc:	01 c0                	add    %eax,%eax
f01081ce:	01 d0                	add    %edx,%eax
f01081d0:	c1 e0 03             	shl    $0x3,%eax
f01081d3:	01 c8                	add    %ecx,%eax
f01081d5:	8a 40 04             	mov    0x4(%eax),%al
f01081d8:	84 c0                	test   %al,%al
f01081da:	74 43                	je     f010821f <env_page_ws_print+0x194>
			{
				cprintf("EMPTY LOCATION");
f01081dc:	83 ec 0c             	sub    $0xc,%esp
f01081df:	68 cb 60 13 f0       	push   $0xf01360cb
f01081e4:	e8 25 8b ff ff       	call   f0100d0e <cprintf>
f01081e9:	83 c4 10             	add    $0x10,%esp
				if(i==e->page_last_WS_index )
f01081ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01081ef:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f01081f5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01081f8:	75 10                	jne    f010820a <env_page_ws_print+0x17f>
				{
					cprintf("		<--");
f01081fa:	83 ec 0c             	sub    $0xc,%esp
f01081fd:	68 da 60 13 f0       	push   $0xf01360da
f0108202:	e8 07 8b ff ff       	call   f0100d0e <cprintf>
f0108207:	83 c4 10             	add    $0x10,%esp
				}
				cprintf("\n");
f010820a:	83 ec 0c             	sub    $0xc,%esp
f010820d:	68 e0 60 13 f0       	push   $0xf01360e0
f0108212:	e8 f7 8a ff ff       	call   f0100d0e <cprintf>
f0108217:	83 c4 10             	add    $0x10,%esp
				continue;
f010821a:	e9 09 01 00 00       	jmp    f0108328 <env_page_ws_print+0x29d>
			}
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f010821f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108222:	8b 48 78             	mov    0x78(%eax),%ecx
f0108225:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108228:	89 d0                	mov    %edx,%eax
f010822a:	01 c0                	add    %eax,%eax
f010822c:	01 d0                	add    %edx,%eax
f010822e:	c1 e0 03             	shl    $0x3,%eax
f0108231:	01 c8                	add    %ecx,%eax
f0108233:	8b 00                	mov    (%eax),%eax
f0108235:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 time_stamp = e->ptr_pageWorkingSet[i].time_stamp;
f0108238:	8b 45 08             	mov    0x8(%ebp),%eax
f010823b:	8b 48 78             	mov    0x78(%eax),%ecx
f010823e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108241:	89 d0                	mov    %edx,%eax
f0108243:	01 c0                	add    %eax,%eax
f0108245:	01 d0                	add    %edx,%eax
f0108247:	c1 e0 03             	shl    $0x3,%eax
f010824a:	01 c8                	add    %ecx,%eax
f010824c:	8b 40 08             	mov    0x8(%eax),%eax
f010824f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			uint32 perm = pt_get_page_permissions(e->env_page_directory, virtual_address) ;
f0108252:	8b 45 08             	mov    0x8(%ebp),%eax
f0108255:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108258:	83 ec 08             	sub    $0x8,%esp
f010825b:	ff 75 e8             	pushl  -0x18(%ebp)
f010825e:	50                   	push   %eax
f010825f:	e8 fd f9 ff ff       	call   f0107c61 <pt_get_page_permissions>
f0108264:	83 c4 10             	add    $0x10,%esp
f0108267:	89 45 e0             	mov    %eax,-0x20(%ebp)
			char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f010826a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010826d:	83 e0 40             	and    $0x40,%eax
f0108270:	85 c0                	test   %eax,%eax
f0108272:	0f 95 c0             	setne  %al
f0108275:	88 45 df             	mov    %al,-0x21(%ebp)
			char isUsed= ((perm&PERM_USED) ? 1 : 0);
f0108278:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010827b:	83 e0 20             	and    $0x20,%eax
f010827e:	85 c0                	test   %eax,%eax
f0108280:	0f 95 c0             	setne  %al
f0108283:	88 45 de             	mov    %al,-0x22(%ebp)
			char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f0108286:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108289:	25 00 02 00 00       	and    $0x200,%eax
f010828e:	85 c0                	test   %eax,%eax
f0108290:	0f 95 c0             	setne  %al
f0108293:	88 45 dd             	mov    %al,-0x23(%ebp)


			cprintf("address @ %d = %x",i, e->ptr_pageWorkingSet[i].virtual_address);
f0108296:	8b 45 08             	mov    0x8(%ebp),%eax
f0108299:	8b 48 78             	mov    0x78(%eax),%ecx
f010829c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010829f:	89 d0                	mov    %edx,%eax
f01082a1:	01 c0                	add    %eax,%eax
f01082a3:	01 d0                	add    %edx,%eax
f01082a5:	c1 e0 03             	shl    $0x3,%eax
f01082a8:	01 c8                	add    %ecx,%eax
f01082aa:	8b 00                	mov    (%eax),%eax
f01082ac:	83 ec 04             	sub    $0x4,%esp
f01082af:	50                   	push   %eax
f01082b0:	ff 75 ec             	pushl  -0x14(%ebp)
f01082b3:	68 e2 60 13 f0       	push   $0xf01360e2
f01082b8:	e8 51 8a ff ff       	call   f0100d0e <cprintf>
f01082bd:	83 c4 10             	add    $0x10,%esp

			//2021
			cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x, sweeps_cnt= %d", isUsed, isModified, isBuffered, time_stamp, e->ptr_pageWorkingSet[i].sweeps_counter) ;
f01082c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01082c3:	8b 48 78             	mov    0x78(%eax),%ecx
f01082c6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01082c9:	89 d0                	mov    %edx,%eax
f01082cb:	01 c0                	add    %eax,%eax
f01082cd:	01 d0                	add    %edx,%eax
f01082cf:	c1 e0 03             	shl    $0x3,%eax
f01082d2:	01 c8                	add    %ecx,%eax
f01082d4:	8b 58 0c             	mov    0xc(%eax),%ebx
f01082d7:	0f be 4d dd          	movsbl -0x23(%ebp),%ecx
f01082db:	0f be 55 df          	movsbl -0x21(%ebp),%edx
f01082df:	0f be 45 de          	movsbl -0x22(%ebp),%eax
f01082e3:	83 ec 08             	sub    $0x8,%esp
f01082e6:	53                   	push   %ebx
f01082e7:	ff 75 e4             	pushl  -0x1c(%ebp)
f01082ea:	51                   	push   %ecx
f01082eb:	52                   	push   %edx
f01082ec:	50                   	push   %eax
f01082ed:	68 f4 60 13 f0       	push   $0xf01360f4
f01082f2:	e8 17 8a ff ff       	call   f0100d0e <cprintf>
f01082f7:	83 c4 20             	add    $0x20,%esp

			if(i==e->page_last_WS_index )
f01082fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01082fd:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f0108303:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108306:	75 10                	jne    f0108318 <env_page_ws_print+0x28d>
			{
				cprintf(" <--");
f0108308:	83 ec 0c             	sub    $0xc,%esp
f010830b:	68 3b 61 13 f0       	push   $0xf013613b
f0108310:	e8 f9 89 ff ff       	call   f0100d0e <cprintf>
f0108315:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0108318:	83 ec 0c             	sub    $0xc,%esp
f010831b:	68 e0 60 13 f0       	push   $0xf01360e0
f0108320:	e8 e9 89 ff ff       	call   f0100d0e <cprintf>
f0108325:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
		for(i=0; i< (e->page_WS_max_size); i++ )
f0108328:	ff 45 ec             	incl   -0x14(%ebp)
f010832b:	8b 45 08             	mov    0x8(%ebp),%eax
f010832e:	8b 40 74             	mov    0x74(%eax),%eax
f0108331:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108334:	0f 87 87 fe ff ff    	ja     f01081c1 <env_page_ws_print+0x136>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f010833a:	90                   	nop
f010833b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010833e:	c9                   	leave  
f010833f:	c3                   	ret    

f0108340 <env_table_ws_print>:

// Table Working Set =========================================================

void env_table_ws_print(struct Env *e)
{
f0108340:	55                   	push   %ebp
f0108341:	89 e5                	mov    %esp,%ebp
f0108343:	53                   	push   %ebx
f0108344:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f0108347:	83 ec 0c             	sub    $0xc,%esp
f010834a:	68 40 61 13 f0       	push   $0xf0136140
f010834f:	e8 ba 89 ff ff       	call   f0100d0e <cprintf>
f0108354:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f0108357:	83 ec 0c             	sub    $0xc,%esp
f010835a:	68 75 61 13 f0       	push   $0xf0136175
f010835f:	e8 aa 89 ff ff       	call   f0100d0e <cprintf>
f0108364:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0108367:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010836e:	e9 10 01 00 00       	jmp    f0108483 <env_table_ws_print+0x143>
	{
		if (e->__ptr_tws[i].empty)
f0108373:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108376:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108379:	89 d0                	mov    %edx,%eax
f010837b:	01 c0                	add    %eax,%eax
f010837d:	01 d0                	add    %edx,%eax
f010837f:	c1 e0 03             	shl    $0x3,%eax
f0108382:	01 c8                	add    %ecx,%eax
f0108384:	83 e8 80             	sub    $0xffffff80,%eax
f0108387:	8a 00                	mov    (%eax),%al
f0108389:	84 c0                	test   %al,%al
f010838b:	74 43                	je     f01083d0 <env_table_ws_print+0x90>
		{
			cprintf("EMPTY LOCATION");
f010838d:	83 ec 0c             	sub    $0xc,%esp
f0108390:	68 cb 60 13 f0       	push   $0xf01360cb
f0108395:	e8 74 89 ff ff       	call   f0100d0e <cprintf>
f010839a:	83 c4 10             	add    $0x10,%esp
			if(i==e->table_last_WS_index )
f010839d:	8b 45 08             	mov    0x8(%ebp),%eax
f01083a0:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f01083a6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01083a9:	75 10                	jne    f01083bb <env_table_ws_print+0x7b>
			{
				cprintf("		<--");
f01083ab:	83 ec 0c             	sub    $0xc,%esp
f01083ae:	68 da 60 13 f0       	push   $0xf01360da
f01083b3:	e8 56 89 ff ff       	call   f0100d0e <cprintf>
f01083b8:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f01083bb:	83 ec 0c             	sub    $0xc,%esp
f01083be:	68 e0 60 13 f0       	push   $0xf01360e0
f01083c3:	e8 46 89 ff ff       	call   f0100d0e <cprintf>
f01083c8:	83 c4 10             	add    $0x10,%esp
			continue;
f01083cb:	e9 b0 00 00 00       	jmp    f0108480 <env_table_ws_print+0x140>
		}
		uint32 virtual_address = e->__ptr_tws[i].virtual_address;
f01083d0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01083d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01083d6:	89 d0                	mov    %edx,%eax
f01083d8:	01 c0                	add    %eax,%eax
f01083da:	01 d0                	add    %edx,%eax
f01083dc:	c1 e0 03             	shl    $0x3,%eax
f01083df:	01 c8                	add    %ecx,%eax
f01083e1:	83 c0 7c             	add    $0x7c,%eax
f01083e4:	8b 00                	mov    (%eax),%eax
f01083e6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, e->__ptr_tws[i].virtual_address);
f01083e9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01083ec:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01083ef:	89 d0                	mov    %edx,%eax
f01083f1:	01 c0                	add    %eax,%eax
f01083f3:	01 d0                	add    %edx,%eax
f01083f5:	c1 e0 03             	shl    $0x3,%eax
f01083f8:	01 c8                	add    %ecx,%eax
f01083fa:	83 c0 7c             	add    $0x7c,%eax
f01083fd:	8b 00                	mov    (%eax),%eax
f01083ff:	83 ec 04             	sub    $0x4,%esp
f0108402:	50                   	push   %eax
f0108403:	ff 75 f4             	pushl  -0xc(%ebp)
f0108406:	68 80 61 13 f0       	push   $0xf0136180
f010840b:	e8 fe 88 ff ff       	call   f0100d0e <cprintf>
f0108410:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(e->env_page_directory, virtual_address), e->__ptr_tws[i].time_stamp);
f0108413:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108416:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108419:	89 d0                	mov    %edx,%eax
f010841b:	01 c0                	add    %eax,%eax
f010841d:	01 d0                	add    %edx,%eax
f010841f:	c1 e0 03             	shl    $0x3,%eax
f0108422:	01 c8                	add    %ecx,%eax
f0108424:	05 84 00 00 00       	add    $0x84,%eax
f0108429:	8b 18                	mov    (%eax),%ebx
f010842b:	8b 45 08             	mov    0x8(%ebp),%eax
f010842e:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108431:	83 ec 08             	sub    $0x8,%esp
f0108434:	ff 75 f0             	pushl  -0x10(%ebp)
f0108437:	50                   	push   %eax
f0108438:	e8 43 f9 ff ff       	call   f0107d80 <pd_is_table_used>
f010843d:	83 c4 10             	add    $0x10,%esp
f0108440:	83 ec 04             	sub    $0x4,%esp
f0108443:	53                   	push   %ebx
f0108444:	50                   	push   %eax
f0108445:	68 98 61 13 f0       	push   $0xf0136198
f010844a:	e8 bf 88 ff ff       	call   f0100d0e <cprintf>
f010844f:	83 c4 10             	add    $0x10,%esp
		if(i==e->table_last_WS_index )
f0108452:	8b 45 08             	mov    0x8(%ebp),%eax
f0108455:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010845b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010845e:	75 10                	jne    f0108470 <env_table_ws_print+0x130>
		{
			cprintf(" <--");
f0108460:	83 ec 0c             	sub    $0xc,%esp
f0108463:	68 3b 61 13 f0       	push   $0xf013613b
f0108468:	e8 a1 88 ff ff       	call   f0100d0e <cprintf>
f010846d:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f0108470:	83 ec 0c             	sub    $0xc,%esp
f0108473:	68 e0 60 13 f0       	push   $0xf01360e0
f0108478:	e8 91 88 ff ff       	call   f0100d0e <cprintf>
f010847d:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *e)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0108480:	ff 45 f4             	incl   -0xc(%ebp)
f0108483:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0108487:	0f 86 e6 fe ff ff    	jbe    f0108373 <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f010848d:	90                   	nop
f010848e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108491:	c9                   	leave  
f0108492:	c3                   	ret    

f0108493 <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f0108493:	55                   	push   %ebp
f0108494:	89 e5                	mov    %esp,%ebp
f0108496:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0108499:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01084a0:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f01084a7:	eb 20                	jmp    f01084c9 <env_table_ws_get_size+0x36>
f01084a9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01084ac:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01084af:	89 d0                	mov    %edx,%eax
f01084b1:	01 c0                	add    %eax,%eax
f01084b3:	01 d0                	add    %edx,%eax
f01084b5:	c1 e0 03             	shl    $0x3,%eax
f01084b8:	01 c8                	add    %ecx,%eax
f01084ba:	83 e8 80             	sub    $0xffffff80,%eax
f01084bd:	8a 00                	mov    (%eax),%al
f01084bf:	84 c0                	test   %al,%al
f01084c1:	75 03                	jne    f01084c6 <env_table_ws_get_size+0x33>
f01084c3:	ff 45 f8             	incl   -0x8(%ebp)
f01084c6:	ff 45 fc             	incl   -0x4(%ebp)
f01084c9:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f01084cd:	7e da                	jle    f01084a9 <env_table_ws_get_size+0x16>
	return counter;
f01084cf:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01084d2:	c9                   	leave  
f01084d3:	c3                   	ret    

f01084d4 <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f01084d4:	55                   	push   %ebp
f01084d5:	89 e5                	mov    %esp,%ebp
f01084d7:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f01084da:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f01084e1:	eb 4c                	jmp    f010852f <env_table_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f01084e3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01084e6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01084e9:	89 d0                	mov    %edx,%eax
f01084eb:	01 c0                	add    %eax,%eax
f01084ed:	01 d0                	add    %edx,%eax
f01084ef:	c1 e0 03             	shl    $0x3,%eax
f01084f2:	01 c8                	add    %ecx,%eax
f01084f4:	83 c0 7c             	add    $0x7c,%eax
f01084f7:	8b 00                	mov    (%eax),%eax
f01084f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01084fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01084ff:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108504:	89 c2                	mov    %eax,%edx
f0108506:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108509:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010850c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010850f:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108514:	39 c2                	cmp    %eax,%edx
f0108516:	75 14                	jne    f010852c <env_table_ws_invalidate+0x58>
		{
			env_table_ws_clear_entry(e, i);
f0108518:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010851b:	83 ec 08             	sub    $0x8,%esp
f010851e:	50                   	push   %eax
f010851f:	ff 75 08             	pushl  0x8(%ebp)
f0108522:	e8 b8 00 00 00       	call   f01085df <env_table_ws_clear_entry>
f0108527:	83 c4 10             	add    $0x10,%esp
			break;
f010852a:	eb 09                	jmp    f0108535 <env_table_ws_invalidate+0x61>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f010852c:	ff 45 f4             	incl   -0xc(%ebp)
f010852f:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0108533:	7e ae                	jle    f01084e3 <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f0108535:	90                   	nop
f0108536:	c9                   	leave  
f0108537:	c3                   	ret    

f0108538 <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0108538:	55                   	push   %ebp
f0108539:	89 e5                	mov    %esp,%ebp
f010853b:	53                   	push   %ebx
f010853c:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f010853f:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108543:	76 19                	jbe    f010855e <env_table_ws_set_entry+0x26>
f0108545:	68 bc 61 13 f0       	push   $0xf01361bc
f010854a:	68 e2 5f 13 f0       	push   $0xf0135fe2
f010854f:	68 b6 00 00 00       	push   $0xb6
f0108554:	68 f8 5f 13 f0       	push   $0xf0135ff8
f0108559:	e8 a7 7c ff ff       	call   f0100205 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f010855e:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0108565:	76 19                	jbe    f0108580 <env_table_ws_set_entry+0x48>
f0108567:	68 18 60 13 f0       	push   $0xf0136018
f010856c:	68 e2 5f 13 f0       	push   $0xf0135fe2
f0108571:	68 b7 00 00 00       	push   $0xb7
f0108576:	68 f8 5f 13 f0       	push   $0xf0135ff8
f010857b:	e8 85 7c ff ff       	call   f0100205 <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f0108580:	8b 45 10             	mov    0x10(%ebp),%eax
f0108583:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108586:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108589:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010858e:	89 c1                	mov    %eax,%ecx
f0108590:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0108593:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108596:	89 d0                	mov    %edx,%eax
f0108598:	01 c0                	add    %eax,%eax
f010859a:	01 d0                	add    %edx,%eax
f010859c:	c1 e0 03             	shl    $0x3,%eax
f010859f:	01 d8                	add    %ebx,%eax
f01085a1:	83 c0 7c             	add    $0x7c,%eax
f01085a4:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f01085a6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01085a9:	8b 55 0c             	mov    0xc(%ebp),%edx
f01085ac:	89 d0                	mov    %edx,%eax
f01085ae:	01 c0                	add    %eax,%eax
f01085b0:	01 d0                	add    %edx,%eax
f01085b2:	c1 e0 03             	shl    $0x3,%eax
f01085b5:	01 c8                	add    %ecx,%eax
f01085b7:	83 e8 80             	sub    $0xffffff80,%eax
f01085ba:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f01085bd:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01085c0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01085c3:	89 d0                	mov    %edx,%eax
f01085c5:	01 c0                	add    %eax,%eax
f01085c7:	01 d0                	add    %edx,%eax
f01085c9:	c1 e0 03             	shl    $0x3,%eax
f01085cc:	01 c8                	add    %ecx,%eax
f01085ce:	05 84 00 00 00       	add    $0x84,%eax
f01085d3:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f01085d9:	90                   	nop
}
f01085da:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01085dd:	c9                   	leave  
f01085de:	c3                   	ret    

f01085df <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f01085df:	55                   	push   %ebp
f01085e0:	89 e5                	mov    %esp,%ebp
f01085e2:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01085e5:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01085e9:	76 19                	jbe    f0108604 <env_table_ws_clear_entry+0x25>
f01085eb:	68 bc 61 13 f0       	push   $0xf01361bc
f01085f0:	68 e2 5f 13 f0       	push   $0xf0135fe2
f01085f5:	68 c2 00 00 00       	push   $0xc2
f01085fa:	68 f8 5f 13 f0       	push   $0xf0135ff8
f01085ff:	e8 01 7c ff ff       	call   f0100205 <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f0108604:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108607:	8b 55 0c             	mov    0xc(%ebp),%edx
f010860a:	89 d0                	mov    %edx,%eax
f010860c:	01 c0                	add    %eax,%eax
f010860e:	01 d0                	add    %edx,%eax
f0108610:	c1 e0 03             	shl    $0x3,%eax
f0108613:	01 c8                	add    %ecx,%eax
f0108615:	83 c0 7c             	add    $0x7c,%eax
f0108618:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f010861e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108621:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108624:	89 d0                	mov    %edx,%eax
f0108626:	01 c0                	add    %eax,%eax
f0108628:	01 d0                	add    %edx,%eax
f010862a:	c1 e0 03             	shl    $0x3,%eax
f010862d:	01 c8                	add    %ecx,%eax
f010862f:	83 e8 80             	sub    $0xffffff80,%eax
f0108632:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f0108635:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108638:	8b 55 0c             	mov    0xc(%ebp),%edx
f010863b:	89 d0                	mov    %edx,%eax
f010863d:	01 c0                	add    %eax,%eax
f010863f:	01 d0                	add    %edx,%eax
f0108641:	c1 e0 03             	shl    $0x3,%eax
f0108644:	01 c8                	add    %ecx,%eax
f0108646:	05 84 00 00 00       	add    $0x84,%eax
f010864b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f0108651:	90                   	nop
f0108652:	c9                   	leave  
f0108653:	c3                   	ret    

f0108654 <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0108654:	55                   	push   %ebp
f0108655:	89 e5                	mov    %esp,%ebp
f0108657:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f010865a:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f010865e:	76 19                	jbe    f0108679 <env_table_ws_get_virtual_address+0x25>
f0108660:	68 bc 61 13 f0       	push   $0xf01361bc
f0108665:	68 e2 5f 13 f0       	push   $0xf0135fe2
f010866a:	68 ca 00 00 00       	push   $0xca
f010866f:	68 f8 5f 13 f0       	push   $0xf0135ff8
f0108674:	e8 8c 7b ff ff       	call   f0100205 <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f0108679:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010867c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010867f:	89 d0                	mov    %edx,%eax
f0108681:	01 c0                	add    %eax,%eax
f0108683:	01 d0                	add    %edx,%eax
f0108685:	c1 e0 03             	shl    $0x3,%eax
f0108688:	01 c8                	add    %ecx,%eax
f010868a:	83 c0 7c             	add    $0x7c,%eax
f010868d:	8b 00                	mov    (%eax),%eax
f010868f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108692:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108695:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f010869a:	c9                   	leave  
f010869b:	c3                   	ret    

f010869c <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f010869c:	55                   	push   %ebp
f010869d:	89 e5                	mov    %esp,%ebp
f010869f:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01086a2:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01086a6:	76 19                	jbe    f01086c1 <env_table_ws_get_time_stamp+0x25>
f01086a8:	68 bc 61 13 f0       	push   $0xf01361bc
f01086ad:	68 e2 5f 13 f0       	push   $0xf0135fe2
f01086b2:	68 d1 00 00 00       	push   $0xd1
f01086b7:	68 f8 5f 13 f0       	push   $0xf0135ff8
f01086bc:	e8 44 7b ff ff       	call   f0100205 <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f01086c1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01086c4:	8b 55 0c             	mov    0xc(%ebp),%edx
f01086c7:	89 d0                	mov    %edx,%eax
f01086c9:	01 c0                	add    %eax,%eax
f01086cb:	01 d0                	add    %edx,%eax
f01086cd:	c1 e0 03             	shl    $0x3,%eax
f01086d0:	01 c8                	add    %ecx,%eax
f01086d2:	05 84 00 00 00       	add    $0x84,%eax
f01086d7:	8b 00                	mov    (%eax),%eax
}
f01086d9:	c9                   	leave  
f01086da:	c3                   	ret    

f01086db <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f01086db:	55                   	push   %ebp
f01086dc:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f01086de:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01086e1:	8b 55 0c             	mov    0xc(%ebp),%edx
f01086e4:	89 d0                	mov    %edx,%eax
f01086e6:	01 c0                	add    %eax,%eax
f01086e8:	01 d0                	add    %edx,%eax
f01086ea:	c1 e0 03             	shl    $0x3,%eax
f01086ed:	01 c8                	add    %ecx,%eax
f01086ef:	83 e8 80             	sub    $0xffffff80,%eax
f01086f2:	8a 00                	mov    (%eax),%al
f01086f4:	0f b6 c0             	movzbl %al,%eax
}
f01086f7:	5d                   	pop    %ebp
f01086f8:	c3                   	ret    

f01086f9 <cut_paste_WS>:
///=================================================================================================

// Change WS Sizes For PRIORITY  =========================================================

void cut_paste_WS(struct WorkingSetElement* newWS, int newSize, struct Env* e)
{
f01086f9:	55                   	push   %ebp
f01086fa:	89 e5                	mov    %esp,%ebp
f01086fc:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] cut_paste_WS
	//your code is here, remove the panic and write your code
	panic("cut_paste_WS() is not implemented yet...!!");
f01086ff:	83 ec 04             	sub    $0x4,%esp
f0108702:	68 f0 61 13 f0       	push   $0xf01361f0
f0108707:	68 e5 00 00 00       	push   $0xe5
f010870c:	68 f8 5f 13 f0       	push   $0xf0135ff8
f0108711:	e8 ef 7a ff ff       	call   f0100205 <_panic>

f0108716 <double_WS_Size>:
}

void double_WS_Size(struct Env* e, int isOneTimeOnly)
{
f0108716:	55                   	push   %ebp
f0108717:	89 e5                	mov    %esp,%ebp
f0108719:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] double_WS_Size
	//your code is here, remove the panic and write your code
	panic("double_WS_Size() is not implemented yet...!!");
f010871c:	83 ec 04             	sub    $0x4,%esp
f010871f:	68 1c 62 13 f0       	push   $0xf013621c
f0108724:	68 ec 00 00 00       	push   $0xec
f0108729:	68 f8 5f 13 f0       	push   $0xf0135ff8
f010872e:	e8 d2 7a ff ff       	call   f0100205 <_panic>

f0108733 <half_WS_Size>:
}

void half_WS_Size(struct Env* e, int isImmidiate)
{
f0108733:	55                   	push   %ebp
f0108734:	89 e5                	mov    %esp,%ebp
f0108736:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] half_WS_Size
	//your code is here, remove the panic and write your code
	panic("half_WS_Size() is not implemented yet...!!");
f0108739:	83 ec 04             	sub    $0x4,%esp
f010873c:	68 4c 62 13 f0       	push   $0xf013624c
f0108741:	68 f3 00 00 00       	push   $0xf3
f0108746:	68 f8 5f 13 f0       	push   $0xf0135ff8
f010874b:	e8 b5 7a ff ff       	call   f0100205 <_panic>

f0108750 <cut_paste_pages>:
//===============================
//This function should cut-paste the given number of pages from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int cut_paste_pages(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 num_of_pages)
{
f0108750:	55                   	push   %ebp
f0108751:	89 e5                	mov    %esp,%ebp
f0108753:	83 ec 48             	sub    $0x48,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] cut_paste_pages
	// Write your code here, remove the panic and write your code
	uint32 new_dest_va = dest_va;
f0108756:	8b 45 10             	mov    0x10(%ebp),%eax
f0108759:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 new_source_va = source_va;
f010875c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010875f:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(dest_va%PAGE_SIZE!=0)
f0108762:	8b 45 10             	mov    0x10(%ebp),%eax
f0108765:	25 ff 0f 00 00       	and    $0xfff,%eax
f010876a:	85 c0                	test   %eax,%eax
f010876c:	74 11                	je     f010877f <cut_paste_pages+0x2f>
		new_dest_va = ROUNDDOWN(dest_va,PAGE_SIZE);
f010876e:	8b 45 10             	mov    0x10(%ebp),%eax
f0108771:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108774:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108777:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010877c:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(source_va%PAGE_SIZE!=0)
f010877f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108782:	25 ff 0f 00 00       	and    $0xfff,%eax
f0108787:	85 c0                	test   %eax,%eax
f0108789:	74 11                	je     f010879c <cut_paste_pages+0x4c>
		new_source_va = ROUNDDOWN(source_va,PAGE_SIZE);
f010878b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010878e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0108791:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108794:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108799:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 max_size = (PAGE_SIZE * num_of_pages) + new_dest_va;
f010879c:	8b 45 14             	mov    0x14(%ebp),%eax
f010879f:	c1 e0 0c             	shl    $0xc,%eax
f01087a2:	89 c2                	mov    %eax,%edx
f01087a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01087a7:	01 d0                	add    %edx,%eax
f01087a9:	89 45 dc             	mov    %eax,-0x24(%ebp)

	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f01087ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01087af:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01087b2:	eb 4b                	jmp    f01087ff <cut_paste_pages+0xaf>
	{
		uint32 *ptr_page_table_dest = NULL;
f01087b4:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
		get_page_table(page_directory,i,&ptr_page_table_dest);
f01087bb:	83 ec 04             	sub    $0x4,%esp
f01087be:	8d 45 cc             	lea    -0x34(%ebp),%eax
f01087c1:	50                   	push   %eax
f01087c2:	ff 75 ec             	pushl  -0x14(%ebp)
f01087c5:	ff 75 08             	pushl  0x8(%ebp)
f01087c8:	e8 e4 e2 ff ff       	call   f0106ab1 <get_page_table>
f01087cd:	83 c4 10             	add    $0x10,%esp
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);
f01087d0:	83 ec 04             	sub    $0x4,%esp
f01087d3:	8d 45 cc             	lea    -0x34(%ebp),%eax
f01087d6:	50                   	push   %eax
f01087d7:	ff 75 ec             	pushl  -0x14(%ebp)
f01087da:	ff 75 08             	pushl  0x8(%ebp)
f01087dd:	e8 24 e6 ff ff       	call   f0106e06 <get_frame_info>
f01087e2:	83 c4 10             	add    $0x10,%esp
f01087e5:	89 45 d8             	mov    %eax,-0x28(%ebp)

		if(dest_frame!=NULL)
f01087e8:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f01087ec:	74 0a                	je     f01087f8 <cut_paste_pages+0xa8>
			return -1;
f01087ee:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01087f3:	e9 d4 00 00 00       	jmp    f01088cc <cut_paste_pages+0x17c>

	if(source_va%PAGE_SIZE!=0)
		new_source_va = ROUNDDOWN(source_va,PAGE_SIZE);
	uint32 max_size = (PAGE_SIZE * num_of_pages) + new_dest_va;

	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f01087f8:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f01087ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108802:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0108805:	72 ad                	jb     f01087b4 <cut_paste_pages+0x64>
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);

		if(dest_frame!=NULL)
			return -1;
	}
	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f0108807:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010880a:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010880d:	e9 a9 00 00 00       	jmp    f01088bb <cut_paste_pages+0x16b>
	{
		uint32 *ptr_page_table_dest = NULL;
f0108812:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
		get_page_table(page_directory,i,&ptr_page_table_dest);
f0108819:	83 ec 04             	sub    $0x4,%esp
f010881c:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010881f:	50                   	push   %eax
f0108820:	ff 75 e8             	pushl  -0x18(%ebp)
f0108823:	ff 75 08             	pushl  0x8(%ebp)
f0108826:	e8 86 e2 ff ff       	call   f0106ab1 <get_page_table>
f010882b:	83 c4 10             	add    $0x10,%esp

		if(ptr_page_table_dest == NULL)
f010882e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0108831:	85 c0                	test   %eax,%eax
f0108833:	75 14                	jne    f0108849 <cut_paste_pages+0xf9>
			ptr_page_table_dest = create_page_table(page_directory,i);
f0108835:	83 ec 08             	sub    $0x8,%esp
f0108838:	ff 75 e8             	pushl  -0x18(%ebp)
f010883b:	ff 75 08             	pushl  0x8(%ebp)
f010883e:	e8 c4 e3 ff ff       	call   f0106c07 <create_page_table>
f0108843:	83 c4 10             	add    $0x10,%esp
f0108846:	89 45 c8             	mov    %eax,-0x38(%ebp)

		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);
f0108849:	83 ec 04             	sub    $0x4,%esp
f010884c:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010884f:	50                   	push   %eax
f0108850:	ff 75 e8             	pushl  -0x18(%ebp)
f0108853:	ff 75 08             	pushl  0x8(%ebp)
f0108856:	e8 ab e5 ff ff       	call   f0106e06 <get_frame_info>
f010885b:	83 c4 10             	add    $0x10,%esp
f010885e:	89 45 c4             	mov    %eax,-0x3c(%ebp)

		int source_perm = pt_get_page_permissions(page_directory,new_source_va);
f0108861:	83 ec 08             	sub    $0x8,%esp
f0108864:	ff 75 f0             	pushl  -0x10(%ebp)
f0108867:	ff 75 08             	pushl  0x8(%ebp)
f010886a:	e8 f2 f3 ff ff       	call   f0107c61 <pt_get_page_permissions>
f010886f:	83 c4 10             	add    $0x10,%esp
f0108872:	89 45 d4             	mov    %eax,-0x2c(%ebp)

		unmap_frame(page_directory,new_source_va);
f0108875:	83 ec 08             	sub    $0x8,%esp
f0108878:	ff 75 f0             	pushl  -0x10(%ebp)
f010887b:	ff 75 08             	pushl  0x8(%ebp)
f010887e:	e8 f3 e5 ff ff       	call   f0106e76 <unmap_frame>
f0108883:	83 c4 10             	add    $0x10,%esp
		uint32 ret = allocate_frame(&dest_frame);
f0108886:	83 ec 0c             	sub    $0xc,%esp
f0108889:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010888c:	50                   	push   %eax
f010888d:	e8 60 e0 ff ff       	call   f01068f2 <allocate_frame>
f0108892:	83 c4 10             	add    $0x10,%esp
f0108895:	89 45 d0             	mov    %eax,-0x30(%ebp)
		map_frame(page_directory, dest_frame, i,source_perm);
f0108898:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010889b:	ff 75 d4             	pushl  -0x2c(%ebp)
f010889e:	ff 75 e8             	pushl  -0x18(%ebp)
f01088a1:	50                   	push   %eax
f01088a2:	ff 75 08             	pushl  0x8(%ebp)
f01088a5:	e8 97 e4 ff ff       	call   f0106d41 <map_frame>
f01088aa:	83 c4 10             	add    $0x10,%esp

		new_source_va += PAGE_SIZE;
f01088ad:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);

		if(dest_frame!=NULL)
			return -1;
	}
	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f01088b4:	81 45 e8 00 10 00 00 	addl   $0x1000,-0x18(%ebp)
f01088bb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01088be:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01088c1:	0f 82 4b ff ff ff    	jb     f0108812 <cut_paste_pages+0xc2>
		uint32 ret = allocate_frame(&dest_frame);
		map_frame(page_directory, dest_frame, i,source_perm);

		new_source_va += PAGE_SIZE;
	}
	return 0;
f01088c7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01088cc:	c9                   	leave  
f01088cd:	c3                   	ret    

f01088ce <copy_paste_chunk>:
//===============================
//This function should copy-paste the given size from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int copy_paste_chunk(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 size)
{
f01088ce:	55                   	push   %ebp
f01088cf:	89 e5                	mov    %esp,%ebp
f01088d1:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] copy_paste_chunk
	// Write your code here, remove the panic and write your code
	//panic("copy_paste_chunk() is not implemented yet...!!");
	uint32 *page_table=NULL;
f01088d4:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	uint32 new_dest_va = dest_va;
f01088db:	8b 45 10             	mov    0x10(%ebp),%eax
f01088de:	89 45 e0             	mov    %eax,-0x20(%ebp)
	uint32 new_source_va = source_va;
f01088e1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01088e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for(uint32 i=dest_va;i<dest_va+size ;i+=PAGE_SIZE)
f01088e7:	8b 45 10             	mov    0x10(%ebp),%eax
f01088ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01088ed:	e9 d1 00 00 00       	jmp    f01089c3 <copy_paste_chunk+0xf5>
	{
	   get_page_table(page_directory,i,&page_table);
f01088f2:	83 ec 04             	sub    $0x4,%esp
f01088f5:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01088f8:	50                   	push   %eax
f01088f9:	ff 75 f0             	pushl  -0x10(%ebp)
f01088fc:	ff 75 08             	pushl  0x8(%ebp)
f01088ff:	e8 ad e1 ff ff       	call   f0106ab1 <get_page_table>
f0108904:	83 c4 10             	add    $0x10,%esp
	   if(page_table==NULL)
f0108907:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010890a:	85 c0                	test   %eax,%eax
f010890c:	75 14                	jne    f0108922 <copy_paste_chunk+0x54>
		   page_table=create_page_table(page_directory,i);
f010890e:	83 ec 08             	sub    $0x8,%esp
f0108911:	ff 75 f0             	pushl  -0x10(%ebp)
f0108914:	ff 75 08             	pushl  0x8(%ebp)
f0108917:	e8 eb e2 ff ff       	call   f0106c07 <create_page_table>
f010891c:	83 c4 10             	add    $0x10,%esp
f010891f:	89 45 d0             	mov    %eax,-0x30(%ebp)

	   struct FrameInfo *frame_info=get_frame_info(page_directory,i,&page_table);
f0108922:	83 ec 04             	sub    $0x4,%esp
f0108925:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108928:	50                   	push   %eax
f0108929:	ff 75 f0             	pushl  -0x10(%ebp)
f010892c:	ff 75 08             	pushl  0x8(%ebp)
f010892f:	e8 d2 e4 ff ff       	call   f0106e06 <get_frame_info>
f0108934:	83 c4 10             	add    $0x10,%esp
f0108937:	89 45 cc             	mov    %eax,-0x34(%ebp)
	   uint32 perm =pt_get_page_permissions(page_directory,i);
f010893a:	83 ec 08             	sub    $0x8,%esp
f010893d:	ff 75 f0             	pushl  -0x10(%ebp)
f0108940:	ff 75 08             	pushl  0x8(%ebp)
f0108943:	e8 19 f3 ff ff       	call   f0107c61 <pt_get_page_permissions>
f0108948:	83 c4 10             	add    $0x10,%esp
f010894b:	89 45 dc             	mov    %eax,-0x24(%ebp)

	   if((frame_info != NULL) && (( perm & PERM_WRITEABLE) !=PERM_WRITEABLE))
f010894e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108951:	85 c0                	test   %eax,%eax
f0108953:	74 14                	je     f0108969 <copy_paste_chunk+0x9b>
f0108955:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108958:	83 e0 02             	and    $0x2,%eax
f010895b:	85 c0                	test   %eax,%eax
f010895d:	75 0a                	jne    f0108969 <copy_paste_chunk+0x9b>
			return -1;
f010895f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108964:	e9 a7 00 00 00       	jmp    f0108a10 <copy_paste_chunk+0x142>
	   else
	   {
		   if(frame_info == NULL)
f0108969:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010896c:	85 c0                	test   %eax,%eax
f010896e:	75 45                	jne    f01089b5 <copy_paste_chunk+0xe7>
		   {
			   uint32 perms =pt_get_page_permissions(page_directory,new_source_va);
f0108970:	83 ec 08             	sub    $0x8,%esp
f0108973:	ff 75 f4             	pushl  -0xc(%ebp)
f0108976:	ff 75 08             	pushl  0x8(%ebp)
f0108979:	e8 e3 f2 ff ff       	call   f0107c61 <pt_get_page_permissions>
f010897e:	83 c4 10             	add    $0x10,%esp
f0108981:	89 45 d8             	mov    %eax,-0x28(%ebp)
			   uint32 user_perm = (perms & PERM_USER)|PERM_WRITEABLE;
f0108984:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108987:	83 e0 04             	and    $0x4,%eax
f010898a:	83 c8 02             	or     $0x2,%eax
f010898d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
			   allocate_frame(&frame_info);
f0108990:	83 ec 0c             	sub    $0xc,%esp
f0108993:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108996:	50                   	push   %eax
f0108997:	e8 56 df ff ff       	call   f01068f2 <allocate_frame>
f010899c:	83 c4 10             	add    $0x10,%esp
			   map_frame(page_directory,frame_info,i,user_perm);
f010899f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01089a2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01089a5:	52                   	push   %edx
f01089a6:	ff 75 f0             	pushl  -0x10(%ebp)
f01089a9:	50                   	push   %eax
f01089aa:	ff 75 08             	pushl  0x8(%ebp)
f01089ad:	e8 8f e3 ff ff       	call   f0106d41 <map_frame>
f01089b2:	83 c4 10             	add    $0x10,%esp
		   }
	   }
	   new_source_va += PAGE_SIZE;
f01089b5:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
	// Write your code here, remove the panic and write your code
	//panic("copy_paste_chunk() is not implemented yet...!!");
	uint32 *page_table=NULL;
	uint32 new_dest_va = dest_va;
	uint32 new_source_va = source_va;
	for(uint32 i=dest_va;i<dest_va+size ;i+=PAGE_SIZE)
f01089bc:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f01089c3:	8b 55 10             	mov    0x10(%ebp),%edx
f01089c6:	8b 45 14             	mov    0x14(%ebp),%eax
f01089c9:	01 d0                	add    %edx,%eax
f01089cb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01089ce:	0f 87 1e ff ff ff    	ja     f01088f2 <copy_paste_chunk+0x24>
			   map_frame(page_directory,frame_info,i,user_perm);
		   }
	   }
	   new_source_va += PAGE_SIZE;
	}
	uint32 *frame = (uint32*)dest_va;
f01089d4:	8b 45 10             	mov    0x10(%ebp),%eax
f01089d7:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32 *page = (uint32*)source_va;
f01089da:	8b 45 0c             	mov    0xc(%ebp),%eax
f01089dd:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for (uint32 i = source_va; i < source_va+size ;i+=4)
f01089e0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01089e3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01089e6:	eb 16                	jmp    f01089fe <copy_paste_chunk+0x130>
    {
	    *frame= *page;
f01089e8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01089eb:	8b 10                	mov    (%eax),%edx
f01089ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01089f0:	89 10                	mov    %edx,(%eax)
	    frame++;
f01089f2:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
	    page++;
f01089f6:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
	   }
	   new_source_va += PAGE_SIZE;
	}
	uint32 *frame = (uint32*)dest_va;
    uint32 *page = (uint32*)source_va;
    for (uint32 i = source_va; i < source_va+size ;i+=4)
f01089fa:	83 45 e4 04          	addl   $0x4,-0x1c(%ebp)
f01089fe:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108a01:	8b 45 14             	mov    0x14(%ebp),%eax
f0108a04:	01 d0                	add    %edx,%eax
f0108a06:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0108a09:	77 dd                	ja     f01089e8 <copy_paste_chunk+0x11a>
    {
	    *frame= *page;
	    frame++;
	    page++;
    }
	return 0;
f0108a0b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108a10:	c9                   	leave  
f0108a11:	c3                   	ret    

f0108a12 <share_chunk>:
// 3) SHARE RANGE IN RAM:
//===============================
//This function should share the given size from dest_va with the source_va
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int share_chunk(uint32* page_directory, uint32 source_va,uint32 dest_va, uint32 size, uint32 perms)
{
f0108a12:	55                   	push   %ebp
f0108a13:	89 e5                	mov    %esp,%ebp
f0108a15:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] share_chunk
	// Write your code here, remove the panic and write your code
	uint32 *page_table=NULL;
f0108a18:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
    uint32 va_dest=ROUNDDOWN(dest_va,PAGE_SIZE);
f0108a1f:	8b 45 10             	mov    0x10(%ebp),%eax
f0108a22:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108a25:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108a28:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108a2d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32 max_va_des=ROUNDUP(dest_va+size,PAGE_SIZE);
f0108a30:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f0108a37:	8b 55 10             	mov    0x10(%ebp),%edx
f0108a3a:	8b 45 14             	mov    0x14(%ebp),%eax
f0108a3d:	01 c2                	add    %eax,%edx
f0108a3f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108a42:	01 d0                	add    %edx,%eax
f0108a44:	48                   	dec    %eax
f0108a45:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108a48:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108a4b:	ba 00 00 00 00       	mov    $0x0,%edx
f0108a50:	f7 75 e8             	divl   -0x18(%ebp)
f0108a53:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108a56:	29 d0                	sub    %edx,%eax
f0108a58:	89 45 e0             	mov    %eax,-0x20(%ebp)



   for(uint32 i=va_dest;i<max_va_des ;i+=PAGE_SIZE)
f0108a5b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108a5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108a61:	e9 ac 00 00 00       	jmp    f0108b12 <share_chunk+0x100>
    {
        get_page_table(page_directory,i,&page_table);
f0108a66:	83 ec 04             	sub    $0x4,%esp
f0108a69:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f0108a6c:	50                   	push   %eax
f0108a6d:	ff 75 f4             	pushl  -0xc(%ebp)
f0108a70:	ff 75 08             	pushl  0x8(%ebp)
f0108a73:	e8 39 e0 ff ff       	call   f0106ab1 <get_page_table>
f0108a78:	83 c4 10             	add    $0x10,%esp
        if(page_table==NULL)
f0108a7b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108a7e:	85 c0                	test   %eax,%eax
f0108a80:	75 14                	jne    f0108a96 <share_chunk+0x84>
           page_table=create_page_table(page_directory,i);
f0108a82:	83 ec 08             	sub    $0x8,%esp
f0108a85:	ff 75 f4             	pushl  -0xc(%ebp)
f0108a88:	ff 75 08             	pushl  0x8(%ebp)
f0108a8b:	e8 77 e1 ff ff       	call   f0106c07 <create_page_table>
f0108a90:	83 c4 10             	add    $0x10,%esp
f0108a93:	89 45 d4             	mov    %eax,-0x2c(%ebp)



      struct FrameInfo *frame_info=get_frame_info(page_directory,i,&page_table);
f0108a96:	83 ec 04             	sub    $0x4,%esp
f0108a99:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f0108a9c:	50                   	push   %eax
f0108a9d:	ff 75 f4             	pushl  -0xc(%ebp)
f0108aa0:	ff 75 08             	pushl  0x8(%ebp)
f0108aa3:	e8 5e e3 ff ff       	call   f0106e06 <get_frame_info>
f0108aa8:	83 c4 10             	add    $0x10,%esp
f0108aab:	89 45 dc             	mov    %eax,-0x24(%ebp)
       if (frame_info != NULL)
f0108aae:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0108ab2:	74 07                	je     f0108abb <share_chunk+0xa9>
           return -1;
f0108ab4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108ab9:	eb 68                	jmp    f0108b23 <share_chunk+0x111>



       uint32 *page_table_source = NULL;
f0108abb:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
        get_page_table(page_directory,source_va,&page_table_source);
f0108ac2:	83 ec 04             	sub    $0x4,%esp
f0108ac5:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108ac8:	50                   	push   %eax
f0108ac9:	ff 75 0c             	pushl  0xc(%ebp)
f0108acc:	ff 75 08             	pushl  0x8(%ebp)
f0108acf:	e8 dd df ff ff       	call   f0106ab1 <get_page_table>
f0108ad4:	83 c4 10             	add    $0x10,%esp
        struct FrameInfo *page_info=get_frame_info(page_directory,source_va,&page_table_source);
f0108ad7:	83 ec 04             	sub    $0x4,%esp
f0108ada:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108add:	50                   	push   %eax
f0108ade:	ff 75 0c             	pushl  0xc(%ebp)
f0108ae1:	ff 75 08             	pushl  0x8(%ebp)
f0108ae4:	e8 1d e3 ff ff       	call   f0106e06 <get_frame_info>
f0108ae9:	83 c4 10             	add    $0x10,%esp
f0108aec:	89 45 d8             	mov    %eax,-0x28(%ebp)



       map_frame(page_directory,page_info,i,perms);
f0108aef:	8b 45 18             	mov    0x18(%ebp),%eax
f0108af2:	50                   	push   %eax
f0108af3:	ff 75 f4             	pushl  -0xc(%ebp)
f0108af6:	ff 75 d8             	pushl  -0x28(%ebp)
f0108af9:	ff 75 08             	pushl  0x8(%ebp)
f0108afc:	e8 40 e2 ff ff       	call   f0106d41 <map_frame>
f0108b01:	83 c4 10             	add    $0x10,%esp



       source_va += PAGE_SIZE;
f0108b04:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    uint32 va_dest=ROUNDDOWN(dest_va,PAGE_SIZE);
    uint32 max_va_des=ROUNDUP(dest_va+size,PAGE_SIZE);



   for(uint32 i=va_dest;i<max_va_des ;i+=PAGE_SIZE)
f0108b0b:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0108b12:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108b15:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0108b18:	0f 82 48 ff ff ff    	jb     f0108a66 <share_chunk+0x54>



       source_va += PAGE_SIZE;
    }
    return 0;
f0108b1e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108b23:	c9                   	leave  
f0108b24:	c3                   	ret    

f0108b25 <allocate_chunk>:
// 4) ALLOCATE CHUNK IN RAM:
//===============================
//This function should allocate in RAM the given range [va, va+size)
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int allocate_chunk(uint32* page_directory, uint32 va, uint32 size, uint32 perms)
{
f0108b25:	55                   	push   %ebp
f0108b26:	89 e5                	mov    %esp,%ebp
f0108b28:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] allocate_chunk
	// Write your code here, remove the panic and write your code
	uint32 virtual_address=0;
f0108b2b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 range_page=va+size;
f0108b32:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108b35:	8b 45 10             	mov    0x10(%ebp),%eax
f0108b38:	01 d0                	add    %edx,%eax
f0108b3a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 virtual_range=0;
f0108b3d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	struct FrameInfo *sb_chunck= NULL ;
f0108b44:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	uint32 *page_table_point=NULL;
f0108b4b:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
    uint32 result=0;
f0108b52:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	virtual_address=ROUNDDOWN(va,PAGE_SIZE);
f0108b59:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108b5c:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0108b5f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108b62:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108b67:	89 45 f0             	mov    %eax,-0x10(%ebp)
	virtual_range=ROUNDUP(range_page,PAGE_SIZE);
f0108b6a:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0108b71:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108b74:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108b77:	01 d0                	add    %edx,%eax
f0108b79:	48                   	dec    %eax
f0108b7a:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0108b7d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108b80:	ba 00 00 00 00       	mov    $0x0,%edx
f0108b85:	f7 75 dc             	divl   -0x24(%ebp)
f0108b88:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108b8b:	29 d0                	sub    %edx,%eax
f0108b8d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	uint32 new_virtual_address;
	for(uint32 count=virtual_address;count<virtual_range;count+=PAGE_SIZE)
f0108b90:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108b93:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108b96:	e9 9d 00 00 00       	jmp    f0108c38 <allocate_chunk+0x113>
	{
		new_virtual_address=count;
f0108b9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108b9e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		get_page_table(page_directory,new_virtual_address,&page_table_point);
f0108ba1:	83 ec 04             	sub    $0x4,%esp
f0108ba4:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108ba7:	50                   	push   %eax
f0108ba8:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108bab:	ff 75 08             	pushl  0x8(%ebp)
f0108bae:	e8 fe de ff ff       	call   f0106ab1 <get_page_table>
f0108bb3:	83 c4 10             	add    $0x10,%esp
		if(page_table_point==NULL)
f0108bb6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108bb9:	85 c0                	test   %eax,%eax
f0108bbb:	75 14                	jne    f0108bd1 <allocate_chunk+0xac>
		{
		   page_table_point=create_page_table(page_directory,new_virtual_address);
f0108bbd:	83 ec 08             	sub    $0x8,%esp
f0108bc0:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108bc3:	ff 75 08             	pushl  0x8(%ebp)
f0108bc6:	e8 3c e0 ff ff       	call   f0106c07 <create_page_table>
f0108bcb:	83 c4 10             	add    $0x10,%esp
f0108bce:	89 45 cc             	mov    %eax,-0x34(%ebp)
		}
	    sb_chunck=get_frame_info(page_directory,new_virtual_address,&page_table_point);
f0108bd1:	83 ec 04             	sub    $0x4,%esp
f0108bd4:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108bd7:	50                   	push   %eax
f0108bd8:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108bdb:	ff 75 08             	pushl  0x8(%ebp)
f0108bde:	e8 23 e2 ff ff       	call   f0106e06 <get_frame_info>
f0108be3:	83 c4 10             	add    $0x10,%esp
f0108be6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if(sb_chunck!=NULL)
f0108be9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108bec:	85 c0                	test   %eax,%eax
f0108bee:	74 07                	je     f0108bf7 <allocate_chunk+0xd2>
		{
			return -1;
f0108bf0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108bf5:	eb 52                	jmp    f0108c49 <allocate_chunk+0x124>
		}
	    result= allocate_frame(&sb_chunck);
f0108bf7:	83 ec 0c             	sub    $0xc,%esp
f0108bfa:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108bfd:	50                   	push   %eax
f0108bfe:	e8 ef dc ff ff       	call   f01068f2 <allocate_frame>
f0108c03:	83 c4 10             	add    $0x10,%esp
f0108c06:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if(result != E_NO_MEM)
f0108c09:	83 7d e4 fc          	cmpl   $0xfffffffc,-0x1c(%ebp)
f0108c0d:	74 22                	je     f0108c31 <allocate_chunk+0x10c>
		{
			sb_chunck->va = new_virtual_address;
f0108c0f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108c12:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0108c15:	89 50 0c             	mov    %edx,0xc(%eax)
			result=map_frame(page_directory,sb_chunck,new_virtual_address,perms);
f0108c18:	8b 55 14             	mov    0x14(%ebp),%edx
f0108c1b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108c1e:	52                   	push   %edx
f0108c1f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108c22:	50                   	push   %eax
f0108c23:	ff 75 08             	pushl  0x8(%ebp)
f0108c26:	e8 16 e1 ff ff       	call   f0106d41 <map_frame>
f0108c2b:	83 c4 10             	add    $0x10,%esp
f0108c2e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    uint32 result=0;

	virtual_address=ROUNDDOWN(va,PAGE_SIZE);
	virtual_range=ROUNDUP(range_page,PAGE_SIZE);
	uint32 new_virtual_address;
	for(uint32 count=virtual_address;count<virtual_range;count+=PAGE_SIZE)
f0108c31:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0108c38:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108c3b:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0108c3e:	0f 82 57 ff ff ff    	jb     f0108b9b <allocate_chunk+0x76>
		{
			sb_chunck->va = new_virtual_address;
			result=map_frame(page_directory,sb_chunck,new_virtual_address,perms);
		}
	}
	return 0;
f0108c44:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108c49:	c9                   	leave  
f0108c4a:	c3                   	ret    

f0108c4b <calculate_allocated_space>:
/*BONUS*/
//=====================================
// 5) CALCULATE ALLOCATED SPACE IN RAM:
//=====================================
void calculate_allocated_space(uint32* page_directory, uint32 sva, uint32 eva, uint32 *num_tables, uint32 *num_pages)
{
f0108c4b:	55                   	push   %ebp
f0108c4c:	89 e5                	mov    %esp,%ebp
f0108c4e:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_allocated_space
	// Write your code here, remove the panic and write your code
	//panic("calculate_allocated_space() is not implemented yet...!!");
	uint32 start_address_pt = ROUNDDOWN(sva, PAGE_SIZE*1024);
f0108c51:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108c54:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0108c57:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108c5a:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108c5f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 start_address = ROUNDDOWN(sva, PAGE_SIZE);
f0108c62:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108c65:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108c68:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108c6b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108c70:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 end_address = ROUNDUP(eva, PAGE_SIZE);
f0108c73:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f0108c7a:	8b 55 10             	mov    0x10(%ebp),%edx
f0108c7d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108c80:	01 d0                	add    %edx,%eax
f0108c82:	48                   	dec    %eax
f0108c83:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0108c86:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108c89:	ba 00 00 00 00       	mov    $0x0,%edx
f0108c8e:	f7 75 e0             	divl   -0x20(%ebp)
f0108c91:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108c94:	29 d0                	sub    %edx,%eax
f0108c96:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 size = end_address - start_address;
f0108c99:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108c9c:	2b 45 f0             	sub    -0x10(%ebp),%eax
f0108c9f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 check = 0;
f0108ca2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	do
		{
			if(start_address_pt %(PAGE_SIZE*1024) == 0)
f0108ca9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108cac:	25 ff ff 3f 00       	and    $0x3fffff,%eax
f0108cb1:	85 c0                	test   %eax,%eax
f0108cb3:	75 37                	jne    f0108cec <calculate_allocated_space+0xa1>
			{
				uint32 *ptr_page_table = NULL;
f0108cb5:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
				get_page_table(page_directory, start_address_pt, &ptr_page_table);
f0108cbc:	83 ec 04             	sub    $0x4,%esp
f0108cbf:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108cc2:	50                   	push   %eax
f0108cc3:	ff 75 f4             	pushl  -0xc(%ebp)
f0108cc6:	ff 75 08             	pushl  0x8(%ebp)
f0108cc9:	e8 e3 dd ff ff       	call   f0106ab1 <get_page_table>
f0108cce:	83 c4 10             	add    $0x10,%esp
				if(ptr_page_table != NULL)
f0108cd1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108cd4:	85 c0                	test   %eax,%eax
f0108cd6:	74 14                	je     f0108cec <calculate_allocated_space+0xa1>
				{
					(*num_tables)++;
f0108cd8:	8b 45 14             	mov    0x14(%ebp),%eax
f0108cdb:	8b 00                	mov    (%eax),%eax
f0108cdd:	8d 50 01             	lea    0x1(%eax),%edx
f0108ce0:	8b 45 14             	mov    0x14(%ebp),%eax
f0108ce3:	89 10                	mov    %edx,(%eax)
					check = 1;
f0108ce5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
				}
			}
			if(check == 1)
f0108cec:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f0108cf0:	75 2d                	jne    f0108d1f <calculate_allocated_space+0xd4>
			{
				uint32 *ptr_page = NULL;
f0108cf2:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
				if (get_frame_info(page_directory, start_address, &ptr_page) != 0)
f0108cf9:	83 ec 04             	sub    $0x4,%esp
f0108cfc:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108cff:	50                   	push   %eax
f0108d00:	ff 75 f0             	pushl  -0x10(%ebp)
f0108d03:	ff 75 08             	pushl  0x8(%ebp)
f0108d06:	e8 fb e0 ff ff       	call   f0106e06 <get_frame_info>
f0108d0b:	83 c4 10             	add    $0x10,%esp
f0108d0e:	85 c0                	test   %eax,%eax
f0108d10:	74 0d                	je     f0108d1f <calculate_allocated_space+0xd4>
					(*num_pages)++;
f0108d12:	8b 45 18             	mov    0x18(%ebp),%eax
f0108d15:	8b 00                	mov    (%eax),%eax
f0108d17:	8d 50 01             	lea    0x1(%eax),%edx
f0108d1a:	8b 45 18             	mov    0x18(%ebp),%eax
f0108d1d:	89 10                	mov    %edx,(%eax)
			}
			start_address += PAGE_SIZE;
f0108d1f:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
			start_address_pt = start_address;
f0108d26:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108d29:	89 45 f4             	mov    %eax,-0xc(%ebp)
		} while (start_address < sva+size);
f0108d2c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108d2f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108d32:	01 d0                	add    %edx,%eax
f0108d34:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0108d37:	0f 87 6c ff ff ff    	ja     f0108ca9 <calculate_allocated_space+0x5e>
}
f0108d3d:	90                   	nop
f0108d3e:	c9                   	leave  
f0108d3f:	c3                   	ret    

f0108d40 <calculate_required_frames>:
// calculate_required_frames:
// calculates the new allocation size required for given address+size,
// we are not interested in knowing if pages or tables actually exist in memory or the page file,
// we are interested in knowing whether they are allocated or not.
uint32 calculate_required_frames(uint32* page_directory, uint32 sva, uint32 size)
{
f0108d40:	55                   	push   %ebp
f0108d41:	89 e5                	mov    %esp,%ebp
f0108d43:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_required_frames
	// Write your code here, remove the panic and write your code
	//panic("calculate_required_frames() is not implemented yet...!!");
	uint32 number_of_tables = 0;
f0108d46:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 number_of_pages = 0;
f0108d4d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 start_address_pt = ROUNDDOWN(sva, PAGE_SIZE*1024);
f0108d54:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108d57:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108d5a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108d5d:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108d62:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 start_address = ROUNDDOWN(sva, PAGE_SIZE);
f0108d65:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108d68:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0108d6b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108d6e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108d73:	89 45 e8             	mov    %eax,-0x18(%ebp)
	do
	{
		if(start_address_pt %(PAGE_SIZE*1024) == 0)
f0108d76:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108d79:	25 ff ff 3f 00       	and    $0x3fffff,%eax
f0108d7e:	85 c0                	test   %eax,%eax
f0108d80:	75 26                	jne    f0108da8 <calculate_required_frames+0x68>
		{
			uint32 *ptr_page_table = NULL;
f0108d82:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
			get_page_table(page_directory, start_address_pt, &ptr_page_table);
f0108d89:	83 ec 04             	sub    $0x4,%esp
f0108d8c:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0108d8f:	50                   	push   %eax
f0108d90:	ff 75 ec             	pushl  -0x14(%ebp)
f0108d93:	ff 75 08             	pushl  0x8(%ebp)
f0108d96:	e8 16 dd ff ff       	call   f0106ab1 <get_page_table>
f0108d9b:	83 c4 10             	add    $0x10,%esp
			if(ptr_page_table == NULL)
f0108d9e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108da1:	85 c0                	test   %eax,%eax
f0108da3:	75 03                	jne    f0108da8 <calculate_required_frames+0x68>
				number_of_tables++;
f0108da5:	ff 45 f4             	incl   -0xc(%ebp)
		}
		uint32 *ptr_page = NULL;
f0108da8:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	    if (get_frame_info(page_directory, start_address, &ptr_page) == 0)
f0108daf:	83 ec 04             	sub    $0x4,%esp
f0108db2:	8d 45 dc             	lea    -0x24(%ebp),%eax
f0108db5:	50                   	push   %eax
f0108db6:	ff 75 e8             	pushl  -0x18(%ebp)
f0108db9:	ff 75 08             	pushl  0x8(%ebp)
f0108dbc:	e8 45 e0 ff ff       	call   f0106e06 <get_frame_info>
f0108dc1:	83 c4 10             	add    $0x10,%esp
f0108dc4:	85 c0                	test   %eax,%eax
f0108dc6:	75 03                	jne    f0108dcb <calculate_required_frames+0x8b>
			number_of_pages++;
f0108dc8:	ff 45 f0             	incl   -0x10(%ebp)

	    start_address += PAGE_SIZE;
f0108dcb:	81 45 e8 00 10 00 00 	addl   $0x1000,-0x18(%ebp)
	    start_address_pt = start_address;
f0108dd2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108dd5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	} while (start_address < sva+size);
f0108dd8:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108ddb:	8b 45 10             	mov    0x10(%ebp),%eax
f0108dde:	01 d0                	add    %edx,%eax
f0108de0:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0108de3:	77 91                	ja     f0108d76 <calculate_required_frames+0x36>
	return number_of_tables + number_of_pages;
f0108de5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108de8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108deb:	01 d0                	add    %edx,%eax
}
f0108ded:	c9                   	leave  
f0108dee:	c3                   	ret    

f0108def <allocate_user_mem>:

//=====================================
// 1) ALLOCATE USER MEMORY:
//=====================================
void allocate_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108def:	55                   	push   %ebp
f0108df0:	89 e5                	mov    %esp,%ebp
f0108df2:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("allocate_user_mem() is not implemented yet...!!");
f0108df5:	83 ec 04             	sub    $0x4,%esp
f0108df8:	68 78 62 13 f0       	push   $0xf0136278
f0108dfd:	68 25 01 00 00       	push   $0x125
f0108e02:	68 a8 62 13 f0       	push   $0xf01362a8
f0108e07:	e8 f9 73 ff ff       	call   f0100205 <_panic>

f0108e0c <free_user_mem>:

//=====================================
// 2) FREE USER MEMORY:
//=====================================
void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108e0c:	55                   	push   %ebp
f0108e0d:	89 e5                	mov    %esp,%ebp
f0108e0f:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [USER HEAP - KERNEL SIDE] free_user_mem
	// Write your code here, remove the panic and write your code
	panic("free_user_mem() is not implemented yet...!!");
f0108e12:	83 ec 04             	sub    $0x4,%esp
f0108e15:	68 c4 62 13 f0       	push   $0xf01362c4
f0108e1a:	68 2f 01 00 00       	push   $0x12f
f0108e1f:	68 a8 62 13 f0       	push   $0xf01362a8
f0108e24:	e8 dc 73 ff ff       	call   f0100205 <_panic>

f0108e29 <__free_user_mem_with_buffering>:

//=====================================
// 2) FREE USER MEMORY (BUFFERING):
//=====================================
void __free_user_mem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108e29:	55                   	push   %ebp
f0108e2a:	89 e5                	mov    %esp,%ebp
f0108e2c:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("__free_user_mem_with_buffering() is not implemented yet...!!");
f0108e2f:	83 ec 04             	sub    $0x4,%esp
f0108e32:	68 f0 62 13 f0       	push   $0xf01362f0
f0108e37:	68 3d 01 00 00       	push   $0x13d
f0108e3c:	68 a8 62 13 f0       	push   $0xf01362a8
f0108e41:	e8 bf 73 ff ff       	call   f0100205 <_panic>

f0108e46 <move_user_mem>:

//=====================================
// 3) MOVE USER MEMORY:
//=====================================
void move_user_mem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f0108e46:	55                   	push   %ebp
f0108e47:	89 e5                	mov    %esp,%ebp
f0108e49:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [USER HEAP - KERNEL SIDE] move_user_mem
	//your code is here, remove the panic and write your code
	panic("move_user_mem() is not implemented yet...!!");
f0108e4c:	83 ec 04             	sub    $0x4,%esp
f0108e4f:	68 30 63 13 f0       	push   $0xf0136330
f0108e54:	68 4d 01 00 00       	push   $0x14d
f0108e59:	68 a8 62 13 f0       	push   $0xf01362a8
f0108e5e:	e8 a2 73 ff ff       	call   f0100205 <_panic>

f0108e63 <env_create>:
//===============================
// 1) CREATE NEW ENV & LOAD IT:
//===============================
// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f0108e63:	55                   	push   %ebp
f0108e64:	89 e5                	mov    %esp,%ebp
f0108e66:	57                   	push   %edi
f0108e67:	56                   	push   %esi
f0108e68:	53                   	push   %ebx
f0108e69:	81 ec ec 00 00 00    	sub    $0xec,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f0108e6f:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f0108e76:	83 ec 0c             	sub    $0xc,%esp
f0108e79:	ff 75 08             	pushl  0x8(%ebp)
f0108e7c:	e8 0b 22 00 00       	call   f010b08c <get_user_program_info>
f0108e81:	83 c4 10             	add    $0x10,%esp
f0108e84:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f0108e87:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0108e8b:	75 0a                	jne    f0108e97 <env_create+0x34>
f0108e8d:	b8 00 00 00 00       	mov    $0x0,%eax
f0108e92:	e9 cd 0b 00 00       	jmp    f0109a64 <env_create+0xc01>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f0108e97:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108e9a:	8b 40 08             	mov    0x8(%eax),%eax
f0108e9d:	89 45 b8             	mov    %eax,-0x48(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f0108ea0:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%ebp)
f0108ea7:	00 00 00 
	if(allocate_environment(&e) < 0)
f0108eaa:	83 ec 0c             	sub    $0xc,%esp
f0108ead:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f0108eb3:	50                   	push   %eax
f0108eb4:	e8 d3 0e 00 00       	call   f0109d8c <allocate_environment>
f0108eb9:	83 c4 10             	add    $0x10,%esp
f0108ebc:	85 c0                	test   %eax,%eax
f0108ebe:	79 0a                	jns    f0108eca <env_create+0x67>
	{
		return 0;
f0108ec0:	b8 00 00 00 00       	mov    $0x0,%eax
f0108ec5:	e9 9a 0b 00 00       	jmp    f0109a64 <env_create+0xc01>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f0108eca:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108ecd:	8b 00                	mov    (%eax),%eax
f0108ecf:	83 ec 0c             	sub    $0xc,%esp
f0108ed2:	50                   	push   %eax
f0108ed3:	e8 f4 7f 02 00       	call   f0130ecc <strlen>
f0108ed8:	83 c4 10             	add    $0x10,%esp
f0108edb:	83 f8 3f             	cmp    $0x3f,%eax
f0108ede:	7f 20                	jg     f0108f00 <env_create+0x9d>
		strcpy(e->prog_name, ptr_user_program_info->name);
f0108ee0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108ee3:	8b 00                	mov    (%eax),%eax
f0108ee5:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0108eeb:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f0108ef1:	83 ec 08             	sub    $0x8,%esp
f0108ef4:	50                   	push   %eax
f0108ef5:	52                   	push   %edx
f0108ef6:	e8 20 80 02 00       	call   f0130f1b <strcpy>
f0108efb:	83 c4 10             	add    $0x10,%esp
f0108efe:	eb 20                	jmp    f0108f20 <env_create+0xbd>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f0108f00:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108f03:	8b 00                	mov    (%eax),%eax
f0108f05:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0108f0b:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f0108f11:	83 ec 04             	sub    $0x4,%esp
f0108f14:	6a 3f                	push   $0x3f
f0108f16:	50                   	push   %eax
f0108f17:	52                   	push   %edx
f0108f18:	e8 2c 80 02 00       	call   f0130f49 <strncpy>
f0108f1d:	83 c4 10             	add    $0x10,%esp
	//REMEMBER: "allocate_frame" should always return a free frame
	uint32* ptr_user_page_directory;
	unsigned int phys_user_page_directory;
#if USE_KHEAP
	{
		ptr_user_page_directory = create_user_directory();
f0108f20:	e8 6d 0f 00 00       	call   f0109e92 <create_user_directory>
f0108f25:	89 45 b0             	mov    %eax,-0x50(%ebp)
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
f0108f28:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0108f2b:	83 ec 0c             	sub    $0xc,%esp
f0108f2e:	50                   	push   %eax
f0108f2f:	e8 6f eb ff ff       	call   f0107aa3 <kheap_physical_address>
f0108f34:	83 c4 10             	add    $0x10,%esp
f0108f37:	89 45 ac             	mov    %eax,-0x54(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f0108f3a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108f40:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108f43:	89 50 74             	mov    %edx,0x74(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108f46:	83 ec 0c             	sub    $0xc,%esp
f0108f49:	6a 02                	push   $0x2
f0108f4b:	e8 f3 4d 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f0108f50:	83 c4 10             	add    $0x10,%esp
f0108f53:	85 c0                	test   %eax,%eax
f0108f55:	74 21                	je     f0108f78 <env_create+0x115>
	{
		e->SecondListSize = LRU_second_list_size;
f0108f57:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108f5d:	8b 55 10             	mov    0x10(%ebp),%edx
f0108f60:	89 90 ec 05 00 00    	mov    %edx,0x5ec(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f0108f66:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108f6c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108f6f:	2b 55 10             	sub    0x10(%ebp),%edx
f0108f72:	89 90 e8 05 00 00    	mov    %edx,0x5e8(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f0108f78:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f0108f7c:	75 12                	jne    f0108f90 <env_create+0x12d>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f0108f7e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108f84:	c7 80 a0 05 00 00 0a 	movl   $0xa,0x5a0(%eax)
f0108f8b:	00 00 00 
f0108f8e:	eb 0f                	jmp    f0108f9f <env_create+0x13c>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f0108f90:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108f96:	8b 55 14             	mov    0x14(%ebp),%edx
f0108f99:	89 90 a0 05 00 00    	mov    %edx,0x5a0(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f0108f9f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108fa5:	83 ec 04             	sub    $0x4,%esp
f0108fa8:	ff 75 ac             	pushl  -0x54(%ebp)
f0108fab:	ff 75 b0             	pushl  -0x50(%ebp)
f0108fae:	50                   	push   %eax
f0108faf:	e8 fa 15 00 00       	call   f010a5ae <initialize_environment>
f0108fb4:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0108fb7:	0f 20 d8             	mov    %cr3,%eax
f0108fba:	89 45 a0             	mov    %eax,-0x60(%ebp)
	return val;
f0108fbd:	8b 45 a0             	mov    -0x60(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f0108fc0:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	lcr3(e->env_cr3) ;
f0108fc3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108fc9:	8b 40 60             	mov    0x60(%eax),%eax
f0108fcc:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0108fd2:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0108fd8:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f0108fdb:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int segment_counter=0;
f0108fe2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f0108fe9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108fef:	8b 40 74             	mov    0x74(%eax),%eax
f0108ff2:	48                   	dec    %eax
f0108ff3:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 lastTableNumber=0xffffffff;
f0108ff6:	c7 85 48 ff ff ff ff 	movl   $0xffffffff,-0xb8(%ebp)
f0108ffd:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0109000:	8d 85 08 ff ff ff    	lea    -0xf8(%ebp),%eax
f0109006:	83 ec 08             	sub    $0x8,%esp
f0109009:	ff 75 b8             	pushl  -0x48(%ebp)
f010900c:	50                   	push   %eax
f010900d:	e8 af 1d 00 00       	call   f010adc1 <PROGRAM_SEGMENT_FIRST>
f0109012:	83 c4 0c             	add    $0xc,%esp
f0109015:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f010901b:	8d 95 08 ff ff ff    	lea    -0xf8(%ebp),%edx
f0109021:	b9 05 00 00 00       	mov    $0x5,%ecx
f0109026:	89 c7                	mov    %eax,%edi
f0109028:	89 d6                	mov    %edx,%esi
f010902a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010902c:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0109032:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0109035:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109038:	8b 40 10             	mov    0x10(%eax),%eax
f010903b:	83 f8 ff             	cmp    $0xffffffff,%eax
f010903e:	75 07                	jne    f0109047 <env_create+0x1e4>
f0109040:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0109047:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010904a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010904d:	e9 15 03 00 00       	jmp    f0109367 <env_create+0x504>
	{
		segment_counter++;
f0109052:	ff 45 e0             	incl   -0x20(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f0109055:	c7 85 30 ff ff ff 00 	movl   $0x0,-0xd0(%ebp)
f010905c:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f010905f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109065:	83 ec 0c             	sub    $0xc,%esp
f0109068:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f010906e:	52                   	push   %edx
f010906f:	ff 75 dc             	pushl  -0x24(%ebp)
f0109072:	8d 95 30 ff ff ff    	lea    -0xd0(%ebp),%edx
f0109078:	52                   	push   %edx
f0109079:	ff 75 e4             	pushl  -0x1c(%ebp)
f010907c:	50                   	push   %eax
f010907d:	e8 4b 0e 00 00       	call   f0109ecd <program_segment_alloc_map_copy_workingset>
f0109082:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f0109085:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010908b:	29 45 dc             	sub    %eax,-0x24(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f010908e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109091:	8b 00                	mov    (%eax),%eax
f0109093:	89 45 9c             	mov    %eax,-0x64(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f0109096:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109099:	8b 40 0c             	mov    0xc(%eax),%eax
f010909c:	89 45 98             	mov    %eax,-0x68(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f010909f:	8b 45 98             	mov    -0x68(%ebp),%eax
f01090a2:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01090a5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01090a8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01090ad:	89 45 90             	mov    %eax,-0x70(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f01090b0:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f01090b7:	8b 55 98             	mov    -0x68(%ebp),%edx
f01090ba:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01090bd:	01 d0                	add    %edx,%eax
f01090bf:	48                   	dec    %eax
f01090c0:	89 45 88             	mov    %eax,-0x78(%ebp)
f01090c3:	8b 45 88             	mov    -0x78(%ebp),%eax
f01090c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01090cb:	f7 75 8c             	divl   -0x74(%ebp)
f01090ce:	8b 45 88             	mov    -0x78(%ebp),%eax
f01090d1:	29 d0                	sub    %edx,%eax
f01090d3:	89 45 84             	mov    %eax,-0x7c(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f01090d6:	8b 45 98             	mov    -0x68(%ebp),%eax
f01090d9:	2b 45 90             	sub    -0x70(%ebp),%eax
f01090dc:	89 45 80             	mov    %eax,-0x80(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f01090df:	a1 84 5d 87 f0       	mov    0xf0875d84,%eax
f01090e4:	83 ec 04             	sub    $0x4,%esp
f01090e7:	68 00 10 00 00       	push   $0x1000
f01090ec:	6a 00                	push   $0x0
f01090ee:	50                   	push   %eax
f01090ef:	e8 c6 7f 02 00       	call   f01310ba <memset>
f01090f4:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f01090f7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01090fa:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f01090fd:	8b 15 84 5d 87 f0    	mov    0xf0875d84,%edx
f0109103:	8b 45 80             	mov    -0x80(%ebp),%eax
f0109106:	01 d0                	add    %edx,%eax
f0109108:	89 45 d0             	mov    %eax,-0x30(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f010910b:	8b 45 98             	mov    -0x68(%ebp),%eax
f010910e:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109111:	eb 13                	jmp    f0109126 <env_create+0x2c3>
		{
			*dst_ptr = *src_ptr ;
f0109113:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0109116:	8a 10                	mov    (%eax),%dl
f0109118:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010911b:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f010911d:	ff 45 cc             	incl   -0x34(%ebp)
f0109120:	ff 45 d4             	incl   -0x2c(%ebp)
f0109123:	ff 45 d0             	incl   -0x30(%ebp)
f0109126:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109129:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f010912c:	72 e5                	jb     f0109113 <env_create+0x2b0>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f010912e:	8b 15 84 5d 87 f0    	mov    0xf0875d84,%edx
f0109134:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010913a:	83 ec 04             	sub    $0x4,%esp
f010913d:	52                   	push   %edx
f010913e:	ff 75 90             	pushl  -0x70(%ebp)
f0109141:	50                   	push   %eax
f0109142:	e8 ce a5 ff ff       	call   f0103715 <pf_add_env_page>
f0109147:	83 c4 10             	add    $0x10,%esp
f010914a:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010914d:	75 17                	jne    f0109166 <env_create+0x303>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f010914f:	83 ec 04             	sub    $0x4,%esp
f0109152:	68 5c 63 13 f0       	push   $0xf013635c
f0109157:	68 e1 00 00 00       	push   $0xe1
f010915c:	68 a1 63 13 f0       	push   $0xf01363a1
f0109161:	e8 9f 70 ff ff       	call   f0100205 <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f0109166:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109169:	8b 50 04             	mov    0x4(%eax),%edx
f010916c:	8b 45 98             	mov    -0x68(%ebp),%eax
f010916f:	01 d0                	add    %edx,%eax
f0109171:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0109177:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010917d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109182:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f0109188:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010918b:	8b 50 04             	mov    0x4(%eax),%edx
f010918e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109191:	01 d0                	add    %edx,%eax
f0109193:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0109199:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010919c:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010919f:	eb 43                	jmp    f01091e4 <env_create+0x381>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f01091a1:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01091a4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01091aa:	83 ec 04             	sub    $0x4,%esp
f01091ad:	ff 75 d4             	pushl  -0x2c(%ebp)
f01091b0:	52                   	push   %edx
f01091b1:	50                   	push   %eax
f01091b2:	e8 5e a5 ff ff       	call   f0103715 <pf_add_env_page>
f01091b7:	83 c4 10             	add    $0x10,%esp
f01091ba:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01091bd:	75 17                	jne    f01091d6 <env_create+0x373>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01091bf:	83 ec 04             	sub    $0x4,%esp
f01091c2:	68 5c 63 13 f0       	push   $0xf013635c
f01091c7:	68 ee 00 00 00       	push   $0xee
f01091cc:	68 a1 63 13 f0       	push   $0xf01363a1
f01091d1:	e8 2f 70 ff ff       	call   f0100205 <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f01091d6:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f01091dd:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f01091e4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01091e7:	3b 85 78 ff ff ff    	cmp    -0x88(%ebp),%eax
f01091ed:	72 b2                	jb     f01091a1 <env_create+0x33e>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f01091ef:	a1 84 5d 87 f0       	mov    0xf0875d84,%eax
f01091f4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f01091f7:	83 ec 04             	sub    $0x4,%esp
f01091fa:	68 00 10 00 00       	push   $0x1000
f01091ff:	6a 00                	push   $0x0
f0109201:	ff 75 d0             	pushl  -0x30(%ebp)
f0109204:	e8 b1 7e 02 00       	call   f01310ba <memset>
f0109209:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f010920c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0109212:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109215:	eb 13                	jmp    f010922a <env_create+0x3c7>
		{
			*dst_ptr = *src_ptr;
f0109217:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010921a:	8a 10                	mov    (%eax),%dl
f010921c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010921f:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0109221:	ff 45 cc             	incl   -0x34(%ebp)
f0109224:	ff 45 d4             	incl   -0x2c(%ebp)
f0109227:	ff 45 d0             	incl   -0x30(%ebp)
f010922a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010922d:	3b 85 74 ff ff ff    	cmp    -0x8c(%ebp),%eax
f0109233:	72 e2                	jb     f0109217 <env_create+0x3b4>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0109235:	8b 15 84 5d 87 f0    	mov    0xf0875d84,%edx
f010923b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109241:	83 ec 04             	sub    $0x4,%esp
f0109244:	52                   	push   %edx
f0109245:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f010924b:	50                   	push   %eax
f010924c:	e8 c4 a4 ff ff       	call   f0103715 <pf_add_env_page>
f0109251:	83 c4 10             	add    $0x10,%esp
f0109254:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109257:	75 17                	jne    f0109270 <env_create+0x40d>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109259:	83 ec 04             	sub    $0x4,%esp
f010925c:	68 5c 63 13 f0       	push   $0xf013635c
f0109261:	68 fd 00 00 00       	push   $0xfd
f0109266:	68 a1 63 13 f0       	push   $0xf01363a1
f010926b:	e8 95 6f ff ff       	call   f0100205 <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f0109270:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0109277:	10 00 00 
f010927a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010927d:	8b 50 04             	mov    0x4(%eax),%edx
f0109280:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109283:	01 c2                	add    %eax,%edx
f0109285:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010928b:	01 d0                	add    %edx,%eax
f010928d:	48                   	dec    %eax
f010928e:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0109294:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f010929a:	ba 00 00 00 00       	mov    $0x0,%edx
f010929f:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01092a5:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01092ab:	29 d0                	sub    %edx,%eax
f01092ad:	89 45 c8             	mov    %eax,-0x38(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f01092b0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01092b3:	8b 50 08             	mov    0x8(%eax),%edx
f01092b6:	8b 45 98             	mov    -0x68(%ebp),%eax
f01092b9:	01 d0                	add    %edx,%eax
f01092bb:	2b 45 c8             	sub    -0x38(%ebp),%eax
f01092be:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f01092c4:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01092cb:	eb 41                	jmp    f010930e <env_create+0x4ab>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f01092cd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01092d3:	83 ec 04             	sub    $0x4,%esp
f01092d6:	6a 01                	push   $0x1
f01092d8:	ff 75 c8             	pushl  -0x38(%ebp)
f01092db:	50                   	push   %eax
f01092dc:	e8 03 a3 ff ff       	call   f01035e4 <pf_add_empty_env_page>
f01092e1:	83 c4 10             	add    $0x10,%esp
f01092e4:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01092e7:	75 17                	jne    f0109300 <env_create+0x49d>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01092e9:	83 ec 04             	sub    $0x4,%esp
f01092ec:	68 5c 63 13 f0       	push   $0xf013635c
f01092f1:	68 0a 01 00 00       	push   $0x10a
f01092f6:	68 a1 63 13 f0       	push   $0xf01363a1
f01092fb:	e8 05 6f ff ff       	call   f0100205 <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0109300:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0109307:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f010930e:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0109315:	10 00 00 
f0109318:	8b 95 68 ff ff ff    	mov    -0x98(%ebp),%edx
f010931e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0109324:	01 d0                	add    %edx,%eax
f0109326:	48                   	dec    %eax
f0109327:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f010932d:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0109333:	ba 00 00 00 00       	mov    $0x0,%edx
f0109338:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f010933e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0109344:	29 d0                	sub    %edx,%eax
f0109346:	89 c2                	mov    %eax,%edx
f0109348:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010934b:	39 c2                	cmp    %eax,%edx
f010934d:	0f 87 7a ff ff ff    	ja     f01092cd <env_create+0x46a>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0109353:	83 ec 08             	sub    $0x8,%esp
f0109356:	ff 75 b8             	pushl  -0x48(%ebp)
f0109359:	ff 75 e4             	pushl  -0x1c(%ebp)
f010935c:	e8 55 19 00 00       	call   f010acb6 <PROGRAM_SEGMENT_NEXT>
f0109361:	83 c4 10             	add    $0x10,%esp
f0109364:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0109367:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010936b:	0f 85 e1 fc ff ff    	jne    f0109052 <env_create+0x1ef>
		}
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
f0109371:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	for(;i<(e->page_WS_max_size); i++)
f0109378:	e9 9d 00 00 00       	jmp    f010941a <env_create+0x5b7>
	{
		if(e->ptr_pageWorkingSet[i].empty == 0)
f010937d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109383:	8b 48 78             	mov    0x78(%eax),%ecx
f0109386:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0109389:	89 d0                	mov    %edx,%eax
f010938b:	01 c0                	add    %eax,%eax
f010938d:	01 d0                	add    %edx,%eax
f010938f:	c1 e0 03             	shl    $0x3,%eax
f0109392:	01 c8                	add    %ecx,%eax
f0109394:	8a 40 04             	mov    0x4(%eax),%al
f0109397:	84 c0                	test   %al,%al
f0109399:	75 7c                	jne    f0109417 <env_create+0x5b4>
		{
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f010939b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01093a1:	8b 48 78             	mov    0x78(%eax),%ecx
f01093a4:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01093a7:	89 d0                	mov    %edx,%eax
f01093a9:	01 c0                	add    %eax,%eax
f01093ab:	01 d0                	add    %edx,%eax
f01093ad:	c1 e0 03             	shl    $0x3,%eax
f01093b0:	01 c8                	add    %ecx,%eax
f01093b2:	8b 00                	mov    (%eax),%eax
f01093b4:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
			uint32* ptr_page_table;

			//Here, page tables of all working set pages should be exist in memory
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
f01093ba:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01093c0:	8b 40 5c             	mov    0x5c(%eax),%eax
f01093c3:	83 ec 04             	sub    $0x4,%esp
f01093c6:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f01093cc:	52                   	push   %edx
f01093cd:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
f01093d3:	50                   	push   %eax
f01093d4:	e8 d8 d6 ff ff       	call   f0106ab1 <get_page_table>
f01093d9:	83 c4 10             	add    $0x10,%esp
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f01093dc:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01093e2:	8b 95 5c ff ff ff    	mov    -0xa4(%ebp),%edx
f01093e8:	c1 ea 0c             	shr    $0xc,%edx
f01093eb:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01093f1:	c1 e2 02             	shl    $0x2,%edx
f01093f4:	01 d0                	add    %edx,%eax
f01093f6:	8b 95 2c ff ff ff    	mov    -0xd4(%ebp),%edx
f01093fc:	8b 8d 5c ff ff ff    	mov    -0xa4(%ebp),%ecx
f0109402:	c1 e9 0c             	shr    $0xc,%ecx
f0109405:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f010940b:	c1 e1 02             	shl    $0x2,%ecx
f010940e:	01 ca                	add    %ecx,%edx
f0109410:	8b 12                	mov    (%edx),%edx
f0109412:	83 e2 bf             	and    $0xffffffbf,%edx
f0109415:	89 10                	mov    %edx,(%eax)
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
	for(;i<(e->page_WS_max_size); i++)
f0109417:	ff 45 c4             	incl   -0x3c(%ebp)
f010941a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109420:	8b 50 74             	mov    0x74(%eax),%edx
f0109423:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0109426:	39 c2                	cmp    %eax,%edx
f0109428:	0f 87 4f ff ff ff    	ja     f010937d <env_create+0x51a>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f010942e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109431:	8b 50 08             	mov    0x8(%eax),%edx
f0109434:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010943a:	83 ec 08             	sub    $0x8,%esp
f010943d:	52                   	push   %edx
f010943e:	50                   	push   %eax
f010943f:	e8 bc 16 00 00       	call   f010ab00 <set_environment_entry_point>
f0109444:	83 c4 10             	add    $0x10,%esp

	//[9] Allocate and map one page for the program's initial stack
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set

	e->initNumStackPages = 1;
f0109447:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010944d:	c7 80 58 05 00 00 01 	movl   $0x1,0x558(%eax)
f0109454:	00 00 00 

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f0109457:	c7 85 58 ff ff ff 00 	movl   $0xeebfd000,-0xa8(%ebp)
f010945e:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f0109461:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0109468:	e9 53 05 00 00       	jmp    f01099c0 <env_create+0xb5d>
	{
		struct FrameInfo *pp = NULL;
f010946d:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f0109474:	00 00 00 
		allocate_frame(&pp);
f0109477:	83 ec 0c             	sub    $0xc,%esp
f010947a:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0109480:	50                   	push   %eax
f0109481:	e8 6c d4 ff ff       	call   f01068f2 <allocate_frame>
f0109486:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, stackVa, PERM_USER | PERM_WRITEABLE);
f0109489:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f010948f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109495:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109498:	6a 06                	push   $0x6
f010949a:	ff 75 c0             	pushl  -0x40(%ebp)
f010949d:	52                   	push   %edx
f010949e:	50                   	push   %eax
f010949f:	e8 59 da ff ff       	call   f0106efd <loadtime_map_frame>
f01094a4:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f01094a7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01094aa:	83 ec 04             	sub    $0x4,%esp
f01094ad:	68 00 10 00 00       	push   $0x1000
f01094b2:	6a 00                	push   $0x0
f01094b4:	50                   	push   %eax
f01094b5:	e8 00 7c 02 00       	call   f01310ba <memset>
f01094ba:	83 c4 10             	add    $0x10,%esp

		//now add it to the working set and the page table
		{
			env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f01094bd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01094c3:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01094c9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01094cf:	83 ec 04             	sub    $0x4,%esp
f01094d2:	ff 75 c0             	pushl  -0x40(%ebp)
f01094d5:	52                   	push   %edx
f01094d6:	50                   	push   %eax
f01094d7:	e8 ee e9 ff ff       	call   f0107eca <env_page_ws_set_entry>
f01094dc:	83 c4 10             	add    $0x10,%esp

			//2020
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01094df:	83 ec 0c             	sub    $0xc,%esp
f01094e2:	6a 02                	push   $0x2
f01094e4:	e8 5a 48 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f01094e9:	83 c4 10             	add    $0x10,%esp
f01094ec:	85 c0                	test   %eax,%eax
f01094ee:	0f 84 6b 04 00 00    	je     f010995f <env_create+0xafc>
			{
				LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f01094f4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01094fa:	8b 48 78             	mov    0x78(%eax),%ecx
f01094fd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109503:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109509:	89 d0                	mov    %edx,%eax
f010950b:	01 c0                	add    %eax,%eax
f010950d:	01 d0                	add    %edx,%eax
f010950f:	c1 e0 03             	shl    $0x3,%eax
f0109512:	01 c8                	add    %ecx,%eax
f0109514:	85 c0                	test   %eax,%eax
f0109516:	75 17                	jne    f010952f <env_create+0x6cc>
f0109518:	83 ec 04             	sub    $0x4,%esp
f010951b:	68 be 63 13 f0       	push   $0xf01363be
f0109520:	68 41 01 00 00       	push   $0x141
f0109525:	68 a1 63 13 f0       	push   $0xf01363a1
f010952a:	e8 d6 6c ff ff       	call   f0100205 <_panic>
f010952f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109535:	8b 48 78             	mov    0x78(%eax),%ecx
f0109538:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010953e:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109544:	89 d0                	mov    %edx,%eax
f0109546:	01 c0                	add    %eax,%eax
f0109548:	01 d0                	add    %edx,%eax
f010954a:	c1 e0 03             	shl    $0x3,%eax
f010954d:	01 c8                	add    %ecx,%eax
f010954f:	8b 40 10             	mov    0x10(%eax),%eax
f0109552:	85 c0                	test   %eax,%eax
f0109554:	74 4b                	je     f01095a1 <env_create+0x73e>
f0109556:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010955c:	8b 48 78             	mov    0x78(%eax),%ecx
f010955f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109565:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010956b:	89 d0                	mov    %edx,%eax
f010956d:	01 c0                	add    %eax,%eax
f010956f:	01 d0                	add    %edx,%eax
f0109571:	c1 e0 03             	shl    $0x3,%eax
f0109574:	01 c8                	add    %ecx,%eax
f0109576:	8b 50 10             	mov    0x10(%eax),%edx
f0109579:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010957f:	8b 58 78             	mov    0x78(%eax),%ebx
f0109582:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109588:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010958e:	89 c8                	mov    %ecx,%eax
f0109590:	01 c0                	add    %eax,%eax
f0109592:	01 c8                	add    %ecx,%eax
f0109594:	c1 e0 03             	shl    $0x3,%eax
f0109597:	01 d8                	add    %ebx,%eax
f0109599:	8b 40 14             	mov    0x14(%eax),%eax
f010959c:	89 42 14             	mov    %eax,0x14(%edx)
f010959f:	eb 2f                	jmp    f01095d0 <env_create+0x76d>
f01095a1:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01095a7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095ad:	8b 58 78             	mov    0x78(%eax),%ebx
f01095b0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095b6:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01095bc:	89 c8                	mov    %ecx,%eax
f01095be:	01 c0                	add    %eax,%eax
f01095c0:	01 c8                	add    %ecx,%eax
f01095c2:	c1 e0 03             	shl    $0x3,%eax
f01095c5:	01 d8                	add    %ebx,%eax
f01095c7:	8b 40 14             	mov    0x14(%eax),%eax
f01095ca:	89 82 bc 05 00 00    	mov    %eax,0x5bc(%edx)
f01095d0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095d6:	8b 48 78             	mov    0x78(%eax),%ecx
f01095d9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095df:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01095e5:	89 d0                	mov    %edx,%eax
f01095e7:	01 c0                	add    %eax,%eax
f01095e9:	01 d0                	add    %edx,%eax
f01095eb:	c1 e0 03             	shl    $0x3,%eax
f01095ee:	01 c8                	add    %ecx,%eax
f01095f0:	8b 40 14             	mov    0x14(%eax),%eax
f01095f3:	85 c0                	test   %eax,%eax
f01095f5:	74 4b                	je     f0109642 <env_create+0x7df>
f01095f7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095fd:	8b 48 78             	mov    0x78(%eax),%ecx
f0109600:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109606:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010960c:	89 d0                	mov    %edx,%eax
f010960e:	01 c0                	add    %eax,%eax
f0109610:	01 d0                	add    %edx,%eax
f0109612:	c1 e0 03             	shl    $0x3,%eax
f0109615:	01 c8                	add    %ecx,%eax
f0109617:	8b 50 14             	mov    0x14(%eax),%edx
f010961a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109620:	8b 58 78             	mov    0x78(%eax),%ebx
f0109623:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109629:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010962f:	89 c8                	mov    %ecx,%eax
f0109631:	01 c0                	add    %eax,%eax
f0109633:	01 c8                	add    %ecx,%eax
f0109635:	c1 e0 03             	shl    $0x3,%eax
f0109638:	01 d8                	add    %ebx,%eax
f010963a:	8b 40 10             	mov    0x10(%eax),%eax
f010963d:	89 42 10             	mov    %eax,0x10(%edx)
f0109640:	eb 2f                	jmp    f0109671 <env_create+0x80e>
f0109642:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109648:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010964e:	8b 58 78             	mov    0x78(%eax),%ebx
f0109651:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109657:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010965d:	89 c8                	mov    %ecx,%eax
f010965f:	01 c0                	add    %eax,%eax
f0109661:	01 c8                	add    %ecx,%eax
f0109663:	c1 e0 03             	shl    $0x3,%eax
f0109666:	01 d8                	add    %ebx,%eax
f0109668:	8b 40 10             	mov    0x10(%eax),%eax
f010966b:	89 82 b8 05 00 00    	mov    %eax,0x5b8(%edx)
f0109671:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109677:	8b 48 78             	mov    0x78(%eax),%ecx
f010967a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109680:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109686:	89 d0                	mov    %edx,%eax
f0109688:	01 c0                	add    %eax,%eax
f010968a:	01 d0                	add    %edx,%eax
f010968c:	c1 e0 03             	shl    $0x3,%eax
f010968f:	01 c8                	add    %ecx,%eax
f0109691:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f0109698:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010969e:	8b 48 78             	mov    0x78(%eax),%ecx
f01096a1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096a7:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01096ad:	89 d0                	mov    %edx,%eax
f01096af:	01 c0                	add    %eax,%eax
f01096b1:	01 d0                	add    %edx,%eax
f01096b3:	c1 e0 03             	shl    $0x3,%eax
f01096b6:	01 c8                	add    %ecx,%eax
f01096b8:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f01096bf:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096c5:	8b 90 c4 05 00 00    	mov    0x5c4(%eax),%edx
f01096cb:	4a                   	dec    %edx
f01096cc:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)
				//Now: we are sure that at least the top page in the stack will be added to Active list
				//Since we left 1 empty location in the Active list when we loaded the program segments
				if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f01096d2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096d8:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f01096de:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096e4:	8b 80 e8 05 00 00    	mov    0x5e8(%eax),%eax
f01096ea:	39 c2                	cmp    %eax,%edx
f01096ec:	0f 83 39 01 00 00    	jae    f010982b <env_create+0x9c8>
				{
					LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f01096f2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096f8:	8b 48 78             	mov    0x78(%eax),%ecx
f01096fb:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109701:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109707:	89 d0                	mov    %edx,%eax
f0109709:	01 c0                	add    %eax,%eax
f010970b:	01 d0                	add    %edx,%eax
f010970d:	c1 e0 03             	shl    $0x3,%eax
f0109710:	01 c8                	add    %ecx,%eax
f0109712:	85 c0                	test   %eax,%eax
f0109714:	75 17                	jne    f010972d <env_create+0x8ca>
f0109716:	83 ec 04             	sub    $0x4,%esp
f0109719:	68 dc 63 13 f0       	push   $0xf01363dc
f010971e:	68 46 01 00 00       	push   $0x146
f0109723:	68 a1 63 13 f0       	push   $0xf01363a1
f0109728:	e8 d8 6a ff ff       	call   f0100205 <_panic>
f010972d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109733:	8b 48 78             	mov    0x78(%eax),%ecx
f0109736:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010973c:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109742:	89 d0                	mov    %edx,%eax
f0109744:	01 c0                	add    %eax,%eax
f0109746:	01 d0                	add    %edx,%eax
f0109748:	c1 e0 03             	shl    $0x3,%eax
f010974b:	01 c8                	add    %ecx,%eax
f010974d:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109753:	8b 92 c8 05 00 00    	mov    0x5c8(%edx),%edx
f0109759:	89 50 10             	mov    %edx,0x10(%eax)
f010975c:	8b 40 10             	mov    0x10(%eax),%eax
f010975f:	85 c0                	test   %eax,%eax
f0109761:	74 31                	je     f0109794 <env_create+0x931>
f0109763:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109769:	8b 90 c8 05 00 00    	mov    0x5c8(%eax),%edx
f010976f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109775:	8b 58 78             	mov    0x78(%eax),%ebx
f0109778:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010977e:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109784:	89 c8                	mov    %ecx,%eax
f0109786:	01 c0                	add    %eax,%eax
f0109788:	01 c8                	add    %ecx,%eax
f010978a:	c1 e0 03             	shl    $0x3,%eax
f010978d:	01 d8                	add    %ebx,%eax
f010978f:	89 42 14             	mov    %eax,0x14(%edx)
f0109792:	eb 2c                	jmp    f01097c0 <env_create+0x95d>
f0109794:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010979a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097a0:	8b 58 78             	mov    0x78(%eax),%ebx
f01097a3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097a9:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01097af:	89 c8                	mov    %ecx,%eax
f01097b1:	01 c0                	add    %eax,%eax
f01097b3:	01 c8                	add    %ecx,%eax
f01097b5:	c1 e0 03             	shl    $0x3,%eax
f01097b8:	01 d8                	add    %ebx,%eax
f01097ba:	89 82 cc 05 00 00    	mov    %eax,0x5cc(%edx)
f01097c0:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01097c6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097cc:	8b 58 78             	mov    0x78(%eax),%ebx
f01097cf:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097d5:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01097db:	89 c8                	mov    %ecx,%eax
f01097dd:	01 c0                	add    %eax,%eax
f01097df:	01 c8                	add    %ecx,%eax
f01097e1:	c1 e0 03             	shl    $0x3,%eax
f01097e4:	01 d8                	add    %ebx,%eax
f01097e6:	89 82 c8 05 00 00    	mov    %eax,0x5c8(%edx)
f01097ec:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097f2:	8b 48 78             	mov    0x78(%eax),%ecx
f01097f5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097fb:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109801:	89 d0                	mov    %edx,%eax
f0109803:	01 c0                	add    %eax,%eax
f0109805:	01 d0                	add    %edx,%eax
f0109807:	c1 e0 03             	shl    $0x3,%eax
f010980a:	01 c8                	add    %ecx,%eax
f010980c:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0109813:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109819:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f010981f:	42                   	inc    %edx
f0109820:	89 90 d4 05 00 00    	mov    %edx,0x5d4(%eax)
f0109826:	e9 34 01 00 00       	jmp    f010995f <env_create+0xafc>
				}
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010982b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109831:	8b 48 78             	mov    0x78(%eax),%ecx
f0109834:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010983a:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109840:	89 d0                	mov    %edx,%eax
f0109842:	01 c0                	add    %eax,%eax
f0109844:	01 d0                	add    %edx,%eax
f0109846:	c1 e0 03             	shl    $0x3,%eax
f0109849:	01 c8                	add    %ecx,%eax
f010984b:	85 c0                	test   %eax,%eax
f010984d:	75 17                	jne    f0109866 <env_create+0xa03>
f010984f:	83 ec 04             	sub    $0x4,%esp
f0109852:	68 dc 63 13 f0       	push   $0xf01363dc
f0109857:	68 4a 01 00 00       	push   $0x14a
f010985c:	68 a1 63 13 f0       	push   $0xf01363a1
f0109861:	e8 9f 69 ff ff       	call   f0100205 <_panic>
f0109866:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010986c:	8b 48 78             	mov    0x78(%eax),%ecx
f010986f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109875:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010987b:	89 d0                	mov    %edx,%eax
f010987d:	01 c0                	add    %eax,%eax
f010987f:	01 d0                	add    %edx,%eax
f0109881:	c1 e0 03             	shl    $0x3,%eax
f0109884:	01 c8                	add    %ecx,%eax
f0109886:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010988c:	8b 92 d8 05 00 00    	mov    0x5d8(%edx),%edx
f0109892:	89 50 10             	mov    %edx,0x10(%eax)
f0109895:	8b 40 10             	mov    0x10(%eax),%eax
f0109898:	85 c0                	test   %eax,%eax
f010989a:	74 31                	je     f01098cd <env_create+0xa6a>
f010989c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098a2:	8b 90 d8 05 00 00    	mov    0x5d8(%eax),%edx
f01098a8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098ae:	8b 58 78             	mov    0x78(%eax),%ebx
f01098b1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098b7:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01098bd:	89 c8                	mov    %ecx,%eax
f01098bf:	01 c0                	add    %eax,%eax
f01098c1:	01 c8                	add    %ecx,%eax
f01098c3:	c1 e0 03             	shl    $0x3,%eax
f01098c6:	01 d8                	add    %ebx,%eax
f01098c8:	89 42 14             	mov    %eax,0x14(%edx)
f01098cb:	eb 2c                	jmp    f01098f9 <env_create+0xa96>
f01098cd:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01098d3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098d9:	8b 58 78             	mov    0x78(%eax),%ebx
f01098dc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098e2:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01098e8:	89 c8                	mov    %ecx,%eax
f01098ea:	01 c0                	add    %eax,%eax
f01098ec:	01 c8                	add    %ecx,%eax
f01098ee:	c1 e0 03             	shl    $0x3,%eax
f01098f1:	01 d8                	add    %ebx,%eax
f01098f3:	89 82 dc 05 00 00    	mov    %eax,0x5dc(%edx)
f01098f9:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01098ff:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109905:	8b 58 78             	mov    0x78(%eax),%ebx
f0109908:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010990e:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109914:	89 c8                	mov    %ecx,%eax
f0109916:	01 c0                	add    %eax,%eax
f0109918:	01 c8                	add    %ecx,%eax
f010991a:	c1 e0 03             	shl    $0x3,%eax
f010991d:	01 d8                	add    %ebx,%eax
f010991f:	89 82 d8 05 00 00    	mov    %eax,0x5d8(%edx)
f0109925:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010992b:	8b 48 78             	mov    0x78(%eax),%ecx
f010992e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109934:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010993a:	89 d0                	mov    %edx,%eax
f010993c:	01 c0                	add    %eax,%eax
f010993e:	01 d0                	add    %edx,%eax
f0109940:	c1 e0 03             	shl    $0x3,%eax
f0109943:	01 c8                	add    %ecx,%eax
f0109945:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010994c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109952:	8b 90 e4 05 00 00    	mov    0x5e4(%eax),%edx
f0109958:	42                   	inc    %edx
f0109959:	89 90 e4 05 00 00    	mov    %edx,0x5e4(%eax)
				}
			}
			e->page_last_WS_index ++;
f010995f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109965:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010996b:	42                   	inc    %edx
f010996c:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
			e->page_last_WS_index %= (e->page_WS_max_size);
f0109972:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109978:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010997e:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f0109984:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010998a:	8b 5a 74             	mov    0x74(%edx),%ebx
f010998d:	ba 00 00 00 00       	mov    $0x0,%edx
f0109992:	f7 f3                	div    %ebx
f0109994:	89 d0                	mov    %edx,%eax
f0109996:	89 81 2c 05 00 00    	mov    %eax,0x52c(%ecx)

			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f010999c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099a2:	83 ec 04             	sub    $0x4,%esp
f01099a5:	6a 01                	push   $0x1
f01099a7:	ff 75 c0             	pushl  -0x40(%ebp)
f01099aa:	50                   	push   %eax
f01099ab:	e8 34 9c ff ff       	call   f01035e4 <pf_add_empty_env_page>
f01099b0:	83 c4 10             	add    $0x10,%esp
f01099b3:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f01099b9:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f01099c0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01099c3:	3b 85 58 ff ff ff    	cmp    -0xa8(%ebp),%eax
f01099c9:	0f 83 9e fa ff ff    	jae    f010946d <env_create+0x60a>

	}

	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01099cf:	83 ec 0c             	sub    $0xc,%esp
f01099d2:	6a 02                	push   $0x2
f01099d4:	e8 6a 43 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f01099d9:	83 c4 10             	add    $0x10,%esp
f01099dc:	85 c0                	test   %eax,%eax
f01099de:	74 72                	je     f0109a52 <env_create+0xbef>
	{
		struct WorkingSetElement * elm = NULL;
f01099e0:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
		LIST_FOREACH(elm, &(e->SecondList))
f01099e7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099ed:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f01099f3:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01099f6:	eb 2b                	jmp    f0109a23 <env_create+0xbc0>
		{
			//set it's PRESENT bit to 0
			pt_set_page_permissions(e->env_page_directory, elm->virtual_address, 0, PERM_PRESENT);
f01099f8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01099fb:	8b 10                	mov    (%eax),%edx
f01099fd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a03:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109a06:	6a 01                	push   $0x1
f0109a08:	6a 00                	push   $0x0
f0109a0a:	52                   	push   %edx
f0109a0b:	50                   	push   %eax
f0109a0c:	e8 9c e1 ff ff       	call   f0107bad <pt_set_page_permissions>
f0109a11:	83 c4 10             	add    $0x10,%esp
	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		struct WorkingSetElement * elm = NULL;
		LIST_FOREACH(elm, &(e->SecondList))
f0109a14:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a1a:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0109a20:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0109a23:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a29:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0109a2d:	74 08                	je     f0109a37 <env_create+0xbd4>
f0109a2f:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0109a32:	8b 52 10             	mov    0x10(%edx),%edx
f0109a35:	eb 05                	jmp    f0109a3c <env_create+0xbd9>
f0109a37:	ba 00 00 00 00       	mov    $0x0,%edx
f0109a3c:	89 90 e0 05 00 00    	mov    %edx,0x5e0(%eax)
f0109a42:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0109a48:	85 c0                	test   %eax,%eax
f0109a4a:	75 ac                	jne    f01099f8 <env_create+0xb95>
f0109a4c:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0109a50:	75 a6                	jne    f01099f8 <env_create+0xb95>
f0109a52:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0109a55:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0109a58:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0109a5b:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f0109a5e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
}
f0109a64:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0109a67:	5b                   	pop    %ebx
f0109a68:	5e                   	pop    %esi
f0109a69:	5f                   	pop    %edi
f0109a6a:	5d                   	pop    %ebp
f0109a6b:	c3                   	ret    

f0109a6c <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f0109a6c:	55                   	push   %ebp
f0109a6d:	89 e5                	mov    %esp,%ebp
f0109a6f:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f0109a72:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f0109a77:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109a7a:	74 25                	je     f0109aa1 <env_run+0x35>
	{
		curenv = e ;
f0109a7c:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a7f:	a3 f4 53 87 f0       	mov    %eax,0xf08753f4
		curenv->env_runs++ ;
f0109a84:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f0109a89:	8b 50 58             	mov    0x58(%eax),%edx
f0109a8c:	42                   	inc    %edx
f0109a8d:	89 50 58             	mov    %edx,0x58(%eax)
		lcr3(curenv->env_cr3) ;
f0109a90:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f0109a95:	8b 40 60             	mov    0x60(%eax),%eax
f0109a98:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109a9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a9e:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f0109aa1:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f0109aa6:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f0109aad:	e8 0d a7 ff ff       	call   f01041bf <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f0109ab2:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f0109ab7:	83 ec 0c             	sub    $0xc,%esp
f0109aba:	50                   	push   %eax
f0109abb:	e8 0f 01 00 00       	call   f0109bcf <env_pop_tf>

f0109ac0 <env_free>:
// 3) FREE ENV FROM THE SYSTEM:
//===============================
// Frees environment "e" and all memory it uses.
//
void env_free(struct Env *e)
{
f0109ac0:	55                   	push   %ebp
f0109ac1:	89 e5                	mov    %esp,%ebp
f0109ac3:	83 ec 08             	sub    $0x8,%esp
	/********DON'T CHANGE THIS LINE***********/
#if USE_KHEAP
	unshare_pws_at_user_space(e);
f0109ac6:	83 ec 0c             	sub    $0xc,%esp
f0109ac9:	ff 75 08             	pushl  0x8(%ebp)
f0109acc:	e8 3e 11 00 00       	call   f010ac0f <unshare_pws_at_user_space>
f0109ad1:	83 c4 10             	add    $0x10,%esp
#endif
	/*****************************************/
	//TODO: [PROJECT MS3 - BONUS] [EXIT ENV] env_free
	// your code is here, remove the panic and write your code
	panic("env_free() is not implemented yet...!!");
f0109ad4:	83 ec 04             	sub    $0x4,%esp
f0109ad7:	68 00 64 13 f0       	push   $0xf0136400
f0109adc:	68 9d 01 00 00       	push   $0x19d
f0109ae1:	68 a1 63 13 f0       	push   $0xf01363a1
f0109ae6:	e8 1a 67 ff ff       	call   f0100205 <_panic>

f0109aeb <env_exit>:
//============================
// 4) PLACE ENV IN EXIT QUEUE:
//============================
/*2015*///Just add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f0109aeb:	55                   	push   %ebp
f0109aec:	89 e5                	mov    %esp,%ebp
f0109aee:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f0109af1:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f0109af6:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109af9:	83 ec 0c             	sub    $0xc,%esp
f0109afc:	50                   	push   %eax
f0109afd:	e8 a0 b7 ff ff       	call   f01052a2 <sched_exit_env>
f0109b02:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f0109b05:	e8 1c ac ff ff       	call   f0104726 <fos_scheduler>

f0109b0a <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f0109b0a:	55                   	push   %ebp
f0109b0b:	89 e5                	mov    %esp,%ebp
f0109b0d:	53                   	push   %ebx
f0109b0e:	83 ec 14             	sub    $0x14,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f0109b11:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109b15:	75 15                	jne    f0109b2c <envid2env+0x22>
		*env_store = curenv;
f0109b17:	8b 15 f4 53 87 f0    	mov    0xf08753f4,%edx
f0109b1d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109b20:	89 10                	mov    %edx,(%eax)
		return 0;
f0109b22:	b8 00 00 00 00       	mov    $0x0,%eax
f0109b27:	e9 9e 00 00 00       	jmp    f0109bca <envid2env+0xc0>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f0109b2c:	8b 1d f0 53 87 f0    	mov    0xf08753f0,%ebx
f0109b32:	83 ec 0c             	sub    $0xc,%esp
f0109b35:	68 b1 02 00 00       	push   $0x2b1
f0109b3a:	e8 ff 60 02 00       	call   f012fc3e <nearest_pow2_ceil>
f0109b3f:	83 c4 10             	add    $0x10,%esp
f0109b42:	8d 50 ff             	lea    -0x1(%eax),%edx
f0109b45:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b48:	21 c2                	and    %eax,%edx
f0109b4a:	89 d0                	mov    %edx,%eax
f0109b4c:	c1 e0 03             	shl    $0x3,%eax
f0109b4f:	01 d0                	add    %edx,%eax
f0109b51:	01 c0                	add    %eax,%eax
f0109b53:	01 d0                	add    %edx,%eax
f0109b55:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109b5c:	01 d0                	add    %edx,%eax
f0109b5e:	c1 e0 04             	shl    $0x4,%eax
f0109b61:	01 d8                	add    %ebx,%eax
f0109b63:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f0109b66:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109b69:	8b 40 54             	mov    0x54(%eax),%eax
f0109b6c:	85 c0                	test   %eax,%eax
f0109b6e:	74 0b                	je     f0109b7b <envid2env+0x71>
f0109b70:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109b73:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109b76:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109b79:	74 10                	je     f0109b8b <envid2env+0x81>
		*env_store = 0;
f0109b7b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109b7e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109b84:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0109b89:	eb 3f                	jmp    f0109bca <envid2env+0xc0>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f0109b8b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0109b8f:	74 2c                	je     f0109bbd <envid2env+0xb3>
f0109b91:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f0109b96:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0109b99:	74 22                	je     f0109bbd <envid2env+0xb3>
f0109b9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109b9e:	8b 50 50             	mov    0x50(%eax),%edx
f0109ba1:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f0109ba6:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109ba9:	39 c2                	cmp    %eax,%edx
f0109bab:	74 10                	je     f0109bbd <envid2env+0xb3>
		*env_store = 0;
f0109bad:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109bb0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109bb6:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0109bbb:	eb 0d                	jmp    f0109bca <envid2env+0xc0>
	}

	*env_store = e;
f0109bbd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109bc0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109bc3:	89 10                	mov    %edx,(%eax)
	return 0;
f0109bc5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109bca:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109bcd:	c9                   	leave  
f0109bce:	c3                   	ret    

f0109bcf <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f0109bcf:	55                   	push   %ebp
f0109bd0:	89 e5                	mov    %esp,%ebp
f0109bd2:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f0109bd5:	8b 65 08             	mov    0x8(%ebp),%esp
f0109bd8:	61                   	popa   
f0109bd9:	07                   	pop    %es
f0109bda:	1f                   	pop    %ds
f0109bdb:	83 c4 08             	add    $0x8,%esp
f0109bde:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f0109bdf:	83 ec 04             	sub    $0x4,%esp
f0109be2:	68 27 64 13 f0       	push   $0xf0136427
f0109be7:	68 fd 01 00 00       	push   $0x1fd
f0109bec:	68 a1 63 13 f0       	push   $0xf01363a1
f0109bf1:	e8 0f 66 ff ff       	call   f0100205 <_panic>

f0109bf6 <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f0109bf6:	55                   	push   %ebp
f0109bf7:	89 e5                	mov    %esp,%ebp
f0109bf9:	53                   	push   %ebx
f0109bfa:	83 ec 14             	sub    $0x14,%esp
	int iEnv = NENV-1;
f0109bfd:	c7 45 f4 b0 02 00 00 	movl   $0x2b0,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f0109c04:	e9 73 01 00 00       	jmp    f0109d7c <env_init+0x186>
	{
		envs[iEnv].env_status = ENV_FREE;
f0109c09:	8b 0d f0 53 87 f0    	mov    0xf08753f0,%ecx
f0109c0f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109c12:	89 d0                	mov    %edx,%eax
f0109c14:	c1 e0 03             	shl    $0x3,%eax
f0109c17:	01 d0                	add    %edx,%eax
f0109c19:	01 c0                	add    %eax,%eax
f0109c1b:	01 d0                	add    %edx,%eax
f0109c1d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109c24:	01 d0                	add    %edx,%eax
f0109c26:	c1 e0 04             	shl    $0x4,%eax
f0109c29:	01 c8                	add    %ecx,%eax
f0109c2b:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f0109c32:	8b 0d f0 53 87 f0    	mov    0xf08753f0,%ecx
f0109c38:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109c3b:	89 d0                	mov    %edx,%eax
f0109c3d:	c1 e0 03             	shl    $0x3,%eax
f0109c40:	01 d0                	add    %edx,%eax
f0109c42:	01 c0                	add    %eax,%eax
f0109c44:	01 d0                	add    %edx,%eax
f0109c46:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109c4d:	01 d0                	add    %edx,%eax
f0109c4f:	c1 e0 04             	shl    $0x4,%eax
f0109c52:	01 c8                	add    %ecx,%eax
f0109c54:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f0109c5b:	8b 0d f0 53 87 f0    	mov    0xf08753f0,%ecx
f0109c61:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109c64:	89 d0                	mov    %edx,%eax
f0109c66:	c1 e0 03             	shl    $0x3,%eax
f0109c69:	01 d0                	add    %edx,%eax
f0109c6b:	01 c0                	add    %eax,%eax
f0109c6d:	01 d0                	add    %edx,%eax
f0109c6f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109c76:	01 d0                	add    %edx,%eax
f0109c78:	c1 e0 04             	shl    $0x4,%eax
f0109c7b:	01 c8                	add    %ecx,%eax
f0109c7d:	85 c0                	test   %eax,%eax
f0109c7f:	75 17                	jne    f0109c98 <env_init+0xa2>
f0109c81:	83 ec 04             	sub    $0x4,%esp
f0109c84:	68 dc 63 13 f0       	push   $0xf01363dc
f0109c89:	68 19 02 00 00       	push   $0x219
f0109c8e:	68 a1 63 13 f0       	push   $0xf01363a1
f0109c93:	e8 6d 65 ff ff       	call   f0100205 <_panic>
f0109c98:	8b 0d f0 53 87 f0    	mov    0xf08753f0,%ecx
f0109c9e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109ca1:	89 d0                	mov    %edx,%eax
f0109ca3:	c1 e0 03             	shl    $0x3,%eax
f0109ca6:	01 d0                	add    %edx,%eax
f0109ca8:	01 c0                	add    %eax,%eax
f0109caa:	01 d0                	add    %edx,%eax
f0109cac:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109cb3:	01 d0                	add    %edx,%eax
f0109cb5:	c1 e0 04             	shl    $0x4,%eax
f0109cb8:	01 c8                	add    %ecx,%eax
f0109cba:	8b 15 f8 53 87 f0    	mov    0xf08753f8,%edx
f0109cc0:	89 50 44             	mov    %edx,0x44(%eax)
f0109cc3:	8b 40 44             	mov    0x44(%eax),%eax
f0109cc6:	85 c0                	test   %eax,%eax
f0109cc8:	74 2d                	je     f0109cf7 <env_init+0x101>
f0109cca:	8b 0d f8 53 87 f0    	mov    0xf08753f8,%ecx
f0109cd0:	8b 1d f0 53 87 f0    	mov    0xf08753f0,%ebx
f0109cd6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109cd9:	89 d0                	mov    %edx,%eax
f0109cdb:	c1 e0 03             	shl    $0x3,%eax
f0109cde:	01 d0                	add    %edx,%eax
f0109ce0:	01 c0                	add    %eax,%eax
f0109ce2:	01 d0                	add    %edx,%eax
f0109ce4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109ceb:	01 d0                	add    %edx,%eax
f0109ced:	c1 e0 04             	shl    $0x4,%eax
f0109cf0:	01 d8                	add    %ebx,%eax
f0109cf2:	89 41 48             	mov    %eax,0x48(%ecx)
f0109cf5:	eb 27                	jmp    f0109d1e <env_init+0x128>
f0109cf7:	8b 0d f0 53 87 f0    	mov    0xf08753f0,%ecx
f0109cfd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109d00:	89 d0                	mov    %edx,%eax
f0109d02:	c1 e0 03             	shl    $0x3,%eax
f0109d05:	01 d0                	add    %edx,%eax
f0109d07:	01 c0                	add    %eax,%eax
f0109d09:	01 d0                	add    %edx,%eax
f0109d0b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109d12:	01 d0                	add    %edx,%eax
f0109d14:	c1 e0 04             	shl    $0x4,%eax
f0109d17:	01 c8                	add    %ecx,%eax
f0109d19:	a3 fc 53 87 f0       	mov    %eax,0xf08753fc
f0109d1e:	8b 0d f0 53 87 f0    	mov    0xf08753f0,%ecx
f0109d24:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109d27:	89 d0                	mov    %edx,%eax
f0109d29:	c1 e0 03             	shl    $0x3,%eax
f0109d2c:	01 d0                	add    %edx,%eax
f0109d2e:	01 c0                	add    %eax,%eax
f0109d30:	01 d0                	add    %edx,%eax
f0109d32:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109d39:	01 d0                	add    %edx,%eax
f0109d3b:	c1 e0 04             	shl    $0x4,%eax
f0109d3e:	01 c8                	add    %ecx,%eax
f0109d40:	a3 f8 53 87 f0       	mov    %eax,0xf08753f8
f0109d45:	8b 0d f0 53 87 f0    	mov    0xf08753f0,%ecx
f0109d4b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109d4e:	89 d0                	mov    %edx,%eax
f0109d50:	c1 e0 03             	shl    $0x3,%eax
f0109d53:	01 d0                	add    %edx,%eax
f0109d55:	01 c0                	add    %eax,%eax
f0109d57:	01 d0                	add    %edx,%eax
f0109d59:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109d60:	01 d0                	add    %edx,%eax
f0109d62:	c1 e0 04             	shl    $0x4,%eax
f0109d65:	01 c8                	add    %ecx,%eax
f0109d67:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109d6e:	a1 04 54 87 f0       	mov    0xf0875404,%eax
f0109d73:	40                   	inc    %eax
f0109d74:	a3 04 54 87 f0       	mov    %eax,0xf0875404
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f0109d79:	ff 4d f4             	decl   -0xc(%ebp)
f0109d7c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109d80:	0f 89 83 fe ff ff    	jns    f0109c09 <env_init+0x13>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f0109d86:	90                   	nop
f0109d87:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109d8a:	c9                   	leave  
f0109d8b:	c3                   	ret    

f0109d8c <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f0109d8c:	55                   	push   %ebp
f0109d8d:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f0109d8f:	8b 15 f8 53 87 f0    	mov    0xf08753f8,%edx
f0109d95:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d98:	89 10                	mov    %edx,(%eax)
f0109d9a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d9d:	8b 00                	mov    (%eax),%eax
f0109d9f:	85 c0                	test   %eax,%eax
f0109da1:	75 07                	jne    f0109daa <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f0109da3:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f0109da8:	eb 11                	jmp    f0109dbb <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f0109daa:	8b 45 08             	mov    0x8(%ebp),%eax
f0109dad:	8b 00                	mov    (%eax),%eax
f0109daf:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f0109db6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109dbb:	5d                   	pop    %ebp
f0109dbc:	c3                   	ret    

f0109dbd <free_environment>:
//===============================
// 3) FREE ENV STRUCT:
//===============================
// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f0109dbd:	55                   	push   %ebp
f0109dbe:	89 e5                	mov    %esp,%ebp
f0109dc0:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f0109dc3:	83 ec 04             	sub    $0x4,%esp
f0109dc6:	68 f0 05 00 00       	push   $0x5f0
f0109dcb:	6a 00                	push   $0x0
f0109dcd:	ff 75 08             	pushl  0x8(%ebp)
f0109dd0:	e8 e5 72 02 00       	call   f01310ba <memset>
f0109dd5:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f0109dd8:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ddb:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f0109de2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109de6:	75 17                	jne    f0109dff <free_environment+0x42>
f0109de8:	83 ec 04             	sub    $0x4,%esp
f0109deb:	68 dc 63 13 f0       	push   $0xf01363dc
f0109df0:	68 36 02 00 00       	push   $0x236
f0109df5:	68 a1 63 13 f0       	push   $0xf01363a1
f0109dfa:	e8 06 64 ff ff       	call   f0100205 <_panic>
f0109dff:	8b 15 f8 53 87 f0    	mov    0xf08753f8,%edx
f0109e05:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e08:	89 50 44             	mov    %edx,0x44(%eax)
f0109e0b:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e0e:	8b 40 44             	mov    0x44(%eax),%eax
f0109e11:	85 c0                	test   %eax,%eax
f0109e13:	74 0d                	je     f0109e22 <free_environment+0x65>
f0109e15:	a1 f8 53 87 f0       	mov    0xf08753f8,%eax
f0109e1a:	8b 55 08             	mov    0x8(%ebp),%edx
f0109e1d:	89 50 48             	mov    %edx,0x48(%eax)
f0109e20:	eb 08                	jmp    f0109e2a <free_environment+0x6d>
f0109e22:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e25:	a3 fc 53 87 f0       	mov    %eax,0xf08753fc
f0109e2a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e2d:	a3 f8 53 87 f0       	mov    %eax,0xf08753f8
f0109e32:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e35:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109e3c:	a1 04 54 87 f0       	mov    0xf0875404,%eax
f0109e41:	40                   	inc    %eax
f0109e42:	a3 04 54 87 f0       	mov    %eax,0xf0875404
}
f0109e47:	90                   	nop
f0109e48:	c9                   	leave  
f0109e49:	c3                   	ret    

f0109e4a <create_user_page_WS>:

//===============================================
// 4) DYNAMICALLY ALLOCATE SPACE FOR WORKING SET:
//===============================================
void * create_user_page_WS(struct Env * e, unsigned int numOfElements)
{
f0109e4a:	55                   	push   %ebp
f0109e4b:	89 e5                	mov    %esp,%ebp
f0109e4d:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS3] [PROGRAM LOAD] create_user_page_WS()
	// Write your code here, remove the panic and write your code
	//panic("create_user_page_WS() is not implemented yet...!!");
	uint32 nBytes = sizeof(struct WorkingSetElement) * numOfElements;
f0109e50:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109e53:	89 d0                	mov    %edx,%eax
f0109e55:	01 c0                	add    %eax,%eax
f0109e57:	01 d0                	add    %edx,%eax
f0109e59:	c1 e0 03             	shl    $0x3,%eax
f0109e5c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct WorkingSetElement* ptr_page_WS = kmalloc(nBytes);
f0109e5f:	83 ec 0c             	sub    $0xc,%esp
f0109e62:	ff 75 f4             	pushl  -0xc(%ebp)
f0109e65:	e8 1b da ff ff       	call   f0107885 <kmalloc>
f0109e6a:	83 c4 10             	add    $0x10,%esp
f0109e6d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(ptr_page_WS == NULL)
f0109e70:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0109e74:	75 17                	jne    f0109e8d <create_user_page_WS+0x43>
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0109e76:	83 ec 04             	sub    $0x4,%esp
f0109e79:	68 33 64 13 f0       	push   $0xf0136433
f0109e7e:	68 44 02 00 00       	push   $0x244
f0109e83:	68 a1 63 13 f0       	push   $0xf01363a1
f0109e88:	e8 78 63 ff ff       	call   f0100205 <_panic>
	return ptr_page_WS;
f0109e8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
	//Use kmalloc() to allocate a new space for a working set with numOfElements elements
}
f0109e90:	c9                   	leave  
f0109e91:	c3                   	ret    

f0109e92 <create_user_directory>:

//==================================================
// 5) DYNAMICALLY ALLOCATE SPACE FOR USER DIRECTORY:
//==================================================
void * create_user_directory()
{
f0109e92:	55                   	push   %ebp
f0109e93:	89 e5                	mov    %esp,%ebp
f0109e95:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS3] [PROGRAM LOAD] create_user_directory()
	// Write your code here, remove the panic and write your code
	//panic("create_user_directory() is not implemented yet...!!");
	uint32* ptr_user_page_directory = kmalloc(PAGE_SIZE);
f0109e98:	83 ec 0c             	sub    $0xc,%esp
f0109e9b:	68 00 10 00 00       	push   $0x1000
f0109ea0:	e8 e0 d9 ff ff       	call   f0107885 <kmalloc>
f0109ea5:	83 c4 10             	add    $0x10,%esp
f0109ea8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_user_page_directory == NULL)
f0109eab:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109eaf:	75 17                	jne    f0109ec8 <create_user_directory+0x36>
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0109eb1:	83 ec 04             	sub    $0x4,%esp
f0109eb4:	68 33 64 13 f0       	push   $0xf0136433
f0109eb9:	68 53 02 00 00       	push   $0x253
f0109ebe:	68 a1 63 13 f0       	push   $0xf01363a1
f0109ec3:	e8 3d 63 ff ff       	call   f0100205 <_panic>
	return ptr_user_page_directory;
f0109ec8:	8b 45 f4             	mov    -0xc(%ebp),%eax
	//Use kmalloc() to allocate a new directory
}
f0109ecb:	c9                   	leave  
f0109ecc:	c3                   	ret    

f0109ecd <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f0109ecd:	55                   	push   %ebp
f0109ece:	89 e5                	mov    %esp,%ebp
f0109ed0:	53                   	push   %ebx
f0109ed1:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f0109ed4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109ed7:	8b 40 0c             	mov    0xc(%eax),%eax
f0109eda:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f0109edd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109ee0:	8b 40 08             	mov    0x8(%eax),%eax
f0109ee3:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f0109ee6:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0109eed:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0109ef0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0109ef3:	01 c2                	add    %eax,%edx
f0109ef5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0109ef8:	01 d0                	add    %edx,%eax
f0109efa:	48                   	dec    %eax
f0109efb:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0109efe:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109f01:	ba 00 00 00 00       	mov    $0x0,%edx
f0109f06:	f7 75 dc             	divl   -0x24(%ebp)
f0109f09:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109f0c:	29 d0                	sub    %edx,%eax
f0109f0e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f0109f11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109f14:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0109f17:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109f1a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109f1f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f0109f22:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo *p = NULL;
f0109f29:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f0109f30:	8b 45 10             	mov    0x10(%ebp),%eax
f0109f33:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f0109f39:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f0109f40:	0f 85 c8 05 00 00    	jne    f010a50e <program_segment_alloc_map_copy_workingset+0x641>
f0109f46:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f49:	05 5c 05 00 00       	add    $0x55c,%eax
f0109f4e:	83 ec 08             	sub    $0x8,%esp
f0109f51:	68 50 64 13 f0       	push   $0xf0136450
f0109f56:	50                   	push   %eax
f0109f57:	e8 7c 70 02 00       	call   f0130fd8 <strcmp>
f0109f5c:	83 c4 10             	add    $0x10,%esp
f0109f5f:	85 c0                	test   %eax,%eax
f0109f61:	0f 84 a7 05 00 00    	je     f010a50e <program_segment_alloc_map_copy_workingset+0x641>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f0109f67:	8b 45 14             	mov    0x14(%ebp),%eax
f0109f6a:	83 f8 06             	cmp    $0x6,%eax
f0109f6d:	76 05                	jbe    f0109f74 <program_segment_alloc_map_copy_workingset+0xa7>
f0109f6f:	b8 06 00 00 00       	mov    $0x6,%eax
f0109f74:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f0109f77:	e9 92 05 00 00       	jmp    f010a50e <program_segment_alloc_map_copy_workingset+0x641>
	{
		// Allocate a page
		allocate_frame(&p) ;
f0109f7c:	83 ec 0c             	sub    $0xc,%esp
f0109f7f:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0109f82:	50                   	push   %eax
f0109f83:	e8 6a c9 ff ff       	call   f01068f2 <allocate_frame>
f0109f88:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, iVA, PERM_USER | PERM_WRITEABLE);
f0109f8b:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0109f8e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f91:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109f94:	6a 06                	push   $0x6
f0109f96:	ff 75 f4             	pushl  -0xc(%ebp)
f0109f99:	52                   	push   %edx
f0109f9a:	50                   	push   %eax
f0109f9b:	e8 5d cf ff ff       	call   f0106efd <loadtime_map_frame>
f0109fa0:	83 c4 10             	add    $0x10,%esp
		LOG_STRING("segment page mapped");

		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));

		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f0109fa3:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fa6:	8b 48 78             	mov    0x78(%eax),%ecx
f0109fa9:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fac:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109fb2:	89 d0                	mov    %edx,%eax
f0109fb4:	01 c0                	add    %eax,%eax
f0109fb6:	01 d0                	add    %edx,%eax
f0109fb8:	c1 e0 03             	shl    $0x3,%eax
f0109fbb:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0109fbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109fc1:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f0109fc3:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fc6:	8b 48 78             	mov    0x78(%eax),%ecx
f0109fc9:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fcc:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109fd2:	89 d0                	mov    %edx,%eax
f0109fd4:	01 c0                	add    %eax,%eax
f0109fd6:	01 d0                	add    %edx,%eax
f0109fd8:	c1 e0 03             	shl    $0x3,%eax
f0109fdb:	01 c8                	add    %ecx,%eax
f0109fdd:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f0109fe1:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fe4:	8b 48 78             	mov    0x78(%eax),%ecx
f0109fe7:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fea:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109ff0:	89 d0                	mov    %edx,%eax
f0109ff2:	01 c0                	add    %eax,%eax
f0109ff4:	01 d0                	add    %edx,%eax
f0109ff6:	c1 e0 03             	shl    $0x3,%eax
f0109ff9:	01 c8                	add    %ecx,%eax
f0109ffb:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

		//2020
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a002:	83 ec 0c             	sub    $0xc,%esp
f010a005:	6a 02                	push   $0x2
f010a007:	e8 37 3d 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f010a00c:	83 c4 10             	add    $0x10,%esp
f010a00f:	85 c0                	test   %eax,%eax
f010a011:	0f 84 c8 03 00 00    	je     f010a3df <program_segment_alloc_map_copy_workingset+0x512>
		{
			LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a017:	8b 45 08             	mov    0x8(%ebp),%eax
f010a01a:	8b 48 78             	mov    0x78(%eax),%ecx
f010a01d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a020:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a026:	89 d0                	mov    %edx,%eax
f010a028:	01 c0                	add    %eax,%eax
f010a02a:	01 d0                	add    %edx,%eax
f010a02c:	c1 e0 03             	shl    $0x3,%eax
f010a02f:	01 c8                	add    %ecx,%eax
f010a031:	85 c0                	test   %eax,%eax
f010a033:	75 17                	jne    f010a04c <program_segment_alloc_map_copy_workingset+0x17f>
f010a035:	83 ec 04             	sub    $0x4,%esp
f010a038:	68 be 63 13 f0       	push   $0xf01363be
f010a03d:	68 85 02 00 00       	push   $0x285
f010a042:	68 a1 63 13 f0       	push   $0xf01363a1
f010a047:	e8 b9 61 ff ff       	call   f0100205 <_panic>
f010a04c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a04f:	8b 48 78             	mov    0x78(%eax),%ecx
f010a052:	8b 45 08             	mov    0x8(%ebp),%eax
f010a055:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a05b:	89 d0                	mov    %edx,%eax
f010a05d:	01 c0                	add    %eax,%eax
f010a05f:	01 d0                	add    %edx,%eax
f010a061:	c1 e0 03             	shl    $0x3,%eax
f010a064:	01 c8                	add    %ecx,%eax
f010a066:	8b 40 10             	mov    0x10(%eax),%eax
f010a069:	85 c0                	test   %eax,%eax
f010a06b:	74 3f                	je     f010a0ac <program_segment_alloc_map_copy_workingset+0x1df>
f010a06d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a070:	8b 48 78             	mov    0x78(%eax),%ecx
f010a073:	8b 45 08             	mov    0x8(%ebp),%eax
f010a076:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a07c:	89 d0                	mov    %edx,%eax
f010a07e:	01 c0                	add    %eax,%eax
f010a080:	01 d0                	add    %edx,%eax
f010a082:	c1 e0 03             	shl    $0x3,%eax
f010a085:	01 c8                	add    %ecx,%eax
f010a087:	8b 50 10             	mov    0x10(%eax),%edx
f010a08a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a08d:	8b 58 78             	mov    0x78(%eax),%ebx
f010a090:	8b 45 08             	mov    0x8(%ebp),%eax
f010a093:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a099:	89 c8                	mov    %ecx,%eax
f010a09b:	01 c0                	add    %eax,%eax
f010a09d:	01 c8                	add    %ecx,%eax
f010a09f:	c1 e0 03             	shl    $0x3,%eax
f010a0a2:	01 d8                	add    %ebx,%eax
f010a0a4:	8b 40 14             	mov    0x14(%eax),%eax
f010a0a7:	89 42 14             	mov    %eax,0x14(%edx)
f010a0aa:	eb 26                	jmp    f010a0d2 <program_segment_alloc_map_copy_workingset+0x205>
f010a0ac:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0af:	8b 48 78             	mov    0x78(%eax),%ecx
f010a0b2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0b5:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a0bb:	89 d0                	mov    %edx,%eax
f010a0bd:	01 c0                	add    %eax,%eax
f010a0bf:	01 d0                	add    %edx,%eax
f010a0c1:	c1 e0 03             	shl    $0x3,%eax
f010a0c4:	01 c8                	add    %ecx,%eax
f010a0c6:	8b 50 14             	mov    0x14(%eax),%edx
f010a0c9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0cc:	89 90 bc 05 00 00    	mov    %edx,0x5bc(%eax)
f010a0d2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0d5:	8b 48 78             	mov    0x78(%eax),%ecx
f010a0d8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0db:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a0e1:	89 d0                	mov    %edx,%eax
f010a0e3:	01 c0                	add    %eax,%eax
f010a0e5:	01 d0                	add    %edx,%eax
f010a0e7:	c1 e0 03             	shl    $0x3,%eax
f010a0ea:	01 c8                	add    %ecx,%eax
f010a0ec:	8b 40 14             	mov    0x14(%eax),%eax
f010a0ef:	85 c0                	test   %eax,%eax
f010a0f1:	74 3f                	je     f010a132 <program_segment_alloc_map_copy_workingset+0x265>
f010a0f3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0f6:	8b 48 78             	mov    0x78(%eax),%ecx
f010a0f9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0fc:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a102:	89 d0                	mov    %edx,%eax
f010a104:	01 c0                	add    %eax,%eax
f010a106:	01 d0                	add    %edx,%eax
f010a108:	c1 e0 03             	shl    $0x3,%eax
f010a10b:	01 c8                	add    %ecx,%eax
f010a10d:	8b 50 14             	mov    0x14(%eax),%edx
f010a110:	8b 45 08             	mov    0x8(%ebp),%eax
f010a113:	8b 58 78             	mov    0x78(%eax),%ebx
f010a116:	8b 45 08             	mov    0x8(%ebp),%eax
f010a119:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a11f:	89 c8                	mov    %ecx,%eax
f010a121:	01 c0                	add    %eax,%eax
f010a123:	01 c8                	add    %ecx,%eax
f010a125:	c1 e0 03             	shl    $0x3,%eax
f010a128:	01 d8                	add    %ebx,%eax
f010a12a:	8b 40 10             	mov    0x10(%eax),%eax
f010a12d:	89 42 10             	mov    %eax,0x10(%edx)
f010a130:	eb 26                	jmp    f010a158 <program_segment_alloc_map_copy_workingset+0x28b>
f010a132:	8b 45 08             	mov    0x8(%ebp),%eax
f010a135:	8b 48 78             	mov    0x78(%eax),%ecx
f010a138:	8b 45 08             	mov    0x8(%ebp),%eax
f010a13b:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a141:	89 d0                	mov    %edx,%eax
f010a143:	01 c0                	add    %eax,%eax
f010a145:	01 d0                	add    %edx,%eax
f010a147:	c1 e0 03             	shl    $0x3,%eax
f010a14a:	01 c8                	add    %ecx,%eax
f010a14c:	8b 50 10             	mov    0x10(%eax),%edx
f010a14f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a152:	89 90 b8 05 00 00    	mov    %edx,0x5b8(%eax)
f010a158:	8b 45 08             	mov    0x8(%ebp),%eax
f010a15b:	8b 48 78             	mov    0x78(%eax),%ecx
f010a15e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a161:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a167:	89 d0                	mov    %edx,%eax
f010a169:	01 c0                	add    %eax,%eax
f010a16b:	01 d0                	add    %edx,%eax
f010a16d:	c1 e0 03             	shl    $0x3,%eax
f010a170:	01 c8                	add    %ecx,%eax
f010a172:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f010a179:	8b 45 08             	mov    0x8(%ebp),%eax
f010a17c:	8b 48 78             	mov    0x78(%eax),%ecx
f010a17f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a182:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a188:	89 d0                	mov    %edx,%eax
f010a18a:	01 c0                	add    %eax,%eax
f010a18c:	01 d0                	add    %edx,%eax
f010a18e:	c1 e0 03             	shl    $0x3,%eax
f010a191:	01 c8                	add    %ecx,%eax
f010a193:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a19a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a19d:	8b 80 c4 05 00 00    	mov    0x5c4(%eax),%eax
f010a1a3:	8d 50 ff             	lea    -0x1(%eax),%edx
f010a1a6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1a9:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f010a1af:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1b2:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f010a1b8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1bb:	8b 80 e8 05 00 00    	mov    0x5e8(%eax),%eax
f010a1c1:	48                   	dec    %eax
f010a1c2:	39 c2                	cmp    %eax,%edx
f010a1c4:	0f 83 0d 01 00 00    	jae    f010a2d7 <program_segment_alloc_map_copy_workingset+0x40a>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a1ca:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1cd:	8b 48 78             	mov    0x78(%eax),%ecx
f010a1d0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1d3:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a1d9:	89 d0                	mov    %edx,%eax
f010a1db:	01 c0                	add    %eax,%eax
f010a1dd:	01 d0                	add    %edx,%eax
f010a1df:	c1 e0 03             	shl    $0x3,%eax
f010a1e2:	01 c8                	add    %ecx,%eax
f010a1e4:	85 c0                	test   %eax,%eax
f010a1e6:	75 17                	jne    f010a1ff <program_segment_alloc_map_copy_workingset+0x332>
f010a1e8:	83 ec 04             	sub    $0x4,%esp
f010a1eb:	68 dc 63 13 f0       	push   $0xf01363dc
f010a1f0:	68 89 02 00 00       	push   $0x289
f010a1f5:	68 a1 63 13 f0       	push   $0xf01363a1
f010a1fa:	e8 06 60 ff ff       	call   f0100205 <_panic>
f010a1ff:	8b 45 08             	mov    0x8(%ebp),%eax
f010a202:	8b 48 78             	mov    0x78(%eax),%ecx
f010a205:	8b 45 08             	mov    0x8(%ebp),%eax
f010a208:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a20e:	89 d0                	mov    %edx,%eax
f010a210:	01 c0                	add    %eax,%eax
f010a212:	01 d0                	add    %edx,%eax
f010a214:	c1 e0 03             	shl    $0x3,%eax
f010a217:	01 c8                	add    %ecx,%eax
f010a219:	8b 55 08             	mov    0x8(%ebp),%edx
f010a21c:	8b 92 c8 05 00 00    	mov    0x5c8(%edx),%edx
f010a222:	89 50 10             	mov    %edx,0x10(%eax)
f010a225:	8b 40 10             	mov    0x10(%eax),%eax
f010a228:	85 c0                	test   %eax,%eax
f010a22a:	74 28                	je     f010a254 <program_segment_alloc_map_copy_workingset+0x387>
f010a22c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a22f:	8b 90 c8 05 00 00    	mov    0x5c8(%eax),%edx
f010a235:	8b 45 08             	mov    0x8(%ebp),%eax
f010a238:	8b 58 78             	mov    0x78(%eax),%ebx
f010a23b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a23e:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a244:	89 c8                	mov    %ecx,%eax
f010a246:	01 c0                	add    %eax,%eax
f010a248:	01 c8                	add    %ecx,%eax
f010a24a:	c1 e0 03             	shl    $0x3,%eax
f010a24d:	01 d8                	add    %ebx,%eax
f010a24f:	89 42 14             	mov    %eax,0x14(%edx)
f010a252:	eb 24                	jmp    f010a278 <program_segment_alloc_map_copy_workingset+0x3ab>
f010a254:	8b 45 08             	mov    0x8(%ebp),%eax
f010a257:	8b 48 78             	mov    0x78(%eax),%ecx
f010a25a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a25d:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a263:	89 d0                	mov    %edx,%eax
f010a265:	01 c0                	add    %eax,%eax
f010a267:	01 d0                	add    %edx,%eax
f010a269:	c1 e0 03             	shl    $0x3,%eax
f010a26c:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a26f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a272:	89 90 cc 05 00 00    	mov    %edx,0x5cc(%eax)
f010a278:	8b 45 08             	mov    0x8(%ebp),%eax
f010a27b:	8b 48 78             	mov    0x78(%eax),%ecx
f010a27e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a281:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a287:	89 d0                	mov    %edx,%eax
f010a289:	01 c0                	add    %eax,%eax
f010a28b:	01 d0                	add    %edx,%eax
f010a28d:	c1 e0 03             	shl    $0x3,%eax
f010a290:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a293:	8b 45 08             	mov    0x8(%ebp),%eax
f010a296:	89 90 c8 05 00 00    	mov    %edx,0x5c8(%eax)
f010a29c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a29f:	8b 48 78             	mov    0x78(%eax),%ecx
f010a2a2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2a5:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a2ab:	89 d0                	mov    %edx,%eax
f010a2ad:	01 c0                	add    %eax,%eax
f010a2af:	01 d0                	add    %edx,%eax
f010a2b1:	c1 e0 03             	shl    $0x3,%eax
f010a2b4:	01 c8                	add    %ecx,%eax
f010a2b6:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a2bd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2c0:	8b 80 d4 05 00 00    	mov    0x5d4(%eax),%eax
f010a2c6:	8d 50 01             	lea    0x1(%eax),%edx
f010a2c9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2cc:	89 90 d4 05 00 00    	mov    %edx,0x5d4(%eax)
f010a2d2:	e9 08 01 00 00       	jmp    f010a3df <program_segment_alloc_map_copy_workingset+0x512>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a2d7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2da:	8b 48 78             	mov    0x78(%eax),%ecx
f010a2dd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2e0:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a2e6:	89 d0                	mov    %edx,%eax
f010a2e8:	01 c0                	add    %eax,%eax
f010a2ea:	01 d0                	add    %edx,%eax
f010a2ec:	c1 e0 03             	shl    $0x3,%eax
f010a2ef:	01 c8                	add    %ecx,%eax
f010a2f1:	85 c0                	test   %eax,%eax
f010a2f3:	75 17                	jne    f010a30c <program_segment_alloc_map_copy_workingset+0x43f>
f010a2f5:	83 ec 04             	sub    $0x4,%esp
f010a2f8:	68 dc 63 13 f0       	push   $0xf01363dc
f010a2fd:	68 8e 02 00 00       	push   $0x28e
f010a302:	68 a1 63 13 f0       	push   $0xf01363a1
f010a307:	e8 f9 5e ff ff       	call   f0100205 <_panic>
f010a30c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a30f:	8b 48 78             	mov    0x78(%eax),%ecx
f010a312:	8b 45 08             	mov    0x8(%ebp),%eax
f010a315:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a31b:	89 d0                	mov    %edx,%eax
f010a31d:	01 c0                	add    %eax,%eax
f010a31f:	01 d0                	add    %edx,%eax
f010a321:	c1 e0 03             	shl    $0x3,%eax
f010a324:	01 c8                	add    %ecx,%eax
f010a326:	8b 55 08             	mov    0x8(%ebp),%edx
f010a329:	8b 92 d8 05 00 00    	mov    0x5d8(%edx),%edx
f010a32f:	89 50 10             	mov    %edx,0x10(%eax)
f010a332:	8b 40 10             	mov    0x10(%eax),%eax
f010a335:	85 c0                	test   %eax,%eax
f010a337:	74 28                	je     f010a361 <program_segment_alloc_map_copy_workingset+0x494>
f010a339:	8b 45 08             	mov    0x8(%ebp),%eax
f010a33c:	8b 90 d8 05 00 00    	mov    0x5d8(%eax),%edx
f010a342:	8b 45 08             	mov    0x8(%ebp),%eax
f010a345:	8b 58 78             	mov    0x78(%eax),%ebx
f010a348:	8b 45 08             	mov    0x8(%ebp),%eax
f010a34b:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a351:	89 c8                	mov    %ecx,%eax
f010a353:	01 c0                	add    %eax,%eax
f010a355:	01 c8                	add    %ecx,%eax
f010a357:	c1 e0 03             	shl    $0x3,%eax
f010a35a:	01 d8                	add    %ebx,%eax
f010a35c:	89 42 14             	mov    %eax,0x14(%edx)
f010a35f:	eb 24                	jmp    f010a385 <program_segment_alloc_map_copy_workingset+0x4b8>
f010a361:	8b 45 08             	mov    0x8(%ebp),%eax
f010a364:	8b 48 78             	mov    0x78(%eax),%ecx
f010a367:	8b 45 08             	mov    0x8(%ebp),%eax
f010a36a:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a370:	89 d0                	mov    %edx,%eax
f010a372:	01 c0                	add    %eax,%eax
f010a374:	01 d0                	add    %edx,%eax
f010a376:	c1 e0 03             	shl    $0x3,%eax
f010a379:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a37c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a37f:	89 90 dc 05 00 00    	mov    %edx,0x5dc(%eax)
f010a385:	8b 45 08             	mov    0x8(%ebp),%eax
f010a388:	8b 48 78             	mov    0x78(%eax),%ecx
f010a38b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a38e:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a394:	89 d0                	mov    %edx,%eax
f010a396:	01 c0                	add    %eax,%eax
f010a398:	01 d0                	add    %edx,%eax
f010a39a:	c1 e0 03             	shl    $0x3,%eax
f010a39d:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a3a0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3a3:	89 90 d8 05 00 00    	mov    %edx,0x5d8(%eax)
f010a3a9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3ac:	8b 48 78             	mov    0x78(%eax),%ecx
f010a3af:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3b2:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a3b8:	89 d0                	mov    %edx,%eax
f010a3ba:	01 c0                	add    %eax,%eax
f010a3bc:	01 d0                	add    %edx,%eax
f010a3be:	c1 e0 03             	shl    $0x3,%eax
f010a3c1:	01 c8                	add    %ecx,%eax
f010a3c3:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a3ca:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3cd:	8b 80 e4 05 00 00    	mov    0x5e4(%eax),%eax
f010a3d3:	8d 50 01             	lea    0x1(%eax),%edx
f010a3d6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3d9:	89 90 e4 05 00 00    	mov    %edx,0x5e4(%eax)
			}
		}
		//=======================
		e->page_last_WS_index ++;
f010a3df:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3e2:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010a3e8:	8d 50 01             	lea    0x1(%eax),%edx
f010a3eb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3ee:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f010a3f4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3f7:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010a3fd:	8b 55 08             	mov    0x8(%ebp),%edx
f010a400:	8b 4a 74             	mov    0x74(%edx),%ecx
f010a403:	ba 00 00 00 00       	mov    $0x0,%edx
f010a408:	f7 f1                	div    %ecx
f010a40a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a40d:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)

		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f010a413:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a416:	c1 e8 16             	shr    $0x16,%eax
f010a419:	89 c2                	mov    %eax,%edx
f010a41b:	8b 45 18             	mov    0x18(%ebp),%eax
f010a41e:	8b 00                	mov    (%eax),%eax
f010a420:	39 c2                	cmp    %eax,%edx
f010a422:	0f 84 cf 00 00 00    	je     f010a4f7 <program_segment_alloc_map_copy_workingset+0x62a>
		{
			e->__ptr_tws[e->table_last_WS_index].virtual_address = ROUNDDOWN(iVA, PAGE_SIZE*1024);;
f010a428:	8b 45 08             	mov    0x8(%ebp),%eax
f010a42b:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a431:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a434:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010a437:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010a43a:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010a43f:	89 c1                	mov    %eax,%ecx
f010a441:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a444:	89 d0                	mov    %edx,%eax
f010a446:	01 c0                	add    %eax,%eax
f010a448:	01 d0                	add    %edx,%eax
f010a44a:	c1 e0 03             	shl    $0x3,%eax
f010a44d:	01 d8                	add    %ebx,%eax
f010a44f:	83 c0 7c             	add    $0x7c,%eax
f010a452:	89 08                	mov    %ecx,(%eax)
			e->__ptr_tws[e->table_last_WS_index].empty = 0;
f010a454:	8b 45 08             	mov    0x8(%ebp),%eax
f010a457:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a45d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a460:	89 d0                	mov    %edx,%eax
f010a462:	01 c0                	add    %eax,%eax
f010a464:	01 d0                	add    %edx,%eax
f010a466:	c1 e0 03             	shl    $0x3,%eax
f010a469:	01 c8                	add    %ecx,%eax
f010a46b:	83 e8 80             	sub    $0xffffff80,%eax
f010a46e:	c6 00 00             	movb   $0x0,(%eax)
			e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f010a471:	8b 45 08             	mov    0x8(%ebp),%eax
f010a474:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a47a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a47d:	89 d0                	mov    %edx,%eax
f010a47f:	01 c0                	add    %eax,%eax
f010a481:	01 d0                	add    %edx,%eax
f010a483:	c1 e0 03             	shl    $0x3,%eax
f010a486:	01 c8                	add    %ecx,%eax
f010a488:	05 84 00 00 00       	add    $0x84,%eax
f010a48d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			e->table_last_WS_index ++;
f010a493:	8b 45 08             	mov    0x8(%ebp),%eax
f010a496:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a49c:	8d 50 01             	lea    0x1(%eax),%edx
f010a49f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4a2:	89 90 30 05 00 00    	mov    %edx,0x530(%eax)
			e->table_last_WS_index %= __TWS_MAX_SIZE;
f010a4a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4ab:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a4b1:	b9 32 00 00 00       	mov    $0x32,%ecx
f010a4b6:	ba 00 00 00 00       	mov    $0x0,%edx
f010a4bb:	f7 f1                	div    %ecx
f010a4bd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4c0:	89 90 30 05 00 00    	mov    %edx,0x530(%eax)
			if (e->table_last_WS_index == 0)
f010a4c6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4c9:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a4cf:	85 c0                	test   %eax,%eax
f010a4d1:	75 17                	jne    f010a4ea <program_segment_alloc_map_copy_workingset+0x61d>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f010a4d3:	83 ec 04             	sub    $0x4,%esp
f010a4d6:	68 54 64 13 f0       	push   $0xf0136454
f010a4db:	68 9e 02 00 00       	push   $0x29e
f010a4e0:	68 a1 63 13 f0       	push   $0xf01363a1
f010a4e5:	e8 1b 5d ff ff       	call   f0100205 <_panic>
			(*lastTableNumber) = PDX(iVA);
f010a4ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a4ed:	c1 e8 16             	shr    $0x16,%eax
f010a4f0:	89 c2                	mov    %eax,%edx
f010a4f2:	8b 45 18             	mov    0x18(%ebp),%eax
f010a4f5:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f010a4f7:	8b 45 10             	mov    0x10(%ebp),%eax
f010a4fa:	8b 00                	mov    (%eax),%eax
f010a4fc:	8d 50 01             	lea    0x1(%eax),%edx
f010a4ff:	8b 45 10             	mov    0x10(%ebp),%eax
f010a502:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010a504:	ff 45 f0             	incl   -0x10(%ebp)
f010a507:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010a50e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a511:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010a514:	73 0c                	jae    f010a522 <program_segment_alloc_map_copy_workingset+0x655>
f010a516:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a519:	3b 45 14             	cmp    0x14(%ebp),%eax
f010a51c:	0f 82 5a fa ff ff    	jb     f0109f7c <program_segment_alloc_map_copy_workingset+0xaf>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f010a522:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a525:	8b 00                	mov    (%eax),%eax
f010a527:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f010a52a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a52d:	8b 40 0c             	mov    0xc(%eax),%eax
f010a530:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a533:	eb 10                	jmp    f010a545 <program_segment_alloc_map_copy_workingset+0x678>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f010a535:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a538:	8a 10                	mov    (%eax),%dl
f010a53a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a53d:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f010a53f:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f010a542:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a545:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a548:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010a54b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010a54e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a553:	89 c2                	mov    %eax,%edx
f010a555:	8b 45 10             	mov    0x10(%ebp),%eax
f010a558:	8b 00                	mov    (%eax),%eax
f010a55a:	c1 e0 0c             	shl    $0xc,%eax
f010a55d:	01 c2                	add    %eax,%edx
f010a55f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a562:	39 c2                	cmp    %eax,%edx
f010a564:	76 1d                	jbe    f010a583 <program_segment_alloc_map_copy_workingset+0x6b6>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f010a566:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a569:	8b 50 04             	mov    0x4(%eax),%edx
f010a56c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a56f:	01 c2                	add    %eax,%edx
f010a571:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a574:	39 c2                	cmp    %eax,%edx
f010a576:	77 bd                	ja     f010a535 <program_segment_alloc_map_copy_workingset+0x668>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a578:	eb 09                	jmp    f010a583 <program_segment_alloc_map_copy_workingset+0x6b6>
	{
		*dst_ptr = 0;
f010a57a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a57d:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f010a580:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a583:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a586:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010a589:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010a58c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a591:	89 c2                	mov    %eax,%edx
f010a593:	8b 45 10             	mov    0x10(%ebp),%eax
f010a596:	8b 00                	mov    (%eax),%eax
f010a598:	c1 e0 0c             	shl    $0xc,%eax
f010a59b:	01 c2                	add    %eax,%edx
f010a59d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a5a0:	39 c2                	cmp    %eax,%edx
f010a5a2:	77 d6                	ja     f010a57a <program_segment_alloc_map_copy_workingset+0x6ad>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f010a5a4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a5a9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a5ac:	c9                   	leave  
f010a5ad:	c3                   	ret    

f010a5ae <initialize_environment>:
// and initialize the kernel portion of the new environment's address space.
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory, unsigned int phys_user_page_directory)
{
f010a5ae:	55                   	push   %ebp
f010a5af:	89 e5                	mov    %esp,%ebp
f010a5b1:	53                   	push   %ebx
f010a5b2:	83 ec 14             	sub    $0x14,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f010a5b5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5b8:	8b 55 0c             	mov    0xc(%ebp),%edx
f010a5bb:	89 50 5c             	mov    %edx,0x5c(%eax)
	e->env_cr3 = phys_user_page_directory;
f010a5be:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5c1:	8b 55 10             	mov    0x10(%ebp),%edx
f010a5c4:	89 50 60             	mov    %edx,0x60(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a5c7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a5ce:	eb 17                	jmp    f010a5e7 <initialize_environment+0x39>
	{
		e->env_page_directory[i] = 0 ;
f010a5d0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5d3:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a5d6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a5d9:	c1 e2 02             	shl    $0x2,%edx
f010a5dc:	01 d0                	add    %edx,%eax
f010a5de:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a5e4:	ff 45 f4             	incl   -0xc(%ebp)
f010a5e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a5ea:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f010a5ef:	76 df                	jbe    f010a5d0 <initialize_environment+0x22>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a5f1:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f010a5f8:	eb 22                	jmp    f010a61c <initialize_environment+0x6e>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f010a5fa:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5fd:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a600:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a603:	c1 e2 02             	shl    $0x2,%edx
f010a606:	01 c2                	add    %eax,%edx
f010a608:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f010a60d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010a610:	c1 e1 02             	shl    $0x2,%ecx
f010a613:	01 c8                	add    %ecx,%eax
f010a615:	8b 00                	mov    (%eax),%eax
f010a617:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a619:	ff 45 f4             	incl   -0xc(%ebp)
f010a61c:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010a623:	7e d5                	jle    f010a5fa <initialize_environment+0x4c>
	}

	// Allocate the page working set for both kernel and user
#if USE_KHEAP == 1
	{
		e->ptr_pageWorkingSet = create_user_page_WS(e, e->page_WS_max_size);
f010a625:	8b 45 08             	mov    0x8(%ebp),%eax
f010a628:	8b 40 74             	mov    0x74(%eax),%eax
f010a62b:	83 ec 08             	sub    $0x8,%esp
f010a62e:	50                   	push   %eax
f010a62f:	ff 75 08             	pushl  0x8(%ebp)
f010a632:	e8 13 f8 ff ff       	call   f0109e4a <create_user_page_WS>
f010a637:	83 c4 10             	add    $0x10,%esp
f010a63a:	89 c2                	mov    %eax,%edx
f010a63c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a63f:	89 50 78             	mov    %edx,0x78(%eax)
		share_pws_at_user_space(e);
f010a642:	83 ec 0c             	sub    $0xc,%esp
f010a645:	ff 75 08             	pushl  0x8(%ebp)
f010a648:	e8 f3 04 00 00       	call   f010ab40 <share_pws_at_user_space>
f010a64d:	83 c4 10             	add    $0x10,%esp
#endif


	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a650:	83 ec 0c             	sub    $0xc,%esp
f010a653:	6a 02                	push   $0x2
f010a655:	e8 e9 36 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f010a65a:	83 c4 10             	add    $0x10,%esp
f010a65d:	85 c0                	test   %eax,%eax
f010a65f:	0f 84 04 01 00 00    	je     f010a769 <initialize_environment+0x1bb>
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a665:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010a66c:	e9 e7 00 00 00       	jmp    f010a758 <initialize_environment+0x1aa>
		{
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
f010a671:	8b 45 08             	mov    0x8(%ebp),%eax
f010a674:	8b 48 78             	mov    0x78(%eax),%ecx
f010a677:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a67a:	89 d0                	mov    %edx,%eax
f010a67c:	01 c0                	add    %eax,%eax
f010a67e:	01 d0                	add    %edx,%eax
f010a680:	c1 e0 03             	shl    $0x3,%eax
f010a683:	01 c8                	add    %ecx,%eax
f010a685:	85 c0                	test   %eax,%eax
f010a687:	75 17                	jne    f010a6a0 <initialize_environment+0xf2>
f010a689:	83 ec 04             	sub    $0x4,%esp
f010a68c:	68 dc 63 13 f0       	push   $0xf01363dc
f010a691:	68 fc 02 00 00       	push   $0x2fc
f010a696:	68 a1 63 13 f0       	push   $0xf01363a1
f010a69b:	e8 65 5b ff ff       	call   f0100205 <_panic>
f010a6a0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6a3:	8b 48 78             	mov    0x78(%eax),%ecx
f010a6a6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a6a9:	89 d0                	mov    %edx,%eax
f010a6ab:	01 c0                	add    %eax,%eax
f010a6ad:	01 d0                	add    %edx,%eax
f010a6af:	c1 e0 03             	shl    $0x3,%eax
f010a6b2:	01 c8                	add    %ecx,%eax
f010a6b4:	8b 55 08             	mov    0x8(%ebp),%edx
f010a6b7:	8b 92 b8 05 00 00    	mov    0x5b8(%edx),%edx
f010a6bd:	89 50 10             	mov    %edx,0x10(%eax)
f010a6c0:	8b 40 10             	mov    0x10(%eax),%eax
f010a6c3:	85 c0                	test   %eax,%eax
f010a6c5:	74 22                	je     f010a6e9 <initialize_environment+0x13b>
f010a6c7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6ca:	8b 90 b8 05 00 00    	mov    0x5b8(%eax),%edx
f010a6d0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6d3:	8b 58 78             	mov    0x78(%eax),%ebx
f010a6d6:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010a6d9:	89 c8                	mov    %ecx,%eax
f010a6db:	01 c0                	add    %eax,%eax
f010a6dd:	01 c8                	add    %ecx,%eax
f010a6df:	c1 e0 03             	shl    $0x3,%eax
f010a6e2:	01 d8                	add    %ebx,%eax
f010a6e4:	89 42 14             	mov    %eax,0x14(%edx)
f010a6e7:	eb 1e                	jmp    f010a707 <initialize_environment+0x159>
f010a6e9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6ec:	8b 48 78             	mov    0x78(%eax),%ecx
f010a6ef:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a6f2:	89 d0                	mov    %edx,%eax
f010a6f4:	01 c0                	add    %eax,%eax
f010a6f6:	01 d0                	add    %edx,%eax
f010a6f8:	c1 e0 03             	shl    $0x3,%eax
f010a6fb:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a6fe:	8b 45 08             	mov    0x8(%ebp),%eax
f010a701:	89 90 bc 05 00 00    	mov    %edx,0x5bc(%eax)
f010a707:	8b 45 08             	mov    0x8(%ebp),%eax
f010a70a:	8b 48 78             	mov    0x78(%eax),%ecx
f010a70d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a710:	89 d0                	mov    %edx,%eax
f010a712:	01 c0                	add    %eax,%eax
f010a714:	01 d0                	add    %edx,%eax
f010a716:	c1 e0 03             	shl    $0x3,%eax
f010a719:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a71c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a71f:	89 90 b8 05 00 00    	mov    %edx,0x5b8(%eax)
f010a725:	8b 45 08             	mov    0x8(%ebp),%eax
f010a728:	8b 48 78             	mov    0x78(%eax),%ecx
f010a72b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a72e:	89 d0                	mov    %edx,%eax
f010a730:	01 c0                	add    %eax,%eax
f010a732:	01 d0                	add    %edx,%eax
f010a734:	c1 e0 03             	shl    $0x3,%eax
f010a737:	01 c8                	add    %ecx,%eax
f010a739:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a740:	8b 45 08             	mov    0x8(%ebp),%eax
f010a743:	8b 80 c4 05 00 00    	mov    0x5c4(%eax),%eax
f010a749:	8d 50 01             	lea    0x1(%eax),%edx
f010a74c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a74f:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)

	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a755:	ff 45 f0             	incl   -0x10(%ebp)
f010a758:	8b 45 08             	mov    0x8(%ebp),%eax
f010a75b:	8b 50 74             	mov    0x74(%eax),%edx
f010a75e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a761:	39 c2                	cmp    %eax,%edx
f010a763:	0f 87 08 ff ff ff    	ja     f010a671 <initialize_environment+0xc3>
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010a769:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a770:	eb 50                	jmp    f010a7c2 <initialize_environment+0x214>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f010a772:	8b 45 08             	mov    0x8(%ebp),%eax
f010a775:	8b 48 78             	mov    0x78(%eax),%ecx
f010a778:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a77b:	89 d0                	mov    %edx,%eax
f010a77d:	01 c0                	add    %eax,%eax
f010a77f:	01 d0                	add    %edx,%eax
f010a781:	c1 e0 03             	shl    $0x3,%eax
f010a784:	01 c8                	add    %ecx,%eax
f010a786:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f010a78c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a78f:	8b 48 78             	mov    0x78(%eax),%ecx
f010a792:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a795:	89 d0                	mov    %edx,%eax
f010a797:	01 c0                	add    %eax,%eax
f010a799:	01 d0                	add    %edx,%eax
f010a79b:	c1 e0 03             	shl    $0x3,%eax
f010a79e:	01 c8                	add    %ecx,%eax
f010a7a0:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f010a7a4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7a7:	8b 48 78             	mov    0x78(%eax),%ecx
f010a7aa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a7ad:	89 d0                	mov    %edx,%eax
f010a7af:	01 c0                	add    %eax,%eax
f010a7b1:	01 d0                	add    %edx,%eax
f010a7b3:	c1 e0 03             	shl    $0x3,%eax
f010a7b6:	01 c8                	add    %ecx,%eax
f010a7b8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010a7bf:	ff 45 f4             	incl   -0xc(%ebp)
f010a7c2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7c5:	8b 50 74             	mov    0x74(%eax),%edx
f010a7c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a7cb:	39 c2                	cmp    %eax,%edx
f010a7cd:	77 a3                	ja     f010a772 <initialize_environment+0x1c4>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f010a7cf:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7d2:	c7 80 2c 05 00 00 00 	movl   $0x0,0x52c(%eax)
f010a7d9:	00 00 00 

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010a7dc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a7e3:	eb 50                	jmp    f010a835 <initialize_environment+0x287>
	{
		e->__ptr_tws[i].virtual_address = 0;
f010a7e5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a7e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a7eb:	89 d0                	mov    %edx,%eax
f010a7ed:	01 c0                	add    %eax,%eax
f010a7ef:	01 d0                	add    %edx,%eax
f010a7f1:	c1 e0 03             	shl    $0x3,%eax
f010a7f4:	01 c8                	add    %ecx,%eax
f010a7f6:	83 c0 7c             	add    $0x7c,%eax
f010a7f9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f010a7ff:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a802:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a805:	89 d0                	mov    %edx,%eax
f010a807:	01 c0                	add    %eax,%eax
f010a809:	01 d0                	add    %edx,%eax
f010a80b:	c1 e0 03             	shl    $0x3,%eax
f010a80e:	01 c8                	add    %ecx,%eax
f010a810:	83 e8 80             	sub    $0xffffff80,%eax
f010a813:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f010a816:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a819:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a81c:	89 d0                	mov    %edx,%eax
f010a81e:	01 c0                	add    %eax,%eax
f010a820:	01 d0                	add    %edx,%eax
f010a822:	c1 e0 03             	shl    $0x3,%eax
f010a825:	01 c8                	add    %ecx,%eax
f010a827:	05 84 00 00 00       	add    $0x84,%eax
f010a82c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010a832:	ff 45 f4             	incl   -0xc(%ebp)
f010a835:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010a839:	7e aa                	jle    f010a7e5 <initialize_environment+0x237>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f010a83b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a83e:	c7 80 30 05 00 00 00 	movl   $0x0,0x530(%eax)
f010a845:	00 00 00 

	e->pageFaultsCounter=0;
f010a848:	8b 45 08             	mov    0x8(%ebp),%eax
f010a84b:	c7 80 34 05 00 00 00 	movl   $0x0,0x534(%eax)
f010a852:	00 00 00 
	e->tableFaultsCounter=0;
f010a855:	8b 45 08             	mov    0x8(%ebp),%eax
f010a858:	c7 80 38 05 00 00 00 	movl   $0x0,0x538(%eax)
f010a85f:	00 00 00 

	e->freeingFullWSCounter = 0;
f010a862:	8b 45 08             	mov    0x8(%ebp),%eax
f010a865:	c7 80 3c 05 00 00 00 	movl   $0x0,0x53c(%eax)
f010a86c:	00 00 00 
	e->freeingScarceMemCounter = 0;
f010a86f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a872:	c7 80 40 05 00 00 00 	movl   $0x0,0x540(%eax)
f010a879:	00 00 00 

	e->nModifiedPages=0;
f010a87c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a87f:	c7 80 44 05 00 00 00 	movl   $0x0,0x544(%eax)
f010a886:	00 00 00 
	e->nNotModifiedPages=0;
f010a889:	8b 45 08             	mov    0x8(%ebp),%eax
f010a88c:	c7 80 48 05 00 00 00 	movl   $0x0,0x548(%eax)
f010a893:	00 00 00 
	e->nClocks = 0;
f010a896:	8b 45 08             	mov    0x8(%ebp),%eax
f010a899:	c7 80 a4 05 00 00 00 	movl   $0x0,0x5a4(%eax)
f010a8a0:	00 00 00 

	//2020
	e->nPageIn = 0;
f010a8a3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8a6:	c7 80 4c 05 00 00 00 	movl   $0x0,0x54c(%eax)
f010a8ad:	00 00 00 
	e->nPageOut = 0;
f010a8b0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8b3:	c7 80 50 05 00 00 00 	movl   $0x0,0x550(%eax)
f010a8ba:	00 00 00 
	e->nNewPageAdded = 0;
f010a8bd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8c0:	c7 80 54 05 00 00 00 	movl   $0x0,0x554(%eax)
f010a8c7:	00 00 00 

	//e->shared_free_address = USER_SHARED_MEM_START;

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f010a8ca:	83 ec 0c             	sub    $0xc,%esp
f010a8cd:	ff 75 08             	pushl  0x8(%ebp)
f010a8d0:	e8 09 00 00 00       	call   f010a8de <complete_environment_initialization>
f010a8d5:	83 c4 10             	add    $0x10,%esp
}
f010a8d8:	90                   	nop
f010a8d9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a8dc:	c9                   	leave  
f010a8dd:	c3                   	ret    

f010a8de <complete_environment_initialization>:

//========================================================
// 8) COMPLETE INITIALIZATION [OTHERS: ID, REGS, STATUS...):
//========================================================
void complete_environment_initialization(struct Env* e)
{
f010a8de:	55                   	push   %ebp
f010a8df:	89 e5                	mov    %esp,%ebp
f010a8e1:	53                   	push   %ebx
f010a8e2:	83 ec 14             	sub    $0x14,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f010a8e5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8e8:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a8eb:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f010a8f1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8f4:	8b 40 60             	mov    0x60(%eax),%eax
f010a8f7:	83 c8 03             	or     $0x3,%eax
f010a8fa:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f010a8fc:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8ff:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a902:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010a908:	8b 45 08             	mov    0x8(%ebp),%eax
f010a90b:	8b 40 60             	mov    0x60(%eax),%eax
f010a90e:	83 c8 05             	or     $0x5,%eax
f010a911:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f010a913:	8b 45 08             	mov    0x8(%ebp),%eax
f010a916:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	e->disk_env_pgdir_PA= 0;
f010a91d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a920:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)
	e->disk_env_tabledir = 0;
f010a927:	8b 45 08             	mov    0x8(%ebp),%eax
f010a92a:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	e->disk_env_tabledir_PA = 0;
f010a931:	8b 45 08             	mov    0x8(%ebp),%eax
f010a934:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)

	int32 generation;
	// Generate an env_id for this environment.
	/*2022: UPDATED*/generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NEARPOW2NENV - 1);
f010a93b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a93e:	8b 58 4c             	mov    0x4c(%eax),%ebx
f010a941:	83 ec 0c             	sub    $0xc,%esp
f010a944:	68 b1 02 00 00       	push   $0x2b1
f010a949:	e8 25 53 02 00       	call   f012fc73 <log2_ceil>
f010a94e:	83 c4 10             	add    $0x10,%esp
f010a951:	ba 01 00 00 00       	mov    $0x1,%edx
f010a956:	88 c1                	mov    %al,%cl
f010a958:	d3 e2                	shl    %cl,%edx
f010a95a:	89 d0                	mov    %edx,%eax
f010a95c:	01 d8                	add    %ebx,%eax
f010a95e:	89 c3                	mov    %eax,%ebx
f010a960:	83 ec 0c             	sub    $0xc,%esp
f010a963:	68 b1 02 00 00       	push   $0x2b1
f010a968:	e8 d1 52 02 00       	call   f012fc3e <nearest_pow2_ceil>
f010a96d:	83 c4 10             	add    $0x10,%esp
f010a970:	f7 d8                	neg    %eax
f010a972:	21 d8                	and    %ebx,%eax
f010a974:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f010a977:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a97b:	7f 1e                	jg     f010a99b <complete_environment_initialization+0xbd>
		generation = 1 << ENVGENSHIFT;
f010a97d:	83 ec 0c             	sub    $0xc,%esp
f010a980:	68 b1 02 00 00       	push   $0x2b1
f010a985:	e8 e9 52 02 00       	call   f012fc73 <log2_ceil>
f010a98a:	83 c4 10             	add    $0x10,%esp
f010a98d:	ba 01 00 00 00       	mov    $0x1,%edx
f010a992:	88 c1                	mov    %al,%cl
f010a994:	d3 e2                	shl    %cl,%edx
f010a996:	89 d0                	mov    %edx,%eax
f010a998:	89 45 f4             	mov    %eax,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f010a99b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a99e:	8b 15 f0 53 87 f0    	mov    0xf08753f0,%edx
f010a9a4:	29 d0                	sub    %edx,%eax
f010a9a6:	c1 f8 04             	sar    $0x4,%eax
f010a9a9:	89 c2                	mov    %eax,%edx
f010a9ab:	89 d0                	mov    %edx,%eax
f010a9ad:	c1 e0 03             	shl    $0x3,%eax
f010a9b0:	01 d0                	add    %edx,%eax
f010a9b2:	01 c0                	add    %eax,%eax
f010a9b4:	01 d0                	add    %edx,%eax
f010a9b6:	c1 e0 03             	shl    $0x3,%eax
f010a9b9:	01 d0                	add    %edx,%eax
f010a9bb:	89 c1                	mov    %eax,%ecx
f010a9bd:	c1 e1 08             	shl    $0x8,%ecx
f010a9c0:	01 c8                	add    %ecx,%eax
f010a9c2:	01 c0                	add    %eax,%eax
f010a9c4:	01 d0                	add    %edx,%eax
f010a9c6:	01 c0                	add    %eax,%eax
f010a9c8:	01 d0                	add    %edx,%eax
f010a9ca:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010a9d1:	01 d0                	add    %edx,%eax
f010a9d3:	89 c2                	mov    %eax,%edx
f010a9d5:	c1 e2 09             	shl    $0x9,%edx
f010a9d8:	29 c2                	sub    %eax,%edx
f010a9da:	89 d0                	mov    %edx,%eax
f010a9dc:	f7 d8                	neg    %eax
f010a9de:	0b 45 f4             	or     -0xc(%ebp),%eax
f010a9e1:	89 c2                	mov    %eax,%edx
f010a9e3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9e6:	89 50 4c             	mov    %edx,0x4c(%eax)

	//cprintf("ENV_CREATE: envID = %d, orig index in envs = %d, calc index using ENVX = %d\n", e->env_id, (e - envs), ENVX(e->env_id));

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f010a9e9:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f010a9ee:	85 c0                	test   %eax,%eax
f010a9f0:	75 0c                	jne    f010a9fe <complete_environment_initialization+0x120>
		e->env_parent_id = 0;//no parent;
f010a9f2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9f5:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f010a9fc:	eb 0e                	jmp    f010aa0c <complete_environment_initialization+0x12e>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f010a9fe:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f010aa03:	8b 50 4c             	mov    0x4c(%eax),%edx
f010aa06:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa09:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f010aa0c:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa0f:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f010aa16:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa19:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f010aa20:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa23:	83 ec 04             	sub    $0x4,%esp
f010aa26:	6a 44                	push   $0x44
f010aa28:	6a 00                	push   $0x0
f010aa2a:	50                   	push   %eax
f010aa2b:	e8 8a 66 02 00       	call   f01310ba <memset>
f010aa30:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f010aa33:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa36:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f010aa3c:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa3f:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f010aa45:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa48:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f010aa4e:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa51:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f010aa58:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa5b:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f010aa61:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa64:	8b 40 38             	mov    0x38(%eax),%eax
f010aa67:	80 cc 02             	or     $0x2,%ah
f010aa6a:	89 c2                	mov    %eax,%edx
f010aa6c:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa6f:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f010aa72:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010aa76:	75 17                	jne    f010aa8f <complete_environment_initialization+0x1b1>
f010aa78:	83 ec 04             	sub    $0x4,%esp
f010aa7b:	68 be 63 13 f0       	push   $0xf01363be
f010aa80:	68 60 03 00 00       	push   $0x360
f010aa85:	68 a1 63 13 f0       	push   $0xf01363a1
f010aa8a:	e8 76 57 ff ff       	call   f0100205 <_panic>
f010aa8f:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa92:	8b 40 44             	mov    0x44(%eax),%eax
f010aa95:	85 c0                	test   %eax,%eax
f010aa97:	74 11                	je     f010aaaa <complete_environment_initialization+0x1cc>
f010aa99:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa9c:	8b 40 44             	mov    0x44(%eax),%eax
f010aa9f:	8b 55 08             	mov    0x8(%ebp),%edx
f010aaa2:	8b 52 48             	mov    0x48(%edx),%edx
f010aaa5:	89 50 48             	mov    %edx,0x48(%eax)
f010aaa8:	eb 0b                	jmp    f010aab5 <complete_environment_initialization+0x1d7>
f010aaaa:	8b 45 08             	mov    0x8(%ebp),%eax
f010aaad:	8b 40 48             	mov    0x48(%eax),%eax
f010aab0:	a3 fc 53 87 f0       	mov    %eax,0xf08753fc
f010aab5:	8b 45 08             	mov    0x8(%ebp),%eax
f010aab8:	8b 40 48             	mov    0x48(%eax),%eax
f010aabb:	85 c0                	test   %eax,%eax
f010aabd:	74 11                	je     f010aad0 <complete_environment_initialization+0x1f2>
f010aabf:	8b 45 08             	mov    0x8(%ebp),%eax
f010aac2:	8b 40 48             	mov    0x48(%eax),%eax
f010aac5:	8b 55 08             	mov    0x8(%ebp),%edx
f010aac8:	8b 52 44             	mov    0x44(%edx),%edx
f010aacb:	89 50 44             	mov    %edx,0x44(%eax)
f010aace:	eb 0b                	jmp    f010aadb <complete_environment_initialization+0x1fd>
f010aad0:	8b 45 08             	mov    0x8(%ebp),%eax
f010aad3:	8b 40 44             	mov    0x44(%eax),%eax
f010aad6:	a3 f8 53 87 f0       	mov    %eax,0xf08753f8
f010aadb:	8b 45 08             	mov    0x8(%ebp),%eax
f010aade:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010aae5:	8b 45 08             	mov    0x8(%ebp),%eax
f010aae8:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010aaef:	a1 04 54 87 f0       	mov    0xf0875404,%eax
f010aaf4:	48                   	dec    %eax
f010aaf5:	a3 04 54 87 f0       	mov    %eax,0xf0875404
	return ;
f010aafa:	90                   	nop
}
f010aafb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010aafe:	c9                   	leave  
f010aaff:	c3                   	ret    

f010ab00 <set_environment_entry_point>:

//===============================================
// 9) SET EIP REG VALUE BY ENV ENTRY POINT:
//===============================================
void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f010ab00:	55                   	push   %ebp
f010ab01:	89 e5                	mov    %esp,%ebp
f010ab03:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010ab06:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ab09:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010ab0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab0f:	8b 00                	mov    (%eax),%eax
f010ab11:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010ab16:	74 17                	je     f010ab2f <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f010ab18:	83 ec 04             	sub    $0x4,%esp
f010ab1b:	68 f7 64 13 f0       	push   $0xf01364f7
f010ab20:	68 6c 03 00 00       	push   $0x36c
f010ab25:	68 a1 63 13 f0       	push   $0xf01363a1
f010ab2a:	e8 d6 56 ff ff       	call   f0100205 <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f010ab2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab32:	8b 40 18             	mov    0x18(%eax),%eax
f010ab35:	89 c2                	mov    %eax,%edx
f010ab37:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab3a:	89 50 30             	mov    %edx,0x30(%eax)
}
f010ab3d:	90                   	nop
f010ab3e:	c9                   	leave  
f010ab3f:	c3                   	ret    

f010ab40 <share_pws_at_user_space>:

//===============================================
// 10) SHARE WS AT USER SPACE (READ ONLY):
//===============================================
void share_pws_at_user_space(struct Env* e)
{
f010ab40:	55                   	push   %ebp
f010ab41:	89 e5                	mov    %esp,%ebp
f010ab43:	83 ec 28             	sub    $0x28,%esp
#if USE_KHEAP
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
f010ab46:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab49:	c7 80 9c 05 00 00 00 	movl   $0xa0000000,0x59c(%eax)
f010ab50:	00 00 a0 
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
f010ab53:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab56:	8b 40 78             	mov    0x78(%eax),%eax
f010ab59:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f010ab5c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab5f:	8b 50 74             	mov    0x74(%eax),%edx
f010ab62:	89 d0                	mov    %edx,%eax
f010ab64:	01 c0                	add    %eax,%eax
f010ab66:	01 d0                	add    %edx,%eax
f010ab68:	c1 e0 03             	shl    $0x3,%eax
f010ab6b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	unsigned int dva = (unsigned int) (e->__uptr_pws);
f010ab6e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab71:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010ab77:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f010ab7a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab7d:	8b 40 78             	mov    0x78(%eax),%eax
f010ab80:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010ab83:	eb 71                	jmp    f010abf6 <share_pws_at_user_space+0xb6>
	{
		//2017: Copy the table entries instead of mapping (to avoid increasing the number of references of corresponding frames)
		//unsigned int pa = kheap_physical_address(sva);
		//map_frame(e->env_page_directory, to_frame_info(pa), dva, PERM_USER);
		uint32 pa = kheap_physical_address(sva);
f010ab85:	83 ec 0c             	sub    $0xc,%esp
f010ab88:	ff 75 f4             	pushl  -0xc(%ebp)
f010ab8b:	e8 13 cf ff ff       	call   f0107aa3 <kheap_physical_address>
f010ab90:	83 c4 10             	add    $0x10,%esp
f010ab93:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32* ptr_page_table;
		if (get_page_table(e->env_page_directory,  dva, &ptr_page_table) == TABLE_NOT_EXIST)
f010ab96:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab99:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ab9c:	83 ec 04             	sub    $0x4,%esp
f010ab9f:	8d 55 e4             	lea    -0x1c(%ebp),%edx
f010aba2:	52                   	push   %edx
f010aba3:	ff 75 f0             	pushl  -0x10(%ebp)
f010aba6:	50                   	push   %eax
f010aba7:	e8 05 bf ff ff       	call   f0106ab1 <get_page_table>
f010abac:	83 c4 10             	add    $0x10,%esp
f010abaf:	83 f8 01             	cmp    $0x1,%eax
f010abb2:	75 18                	jne    f010abcc <share_pws_at_user_space+0x8c>
		{
			ptr_page_table = create_page_table(e->env_page_directory, (uint32) dva);
f010abb4:	8b 45 08             	mov    0x8(%ebp),%eax
f010abb7:	8b 40 5c             	mov    0x5c(%eax),%eax
f010abba:	83 ec 08             	sub    $0x8,%esp
f010abbd:	ff 75 f0             	pushl  -0x10(%ebp)
f010abc0:	50                   	push   %eax
f010abc1:	e8 41 c0 ff ff       	call   f0106c07 <create_page_table>
f010abc6:	83 c4 10             	add    $0x10,%esp
f010abc9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
f010abcc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010abcf:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010abd2:	c1 ea 0c             	shr    $0xc,%edx
f010abd5:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010abdb:	c1 e2 02             	shl    $0x2,%edx
f010abde:	01 d0                	add    %edx,%eax
f010abe0:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010abe3:	83 ca 05             	or     $0x5,%edx
f010abe6:	89 10                	mov    %edx,(%eax)
#if USE_KHEAP
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
	unsigned int dva = (unsigned int) (e->__uptr_pws);
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f010abe8:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010abef:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f010abf6:	8b 45 08             	mov    0x8(%ebp),%eax
f010abf9:	8b 40 78             	mov    0x78(%eax),%eax
f010abfc:	89 c2                	mov    %eax,%edx
f010abfe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ac01:	01 d0                	add    %edx,%eax
f010ac03:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ac06:	0f 87 79 ff ff ff    	ja     f010ab85 <share_pws_at_user_space+0x45>
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
	}
#else
	panic("share_pws_at_user_space(): should not be called when kernel heap is disabled.");
#endif
}
f010ac0c:	90                   	nop
f010ac0d:	c9                   	leave  
f010ac0e:	c3                   	ret    

f010ac0f <unshare_pws_at_user_space>:

//===============================================
// 11) REMOVE THE SHARED WS FROM USER SPACE:
//===============================================
void unshare_pws_at_user_space(struct Env *e)
{
f010ac0f:	55                   	push   %ebp
f010ac10:	89 e5                	mov    %esp,%ebp
f010ac12:	83 ec 28             	sub    $0x28,%esp
#if USE_KHEAP
	{
		uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f010ac15:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac18:	8b 50 74             	mov    0x74(%eax),%edx
f010ac1b:	89 d0                	mov    %edx,%eax
f010ac1d:	01 c0                	add    %eax,%eax
f010ac1f:	01 d0                	add    %edx,%eax
f010ac21:	c1 e0 03             	shl    $0x3,%eax
f010ac24:	89 45 f0             	mov    %eax,-0x10(%ebp)
		unsigned int sva = (unsigned int) e->__uptr_pws;
f010ac27:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac2a:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010ac30:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			//unsigned int pa = kheap_physical_address(sva);
			unmap_frame(e->env_page_directory, sva);
		}
		*/
		unsigned int tsva = ROUNDDOWN((unsigned int) e->__uptr_pws, PTSIZE);
f010ac33:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac36:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010ac3c:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010ac3f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ac42:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010ac47:	89 45 f4             	mov    %eax,-0xc(%ebp)
		for(; tsva < ((unsigned int) (e->__uptr_pws) + nBytes) ; tsva+=PTSIZE)
f010ac4a:	eb 46                	jmp    f010ac92 <unshare_pws_at_user_space+0x83>
		{
			unsigned int * uws_table;
			get_page_table(e->env_page_directory, tsva, &uws_table );
f010ac4c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac4f:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ac52:	83 ec 04             	sub    $0x4,%esp
f010ac55:	8d 55 e0             	lea    -0x20(%ebp),%edx
f010ac58:	52                   	push   %edx
f010ac59:	ff 75 f4             	pushl  -0xc(%ebp)
f010ac5c:	50                   	push   %eax
f010ac5d:	e8 4f be ff ff       	call   f0106ab1 <get_page_table>
f010ac62:	83 c4 10             	add    $0x10,%esp
			kfree(uws_table);
f010ac65:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ac68:	83 ec 0c             	sub    $0xc,%esp
f010ac6b:	50                   	push   %eax
f010ac6c:	e8 df cc ff ff       	call   f0107950 <kfree>
f010ac71:	83 c4 10             	add    $0x10,%esp
			e->env_page_directory[PDX(tsva)] = 0;
f010ac74:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac77:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ac7a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ac7d:	c1 ea 16             	shr    $0x16,%edx
f010ac80:	c1 e2 02             	shl    $0x2,%edx
f010ac83:	01 d0                	add    %edx,%eax
f010ac85:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			//unsigned int pa = kheap_physical_address(sva);
			unmap_frame(e->env_page_directory, sva);
		}
		*/
		unsigned int tsva = ROUNDDOWN((unsigned int) e->__uptr_pws, PTSIZE);
		for(; tsva < ((unsigned int) (e->__uptr_pws) + nBytes) ; tsva+=PTSIZE)
f010ac8b:	81 45 f4 00 00 40 00 	addl   $0x400000,-0xc(%ebp)
f010ac92:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac95:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010ac9b:	89 c2                	mov    %eax,%edx
f010ac9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010aca0:	01 d0                	add    %edx,%eax
f010aca2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010aca5:	77 a5                	ja     f010ac4c <unshare_pws_at_user_space+0x3d>

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010aca7:	0f 20 d8             	mov    %cr3,%eax
f010acaa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010acad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010acb0:	0f 22 d8             	mov    %eax,%cr3
		tlbflush();
	}
#else
	panic("__remove_pws_user_pages(): should not be called when kernel heap is disabled.");
#endif
}
f010acb3:	90                   	nop
f010acb4:	c9                   	leave  
f010acb5:	c3                   	ret    

f010acb6 <PROGRAM_SEGMENT_NEXT>:

//===============================================
// 12) SEG NEXT [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f010acb6:	55                   	push   %ebp
f010acb7:	89 e5                	mov    %esp,%ebp
f010acb9:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f010acbc:	8b 45 08             	mov    0x8(%ebp),%eax
f010acbf:	8b 40 10             	mov    0x10(%eax),%eax
f010acc2:	8d 48 01             	lea    0x1(%eax),%ecx
f010acc5:	8b 55 08             	mov    0x8(%ebp),%edx
f010acc8:	89 4a 10             	mov    %ecx,0x10(%edx)
f010accb:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010acce:	8b 45 0c             	mov    0xc(%ebp),%eax
f010acd1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010acd4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010acd7:	8b 00                	mov    (%eax),%eax
f010acd9:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010acde:	74 17                	je     f010acf7 <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f010ace0:	83 ec 04             	sub    $0x4,%esp
f010ace3:	68 f7 64 13 f0       	push   $0xf01364f7
f010ace8:	68 b6 03 00 00       	push   $0x3b6
f010aced:	68 a1 63 13 f0       	push   $0xf01363a1
f010acf2:	e8 0e 55 ff ff       	call   f0100205 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010acf7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010acfa:	8b 50 1c             	mov    0x1c(%eax),%edx
f010acfd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ad00:	01 d0                	add    %edx,%eax
f010ad02:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f010ad05:	eb 0f                	jmp    f010ad16 <PROGRAM_SEGMENT_NEXT+0x60>
f010ad07:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad0a:	8b 40 10             	mov    0x10(%eax),%eax
f010ad0d:	8d 50 01             	lea    0x1(%eax),%edx
f010ad10:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad13:	89 50 10             	mov    %edx,0x10(%eax)
f010ad16:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad19:	8b 40 10             	mov    0x10(%eax),%eax
f010ad1c:	c1 e0 05             	shl    $0x5,%eax
f010ad1f:	89 c2                	mov    %eax,%edx
f010ad21:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ad24:	01 d0                	add    %edx,%eax
f010ad26:	8b 00                	mov    (%eax),%eax
f010ad28:	83 f8 01             	cmp    $0x1,%eax
f010ad2b:	74 13                	je     f010ad40 <PROGRAM_SEGMENT_NEXT+0x8a>
f010ad2d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad30:	8b 50 10             	mov    0x10(%eax),%edx
f010ad33:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ad36:	8b 40 2c             	mov    0x2c(%eax),%eax
f010ad39:	0f b7 c0             	movzwl %ax,%eax
f010ad3c:	39 c2                	cmp    %eax,%edx
f010ad3e:	72 c7                	jb     f010ad07 <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f010ad40:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad43:	8b 40 10             	mov    0x10(%eax),%eax
f010ad46:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f010ad49:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ad4c:	8b 40 2c             	mov    0x2c(%eax),%eax
f010ad4f:	0f b7 c0             	movzwl %ax,%eax
f010ad52:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ad55:	7e 63                	jle    f010adba <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010ad57:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad5a:	c1 e0 05             	shl    $0x5,%eax
f010ad5d:	89 c2                	mov    %eax,%edx
f010ad5f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ad62:	01 d0                	add    %edx,%eax
f010ad64:	8b 50 04             	mov    0x4(%eax),%edx
f010ad67:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ad6a:	01 c2                	add    %eax,%edx
f010ad6c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad6f:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010ad71:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad74:	c1 e0 05             	shl    $0x5,%eax
f010ad77:	89 c2                	mov    %eax,%edx
f010ad79:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ad7c:	01 d0                	add    %edx,%eax
f010ad7e:	8b 50 14             	mov    0x14(%eax),%edx
f010ad81:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad84:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f010ad87:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad8a:	c1 e0 05             	shl    $0x5,%eax
f010ad8d:	89 c2                	mov    %eax,%edx
f010ad8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ad92:	01 d0                	add    %edx,%eax
f010ad94:	8b 50 10             	mov    0x10(%eax),%edx
f010ad97:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad9a:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f010ad9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ada0:	c1 e0 05             	shl    $0x5,%eax
f010ada3:	89 c2                	mov    %eax,%edx
f010ada5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ada8:	01 d0                	add    %edx,%eax
f010adaa:	8b 40 08             	mov    0x8(%eax),%eax
f010adad:	89 c2                	mov    %eax,%edx
f010adaf:	8b 45 08             	mov    0x8(%ebp),%eax
f010adb2:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f010adb5:	8b 45 08             	mov    0x8(%ebp),%eax
f010adb8:	eb 05                	jmp    f010adbf <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f010adba:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010adbf:	c9                   	leave  
f010adc0:	c3                   	ret    

f010adc1 <PROGRAM_SEGMENT_FIRST>:

//===============================================
// 13) SEG FIRST [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f010adc1:	55                   	push   %ebp
f010adc2:	89 e5                	mov    %esp,%ebp
f010adc4:	57                   	push   %edi
f010adc5:	56                   	push   %esi
f010adc6:	53                   	push   %ebx
f010adc7:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f010adca:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010add1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010add4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010add7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010adda:	8b 00                	mov    (%eax),%eax
f010addc:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010ade1:	74 17                	je     f010adfa <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f010ade3:	83 ec 04             	sub    $0x4,%esp
f010ade6:	68 f7 64 13 f0       	push   $0xf01364f7
f010adeb:	68 d2 03 00 00       	push   $0x3d2
f010adf0:	68 a1 63 13 f0       	push   $0xf01363a1
f010adf5:	e8 0b 54 ff ff       	call   f0100205 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010adfa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010adfd:	8b 50 1c             	mov    0x1c(%eax),%edx
f010ae00:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ae03:	01 d0                	add    %edx,%eax
f010ae05:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f010ae08:	eb 07                	jmp    f010ae11 <PROGRAM_SEGMENT_FIRST+0x50>
f010ae0a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ae0d:	40                   	inc    %eax
f010ae0e:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010ae11:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ae14:	c1 e0 05             	shl    $0x5,%eax
f010ae17:	89 c2                	mov    %eax,%edx
f010ae19:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ae1c:	01 d0                	add    %edx,%eax
f010ae1e:	8b 00                	mov    (%eax),%eax
f010ae20:	83 f8 01             	cmp    $0x1,%eax
f010ae23:	74 10                	je     f010ae35 <PROGRAM_SEGMENT_FIRST+0x74>
f010ae25:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010ae28:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ae2b:	8b 40 2c             	mov    0x2c(%eax),%eax
f010ae2e:	0f b7 c0             	movzwl %ax,%eax
f010ae31:	39 c2                	cmp    %eax,%edx
f010ae33:	72 d5                	jb     f010ae0a <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f010ae35:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ae38:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f010ae3b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ae3e:	8b 40 2c             	mov    0x2c(%eax),%eax
f010ae41:	0f b7 c0             	movzwl %ax,%eax
f010ae44:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010ae47:	7e 68                	jle    f010aeb1 <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010ae49:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ae4c:	c1 e0 05             	shl    $0x5,%eax
f010ae4f:	89 c2                	mov    %eax,%edx
f010ae51:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ae54:	01 d0                	add    %edx,%eax
f010ae56:	8b 50 04             	mov    0x4(%eax),%edx
f010ae59:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ae5c:	01 d0                	add    %edx,%eax
f010ae5e:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010ae61:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ae64:	c1 e0 05             	shl    $0x5,%eax
f010ae67:	89 c2                	mov    %eax,%edx
f010ae69:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ae6c:	01 d0                	add    %edx,%eax
f010ae6e:	8b 40 14             	mov    0x14(%eax),%eax
f010ae71:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f010ae74:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ae77:	c1 e0 05             	shl    $0x5,%eax
f010ae7a:	89 c2                	mov    %eax,%edx
f010ae7c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ae7f:	01 d0                	add    %edx,%eax
f010ae81:	8b 40 10             	mov    0x10(%eax),%eax
f010ae84:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f010ae87:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ae8a:	c1 e0 05             	shl    $0x5,%eax
f010ae8d:	89 c2                	mov    %eax,%edx
f010ae8f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ae92:	01 d0                	add    %edx,%eax
f010ae94:	8b 40 08             	mov    0x8(%eax),%eax
f010ae97:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f010ae9a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae9d:	89 c3                	mov    %eax,%ebx
f010ae9f:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010aea2:	ba 05 00 00 00       	mov    $0x5,%edx
f010aea7:	89 df                	mov    %ebx,%edi
f010aea9:	89 c6                	mov    %eax,%esi
f010aeab:	89 d1                	mov    %edx,%ecx
f010aead:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010aeaf:	eb 1c                	jmp    f010aecd <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f010aeb1:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f010aeb8:	8b 45 08             	mov    0x8(%ebp),%eax
f010aebb:	89 c3                	mov    %eax,%ebx
f010aebd:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010aec0:	ba 05 00 00 00       	mov    $0x5,%edx
f010aec5:	89 df                	mov    %ebx,%edi
f010aec7:	89 c6                	mov    %eax,%esi
f010aec9:	89 d1                	mov    %edx,%ecx
f010aecb:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010aecd:	8b 45 08             	mov    0x8(%ebp),%eax
f010aed0:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010aed3:	5b                   	pop    %ebx
f010aed4:	5e                   	pop    %esi
f010aed5:	5f                   	pop    %edi
f010aed6:	5d                   	pop    %ebp
f010aed7:	c2 04 00             	ret    $0x4

f010aeda <cleanup_buffers>:

//===============================================
// 14) CLEANUP MODIFIED BUFFER [TO BE USED AS LAST STEP WHEN ADD ENV TO EXIT Q]:
//===============================================
void cleanup_buffers(struct Env* e)
{
f010aeda:	55                   	push   %ebp
f010aedb:	89 e5                	mov    %esp,%ebp
f010aedd:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct FrameInfo *ptr_fi=NULL ;
f010aee0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010aee7:	a1 b8 5c 87 f0       	mov    0xf0875cb8,%eax
f010aeec:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010aeef:	e9 c3 00 00 00       	jmp    f010afb7 <cleanup_buffers+0xdd>
	{
		if(ptr_fi->environment == e)
f010aef4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aef7:	8b 40 10             	mov    0x10(%eax),%eax
f010aefa:	3b 45 08             	cmp    0x8(%ebp),%eax
f010aefd:	0f 85 ac 00 00 00    	jne    f010afaf <cleanup_buffers+0xd5>
		{
			pt_clear_page_table_entry(ptr_fi->environment->env_page_directory,ptr_fi->va);
f010af03:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af06:	8b 50 0c             	mov    0xc(%eax),%edx
f010af09:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af0c:	8b 40 10             	mov    0x10(%eax),%eax
f010af0f:	8b 40 5c             	mov    0x5c(%eax),%eax
f010af12:	83 ec 08             	sub    $0x8,%esp
f010af15:	52                   	push   %edx
f010af16:	50                   	push   %eax
f010af17:	e8 a0 cd ff ff       	call   f0107cbc <pt_clear_page_table_entry>
f010af1c:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			LIST_REMOVE(&modified_frame_list, ptr_fi);
f010af1f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010af23:	75 17                	jne    f010af3c <cleanup_buffers+0x62>
f010af25:	83 ec 04             	sub    $0x4,%esp
f010af28:	68 be 63 13 f0       	push   $0xf01363be
f010af2d:	68 f9 03 00 00       	push   $0x3f9
f010af32:	68 a1 63 13 f0       	push   $0xf01363a1
f010af37:	e8 c9 52 ff ff       	call   f0100205 <_panic>
f010af3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af3f:	8b 00                	mov    (%eax),%eax
f010af41:	85 c0                	test   %eax,%eax
f010af43:	74 10                	je     f010af55 <cleanup_buffers+0x7b>
f010af45:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af48:	8b 00                	mov    (%eax),%eax
f010af4a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010af4d:	8b 52 04             	mov    0x4(%edx),%edx
f010af50:	89 50 04             	mov    %edx,0x4(%eax)
f010af53:	eb 0b                	jmp    f010af60 <cleanup_buffers+0x86>
f010af55:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af58:	8b 40 04             	mov    0x4(%eax),%eax
f010af5b:	a3 bc 5c 87 f0       	mov    %eax,0xf0875cbc
f010af60:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af63:	8b 40 04             	mov    0x4(%eax),%eax
f010af66:	85 c0                	test   %eax,%eax
f010af68:	74 0f                	je     f010af79 <cleanup_buffers+0x9f>
f010af6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af6d:	8b 40 04             	mov    0x4(%eax),%eax
f010af70:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010af73:	8b 12                	mov    (%edx),%edx
f010af75:	89 10                	mov    %edx,(%eax)
f010af77:	eb 0a                	jmp    f010af83 <cleanup_buffers+0xa9>
f010af79:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af7c:	8b 00                	mov    (%eax),%eax
f010af7e:	a3 b8 5c 87 f0       	mov    %eax,0xf0875cb8
f010af83:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af86:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010af8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af8f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010af96:	a1 c4 5c 87 f0       	mov    0xf0875cc4,%eax
f010af9b:	48                   	dec    %eax
f010af9c:	a3 c4 5c 87 f0       	mov    %eax,0xf0875cc4

			free_frame(ptr_fi);
f010afa1:	83 ec 0c             	sub    $0xc,%esp
f010afa4:	ff 75 f4             	pushl  -0xc(%ebp)
f010afa7:	e8 5b ba ff ff       	call   f0106a07 <free_frame>
f010afac:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010afaf:	a1 c0 5c 87 f0       	mov    0xf0875cc0,%eax
f010afb4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010afb7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010afbb:	74 07                	je     f010afc4 <cleanup_buffers+0xea>
f010afbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010afc0:	8b 00                	mov    (%eax),%eax
f010afc2:	eb 05                	jmp    f010afc9 <cleanup_buffers+0xef>
f010afc4:	b8 00 00 00 00       	mov    $0x0,%eax
f010afc9:	a3 c0 5c 87 f0       	mov    %eax,0xf0875cc0
f010afce:	a1 c0 5c 87 f0       	mov    0xf0875cc0,%eax
f010afd3:	85 c0                	test   %eax,%eax
f010afd5:	0f 85 19 ff ff ff    	jne    f010aef4 <cleanup_buffers+0x1a>
f010afdb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010afdf:	0f 85 0f ff ff ff    	jne    f010aef4 <cleanup_buffers+0x1a>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f010afe5:	90                   	nop
f010afe6:	c9                   	leave  
f010afe7:	c3                   	ret    

f010afe8 <set_program_priority>:
#include "../disk/pagefile_manager.h"
#include "../mem/kheap.h"
#include "../mem/memory_manager.h"

void set_program_priority(struct Env* env, int priority)
{
f010afe8:	55                   	push   %ebp
f010afe9:	89 e5                	mov    %esp,%ebp
f010afeb:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] set_program_priority
	//[ALREADY IMPLEMENTED]

	if(priority < 1 || priority > 5)
f010afee:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010aff2:	7e 06                	jle    f010affa <set_program_priority+0x12>
f010aff4:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010aff8:	7e 14                	jle    f010b00e <set_program_priority+0x26>
	{
		panic("Please enter valid priority (1->5)\n");
f010affa:	83 ec 04             	sub    $0x4,%esp
f010affd:	68 10 65 13 f0       	push   $0xf0136510
f010b002:	6a 10                	push   $0x10
f010b004:	68 34 65 13 f0       	push   $0xf0136534
f010b009:	e8 f7 51 ff ff       	call   f0100205 <_panic>
		return;
	}
	if(env == NULL)
f010b00e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010b012:	74 75                	je     f010b089 <set_program_priority+0xa1>
		return;
	switch(priority)
f010b014:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010b018:	77 56                	ja     f010b070 <set_program_priority+0x88>
f010b01a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b01d:	c1 e0 02             	shl    $0x2,%eax
f010b020:	05 70 65 13 f0       	add    $0xf0136570,%eax
f010b025:	8b 00                	mov    (%eax),%eax
f010b027:	ff e0                	jmp    *%eax
	{
		case PRIORITY_LOW:
			half_WS_Size(env, 1);
f010b029:	83 ec 08             	sub    $0x8,%esp
f010b02c:	6a 01                	push   $0x1
f010b02e:	ff 75 08             	pushl  0x8(%ebp)
f010b031:	e8 fd d6 ff ff       	call   f0108733 <half_WS_Size>
f010b036:	83 c4 10             	add    $0x10,%esp
			break;
f010b039:	eb 35                	jmp    f010b070 <set_program_priority+0x88>
		case PRIORITY_BELOWNORMAL:
			half_WS_Size(env, 0);
f010b03b:	83 ec 08             	sub    $0x8,%esp
f010b03e:	6a 00                	push   $0x0
f010b040:	ff 75 08             	pushl  0x8(%ebp)
f010b043:	e8 eb d6 ff ff       	call   f0108733 <half_WS_Size>
f010b048:	83 c4 10             	add    $0x10,%esp
			break;
f010b04b:	eb 23                	jmp    f010b070 <set_program_priority+0x88>
		case PRIORITY_NORMAL:
			// Do Nothing
			break;
		case PRIORITY_ABOVENORMAL:
			double_WS_Size(env, 1);
f010b04d:	83 ec 08             	sub    $0x8,%esp
f010b050:	6a 01                	push   $0x1
f010b052:	ff 75 08             	pushl  0x8(%ebp)
f010b055:	e8 bc d6 ff ff       	call   f0108716 <double_WS_Size>
f010b05a:	83 c4 10             	add    $0x10,%esp
			break;
f010b05d:	eb 11                	jmp    f010b070 <set_program_priority+0x88>
		case PRIORITY_HIGH:
			double_WS_Size(env, 0);
f010b05f:	83 ec 08             	sub    $0x8,%esp
f010b062:	6a 00                	push   $0x0
f010b064:	ff 75 08             	pushl  0x8(%ebp)
f010b067:	e8 aa d6 ff ff       	call   f0108716 <double_WS_Size>
f010b06c:	83 c4 10             	add    $0x10,%esp
			break;
f010b06f:	90                   	nop
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
f010b070:	8b 45 08             	mov    0x8(%ebp),%eax
f010b073:	8b 40 74             	mov    0x74(%eax),%eax
f010b076:	83 ec 08             	sub    $0x8,%esp
f010b079:	50                   	push   %eax
f010b07a:	68 51 65 13 f0       	push   $0xf0136551
f010b07f:	e8 8a 5c ff ff       	call   f0100d0e <cprintf>
f010b084:	83 c4 10             	add    $0x10,%esp
f010b087:	eb 01                	jmp    f010b08a <set_program_priority+0xa2>
	{
		panic("Please enter valid priority (1->5)\n");
		return;
	}
	if(env == NULL)
		return;
f010b089:	90                   	nop
			double_WS_Size(env, 0);
			break;
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
}
f010b08a:	c9                   	leave  
f010b08b:	c3                   	ret    

f010b08c <get_user_program_info>:

// Number of user programs in the program table
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f010b08c:	55                   	push   %ebp
f010b08d:	89 e5                	mov    %esp,%ebp
f010b08f:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b092:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b099:	eb 29                	jmp    f010b0c4 <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f010b09b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b09e:	89 d0                	mov    %edx,%eax
f010b0a0:	01 c0                	add    %eax,%eax
f010b0a2:	01 d0                	add    %edx,%eax
f010b0a4:	c1 e0 02             	shl    $0x2,%eax
f010b0a7:	05 00 29 19 f0       	add    $0xf0192900,%eax
f010b0ac:	8b 00                	mov    (%eax),%eax
f010b0ae:	83 ec 08             	sub    $0x8,%esp
f010b0b1:	50                   	push   %eax
f010b0b2:	ff 75 08             	pushl  0x8(%ebp)
f010b0b5:	e8 1e 5f 02 00       	call   f0130fd8 <strcmp>
f010b0ba:	83 c4 10             	add    $0x10,%esp
f010b0bd:	85 c0                	test   %eax,%eax
f010b0bf:	74 0f                	je     f010b0d0 <get_user_program_info+0x44>
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b0c1:	ff 45 f4             	incl   -0xc(%ebp)
f010b0c4:	a1 18 2d 19 f0       	mov    0xf0192d18,%eax
f010b0c9:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b0cc:	7c cd                	jl     f010b09b <get_user_program_info+0xf>
f010b0ce:	eb 01                	jmp    f010b0d1 <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f010b0d0:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010b0d1:	a1 18 2d 19 f0       	mov    0xf0192d18,%eax
f010b0d6:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b0d9:	75 1a                	jne    f010b0f5 <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f010b0db:	83 ec 08             	sub    $0x8,%esp
f010b0de:	ff 75 08             	pushl  0x8(%ebp)
f010b0e1:	68 05 71 13 f0       	push   $0xf0137105
f010b0e6:	e8 23 5c ff ff       	call   f0100d0e <cprintf>
f010b0eb:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b0ee:	b8 00 00 00 00       	mov    $0x0,%eax
f010b0f3:	eb 11                	jmp    f010b106 <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f010b0f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b0f8:	89 d0                	mov    %edx,%eax
f010b0fa:	01 c0                	add    %eax,%eax
f010b0fc:	01 d0                	add    %edx,%eax
f010b0fe:	c1 e0 02             	shl    $0x2,%eax
f010b101:	05 00 29 19 f0       	add    $0xf0192900,%eax
}
f010b106:	c9                   	leave  
f010b107:	c3                   	ret    

f010b108 <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f010b108:	55                   	push   %ebp
f010b109:	89 e5                	mov    %esp,%ebp
f010b10b:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b10e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b115:	eb 30                	jmp    f010b147 <get_user_program_info_by_env+0x3f>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f010b117:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b11a:	89 d0                	mov    %edx,%eax
f010b11c:	01 c0                	add    %eax,%eax
f010b11e:	01 d0                	add    %edx,%eax
f010b120:	c1 e0 02             	shl    $0x2,%eax
f010b123:	05 00 29 19 f0       	add    $0xf0192900,%eax
f010b128:	8b 00                	mov    (%eax),%eax
f010b12a:	8b 55 08             	mov    0x8(%ebp),%edx
f010b12d:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f010b133:	83 ec 08             	sub    $0x8,%esp
f010b136:	50                   	push   %eax
f010b137:	52                   	push   %edx
f010b138:	e8 9b 5e 02 00       	call   f0130fd8 <strcmp>
f010b13d:	83 c4 10             	add    $0x10,%esp
f010b140:	85 c0                	test   %eax,%eax
f010b142:	74 0f                	je     f010b153 <get_user_program_info_by_env+0x4b>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b144:	ff 45 f4             	incl   -0xc(%ebp)
f010b147:	a1 18 2d 19 f0       	mov    0xf0192d18,%eax
f010b14c:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b14f:	7c c6                	jl     f010b117 <get_user_program_info_by_env+0xf>
f010b151:	eb 01                	jmp    f010b154 <get_user_program_info_by_env+0x4c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f010b153:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010b154:	a1 18 2d 19 f0       	mov    0xf0192d18,%eax
f010b159:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b15c:	75 17                	jne    f010b175 <get_user_program_info_by_env+0x6d>
	{
		cprintf("Unknown user program \n");
f010b15e:	83 ec 0c             	sub    $0xc,%esp
f010b161:	68 20 71 13 f0       	push   $0xf0137120
f010b166:	e8 a3 5b ff ff       	call   f0100d0e <cprintf>
f010b16b:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b16e:	b8 00 00 00 00       	mov    $0x0,%eax
f010b173:	eb 11                	jmp    f010b186 <get_user_program_info_by_env+0x7e>
	}

	return &userPrograms[i];
f010b175:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b178:	89 d0                	mov    %edx,%eax
f010b17a:	01 c0                	add    %eax,%eax
f010b17c:	01 d0                	add    %edx,%eax
f010b17e:	c1 e0 02             	shl    $0x2,%eax
f010b181:	05 00 29 19 f0       	add    $0xf0192900,%eax
}
f010b186:	c9                   	leave  
f010b187:	c3                   	ret    

f010b188 <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f010b188:	55                   	push   %ebp
f010b189:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f010b18b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b18e:	83 f8 13             	cmp    $0x13,%eax
f010b191:	77 0c                	ja     f010b19f <trapname+0x17>
		return excnames[trapno];
f010b193:	8b 45 08             	mov    0x8(%ebp),%eax
f010b196:	8b 04 85 60 75 13 f0 	mov    -0xfec8aa0(,%eax,4),%eax
f010b19d:	eb 12                	jmp    f010b1b1 <trapname+0x29>
	if (trapno == T_SYSCALL)
f010b19f:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010b1a3:	75 07                	jne    f010b1ac <trapname+0x24>
		return "System call";
f010b1a5:	b8 40 71 13 f0       	mov    $0xf0137140,%eax
f010b1aa:	eb 05                	jmp    f010b1b1 <trapname+0x29>
	return "(unknown trap)";
f010b1ac:	b8 4c 71 13 f0       	mov    $0xf013714c,%eax
}
f010b1b1:	5d                   	pop    %ebp
f010b1b2:	c3                   	ret    

f010b1b3 <idt_init>:


void
idt_init(void)
{
f010b1b3:	55                   	push   %ebp
f010b1b4:	89 e5                	mov    %esp,%ebp
f010b1b6:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f010b1b9:	b8 48 c8 10 f0       	mov    $0xf010c848,%eax
f010b1be:	66 a3 90 54 87 f0    	mov    %ax,0xf0875490
f010b1c4:	66 c7 05 92 54 87 f0 	movw   $0x8,0xf0875492
f010b1cb:	08 00 
f010b1cd:	a0 94 54 87 f0       	mov    0xf0875494,%al
f010b1d2:	83 e0 e0             	and    $0xffffffe0,%eax
f010b1d5:	a2 94 54 87 f0       	mov    %al,0xf0875494
f010b1da:	a0 94 54 87 f0       	mov    0xf0875494,%al
f010b1df:	83 e0 1f             	and    $0x1f,%eax
f010b1e2:	a2 94 54 87 f0       	mov    %al,0xf0875494
f010b1e7:	a0 95 54 87 f0       	mov    0xf0875495,%al
f010b1ec:	83 e0 f0             	and    $0xfffffff0,%eax
f010b1ef:	83 c8 0e             	or     $0xe,%eax
f010b1f2:	a2 95 54 87 f0       	mov    %al,0xf0875495
f010b1f7:	a0 95 54 87 f0       	mov    0xf0875495,%al
f010b1fc:	83 e0 ef             	and    $0xffffffef,%eax
f010b1ff:	a2 95 54 87 f0       	mov    %al,0xf0875495
f010b204:	a0 95 54 87 f0       	mov    0xf0875495,%al
f010b209:	83 e0 9f             	and    $0xffffff9f,%eax
f010b20c:	a2 95 54 87 f0       	mov    %al,0xf0875495
f010b211:	a0 95 54 87 f0       	mov    0xf0875495,%al
f010b216:	83 c8 80             	or     $0xffffff80,%eax
f010b219:	a2 95 54 87 f0       	mov    %al,0xf0875495
f010b21e:	b8 48 c8 10 f0       	mov    $0xf010c848,%eax
f010b223:	c1 e8 10             	shr    $0x10,%eax
f010b226:	66 a3 96 54 87 f0    	mov    %ax,0xf0875496
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f010b22c:	b8 50 c8 10 f0       	mov    $0xf010c850,%eax
f010b231:	66 a3 a0 55 87 f0    	mov    %ax,0xf08755a0
f010b237:	66 c7 05 a2 55 87 f0 	movw   $0x8,0xf08755a2
f010b23e:	08 00 
f010b240:	a0 a4 55 87 f0       	mov    0xf08755a4,%al
f010b245:	83 e0 e0             	and    $0xffffffe0,%eax
f010b248:	a2 a4 55 87 f0       	mov    %al,0xf08755a4
f010b24d:	a0 a4 55 87 f0       	mov    0xf08755a4,%al
f010b252:	83 e0 1f             	and    $0x1f,%eax
f010b255:	a2 a4 55 87 f0       	mov    %al,0xf08755a4
f010b25a:	a0 a5 55 87 f0       	mov    0xf08755a5,%al
f010b25f:	83 e0 f0             	and    $0xfffffff0,%eax
f010b262:	83 c8 0e             	or     $0xe,%eax
f010b265:	a2 a5 55 87 f0       	mov    %al,0xf08755a5
f010b26a:	a0 a5 55 87 f0       	mov    0xf08755a5,%al
f010b26f:	83 e0 ef             	and    $0xffffffef,%eax
f010b272:	a2 a5 55 87 f0       	mov    %al,0xf08755a5
f010b277:	a0 a5 55 87 f0       	mov    0xf08755a5,%al
f010b27c:	83 c8 60             	or     $0x60,%eax
f010b27f:	a2 a5 55 87 f0       	mov    %al,0xf08755a5
f010b284:	a0 a5 55 87 f0       	mov    0xf08755a5,%al
f010b289:	83 c8 80             	or     $0xffffff80,%eax
f010b28c:	a2 a5 55 87 f0       	mov    %al,0xf08755a5
f010b291:	b8 50 c8 10 f0       	mov    $0xf010c850,%eax
f010b296:	c1 e8 10             	shr    $0x10,%eax
f010b299:	66 a3 a6 55 87 f0    	mov    %ax,0xf08755a6
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f010b29f:	b8 5a c8 10 f0       	mov    $0xf010c85a,%eax
f010b2a4:	66 a3 60 54 87 f0    	mov    %ax,0xf0875460
f010b2aa:	66 c7 05 62 54 87 f0 	movw   $0x8,0xf0875462
f010b2b1:	08 00 
f010b2b3:	a0 64 54 87 f0       	mov    0xf0875464,%al
f010b2b8:	83 e0 e0             	and    $0xffffffe0,%eax
f010b2bb:	a2 64 54 87 f0       	mov    %al,0xf0875464
f010b2c0:	a0 64 54 87 f0       	mov    0xf0875464,%al
f010b2c5:	83 e0 1f             	and    $0x1f,%eax
f010b2c8:	a2 64 54 87 f0       	mov    %al,0xf0875464
f010b2cd:	a0 65 54 87 f0       	mov    0xf0875465,%al
f010b2d2:	83 e0 f0             	and    $0xfffffff0,%eax
f010b2d5:	83 c8 0e             	or     $0xe,%eax
f010b2d8:	a2 65 54 87 f0       	mov    %al,0xf0875465
f010b2dd:	a0 65 54 87 f0       	mov    0xf0875465,%al
f010b2e2:	83 e0 ef             	and    $0xffffffef,%eax
f010b2e5:	a2 65 54 87 f0       	mov    %al,0xf0875465
f010b2ea:	a0 65 54 87 f0       	mov    0xf0875465,%al
f010b2ef:	83 e0 9f             	and    $0xffffff9f,%eax
f010b2f2:	a2 65 54 87 f0       	mov    %al,0xf0875465
f010b2f7:	a0 65 54 87 f0       	mov    0xf0875465,%al
f010b2fc:	83 c8 80             	or     $0xffffff80,%eax
f010b2ff:	a2 65 54 87 f0       	mov    %al,0xf0875465
f010b304:	b8 5a c8 10 f0       	mov    $0xf010c85a,%eax
f010b309:	c1 e8 10             	shr    $0x10,%eax
f010b30c:	66 a3 66 54 87 f0    	mov    %ax,0xf0875466


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f010b312:	b8 62 c8 10 f0       	mov    $0xf010c862,%eax
f010b317:	66 a3 20 54 87 f0    	mov    %ax,0xf0875420
f010b31d:	66 c7 05 22 54 87 f0 	movw   $0x8,0xf0875422
f010b324:	08 00 
f010b326:	a0 24 54 87 f0       	mov    0xf0875424,%al
f010b32b:	83 e0 e0             	and    $0xffffffe0,%eax
f010b32e:	a2 24 54 87 f0       	mov    %al,0xf0875424
f010b333:	a0 24 54 87 f0       	mov    0xf0875424,%al
f010b338:	83 e0 1f             	and    $0x1f,%eax
f010b33b:	a2 24 54 87 f0       	mov    %al,0xf0875424
f010b340:	a0 25 54 87 f0       	mov    0xf0875425,%al
f010b345:	83 e0 f0             	and    $0xfffffff0,%eax
f010b348:	83 c8 0e             	or     $0xe,%eax
f010b34b:	a2 25 54 87 f0       	mov    %al,0xf0875425
f010b350:	a0 25 54 87 f0       	mov    0xf0875425,%al
f010b355:	83 e0 ef             	and    $0xffffffef,%eax
f010b358:	a2 25 54 87 f0       	mov    %al,0xf0875425
f010b35d:	a0 25 54 87 f0       	mov    0xf0875425,%al
f010b362:	83 c8 60             	or     $0x60,%eax
f010b365:	a2 25 54 87 f0       	mov    %al,0xf0875425
f010b36a:	a0 25 54 87 f0       	mov    0xf0875425,%al
f010b36f:	83 c8 80             	or     $0xffffff80,%eax
f010b372:	a2 25 54 87 f0       	mov    %al,0xf0875425
f010b377:	b8 62 c8 10 f0       	mov    $0xf010c862,%eax
f010b37c:	c1 e8 10             	shr    $0x10,%eax
f010b37f:	66 a3 26 54 87 f0    	mov    %ax,0xf0875426
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f010b385:	b8 6c c8 10 f0       	mov    $0xf010c86c,%eax
f010b38a:	66 a3 28 54 87 f0    	mov    %ax,0xf0875428
f010b390:	66 c7 05 2a 54 87 f0 	movw   $0x8,0xf087542a
f010b397:	08 00 
f010b399:	a0 2c 54 87 f0       	mov    0xf087542c,%al
f010b39e:	83 e0 e0             	and    $0xffffffe0,%eax
f010b3a1:	a2 2c 54 87 f0       	mov    %al,0xf087542c
f010b3a6:	a0 2c 54 87 f0       	mov    0xf087542c,%al
f010b3ab:	83 e0 1f             	and    $0x1f,%eax
f010b3ae:	a2 2c 54 87 f0       	mov    %al,0xf087542c
f010b3b3:	a0 2d 54 87 f0       	mov    0xf087542d,%al
f010b3b8:	83 c8 0f             	or     $0xf,%eax
f010b3bb:	a2 2d 54 87 f0       	mov    %al,0xf087542d
f010b3c0:	a0 2d 54 87 f0       	mov    0xf087542d,%al
f010b3c5:	83 e0 ef             	and    $0xffffffef,%eax
f010b3c8:	a2 2d 54 87 f0       	mov    %al,0xf087542d
f010b3cd:	a0 2d 54 87 f0       	mov    0xf087542d,%al
f010b3d2:	83 c8 60             	or     $0x60,%eax
f010b3d5:	a2 2d 54 87 f0       	mov    %al,0xf087542d
f010b3da:	a0 2d 54 87 f0       	mov    0xf087542d,%al
f010b3df:	83 c8 80             	or     $0xffffff80,%eax
f010b3e2:	a2 2d 54 87 f0       	mov    %al,0xf087542d
f010b3e7:	b8 6c c8 10 f0       	mov    $0xf010c86c,%eax
f010b3ec:	c1 e8 10             	shr    $0x10,%eax
f010b3ef:	66 a3 2e 54 87 f0    	mov    %ax,0xf087542e
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f010b3f5:	b8 76 c8 10 f0       	mov    $0xf010c876,%eax
f010b3fa:	66 a3 30 54 87 f0    	mov    %ax,0xf0875430
f010b400:	66 c7 05 32 54 87 f0 	movw   $0x8,0xf0875432
f010b407:	08 00 
f010b409:	a0 34 54 87 f0       	mov    0xf0875434,%al
f010b40e:	83 e0 e0             	and    $0xffffffe0,%eax
f010b411:	a2 34 54 87 f0       	mov    %al,0xf0875434
f010b416:	a0 34 54 87 f0       	mov    0xf0875434,%al
f010b41b:	83 e0 1f             	and    $0x1f,%eax
f010b41e:	a2 34 54 87 f0       	mov    %al,0xf0875434
f010b423:	a0 35 54 87 f0       	mov    0xf0875435,%al
f010b428:	83 e0 f0             	and    $0xfffffff0,%eax
f010b42b:	83 c8 0e             	or     $0xe,%eax
f010b42e:	a2 35 54 87 f0       	mov    %al,0xf0875435
f010b433:	a0 35 54 87 f0       	mov    0xf0875435,%al
f010b438:	83 e0 ef             	and    $0xffffffef,%eax
f010b43b:	a2 35 54 87 f0       	mov    %al,0xf0875435
f010b440:	a0 35 54 87 f0       	mov    0xf0875435,%al
f010b445:	83 c8 60             	or     $0x60,%eax
f010b448:	a2 35 54 87 f0       	mov    %al,0xf0875435
f010b44d:	a0 35 54 87 f0       	mov    0xf0875435,%al
f010b452:	83 c8 80             	or     $0xffffff80,%eax
f010b455:	a2 35 54 87 f0       	mov    %al,0xf0875435
f010b45a:	b8 76 c8 10 f0       	mov    $0xf010c876,%eax
f010b45f:	c1 e8 10             	shr    $0x10,%eax
f010b462:	66 a3 36 54 87 f0    	mov    %ax,0xf0875436
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010b468:	b8 80 c8 10 f0       	mov    $0xf010c880,%eax
f010b46d:	66 a3 38 54 87 f0    	mov    %ax,0xf0875438
f010b473:	66 c7 05 3a 54 87 f0 	movw   $0x8,0xf087543a
f010b47a:	08 00 
f010b47c:	a0 3c 54 87 f0       	mov    0xf087543c,%al
f010b481:	83 e0 e0             	and    $0xffffffe0,%eax
f010b484:	a2 3c 54 87 f0       	mov    %al,0xf087543c
f010b489:	a0 3c 54 87 f0       	mov    0xf087543c,%al
f010b48e:	83 e0 1f             	and    $0x1f,%eax
f010b491:	a2 3c 54 87 f0       	mov    %al,0xf087543c
f010b496:	a0 3d 54 87 f0       	mov    0xf087543d,%al
f010b49b:	83 c8 0f             	or     $0xf,%eax
f010b49e:	a2 3d 54 87 f0       	mov    %al,0xf087543d
f010b4a3:	a0 3d 54 87 f0       	mov    0xf087543d,%al
f010b4a8:	83 e0 ef             	and    $0xffffffef,%eax
f010b4ab:	a2 3d 54 87 f0       	mov    %al,0xf087543d
f010b4b0:	a0 3d 54 87 f0       	mov    0xf087543d,%al
f010b4b5:	83 c8 60             	or     $0x60,%eax
f010b4b8:	a2 3d 54 87 f0       	mov    %al,0xf087543d
f010b4bd:	a0 3d 54 87 f0       	mov    0xf087543d,%al
f010b4c2:	83 c8 80             	or     $0xffffff80,%eax
f010b4c5:	a2 3d 54 87 f0       	mov    %al,0xf087543d
f010b4ca:	b8 80 c8 10 f0       	mov    $0xf010c880,%eax
f010b4cf:	c1 e8 10             	shr    $0x10,%eax
f010b4d2:	66 a3 3e 54 87 f0    	mov    %ax,0xf087543e
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010b4d8:	b8 8a c8 10 f0       	mov    $0xf010c88a,%eax
f010b4dd:	66 a3 40 54 87 f0    	mov    %ax,0xf0875440
f010b4e3:	66 c7 05 42 54 87 f0 	movw   $0x8,0xf0875442
f010b4ea:	08 00 
f010b4ec:	a0 44 54 87 f0       	mov    0xf0875444,%al
f010b4f1:	83 e0 e0             	and    $0xffffffe0,%eax
f010b4f4:	a2 44 54 87 f0       	mov    %al,0xf0875444
f010b4f9:	a0 44 54 87 f0       	mov    0xf0875444,%al
f010b4fe:	83 e0 1f             	and    $0x1f,%eax
f010b501:	a2 44 54 87 f0       	mov    %al,0xf0875444
f010b506:	a0 45 54 87 f0       	mov    0xf0875445,%al
f010b50b:	83 c8 0f             	or     $0xf,%eax
f010b50e:	a2 45 54 87 f0       	mov    %al,0xf0875445
f010b513:	a0 45 54 87 f0       	mov    0xf0875445,%al
f010b518:	83 e0 ef             	and    $0xffffffef,%eax
f010b51b:	a2 45 54 87 f0       	mov    %al,0xf0875445
f010b520:	a0 45 54 87 f0       	mov    0xf0875445,%al
f010b525:	83 c8 60             	or     $0x60,%eax
f010b528:	a2 45 54 87 f0       	mov    %al,0xf0875445
f010b52d:	a0 45 54 87 f0       	mov    0xf0875445,%al
f010b532:	83 c8 80             	or     $0xffffff80,%eax
f010b535:	a2 45 54 87 f0       	mov    %al,0xf0875445
f010b53a:	b8 8a c8 10 f0       	mov    $0xf010c88a,%eax
f010b53f:	c1 e8 10             	shr    $0x10,%eax
f010b542:	66 a3 46 54 87 f0    	mov    %ax,0xf0875446
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010b548:	b8 94 c8 10 f0       	mov    $0xf010c894,%eax
f010b54d:	66 a3 48 54 87 f0    	mov    %ax,0xf0875448
f010b553:	66 c7 05 4a 54 87 f0 	movw   $0x8,0xf087544a
f010b55a:	08 00 
f010b55c:	a0 4c 54 87 f0       	mov    0xf087544c,%al
f010b561:	83 e0 e0             	and    $0xffffffe0,%eax
f010b564:	a2 4c 54 87 f0       	mov    %al,0xf087544c
f010b569:	a0 4c 54 87 f0       	mov    0xf087544c,%al
f010b56e:	83 e0 1f             	and    $0x1f,%eax
f010b571:	a2 4c 54 87 f0       	mov    %al,0xf087544c
f010b576:	a0 4d 54 87 f0       	mov    0xf087544d,%al
f010b57b:	83 e0 f0             	and    $0xfffffff0,%eax
f010b57e:	83 c8 0e             	or     $0xe,%eax
f010b581:	a2 4d 54 87 f0       	mov    %al,0xf087544d
f010b586:	a0 4d 54 87 f0       	mov    0xf087544d,%al
f010b58b:	83 e0 ef             	and    $0xffffffef,%eax
f010b58e:	a2 4d 54 87 f0       	mov    %al,0xf087544d
f010b593:	a0 4d 54 87 f0       	mov    0xf087544d,%al
f010b598:	83 c8 60             	or     $0x60,%eax
f010b59b:	a2 4d 54 87 f0       	mov    %al,0xf087544d
f010b5a0:	a0 4d 54 87 f0       	mov    0xf087544d,%al
f010b5a5:	83 c8 80             	or     $0xffffff80,%eax
f010b5a8:	a2 4d 54 87 f0       	mov    %al,0xf087544d
f010b5ad:	b8 94 c8 10 f0       	mov    $0xf010c894,%eax
f010b5b2:	c1 e8 10             	shr    $0x10,%eax
f010b5b5:	66 a3 4e 54 87 f0    	mov    %ax,0xf087544e
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010b5bb:	b8 9e c8 10 f0       	mov    $0xf010c89e,%eax
f010b5c0:	66 a3 50 54 87 f0    	mov    %ax,0xf0875450
f010b5c6:	66 c7 05 52 54 87 f0 	movw   $0x8,0xf0875452
f010b5cd:	08 00 
f010b5cf:	a0 54 54 87 f0       	mov    0xf0875454,%al
f010b5d4:	83 e0 e0             	and    $0xffffffe0,%eax
f010b5d7:	a2 54 54 87 f0       	mov    %al,0xf0875454
f010b5dc:	a0 54 54 87 f0       	mov    0xf0875454,%al
f010b5e1:	83 e0 1f             	and    $0x1f,%eax
f010b5e4:	a2 54 54 87 f0       	mov    %al,0xf0875454
f010b5e9:	a0 55 54 87 f0       	mov    0xf0875455,%al
f010b5ee:	83 e0 f0             	and    $0xfffffff0,%eax
f010b5f1:	83 c8 0e             	or     $0xe,%eax
f010b5f4:	a2 55 54 87 f0       	mov    %al,0xf0875455
f010b5f9:	a0 55 54 87 f0       	mov    0xf0875455,%al
f010b5fe:	83 e0 ef             	and    $0xffffffef,%eax
f010b601:	a2 55 54 87 f0       	mov    %al,0xf0875455
f010b606:	a0 55 54 87 f0       	mov    0xf0875455,%al
f010b60b:	83 c8 60             	or     $0x60,%eax
f010b60e:	a2 55 54 87 f0       	mov    %al,0xf0875455
f010b613:	a0 55 54 87 f0       	mov    0xf0875455,%al
f010b618:	83 c8 80             	or     $0xffffff80,%eax
f010b61b:	a2 55 54 87 f0       	mov    %al,0xf0875455
f010b620:	b8 9e c8 10 f0       	mov    $0xf010c89e,%eax
f010b625:	c1 e8 10             	shr    $0x10,%eax
f010b628:	66 a3 56 54 87 f0    	mov    %ax,0xf0875456
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f010b62e:	b8 a8 c8 10 f0       	mov    $0xf010c8a8,%eax
f010b633:	66 a3 58 54 87 f0    	mov    %ax,0xf0875458
f010b639:	66 c7 05 5a 54 87 f0 	movw   $0x8,0xf087545a
f010b640:	08 00 
f010b642:	a0 5c 54 87 f0       	mov    0xf087545c,%al
f010b647:	83 e0 e0             	and    $0xffffffe0,%eax
f010b64a:	a2 5c 54 87 f0       	mov    %al,0xf087545c
f010b64f:	a0 5c 54 87 f0       	mov    0xf087545c,%al
f010b654:	83 e0 1f             	and    $0x1f,%eax
f010b657:	a2 5c 54 87 f0       	mov    %al,0xf087545c
f010b65c:	a0 5d 54 87 f0       	mov    0xf087545d,%al
f010b661:	83 e0 f0             	and    $0xfffffff0,%eax
f010b664:	83 c8 0e             	or     $0xe,%eax
f010b667:	a2 5d 54 87 f0       	mov    %al,0xf087545d
f010b66c:	a0 5d 54 87 f0       	mov    0xf087545d,%al
f010b671:	83 e0 ef             	and    $0xffffffef,%eax
f010b674:	a2 5d 54 87 f0       	mov    %al,0xf087545d
f010b679:	a0 5d 54 87 f0       	mov    0xf087545d,%al
f010b67e:	83 c8 60             	or     $0x60,%eax
f010b681:	a2 5d 54 87 f0       	mov    %al,0xf087545d
f010b686:	a0 5d 54 87 f0       	mov    0xf087545d,%al
f010b68b:	83 c8 80             	or     $0xffffff80,%eax
f010b68e:	a2 5d 54 87 f0       	mov    %al,0xf087545d
f010b693:	b8 a8 c8 10 f0       	mov    $0xf010c8a8,%eax
f010b698:	c1 e8 10             	shr    $0x10,%eax
f010b69b:	66 a3 5e 54 87 f0    	mov    %ax,0xf087545e
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f010b6a1:	b8 b2 c8 10 f0       	mov    $0xf010c8b2,%eax
f010b6a6:	66 a3 70 54 87 f0    	mov    %ax,0xf0875470
f010b6ac:	66 c7 05 72 54 87 f0 	movw   $0x8,0xf0875472
f010b6b3:	08 00 
f010b6b5:	a0 74 54 87 f0       	mov    0xf0875474,%al
f010b6ba:	83 e0 e0             	and    $0xffffffe0,%eax
f010b6bd:	a2 74 54 87 f0       	mov    %al,0xf0875474
f010b6c2:	a0 74 54 87 f0       	mov    0xf0875474,%al
f010b6c7:	83 e0 1f             	and    $0x1f,%eax
f010b6ca:	a2 74 54 87 f0       	mov    %al,0xf0875474
f010b6cf:	a0 75 54 87 f0       	mov    0xf0875475,%al
f010b6d4:	83 e0 f0             	and    $0xfffffff0,%eax
f010b6d7:	83 c8 0e             	or     $0xe,%eax
f010b6da:	a2 75 54 87 f0       	mov    %al,0xf0875475
f010b6df:	a0 75 54 87 f0       	mov    0xf0875475,%al
f010b6e4:	83 e0 ef             	and    $0xffffffef,%eax
f010b6e7:	a2 75 54 87 f0       	mov    %al,0xf0875475
f010b6ec:	a0 75 54 87 f0       	mov    0xf0875475,%al
f010b6f1:	83 c8 60             	or     $0x60,%eax
f010b6f4:	a2 75 54 87 f0       	mov    %al,0xf0875475
f010b6f9:	a0 75 54 87 f0       	mov    0xf0875475,%al
f010b6fe:	83 c8 80             	or     $0xffffff80,%eax
f010b701:	a2 75 54 87 f0       	mov    %al,0xf0875475
f010b706:	b8 b2 c8 10 f0       	mov    $0xf010c8b2,%eax
f010b70b:	c1 e8 10             	shr    $0x10,%eax
f010b70e:	66 a3 76 54 87 f0    	mov    %ax,0xf0875476
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f010b714:	b8 ba c8 10 f0       	mov    $0xf010c8ba,%eax
f010b719:	66 a3 78 54 87 f0    	mov    %ax,0xf0875478
f010b71f:	66 c7 05 7a 54 87 f0 	movw   $0x8,0xf087547a
f010b726:	08 00 
f010b728:	a0 7c 54 87 f0       	mov    0xf087547c,%al
f010b72d:	83 e0 e0             	and    $0xffffffe0,%eax
f010b730:	a2 7c 54 87 f0       	mov    %al,0xf087547c
f010b735:	a0 7c 54 87 f0       	mov    0xf087547c,%al
f010b73a:	83 e0 1f             	and    $0x1f,%eax
f010b73d:	a2 7c 54 87 f0       	mov    %al,0xf087547c
f010b742:	a0 7d 54 87 f0       	mov    0xf087547d,%al
f010b747:	83 e0 f0             	and    $0xfffffff0,%eax
f010b74a:	83 c8 0e             	or     $0xe,%eax
f010b74d:	a2 7d 54 87 f0       	mov    %al,0xf087547d
f010b752:	a0 7d 54 87 f0       	mov    0xf087547d,%al
f010b757:	83 e0 ef             	and    $0xffffffef,%eax
f010b75a:	a2 7d 54 87 f0       	mov    %al,0xf087547d
f010b75f:	a0 7d 54 87 f0       	mov    0xf087547d,%al
f010b764:	83 c8 60             	or     $0x60,%eax
f010b767:	a2 7d 54 87 f0       	mov    %al,0xf087547d
f010b76c:	a0 7d 54 87 f0       	mov    0xf087547d,%al
f010b771:	83 c8 80             	or     $0xffffff80,%eax
f010b774:	a2 7d 54 87 f0       	mov    %al,0xf087547d
f010b779:	b8 ba c8 10 f0       	mov    $0xf010c8ba,%eax
f010b77e:	c1 e8 10             	shr    $0x10,%eax
f010b781:	66 a3 7e 54 87 f0    	mov    %ax,0xf087547e
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f010b787:	b8 be c8 10 f0       	mov    $0xf010c8be,%eax
f010b78c:	66 a3 80 54 87 f0    	mov    %ax,0xf0875480
f010b792:	66 c7 05 82 54 87 f0 	movw   $0x8,0xf0875482
f010b799:	08 00 
f010b79b:	a0 84 54 87 f0       	mov    0xf0875484,%al
f010b7a0:	83 e0 e0             	and    $0xffffffe0,%eax
f010b7a3:	a2 84 54 87 f0       	mov    %al,0xf0875484
f010b7a8:	a0 84 54 87 f0       	mov    0xf0875484,%al
f010b7ad:	83 e0 1f             	and    $0x1f,%eax
f010b7b0:	a2 84 54 87 f0       	mov    %al,0xf0875484
f010b7b5:	a0 85 54 87 f0       	mov    0xf0875485,%al
f010b7ba:	83 e0 f0             	and    $0xfffffff0,%eax
f010b7bd:	83 c8 0e             	or     $0xe,%eax
f010b7c0:	a2 85 54 87 f0       	mov    %al,0xf0875485
f010b7c5:	a0 85 54 87 f0       	mov    0xf0875485,%al
f010b7ca:	83 e0 ef             	and    $0xffffffef,%eax
f010b7cd:	a2 85 54 87 f0       	mov    %al,0xf0875485
f010b7d2:	a0 85 54 87 f0       	mov    0xf0875485,%al
f010b7d7:	83 c8 60             	or     $0x60,%eax
f010b7da:	a2 85 54 87 f0       	mov    %al,0xf0875485
f010b7df:	a0 85 54 87 f0       	mov    0xf0875485,%al
f010b7e4:	83 c8 80             	or     $0xffffff80,%eax
f010b7e7:	a2 85 54 87 f0       	mov    %al,0xf0875485
f010b7ec:	b8 be c8 10 f0       	mov    $0xf010c8be,%eax
f010b7f1:	c1 e8 10             	shr    $0x10,%eax
f010b7f4:	66 a3 86 54 87 f0    	mov    %ax,0xf0875486
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010b7fa:	b8 c2 c8 10 f0       	mov    $0xf010c8c2,%eax
f010b7ff:	66 a3 88 54 87 f0    	mov    %ax,0xf0875488
f010b805:	66 c7 05 8a 54 87 f0 	movw   $0x8,0xf087548a
f010b80c:	08 00 
f010b80e:	a0 8c 54 87 f0       	mov    0xf087548c,%al
f010b813:	83 e0 e0             	and    $0xffffffe0,%eax
f010b816:	a2 8c 54 87 f0       	mov    %al,0xf087548c
f010b81b:	a0 8c 54 87 f0       	mov    0xf087548c,%al
f010b820:	83 e0 1f             	and    $0x1f,%eax
f010b823:	a2 8c 54 87 f0       	mov    %al,0xf087548c
f010b828:	a0 8d 54 87 f0       	mov    0xf087548d,%al
f010b82d:	83 e0 f0             	and    $0xfffffff0,%eax
f010b830:	83 c8 0e             	or     $0xe,%eax
f010b833:	a2 8d 54 87 f0       	mov    %al,0xf087548d
f010b838:	a0 8d 54 87 f0       	mov    0xf087548d,%al
f010b83d:	83 e0 ef             	and    $0xffffffef,%eax
f010b840:	a2 8d 54 87 f0       	mov    %al,0xf087548d
f010b845:	a0 8d 54 87 f0       	mov    0xf087548d,%al
f010b84a:	83 c8 60             	or     $0x60,%eax
f010b84d:	a2 8d 54 87 f0       	mov    %al,0xf087548d
f010b852:	a0 8d 54 87 f0       	mov    0xf087548d,%al
f010b857:	83 c8 80             	or     $0xffffff80,%eax
f010b85a:	a2 8d 54 87 f0       	mov    %al,0xf087548d
f010b85f:	b8 c2 c8 10 f0       	mov    $0xf010c8c2,%eax
f010b864:	c1 e8 10             	shr    $0x10,%eax
f010b867:	66 a3 8e 54 87 f0    	mov    %ax,0xf087548e
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f010b86d:	b8 c6 c8 10 f0       	mov    $0xf010c8c6,%eax
f010b872:	66 a3 a0 54 87 f0    	mov    %ax,0xf08754a0
f010b878:	66 c7 05 a2 54 87 f0 	movw   $0x8,0xf08754a2
f010b87f:	08 00 
f010b881:	a0 a4 54 87 f0       	mov    0xf08754a4,%al
f010b886:	83 e0 e0             	and    $0xffffffe0,%eax
f010b889:	a2 a4 54 87 f0       	mov    %al,0xf08754a4
f010b88e:	a0 a4 54 87 f0       	mov    0xf08754a4,%al
f010b893:	83 e0 1f             	and    $0x1f,%eax
f010b896:	a2 a4 54 87 f0       	mov    %al,0xf08754a4
f010b89b:	a0 a5 54 87 f0       	mov    0xf08754a5,%al
f010b8a0:	83 e0 f0             	and    $0xfffffff0,%eax
f010b8a3:	83 c8 0e             	or     $0xe,%eax
f010b8a6:	a2 a5 54 87 f0       	mov    %al,0xf08754a5
f010b8ab:	a0 a5 54 87 f0       	mov    0xf08754a5,%al
f010b8b0:	83 e0 ef             	and    $0xffffffef,%eax
f010b8b3:	a2 a5 54 87 f0       	mov    %al,0xf08754a5
f010b8b8:	a0 a5 54 87 f0       	mov    0xf08754a5,%al
f010b8bd:	83 c8 60             	or     $0x60,%eax
f010b8c0:	a2 a5 54 87 f0       	mov    %al,0xf08754a5
f010b8c5:	a0 a5 54 87 f0       	mov    0xf08754a5,%al
f010b8ca:	83 c8 80             	or     $0xffffff80,%eax
f010b8cd:	a2 a5 54 87 f0       	mov    %al,0xf08754a5
f010b8d2:	b8 c6 c8 10 f0       	mov    $0xf010c8c6,%eax
f010b8d7:	c1 e8 10             	shr    $0x10,%eax
f010b8da:	66 a3 a6 54 87 f0    	mov    %ax,0xf08754a6
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f010b8e0:	b8 cc c8 10 f0       	mov    $0xf010c8cc,%eax
f010b8e5:	66 a3 a8 54 87 f0    	mov    %ax,0xf08754a8
f010b8eb:	66 c7 05 aa 54 87 f0 	movw   $0x8,0xf08754aa
f010b8f2:	08 00 
f010b8f4:	a0 ac 54 87 f0       	mov    0xf08754ac,%al
f010b8f9:	83 e0 e0             	and    $0xffffffe0,%eax
f010b8fc:	a2 ac 54 87 f0       	mov    %al,0xf08754ac
f010b901:	a0 ac 54 87 f0       	mov    0xf08754ac,%al
f010b906:	83 e0 1f             	and    $0x1f,%eax
f010b909:	a2 ac 54 87 f0       	mov    %al,0xf08754ac
f010b90e:	a0 ad 54 87 f0       	mov    0xf08754ad,%al
f010b913:	83 e0 f0             	and    $0xfffffff0,%eax
f010b916:	83 c8 0e             	or     $0xe,%eax
f010b919:	a2 ad 54 87 f0       	mov    %al,0xf08754ad
f010b91e:	a0 ad 54 87 f0       	mov    0xf08754ad,%al
f010b923:	83 e0 ef             	and    $0xffffffef,%eax
f010b926:	a2 ad 54 87 f0       	mov    %al,0xf08754ad
f010b92b:	a0 ad 54 87 f0       	mov    0xf08754ad,%al
f010b930:	83 c8 60             	or     $0x60,%eax
f010b933:	a2 ad 54 87 f0       	mov    %al,0xf08754ad
f010b938:	a0 ad 54 87 f0       	mov    0xf08754ad,%al
f010b93d:	83 c8 80             	or     $0xffffff80,%eax
f010b940:	a2 ad 54 87 f0       	mov    %al,0xf08754ad
f010b945:	b8 cc c8 10 f0       	mov    $0xf010c8cc,%eax
f010b94a:	c1 e8 10             	shr    $0x10,%eax
f010b94d:	66 a3 ae 54 87 f0    	mov    %ax,0xf08754ae
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f010b953:	b8 d0 c8 10 f0       	mov    $0xf010c8d0,%eax
f010b958:	66 a3 b0 54 87 f0    	mov    %ax,0xf08754b0
f010b95e:	66 c7 05 b2 54 87 f0 	movw   $0x8,0xf08754b2
f010b965:	08 00 
f010b967:	a0 b4 54 87 f0       	mov    0xf08754b4,%al
f010b96c:	83 e0 e0             	and    $0xffffffe0,%eax
f010b96f:	a2 b4 54 87 f0       	mov    %al,0xf08754b4
f010b974:	a0 b4 54 87 f0       	mov    0xf08754b4,%al
f010b979:	83 e0 1f             	and    $0x1f,%eax
f010b97c:	a2 b4 54 87 f0       	mov    %al,0xf08754b4
f010b981:	a0 b5 54 87 f0       	mov    0xf08754b5,%al
f010b986:	83 e0 f0             	and    $0xfffffff0,%eax
f010b989:	83 c8 0e             	or     $0xe,%eax
f010b98c:	a2 b5 54 87 f0       	mov    %al,0xf08754b5
f010b991:	a0 b5 54 87 f0       	mov    0xf08754b5,%al
f010b996:	83 e0 ef             	and    $0xffffffef,%eax
f010b999:	a2 b5 54 87 f0       	mov    %al,0xf08754b5
f010b99e:	a0 b5 54 87 f0       	mov    0xf08754b5,%al
f010b9a3:	83 c8 60             	or     $0x60,%eax
f010b9a6:	a2 b5 54 87 f0       	mov    %al,0xf08754b5
f010b9ab:	a0 b5 54 87 f0       	mov    0xf08754b5,%al
f010b9b0:	83 c8 80             	or     $0xffffff80,%eax
f010b9b3:	a2 b5 54 87 f0       	mov    %al,0xf08754b5
f010b9b8:	b8 d0 c8 10 f0       	mov    $0xf010c8d0,%eax
f010b9bd:	c1 e8 10             	shr    $0x10,%eax
f010b9c0:	66 a3 b6 54 87 f0    	mov    %ax,0xf08754b6
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f010b9c6:	b8 d6 c8 10 f0       	mov    $0xf010c8d6,%eax
f010b9cb:	66 a3 b8 54 87 f0    	mov    %ax,0xf08754b8
f010b9d1:	66 c7 05 ba 54 87 f0 	movw   $0x8,0xf08754ba
f010b9d8:	08 00 
f010b9da:	a0 bc 54 87 f0       	mov    0xf08754bc,%al
f010b9df:	83 e0 e0             	and    $0xffffffe0,%eax
f010b9e2:	a2 bc 54 87 f0       	mov    %al,0xf08754bc
f010b9e7:	a0 bc 54 87 f0       	mov    0xf08754bc,%al
f010b9ec:	83 e0 1f             	and    $0x1f,%eax
f010b9ef:	a2 bc 54 87 f0       	mov    %al,0xf08754bc
f010b9f4:	a0 bd 54 87 f0       	mov    0xf08754bd,%al
f010b9f9:	83 e0 f0             	and    $0xfffffff0,%eax
f010b9fc:	83 c8 0e             	or     $0xe,%eax
f010b9ff:	a2 bd 54 87 f0       	mov    %al,0xf08754bd
f010ba04:	a0 bd 54 87 f0       	mov    0xf08754bd,%al
f010ba09:	83 e0 ef             	and    $0xffffffef,%eax
f010ba0c:	a2 bd 54 87 f0       	mov    %al,0xf08754bd
f010ba11:	a0 bd 54 87 f0       	mov    0xf08754bd,%al
f010ba16:	83 c8 60             	or     $0x60,%eax
f010ba19:	a2 bd 54 87 f0       	mov    %al,0xf08754bd
f010ba1e:	a0 bd 54 87 f0       	mov    0xf08754bd,%al
f010ba23:	83 c8 80             	or     $0xffffff80,%eax
f010ba26:	a2 bd 54 87 f0       	mov    %al,0xf08754bd
f010ba2b:	b8 d6 c8 10 f0       	mov    $0xf010c8d6,%eax
f010ba30:	c1 e8 10             	shr    $0x10,%eax
f010ba33:	66 a3 be 54 87 f0    	mov    %ax,0xf08754be


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f010ba39:	b8 dc c8 10 f0       	mov    $0xf010c8dc,%eax
f010ba3e:	66 a3 20 55 87 f0    	mov    %ax,0xf0875520
f010ba44:	66 c7 05 22 55 87 f0 	movw   $0x8,0xf0875522
f010ba4b:	08 00 
f010ba4d:	a0 24 55 87 f0       	mov    0xf0875524,%al
f010ba52:	83 e0 e0             	and    $0xffffffe0,%eax
f010ba55:	a2 24 55 87 f0       	mov    %al,0xf0875524
f010ba5a:	a0 24 55 87 f0       	mov    0xf0875524,%al
f010ba5f:	83 e0 1f             	and    $0x1f,%eax
f010ba62:	a2 24 55 87 f0       	mov    %al,0xf0875524
f010ba67:	a0 25 55 87 f0       	mov    0xf0875525,%al
f010ba6c:	83 e0 f0             	and    $0xfffffff0,%eax
f010ba6f:	83 c8 0e             	or     $0xe,%eax
f010ba72:	a2 25 55 87 f0       	mov    %al,0xf0875525
f010ba77:	a0 25 55 87 f0       	mov    0xf0875525,%al
f010ba7c:	83 e0 ef             	and    $0xffffffef,%eax
f010ba7f:	a2 25 55 87 f0       	mov    %al,0xf0875525
f010ba84:	a0 25 55 87 f0       	mov    0xf0875525,%al
f010ba89:	83 c8 60             	or     $0x60,%eax
f010ba8c:	a2 25 55 87 f0       	mov    %al,0xf0875525
f010ba91:	a0 25 55 87 f0       	mov    0xf0875525,%al
f010ba96:	83 c8 80             	or     $0xffffff80,%eax
f010ba99:	a2 25 55 87 f0       	mov    %al,0xf0875525
f010ba9e:	b8 dc c8 10 f0       	mov    $0xf010c8dc,%eax
f010baa3:	c1 e8 10             	shr    $0x10,%eax
f010baa6:	66 a3 26 55 87 f0    	mov    %ax,0xf0875526
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f010baac:	b8 e2 c8 10 f0       	mov    $0xf010c8e2,%eax
f010bab1:	66 a3 28 55 87 f0    	mov    %ax,0xf0875528
f010bab7:	66 c7 05 2a 55 87 f0 	movw   $0x8,0xf087552a
f010babe:	08 00 
f010bac0:	a0 2c 55 87 f0       	mov    0xf087552c,%al
f010bac5:	83 e0 e0             	and    $0xffffffe0,%eax
f010bac8:	a2 2c 55 87 f0       	mov    %al,0xf087552c
f010bacd:	a0 2c 55 87 f0       	mov    0xf087552c,%al
f010bad2:	83 e0 1f             	and    $0x1f,%eax
f010bad5:	a2 2c 55 87 f0       	mov    %al,0xf087552c
f010bada:	a0 2d 55 87 f0       	mov    0xf087552d,%al
f010badf:	83 e0 f0             	and    $0xfffffff0,%eax
f010bae2:	83 c8 0e             	or     $0xe,%eax
f010bae5:	a2 2d 55 87 f0       	mov    %al,0xf087552d
f010baea:	a0 2d 55 87 f0       	mov    0xf087552d,%al
f010baef:	83 e0 ef             	and    $0xffffffef,%eax
f010baf2:	a2 2d 55 87 f0       	mov    %al,0xf087552d
f010baf7:	a0 2d 55 87 f0       	mov    0xf087552d,%al
f010bafc:	83 c8 60             	or     $0x60,%eax
f010baff:	a2 2d 55 87 f0       	mov    %al,0xf087552d
f010bb04:	a0 2d 55 87 f0       	mov    0xf087552d,%al
f010bb09:	83 c8 80             	or     $0xffffff80,%eax
f010bb0c:	a2 2d 55 87 f0       	mov    %al,0xf087552d
f010bb11:	b8 e2 c8 10 f0       	mov    $0xf010c8e2,%eax
f010bb16:	c1 e8 10             	shr    $0x10,%eax
f010bb19:	66 a3 2e 55 87 f0    	mov    %ax,0xf087552e
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f010bb1f:	b8 e8 c8 10 f0       	mov    $0xf010c8e8,%eax
f010bb24:	66 a3 30 55 87 f0    	mov    %ax,0xf0875530
f010bb2a:	66 c7 05 32 55 87 f0 	movw   $0x8,0xf0875532
f010bb31:	08 00 
f010bb33:	a0 34 55 87 f0       	mov    0xf0875534,%al
f010bb38:	83 e0 e0             	and    $0xffffffe0,%eax
f010bb3b:	a2 34 55 87 f0       	mov    %al,0xf0875534
f010bb40:	a0 34 55 87 f0       	mov    0xf0875534,%al
f010bb45:	83 e0 1f             	and    $0x1f,%eax
f010bb48:	a2 34 55 87 f0       	mov    %al,0xf0875534
f010bb4d:	a0 35 55 87 f0       	mov    0xf0875535,%al
f010bb52:	83 e0 f0             	and    $0xfffffff0,%eax
f010bb55:	83 c8 0e             	or     $0xe,%eax
f010bb58:	a2 35 55 87 f0       	mov    %al,0xf0875535
f010bb5d:	a0 35 55 87 f0       	mov    0xf0875535,%al
f010bb62:	83 e0 ef             	and    $0xffffffef,%eax
f010bb65:	a2 35 55 87 f0       	mov    %al,0xf0875535
f010bb6a:	a0 35 55 87 f0       	mov    0xf0875535,%al
f010bb6f:	83 c8 60             	or     $0x60,%eax
f010bb72:	a2 35 55 87 f0       	mov    %al,0xf0875535
f010bb77:	a0 35 55 87 f0       	mov    0xf0875535,%al
f010bb7c:	83 c8 80             	or     $0xffffff80,%eax
f010bb7f:	a2 35 55 87 f0       	mov    %al,0xf0875535
f010bb84:	b8 e8 c8 10 f0       	mov    $0xf010c8e8,%eax
f010bb89:	c1 e8 10             	shr    $0x10,%eax
f010bb8c:	66 a3 36 55 87 f0    	mov    %ax,0xf0875536
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f010bb92:	b8 ee c8 10 f0       	mov    $0xf010c8ee,%eax
f010bb97:	66 a3 38 55 87 f0    	mov    %ax,0xf0875538
f010bb9d:	66 c7 05 3a 55 87 f0 	movw   $0x8,0xf087553a
f010bba4:	08 00 
f010bba6:	a0 3c 55 87 f0       	mov    0xf087553c,%al
f010bbab:	83 e0 e0             	and    $0xffffffe0,%eax
f010bbae:	a2 3c 55 87 f0       	mov    %al,0xf087553c
f010bbb3:	a0 3c 55 87 f0       	mov    0xf087553c,%al
f010bbb8:	83 e0 1f             	and    $0x1f,%eax
f010bbbb:	a2 3c 55 87 f0       	mov    %al,0xf087553c
f010bbc0:	a0 3d 55 87 f0       	mov    0xf087553d,%al
f010bbc5:	83 e0 f0             	and    $0xfffffff0,%eax
f010bbc8:	83 c8 0e             	or     $0xe,%eax
f010bbcb:	a2 3d 55 87 f0       	mov    %al,0xf087553d
f010bbd0:	a0 3d 55 87 f0       	mov    0xf087553d,%al
f010bbd5:	83 e0 ef             	and    $0xffffffef,%eax
f010bbd8:	a2 3d 55 87 f0       	mov    %al,0xf087553d
f010bbdd:	a0 3d 55 87 f0       	mov    0xf087553d,%al
f010bbe2:	83 c8 60             	or     $0x60,%eax
f010bbe5:	a2 3d 55 87 f0       	mov    %al,0xf087553d
f010bbea:	a0 3d 55 87 f0       	mov    0xf087553d,%al
f010bbef:	83 c8 80             	or     $0xffffff80,%eax
f010bbf2:	a2 3d 55 87 f0       	mov    %al,0xf087553d
f010bbf7:	b8 ee c8 10 f0       	mov    $0xf010c8ee,%eax
f010bbfc:	c1 e8 10             	shr    $0x10,%eax
f010bbff:	66 a3 3e 55 87 f0    	mov    %ax,0xf087553e
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f010bc05:	b8 f4 c8 10 f0       	mov    $0xf010c8f4,%eax
f010bc0a:	66 a3 40 55 87 f0    	mov    %ax,0xf0875540
f010bc10:	66 c7 05 42 55 87 f0 	movw   $0x8,0xf0875542
f010bc17:	08 00 
f010bc19:	a0 44 55 87 f0       	mov    0xf0875544,%al
f010bc1e:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc21:	a2 44 55 87 f0       	mov    %al,0xf0875544
f010bc26:	a0 44 55 87 f0       	mov    0xf0875544,%al
f010bc2b:	83 e0 1f             	and    $0x1f,%eax
f010bc2e:	a2 44 55 87 f0       	mov    %al,0xf0875544
f010bc33:	a0 45 55 87 f0       	mov    0xf0875545,%al
f010bc38:	83 e0 f0             	and    $0xfffffff0,%eax
f010bc3b:	83 c8 0e             	or     $0xe,%eax
f010bc3e:	a2 45 55 87 f0       	mov    %al,0xf0875545
f010bc43:	a0 45 55 87 f0       	mov    0xf0875545,%al
f010bc48:	83 e0 ef             	and    $0xffffffef,%eax
f010bc4b:	a2 45 55 87 f0       	mov    %al,0xf0875545
f010bc50:	a0 45 55 87 f0       	mov    0xf0875545,%al
f010bc55:	83 c8 60             	or     $0x60,%eax
f010bc58:	a2 45 55 87 f0       	mov    %al,0xf0875545
f010bc5d:	a0 45 55 87 f0       	mov    0xf0875545,%al
f010bc62:	83 c8 80             	or     $0xffffff80,%eax
f010bc65:	a2 45 55 87 f0       	mov    %al,0xf0875545
f010bc6a:	b8 f4 c8 10 f0       	mov    $0xf010c8f4,%eax
f010bc6f:	c1 e8 10             	shr    $0x10,%eax
f010bc72:	66 a3 46 55 87 f0    	mov    %ax,0xf0875546
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f010bc78:	b8 fa c8 10 f0       	mov    $0xf010c8fa,%eax
f010bc7d:	66 a3 48 55 87 f0    	mov    %ax,0xf0875548
f010bc83:	66 c7 05 4a 55 87 f0 	movw   $0x8,0xf087554a
f010bc8a:	08 00 
f010bc8c:	a0 4c 55 87 f0       	mov    0xf087554c,%al
f010bc91:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc94:	a2 4c 55 87 f0       	mov    %al,0xf087554c
f010bc99:	a0 4c 55 87 f0       	mov    0xf087554c,%al
f010bc9e:	83 e0 1f             	and    $0x1f,%eax
f010bca1:	a2 4c 55 87 f0       	mov    %al,0xf087554c
f010bca6:	a0 4d 55 87 f0       	mov    0xf087554d,%al
f010bcab:	83 e0 f0             	and    $0xfffffff0,%eax
f010bcae:	83 c8 0e             	or     $0xe,%eax
f010bcb1:	a2 4d 55 87 f0       	mov    %al,0xf087554d
f010bcb6:	a0 4d 55 87 f0       	mov    0xf087554d,%al
f010bcbb:	83 e0 ef             	and    $0xffffffef,%eax
f010bcbe:	a2 4d 55 87 f0       	mov    %al,0xf087554d
f010bcc3:	a0 4d 55 87 f0       	mov    0xf087554d,%al
f010bcc8:	83 c8 60             	or     $0x60,%eax
f010bccb:	a2 4d 55 87 f0       	mov    %al,0xf087554d
f010bcd0:	a0 4d 55 87 f0       	mov    0xf087554d,%al
f010bcd5:	83 c8 80             	or     $0xffffff80,%eax
f010bcd8:	a2 4d 55 87 f0       	mov    %al,0xf087554d
f010bcdd:	b8 fa c8 10 f0       	mov    $0xf010c8fa,%eax
f010bce2:	c1 e8 10             	shr    $0x10,%eax
f010bce5:	66 a3 4e 55 87 f0    	mov    %ax,0xf087554e
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010bceb:	b8 00 c9 10 f0       	mov    $0xf010c900,%eax
f010bcf0:	66 a3 50 55 87 f0    	mov    %ax,0xf0875550
f010bcf6:	66 c7 05 52 55 87 f0 	movw   $0x8,0xf0875552
f010bcfd:	08 00 
f010bcff:	a0 54 55 87 f0       	mov    0xf0875554,%al
f010bd04:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd07:	a2 54 55 87 f0       	mov    %al,0xf0875554
f010bd0c:	a0 54 55 87 f0       	mov    0xf0875554,%al
f010bd11:	83 e0 1f             	and    $0x1f,%eax
f010bd14:	a2 54 55 87 f0       	mov    %al,0xf0875554
f010bd19:	a0 55 55 87 f0       	mov    0xf0875555,%al
f010bd1e:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd21:	83 c8 0e             	or     $0xe,%eax
f010bd24:	a2 55 55 87 f0       	mov    %al,0xf0875555
f010bd29:	a0 55 55 87 f0       	mov    0xf0875555,%al
f010bd2e:	83 e0 ef             	and    $0xffffffef,%eax
f010bd31:	a2 55 55 87 f0       	mov    %al,0xf0875555
f010bd36:	a0 55 55 87 f0       	mov    0xf0875555,%al
f010bd3b:	83 c8 60             	or     $0x60,%eax
f010bd3e:	a2 55 55 87 f0       	mov    %al,0xf0875555
f010bd43:	a0 55 55 87 f0       	mov    0xf0875555,%al
f010bd48:	83 c8 80             	or     $0xffffff80,%eax
f010bd4b:	a2 55 55 87 f0       	mov    %al,0xf0875555
f010bd50:	b8 00 c9 10 f0       	mov    $0xf010c900,%eax
f010bd55:	c1 e8 10             	shr    $0x10,%eax
f010bd58:	66 a3 56 55 87 f0    	mov    %ax,0xf0875556
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f010bd5e:	b8 06 c9 10 f0       	mov    $0xf010c906,%eax
f010bd63:	66 a3 58 55 87 f0    	mov    %ax,0xf0875558
f010bd69:	66 c7 05 5a 55 87 f0 	movw   $0x8,0xf087555a
f010bd70:	08 00 
f010bd72:	a0 5c 55 87 f0       	mov    0xf087555c,%al
f010bd77:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd7a:	a2 5c 55 87 f0       	mov    %al,0xf087555c
f010bd7f:	a0 5c 55 87 f0       	mov    0xf087555c,%al
f010bd84:	83 e0 1f             	and    $0x1f,%eax
f010bd87:	a2 5c 55 87 f0       	mov    %al,0xf087555c
f010bd8c:	a0 5d 55 87 f0       	mov    0xf087555d,%al
f010bd91:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd94:	83 c8 0e             	or     $0xe,%eax
f010bd97:	a2 5d 55 87 f0       	mov    %al,0xf087555d
f010bd9c:	a0 5d 55 87 f0       	mov    0xf087555d,%al
f010bda1:	83 e0 ef             	and    $0xffffffef,%eax
f010bda4:	a2 5d 55 87 f0       	mov    %al,0xf087555d
f010bda9:	a0 5d 55 87 f0       	mov    0xf087555d,%al
f010bdae:	83 c8 60             	or     $0x60,%eax
f010bdb1:	a2 5d 55 87 f0       	mov    %al,0xf087555d
f010bdb6:	a0 5d 55 87 f0       	mov    0xf087555d,%al
f010bdbb:	83 c8 80             	or     $0xffffff80,%eax
f010bdbe:	a2 5d 55 87 f0       	mov    %al,0xf087555d
f010bdc3:	b8 06 c9 10 f0       	mov    $0xf010c906,%eax
f010bdc8:	c1 e8 10             	shr    $0x10,%eax
f010bdcb:	66 a3 5e 55 87 f0    	mov    %ax,0xf087555e
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f010bdd1:	b8 0c c9 10 f0       	mov    $0xf010c90c,%eax
f010bdd6:	66 a3 60 55 87 f0    	mov    %ax,0xf0875560
f010bddc:	66 c7 05 62 55 87 f0 	movw   $0x8,0xf0875562
f010bde3:	08 00 
f010bde5:	a0 64 55 87 f0       	mov    0xf0875564,%al
f010bdea:	83 e0 e0             	and    $0xffffffe0,%eax
f010bded:	a2 64 55 87 f0       	mov    %al,0xf0875564
f010bdf2:	a0 64 55 87 f0       	mov    0xf0875564,%al
f010bdf7:	83 e0 1f             	and    $0x1f,%eax
f010bdfa:	a2 64 55 87 f0       	mov    %al,0xf0875564
f010bdff:	a0 65 55 87 f0       	mov    0xf0875565,%al
f010be04:	83 e0 f0             	and    $0xfffffff0,%eax
f010be07:	83 c8 0e             	or     $0xe,%eax
f010be0a:	a2 65 55 87 f0       	mov    %al,0xf0875565
f010be0f:	a0 65 55 87 f0       	mov    0xf0875565,%al
f010be14:	83 e0 ef             	and    $0xffffffef,%eax
f010be17:	a2 65 55 87 f0       	mov    %al,0xf0875565
f010be1c:	a0 65 55 87 f0       	mov    0xf0875565,%al
f010be21:	83 c8 60             	or     $0x60,%eax
f010be24:	a2 65 55 87 f0       	mov    %al,0xf0875565
f010be29:	a0 65 55 87 f0       	mov    0xf0875565,%al
f010be2e:	83 c8 80             	or     $0xffffff80,%eax
f010be31:	a2 65 55 87 f0       	mov    %al,0xf0875565
f010be36:	b8 0c c9 10 f0       	mov    $0xf010c90c,%eax
f010be3b:	c1 e8 10             	shr    $0x10,%eax
f010be3e:	66 a3 66 55 87 f0    	mov    %ax,0xf0875566
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f010be44:	b8 12 c9 10 f0       	mov    $0xf010c912,%eax
f010be49:	66 a3 68 55 87 f0    	mov    %ax,0xf0875568
f010be4f:	66 c7 05 6a 55 87 f0 	movw   $0x8,0xf087556a
f010be56:	08 00 
f010be58:	a0 6c 55 87 f0       	mov    0xf087556c,%al
f010be5d:	83 e0 e0             	and    $0xffffffe0,%eax
f010be60:	a2 6c 55 87 f0       	mov    %al,0xf087556c
f010be65:	a0 6c 55 87 f0       	mov    0xf087556c,%al
f010be6a:	83 e0 1f             	and    $0x1f,%eax
f010be6d:	a2 6c 55 87 f0       	mov    %al,0xf087556c
f010be72:	a0 6d 55 87 f0       	mov    0xf087556d,%al
f010be77:	83 e0 f0             	and    $0xfffffff0,%eax
f010be7a:	83 c8 0e             	or     $0xe,%eax
f010be7d:	a2 6d 55 87 f0       	mov    %al,0xf087556d
f010be82:	a0 6d 55 87 f0       	mov    0xf087556d,%al
f010be87:	83 e0 ef             	and    $0xffffffef,%eax
f010be8a:	a2 6d 55 87 f0       	mov    %al,0xf087556d
f010be8f:	a0 6d 55 87 f0       	mov    0xf087556d,%al
f010be94:	83 c8 60             	or     $0x60,%eax
f010be97:	a2 6d 55 87 f0       	mov    %al,0xf087556d
f010be9c:	a0 6d 55 87 f0       	mov    0xf087556d,%al
f010bea1:	83 c8 80             	or     $0xffffff80,%eax
f010bea4:	a2 6d 55 87 f0       	mov    %al,0xf087556d
f010bea9:	b8 12 c9 10 f0       	mov    $0xf010c912,%eax
f010beae:	c1 e8 10             	shr    $0x10,%eax
f010beb1:	66 a3 6e 55 87 f0    	mov    %ax,0xf087556e
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f010beb7:	b8 18 c9 10 f0       	mov    $0xf010c918,%eax
f010bebc:	66 a3 70 55 87 f0    	mov    %ax,0xf0875570
f010bec2:	66 c7 05 72 55 87 f0 	movw   $0x8,0xf0875572
f010bec9:	08 00 
f010becb:	a0 74 55 87 f0       	mov    0xf0875574,%al
f010bed0:	83 e0 e0             	and    $0xffffffe0,%eax
f010bed3:	a2 74 55 87 f0       	mov    %al,0xf0875574
f010bed8:	a0 74 55 87 f0       	mov    0xf0875574,%al
f010bedd:	83 e0 1f             	and    $0x1f,%eax
f010bee0:	a2 74 55 87 f0       	mov    %al,0xf0875574
f010bee5:	a0 75 55 87 f0       	mov    0xf0875575,%al
f010beea:	83 e0 f0             	and    $0xfffffff0,%eax
f010beed:	83 c8 0e             	or     $0xe,%eax
f010bef0:	a2 75 55 87 f0       	mov    %al,0xf0875575
f010bef5:	a0 75 55 87 f0       	mov    0xf0875575,%al
f010befa:	83 e0 ef             	and    $0xffffffef,%eax
f010befd:	a2 75 55 87 f0       	mov    %al,0xf0875575
f010bf02:	a0 75 55 87 f0       	mov    0xf0875575,%al
f010bf07:	83 c8 60             	or     $0x60,%eax
f010bf0a:	a2 75 55 87 f0       	mov    %al,0xf0875575
f010bf0f:	a0 75 55 87 f0       	mov    0xf0875575,%al
f010bf14:	83 c8 80             	or     $0xffffff80,%eax
f010bf17:	a2 75 55 87 f0       	mov    %al,0xf0875575
f010bf1c:	b8 18 c9 10 f0       	mov    $0xf010c918,%eax
f010bf21:	c1 e8 10             	shr    $0x10,%eax
f010bf24:	66 a3 76 55 87 f0    	mov    %ax,0xf0875576
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f010bf2a:	b8 1e c9 10 f0       	mov    $0xf010c91e,%eax
f010bf2f:	66 a3 78 55 87 f0    	mov    %ax,0xf0875578
f010bf35:	66 c7 05 7a 55 87 f0 	movw   $0x8,0xf087557a
f010bf3c:	08 00 
f010bf3e:	a0 7c 55 87 f0       	mov    0xf087557c,%al
f010bf43:	83 e0 e0             	and    $0xffffffe0,%eax
f010bf46:	a2 7c 55 87 f0       	mov    %al,0xf087557c
f010bf4b:	a0 7c 55 87 f0       	mov    0xf087557c,%al
f010bf50:	83 e0 1f             	and    $0x1f,%eax
f010bf53:	a2 7c 55 87 f0       	mov    %al,0xf087557c
f010bf58:	a0 7d 55 87 f0       	mov    0xf087557d,%al
f010bf5d:	83 e0 f0             	and    $0xfffffff0,%eax
f010bf60:	83 c8 0e             	or     $0xe,%eax
f010bf63:	a2 7d 55 87 f0       	mov    %al,0xf087557d
f010bf68:	a0 7d 55 87 f0       	mov    0xf087557d,%al
f010bf6d:	83 e0 ef             	and    $0xffffffef,%eax
f010bf70:	a2 7d 55 87 f0       	mov    %al,0xf087557d
f010bf75:	a0 7d 55 87 f0       	mov    0xf087557d,%al
f010bf7a:	83 c8 60             	or     $0x60,%eax
f010bf7d:	a2 7d 55 87 f0       	mov    %al,0xf087557d
f010bf82:	a0 7d 55 87 f0       	mov    0xf087557d,%al
f010bf87:	83 c8 80             	or     $0xffffff80,%eax
f010bf8a:	a2 7d 55 87 f0       	mov    %al,0xf087557d
f010bf8f:	b8 1e c9 10 f0       	mov    $0xf010c91e,%eax
f010bf94:	c1 e8 10             	shr    $0x10,%eax
f010bf97:	66 a3 7e 55 87 f0    	mov    %ax,0xf087557e
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f010bf9d:	b8 24 c9 10 f0       	mov    $0xf010c924,%eax
f010bfa2:	66 a3 80 55 87 f0    	mov    %ax,0xf0875580
f010bfa8:	66 c7 05 82 55 87 f0 	movw   $0x8,0xf0875582
f010bfaf:	08 00 
f010bfb1:	a0 84 55 87 f0       	mov    0xf0875584,%al
f010bfb6:	83 e0 e0             	and    $0xffffffe0,%eax
f010bfb9:	a2 84 55 87 f0       	mov    %al,0xf0875584
f010bfbe:	a0 84 55 87 f0       	mov    0xf0875584,%al
f010bfc3:	83 e0 1f             	and    $0x1f,%eax
f010bfc6:	a2 84 55 87 f0       	mov    %al,0xf0875584
f010bfcb:	a0 85 55 87 f0       	mov    0xf0875585,%al
f010bfd0:	83 e0 f0             	and    $0xfffffff0,%eax
f010bfd3:	83 c8 0e             	or     $0xe,%eax
f010bfd6:	a2 85 55 87 f0       	mov    %al,0xf0875585
f010bfdb:	a0 85 55 87 f0       	mov    0xf0875585,%al
f010bfe0:	83 e0 ef             	and    $0xffffffef,%eax
f010bfe3:	a2 85 55 87 f0       	mov    %al,0xf0875585
f010bfe8:	a0 85 55 87 f0       	mov    0xf0875585,%al
f010bfed:	83 c8 60             	or     $0x60,%eax
f010bff0:	a2 85 55 87 f0       	mov    %al,0xf0875585
f010bff5:	a0 85 55 87 f0       	mov    0xf0875585,%al
f010bffa:	83 c8 80             	or     $0xffffff80,%eax
f010bffd:	a2 85 55 87 f0       	mov    %al,0xf0875585
f010c002:	b8 24 c9 10 f0       	mov    $0xf010c924,%eax
f010c007:	c1 e8 10             	shr    $0x10,%eax
f010c00a:	66 a3 86 55 87 f0    	mov    %ax,0xf0875586
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f010c010:	b8 2a c9 10 f0       	mov    $0xf010c92a,%eax
f010c015:	66 a3 88 55 87 f0    	mov    %ax,0xf0875588
f010c01b:	66 c7 05 8a 55 87 f0 	movw   $0x8,0xf087558a
f010c022:	08 00 
f010c024:	a0 8c 55 87 f0       	mov    0xf087558c,%al
f010c029:	83 e0 e0             	and    $0xffffffe0,%eax
f010c02c:	a2 8c 55 87 f0       	mov    %al,0xf087558c
f010c031:	a0 8c 55 87 f0       	mov    0xf087558c,%al
f010c036:	83 e0 1f             	and    $0x1f,%eax
f010c039:	a2 8c 55 87 f0       	mov    %al,0xf087558c
f010c03e:	a0 8d 55 87 f0       	mov    0xf087558d,%al
f010c043:	83 e0 f0             	and    $0xfffffff0,%eax
f010c046:	83 c8 0e             	or     $0xe,%eax
f010c049:	a2 8d 55 87 f0       	mov    %al,0xf087558d
f010c04e:	a0 8d 55 87 f0       	mov    0xf087558d,%al
f010c053:	83 e0 ef             	and    $0xffffffef,%eax
f010c056:	a2 8d 55 87 f0       	mov    %al,0xf087558d
f010c05b:	a0 8d 55 87 f0       	mov    0xf087558d,%al
f010c060:	83 c8 60             	or     $0x60,%eax
f010c063:	a2 8d 55 87 f0       	mov    %al,0xf087558d
f010c068:	a0 8d 55 87 f0       	mov    0xf087558d,%al
f010c06d:	83 c8 80             	or     $0xffffff80,%eax
f010c070:	a2 8d 55 87 f0       	mov    %al,0xf087558d
f010c075:	b8 2a c9 10 f0       	mov    $0xf010c92a,%eax
f010c07a:	c1 e8 10             	shr    $0x10,%eax
f010c07d:	66 a3 8e 55 87 f0    	mov    %ax,0xf087558e
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f010c083:	b8 30 c9 10 f0       	mov    $0xf010c930,%eax
f010c088:	66 a3 90 55 87 f0    	mov    %ax,0xf0875590
f010c08e:	66 c7 05 92 55 87 f0 	movw   $0x8,0xf0875592
f010c095:	08 00 
f010c097:	a0 94 55 87 f0       	mov    0xf0875594,%al
f010c09c:	83 e0 e0             	and    $0xffffffe0,%eax
f010c09f:	a2 94 55 87 f0       	mov    %al,0xf0875594
f010c0a4:	a0 94 55 87 f0       	mov    0xf0875594,%al
f010c0a9:	83 e0 1f             	and    $0x1f,%eax
f010c0ac:	a2 94 55 87 f0       	mov    %al,0xf0875594
f010c0b1:	a0 95 55 87 f0       	mov    0xf0875595,%al
f010c0b6:	83 e0 f0             	and    $0xfffffff0,%eax
f010c0b9:	83 c8 0e             	or     $0xe,%eax
f010c0bc:	a2 95 55 87 f0       	mov    %al,0xf0875595
f010c0c1:	a0 95 55 87 f0       	mov    0xf0875595,%al
f010c0c6:	83 e0 ef             	and    $0xffffffef,%eax
f010c0c9:	a2 95 55 87 f0       	mov    %al,0xf0875595
f010c0ce:	a0 95 55 87 f0       	mov    0xf0875595,%al
f010c0d3:	83 c8 60             	or     $0x60,%eax
f010c0d6:	a2 95 55 87 f0       	mov    %al,0xf0875595
f010c0db:	a0 95 55 87 f0       	mov    0xf0875595,%al
f010c0e0:	83 c8 80             	or     $0xffffff80,%eax
f010c0e3:	a2 95 55 87 f0       	mov    %al,0xf0875595
f010c0e8:	b8 30 c9 10 f0       	mov    $0xf010c930,%eax
f010c0ed:	c1 e8 10             	shr    $0x10,%eax
f010c0f0:	66 a3 96 55 87 f0    	mov    %ax,0xf0875596
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f010c0f6:	b8 36 c9 10 f0       	mov    $0xf010c936,%eax
f010c0fb:	66 a3 98 55 87 f0    	mov    %ax,0xf0875598
f010c101:	66 c7 05 9a 55 87 f0 	movw   $0x8,0xf087559a
f010c108:	08 00 
f010c10a:	a0 9c 55 87 f0       	mov    0xf087559c,%al
f010c10f:	83 e0 e0             	and    $0xffffffe0,%eax
f010c112:	a2 9c 55 87 f0       	mov    %al,0xf087559c
f010c117:	a0 9c 55 87 f0       	mov    0xf087559c,%al
f010c11c:	83 e0 1f             	and    $0x1f,%eax
f010c11f:	a2 9c 55 87 f0       	mov    %al,0xf087559c
f010c124:	a0 9d 55 87 f0       	mov    0xf087559d,%al
f010c129:	83 e0 f0             	and    $0xfffffff0,%eax
f010c12c:	83 c8 0e             	or     $0xe,%eax
f010c12f:	a2 9d 55 87 f0       	mov    %al,0xf087559d
f010c134:	a0 9d 55 87 f0       	mov    0xf087559d,%al
f010c139:	83 e0 ef             	and    $0xffffffef,%eax
f010c13c:	a2 9d 55 87 f0       	mov    %al,0xf087559d
f010c141:	a0 9d 55 87 f0       	mov    0xf087559d,%al
f010c146:	83 c8 60             	or     $0x60,%eax
f010c149:	a2 9d 55 87 f0       	mov    %al,0xf087559d
f010c14e:	a0 9d 55 87 f0       	mov    0xf087559d,%al
f010c153:	83 c8 80             	or     $0xffffff80,%eax
f010c156:	a2 9d 55 87 f0       	mov    %al,0xf087559d
f010c15b:	b8 36 c9 10 f0       	mov    $0xf010c936,%eax
f010c160:	c1 e8 10             	shr    $0x10,%eax
f010c163:	66 a3 9e 55 87 f0    	mov    %ax,0xf087559e



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f010c169:	c7 05 44 5c 87 f0 00 	movl   $0xefc00000,0xf0875c44
f010c170:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f010c173:	66 c7 05 48 5c 87 f0 	movw   $0x10,0xf0875c48
f010c17a:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f010c17c:	66 c7 05 e8 28 19 f0 	movw   $0x68,0xf01928e8
f010c183:	68 00 
f010c185:	b8 40 5c 87 f0       	mov    $0xf0875c40,%eax
f010c18a:	66 a3 ea 28 19 f0    	mov    %ax,0xf01928ea
f010c190:	b8 40 5c 87 f0       	mov    $0xf0875c40,%eax
f010c195:	c1 e8 10             	shr    $0x10,%eax
f010c198:	a2 ec 28 19 f0       	mov    %al,0xf01928ec
f010c19d:	a0 ed 28 19 f0       	mov    0xf01928ed,%al
f010c1a2:	83 e0 f0             	and    $0xfffffff0,%eax
f010c1a5:	83 c8 09             	or     $0x9,%eax
f010c1a8:	a2 ed 28 19 f0       	mov    %al,0xf01928ed
f010c1ad:	a0 ed 28 19 f0       	mov    0xf01928ed,%al
f010c1b2:	83 c8 10             	or     $0x10,%eax
f010c1b5:	a2 ed 28 19 f0       	mov    %al,0xf01928ed
f010c1ba:	a0 ed 28 19 f0       	mov    0xf01928ed,%al
f010c1bf:	83 e0 9f             	and    $0xffffff9f,%eax
f010c1c2:	a2 ed 28 19 f0       	mov    %al,0xf01928ed
f010c1c7:	a0 ed 28 19 f0       	mov    0xf01928ed,%al
f010c1cc:	83 c8 80             	or     $0xffffff80,%eax
f010c1cf:	a2 ed 28 19 f0       	mov    %al,0xf01928ed
f010c1d4:	a0 ee 28 19 f0       	mov    0xf01928ee,%al
f010c1d9:	83 e0 f0             	and    $0xfffffff0,%eax
f010c1dc:	a2 ee 28 19 f0       	mov    %al,0xf01928ee
f010c1e1:	a0 ee 28 19 f0       	mov    0xf01928ee,%al
f010c1e6:	83 e0 ef             	and    $0xffffffef,%eax
f010c1e9:	a2 ee 28 19 f0       	mov    %al,0xf01928ee
f010c1ee:	a0 ee 28 19 f0       	mov    0xf01928ee,%al
f010c1f3:	83 e0 df             	and    $0xffffffdf,%eax
f010c1f6:	a2 ee 28 19 f0       	mov    %al,0xf01928ee
f010c1fb:	a0 ee 28 19 f0       	mov    0xf01928ee,%al
f010c200:	83 c8 40             	or     $0x40,%eax
f010c203:	a2 ee 28 19 f0       	mov    %al,0xf01928ee
f010c208:	a0 ee 28 19 f0       	mov    0xf01928ee,%al
f010c20d:	83 e0 7f             	and    $0x7f,%eax
f010c210:	a2 ee 28 19 f0       	mov    %al,0xf01928ee
f010c215:	b8 40 5c 87 f0       	mov    $0xf0875c40,%eax
f010c21a:	c1 e8 18             	shr    $0x18,%eax
f010c21d:	a2 ef 28 19 f0       	mov    %al,0xf01928ef
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f010c222:	a0 ed 28 19 f0       	mov    0xf01928ed,%al
f010c227:	83 e0 ef             	and    $0xffffffef,%eax
f010c22a:	a2 ed 28 19 f0       	mov    %al,0xf01928ed
f010c22f:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010c235:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f010c239:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f010c23c:	0f 01 1d 1c 2d 19 f0 	lidtl  0xf0192d1c
}
f010c243:	90                   	nop
f010c244:	c9                   	leave  
f010c245:	c3                   	ret    

f010c246 <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f010c246:	55                   	push   %ebp
f010c247:	89 e5                	mov    %esp,%ebp
f010c249:	53                   	push   %ebx
f010c24a:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f010c24d:	83 ec 08             	sub    $0x8,%esp
f010c250:	ff 75 08             	pushl  0x8(%ebp)
f010c253:	68 5b 71 13 f0       	push   $0xf013715b
f010c258:	e8 b1 4a ff ff       	call   f0100d0e <cprintf>
f010c25d:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f010c260:	8b 45 08             	mov    0x8(%ebp),%eax
f010c263:	83 ec 0c             	sub    $0xc,%esp
f010c266:	50                   	push   %eax
f010c267:	e8 fd 00 00 00       	call   f010c369 <print_regs>
f010c26c:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f010c26f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c272:	8b 40 20             	mov    0x20(%eax),%eax
f010c275:	0f b7 c0             	movzwl %ax,%eax
f010c278:	83 ec 08             	sub    $0x8,%esp
f010c27b:	50                   	push   %eax
f010c27c:	68 6d 71 13 f0       	push   $0xf013716d
f010c281:	e8 88 4a ff ff       	call   f0100d0e <cprintf>
f010c286:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010c289:	8b 45 08             	mov    0x8(%ebp),%eax
f010c28c:	8b 40 24             	mov    0x24(%eax),%eax
f010c28f:	0f b7 c0             	movzwl %ax,%eax
f010c292:	83 ec 08             	sub    $0x8,%esp
f010c295:	50                   	push   %eax
f010c296:	68 80 71 13 f0       	push   $0xf0137180
f010c29b:	e8 6e 4a ff ff       	call   f0100d0e <cprintf>
f010c2a0:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f010c2a3:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2a6:	8b 58 28             	mov    0x28(%eax),%ebx
f010c2a9:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2ac:	8b 40 28             	mov    0x28(%eax),%eax
f010c2af:	83 ec 0c             	sub    $0xc,%esp
f010c2b2:	50                   	push   %eax
f010c2b3:	e8 d0 ee ff ff       	call   f010b188 <trapname>
f010c2b8:	83 c4 10             	add    $0x10,%esp
f010c2bb:	89 c2                	mov    %eax,%edx
f010c2bd:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2c0:	8b 40 28             	mov    0x28(%eax),%eax
f010c2c3:	53                   	push   %ebx
f010c2c4:	52                   	push   %edx
f010c2c5:	50                   	push   %eax
f010c2c6:	68 93 71 13 f0       	push   $0xf0137193
f010c2cb:	e8 3e 4a ff ff       	call   f0100d0e <cprintf>
f010c2d0:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f010c2d3:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2d6:	8b 40 2c             	mov    0x2c(%eax),%eax
f010c2d9:	83 ec 08             	sub    $0x8,%esp
f010c2dc:	50                   	push   %eax
f010c2dd:	68 aa 71 13 f0       	push   $0xf01371aa
f010c2e2:	e8 27 4a ff ff       	call   f0100d0e <cprintf>
f010c2e7:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010c2ea:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2ed:	8b 40 30             	mov    0x30(%eax),%eax
f010c2f0:	83 ec 08             	sub    $0x8,%esp
f010c2f3:	50                   	push   %eax
f010c2f4:	68 b9 71 13 f0       	push   $0xf01371b9
f010c2f9:	e8 10 4a ff ff       	call   f0100d0e <cprintf>
f010c2fe:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f010c301:	8b 45 08             	mov    0x8(%ebp),%eax
f010c304:	8b 40 34             	mov    0x34(%eax),%eax
f010c307:	0f b7 c0             	movzwl %ax,%eax
f010c30a:	83 ec 08             	sub    $0x8,%esp
f010c30d:	50                   	push   %eax
f010c30e:	68 c8 71 13 f0       	push   $0xf01371c8
f010c313:	e8 f6 49 ff ff       	call   f0100d0e <cprintf>
f010c318:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f010c31b:	8b 45 08             	mov    0x8(%ebp),%eax
f010c31e:	8b 40 38             	mov    0x38(%eax),%eax
f010c321:	83 ec 08             	sub    $0x8,%esp
f010c324:	50                   	push   %eax
f010c325:	68 db 71 13 f0       	push   $0xf01371db
f010c32a:	e8 df 49 ff ff       	call   f0100d0e <cprintf>
f010c32f:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f010c332:	8b 45 08             	mov    0x8(%ebp),%eax
f010c335:	8b 40 3c             	mov    0x3c(%eax),%eax
f010c338:	83 ec 08             	sub    $0x8,%esp
f010c33b:	50                   	push   %eax
f010c33c:	68 ea 71 13 f0       	push   $0xf01371ea
f010c341:	e8 c8 49 ff ff       	call   f0100d0e <cprintf>
f010c346:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010c349:	8b 45 08             	mov    0x8(%ebp),%eax
f010c34c:	8b 40 40             	mov    0x40(%eax),%eax
f010c34f:	0f b7 c0             	movzwl %ax,%eax
f010c352:	83 ec 08             	sub    $0x8,%esp
f010c355:	50                   	push   %eax
f010c356:	68 f9 71 13 f0       	push   $0xf01371f9
f010c35b:	e8 ae 49 ff ff       	call   f0100d0e <cprintf>
f010c360:	83 c4 10             	add    $0x10,%esp
}
f010c363:	90                   	nop
f010c364:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010c367:	c9                   	leave  
f010c368:	c3                   	ret    

f010c369 <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010c369:	55                   	push   %ebp
f010c36a:	89 e5                	mov    %esp,%ebp
f010c36c:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f010c36f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c372:	8b 00                	mov    (%eax),%eax
f010c374:	83 ec 08             	sub    $0x8,%esp
f010c377:	50                   	push   %eax
f010c378:	68 0c 72 13 f0       	push   $0xf013720c
f010c37d:	e8 8c 49 ff ff       	call   f0100d0e <cprintf>
f010c382:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f010c385:	8b 45 08             	mov    0x8(%ebp),%eax
f010c388:	8b 40 04             	mov    0x4(%eax),%eax
f010c38b:	83 ec 08             	sub    $0x8,%esp
f010c38e:	50                   	push   %eax
f010c38f:	68 1b 72 13 f0       	push   $0xf013721b
f010c394:	e8 75 49 ff ff       	call   f0100d0e <cprintf>
f010c399:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f010c39c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c39f:	8b 40 08             	mov    0x8(%eax),%eax
f010c3a2:	83 ec 08             	sub    $0x8,%esp
f010c3a5:	50                   	push   %eax
f010c3a6:	68 2a 72 13 f0       	push   $0xf013722a
f010c3ab:	e8 5e 49 ff ff       	call   f0100d0e <cprintf>
f010c3b0:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f010c3b3:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3b6:	8b 40 0c             	mov    0xc(%eax),%eax
f010c3b9:	83 ec 08             	sub    $0x8,%esp
f010c3bc:	50                   	push   %eax
f010c3bd:	68 39 72 13 f0       	push   $0xf0137239
f010c3c2:	e8 47 49 ff ff       	call   f0100d0e <cprintf>
f010c3c7:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010c3ca:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3cd:	8b 40 10             	mov    0x10(%eax),%eax
f010c3d0:	83 ec 08             	sub    $0x8,%esp
f010c3d3:	50                   	push   %eax
f010c3d4:	68 48 72 13 f0       	push   $0xf0137248
f010c3d9:	e8 30 49 ff ff       	call   f0100d0e <cprintf>
f010c3de:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f010c3e1:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3e4:	8b 40 14             	mov    0x14(%eax),%eax
f010c3e7:	83 ec 08             	sub    $0x8,%esp
f010c3ea:	50                   	push   %eax
f010c3eb:	68 57 72 13 f0       	push   $0xf0137257
f010c3f0:	e8 19 49 ff ff       	call   f0100d0e <cprintf>
f010c3f5:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010c3f8:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3fb:	8b 40 18             	mov    0x18(%eax),%eax
f010c3fe:	83 ec 08             	sub    $0x8,%esp
f010c401:	50                   	push   %eax
f010c402:	68 66 72 13 f0       	push   $0xf0137266
f010c407:	e8 02 49 ff ff       	call   f0100d0e <cprintf>
f010c40c:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010c40f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c412:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c415:	83 ec 08             	sub    $0x8,%esp
f010c418:	50                   	push   %eax
f010c419:	68 75 72 13 f0       	push   $0xf0137275
f010c41e:	e8 eb 48 ff ff       	call   f0100d0e <cprintf>
f010c423:	83 c4 10             	add    $0x10,%esp
}
f010c426:	90                   	nop
f010c427:	c9                   	leave  
f010c428:	c3                   	ret    

f010c429 <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010c429:	55                   	push   %ebp
f010c42a:	89 e5                	mov    %esp,%ebp
f010c42c:	57                   	push   %edi
f010c42d:	56                   	push   %esi
f010c42e:	53                   	push   %ebx
f010c42f:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.

	if(tf->tf_trapno == T_PGFLT)
f010c432:	8b 45 08             	mov    0x8(%ebp),%eax
f010c435:	8b 40 28             	mov    0x28(%eax),%eax
f010c438:	83 f8 0e             	cmp    $0xe,%eax
f010c43b:	75 29                	jne    f010c466 <trap_dispatch+0x3d>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010c43d:	83 ec 0c             	sub    $0xc,%esp
f010c440:	6a 01                	push   $0x1
f010c442:	e8 fc 18 00 00       	call   f010dd43 <isPageReplacmentAlgorithmLRU>
f010c447:	83 c4 10             	add    $0x10,%esp
f010c44a:	85 c0                	test   %eax,%eax
f010c44c:	74 05                	je     f010c453 <trap_dispatch+0x2a>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010c44e:	e8 d9 95 ff ff       	call   f0105a2c <update_WS_time_stamps>
		}
		fault_handler(tf);
f010c453:	83 ec 0c             	sub    $0xc,%esp
f010c456:	ff 75 08             	pushl  0x8(%ebp)
f010c459:	e8 51 02 00 00       	call   f010c6af <fault_handler>
f010c45e:	83 c4 10             	add    $0x10,%esp
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c461:	e9 bb 00 00 00       	jmp    f010c521 <trap_dispatch+0xf8>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f010c466:	8b 45 08             	mov    0x8(%ebp),%eax
f010c469:	8b 40 28             	mov    0x28(%eax),%eax
f010c46c:	83 f8 30             	cmp    $0x30,%eax
f010c46f:	75 42                	jne    f010c4b3 <trap_dispatch+0x8a>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010c471:	8b 45 08             	mov    0x8(%ebp),%eax
f010c474:	8b 78 04             	mov    0x4(%eax),%edi
f010c477:	8b 45 08             	mov    0x8(%ebp),%eax
f010c47a:	8b 30                	mov    (%eax),%esi
f010c47c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c47f:	8b 58 10             	mov    0x10(%eax),%ebx
f010c482:	8b 45 08             	mov    0x8(%ebp),%eax
f010c485:	8b 48 18             	mov    0x18(%eax),%ecx
f010c488:	8b 45 08             	mov    0x8(%ebp),%eax
f010c48b:	8b 50 14             	mov    0x14(%eax),%edx
f010c48e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c491:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c494:	83 ec 08             	sub    $0x8,%esp
f010c497:	57                   	push   %edi
f010c498:	56                   	push   %esi
f010c499:	53                   	push   %ebx
f010c49a:	51                   	push   %ecx
f010c49b:	52                   	push   %edx
f010c49c:	50                   	push   %eax
f010c49d:	e8 ec 0f 00 00       	call   f010d48e <syscall>
f010c4a2:	83 c4 20             	add    $0x20,%esp
f010c4a5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f010c4a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4ab:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010c4ae:	89 50 1c             	mov    %edx,0x1c(%eax)
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c4b1:	eb 6e                	jmp    f010c521 <trap_dispatch+0xf8>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010c4b3:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4b6:	8b 40 28             	mov    0x28(%eax),%eax
f010c4b9:	83 f8 08             	cmp    $0x8,%eax
f010c4bc:	75 17                	jne    f010c4d5 <trap_dispatch+0xac>
	{
		panic("double fault!!");
f010c4be:	83 ec 04             	sub    $0x4,%esp
f010c4c1:	68 84 72 13 f0       	push   $0xf0137284
f010c4c6:	68 e7 00 00 00       	push   $0xe7
f010c4cb:	68 93 72 13 f0       	push   $0xf0137293
f010c4d0:	e8 30 3d ff ff       	call   f0100205 <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f010c4d5:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4d8:	8b 40 28             	mov    0x28(%eax),%eax
f010c4db:	83 f8 20             	cmp    $0x20,%eax
f010c4de:	75 07                	jne    f010c4e7 <trap_dispatch+0xbe>
	{
		clock_interrupt_handler() ;
f010c4e0:	e8 26 95 ff ff       	call   f0105a0b <clock_interrupt_handler>
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c4e5:	eb 3a                	jmp    f010c521 <trap_dispatch+0xf8>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f010c4e7:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4ea:	8b 40 34             	mov    0x34(%eax),%eax
f010c4ed:	66 83 f8 08          	cmp    $0x8,%ax
f010c4f1:	75 17                	jne    f010c50a <trap_dispatch+0xe1>
		{
			panic("unhandled trap in kernel");
f010c4f3:	83 ec 04             	sub    $0x4,%esp
f010c4f6:	68 a4 72 13 f0       	push   $0xf01372a4
f010c4fb:	68 f4 00 00 00       	push   $0xf4
f010c500:	68 93 72 13 f0       	push   $0xf0137293
f010c505:	e8 fb 3c ff ff       	call   f0100205 <_panic>
		}
		else {
			//env_destroy(curenv);
			panic("unhandled trap in user program");
f010c50a:	83 ec 04             	sub    $0x4,%esp
f010c50d:	68 c0 72 13 f0       	push   $0xf01372c0
f010c512:	68 f8 00 00 00       	push   $0xf8
f010c517:	68 93 72 13 f0       	push   $0xf0137293
f010c51c:	e8 e4 3c ff ff       	call   f0100205 <_panic>

			return;
		}
	}
	return;
}
f010c521:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010c524:	5b                   	pop    %ebx
f010c525:	5e                   	pop    %esi
f010c526:	5f                   	pop    %edi
f010c527:	5d                   	pop    %ebp
f010c528:	c3                   	ret    

f010c529 <trap>:

void trap(struct Trapframe *tf)
{
f010c529:	55                   	push   %ebp
f010c52a:	89 e5                	mov    %esp,%ebp
f010c52c:	57                   	push   %edi
f010c52d:	56                   	push   %esi
f010c52e:	53                   	push   %ebx
f010c52f:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f010c532:	e8 5d 7c ff ff       	call   f0104194 <kclock_stop>

	int userTrap = 0;
f010c537:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c53e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c541:	8b 40 34             	mov    0x34(%eax),%eax
f010c544:	0f b7 c0             	movzwl %ax,%eax
f010c547:	83 e0 03             	and    $0x3,%eax
f010c54a:	83 f8 03             	cmp    $0x3,%eax
f010c54d:	75 49                	jne    f010c598 <trap+0x6f>
		assert(curenv);
f010c54f:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f010c554:	85 c0                	test   %eax,%eax
f010c556:	75 19                	jne    f010c571 <trap+0x48>
f010c558:	68 df 72 13 f0       	push   $0xf01372df
f010c55d:	68 e6 72 13 f0       	push   $0xf01372e6
f010c562:	68 06 01 00 00       	push   $0x106
f010c567:	68 93 72 13 f0       	push   $0xf0137293
f010c56c:	e8 94 3c ff ff       	call   f0100205 <_panic>
		curenv->env_tf = *tf;
f010c571:	8b 15 f4 53 87 f0    	mov    0xf08753f4,%edx
f010c577:	8b 45 08             	mov    0x8(%ebp),%eax
f010c57a:	89 c3                	mov    %eax,%ebx
f010c57c:	b8 11 00 00 00       	mov    $0x11,%eax
f010c581:	89 d7                	mov    %edx,%edi
f010c583:	89 de                	mov    %ebx,%esi
f010c585:	89 c1                	mov    %eax,%ecx
f010c587:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f010c589:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f010c58e:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f010c591:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f010c598:	8b 45 08             	mov    0x8(%ebp),%eax
f010c59b:	8b 40 28             	mov    0x28(%eax),%eax
f010c59e:	83 f8 20             	cmp    $0x20,%eax
f010c5a1:	75 40                	jne    f010c5e3 <trap+0xba>
	{
		//		uint16 cnt0 = kclock_read_cnt0() ;
		//		cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f010c5a3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c5a7:	0f 84 a6 00 00 00    	je     f010c653 <trap+0x12a>
		{
			assert(curenv);
f010c5ad:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f010c5b2:	85 c0                	test   %eax,%eax
f010c5b4:	75 19                	jne    f010c5cf <trap+0xa6>
f010c5b6:	68 df 72 13 f0       	push   $0xf01372df
f010c5bb:	68 e6 72 13 f0       	push   $0xf01372e6
f010c5c0:	68 12 01 00 00       	push   $0x112
f010c5c5:	68 93 72 13 f0       	push   $0xf0137293
f010c5ca:	e8 36 3c ff ff       	call   f0100205 <_panic>
			curenv->nClocks++ ;
f010c5cf:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f010c5d4:	8b 90 a4 05 00 00    	mov    0x5a4(%eax),%edx
f010c5da:	42                   	inc    %edx
f010c5db:	89 90 a4 05 00 00    	mov    %edx,0x5a4(%eax)
f010c5e1:	eb 70                	jmp    f010c653 <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f010c5e3:	8b 45 08             	mov    0x8(%ebp),%eax
f010c5e6:	8b 40 28             	mov    0x28(%eax),%eax
f010c5e9:	83 f8 0e             	cmp    $0xe,%eax
f010c5ec:	75 65                	jne    f010c653 <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f010c5ee:	a0 a8 5c 87 f0       	mov    0xf0875ca8,%al
f010c5f3:	84 c0                	test   %al,%al
f010c5f5:	74 5c                	je     f010c653 <trap+0x12a>
			if (userTrap){
f010c5f7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c5fb:	74 2c                	je     f010c629 <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f010c5fd:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f010c602:	8b 15 f4 53 87 f0    	mov    0xf08753f4,%edx
f010c608:	8b 52 30             	mov    0x30(%edx),%edx
f010c60b:	89 d1                	mov    %edx,%ecx
f010c60d:	8a 15 a8 5c 87 f0    	mov    0xf0875ca8,%dl
f010c613:	0f b6 d2             	movzbl %dl,%edx
f010c616:	01 ca                	add    %ecx,%edx
f010c618:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f010c61b:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f010c620:	83 ec 0c             	sub    $0xc,%esp
f010c623:	50                   	push   %eax
f010c624:	e8 43 d4 ff ff       	call   f0109a6c <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010c629:	8b 45 08             	mov    0x8(%ebp),%eax
f010c62c:	8b 40 30             	mov    0x30(%eax),%eax
f010c62f:	89 c2                	mov    %eax,%edx
f010c631:	a0 a8 5c 87 f0       	mov    0xf0875ca8,%al
f010c636:	0f b6 c0             	movzbl %al,%eax
f010c639:	01 d0                	add    %edx,%eax
f010c63b:	89 c2                	mov    %eax,%edx
f010c63d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c640:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f010c643:	e8 77 7b ff ff       	call   f01041bf <kclock_resume>
				env_pop_tf(tf);
f010c648:	83 ec 0c             	sub    $0xc,%esp
f010c64b:	ff 75 08             	pushl  0x8(%ebp)
f010c64e:	e8 7c d5 ff ff       	call   f0109bcf <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f010c653:	83 ec 0c             	sub    $0xc,%esp
f010c656:	ff 75 08             	pushl  0x8(%ebp)
f010c659:	e8 cb fd ff ff       	call   f010c429 <trap_dispatch>
f010c65e:	83 c4 10             	add    $0x10,%esp
	if (userTrap)
f010c661:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c665:	74 3d                	je     f010c6a4 <trap+0x17b>
	{
		assert(curenv && curenv->env_status == ENV_RUNNABLE);
f010c667:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f010c66c:	85 c0                	test   %eax,%eax
f010c66e:	74 0d                	je     f010c67d <trap+0x154>
f010c670:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f010c675:	8b 40 54             	mov    0x54(%eax),%eax
f010c678:	83 f8 02             	cmp    $0x2,%eax
f010c67b:	74 19                	je     f010c696 <trap+0x16d>
f010c67d:	68 fc 72 13 f0       	push   $0xf01372fc
f010c682:	68 e6 72 13 f0       	push   $0xf01372e6
f010c687:	68 27 01 00 00       	push   $0x127
f010c68c:	68 93 72 13 f0       	push   $0xf0137293
f010c691:	e8 6f 3b ff ff       	call   f0100205 <_panic>
		env_run(curenv);
f010c696:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f010c69b:	83 ec 0c             	sub    $0xc,%esp
f010c69e:	50                   	push   %eax
f010c69f:	e8 c8 d3 ff ff       	call   f0109a6c <env_run>
	/* 2019
	 * If trap from kernel, then return to the called kernel function using the passed param "tf" not the user one that's stored in curenv
	 */
	else
	{
		env_pop_tf((tf));
f010c6a4:	83 ec 0c             	sub    $0xc,%esp
f010c6a7:	ff 75 08             	pushl  0x8(%ebp)
f010c6aa:	e8 20 d5 ff ff       	call   f0109bcf <env_pop_tf>

f010c6af <fault_handler>:

/*2022*/
uint32 last_fault_va = 0;
int8 num_repeated_fault  = 0;
void fault_handler(struct Trapframe *tf)
{
f010c6af:	55                   	push   %ebp
f010c6b0:	89 e5                	mov    %esp,%ebp
f010c6b2:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f010c6b5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c6bc:	8b 45 08             	mov    0x8(%ebp),%eax
f010c6bf:	8b 40 34             	mov    0x34(%eax),%eax
f010c6c2:	0f b7 c0             	movzwl %ax,%eax
f010c6c5:	83 e0 03             	and    $0x3,%eax
f010c6c8:	83 f8 03             	cmp    $0x3,%eax
f010c6cb:	75 07                	jne    f010c6d4 <fault_handler+0x25>
		userTrap = 1;
f010c6cd:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010c6d4:	0f 20 d0             	mov    %cr2,%eax
f010c6d7:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f010c6da:	8b 45 e0             	mov    -0x20(%ebp),%eax
	}
	//print_trapframe(tf);
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f010c6dd:	89 45 ec             	mov    %eax,-0x14(%ebp)
	/******************************************************/
	/*2022*///If same fault va for 3 times, then panic
	if (last_fault_va == fault_va)
f010c6e0:	a1 20 5c 87 f0       	mov    0xf0875c20,%eax
f010c6e5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010c6e8:	75 2b                	jne    f010c715 <fault_handler+0x66>
	{
		num_repeated_fault++ ;
f010c6ea:	a0 24 5c 87 f0       	mov    0xf0875c24,%al
f010c6ef:	40                   	inc    %eax
f010c6f0:	a2 24 5c 87 f0       	mov    %al,0xf0875c24
		if (num_repeated_fault == 3)
f010c6f5:	a0 24 5c 87 f0       	mov    0xf0875c24,%al
f010c6fa:	3c 03                	cmp    $0x3,%al
f010c6fc:	75 1e                	jne    f010c71c <fault_handler+0x6d>
			panic("Failed to handle fault at va=%x: same va is faulted for 3 successive times\n", fault_va);
f010c6fe:	ff 75 ec             	pushl  -0x14(%ebp)
f010c701:	68 2c 73 13 f0       	push   $0xf013732c
f010c706:	68 47 01 00 00       	push   $0x147
f010c70b:	68 93 72 13 f0       	push   $0xf0137293
f010c710:	e8 f0 3a ff ff       	call   f0100205 <_panic>
	}
	else
	{
		num_repeated_fault = 0;
f010c715:	c6 05 24 5c 87 f0 00 	movb   $0x0,0xf0875c24
	}
	last_fault_va = fault_va ;
f010c71c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c71f:	a3 20 5c 87 f0       	mov    %eax,0xf0875c20
	/******************************************************/
	//2017: Check stack overflow for Kernel
	if (!userTrap)
f010c724:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c728:	75 29                	jne    f010c753 <fault_handler+0xa4>
	{
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f010c72a:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f010c731:	77 40                	ja     f010c773 <fault_handler+0xc4>
f010c733:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f010c73a:	76 37                	jbe    f010c773 <fault_handler+0xc4>
			panic("Kernel: stack overflow exception!");
f010c73c:	83 ec 04             	sub    $0x4,%esp
f010c73f:	68 78 73 13 f0       	push   $0xf0137378
f010c744:	68 53 01 00 00       	push   $0x153
f010c749:	68 93 72 13 f0       	push   $0xf0137293
f010c74e:	e8 b2 3a ff ff       	call   f0100205 <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		if (fault_va >= USTACKTOP)
f010c753:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f010c75a:	76 17                	jbe    f010c773 <fault_handler+0xc4>
			panic("User: stack underflow exception!");
f010c75c:	83 ec 04             	sub    $0x4,%esp
f010c75f:	68 9c 73 13 f0       	push   $0xf013739c
f010c764:	68 59 01 00 00       	push   $0x159
f010c769:	68 93 72 13 f0       	push   $0xf0137293
f010c76e:	e8 92 3a ff ff       	call   f0100205 <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f010c773:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f010c778:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (faulted_env->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f010c77b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c77e:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c781:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c784:	c1 ea 16             	shr    $0x16,%edx
f010c787:	c1 e2 02             	shl    $0x2,%edx
f010c78a:	01 d0                	add    %edx,%eax
f010c78c:	8b 00                	mov    (%eax),%eax
f010c78e:	83 e0 01             	and    $0x1,%eax
f010c791:	85 c0                	test   %eax,%eax
f010c793:	75 28                	jne    f010c7bd <fault_handler+0x10e>
	{
		// we have a table fault =============================================================
		//cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f010c795:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c798:	8b 80 38 05 00 00    	mov    0x538(%eax),%eax
f010c79e:	8d 50 01             	lea    0x1(%eax),%edx
f010c7a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c7a4:	89 90 38 05 00 00    	mov    %edx,0x538(%eax)

		table_fault_handler(faulted_env, fault_va);
f010c7aa:	83 ec 08             	sub    $0x8,%esp
f010c7ad:	ff 75 ec             	pushl  -0x14(%ebp)
f010c7b0:	ff 75 e8             	pushl  -0x18(%ebp)
f010c7b3:	e8 70 16 00 00       	call   f010de28 <table_fault_handler>
f010c7b8:	83 c4 10             	add    $0x10,%esp
f010c7bb:	eb 7b                	jmp    f010c838 <fault_handler+0x189>
	}
	else
	{
		/*2022: Check if fault due to Access Rights */
		int perms = pt_get_page_permissions(faulted_env->env_page_directory, fault_va);
f010c7bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c7c0:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c7c3:	83 ec 08             	sub    $0x8,%esp
f010c7c6:	ff 75 ec             	pushl  -0x14(%ebp)
f010c7c9:	50                   	push   %eax
f010c7ca:	e8 92 b4 ff ff       	call   f0107c61 <pt_get_page_permissions>
f010c7cf:	83 c4 10             	add    $0x10,%esp
f010c7d2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (perms & PERM_PRESENT)
f010c7d5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010c7d8:	83 e0 01             	and    $0x1,%eax
f010c7db:	85 c0                	test   %eax,%eax
f010c7dd:	74 17                	je     f010c7f6 <fault_handler+0x147>
			panic("Page @va=%x is exist! page fault due to violation of ACCESS RIGHTS\n", fault_va) ;
f010c7df:	ff 75 ec             	pushl  -0x14(%ebp)
f010c7e2:	68 c0 73 13 f0       	push   $0xf01373c0
f010c7e7:	68 6e 01 00 00       	push   $0x16e
f010c7ec:	68 93 72 13 f0       	push   $0xf0137293
f010c7f1:	e8 0f 3a ff ff       	call   f0100205 <_panic>
		/*============================================================================================*/


		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010c7f6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c7f9:	8b 80 34 05 00 00    	mov    0x534(%eax),%eax
f010c7ff:	8d 50 01             	lea    0x1(%eax),%edx
f010c802:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c805:	89 90 34 05 00 00    	mov    %edx,0x534(%eax)

		//cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//cprintf("\nPage working set BEFORE fault handler...\n");
		//env_page_ws_print(curenv);

		if(isBufferingEnabled())
f010c80b:	e8 f6 15 00 00       	call   f010de06 <isBufferingEnabled>
f010c810:	84 c0                	test   %al,%al
f010c812:	74 13                	je     f010c827 <fault_handler+0x178>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010c814:	83 ec 08             	sub    $0x8,%esp
f010c817:	ff 75 ec             	pushl  -0x14(%ebp)
f010c81a:	ff 75 e8             	pushl  -0x18(%ebp)
f010c81d:	e8 41 16 00 00       	call   f010de63 <__page_fault_handler_with_buffering>
f010c822:	83 c4 10             	add    $0x10,%esp
f010c825:	eb 11                	jmp    f010c838 <fault_handler+0x189>
		}
		else
		{
			//page_fault_handler(faulted_env, fault_va);
			page_fault_handler(faulted_env, fault_va);
f010c827:	83 ec 08             	sub    $0x8,%esp
f010c82a:	ff 75 ec             	pushl  -0x14(%ebp)
f010c82d:	ff 75 e8             	pushl  -0x18(%ebp)
f010c830:	e8 14 16 00 00       	call   f010de49 <page_fault_handler>
f010c835:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010c838:	0f 20 d8             	mov    %cr3,%eax
f010c83b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010c83e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c841:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f010c844:	90                   	nop
f010c845:	c9                   	leave  
f010c846:	c3                   	ret    
f010c847:	90                   	nop

f010c848 <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f010c848:	6a 0e                	push   $0xe
f010c84a:	e9 ed 00 00 00       	jmp    f010c93c <_alltraps>
f010c84f:	90                   	nop

f010c850 <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f010c850:	6a 00                	push   $0x0
f010c852:	6a 30                	push   $0x30
f010c854:	e9 e3 00 00 00       	jmp    f010c93c <_alltraps>
f010c859:	90                   	nop

f010c85a <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f010c85a:	6a 08                	push   $0x8
f010c85c:	e9 db 00 00 00       	jmp    f010c93c <_alltraps>
f010c861:	90                   	nop

f010c862 <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f010c862:	6a 00                	push   $0x0
f010c864:	6a 00                	push   $0x0
f010c866:	e9 d1 00 00 00       	jmp    f010c93c <_alltraps>
f010c86b:	90                   	nop

f010c86c <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f010c86c:	6a 00                	push   $0x0
f010c86e:	6a 01                	push   $0x1
f010c870:	e9 c7 00 00 00       	jmp    f010c93c <_alltraps>
f010c875:	90                   	nop

f010c876 <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f010c876:	6a 00                	push   $0x0
f010c878:	6a 02                	push   $0x2
f010c87a:	e9 bd 00 00 00       	jmp    f010c93c <_alltraps>
f010c87f:	90                   	nop

f010c880 <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f010c880:	6a 00                	push   $0x0
f010c882:	6a 03                	push   $0x3
f010c884:	e9 b3 00 00 00       	jmp    f010c93c <_alltraps>
f010c889:	90                   	nop

f010c88a <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f010c88a:	6a 00                	push   $0x0
f010c88c:	6a 04                	push   $0x4
f010c88e:	e9 a9 00 00 00       	jmp    f010c93c <_alltraps>
f010c893:	90                   	nop

f010c894 <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f010c894:	6a 00                	push   $0x0
f010c896:	6a 05                	push   $0x5
f010c898:	e9 9f 00 00 00       	jmp    f010c93c <_alltraps>
f010c89d:	90                   	nop

f010c89e <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f010c89e:	6a 00                	push   $0x0
f010c8a0:	6a 06                	push   $0x6
f010c8a2:	e9 95 00 00 00       	jmp    f010c93c <_alltraps>
f010c8a7:	90                   	nop

f010c8a8 <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f010c8a8:	6a 00                	push   $0x0
f010c8aa:	6a 07                	push   $0x7
f010c8ac:	e9 8b 00 00 00       	jmp    f010c93c <_alltraps>
f010c8b1:	90                   	nop

f010c8b2 <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f010c8b2:	6a 0a                	push   $0xa
f010c8b4:	e9 83 00 00 00       	jmp    f010c93c <_alltraps>
f010c8b9:	90                   	nop

f010c8ba <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f010c8ba:	6a 0b                	push   $0xb
f010c8bc:	eb 7e                	jmp    f010c93c <_alltraps>

f010c8be <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f010c8be:	6a 0c                	push   $0xc
f010c8c0:	eb 7a                	jmp    f010c93c <_alltraps>

f010c8c2 <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f010c8c2:	6a 0d                	push   $0xd
f010c8c4:	eb 76                	jmp    f010c93c <_alltraps>

f010c8c6 <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f010c8c6:	6a 00                	push   $0x0
f010c8c8:	6a 10                	push   $0x10
f010c8ca:	eb 70                	jmp    f010c93c <_alltraps>

f010c8cc <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f010c8cc:	6a 11                	push   $0x11
f010c8ce:	eb 6c                	jmp    f010c93c <_alltraps>

f010c8d0 <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f010c8d0:	6a 00                	push   $0x0
f010c8d2:	6a 12                	push   $0x12
f010c8d4:	eb 66                	jmp    f010c93c <_alltraps>

f010c8d6 <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f010c8d6:	6a 00                	push   $0x0
f010c8d8:	6a 13                	push   $0x13
f010c8da:	eb 60                	jmp    f010c93c <_alltraps>

f010c8dc <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f010c8dc:	6a 00                	push   $0x0
f010c8de:	6a 20                	push   $0x20
f010c8e0:	eb 5a                	jmp    f010c93c <_alltraps>

f010c8e2 <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f010c8e2:	6a 00                	push   $0x0
f010c8e4:	6a 21                	push   $0x21
f010c8e6:	eb 54                	jmp    f010c93c <_alltraps>

f010c8e8 <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010c8e8:	6a 00                	push   $0x0
f010c8ea:	6a 22                	push   $0x22
f010c8ec:	eb 4e                	jmp    f010c93c <_alltraps>

f010c8ee <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010c8ee:	6a 00                	push   $0x0
f010c8f0:	6a 23                	push   $0x23
f010c8f2:	eb 48                	jmp    f010c93c <_alltraps>

f010c8f4 <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010c8f4:	6a 00                	push   $0x0
f010c8f6:	6a 24                	push   $0x24
f010c8f8:	eb 42                	jmp    f010c93c <_alltraps>

f010c8fa <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010c8fa:	6a 00                	push   $0x0
f010c8fc:	6a 25                	push   $0x25
f010c8fe:	eb 3c                	jmp    f010c93c <_alltraps>

f010c900 <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010c900:	6a 00                	push   $0x0
f010c902:	6a 26                	push   $0x26
f010c904:	eb 36                	jmp    f010c93c <_alltraps>

f010c906 <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010c906:	6a 00                	push   $0x0
f010c908:	6a 27                	push   $0x27
f010c90a:	eb 30                	jmp    f010c93c <_alltraps>

f010c90c <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010c90c:	6a 00                	push   $0x0
f010c90e:	6a 28                	push   $0x28
f010c910:	eb 2a                	jmp    f010c93c <_alltraps>

f010c912 <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f010c912:	6a 00                	push   $0x0
f010c914:	6a 29                	push   $0x29
f010c916:	eb 24                	jmp    f010c93c <_alltraps>

f010c918 <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010c918:	6a 00                	push   $0x0
f010c91a:	6a 2a                	push   $0x2a
f010c91c:	eb 1e                	jmp    f010c93c <_alltraps>

f010c91e <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010c91e:	6a 00                	push   $0x0
f010c920:	6a 2b                	push   $0x2b
f010c922:	eb 18                	jmp    f010c93c <_alltraps>

f010c924 <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010c924:	6a 00                	push   $0x0
f010c926:	6a 2c                	push   $0x2c
f010c928:	eb 12                	jmp    f010c93c <_alltraps>

f010c92a <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010c92a:	6a 00                	push   $0x0
f010c92c:	6a 2d                	push   $0x2d
f010c92e:	eb 0c                	jmp    f010c93c <_alltraps>

f010c930 <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f010c930:	6a 00                	push   $0x0
f010c932:	6a 2e                	push   $0x2e
f010c934:	eb 06                	jmp    f010c93c <_alltraps>

f010c936 <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f010c936:	6a 00                	push   $0x0
f010c938:	6a 2f                	push   $0x2f
f010c93a:	eb 00                	jmp    f010c93c <_alltraps>

f010c93c <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds
f010c93c:	1e                   	push   %ds
push %es
f010c93d:	06                   	push   %es
pushal
f010c93e:	60                   	pusha  

mov $(GD_KD), %ax
f010c93f:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f010c943:	8e d8                	mov    %eax,%ds
mov %ax,%es
f010c945:	8e c0                	mov    %eax,%es

push %esp
f010c947:	54                   	push   %esp

call trap
f010c948:	e8 dc fb ff ff       	call   f010c529 <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at
f010c94d:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal
f010c94e:	61                   	popa   
pop %es
f010c94f:	07                   	pop    %es
pop %ds
f010c950:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f010c951:	83 c4 08             	add    $0x8,%esp

iret
f010c954:	cf                   	iret   

f010c955 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010c955:	55                   	push   %ebp
f010c956:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010c958:	8b 45 08             	mov    0x8(%ebp),%eax
f010c95b:	8b 15 54 5d 87 f0    	mov    0xf0875d54,%edx
f010c961:	29 d0                	sub    %edx,%eax
f010c963:	c1 f8 03             	sar    $0x3,%eax
f010c966:	89 c2                	mov    %eax,%edx
f010c968:	89 d0                	mov    %edx,%eax
f010c96a:	c1 e0 02             	shl    $0x2,%eax
f010c96d:	01 d0                	add    %edx,%eax
f010c96f:	c1 e0 02             	shl    $0x2,%eax
f010c972:	01 d0                	add    %edx,%eax
f010c974:	c1 e0 02             	shl    $0x2,%eax
f010c977:	01 d0                	add    %edx,%eax
f010c979:	89 c1                	mov    %eax,%ecx
f010c97b:	c1 e1 08             	shl    $0x8,%ecx
f010c97e:	01 c8                	add    %ecx,%eax
f010c980:	89 c1                	mov    %eax,%ecx
f010c982:	c1 e1 10             	shl    $0x10,%ecx
f010c985:	01 c8                	add    %ecx,%eax
f010c987:	01 c0                	add    %eax,%eax
f010c989:	01 d0                	add    %edx,%eax
}
f010c98b:	5d                   	pop    %ebp
f010c98c:	c3                   	ret    

f010c98d <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010c98d:	55                   	push   %ebp
f010c98e:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010c990:	ff 75 08             	pushl  0x8(%ebp)
f010c993:	e8 bd ff ff ff       	call   f010c955 <to_frame_number>
f010c998:	83 c4 04             	add    $0x4,%esp
f010c99b:	c1 e0 0c             	shl    $0xc,%eax
}
f010c99e:	c9                   	leave  
f010c99f:	c3                   	ret    

f010c9a0 <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010c9a0:	55                   	push   %ebp
f010c9a1:	89 e5                	mov    %esp,%ebp
f010c9a3:	83 ec 18             	sub    $0x18,%esp
f010c9a6:	8b 45 10             	mov    0x10(%ebp),%eax
f010c9a9:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f010c9ac:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010c9b0:	74 26                	je     f010c9d8 <sys_cputs+0x38>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f010c9b2:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f010c9b7:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c9ba:	8b 15 f4 53 87 f0    	mov    0xf08753f4,%edx
f010c9c0:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f010c9c6:	83 ec 04             	sub    $0x4,%esp
f010c9c9:	50                   	push   %eax
f010c9ca:	52                   	push   %edx
f010c9cb:	68 b0 75 13 f0       	push   $0xf01375b0
f010c9d0:	e8 39 43 ff ff       	call   f0100d0e <cprintf>
f010c9d5:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f010c9d8:	83 ec 04             	sub    $0x4,%esp
f010c9db:	ff 75 08             	pushl  0x8(%ebp)
f010c9de:	ff 75 0c             	pushl  0xc(%ebp)
f010c9e1:	68 b9 75 13 f0       	push   $0xf01375b9
f010c9e6:	e8 23 43 ff ff       	call   f0100d0e <cprintf>
f010c9eb:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f010c9ee:	90                   	nop
f010c9ef:	c9                   	leave  
f010c9f0:	c3                   	ret    

f010c9f1 <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010c9f1:	55                   	push   %ebp
f010c9f2:	89 e5                	mov    %esp,%ebp
f010c9f4:	83 ec 18             	sub    $0x18,%esp
f010c9f7:	8b 45 08             	mov    0x8(%ebp),%eax
f010c9fa:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010c9fd:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010ca01:	83 ec 08             	sub    $0x8,%esp
f010ca04:	50                   	push   %eax
f010ca05:	68 be 75 13 f0       	push   $0xf01375be
f010ca0a:	e8 ff 42 ff ff       	call   f0100d0e <cprintf>
f010ca0f:	83 c4 10             	add    $0x10,%esp
}
f010ca12:	90                   	nop
f010ca13:	c9                   	leave  
f010ca14:	c3                   	ret    

f010ca15 <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010ca15:	55                   	push   %ebp
f010ca16:	89 e5                	mov    %esp,%ebp
f010ca18:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f010ca1b:	e8 28 41 ff ff       	call   f0100b48 <cons_getc2>
f010ca20:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f010ca23:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010ca26:	c9                   	leave  
f010ca27:	c3                   	ret    

f010ca28 <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010ca28:	55                   	push   %ebp
f010ca29:	89 e5                	mov    %esp,%ebp
f010ca2b:	83 ec 18             	sub    $0x18,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010ca2e:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f010ca33:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct FrameInfo *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010ca36:	83 ec 0c             	sub    $0xc,%esp
f010ca39:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010ca3c:	50                   	push   %eax
f010ca3d:	e8 b0 9e ff ff       	call   f01068f2 <allocate_frame>
f010ca42:	83 c4 10             	add    $0x10,%esp
f010ca45:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010ca48:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010ca4c:	75 08                	jne    f010ca56 <__sys_allocate_page+0x2e>
		return r ;
f010ca4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ca51:	e9 e9 00 00 00       	jmp    f010cb3f <__sys_allocate_page+0x117>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010ca56:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca59:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010ca5e:	77 0c                	ja     f010ca6c <__sys_allocate_page+0x44>
f010ca60:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca63:	25 ff 0f 00 00       	and    $0xfff,%eax
f010ca68:	85 c0                	test   %eax,%eax
f010ca6a:	74 0a                	je     f010ca76 <__sys_allocate_page+0x4e>
		return E_INVAL;
f010ca6c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010ca71:	e9 c9 00 00 00       	jmp    f010cb3f <__sys_allocate_page+0x117>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010ca76:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ca79:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010ca7e:	83 f8 04             	cmp    $0x4,%eax
f010ca81:	74 0a                	je     f010ca8d <__sys_allocate_page+0x65>
		return E_INVAL;
f010ca83:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010ca88:	e9 b2 00 00 00       	jmp    f010cb3f <__sys_allocate_page+0x117>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010ca8d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ca90:	83 ec 0c             	sub    $0xc,%esp
f010ca93:	50                   	push   %eax
f010ca94:	e8 f4 fe ff ff       	call   f010c98d <to_physical_address>
f010ca99:	83 c4 10             	add    $0x10,%esp
f010ca9c:	89 45 ec             	mov    %eax,-0x14(%ebp)
#if USE_KHEAP
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unsed VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(e->env_page_directory, ptr_frame_info, USER_LIMIT, PERM_WRITEABLE);
f010ca9f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010caa2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010caa5:	8b 40 5c             	mov    0x5c(%eax),%eax
f010caa8:	6a 02                	push   $0x2
f010caaa:	68 00 00 80 ef       	push   $0xef800000
f010caaf:	52                   	push   %edx
f010cab0:	50                   	push   %eax
f010cab1:	e8 8b a2 ff ff       	call   f0106d41 <map_frame>
f010cab6:	83 c4 10             	add    $0x10,%esp
		memset((void*)USER_LIMIT, 0, PAGE_SIZE);
f010cab9:	83 ec 04             	sub    $0x4,%esp
f010cabc:	68 00 10 00 00       	push   $0x1000
f010cac1:	6a 00                	push   $0x0
f010cac3:	68 00 00 80 ef       	push   $0xef800000
f010cac8:	e8 ed 45 02 00       	call   f01310ba <memset>
f010cacd:	83 c4 10             	add    $0x10,%esp

		// Temporarily increase the references to prevent unmap_frame from removing the frame
		// we just got from allocate_frame, we will use it for the new page
		ptr_frame_info->references += 1;
f010cad0:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cad3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cad6:	8b 40 08             	mov    0x8(%eax),%eax
f010cad9:	40                   	inc    %eax
f010cada:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(e->env_page_directory, USER_LIMIT);
f010cade:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cae1:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cae4:	83 ec 08             	sub    $0x8,%esp
f010cae7:	68 00 00 80 ef       	push   $0xef800000
f010caec:	50                   	push   %eax
f010caed:	e8 84 a3 ff ff       	call   f0106e76 <unmap_frame>
f010caf2:	83 c4 10             	add    $0x10,%esp

		//return it to the original status
		ptr_frame_info->references -= 1;
f010caf5:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010caf8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cafb:	8b 40 08             	mov    0x8(%eax),%eax
f010cafe:	48                   	dec    %eax
f010caff:	66 89 42 08          	mov    %ax,0x8(%edx)
#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
	}
#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, (uint32)va, perm) ;
f010cb03:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010cb06:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cb09:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cb0c:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cb0f:	ff 75 0c             	pushl  0xc(%ebp)
f010cb12:	51                   	push   %ecx
f010cb13:	52                   	push   %edx
f010cb14:	50                   	push   %eax
f010cb15:	e8 27 a2 ff ff       	call   f0106d41 <map_frame>
f010cb1a:	83 c4 10             	add    $0x10,%esp
f010cb1d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010cb20:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010cb24:	75 14                	jne    f010cb3a <__sys_allocate_page+0x112>
	{
		decrement_references(ptr_frame_info);
f010cb26:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cb29:	83 ec 0c             	sub    $0xc,%esp
f010cb2c:	50                   	push   %eax
f010cb2d:	e8 4f 9f ff ff       	call   f0106a81 <decrement_references>
f010cb32:	83 c4 10             	add    $0x10,%esp
		return r;
f010cb35:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cb38:	eb 05                	jmp    f010cb3f <__sys_allocate_page+0x117>
	}
	return 0 ;
f010cb3a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010cb3f:	c9                   	leave  
f010cb40:	c3                   	ret    

f010cb41 <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010cb41:	55                   	push   %ebp
f010cb42:	89 e5                	mov    %esp,%ebp
f010cb44:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010cb47:	83 ec 04             	sub    $0x4,%esp
f010cb4a:	68 c1 75 13 f0       	push   $0xf01375c1
f010cb4f:	68 b3 00 00 00       	push   $0xb3
f010cb54:	68 df 75 13 f0       	push   $0xf01375df
f010cb59:	e8 a7 36 ff ff       	call   f0100205 <_panic>

f010cb5e <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010cb5e:	55                   	push   %ebp
f010cb5f:	89 e5                	mov    %esp,%ebp
f010cb61:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010cb64:	83 ec 04             	sub    $0x4,%esp
f010cb67:	68 f4 75 13 f0       	push   $0xf01375f4
f010cb6c:	68 c3 00 00 00       	push   $0xc3
f010cb71:	68 df 75 13 f0       	push   $0xf01375df
f010cb76:	e8 8a 36 ff ff       	call   f0100205 <_panic>

f010cb7b <sys_calculate_required_frames>:
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010cb7b:	55                   	push   %ebp
f010cb7c:	89 e5                	mov    %esp,%ebp
f010cb7e:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010cb81:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f010cb86:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cb89:	83 ec 04             	sub    $0x4,%esp
f010cb8c:	ff 75 0c             	pushl  0xc(%ebp)
f010cb8f:	ff 75 08             	pushl  0x8(%ebp)
f010cb92:	50                   	push   %eax
f010cb93:	e8 a8 c1 ff ff       	call   f0108d40 <calculate_required_frames>
f010cb98:	83 c4 10             	add    $0x10,%esp
}
f010cb9b:	c9                   	leave  
f010cb9c:	c3                   	ret    

f010cb9d <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010cb9d:	55                   	push   %ebp
f010cb9e:	89 e5                	mov    %esp,%ebp
f010cba0:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010cba3:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010cba6:	83 ec 0c             	sub    $0xc,%esp
f010cba9:	50                   	push   %eax
f010cbaa:	e8 2c a4 ff ff       	call   f0106fdb <calculate_available_frames>
f010cbaf:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010cbb2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010cbb5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cbb8:	01 d0                	add    %edx,%eax
}
f010cbba:	c9                   	leave  
f010cbbb:	c3                   	ret    

f010cbbc <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010cbbc:	55                   	push   %ebp
f010cbbd:	89 e5                	mov    %esp,%ebp
f010cbbf:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010cbc2:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010cbc5:	83 ec 0c             	sub    $0xc,%esp
f010cbc8:	50                   	push   %eax
f010cbc9:	e8 0d a4 ff ff       	call   f0106fdb <calculate_available_frames>
f010cbce:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010cbd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010cbd4:	c9                   	leave  
f010cbd5:	c3                   	ret    

f010cbd6 <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010cbd6:	55                   	push   %ebp
f010cbd7:	89 e5                	mov    %esp,%ebp
f010cbd9:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010cbdc:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010cbdf:	83 ec 0c             	sub    $0xc,%esp
f010cbe2:	50                   	push   %eax
f010cbe3:	e8 f3 a3 ff ff       	call   f0106fdb <calculate_available_frames>
f010cbe8:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010cbeb:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010cbee:	c9                   	leave  
f010cbef:	c3                   	ret    

f010cbf0 <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010cbf0:	55                   	push   %ebp
f010cbf1:	89 e5                	mov    %esp,%ebp
f010cbf3:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010cbf6:	83 ec 0c             	sub    $0xc,%esp
f010cbf9:	ff 75 08             	pushl  0x8(%ebp)
f010cbfc:	e8 d6 31 02 00       	call   f012fdd7 <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010cc01:	83 c4 10             	add    $0x10,%esp
}
f010cc04:	c9                   	leave  
f010cc05:	c3                   	ret    

f010cc06 <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010cc06:	55                   	push   %ebp
f010cc07:	89 e5                	mov    %esp,%ebp
f010cc09:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010cc0c:	e8 1e 31 02 00       	call   f012fd2f <scarce_memory>
}
f010cc11:	90                   	nop
f010cc12:	c9                   	leave  
f010cc13:	c3                   	ret    

f010cc14 <sys_clearFFL>:

void sys_clearFFL()
{
f010cc14:	55                   	push   %ebp
f010cc15:	89 e5                	mov    %esp,%ebp
f010cc17:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010cc1a:	a1 24 5d 87 f0       	mov    0xf0875d24,%eax
f010cc1f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010cc22:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010cc29:	eb 12                	jmp    f010cc3d <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010cc2b:	83 ec 0c             	sub    $0xc,%esp
f010cc2e:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010cc31:	50                   	push   %eax
f010cc32:	e8 bb 9c ff ff       	call   f01068f2 <allocate_frame>
f010cc37:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010cc3a:	ff 45 f4             	incl   -0xc(%ebp)
f010cc3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cc40:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010cc43:	7c e6                	jl     f010cc2b <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010cc45:	90                   	nop
f010cc46:	c9                   	leave  
f010cc47:	c3                   	ret    

f010cc48 <sys_pf_calculate_allocated_pages>:

/*******************************/
/* PAGE FILE SYSTEM CALLS */
/*******************************/
int sys_pf_calculate_allocated_pages(void)
{
f010cc48:	55                   	push   %ebp
f010cc49:	89 e5                	mov    %esp,%ebp
f010cc4b:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010cc4e:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f010cc53:	83 ec 0c             	sub    $0xc,%esp
f010cc56:	50                   	push   %eax
f010cc57:	e8 cc 70 ff ff       	call   f0103d28 <pf_calculate_allocated_pages>
f010cc5c:	83 c4 10             	add    $0x10,%esp
}
f010cc5f:	c9                   	leave  
f010cc60:	c3                   	ret    

f010cc61 <sys_free_user_mem>:

/*******************************/
/* USER HEAP SYSTEM CALLS */
/*******************************/
void sys_free_user_mem(uint32 virtual_address, uint32 size)
{
f010cc61:	55                   	push   %ebp
f010cc62:	89 e5                	mov    %esp,%ebp
f010cc64:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010cc67:	e8 9a 11 00 00       	call   f010de06 <isBufferingEnabled>
f010cc6c:	84 c0                	test   %al,%al
f010cc6e:	74 19                	je     f010cc89 <sys_free_user_mem+0x28>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
f010cc70:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f010cc75:	83 ec 04             	sub    $0x4,%esp
f010cc78:	ff 75 0c             	pushl  0xc(%ebp)
f010cc7b:	ff 75 08             	pushl  0x8(%ebp)
f010cc7e:	50                   	push   %eax
f010cc7f:	e8 a5 c1 ff ff       	call   f0108e29 <__free_user_mem_with_buffering>
f010cc84:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
	}
	return;
f010cc87:	eb 18                	jmp    f010cca1 <sys_free_user_mem+0x40>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
f010cc89:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f010cc8e:	83 ec 04             	sub    $0x4,%esp
f010cc91:	ff 75 0c             	pushl  0xc(%ebp)
f010cc94:	ff 75 08             	pushl  0x8(%ebp)
f010cc97:	50                   	push   %eax
f010cc98:	e8 6f c1 ff ff       	call   f0108e0c <free_user_mem>
f010cc9d:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010cca0:	90                   	nop
}
f010cca1:	c9                   	leave  
f010cca2:	c3                   	ret    

f010cca3 <sys_allocate_user_mem>:

void sys_allocate_user_mem(uint32 virtual_address, uint32 size)
{
f010cca3:	55                   	push   %ebp
f010cca4:	89 e5                	mov    %esp,%ebp
f010cca6:	83 ec 08             	sub    $0x8,%esp
	allocate_user_mem(curenv, virtual_address, size);
f010cca9:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f010ccae:	83 ec 04             	sub    $0x4,%esp
f010ccb1:	ff 75 0c             	pushl  0xc(%ebp)
f010ccb4:	ff 75 08             	pushl  0x8(%ebp)
f010ccb7:	50                   	push   %eax
f010ccb8:	e8 32 c1 ff ff       	call   f0108def <allocate_user_mem>
f010ccbd:	83 c4 10             	add    $0x10,%esp
	return;
f010ccc0:	90                   	nop
}
f010ccc1:	c9                   	leave  
f010ccc2:	c3                   	ret    

f010ccc3 <sys_allocate_chunk>:

void sys_allocate_chunk(uint32 virtual_address, uint32 size, uint32 perms)
{
f010ccc3:	55                   	push   %ebp
f010ccc4:	89 e5                	mov    %esp,%ebp
f010ccc6:	83 ec 08             	sub    $0x8,%esp
	allocate_chunk(curenv->env_page_directory, virtual_address, size, perms);
f010ccc9:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f010ccce:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ccd1:	ff 75 10             	pushl  0x10(%ebp)
f010ccd4:	ff 75 0c             	pushl  0xc(%ebp)
f010ccd7:	ff 75 08             	pushl  0x8(%ebp)
f010ccda:	50                   	push   %eax
f010ccdb:	e8 45 be ff ff       	call   f0108b25 <allocate_chunk>
f010cce0:	83 c4 10             	add    $0x10,%esp
	return;
f010cce3:	90                   	nop
}
f010cce4:	c9                   	leave  
f010cce5:	c3                   	ret    

f010cce6 <sys_move_user_mem>:

//2014
void sys_move_user_mem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010cce6:	55                   	push   %ebp
f010cce7:	89 e5                	mov    %esp,%ebp
f010cce9:	83 ec 08             	sub    $0x8,%esp
	move_user_mem(curenv, src_virtual_address, dst_virtual_address, size);
f010ccec:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f010ccf1:	ff 75 10             	pushl  0x10(%ebp)
f010ccf4:	ff 75 0c             	pushl  0xc(%ebp)
f010ccf7:	ff 75 08             	pushl  0x8(%ebp)
f010ccfa:	50                   	push   %eax
f010ccfb:	e8 46 c1 ff ff       	call   f0108e46 <move_user_mem>
f010cd00:	83 c4 10             	add    $0x10,%esp
	return;
f010cd03:	90                   	nop
}
f010cd04:	c9                   	leave  
f010cd05:	c3                   	ret    

f010cd06 <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010cd06:	55                   	push   %ebp
f010cd07:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010cd09:	a1 30 5d 87 f0       	mov    0xf0875d30,%eax
}
f010cd0e:	5d                   	pop    %ebp
f010cd0f:	c3                   	ret    

f010cd10 <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010cd10:	55                   	push   %ebp
f010cd11:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010cd13:	8b 45 08             	mov    0x8(%ebp),%eax
f010cd16:	a3 30 5d 87 f0       	mov    %eax,0xf0875d30
}
f010cd1b:	90                   	nop
f010cd1c:	5d                   	pop    %ebp
f010cd1d:	c3                   	ret    

f010cd1e <sys_disable_interrupt>:
/*******************************/
/* INTERRUPTS SYSTEM CALLS */
/*******************************/
//NEW!! 2012...
void sys_disable_interrupt()
{
f010cd1e:	55                   	push   %ebp
f010cd1f:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010cd21:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f010cd26:	8b 15 f4 53 87 f0    	mov    0xf08753f4,%edx
f010cd2c:	8b 52 38             	mov    0x38(%edx),%edx
f010cd2f:	80 e6 fd             	and    $0xfd,%dh
f010cd32:	89 50 38             	mov    %edx,0x38(%eax)
}
f010cd35:	90                   	nop
f010cd36:	5d                   	pop    %ebp
f010cd37:	c3                   	ret    

f010cd38 <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010cd38:	55                   	push   %ebp
f010cd39:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010cd3b:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f010cd40:	8b 15 f4 53 87 f0    	mov    0xf08753f4,%edx
f010cd46:	8b 52 38             	mov    0x38(%edx),%edx
f010cd49:	80 ce 02             	or     $0x2,%dh
f010cd4c:	89 50 38             	mov    %edx,0x38(%eax)
}
f010cd4f:	90                   	nop
f010cd50:	5d                   	pop    %ebp
f010cd51:	c3                   	ret    

f010cd52 <sys_createSemaphore>:

/*******************************/
/* SEMAPHORES SYSTEM CALLS */
/*******************************/
int sys_createSemaphore(char* semaphoreName, uint32 initialValue)
{
f010cd52:	55                   	push   %ebp
f010cd53:	89 e5                	mov    %esp,%ebp
f010cd55:	83 ec 08             	sub    $0x8,%esp
	return createSemaphore(curenv->env_id, semaphoreName, initialValue);
f010cd58:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f010cd5d:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cd60:	83 ec 04             	sub    $0x4,%esp
f010cd63:	ff 75 0c             	pushl  0xc(%ebp)
f010cd66:	ff 75 08             	pushl  0x8(%ebp)
f010cd69:	50                   	push   %eax
f010cd6a:	e8 b0 14 00 00       	call   f010e21f <createSemaphore>
f010cd6f:	83 c4 10             	add    $0x10,%esp
}
f010cd72:	c9                   	leave  
f010cd73:	c3                   	ret    

f010cd74 <sys_waitSemaphore>:

void sys_waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010cd74:	55                   	push   %ebp
f010cd75:	89 e5                	mov    %esp,%ebp
f010cd77:	83 ec 08             	sub    $0x8,%esp
	waitSemaphore(ownerEnvID, semaphoreName);
f010cd7a:	83 ec 08             	sub    $0x8,%esp
f010cd7d:	ff 75 0c             	pushl  0xc(%ebp)
f010cd80:	ff 75 08             	pushl  0x8(%ebp)
f010cd83:	e8 b4 14 00 00       	call   f010e23c <waitSemaphore>
f010cd88:	83 c4 10             	add    $0x10,%esp
}
f010cd8b:	90                   	nop
f010cd8c:	c9                   	leave  
f010cd8d:	c3                   	ret    

f010cd8e <sys_signalSemaphore>:

void sys_signalSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010cd8e:	55                   	push   %ebp
f010cd8f:	89 e5                	mov    %esp,%ebp
f010cd91:	83 ec 08             	sub    $0x8,%esp
	signalSemaphore(ownerEnvID, semaphoreName);
f010cd94:	83 ec 08             	sub    $0x8,%esp
f010cd97:	ff 75 0c             	pushl  0xc(%ebp)
f010cd9a:	ff 75 08             	pushl  0x8(%ebp)
f010cd9d:	e8 b7 14 00 00       	call   f010e259 <signalSemaphore>
f010cda2:	83 c4 10             	add    $0x10,%esp
}
f010cda5:	90                   	nop
f010cda6:	c9                   	leave  
f010cda7:	c3                   	ret    

f010cda8 <sys_getSemaphoreValue>:

int sys_getSemaphoreValue(int32 ownerEnvID, char* semaphoreName)
{
f010cda8:	55                   	push   %ebp
f010cda9:	89 e5                	mov    %esp,%ebp
f010cdab:	83 ec 18             	sub    $0x18,%esp
	int semID = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010cdae:	83 ec 08             	sub    $0x8,%esp
f010cdb1:	ff 75 0c             	pushl  0xc(%ebp)
f010cdb4:	ff 75 08             	pushl  0x8(%ebp)
f010cdb7:	e8 db 12 00 00       	call   f010e097 <get_semaphore_object_ID>
f010cdbc:	83 c4 10             	add    $0x10,%esp
f010cdbf:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(semID >= 0 && semID < MAX_SEMAPHORES) ;
f010cdc2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cdc6:	78 0c                	js     f010cdd4 <sys_getSemaphoreValue+0x2c>
f010cdc8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010cdcb:	a1 b4 5c 87 f0       	mov    0xf0875cb4,%eax
f010cdd0:	39 c2                	cmp    %eax,%edx
f010cdd2:	72 19                	jb     f010cded <sys_getSemaphoreValue+0x45>
f010cdd4:	68 14 76 13 f0       	push   $0xf0137614
f010cdd9:	68 39 76 13 f0       	push   $0xf0137639
f010cdde:	68 4a 01 00 00       	push   $0x14a
f010cde3:	68 df 75 13 f0       	push   $0xf01375df
f010cde8:	e8 18 34 ff ff       	call   f0100205 <_panic>

	return semaphores[semID].value ;
f010cded:	8b 0d 0c 5d 87 f0    	mov    0xf0875d0c,%ecx
f010cdf3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010cdf6:	89 d0                	mov    %edx,%eax
f010cdf8:	c1 e0 02             	shl    $0x2,%eax
f010cdfb:	01 d0                	add    %edx,%eax
f010cdfd:	01 c0                	add    %eax,%eax
f010cdff:	01 d0                	add    %edx,%eax
f010ce01:	01 c0                	add    %eax,%eax
f010ce03:	01 d0                	add    %edx,%eax
f010ce05:	c1 e0 02             	shl    $0x2,%eax
f010ce08:	01 c8                	add    %ecx,%eax
f010ce0a:	8b 40 54             	mov    0x54(%eax),%eax
}
f010ce0d:	c9                   	leave  
f010ce0e:	c3                   	ret    

f010ce0f <sys_createSharedObject>:

/*******************************/
/* SHARED MEMORY SYSTEM CALLS */
/*******************************/
int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010ce0f:	55                   	push   %ebp
f010ce10:	89 e5                	mov    %esp,%ebp
f010ce12:	83 ec 18             	sub    $0x18,%esp
f010ce15:	8b 45 10             	mov    0x10(%ebp),%eax
f010ce18:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(curenv->env_id, shareName, size, isWritable, virtual_address);
f010ce1b:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010ce1f:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f010ce24:	8b 40 4c             	mov    0x4c(%eax),%eax
f010ce27:	83 ec 0c             	sub    $0xc,%esp
f010ce2a:	ff 75 14             	pushl  0x14(%ebp)
f010ce2d:	52                   	push   %edx
f010ce2e:	ff 75 0c             	pushl  0xc(%ebp)
f010ce31:	ff 75 08             	pushl  0x8(%ebp)
f010ce34:	50                   	push   %eax
f010ce35:	e8 62 a7 ff ff       	call   f010759c <createSharedObject>
f010ce3a:	83 c4 20             	add    $0x20,%esp
}
f010ce3d:	c9                   	leave  
f010ce3e:	c3                   	ret    

f010ce3f <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010ce3f:	55                   	push   %ebp
f010ce40:	89 e5                	mov    %esp,%ebp
f010ce42:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010ce45:	83 ec 08             	sub    $0x8,%esp
f010ce48:	ff 75 0c             	pushl  0xc(%ebp)
f010ce4b:	ff 75 08             	pushl  0x8(%ebp)
f010ce4e:	e8 03 a7 ff ff       	call   f0107556 <getSizeOfSharedObject>
f010ce53:	83 c4 10             	add    $0x10,%esp
}
f010ce56:	c9                   	leave  
f010ce57:	c3                   	ret    

f010ce58 <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010ce58:	55                   	push   %ebp
f010ce59:	89 e5                	mov    %esp,%ebp
f010ce5b:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010ce5e:	83 ec 04             	sub    $0x4,%esp
f010ce61:	ff 75 10             	pushl  0x10(%ebp)
f010ce64:	ff 75 0c             	pushl  0xc(%ebp)
f010ce67:	ff 75 08             	pushl  0x8(%ebp)
f010ce6a:	e8 50 a7 ff ff       	call   f01075bf <getSharedObject>
f010ce6f:	83 c4 10             	add    $0x10,%esp
}
f010ce72:	c9                   	leave  
f010ce73:	c3                   	ret    

f010ce74 <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010ce74:	55                   	push   %ebp
f010ce75:	89 e5                	mov    %esp,%ebp
f010ce77:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010ce7a:	83 ec 08             	sub    $0x8,%esp
f010ce7d:	ff 75 0c             	pushl  0xc(%ebp)
f010ce80:	ff 75 08             	pushl  0x8(%ebp)
f010ce83:	e8 54 a7 ff ff       	call   f01075dc <freeSharedObject>
f010ce88:	83 c4 10             	add    $0x10,%esp
}
f010ce8b:	c9                   	leave  
f010ce8c:	c3                   	ret    

f010ce8d <sys_getMaxShares>:

uint32 sys_getMaxShares()
{
f010ce8d:	55                   	push   %ebp
f010ce8e:	89 e5                	mov    %esp,%ebp
	return MAX_SHARES;
f010ce90:	a1 28 5d 87 f0       	mov    0xf0875d28,%eax
}
f010ce95:	5d                   	pop    %ebp
f010ce96:	c3                   	ret    

f010ce97 <sys_getenvid>:
/* USER ENVIRONMENT SYSTEM CALLS */
/*********************************/
// Returns the current environment's envid.
//2017
static int32 sys_getenvid(void)
{
f010ce97:	55                   	push   %ebp
f010ce98:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f010ce9a:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f010ce9f:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010cea2:	5d                   	pop    %ebp
f010cea3:	c3                   	ret    

f010cea4 <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010cea4:	55                   	push   %ebp
f010cea5:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f010cea7:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f010ceac:	89 c2                	mov    %eax,%edx
f010ceae:	a1 f0 53 87 f0       	mov    0xf08753f0,%eax
f010ceb3:	29 c2                	sub    %eax,%edx
f010ceb5:	89 d0                	mov    %edx,%eax
f010ceb7:	c1 f8 04             	sar    $0x4,%eax
f010ceba:	89 c2                	mov    %eax,%edx
f010cebc:	89 d0                	mov    %edx,%eax
f010cebe:	c1 e0 03             	shl    $0x3,%eax
f010cec1:	01 d0                	add    %edx,%eax
f010cec3:	01 c0                	add    %eax,%eax
f010cec5:	01 d0                	add    %edx,%eax
f010cec7:	c1 e0 03             	shl    $0x3,%eax
f010ceca:	01 d0                	add    %edx,%eax
f010cecc:	89 c1                	mov    %eax,%ecx
f010cece:	c1 e1 08             	shl    $0x8,%ecx
f010ced1:	01 c8                	add    %ecx,%eax
f010ced3:	01 c0                	add    %eax,%eax
f010ced5:	01 d0                	add    %edx,%eax
f010ced7:	01 c0                	add    %eax,%eax
f010ced9:	01 d0                	add    %edx,%eax
f010cedb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010cee2:	01 d0                	add    %edx,%eax
f010cee4:	89 c2                	mov    %eax,%edx
f010cee6:	c1 e2 09             	shl    $0x9,%edx
f010cee9:	29 c2                	sub    %eax,%edx
f010ceeb:	89 d0                	mov    %edx,%eax
f010ceed:	f7 d8                	neg    %eax
}
f010ceef:	5d                   	pop    %ebp
f010cef0:	c3                   	ret    

f010cef1 <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010cef1:	55                   	push   %ebp
f010cef2:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010cef4:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f010cef9:	8b 40 50             	mov    0x50(%eax),%eax
}
f010cefc:	5d                   	pop    %ebp
f010cefd:	c3                   	ret    

f010cefe <sys_destroy_env>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_destroy_env(int32 envid)
{
f010cefe:	55                   	push   %ebp
f010ceff:	89 e5                	mov    %esp,%ebp
f010cf01:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;
	if (envid == 0)
f010cf04:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010cf08:	75 0a                	jne    f010cf14 <sys_destroy_env+0x16>
	{
		e = curenv ;
f010cf0a:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f010cf0f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010cf12:	eb 22                	jmp    f010cf36 <sys_destroy_env+0x38>
	}
	else if ((r = envid2env(envid, &e, 0)) < 0)
f010cf14:	83 ec 04             	sub    $0x4,%esp
f010cf17:	6a 00                	push   $0x0
f010cf19:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010cf1c:	50                   	push   %eax
f010cf1d:	ff 75 08             	pushl  0x8(%ebp)
f010cf20:	e8 e5 cb ff ff       	call   f0109b0a <envid2env>
f010cf25:	83 c4 10             	add    $0x10,%esp
f010cf28:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010cf2b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cf2f:	79 05                	jns    f010cf36 <sys_destroy_env+0x38>
	{
		return r;
f010cf31:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cf34:	eb 5e                	jmp    f010cf94 <sys_destroy_env+0x96>
	}

	if (e == curenv)
f010cf36:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010cf39:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f010cf3e:	39 c2                	cmp    %eax,%edx
f010cf40:	75 1b                	jne    f010cf5d <sys_destroy_env+0x5f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010cf42:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f010cf47:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cf4a:	83 ec 08             	sub    $0x8,%esp
f010cf4d:	50                   	push   %eax
f010cf4e:	68 4e 76 13 f0       	push   $0xf013764e
f010cf53:	e8 b6 3d ff ff       	call   f0100d0e <cprintf>
f010cf58:	83 c4 10             	add    $0x10,%esp
f010cf5b:	eb 20                	jmp    f010cf7d <sys_destroy_env+0x7f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010cf5d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cf60:	8b 50 4c             	mov    0x4c(%eax),%edx
f010cf63:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f010cf68:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cf6b:	83 ec 04             	sub    $0x4,%esp
f010cf6e:	52                   	push   %edx
f010cf6f:	50                   	push   %eax
f010cf70:	68 69 76 13 f0       	push   $0xf0137669
f010cf75:	e8 94 3d ff ff       	call   f0100d0e <cprintf>
f010cf7a:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010cf7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cf80:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cf83:	83 ec 0c             	sub    $0xc,%esp
f010cf86:	50                   	push   %eax
f010cf87:	e8 b3 86 ff ff       	call   f010563f <sched_kill_env>
f010cf8c:	83 c4 10             	add    $0x10,%esp

	return 0;
f010cf8f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010cf94:	c9                   	leave  
f010cf95:	c3                   	ret    

f010cf96 <sys_exit_env>:

//Just place the current env into the EXIT queue & schedule the next one
static void sys_exit_env()
{
f010cf96:	55                   	push   %ebp
f010cf97:	89 e5                	mov    %esp,%ebp
f010cf99:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010cf9c:	e8 4a cb ff ff       	call   f0109aeb <env_exit>
	//env_run_cmd_prmpt();
}
f010cfa1:	90                   	nop
f010cfa2:	c9                   	leave  
f010cfa3:	c3                   	ret    

f010cfa4 <sys_create_env>:

//New update in 2020
//Create a new env & add it to the NEW queue
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010cfa4:	55                   	push   %ebp
f010cfa5:	89 e5                	mov    %esp,%ebp
f010cfa7:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010cfaa:	ff 75 14             	pushl  0x14(%ebp)
f010cfad:	ff 75 10             	pushl  0x10(%ebp)
f010cfb0:	ff 75 0c             	pushl  0xc(%ebp)
f010cfb3:	ff 75 08             	pushl  0x8(%ebp)
f010cfb6:	e8 a8 be ff ff       	call   f0108e63 <env_create>
f010cfbb:	83 c4 10             	add    $0x10,%esp
f010cfbe:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010cfc1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cfc5:	75 07                	jne    f010cfce <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010cfc7:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010cfcc:	eb 14                	jmp    f010cfe2 <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010cfce:	83 ec 0c             	sub    $0xc,%esp
f010cfd1:	ff 75 f4             	pushl  -0xc(%ebp)
f010cfd4:	e8 2b 82 ff ff       	call   f0105204 <sched_new_env>
f010cfd9:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010cfdc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cfdf:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010cfe2:	c9                   	leave  
f010cfe3:	c3                   	ret    

f010cfe4 <sys_run_env>:

//Place a new env into the READY queue
void sys_run_env(int32 envId)
{
f010cfe4:	55                   	push   %ebp
f010cfe5:	89 e5                	mov    %esp,%ebp
f010cfe7:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010cfea:	8b 45 08             	mov    0x8(%ebp),%eax
f010cfed:	83 ec 0c             	sub    $0xc,%esp
f010cff0:	50                   	push   %eax
f010cff1:	e8 2b 82 ff ff       	call   f0105221 <sched_run_env>
f010cff6:	83 c4 10             	add    $0x10,%esp
}
f010cff9:	90                   	nop
f010cffa:	c9                   	leave  
f010cffb:	c3                   	ret    

f010cffc <sys_get_virtual_time>:
/*******************************/
/* ETC... SYSTEM CALLS */
/*******************************/

struct uint64 sys_get_virtual_time()
{
f010cffc:	55                   	push   %ebp
f010cffd:	89 e5                	mov    %esp,%ebp
f010cfff:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010d002:	0f 31                	rdtsc  
f010d004:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010d007:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010d00a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d00d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d010:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d013:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010d016:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010d019:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d01c:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d01f:	89 01                	mov    %eax,(%ecx)
f010d021:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010d024:	8b 45 08             	mov    0x8(%ebp),%eax
f010d027:	c9                   	leave  
f010d028:	c2 04 00             	ret    $0x4

f010d02b <sys_rcr2>:

uint32 sys_rcr2()
{
f010d02b:	55                   	push   %ebp
f010d02c:	89 e5                	mov    %esp,%ebp
f010d02e:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010d031:	0f 20 d0             	mov    %cr2,%eax
f010d034:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010d037:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010d03a:	90                   	nop
}
f010d03b:	c9                   	leave  
f010d03c:	c3                   	ret    

f010d03d <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010d03d:	55                   	push   %ebp
f010d03e:	89 e5                	mov    %esp,%ebp
f010d040:	83 ec 04             	sub    $0x4,%esp
f010d043:	8b 45 08             	mov    0x8(%ebp),%eax
f010d046:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010d049:	8a 45 fc             	mov    -0x4(%ebp),%al
f010d04c:	a2 a8 5c 87 f0       	mov    %al,0xf0875ca8
}
f010d051:	90                   	nop
f010d052:	c9                   	leave  
f010d053:	c3                   	ret    

f010d054 <rsttst>:

uint32 tstcnt;
void rsttst()
{
f010d054:	55                   	push   %ebp
f010d055:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f010d057:	c7 05 b0 5e 87 f0 00 	movl   $0x0,0xf0875eb0
f010d05e:	00 00 00 
}
f010d061:	90                   	nop
f010d062:	5d                   	pop    %ebp
f010d063:	c3                   	ret    

f010d064 <inctst>:
void inctst()
{
f010d064:	55                   	push   %ebp
f010d065:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f010d067:	a1 b0 5e 87 f0       	mov    0xf0875eb0,%eax
f010d06c:	40                   	inc    %eax
f010d06d:	a3 b0 5e 87 f0       	mov    %eax,0xf0875eb0
}
f010d072:	90                   	nop
f010d073:	5d                   	pop    %ebp
f010d074:	c3                   	ret    

f010d075 <gettst>:
uint32 gettst()
{
f010d075:	55                   	push   %ebp
f010d076:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f010d078:	a1 b0 5e 87 f0       	mov    0xf0875eb0,%eax
}
f010d07d:	5d                   	pop    %ebp
f010d07e:	c3                   	ret    

f010d07f <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f010d07f:	55                   	push   %ebp
f010d080:	89 e5                	mov    %esp,%ebp
f010d082:	83 ec 28             	sub    $0x28,%esp
f010d085:	8b 45 14             	mov    0x14(%ebp),%eax
f010d088:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f010d08b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f010d092:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f010d096:	83 f8 65             	cmp    $0x65,%eax
f010d099:	74 5d                	je     f010d0f8 <tst+0x79>
f010d09b:	83 f8 65             	cmp    $0x65,%eax
f010d09e:	7f 0a                	jg     f010d0aa <tst+0x2b>
f010d0a0:	83 f8 62             	cmp    $0x62,%eax
f010d0a3:	74 73                	je     f010d118 <tst+0x99>
f010d0a5:	e9 91 00 00 00       	jmp    f010d13b <tst+0xbc>
f010d0aa:	83 f8 67             	cmp    $0x67,%eax
f010d0ad:	74 29                	je     f010d0d8 <tst+0x59>
f010d0af:	83 f8 6c             	cmp    $0x6c,%eax
f010d0b2:	0f 85 83 00 00 00    	jne    f010d13b <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f010d0b8:	8b 45 08             	mov    0x8(%ebp),%eax
f010d0bb:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d0be:	73 09                	jae    f010d0c9 <tst+0x4a>
			chk = 1;
f010d0c0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d0c7:	eb 68                	jmp    f010d131 <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f010d0c9:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d0cd:	74 62                	je     f010d131 <tst+0xb2>
			chk = 1;
f010d0cf:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d0d6:	eb 59                	jmp    f010d131 <tst+0xb2>
	case 'g':
		if (n > v1)
f010d0d8:	8b 45 08             	mov    0x8(%ebp),%eax
f010d0db:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d0de:	76 09                	jbe    f010d0e9 <tst+0x6a>
			chk = 1;
f010d0e0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d0e7:	eb 4b                	jmp    f010d134 <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f010d0e9:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d0ed:	74 45                	je     f010d134 <tst+0xb5>
			chk = 1;
f010d0ef:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d0f6:	eb 3c                	jmp    f010d134 <tst+0xb5>
	case 'e':
		if (n == v1)
f010d0f8:	8b 45 08             	mov    0x8(%ebp),%eax
f010d0fb:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d0fe:	75 09                	jne    f010d109 <tst+0x8a>
			chk = 1;
f010d100:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d107:	eb 2e                	jmp    f010d137 <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f010d109:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d10d:	74 28                	je     f010d137 <tst+0xb8>
			chk = 1;
f010d10f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d116:	eb 1f                	jmp    f010d137 <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v1)
f010d118:	8b 45 08             	mov    0x8(%ebp),%eax
f010d11b:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d11e:	72 1a                	jb     f010d13a <tst+0xbb>
f010d120:	8b 45 08             	mov    0x8(%ebp),%eax
f010d123:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d126:	77 12                	ja     f010d13a <tst+0xbb>
			chk = 1;
f010d128:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d12f:	eb 09                	jmp    f010d13a <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d131:	90                   	nop
f010d132:	eb 07                	jmp    f010d13b <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d134:	90                   	nop
f010d135:	eb 04                	jmp    f010d13b <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d137:	90                   	nop
f010d138:	eb 01                	jmp    f010d13b <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v1)
			chk = 1;
		break;
f010d13a:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f010d13b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d13f:	75 17                	jne    f010d158 <tst+0xd9>
f010d141:	83 ec 04             	sub    $0x4,%esp
f010d144:	68 81 76 13 f0       	push   $0xf0137681
f010d149:	68 00 02 00 00       	push   $0x200
f010d14e:	68 df 75 13 f0       	push   $0xf01375df
f010d153:	e8 ad 30 ff ff       	call   f0100205 <_panic>
	tstcnt++ ;
f010d158:	a1 b0 5e 87 f0       	mov    0xf0875eb0,%eax
f010d15d:	40                   	inc    %eax
f010d15e:	a3 b0 5e 87 f0       	mov    %eax,0xf0875eb0
	return;
f010d163:	90                   	nop
}
f010d164:	c9                   	leave  
f010d165:	c3                   	ret    

f010d166 <chktst>:

void chktst(uint32 n)
{
f010d166:	55                   	push   %ebp
f010d167:	89 e5                	mov    %esp,%ebp
f010d169:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f010d16c:	a1 b0 5e 87 f0       	mov    0xf0875eb0,%eax
f010d171:	3b 45 08             	cmp    0x8(%ebp),%eax
f010d174:	75 12                	jne    f010d188 <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f010d176:	83 ec 0c             	sub    $0xc,%esp
f010d179:	68 94 76 13 f0       	push   $0xf0137694
f010d17e:	e8 8b 3b ff ff       	call   f0100d0e <cprintf>
f010d183:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f010d186:	eb 17                	jmp    f010d19f <chktst+0x39>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f010d188:	83 ec 04             	sub    $0x4,%esp
f010d18b:	68 c0 76 13 f0       	push   $0xf01376c0
f010d190:	68 0a 02 00 00       	push   $0x20a
f010d195:	68 df 75 13 f0       	push   $0xf01375df
f010d19a:	e8 66 30 ff ff       	call   f0100205 <_panic>
}
f010d19f:	c9                   	leave  
f010d1a0:	c3                   	ret    

f010d1a1 <sys_check_LRU_lists>:



//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f010d1a1:	55                   	push   %ebp
f010d1a2:	89 e5                	mov    %esp,%ebp
f010d1a4:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010d1a7:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f010d1ac:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int active_list_validation = 1;
f010d1af:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
	int second_list_validation = 1;
f010d1b6:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f010d1bd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010d1c1:	0f 84 a5 00 00 00    	je     f010d26c <sys_check_LRU_lists+0xcb>
	{
		int idx_active_list = 0;
f010d1c7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d1ce:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d1d1:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f010d1d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d1da:	eb 4a                	jmp    f010d226 <sys_check_LRU_lists+0x85>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f010d1dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d1df:	8b 00                	mov    (%eax),%eax
f010d1e1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010d1e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d1e7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d1ec:	89 c2                	mov    %eax,%edx
f010d1ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d1f1:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d1f8:	8b 45 08             	mov    0x8(%ebp),%eax
f010d1fb:	01 c8                	add    %ecx,%eax
f010d1fd:	8b 00                	mov    (%eax),%eax
f010d1ff:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010d202:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d205:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d20a:	39 c2                	cmp    %eax,%edx
f010d20c:	74 09                	je     f010d217 <sys_check_LRU_lists+0x76>
			{
				active_list_validation = 0;
f010d20e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
				break;
f010d215:	eb 3e                	jmp    f010d255 <sys_check_LRU_lists+0xb4>
			}
			idx_active_list++;
f010d217:	ff 45 f0             	incl   -0x10(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d21a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d21d:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d223:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d226:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d22a:	74 08                	je     f010d234 <sys_check_LRU_lists+0x93>
f010d22c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d22f:	8b 40 10             	mov    0x10(%eax),%eax
f010d232:	eb 05                	jmp    f010d239 <sys_check_LRU_lists+0x98>
f010d234:	b8 00 00 00 00       	mov    $0x0,%eax
f010d239:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d23c:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010d242:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d245:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d24b:	85 c0                	test   %eax,%eax
f010d24d:	75 8d                	jne    f010d1dc <sys_check_LRU_lists+0x3b>
f010d24f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d253:	75 87                	jne    f010d1dc <sys_check_LRU_lists+0x3b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f010d255:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d258:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f010d25e:	8b 45 10             	mov    0x10(%ebp),%eax
f010d261:	39 c2                	cmp    %eax,%edx
f010d263:	74 07                	je     f010d26c <sys_check_LRU_lists+0xcb>
		{
			active_list_validation = 0;
f010d265:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f010d26c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010d270:	0f 84 a5 00 00 00    	je     f010d31b <sys_check_LRU_lists+0x17a>
	{
		int idx_second_list = 0;
f010d276:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d27d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d280:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f010d286:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d289:	eb 4a                	jmp    f010d2d5 <sys_check_LRU_lists+0x134>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f010d28b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d28e:	8b 00                	mov    (%eax),%eax
f010d290:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d293:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d296:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d29b:	89 c2                	mov    %eax,%edx
f010d29d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d2a0:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d2a7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d2aa:	01 c8                	add    %ecx,%eax
f010d2ac:	8b 00                	mov    (%eax),%eax
f010d2ae:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010d2b1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d2b4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d2b9:	39 c2                	cmp    %eax,%edx
f010d2bb:	74 09                	je     f010d2c6 <sys_check_LRU_lists+0x125>
			{
				second_list_validation = 0;
f010d2bd:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
				break;
f010d2c4:	eb 3e                	jmp    f010d304 <sys_check_LRU_lists+0x163>
			}
			idx_second_list++;
f010d2c6:	ff 45 ec             	incl   -0x14(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d2c9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d2cc:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d2d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d2d5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d2d9:	74 08                	je     f010d2e3 <sys_check_LRU_lists+0x142>
f010d2db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d2de:	8b 40 10             	mov    0x10(%eax),%eax
f010d2e1:	eb 05                	jmp    f010d2e8 <sys_check_LRU_lists+0x147>
f010d2e3:	b8 00 00 00 00       	mov    $0x0,%eax
f010d2e8:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d2eb:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010d2f1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d2f4:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d2fa:	85 c0                	test   %eax,%eax
f010d2fc:	75 8d                	jne    f010d28b <sys_check_LRU_lists+0xea>
f010d2fe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d302:	75 87                	jne    f010d28b <sys_check_LRU_lists+0xea>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f010d304:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d307:	8b 90 e4 05 00 00    	mov    0x5e4(%eax),%edx
f010d30d:	8b 45 14             	mov    0x14(%ebp),%eax
f010d310:	39 c2                	cmp    %eax,%edx
f010d312:	74 07                	je     f010d31b <sys_check_LRU_lists+0x17a>
			second_list_validation = 0;
f010d314:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	}
	return active_list_validation&second_list_validation;
f010d31b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d31e:	23 45 f8             	and    -0x8(%ebp),%eax
}
f010d321:	c9                   	leave  
f010d322:	c3                   	ret    

f010d323 <sys_check_LRU_lists_free>:



//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f010d323:	55                   	push   %ebp
f010d324:	89 e5                	mov    %esp,%ebp
f010d326:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010d329:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f010d32e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int list_validation_count = 0;
f010d331:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d338:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d33b:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f010d341:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d344:	eb 65                	jmp    f010d3ab <sys_check_LRU_lists_free+0x88>
	{
		for(int var = 0; var < list_size; var++)
f010d346:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010d34d:	eb 3a                	jmp    f010d389 <sys_check_LRU_lists_free+0x66>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010d34f:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d352:	8b 00                	mov    (%eax),%eax
f010d354:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010d357:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d35a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d35f:	89 c2                	mov    %eax,%edx
f010d361:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d364:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d36b:	8b 45 08             	mov    0x8(%ebp),%eax
f010d36e:	01 c8                	add    %ecx,%eax
f010d370:	8b 00                	mov    (%eax),%eax
f010d372:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d375:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d378:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d37d:	39 c2                	cmp    %eax,%edx
f010d37f:	75 05                	jne    f010d386 <sys_check_LRU_lists_free+0x63>
			{
				list_validation_count++;
f010d381:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010d384:	eb 0b                	jmp    f010d391 <sys_check_LRU_lists_free+0x6e>
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f010d386:	ff 45 f4             	incl   -0xc(%ebp)
f010d389:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d38c:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d38f:	7c be                	jl     f010d34f <sys_check_LRU_lists_free+0x2c>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010d391:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010d395:	7e 08                	jle    f010d39f <sys_check_LRU_lists_free+0x7c>
			return list_validation_count;
f010d397:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d39a:	e9 ed 00 00 00       	jmp    f010d48c <sys_check_LRU_lists_free+0x169>
	struct Env* env = curenv;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d39f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d3a2:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d3a8:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d3ab:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d3af:	74 08                	je     f010d3b9 <sys_check_LRU_lists_free+0x96>
f010d3b1:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d3b4:	8b 40 10             	mov    0x10(%eax),%eax
f010d3b7:	eb 05                	jmp    f010d3be <sys_check_LRU_lists_free+0x9b>
f010d3b9:	b8 00 00 00 00       	mov    $0x0,%eax
f010d3be:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d3c1:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010d3c7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d3ca:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d3d0:	85 c0                	test   %eax,%eax
f010d3d2:	0f 85 6e ff ff ff    	jne    f010d346 <sys_check_LRU_lists_free+0x23>
f010d3d8:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d3dc:	0f 85 64 ff ff ff    	jne    f010d346 <sys_check_LRU_lists_free+0x23>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d3e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d3e5:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f010d3eb:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d3ee:	eb 62                	jmp    f010d452 <sys_check_LRU_lists_free+0x12f>
	{
		for(int var = 0; var < list_size; var++)
f010d3f0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010d3f7:	eb 3a                	jmp    f010d433 <sys_check_LRU_lists_free+0x110>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010d3f9:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d3fc:	8b 00                	mov    (%eax),%eax
f010d3fe:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010d401:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d404:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d409:	89 c2                	mov    %eax,%edx
f010d40b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d40e:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d415:	8b 45 08             	mov    0x8(%ebp),%eax
f010d418:	01 c8                	add    %ecx,%eax
f010d41a:	8b 00                	mov    (%eax),%eax
f010d41c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010d41f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d422:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d427:	39 c2                	cmp    %eax,%edx
f010d429:	75 05                	jne    f010d430 <sys_check_LRU_lists_free+0x10d>
			{
				list_validation_count++;
f010d42b:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010d42e:	eb 0b                	jmp    f010d43b <sys_check_LRU_lists_free+0x118>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f010d430:	ff 45 f0             	incl   -0x10(%ebp)
f010d433:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d436:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d439:	7c be                	jl     f010d3f9 <sys_check_LRU_lists_free+0xd6>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010d43b:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010d43f:	7e 05                	jle    f010d446 <sys_check_LRU_lists_free+0x123>
			return list_validation_count;
f010d441:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d444:	eb 46                	jmp    f010d48c <sys_check_LRU_lists_free+0x169>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d446:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d449:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d44f:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d452:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d456:	74 08                	je     f010d460 <sys_check_LRU_lists_free+0x13d>
f010d458:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d45b:	8b 40 10             	mov    0x10(%eax),%eax
f010d45e:	eb 05                	jmp    f010d465 <sys_check_LRU_lists_free+0x142>
f010d460:	b8 00 00 00 00       	mov    $0x0,%eax
f010d465:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d468:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010d46e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d471:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d477:	85 c0                	test   %eax,%eax
f010d479:	0f 85 71 ff ff ff    	jne    f010d3f0 <sys_check_LRU_lists_free+0xcd>
f010d47f:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d483:	0f 85 67 ff ff ff    	jne    f010d3f0 <sys_check_LRU_lists_free+0xcd>
			return list_validation_count;

	}


	return list_validation_count;
f010d489:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f010d48c:	c9                   	leave  
f010d48d:	c3                   	ret    

f010d48e <syscall>:
/*****************************************************************************/
/************************* SYSTEM CALLS DISPATCHER ***************************/
/*****************************************************************************/
// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010d48e:	55                   	push   %ebp
f010d48f:	89 e5                	mov    %esp,%ebp
f010d491:	56                   	push   %esi
f010d492:	53                   	push   %ebx
f010d493:	83 ec 10             	sub    $0x10,%esp
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	// LAB 3: Your code here.
	switch(syscallno)
f010d496:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010d49a:	0f 87 0e 04 00 00    	ja     f010d8ae <syscall+0x420>
f010d4a0:	8b 45 08             	mov    0x8(%ebp),%eax
f010d4a3:	c1 e0 02             	shl    $0x2,%eax
f010d4a6:	05 dc 76 13 f0       	add    $0xf01376dc,%eax
f010d4ab:	8b 00                	mov    (%eax),%eax
f010d4ad:	ff e0                	jmp    *%eax
	{
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010d4af:	8b 45 14             	mov    0x14(%ebp),%eax
f010d4b2:	0f b6 d0             	movzbl %al,%edx
f010d4b5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d4b8:	83 ec 04             	sub    $0x4,%esp
f010d4bb:	52                   	push   %edx
f010d4bc:	ff 75 10             	pushl  0x10(%ebp)
f010d4bf:	50                   	push   %eax
f010d4c0:	e8 db f4 ff ff       	call   f010c9a0 <sys_cputs>
f010d4c5:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d4c8:	b8 00 00 00 00       	mov    $0x0,%eax
f010d4cd:	e9 e1 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010d4d2:	e8 3e f5 ff ff       	call   f010ca15 <sys_cgetc>
f010d4d7:	e9 d7 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010d4dc:	83 ec 08             	sub    $0x8,%esp
f010d4df:	ff 75 10             	pushl  0x10(%ebp)
f010d4e2:	ff 75 0c             	pushl  0xc(%ebp)
f010d4e5:	e8 91 f6 ff ff       	call   f010cb7b <sys_calculate_required_frames>
f010d4ea:	83 c4 10             	add    $0x10,%esp
f010d4ed:	e9 c1 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010d4f2:	e8 a6 f6 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f010d4f7:	e9 b7 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010d4fc:	e8 bb f6 ff ff       	call   f010cbbc <sys_calculate_modified_frames>
f010d501:	e9 ad 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010d506:	e8 cb f6 ff ff       	call   f010cbd6 <sys_calculate_notmod_frames>
f010d50b:	e9 a3 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010d510:	e8 33 f7 ff ff       	call   f010cc48 <sys_pf_calculate_allocated_pages>
f010d515:	e9 99 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010d51a:	83 ec 0c             	sub    $0xc,%esp
f010d51d:	ff 75 0c             	pushl  0xc(%ebp)
f010d520:	e8 cb f6 ff ff       	call   f010cbf0 <sys_calculate_pages_tobe_removed_ready_exit>
f010d525:	83 c4 10             	add    $0x10,%esp
f010d528:	e9 86 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010d52d:	e8 d4 f6 ff ff       	call   f010cc06 <sys_scarce_memory>
		return 0;
f010d532:	b8 00 00 00 00       	mov    $0x0,%eax
f010d537:	e9 77 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_free_user_mem:
		sys_free_user_mem(a1, a2);
f010d53c:	83 ec 08             	sub    $0x8,%esp
f010d53f:	ff 75 10             	pushl  0x10(%ebp)
f010d542:	ff 75 0c             	pushl  0xc(%ebp)
f010d545:	e8 17 f7 ff ff       	call   f010cc61 <sys_free_user_mem>
f010d54a:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d54d:	b8 00 00 00 00       	mov    $0x0,%eax
f010d552:	e9 5c 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010d557:	8b 55 10             	mov    0x10(%ebp),%edx
f010d55a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d55d:	83 ec 08             	sub    $0x8,%esp
f010d560:	52                   	push   %edx
f010d561:	50                   	push   %eax
f010d562:	e8 c1 f4 ff ff       	call   f010ca28 <__sys_allocate_page>
f010d567:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d56a:	b8 00 00 00 00       	mov    $0x0,%eax
f010d56f:	e9 3f 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010d574:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010d577:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010d57a:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d57d:	8b 55 10             	mov    0x10(%ebp),%edx
f010d580:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d583:	83 ec 0c             	sub    $0xc,%esp
f010d586:	56                   	push   %esi
f010d587:	53                   	push   %ebx
f010d588:	51                   	push   %ecx
f010d589:	52                   	push   %edx
f010d58a:	50                   	push   %eax
f010d58b:	e8 b1 f5 ff ff       	call   f010cb41 <__sys_map_frame>
f010d590:	83 c4 20             	add    $0x20,%esp
		return 0;
f010d593:	b8 00 00 00 00       	mov    $0x0,%eax
f010d598:	e9 16 03 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010d59d:	8b 55 10             	mov    0x10(%ebp),%edx
f010d5a0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5a3:	83 ec 08             	sub    $0x8,%esp
f010d5a6:	52                   	push   %edx
f010d5a7:	50                   	push   %eax
f010d5a8:	e8 b1 f5 ff ff       	call   f010cb5e <__sys_unmap_frame>
f010d5ad:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d5b0:	b8 00 00 00 00       	mov    $0x0,%eax
f010d5b5:	e9 f9 02 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

		//2022
	case SYS_allocate_chunk_in_mem:
		sys_allocate_chunk(a1, (uint32)a2, a3);
f010d5ba:	83 ec 04             	sub    $0x4,%esp
f010d5bd:	ff 75 14             	pushl  0x14(%ebp)
f010d5c0:	ff 75 10             	pushl  0x10(%ebp)
f010d5c3:	ff 75 0c             	pushl  0xc(%ebp)
f010d5c6:	e8 f8 f6 ff ff       	call   f010ccc3 <sys_allocate_chunk>
f010d5cb:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d5ce:	b8 00 00 00 00       	mov    $0x0,%eax
f010d5d3:	e9 db 02 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_disableINTR:
		sys_disable_interrupt();
f010d5d8:	e8 41 f7 ff ff       	call   f010cd1e <sys_disable_interrupt>
		return 0;
f010d5dd:	b8 00 00 00 00       	mov    $0x0,%eax
f010d5e2:	e9 cc 02 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010d5e7:	e8 4c f7 ff ff       	call   f010cd38 <sys_enable_interrupt>
		return 0;
f010d5ec:	b8 00 00 00 00       	mov    $0x0,%eax
f010d5f1:	e9 bd 02 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010d5f6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5f9:	0f be c0             	movsbl %al,%eax
f010d5fc:	83 ec 0c             	sub    $0xc,%esp
f010d5ff:	50                   	push   %eax
f010d600:	e8 ec f3 ff ff       	call   f010c9f1 <sys_cputc>
f010d605:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d608:	b8 00 00 00 00       	mov    $0x0,%eax
f010d60d:	e9 a1 02 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010d612:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d615:	0f be c0             	movsbl %al,%eax
f010d618:	83 ec 0c             	sub    $0xc,%esp
f010d61b:	50                   	push   %eax
f010d61c:	e8 f3 f5 ff ff       	call   f010cc14 <sys_clearFFL>
f010d621:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d624:	b8 00 00 00 00       	mov    $0x0,%eax
f010d629:	e9 85 02 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_create_semaphore:
		return sys_createSemaphore((char*)a1, a2);
f010d62e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d631:	83 ec 08             	sub    $0x8,%esp
f010d634:	ff 75 10             	pushl  0x10(%ebp)
f010d637:	50                   	push   %eax
f010d638:	e8 15 f7 ff ff       	call   f010cd52 <sys_createSemaphore>
f010d63d:	83 c4 10             	add    $0x10,%esp
f010d640:	e9 6e 02 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_wait_semaphore:
		sys_waitSemaphore((int32)a1, (char*)a2);
f010d645:	8b 55 10             	mov    0x10(%ebp),%edx
f010d648:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d64b:	83 ec 08             	sub    $0x8,%esp
f010d64e:	52                   	push   %edx
f010d64f:	50                   	push   %eax
f010d650:	e8 1f f7 ff ff       	call   f010cd74 <sys_waitSemaphore>
f010d655:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d658:	b8 00 00 00 00       	mov    $0x0,%eax
f010d65d:	e9 51 02 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_signal_semaphore:
		sys_signalSemaphore((int32)a1, (char*)a2);
f010d662:	8b 55 10             	mov    0x10(%ebp),%edx
f010d665:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d668:	83 ec 08             	sub    $0x8,%esp
f010d66b:	52                   	push   %edx
f010d66c:	50                   	push   %eax
f010d66d:	e8 1c f7 ff ff       	call   f010cd8e <sys_signalSemaphore>
f010d672:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d675:	b8 00 00 00 00       	mov    $0x0,%eax
f010d67a:	e9 34 02 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_get_semaphore_value:
		return sys_getSemaphoreValue((int32)a1, (char*)a2);
f010d67f:	8b 55 10             	mov    0x10(%ebp),%edx
f010d682:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d685:	83 ec 08             	sub    $0x8,%esp
f010d688:	52                   	push   %edx
f010d689:	50                   	push   %eax
f010d68a:	e8 19 f7 ff ff       	call   f010cda8 <sys_getSemaphoreValue>
f010d68f:	83 c4 10             	add    $0x10,%esp
f010d692:	e9 1c 02 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010d697:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010d69a:	8b 45 14             	mov    0x14(%ebp),%eax
f010d69d:	0f b6 d0             	movzbl %al,%edx
f010d6a0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d6a3:	51                   	push   %ecx
f010d6a4:	52                   	push   %edx
f010d6a5:	ff 75 10             	pushl  0x10(%ebp)
f010d6a8:	50                   	push   %eax
f010d6a9:	e8 61 f7 ff ff       	call   f010ce0f <sys_createSharedObject>
f010d6ae:	83 c4 10             	add    $0x10,%esp
f010d6b1:	e9 fd 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010d6b6:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d6b9:	8b 55 10             	mov    0x10(%ebp),%edx
f010d6bc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d6bf:	83 ec 04             	sub    $0x4,%esp
f010d6c2:	51                   	push   %ecx
f010d6c3:	52                   	push   %edx
f010d6c4:	50                   	push   %eax
f010d6c5:	e8 8e f7 ff ff       	call   f010ce58 <sys_getSharedObject>
f010d6ca:	83 c4 10             	add    $0x10,%esp
f010d6cd:	e9 e1 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010d6d2:	8b 55 10             	mov    0x10(%ebp),%edx
f010d6d5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d6d8:	83 ec 08             	sub    $0x8,%esp
f010d6db:	52                   	push   %edx
f010d6dc:	50                   	push   %eax
f010d6dd:	e8 92 f7 ff ff       	call   f010ce74 <sys_freeSharedObject>
f010d6e2:	83 c4 10             	add    $0x10,%esp
f010d6e5:	e9 c9 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010d6ea:	8b 55 10             	mov    0x10(%ebp),%edx
f010d6ed:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d6f0:	83 ec 08             	sub    $0x8,%esp
f010d6f3:	52                   	push   %edx
f010d6f4:	50                   	push   %eax
f010d6f5:	e8 45 f7 ff ff       	call   f010ce3f <sys_getSizeOfSharedObject>
f010d6fa:	83 c4 10             	add    $0x10,%esp
f010d6fd:	e9 b1 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_get_max_shares:
		return sys_getMaxShares();
f010d702:	e8 86 f7 ff ff       	call   f010ce8d <sys_getMaxShares>
f010d707:	e9 a7 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010d70c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d70f:	ff 75 18             	pushl  0x18(%ebp)
f010d712:	ff 75 14             	pushl  0x14(%ebp)
f010d715:	ff 75 10             	pushl  0x10(%ebp)
f010d718:	50                   	push   %eax
f010d719:	e8 86 f8 ff ff       	call   f010cfa4 <sys_create_env>
f010d71e:	83 c4 10             	add    $0x10,%esp
f010d721:	e9 8d 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010d726:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d729:	83 ec 0c             	sub    $0xc,%esp
f010d72c:	50                   	push   %eax
f010d72d:	e8 b2 f8 ff ff       	call   f010cfe4 <sys_run_env>
f010d732:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d735:	b8 00 00 00 00       	mov    $0x0,%eax
f010d73a:	e9 74 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010d73f:	e8 60 f7 ff ff       	call   f010cea4 <sys_getenvindex>
f010d744:	e9 6a 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010d749:	e8 49 f7 ff ff       	call   f010ce97 <sys_getenvid>
f010d74e:	e9 60 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010d753:	e8 99 f7 ff ff       	call   f010cef1 <sys_getparentenvid>
f010d758:	e9 56 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_destroy_env:
		return sys_destroy_env(a1);
f010d75d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d760:	83 ec 0c             	sub    $0xc,%esp
f010d763:	50                   	push   %eax
f010d764:	e8 95 f7 ff ff       	call   f010cefe <sys_destroy_env>
f010d769:	83 c4 10             	add    $0x10,%esp
f010d76c:	e9 42 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_exit_env:
		sys_exit_env();
f010d771:	e8 20 f8 ff ff       	call   f010cf96 <sys_exit_env>
		return 0;
f010d776:	b8 00 00 00 00       	mov    $0x0,%eax
f010d77b:	e9 33 01 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010d780:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010d783:	83 ec 0c             	sub    $0xc,%esp
f010d786:	50                   	push   %eax
f010d787:	e8 70 f8 ff ff       	call   f010cffc <sys_get_virtual_time>
f010d78c:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010d78f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d792:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010d795:	8b 45 10             	mov    0x10(%ebp),%eax
f010d798:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010d79b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d79e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d7a1:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010d7a3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d7a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d7a9:	89 10                	mov    %edx,(%eax)
		return 0;
f010d7ab:	b8 00 00 00 00       	mov    $0x0,%eax
f010d7b0:	e9 fe 00 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	}
	case SYS_move_user_mem:
		sys_move_user_mem(a1, a2, a3);
f010d7b5:	83 ec 04             	sub    $0x4,%esp
f010d7b8:	ff 75 14             	pushl  0x14(%ebp)
f010d7bb:	ff 75 10             	pushl  0x10(%ebp)
f010d7be:	ff 75 0c             	pushl  0xc(%ebp)
f010d7c1:	e8 20 f5 ff ff       	call   f010cce6 <sys_move_user_mem>
f010d7c6:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d7c9:	b8 00 00 00 00       	mov    $0x0,%eax
f010d7ce:	e9 e0 00 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010d7d3:	e8 53 f8 ff ff       	call   f010d02b <sys_rcr2>
f010d7d8:	e9 d6 00 00 00       	jmp    f010d8b3 <syscall+0x425>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010d7dd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d7e0:	0f b6 c0             	movzbl %al,%eax
f010d7e3:	83 ec 0c             	sub    $0xc,%esp
f010d7e6:	50                   	push   %eax
f010d7e7:	e8 51 f8 ff ff       	call   f010d03d <sys_bypassPageFault>
f010d7ec:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d7ef:	b8 00 00 00 00       	mov    $0x0,%eax
f010d7f4:	e9 ba 00 00 00       	jmp    f010d8b3 <syscall+0x425>

	case SYS_rsttst:
		rsttst();
f010d7f9:	e8 56 f8 ff ff       	call   f010d054 <rsttst>
		return 0;
f010d7fe:	b8 00 00 00 00       	mov    $0x0,%eax
f010d803:	e9 ab 00 00 00       	jmp    f010d8b3 <syscall+0x425>
	case SYS_inctst:
		inctst();
f010d808:	e8 57 f8 ff ff       	call   f010d064 <inctst>
		return 0;
f010d80d:	b8 00 00 00 00       	mov    $0x0,%eax
f010d812:	e9 9c 00 00 00       	jmp    f010d8b3 <syscall+0x425>
	case SYS_chktst:
		chktst(a1);
f010d817:	83 ec 0c             	sub    $0xc,%esp
f010d81a:	ff 75 0c             	pushl  0xc(%ebp)
f010d81d:	e8 44 f9 ff ff       	call   f010d166 <chktst>
f010d822:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d825:	b8 00 00 00 00       	mov    $0x0,%eax
f010d82a:	e9 84 00 00 00       	jmp    f010d8b3 <syscall+0x425>
	case SYS_gettst:
		return gettst();
f010d82f:	e8 41 f8 ff ff       	call   f010d075 <gettst>
f010d834:	eb 7d                	jmp    f010d8b3 <syscall+0x425>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010d836:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010d839:	8b 45 18             	mov    0x18(%ebp),%eax
f010d83c:	0f be c0             	movsbl %al,%eax
f010d83f:	83 ec 0c             	sub    $0xc,%esp
f010d842:	52                   	push   %edx
f010d843:	50                   	push   %eax
f010d844:	ff 75 14             	pushl  0x14(%ebp)
f010d847:	ff 75 10             	pushl  0x10(%ebp)
f010d84a:	ff 75 0c             	pushl  0xc(%ebp)
f010d84d:	e8 2d f8 ff ff       	call   f010d07f <tst>
f010d852:	83 c4 20             	add    $0x20,%esp
		return 0;
f010d855:	b8 00 00 00 00       	mov    $0x0,%eax
f010d85a:	eb 57                	jmp    f010d8b3 <syscall+0x425>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010d85c:	e8 a5 f4 ff ff       	call   f010cd06 <sys_get_heap_strategy>
f010d861:	eb 50                	jmp    f010d8b3 <syscall+0x425>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010d863:	83 ec 0c             	sub    $0xc,%esp
f010d866:	ff 75 0c             	pushl  0xc(%ebp)
f010d869:	e8 a2 f4 ff ff       	call   f010cd10 <sys_set_uheap_strategy>
f010d86e:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d871:	b8 00 00 00 00       	mov    $0x0,%eax
f010d876:	eb 3b                	jmp    f010d8b3 <syscall+0x425>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010d878:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010d87b:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d87e:	8b 55 10             	mov    0x10(%ebp),%edx
f010d881:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d884:	53                   	push   %ebx
f010d885:	51                   	push   %ecx
f010d886:	52                   	push   %edx
f010d887:	50                   	push   %eax
f010d888:	e8 14 f9 ff ff       	call   f010d1a1 <sys_check_LRU_lists>
f010d88d:	83 c4 10             	add    $0x10,%esp
f010d890:	eb 21                	jmp    f010d8b3 <syscall+0x425>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010d892:	8b 55 10             	mov    0x10(%ebp),%edx
f010d895:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d898:	83 ec 08             	sub    $0x8,%esp
f010d89b:	52                   	push   %edx
f010d89c:	50                   	push   %eax
f010d89d:	e8 81 fa ff ff       	call   f010d323 <sys_check_LRU_lists_free>
f010d8a2:	83 c4 10             	add    $0x10,%esp
f010d8a5:	eb 0c                	jmp    f010d8b3 <syscall+0x425>

	case NSYSCALLS:
		return 	-E_INVAL;
f010d8a7:	b8 03 00 00 00       	mov    $0x3,%eax
f010d8ac:	eb 05                	jmp    f010d8b3 <syscall+0x425>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010d8ae:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010d8b3:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010d8b6:	5b                   	pop    %ebx
f010d8b7:	5e                   	pop    %esi
f010d8b8:	5d                   	pop    %ebp
f010d8b9:	c3                   	ret    

f010d8ba <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010d8ba:	55                   	push   %ebp
f010d8bb:	89 e5                	mov    %esp,%ebp
f010d8bd:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010d8c0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d8c3:	8b 00                	mov    (%eax),%eax
f010d8c5:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d8c8:	8b 45 10             	mov    0x10(%ebp),%eax
f010d8cb:	8b 00                	mov    (%eax),%eax
f010d8cd:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d8d0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	while (l <= r) {
f010d8d7:	e9 ca 00 00 00       	jmp    f010d9a6 <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010d8dc:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d8df:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d8e2:	01 d0                	add    %edx,%eax
f010d8e4:	89 c2                	mov    %eax,%edx
f010d8e6:	c1 ea 1f             	shr    $0x1f,%edx
f010d8e9:	01 d0                	add    %edx,%eax
f010d8eb:	d1 f8                	sar    %eax
f010d8ed:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010d8f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d8f3:	89 45 f0             	mov    %eax,-0x10(%ebp)

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010d8f6:	eb 03                	jmp    f010d8fb <stab_binsearch+0x41>
			m--;
f010d8f8:	ff 4d f0             	decl   -0x10(%ebp)

	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010d8fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d8fe:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d901:	7c 1e                	jl     f010d921 <stab_binsearch+0x67>
f010d903:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d906:	89 d0                	mov    %edx,%eax
f010d908:	01 c0                	add    %eax,%eax
f010d90a:	01 d0                	add    %edx,%eax
f010d90c:	c1 e0 02             	shl    $0x2,%eax
f010d90f:	89 c2                	mov    %eax,%edx
f010d911:	8b 45 08             	mov    0x8(%ebp),%eax
f010d914:	01 d0                	add    %edx,%eax
f010d916:	8a 40 04             	mov    0x4(%eax),%al
f010d919:	0f b6 c0             	movzbl %al,%eax
f010d91c:	3b 45 14             	cmp    0x14(%ebp),%eax
f010d91f:	75 d7                	jne    f010d8f8 <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010d921:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d924:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d927:	7d 09                	jge    f010d932 <stab_binsearch+0x78>
			l = true_m + 1;
f010d929:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d92c:	40                   	inc    %eax
f010d92d:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010d930:	eb 74                	jmp    f010d9a6 <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010d932:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010d939:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d93c:	89 d0                	mov    %edx,%eax
f010d93e:	01 c0                	add    %eax,%eax
f010d940:	01 d0                	add    %edx,%eax
f010d942:	c1 e0 02             	shl    $0x2,%eax
f010d945:	89 c2                	mov    %eax,%edx
f010d947:	8b 45 08             	mov    0x8(%ebp),%eax
f010d94a:	01 d0                	add    %edx,%eax
f010d94c:	8b 40 08             	mov    0x8(%eax),%eax
f010d94f:	3b 45 18             	cmp    0x18(%ebp),%eax
f010d952:	73 11                	jae    f010d965 <stab_binsearch+0xab>
			*region_left = m;
f010d954:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d957:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d95a:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010d95c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d95f:	40                   	inc    %eax
f010d960:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d963:	eb 41                	jmp    f010d9a6 <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010d965:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d968:	89 d0                	mov    %edx,%eax
f010d96a:	01 c0                	add    %eax,%eax
f010d96c:	01 d0                	add    %edx,%eax
f010d96e:	c1 e0 02             	shl    $0x2,%eax
f010d971:	89 c2                	mov    %eax,%edx
f010d973:	8b 45 08             	mov    0x8(%ebp),%eax
f010d976:	01 d0                	add    %edx,%eax
f010d978:	8b 40 08             	mov    0x8(%eax),%eax
f010d97b:	3b 45 18             	cmp    0x18(%ebp),%eax
f010d97e:	76 14                	jbe    f010d994 <stab_binsearch+0xda>
			*region_right = m - 1;
f010d980:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d983:	8d 50 ff             	lea    -0x1(%eax),%edx
f010d986:	8b 45 10             	mov    0x10(%ebp),%eax
f010d989:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010d98b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d98e:	48                   	dec    %eax
f010d98f:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d992:	eb 12                	jmp    f010d9a6 <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010d994:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d997:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d99a:	89 10                	mov    %edx,(%eax)
			l = m;
f010d99c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d99f:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010d9a2:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;

	while (l <= r) {
f010d9a6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d9a9:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010d9ac:	0f 8e 2a ff ff ff    	jle    f010d8dc <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010d9b2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d9b6:	75 0f                	jne    f010d9c7 <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010d9b8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d9bb:	8b 00                	mov    (%eax),%eax
f010d9bd:	8d 50 ff             	lea    -0x1(%eax),%edx
f010d9c0:	8b 45 10             	mov    0x10(%ebp),%eax
f010d9c3:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010d9c5:	eb 3d                	jmp    f010da04 <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010d9c7:	8b 45 10             	mov    0x10(%ebp),%eax
f010d9ca:	8b 00                	mov    (%eax),%eax
f010d9cc:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d9cf:	eb 03                	jmp    f010d9d4 <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010d9d1:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010d9d4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d9d7:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010d9d9:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d9dc:	7d 1e                	jge    f010d9fc <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010d9de:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d9e1:	89 d0                	mov    %edx,%eax
f010d9e3:	01 c0                	add    %eax,%eax
f010d9e5:	01 d0                	add    %edx,%eax
f010d9e7:	c1 e0 02             	shl    $0x2,%eax
f010d9ea:	89 c2                	mov    %eax,%edx
f010d9ec:	8b 45 08             	mov    0x8(%ebp),%eax
f010d9ef:	01 d0                	add    %edx,%eax
f010d9f1:	8a 40 04             	mov    0x4(%eax),%al
f010d9f4:	0f b6 c0             	movzbl %al,%eax
f010d9f7:	3b 45 14             	cmp    0x14(%ebp),%eax
f010d9fa:	75 d5                	jne    f010d9d1 <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010d9fc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d9ff:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010da02:	89 10                	mov    %edx,(%eax)
	}
}
f010da04:	90                   	nop
f010da05:	c9                   	leave  
f010da06:	c3                   	ret    

f010da07 <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010da07:	55                   	push   %ebp
f010da08:	89 e5                	mov    %esp,%ebp
f010da0a:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010da0d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da10:	c7 00 a0 77 13 f0    	movl   $0xf01377a0,(%eax)
	info->eip_line = 0;
f010da16:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da19:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010da20:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da23:	c7 40 08 a0 77 13 f0 	movl   $0xf01377a0,0x8(%eax)
	info->eip_fn_namelen = 9;
f010da2a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da2d:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010da34:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da37:	8b 55 08             	mov    0x8(%ebp),%edx
f010da3a:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010da3d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da40:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010da47:	8b 45 08             	mov    0x8(%ebp),%eax
f010da4a:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010da4f:	76 1e                	jbe    f010da6f <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010da51:	c7 45 f4 10 d4 13 f0 	movl   $0xf013d410,-0xc(%ebp)
		stab_end = __STAB_END__;
f010da58:	c7 45 f0 ec c9 17 f0 	movl   $0xf017c9ec,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010da5f:	c7 45 ec ed c9 17 f0 	movl   $0xf017c9ed,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010da66:	c7 45 e8 51 95 18 f0 	movl   $0xf0189551,-0x18(%ebp)
f010da6d:	eb 2a                	jmp    f010da99 <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010da6f:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.

		stabs = usd->stabs;
f010da76:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010da79:	8b 00                	mov    (%eax),%eax
f010da7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010da7e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010da81:	8b 40 04             	mov    0x4(%eax),%eax
f010da84:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010da87:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010da8a:	8b 40 08             	mov    0x8(%eax),%eax
f010da8d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010da90:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010da93:	8b 40 0c             	mov    0xc(%eax),%eax
f010da96:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010da99:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010da9c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010da9f:	76 0a                	jbe    f010daab <debuginfo_eip+0xa4>
f010daa1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010daa4:	48                   	dec    %eax
f010daa5:	8a 00                	mov    (%eax),%al
f010daa7:	84 c0                	test   %al,%al
f010daa9:	74 0a                	je     f010dab5 <debuginfo_eip+0xae>
		return -1;
f010daab:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010dab0:	e9 01 02 00 00       	jmp    f010dcb6 <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.

	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010dab5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010dabc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010dabf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dac2:	29 c2                	sub    %eax,%edx
f010dac4:	89 d0                	mov    %edx,%eax
f010dac6:	c1 f8 02             	sar    $0x2,%eax
f010dac9:	89 c2                	mov    %eax,%edx
f010dacb:	89 d0                	mov    %edx,%eax
f010dacd:	c1 e0 02             	shl    $0x2,%eax
f010dad0:	01 d0                	add    %edx,%eax
f010dad2:	c1 e0 02             	shl    $0x2,%eax
f010dad5:	01 d0                	add    %edx,%eax
f010dad7:	c1 e0 02             	shl    $0x2,%eax
f010dada:	01 d0                	add    %edx,%eax
f010dadc:	89 c1                	mov    %eax,%ecx
f010dade:	c1 e1 08             	shl    $0x8,%ecx
f010dae1:	01 c8                	add    %ecx,%eax
f010dae3:	89 c1                	mov    %eax,%ecx
f010dae5:	c1 e1 10             	shl    $0x10,%ecx
f010dae8:	01 c8                	add    %ecx,%eax
f010daea:	01 c0                	add    %eax,%eax
f010daec:	01 d0                	add    %edx,%eax
f010daee:	48                   	dec    %eax
f010daef:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010daf2:	ff 75 08             	pushl  0x8(%ebp)
f010daf5:	6a 64                	push   $0x64
f010daf7:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010dafa:	50                   	push   %eax
f010dafb:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010dafe:	50                   	push   %eax
f010daff:	ff 75 f4             	pushl  -0xc(%ebp)
f010db02:	e8 b3 fd ff ff       	call   f010d8ba <stab_binsearch>
f010db07:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010db0a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010db0d:	85 c0                	test   %eax,%eax
f010db0f:	75 0a                	jne    f010db1b <debuginfo_eip+0x114>
		return -1;
f010db11:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010db16:	e9 9b 01 00 00       	jmp    f010dcb6 <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010db1b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010db1e:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010db21:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010db24:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010db27:	ff 75 08             	pushl  0x8(%ebp)
f010db2a:	6a 24                	push   $0x24
f010db2c:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010db2f:	50                   	push   %eax
f010db30:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010db33:	50                   	push   %eax
f010db34:	ff 75 f4             	pushl  -0xc(%ebp)
f010db37:	e8 7e fd ff ff       	call   f010d8ba <stab_binsearch>
f010db3c:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010db3f:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010db42:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010db45:	39 c2                	cmp    %eax,%edx
f010db47:	0f 8f 86 00 00 00    	jg     f010dbd3 <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010db4d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010db50:	89 c2                	mov    %eax,%edx
f010db52:	89 d0                	mov    %edx,%eax
f010db54:	01 c0                	add    %eax,%eax
f010db56:	01 d0                	add    %edx,%eax
f010db58:	c1 e0 02             	shl    $0x2,%eax
f010db5b:	89 c2                	mov    %eax,%edx
f010db5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010db60:	01 d0                	add    %edx,%eax
f010db62:	8b 00                	mov    (%eax),%eax
f010db64:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010db67:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010db6a:	29 d1                	sub    %edx,%ecx
f010db6c:	89 ca                	mov    %ecx,%edx
f010db6e:	39 d0                	cmp    %edx,%eax
f010db70:	73 22                	jae    f010db94 <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010db72:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010db75:	89 c2                	mov    %eax,%edx
f010db77:	89 d0                	mov    %edx,%eax
f010db79:	01 c0                	add    %eax,%eax
f010db7b:	01 d0                	add    %edx,%eax
f010db7d:	c1 e0 02             	shl    $0x2,%eax
f010db80:	89 c2                	mov    %eax,%edx
f010db82:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010db85:	01 d0                	add    %edx,%eax
f010db87:	8b 10                	mov    (%eax),%edx
f010db89:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010db8c:	01 c2                	add    %eax,%edx
f010db8e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db91:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010db94:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010db97:	89 c2                	mov    %eax,%edx
f010db99:	89 d0                	mov    %edx,%eax
f010db9b:	01 c0                	add    %eax,%eax
f010db9d:	01 d0                	add    %edx,%eax
f010db9f:	c1 e0 02             	shl    $0x2,%eax
f010dba2:	89 c2                	mov    %eax,%edx
f010dba4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dba7:	01 d0                	add    %edx,%eax
f010dba9:	8b 50 08             	mov    0x8(%eax),%edx
f010dbac:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbaf:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010dbb2:	8b 55 08             	mov    0x8(%ebp),%edx
f010dbb5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbb8:	8b 40 10             	mov    0x10(%eax),%eax
f010dbbb:	29 c2                	sub    %eax,%edx
f010dbbd:	89 d0                	mov    %edx,%eax
f010dbbf:	c1 f8 02             	sar    $0x2,%eax
f010dbc2:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010dbc5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010dbc8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010dbcb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010dbce:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010dbd1:	eb 15                	jmp    f010dbe8 <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010dbd3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbd6:	8b 55 08             	mov    0x8(%ebp),%edx
f010dbd9:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010dbdc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010dbdf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010dbe2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010dbe5:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010dbe8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbeb:	8b 40 08             	mov    0x8(%eax),%eax
f010dbee:	83 ec 08             	sub    $0x8,%esp
f010dbf1:	6a 3a                	push   $0x3a
f010dbf3:	50                   	push   %eax
f010dbf4:	e8 95 34 02 00       	call   f013108e <strfind>
f010dbf9:	83 c4 10             	add    $0x10,%esp
f010dbfc:	89 c2                	mov    %eax,%edx
f010dbfe:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc01:	8b 40 08             	mov    0x8(%eax),%eax
f010dc04:	29 c2                	sub    %eax,%edx
f010dc06:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc09:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010dc0c:	eb 03                	jmp    f010dc11 <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010dc0e:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010dc11:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010dc14:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010dc17:	7c 4e                	jl     f010dc67 <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010dc19:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dc1c:	89 d0                	mov    %edx,%eax
f010dc1e:	01 c0                	add    %eax,%eax
f010dc20:	01 d0                	add    %edx,%eax
f010dc22:	c1 e0 02             	shl    $0x2,%eax
f010dc25:	89 c2                	mov    %eax,%edx
f010dc27:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dc2a:	01 d0                	add    %edx,%eax
f010dc2c:	8a 40 04             	mov    0x4(%eax),%al
f010dc2f:	3c 84                	cmp    $0x84,%al
f010dc31:	74 34                	je     f010dc67 <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010dc33:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dc36:	89 d0                	mov    %edx,%eax
f010dc38:	01 c0                	add    %eax,%eax
f010dc3a:	01 d0                	add    %edx,%eax
f010dc3c:	c1 e0 02             	shl    $0x2,%eax
f010dc3f:	89 c2                	mov    %eax,%edx
f010dc41:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dc44:	01 d0                	add    %edx,%eax
f010dc46:	8a 40 04             	mov    0x4(%eax),%al
f010dc49:	3c 64                	cmp    $0x64,%al
f010dc4b:	75 c1                	jne    f010dc0e <debuginfo_eip+0x207>
f010dc4d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dc50:	89 d0                	mov    %edx,%eax
f010dc52:	01 c0                	add    %eax,%eax
f010dc54:	01 d0                	add    %edx,%eax
f010dc56:	c1 e0 02             	shl    $0x2,%eax
f010dc59:	89 c2                	mov    %eax,%edx
f010dc5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dc5e:	01 d0                	add    %edx,%eax
f010dc60:	8b 40 08             	mov    0x8(%eax),%eax
f010dc63:	85 c0                	test   %eax,%eax
f010dc65:	74 a7                	je     f010dc0e <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010dc67:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010dc6a:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010dc6d:	7c 42                	jl     f010dcb1 <debuginfo_eip+0x2aa>
f010dc6f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dc72:	89 d0                	mov    %edx,%eax
f010dc74:	01 c0                	add    %eax,%eax
f010dc76:	01 d0                	add    %edx,%eax
f010dc78:	c1 e0 02             	shl    $0x2,%eax
f010dc7b:	89 c2                	mov    %eax,%edx
f010dc7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dc80:	01 d0                	add    %edx,%eax
f010dc82:	8b 00                	mov    (%eax),%eax
f010dc84:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010dc87:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010dc8a:	29 d1                	sub    %edx,%ecx
f010dc8c:	89 ca                	mov    %ecx,%edx
f010dc8e:	39 d0                	cmp    %edx,%eax
f010dc90:	73 1f                	jae    f010dcb1 <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010dc92:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dc95:	89 d0                	mov    %edx,%eax
f010dc97:	01 c0                	add    %eax,%eax
f010dc99:	01 d0                	add    %edx,%eax
f010dc9b:	c1 e0 02             	shl    $0x2,%eax
f010dc9e:	89 c2                	mov    %eax,%edx
f010dca0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dca3:	01 d0                	add    %edx,%eax
f010dca5:	8b 10                	mov    (%eax),%edx
f010dca7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010dcaa:	01 c2                	add    %eax,%edx
f010dcac:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dcaf:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.


	return 0;
f010dcb1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dcb6:	c9                   	leave  
f010dcb7:	c3                   	ret    

f010dcb8 <setPageReplacmentAlgorithmLRU>:
//===============================
// REPLACEMENT STRATEGIES
//===============================
//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
f010dcb8:	55                   	push   %ebp
f010dcb9:	89 e5                	mov    %esp,%ebp
f010dcbb:	83 ec 08             	sub    $0x8,%esp
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
f010dcbe:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010dcc2:	74 1c                	je     f010dce0 <setPageReplacmentAlgorithmLRU+0x28>
f010dcc4:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010dcc8:	74 16                	je     f010dce0 <setPageReplacmentAlgorithmLRU+0x28>
f010dcca:	68 ac 77 13 f0       	push   $0xf01377ac
f010dccf:	68 f6 77 13 f0       	push   $0xf01377f6
f010dcd4:	6a 18                	push   $0x18
f010dcd6:	68 0b 78 13 f0       	push   $0xf013780b
f010dcdb:	e8 25 25 ff ff       	call   f0100205 <_panic>
	_PageRepAlgoType = LRU_TYPE ;
f010dce0:	8b 45 08             	mov    0x8(%ebp),%eax
f010dce3:	a3 88 5d 87 f0       	mov    %eax,0xf0875d88
}
f010dce8:	90                   	nop
f010dce9:	c9                   	leave  
f010dcea:	c3                   	ret    

f010dceb <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f010dceb:	55                   	push   %ebp
f010dcec:	89 e5                	mov    %esp,%ebp
f010dcee:	c7 05 88 5d 87 f0 03 	movl   $0x3,0xf0875d88
f010dcf5:	00 00 00 
f010dcf8:	90                   	nop
f010dcf9:	5d                   	pop    %ebp
f010dcfa:	c3                   	ret    

f010dcfb <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f010dcfb:	55                   	push   %ebp
f010dcfc:	89 e5                	mov    %esp,%ebp
f010dcfe:	c7 05 88 5d 87 f0 04 	movl   $0x4,0xf0875d88
f010dd05:	00 00 00 
f010dd08:	90                   	nop
f010dd09:	5d                   	pop    %ebp
f010dd0a:	c3                   	ret    

f010dd0b <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f010dd0b:	55                   	push   %ebp
f010dd0c:	89 e5                	mov    %esp,%ebp
f010dd0e:	c7 05 88 5d 87 f0 05 	movl   $0x5,0xf0875d88
f010dd15:	00 00 00 
f010dd18:	90                   	nop
f010dd19:	5d                   	pop    %ebp
f010dd1a:	c3                   	ret    

f010dd1b <setPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ void setPageReplacmentAlgorithmDynamicLocal(){_PageRepAlgoType = PG_REP_DYNAMIC_LOCAL;}
f010dd1b:	55                   	push   %ebp
f010dd1c:	89 e5                	mov    %esp,%ebp
f010dd1e:	c7 05 88 5d 87 f0 07 	movl   $0x7,0xf0875d88
f010dd25:	00 00 00 
f010dd28:	90                   	nop
f010dd29:	5d                   	pop    %ebp
f010dd2a:	c3                   	ret    

f010dd2b <setPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ void setPageReplacmentAlgorithmNchanceCLOCK(int PageWSMaxSweeps){_PageRepAlgoType = PG_REP_NchanceCLOCK;  page_WS_max_sweeps = PageWSMaxSweeps;}
f010dd2b:	55                   	push   %ebp
f010dd2c:	89 e5                	mov    %esp,%ebp
f010dd2e:	c7 05 88 5d 87 f0 06 	movl   $0x6,0xf0875d88
f010dd35:	00 00 00 
f010dd38:	8b 45 08             	mov    0x8(%ebp),%eax
f010dd3b:	a3 e4 5c 87 f0       	mov    %eax,0xf0875ce4
f010dd40:	90                   	nop
f010dd41:	5d                   	pop    %ebp
f010dd42:	c3                   	ret    

f010dd43 <isPageReplacmentAlgorithmLRU>:

//2020
uint32 isPageReplacmentAlgorithmLRU(int LRU_TYPE){return _PageRepAlgoType == LRU_TYPE ? 1 : 0;}
f010dd43:	55                   	push   %ebp
f010dd44:	89 e5                	mov    %esp,%ebp
f010dd46:	8b 15 88 5d 87 f0    	mov    0xf0875d88,%edx
f010dd4c:	8b 45 08             	mov    0x8(%ebp),%eax
f010dd4f:	39 c2                	cmp    %eax,%edx
f010dd51:	0f 94 c0             	sete   %al
f010dd54:	0f b6 c0             	movzbl %al,%eax
f010dd57:	5d                   	pop    %ebp
f010dd58:	c3                   	ret    

f010dd59 <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f010dd59:	55                   	push   %ebp
f010dd5a:	89 e5                	mov    %esp,%ebp
f010dd5c:	a1 88 5d 87 f0       	mov    0xf0875d88,%eax
f010dd61:	83 f8 03             	cmp    $0x3,%eax
f010dd64:	75 07                	jne    f010dd6d <isPageReplacmentAlgorithmCLOCK+0x14>
f010dd66:	b8 01 00 00 00       	mov    $0x1,%eax
f010dd6b:	eb 05                	jmp    f010dd72 <isPageReplacmentAlgorithmCLOCK+0x19>
f010dd6d:	b8 00 00 00 00       	mov    $0x0,%eax
f010dd72:	5d                   	pop    %ebp
f010dd73:	c3                   	ret    

f010dd74 <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f010dd74:	55                   	push   %ebp
f010dd75:	89 e5                	mov    %esp,%ebp
f010dd77:	a1 88 5d 87 f0       	mov    0xf0875d88,%eax
f010dd7c:	83 f8 04             	cmp    $0x4,%eax
f010dd7f:	75 07                	jne    f010dd88 <isPageReplacmentAlgorithmFIFO+0x14>
f010dd81:	b8 01 00 00 00       	mov    $0x1,%eax
f010dd86:	eb 05                	jmp    f010dd8d <isPageReplacmentAlgorithmFIFO+0x19>
f010dd88:	b8 00 00 00 00       	mov    $0x0,%eax
f010dd8d:	5d                   	pop    %ebp
f010dd8e:	c3                   	ret    

f010dd8f <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f010dd8f:	55                   	push   %ebp
f010dd90:	89 e5                	mov    %esp,%ebp
f010dd92:	a1 88 5d 87 f0       	mov    0xf0875d88,%eax
f010dd97:	83 f8 05             	cmp    $0x5,%eax
f010dd9a:	75 07                	jne    f010dda3 <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f010dd9c:	b8 01 00 00 00       	mov    $0x1,%eax
f010dda1:	eb 05                	jmp    f010dda8 <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f010dda3:	b8 00 00 00 00       	mov    $0x0,%eax
f010dda8:	5d                   	pop    %ebp
f010dda9:	c3                   	ret    

f010ddaa <isPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ uint32 isPageReplacmentAlgorithmDynamicLocal(){if(_PageRepAlgoType == PG_REP_DYNAMIC_LOCAL) return 1; return 0;}
f010ddaa:	55                   	push   %ebp
f010ddab:	89 e5                	mov    %esp,%ebp
f010ddad:	a1 88 5d 87 f0       	mov    0xf0875d88,%eax
f010ddb2:	83 f8 07             	cmp    $0x7,%eax
f010ddb5:	75 07                	jne    f010ddbe <isPageReplacmentAlgorithmDynamicLocal+0x14>
f010ddb7:	b8 01 00 00 00       	mov    $0x1,%eax
f010ddbc:	eb 05                	jmp    f010ddc3 <isPageReplacmentAlgorithmDynamicLocal+0x19>
f010ddbe:	b8 00 00 00 00       	mov    $0x0,%eax
f010ddc3:	5d                   	pop    %ebp
f010ddc4:	c3                   	ret    

f010ddc5 <isPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ uint32 isPageReplacmentAlgorithmNchanceCLOCK(){if(_PageRepAlgoType == PG_REP_NchanceCLOCK) return 1; return 0;}
f010ddc5:	55                   	push   %ebp
f010ddc6:	89 e5                	mov    %esp,%ebp
f010ddc8:	a1 88 5d 87 f0       	mov    0xf0875d88,%eax
f010ddcd:	83 f8 06             	cmp    $0x6,%eax
f010ddd0:	75 07                	jne    f010ddd9 <isPageReplacmentAlgorithmNchanceCLOCK+0x14>
f010ddd2:	b8 01 00 00 00       	mov    $0x1,%eax
f010ddd7:	eb 05                	jmp    f010ddde <isPageReplacmentAlgorithmNchanceCLOCK+0x19>
f010ddd9:	b8 00 00 00 00       	mov    $0x0,%eax
f010ddde:	5d                   	pop    %ebp
f010dddf:	c3                   	ret    

f010dde0 <enableModifiedBuffer>:

//===============================
// PAGE BUFFERING
//===============================
void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f010dde0:	55                   	push   %ebp
f010dde1:	89 e5                	mov    %esp,%ebp
f010dde3:	8b 45 08             	mov    0x8(%ebp),%eax
f010dde6:	a3 50 5d 87 f0       	mov    %eax,0xf0875d50
f010ddeb:	90                   	nop
f010ddec:	5d                   	pop    %ebp
f010dded:	c3                   	ret    

f010ddee <isModifiedBufferEnabled>:
uint8 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f010ddee:	55                   	push   %ebp
f010ddef:	89 e5                	mov    %esp,%ebp
f010ddf1:	a1 50 5d 87 f0       	mov    0xf0875d50,%eax
f010ddf6:	5d                   	pop    %ebp
f010ddf7:	c3                   	ret    

f010ddf8 <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f010ddf8:	55                   	push   %ebp
f010ddf9:	89 e5                	mov    %esp,%ebp
f010ddfb:	8b 45 08             	mov    0x8(%ebp),%eax
f010ddfe:	a3 90 5d 87 f0       	mov    %eax,0xf0875d90
f010de03:	90                   	nop
f010de04:	5d                   	pop    %ebp
f010de05:	c3                   	ret    

f010de06 <isBufferingEnabled>:
uint8 isBufferingEnabled(){  return _EnableBuffering ; }
f010de06:	55                   	push   %ebp
f010de07:	89 e5                	mov    %esp,%ebp
f010de09:	a1 90 5d 87 f0       	mov    0xf0875d90,%eax
f010de0e:	5d                   	pop    %ebp
f010de0f:	c3                   	ret    

f010de10 <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f010de10:	55                   	push   %ebp
f010de11:	89 e5                	mov    %esp,%ebp
f010de13:	8b 45 08             	mov    0x8(%ebp),%eax
f010de16:	a3 b0 5d 87 f0       	mov    %eax,0xf0875db0
f010de1b:	90                   	nop
f010de1c:	5d                   	pop    %ebp
f010de1d:	c3                   	ret    

f010de1e <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f010de1e:	55                   	push   %ebp
f010de1f:	89 e5                	mov    %esp,%ebp
f010de21:	a1 b0 5d 87 f0       	mov    0xf0875db0,%eax
f010de26:	5d                   	pop    %ebp
f010de27:	c3                   	ret    

f010de28 <table_fault_handler>:
// FAULT HANDLERS
//===============================

//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010de28:	55                   	push   %ebp
f010de29:	89 e5                	mov    %esp,%ebp
f010de2b:	83 ec 18             	sub    $0x18,%esp
	//panic("table_fault_handler() is not implemented yet...!!");
	//Check if it's a stack page
	uint32* ptr_table;
#if USE_KHEAP
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
f010de2e:	8b 45 08             	mov    0x8(%ebp),%eax
f010de31:	8b 40 5c             	mov    0x5c(%eax),%eax
f010de34:	83 ec 08             	sub    $0x8,%esp
f010de37:	ff 75 0c             	pushl  0xc(%ebp)
f010de3a:	50                   	push   %eax
f010de3b:	e8 c7 8d ff ff       	call   f0106c07 <create_page_table>
f010de40:	83 c4 10             	add    $0x10,%esp
f010de43:	89 45 f4             	mov    %eax,-0xc(%ebp)
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
	}
#endif
}
f010de46:	90                   	nop
f010de47:	c9                   	leave  
f010de48:	c3                   	ret    

f010de49 <page_fault_handler>:

//Handle the page fault

void page_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010de49:	55                   	push   %ebp
f010de4a:	89 e5                	mov    %esp,%ebp
f010de4c:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [FAULT HANDLER] page_fault_handler
	// Write your code here, remove the panic and write your code
	panic("page_fault_handler() is not implemented yet...!!");
f010de4f:	83 ec 04             	sub    $0x4,%esp
f010de52:	68 28 78 13 f0       	push   $0xf0137828
f010de57:	6a 50                	push   $0x50
f010de59:	68 0b 78 13 f0       	push   $0xf013780b
f010de5e:	e8 a2 23 ff ff       	call   f0100205 <_panic>

f010de63 <__page_fault_handler_with_buffering>:

	//refer to the project presentation and documentation for details
}
void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f010de63:	55                   	push   %ebp
f010de64:	89 e5                	mov    %esp,%ebp
f010de66:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("__page_fault_handler_with_buffering() is not implemented yet...!!");
f010de69:	83 ec 04             	sub    $0x4,%esp
f010de6c:	68 5c 78 13 f0       	push   $0xf013785c
f010de71:	6a 57                	push   $0x57
f010de73:	68 0b 78 13 f0       	push   $0xf013780b
f010de78:	e8 88 23 ff ff       	call   f0100205 <_panic>

f010de7d <create_semaphores_array>:
// [1] Create "semaphores" array:
//===============================
//Dynamically allocate the "semaphores" array
//initialize the "semaphores" array by 0's and empty = 1
void create_semaphores_array(uint32 numOfSemaphores)
{
f010de7d:	55                   	push   %ebp
f010de7e:	89 e5                	mov    %esp,%ebp
f010de80:	83 ec 18             	sub    $0x18,%esp
#if USE_KHEAP
	MAX_SEMAPHORES = numOfSemaphores ;
f010de83:	8b 45 08             	mov    0x8(%ebp),%eax
f010de86:	a3 b4 5c 87 f0       	mov    %eax,0xf0875cb4
	semaphores = (struct Semaphore*) kmalloc(numOfSemaphores*sizeof(struct Semaphore));
f010de8b:	8b 55 08             	mov    0x8(%ebp),%edx
f010de8e:	89 d0                	mov    %edx,%eax
f010de90:	c1 e0 02             	shl    $0x2,%eax
f010de93:	01 d0                	add    %edx,%eax
f010de95:	01 c0                	add    %eax,%eax
f010de97:	01 d0                	add    %edx,%eax
f010de99:	01 c0                	add    %eax,%eax
f010de9b:	01 d0                	add    %edx,%eax
f010de9d:	c1 e0 02             	shl    $0x2,%eax
f010dea0:	83 ec 0c             	sub    $0xc,%esp
f010dea3:	50                   	push   %eax
f010dea4:	e8 dc 99 ff ff       	call   f0107885 <kmalloc>
f010dea9:	83 c4 10             	add    $0x10,%esp
f010deac:	a3 0c 5d 87 f0       	mov    %eax,0xf0875d0c
	if (semaphores == NULL)
f010deb1:	a1 0c 5d 87 f0       	mov    0xf0875d0c,%eax
f010deb6:	85 c0                	test   %eax,%eax
f010deb8:	75 14                	jne    f010dece <create_semaphores_array+0x51>
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
f010deba:	83 ec 04             	sub    $0x4,%esp
f010debd:	68 a0 78 13 f0       	push   $0xf01378a0
f010dec2:	6a 1e                	push   $0x1e
f010dec4:	68 e0 78 13 f0       	push   $0xf01378e0
f010dec9:	e8 37 23 ff ff       	call   f0100205 <_panic>
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010dece:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010ded5:	e9 bd 00 00 00       	jmp    f010df97 <create_semaphores_array+0x11a>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
f010deda:	8b 0d 0c 5d 87 f0    	mov    0xf0875d0c,%ecx
f010dee0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dee3:	89 d0                	mov    %edx,%eax
f010dee5:	c1 e0 02             	shl    $0x2,%eax
f010dee8:	01 d0                	add    %edx,%eax
f010deea:	01 c0                	add    %eax,%eax
f010deec:	01 d0                	add    %edx,%eax
f010deee:	01 c0                	add    %eax,%eax
f010def0:	01 d0                	add    %edx,%eax
f010def2:	c1 e0 02             	shl    $0x2,%eax
f010def5:	01 c8                	add    %ecx,%eax
f010def7:	83 ec 04             	sub    $0x4,%esp
f010defa:	6a 5c                	push   $0x5c
f010defc:	6a 00                	push   $0x0
f010defe:	50                   	push   %eax
f010deff:	e8 b6 31 02 00       	call   f01310ba <memset>
f010df04:	83 c4 10             	add    $0x10,%esp
		semaphores[i].empty = 1;
f010df07:	8b 0d 0c 5d 87 f0    	mov    0xf0875d0c,%ecx
f010df0d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010df10:	89 d0                	mov    %edx,%eax
f010df12:	c1 e0 02             	shl    $0x2,%eax
f010df15:	01 d0                	add    %edx,%eax
f010df17:	01 c0                	add    %eax,%eax
f010df19:	01 d0                	add    %edx,%eax
f010df1b:	01 c0                	add    %eax,%eax
f010df1d:	01 d0                	add    %edx,%eax
f010df1f:	c1 e0 02             	shl    $0x2,%eax
f010df22:	01 c8                	add    %ecx,%eax
f010df24:	c6 40 58 01          	movb   $0x1,0x58(%eax)
		LIST_INIT(&(semaphores[i].env_queue));
f010df28:	8b 0d 0c 5d 87 f0    	mov    0xf0875d0c,%ecx
f010df2e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010df31:	89 d0                	mov    %edx,%eax
f010df33:	c1 e0 02             	shl    $0x2,%eax
f010df36:	01 d0                	add    %edx,%eax
f010df38:	01 c0                	add    %eax,%eax
f010df3a:	01 d0                	add    %edx,%eax
f010df3c:	01 c0                	add    %eax,%eax
f010df3e:	01 d0                	add    %edx,%eax
f010df40:	c1 e0 02             	shl    $0x2,%eax
f010df43:	01 c8                	add    %ecx,%eax
f010df45:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010df4c:	8b 0d 0c 5d 87 f0    	mov    0xf0875d0c,%ecx
f010df52:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010df55:	89 d0                	mov    %edx,%eax
f010df57:	c1 e0 02             	shl    $0x2,%eax
f010df5a:	01 d0                	add    %edx,%eax
f010df5c:	01 c0                	add    %eax,%eax
f010df5e:	01 d0                	add    %edx,%eax
f010df60:	01 c0                	add    %eax,%eax
f010df62:	01 d0                	add    %edx,%eax
f010df64:	c1 e0 02             	shl    $0x2,%eax
f010df67:	01 c8                	add    %ecx,%eax
f010df69:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010df70:	8b 0d 0c 5d 87 f0    	mov    0xf0875d0c,%ecx
f010df76:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010df79:	89 d0                	mov    %edx,%eax
f010df7b:	c1 e0 02             	shl    $0x2,%eax
f010df7e:	01 d0                	add    %edx,%eax
f010df80:	01 c0                	add    %eax,%eax
f010df82:	01 d0                	add    %edx,%eax
f010df84:	01 c0                	add    %eax,%eax
f010df86:	01 d0                	add    %edx,%eax
f010df88:	c1 e0 02             	shl    $0x2,%eax
f010df8b:	01 c8                	add    %ecx,%eax
f010df8d:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010df94:	ff 45 f4             	incl   -0xc(%ebp)
f010df97:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010df9a:	a1 b4 5c 87 f0       	mov    0xf0875cb4,%eax
f010df9f:	39 c2                	cmp    %eax,%edx
f010dfa1:	0f 82 33 ff ff ff    	jb     f010deda <create_semaphores_array+0x5d>
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
		semaphores[i].empty = 1;
		LIST_INIT(&(semaphores[i].env_queue));
	}

}
f010dfa7:	90                   	nop
f010dfa8:	c9                   	leave  
f010dfa9:	c3                   	ret    

f010dfaa <allocate_semaphore_object>:
//	a) if succeed:
//		1. allocatedSemaphore (pointer to struct Semaphore) passed by reference
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
f010dfaa:	55                   	push   %ebp
f010dfab:	89 e5                	mov    %esp,%ebp
f010dfad:	83 ec 18             	sub    $0x18,%esp
	int32 semaphoreObjectID = -1 ;
f010dfb0:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010dfb7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010dfbe:	eb 2f                	jmp    f010dfef <allocate_semaphore_object+0x45>
	{
		if (semaphores[i].empty)
f010dfc0:	8b 0d 0c 5d 87 f0    	mov    0xf0875d0c,%ecx
f010dfc6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010dfc9:	89 d0                	mov    %edx,%eax
f010dfcb:	c1 e0 02             	shl    $0x2,%eax
f010dfce:	01 d0                	add    %edx,%eax
f010dfd0:	01 c0                	add    %eax,%eax
f010dfd2:	01 d0                	add    %edx,%eax
f010dfd4:	01 c0                	add    %eax,%eax
f010dfd6:	01 d0                	add    %edx,%eax
f010dfd8:	c1 e0 02             	shl    $0x2,%eax
f010dfdb:	01 c8                	add    %ecx,%eax
f010dfdd:	8a 40 58             	mov    0x58(%eax),%al
f010dfe0:	84 c0                	test   %al,%al
f010dfe2:	74 08                	je     f010dfec <allocate_semaphore_object+0x42>
		{
			semaphoreObjectID = i;
f010dfe4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dfe7:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f010dfea:	eb 0f                	jmp    f010dffb <allocate_semaphore_object+0x51>
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
	int32 semaphoreObjectID = -1 ;
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010dfec:	ff 45 f0             	incl   -0x10(%ebp)
f010dfef:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010dff2:	a1 b4 5c 87 f0       	mov    0xf0875cb4,%eax
f010dff7:	39 c2                	cmp    %eax,%edx
f010dff9:	72 c5                	jb     f010dfc0 <allocate_semaphore_object+0x16>
			semaphoreObjectID = i;
			break;
		}
	}

	if (semaphoreObjectID == -1)
f010dffb:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010dfff:	75 4d                	jne    f010e04e <allocate_semaphore_object+0xa4>
	{
		//try to double the size of the "semaphores" array
		#if USE_KHEAP
		{
			semaphores = (struct Semaphore*) krealloc(semaphores, 2*MAX_SEMAPHORES);
f010e001:	a1 b4 5c 87 f0       	mov    0xf0875cb4,%eax
f010e006:	01 c0                	add    %eax,%eax
f010e008:	89 c2                	mov    %eax,%edx
f010e00a:	a1 0c 5d 87 f0       	mov    0xf0875d0c,%eax
f010e00f:	83 ec 08             	sub    $0x8,%esp
f010e012:	52                   	push   %edx
f010e013:	50                   	push   %eax
f010e014:	e8 2c 9b ff ff       	call   f0107b45 <krealloc>
f010e019:	83 c4 10             	add    $0x10,%esp
f010e01c:	a3 0c 5d 87 f0       	mov    %eax,0xf0875d0c
			if (semaphores == NULL)
f010e021:	a1 0c 5d 87 f0       	mov    0xf0875d0c,%eax
f010e026:	85 c0                	test   %eax,%eax
f010e028:	75 10                	jne    f010e03a <allocate_semaphore_object+0x90>
			{
				*allocatedObject = NULL;
f010e02a:	8b 45 08             	mov    0x8(%ebp),%eax
f010e02d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				return E_NO_SEMAPHORE;
f010e033:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
f010e038:	eb 5b                	jmp    f010e095 <allocate_semaphore_object+0xeb>
			}
			else
			{
				semaphoreObjectID = MAX_SEMAPHORES;
f010e03a:	a1 b4 5c 87 f0       	mov    0xf0875cb4,%eax
f010e03f:	89 45 f4             	mov    %eax,-0xc(%ebp)
				MAX_SEMAPHORES *= 2;
f010e042:	a1 b4 5c 87 f0       	mov    0xf0875cb4,%eax
f010e047:	01 c0                	add    %eax,%eax
f010e049:	a3 b4 5c 87 f0       	mov    %eax,0xf0875cb4
			return E_NO_SEMAPHORE;
		}
		#endif
	}

	*allocatedObject = &(semaphores[semaphoreObjectID]);
f010e04e:	8b 0d 0c 5d 87 f0    	mov    0xf0875d0c,%ecx
f010e054:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e057:	89 d0                	mov    %edx,%eax
f010e059:	c1 e0 02             	shl    $0x2,%eax
f010e05c:	01 d0                	add    %edx,%eax
f010e05e:	01 c0                	add    %eax,%eax
f010e060:	01 d0                	add    %edx,%eax
f010e062:	01 c0                	add    %eax,%eax
f010e064:	01 d0                	add    %edx,%eax
f010e066:	c1 e0 02             	shl    $0x2,%eax
f010e069:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010e06c:	8b 45 08             	mov    0x8(%ebp),%eax
f010e06f:	89 10                	mov    %edx,(%eax)
	semaphores[semaphoreObjectID].empty = 0;
f010e071:	8b 0d 0c 5d 87 f0    	mov    0xf0875d0c,%ecx
f010e077:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e07a:	89 d0                	mov    %edx,%eax
f010e07c:	c1 e0 02             	shl    $0x2,%eax
f010e07f:	01 d0                	add    %edx,%eax
f010e081:	01 c0                	add    %eax,%eax
f010e083:	01 d0                	add    %edx,%eax
f010e085:	01 c0                	add    %eax,%eax
f010e087:	01 d0                	add    %edx,%eax
f010e089:	c1 e0 02             	shl    $0x2,%eax
f010e08c:	01 c8                	add    %ecx,%eax
f010e08e:	c6 40 58 00          	movb   $0x0,0x58(%eax)

	return semaphoreObjectID;
f010e092:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010e095:	c9                   	leave  
f010e096:	c3                   	ret    

f010e097 <get_semaphore_object_ID>:
//Search for the given semaphore object in the "semaphores" array
//Return:
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
f010e097:	55                   	push   %ebp
f010e098:	89 e5                	mov    %esp,%ebp
f010e09a:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010e09d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(; i < MAX_SEMAPHORES; ++i)
f010e0a4:	e9 84 00 00 00       	jmp    f010e12d <get_semaphore_object_ID+0x96>
	{
		if (semaphores[i].empty)
f010e0a9:	8b 0d 0c 5d 87 f0    	mov    0xf0875d0c,%ecx
f010e0af:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e0b2:	89 d0                	mov    %edx,%eax
f010e0b4:	c1 e0 02             	shl    $0x2,%eax
f010e0b7:	01 d0                	add    %edx,%eax
f010e0b9:	01 c0                	add    %eax,%eax
f010e0bb:	01 d0                	add    %edx,%eax
f010e0bd:	01 c0                	add    %eax,%eax
f010e0bf:	01 d0                	add    %edx,%eax
f010e0c1:	c1 e0 02             	shl    $0x2,%eax
f010e0c4:	01 c8                	add    %ecx,%eax
f010e0c6:	8a 40 58             	mov    0x58(%eax),%al
f010e0c9:	84 c0                	test   %al,%al
f010e0cb:	75 5c                	jne    f010e129 <get_semaphore_object_ID+0x92>
			continue;

		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
f010e0cd:	8b 0d 0c 5d 87 f0    	mov    0xf0875d0c,%ecx
f010e0d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e0d6:	89 d0                	mov    %edx,%eax
f010e0d8:	c1 e0 02             	shl    $0x2,%eax
f010e0db:	01 d0                	add    %edx,%eax
f010e0dd:	01 c0                	add    %eax,%eax
f010e0df:	01 d0                	add    %edx,%eax
f010e0e1:	01 c0                	add    %eax,%eax
f010e0e3:	01 d0                	add    %edx,%eax
f010e0e5:	c1 e0 02             	shl    $0x2,%eax
f010e0e8:	01 c8                	add    %ecx,%eax
f010e0ea:	8b 00                	mov    (%eax),%eax
f010e0ec:	3b 45 08             	cmp    0x8(%ebp),%eax
f010e0ef:	75 39                	jne    f010e12a <get_semaphore_object_ID+0x93>
f010e0f1:	8b 0d 0c 5d 87 f0    	mov    0xf0875d0c,%ecx
f010e0f7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e0fa:	89 d0                	mov    %edx,%eax
f010e0fc:	c1 e0 02             	shl    $0x2,%eax
f010e0ff:	01 d0                	add    %edx,%eax
f010e101:	01 c0                	add    %eax,%eax
f010e103:	01 d0                	add    %edx,%eax
f010e105:	01 c0                	add    %eax,%eax
f010e107:	01 d0                	add    %edx,%eax
f010e109:	c1 e0 02             	shl    $0x2,%eax
f010e10c:	01 c8                	add    %ecx,%eax
f010e10e:	83 c0 04             	add    $0x4,%eax
f010e111:	83 ec 08             	sub    $0x8,%esp
f010e114:	50                   	push   %eax
f010e115:	ff 75 0c             	pushl  0xc(%ebp)
f010e118:	e8 bb 2e 02 00       	call   f0130fd8 <strcmp>
f010e11d:	83 c4 10             	add    $0x10,%esp
f010e120:	85 c0                	test   %eax,%eax
f010e122:	75 06                	jne    f010e12a <get_semaphore_object_ID+0x93>
		{
			return i;
f010e124:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e127:	eb 19                	jmp    f010e142 <get_semaphore_object_ID+0xab>
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
	{
		if (semaphores[i].empty)
			continue;
f010e129:	90                   	nop
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
f010e12a:	ff 45 f4             	incl   -0xc(%ebp)
f010e12d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e130:	a1 b4 5c 87 f0       	mov    0xf0875cb4,%eax
f010e135:	39 c2                	cmp    %eax,%edx
f010e137:	0f 82 6c ff ff ff    	jb     f010e0a9 <get_semaphore_object_ID+0x12>
		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
		{
			return i;
		}
	}
	return E_SEMAPHORE_NOT_EXISTS;
f010e13d:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
f010e142:	c9                   	leave  
f010e143:	c3                   	ret    

f010e144 <free_semaphore_object>:
//delete the semaphore with the given ID from the "semaphores" array
//Return:
//	a) 0 if succeed
//	b) E_SEMAPHORE_NOT_EXISTS if the semaphore is not exists
int free_semaphore_object(uint32 semaphoreObjectID)
{
f010e144:	55                   	push   %ebp
f010e145:	89 e5                	mov    %esp,%ebp
f010e147:	83 ec 08             	sub    $0x8,%esp
	if (semaphoreObjectID >= MAX_SEMAPHORES)
f010e14a:	a1 b4 5c 87 f0       	mov    0xf0875cb4,%eax
f010e14f:	39 45 08             	cmp    %eax,0x8(%ebp)
f010e152:	72 0a                	jb     f010e15e <free_semaphore_object+0x1a>
		return E_SEMAPHORE_NOT_EXISTS;
f010e154:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
f010e159:	e9 bf 00 00 00       	jmp    f010e21d <free_semaphore_object+0xd9>

	memset(&(semaphores[semaphoreObjectID]), 0, sizeof(struct Semaphore));
f010e15e:	8b 0d 0c 5d 87 f0    	mov    0xf0875d0c,%ecx
f010e164:	8b 55 08             	mov    0x8(%ebp),%edx
f010e167:	89 d0                	mov    %edx,%eax
f010e169:	c1 e0 02             	shl    $0x2,%eax
f010e16c:	01 d0                	add    %edx,%eax
f010e16e:	01 c0                	add    %eax,%eax
f010e170:	01 d0                	add    %edx,%eax
f010e172:	01 c0                	add    %eax,%eax
f010e174:	01 d0                	add    %edx,%eax
f010e176:	c1 e0 02             	shl    $0x2,%eax
f010e179:	01 c8                	add    %ecx,%eax
f010e17b:	83 ec 04             	sub    $0x4,%esp
f010e17e:	6a 5c                	push   $0x5c
f010e180:	6a 00                	push   $0x0
f010e182:	50                   	push   %eax
f010e183:	e8 32 2f 02 00       	call   f01310ba <memset>
f010e188:	83 c4 10             	add    $0x10,%esp
	semaphores[semaphoreObjectID].empty = 1;
f010e18b:	8b 0d 0c 5d 87 f0    	mov    0xf0875d0c,%ecx
f010e191:	8b 55 08             	mov    0x8(%ebp),%edx
f010e194:	89 d0                	mov    %edx,%eax
f010e196:	c1 e0 02             	shl    $0x2,%eax
f010e199:	01 d0                	add    %edx,%eax
f010e19b:	01 c0                	add    %eax,%eax
f010e19d:	01 d0                	add    %edx,%eax
f010e19f:	01 c0                	add    %eax,%eax
f010e1a1:	01 d0                	add    %edx,%eax
f010e1a3:	c1 e0 02             	shl    $0x2,%eax
f010e1a6:	01 c8                	add    %ecx,%eax
f010e1a8:	c6 40 58 01          	movb   $0x1,0x58(%eax)
	LIST_INIT(&(semaphores[semaphoreObjectID].env_queue));
f010e1ac:	8b 0d 0c 5d 87 f0    	mov    0xf0875d0c,%ecx
f010e1b2:	8b 55 08             	mov    0x8(%ebp),%edx
f010e1b5:	89 d0                	mov    %edx,%eax
f010e1b7:	c1 e0 02             	shl    $0x2,%eax
f010e1ba:	01 d0                	add    %edx,%eax
f010e1bc:	01 c0                	add    %eax,%eax
f010e1be:	01 d0                	add    %edx,%eax
f010e1c0:	01 c0                	add    %eax,%eax
f010e1c2:	01 d0                	add    %edx,%eax
f010e1c4:	c1 e0 02             	shl    $0x2,%eax
f010e1c7:	01 c8                	add    %ecx,%eax
f010e1c9:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010e1d0:	8b 0d 0c 5d 87 f0    	mov    0xf0875d0c,%ecx
f010e1d6:	8b 55 08             	mov    0x8(%ebp),%edx
f010e1d9:	89 d0                	mov    %edx,%eax
f010e1db:	c1 e0 02             	shl    $0x2,%eax
f010e1de:	01 d0                	add    %edx,%eax
f010e1e0:	01 c0                	add    %eax,%eax
f010e1e2:	01 d0                	add    %edx,%eax
f010e1e4:	01 c0                	add    %eax,%eax
f010e1e6:	01 d0                	add    %edx,%eax
f010e1e8:	c1 e0 02             	shl    $0x2,%eax
f010e1eb:	01 c8                	add    %ecx,%eax
f010e1ed:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010e1f4:	8b 0d 0c 5d 87 f0    	mov    0xf0875d0c,%ecx
f010e1fa:	8b 55 08             	mov    0x8(%ebp),%edx
f010e1fd:	89 d0                	mov    %edx,%eax
f010e1ff:	c1 e0 02             	shl    $0x2,%eax
f010e202:	01 d0                	add    %edx,%eax
f010e204:	01 c0                	add    %eax,%eax
f010e206:	01 d0                	add    %edx,%eax
f010e208:	01 c0                	add    %eax,%eax
f010e20a:	01 d0                	add    %edx,%eax
f010e20c:	c1 e0 02             	shl    $0x2,%eax
f010e20f:	01 c8                	add    %ecx,%eax
f010e211:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)

	return 0;
f010e218:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e21d:	c9                   	leave  
f010e21e:	c3                   	ret    

f010e21f <createSemaphore>:

//======================
// [1] Create Semaphore:
//======================
int createSemaphore(int32 ownerEnvID, char* semaphoreName, uint32 initialValue)
{
f010e21f:	55                   	push   %ebp
f010e220:	89 e5                	mov    %esp,%ebp
f010e222:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [SEMAPHORES] createSemaphore
	// your code is here, remove the panic and write your code
	panic("createSemaphore() is not implemented yet...!!");
f010e225:	83 ec 04             	sub    $0x4,%esp
f010e228:	68 00 79 13 f0       	push   $0xf0137900
f010e22d:	68 95 00 00 00       	push   $0x95
f010e232:	68 e0 78 13 f0       	push   $0xf01378e0
f010e237:	e8 c9 1f ff ff       	call   f0100205 <_panic>

f010e23c <waitSemaphore>:

//============
// [2] Wait():
//============
void waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010e23c:	55                   	push   %ebp
f010e23d:	89 e5                	mov    %esp,%ebp
f010e23f:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [SEMAPHORES] waitSemaphore
	// your code is here, remove the panic and write your code
	panic("waitSemaphore() is not implemented yet...!!");
f010e242:	83 ec 04             	sub    $0x4,%esp
f010e245:	68 30 79 13 f0       	push   $0xf0137930
f010e24a:	68 a8 00 00 00       	push   $0xa8
f010e24f:	68 e0 78 13 f0       	push   $0xf01378e0
f010e254:	e8 ac 1f ff ff       	call   f0100205 <_panic>

f010e259 <signalSemaphore>:

//==============
// [3] Signal():
//==============
void signalSemaphore(int ownerEnvID, char* semaphoreName)
{
f010e259:	55                   	push   %ebp
f010e25a:	89 e5                	mov    %esp,%ebp
f010e25c:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [SEMAPHORES] signalSemaphore
	// your code is here, remove the panic and write your code
	panic("signalSemaphore() is not implemented yet...!!");
f010e25f:	83 ec 04             	sub    $0x4,%esp
f010e262:	68 5c 79 13 f0       	push   $0xf013795c
f010e267:	68 bd 00 00 00       	push   $0xbd
f010e26c:	68 e0 78 13 f0       	push   $0xf01378e0
f010e271:	e8 8f 1f ff ff       	call   f0100205 <_panic>

f010e276 <test_initialize_MemBlocksList>:

#define Mega  (1024*1024)
#define kilo (1024)

void test_initialize_MemBlocksList()
{
f010e276:	55                   	push   %ebp
f010e277:	89 e5                	mov    %esp,%ebp
f010e279:	83 ec 18             	sub    $0x18,%esp
	uint32 numOfBlocks = 5;
f010e27c:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010e283:	83 ec 0c             	sub    $0xc,%esp
f010e286:	ff 75 ec             	pushl  -0x14(%ebp)
f010e289:	e8 a8 37 02 00       	call   f0131a36 <initialize_MemBlocksList>
f010e28e:	83 c4 10             	add    $0x10,%esp
	//Check 1: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks)
f010e291:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f010e296:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e299:	74 17                	je     f010e2b2 <test_initialize_MemBlocksList+0x3c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AvailableMemBlocksList %d\n", LIST_SIZE(&(AvailableMemBlocksList)));
f010e29b:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f010e2a0:	50                   	push   %eax
f010e2a1:	68 a0 79 13 f0       	push   $0xf01379a0
f010e2a6:	6a 1f                	push   $0x1f
f010e2a8:	68 f4 79 13 f0       	push   $0xf01379f4
f010e2ad:	e8 53 1f ff ff       	call   f0100205 <_panic>
		//assert(LIST_SIZE(&AvailableMemBlocksList) == numOfBlocks);
	}

	//Check 2: Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e2b2:	a1 d4 5c 87 f0       	mov    0xf0875cd4,%eax
f010e2b7:	85 c0                	test   %eax,%eax
f010e2b9:	74 17                	je     f010e2d2 <test_initialize_MemBlocksList+0x5c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AllocMemBlocksList %d\n", LIST_SIZE(&(AllocMemBlocksList)));
f010e2bb:	a1 d4 5c 87 f0       	mov    0xf0875cd4,%eax
f010e2c0:	50                   	push   %eax
f010e2c1:	68 18 7a 13 f0       	push   $0xf0137a18
f010e2c6:	6a 26                	push   $0x26
f010e2c8:	68 f4 79 13 f0       	push   $0xf01379f4
f010e2cd:	e8 33 1f ff ff       	call   f0100205 <_panic>
	}

	//Check 3: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 0)
f010e2d2:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f010e2d7:	85 c0                	test   %eax,%eax
f010e2d9:	74 17                	je     f010e2f2 <test_initialize_MemBlocksList+0x7c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the FreeMemBlocksList %d\n", LIST_SIZE(&(FreeMemBlocksList)));
f010e2db:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f010e2e0:	50                   	push   %eax
f010e2e1:	68 68 7a 13 f0       	push   $0xf0137a68
f010e2e6:	6a 2c                	push   $0x2c
f010e2e8:	68 f4 79 13 f0       	push   $0xf01379f4
f010e2ed:	e8 13 1f ff ff       	call   f0100205 <_panic>
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
f010e2f2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 size = 0;
f010e2f9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010e300:	a1 98 5d 87 f0       	mov    0xf0875d98,%eax
f010e305:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010e308:	eb 29                	jmp    f010e333 <test_initialize_MemBlocksList+0xbd>
	{
		size++;
f010e30a:	ff 45 f0             	incl   -0x10(%ebp)
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f010e30d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e310:	8b 50 0c             	mov    0xc(%eax),%edx
f010e313:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e316:	8b 40 08             	mov    0x8(%eax),%eax
f010e319:	83 ec 04             	sub    $0x4,%esp
f010e31c:	52                   	push   %edx
f010e31d:	50                   	push   %eax
f010e31e:	68 b8 7a 13 f0       	push   $0xf0137ab8
f010e323:	e8 e6 29 ff ff       	call   f0100d0e <cprintf>
f010e328:	83 c4 10             	add    $0x10,%esp
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
	uint32 size = 0;
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010e32b:	a1 a0 5d 87 f0       	mov    0xf0875da0,%eax
f010e330:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010e333:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e337:	74 07                	je     f010e340 <test_initialize_MemBlocksList+0xca>
f010e339:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e33c:	8b 00                	mov    (%eax),%eax
f010e33e:	eb 05                	jmp    f010e345 <test_initialize_MemBlocksList+0xcf>
f010e340:	b8 00 00 00 00       	mov    $0x0,%eax
f010e345:	a3 a0 5d 87 f0       	mov    %eax,0xf0875da0
f010e34a:	a1 a0 5d 87 f0       	mov    0xf0875da0,%eax
f010e34f:	85 c0                	test   %eax,%eax
f010e351:	75 b7                	jne    f010e30a <test_initialize_MemBlocksList+0x94>
f010e353:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e357:	75 b1                	jne    f010e30a <test_initialize_MemBlocksList+0x94>
	{
		size++;
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
	if(LIST_SIZE(&(AvailableMemBlocksList)) != size)
f010e359:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f010e35e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e361:	74 14                	je     f010e377 <test_initialize_MemBlocksList+0x101>
		panic("initialize_MemBlocksList: Some nodes are not created in the initialize_MemBlocksList\n");
f010e363:	83 ec 04             	sub    $0x4,%esp
f010e366:	68 d8 7a 13 f0       	push   $0xf0137ad8
f010e36b:	6a 38                	push   $0x38
f010e36d:	68 f4 79 13 f0       	push   $0xf01379f4
f010e372:	e8 8e 1e ff ff       	call   f0100205 <_panic>
	else
		cprintf("Congratulations!! test initialize_MemBlocksList completed successfully.\n");
f010e377:	83 ec 0c             	sub    $0xc,%esp
f010e37a:	68 30 7b 13 f0       	push   $0xf0137b30
f010e37f:	e8 8a 29 ff ff       	call   f0100d0e <cprintf>
f010e384:	83 c4 10             	add    $0x10,%esp
}
f010e387:	90                   	nop
f010e388:	c9                   	leave  
f010e389:	c3                   	ret    

f010e38a <test_insert_sorted_allocList>:

void test_insert_sorted_allocList()
{
f010e38a:	55                   	push   %ebp
f010e38b:	89 e5                	mov    %esp,%ebp
f010e38d:	57                   	push   %edi
f010e38e:	81 ec 94 00 00 00    	sub    $0x94,%esp
	uint32 numOfBlocks = 5;
f010e394:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010e39b:	83 ec 0c             	sub    $0xc,%esp
f010e39e:	ff 75 f4             	pushl  -0xc(%ebp)
f010e3a1:	e8 90 36 02 00       	call   f0131a36 <initialize_MemBlocksList>
f010e3a6:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010e3a9:	c7 05 c8 5c 87 f0 00 	movl   $0x0,0xf0875cc8
f010e3b0:	00 00 00 
f010e3b3:	c7 05 cc 5c 87 f0 00 	movl   $0x0,0xf0875ccc
f010e3ba:	00 00 00 
f010e3bd:	c7 05 d4 5c 87 f0 00 	movl   $0x0,0xf0875cd4
f010e3c4:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010e3c7:	c7 05 64 5d 87 f0 00 	movl   $0x0,0xf0875d64
f010e3ce:	00 00 00 
f010e3d1:	c7 05 68 5d 87 f0 00 	movl   $0x0,0xf0875d68
f010e3d8:	00 00 00 
f010e3db:	c7 05 70 5d 87 f0 00 	movl   $0x0,0xf0875d70
f010e3e2:	00 00 00 

	uint32 blocksToInsertSVAs[5]={0,0,0,0,0};
f010e3e5:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010e3e8:	b9 05 00 00 00       	mov    $0x5,%ecx
f010e3ed:	b8 00 00 00 00       	mov    $0x0,%eax
f010e3f2:	89 d7                	mov    %edx,%edi
f010e3f4:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[5]={0,0,0,0,0};
f010e3f6:	8d 55 c4             	lea    -0x3c(%ebp),%edx
f010e3f9:	b9 05 00 00 00       	mov    $0x5,%ecx
f010e3fe:	b8 00 00 00 00       	mov    $0x0,%eax
f010e403:	89 d7                	mov    %edx,%edi
f010e405:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f010e407:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	uint32 actualSize = 0;
f010e40e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)


	/*INSERT Scenario 1: Insert BLOCK_1 in the empty AllocMemBlocksList*/
	//BLOCK_1 sva = 8K
	blocksToInsertSVAs[1] = 0x0 + (8*kilo);
f010e415:	c7 45 dc 00 20 00 00 	movl   $0x2000,-0x24(%ebp)
	blocksToInsertSizes[1] = (4*kilo);
f010e41c:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[1];
f010e423:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e426:	89 45 b8             	mov    %eax,-0x48(%ebp)
	blockToInsert1.size = blocksToInsertSizes[1];
f010e429:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010e42c:	89 45 bc             	mov    %eax,-0x44(%ebp)

	insert_sorted_allocList(&blockToInsert1);
f010e42f:	83 ec 0c             	sub    $0xc,%esp
f010e432:	8d 45 b0             	lea    -0x50(%ebp),%eax
f010e435:	50                   	push   %eax
f010e436:	e8 30 37 02 00       	call   f0131b6b <insert_sorted_allocList>
f010e43b:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 1;
f010e43e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010e445:	a1 d4 5c 87 f0       	mov    0xf0875cd4,%eax
f010e44a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e44d:	74 14                	je     f010e463 <test_insert_sorted_allocList+0xd9>
f010e44f:	83 ec 04             	sub    $0x4,%esp
f010e452:	68 7c 7b 13 f0       	push   $0xf0137b7c
f010e457:	6a 56                	push   $0x56
f010e459:	68 f4 79 13 f0       	push   $0xf01379f4
f010e45e:	e8 a2 1d ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010e463:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f010e468:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e46b:	74 14                	je     f010e481 <test_insert_sorted_allocList+0xf7>
f010e46d:	83 ec 04             	sub    $0x4,%esp
f010e470:	68 c8 7b 13 f0       	push   $0xf0137bc8
f010e475:	6a 59                	push   $0x59
f010e477:	68 f4 79 13 f0       	push   $0xf01379f4
f010e47c:	e8 84 1d ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	int chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010e481:	83 ec 0c             	sub    $0xc,%esp
f010e484:	ff 75 f0             	pushl  -0x10(%ebp)
f010e487:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010e48a:	50                   	push   %eax
f010e48b:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e48e:	50                   	push   %eax
f010e48f:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e492:	50                   	push   %eax
f010e493:	68 c8 5c 87 f0       	push   $0xf0875cc8
f010e498:	e8 7d 26 00 00       	call   f0110b1a <check_list_data>
f010e49d:	83 c4 20             	add    $0x20,%esp
f010e4a0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010e4a3:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010e4a7:	74 14                	je     f010e4bd <test_insert_sorted_allocList+0x133>
f010e4a9:	83 ec 04             	sub    $0x4,%esp
f010e4ac:	68 18 7c 13 f0       	push   $0xf0137c18
f010e4b1:	6a 5d                	push   $0x5d
f010e4b3:	68 f4 79 13 f0       	push   $0xf01379f4
f010e4b8:	e8 48 1d ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010e4bd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e4c0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e4c3:	74 14                	je     f010e4d9 <test_insert_sorted_allocList+0x14f>
f010e4c5:	83 ec 04             	sub    $0x4,%esp
f010e4c8:	68 68 7c 13 f0       	push   $0xf0137c68
f010e4cd:	6a 5e                	push   $0x5e
f010e4cf:	68 f4 79 13 f0       	push   $0xf01379f4
f010e4d4:	e8 2c 1d ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT Scenario 2: Insert BLOCK_2 in the AllocMemBlocksList with sva greater than BLOCK_1*/
	//BLOCK_2 sva = 28K
	blocksToInsertSVAs[4] = (28*kilo);
f010e4d9:	c7 45 e8 00 70 00 00 	movl   $0x7000,-0x18(%ebp)
	blocksToInsertSizes[4] = (2*kilo);
f010e4e0:	c7 45 d4 00 08 00 00 	movl   $0x800,-0x2c(%ebp)
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[4];
f010e4e7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e4ea:	89 45 a8             	mov    %eax,-0x58(%ebp)
	blockToInsert2.size = blocksToInsertSizes[4];
f010e4ed:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e4f0:	89 45 ac             	mov    %eax,-0x54(%ebp)

	insert_sorted_allocList(&blockToInsert2);
f010e4f3:	83 ec 0c             	sub    $0xc,%esp
f010e4f6:	8d 45 a0             	lea    -0x60(%ebp),%eax
f010e4f9:	50                   	push   %eax
f010e4fa:	e8 6c 36 02 00       	call   f0131b6b <insert_sorted_allocList>
f010e4ff:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 2;
f010e502:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010e509:	a1 d4 5c 87 f0       	mov    0xf0875cd4,%eax
f010e50e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e511:	74 14                	je     f010e527 <test_insert_sorted_allocList+0x19d>
f010e513:	83 ec 04             	sub    $0x4,%esp
f010e516:	68 7c 7b 13 f0       	push   $0xf0137b7c
f010e51b:	6a 6d                	push   $0x6d
f010e51d:	68 f4 79 13 f0       	push   $0xf01379f4
f010e522:	e8 de 1c ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010e527:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f010e52c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e52f:	74 14                	je     f010e545 <test_insert_sorted_allocList+0x1bb>
f010e531:	83 ec 04             	sub    $0x4,%esp
f010e534:	68 c8 7b 13 f0       	push   $0xf0137bc8
f010e539:	6a 70                	push   $0x70
f010e53b:	68 f4 79 13 f0       	push   $0xf01379f4
f010e540:	e8 c0 1c ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010e545:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010e54c:	83 ec 0c             	sub    $0xc,%esp
f010e54f:	ff 75 f0             	pushl  -0x10(%ebp)
f010e552:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010e555:	50                   	push   %eax
f010e556:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e559:	50                   	push   %eax
f010e55a:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e55d:	50                   	push   %eax
f010e55e:	68 c8 5c 87 f0       	push   $0xf0875cc8
f010e563:	e8 b2 25 00 00       	call   f0110b1a <check_list_data>
f010e568:	83 c4 20             	add    $0x20,%esp
f010e56b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010e56e:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010e572:	74 14                	je     f010e588 <test_insert_sorted_allocList+0x1fe>
f010e574:	83 ec 04             	sub    $0x4,%esp
f010e577:	68 18 7c 13 f0       	push   $0xf0137c18
f010e57c:	6a 75                	push   $0x75
f010e57e:	68 f4 79 13 f0       	push   $0xf01379f4
f010e583:	e8 7d 1c ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010e588:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e58b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e58e:	74 14                	je     f010e5a4 <test_insert_sorted_allocList+0x21a>
f010e590:	83 ec 04             	sub    $0x4,%esp
f010e593:	68 68 7c 13 f0       	push   $0xf0137c68
f010e598:	6a 76                	push   $0x76
f010e59a:	68 f4 79 13 f0       	push   $0xf01379f4
f010e59f:	e8 61 1c ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT Scenario 3: Insert BLOCK_3 in the AllocMemBlocksList with sva smaller than BLOCK_2*/
	//BLOCK_3 sva = 16K
	blocksToInsertSVAs[2] = (16*kilo);
f010e5a4:	c7 45 e0 00 40 00 00 	movl   $0x4000,-0x20(%ebp)
	blocksToInsertSizes[2] = (8*kilo);
f010e5ab:	c7 45 cc 00 20 00 00 	movl   $0x2000,-0x34(%ebp)
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[2];
f010e5b2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e5b5:	89 45 98             	mov    %eax,-0x68(%ebp)
	blockToInsert3.size = blocksToInsertSizes[2];
f010e5b8:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e5bb:	89 45 9c             	mov    %eax,-0x64(%ebp)

	insert_sorted_allocList(&blockToInsert3);
f010e5be:	83 ec 0c             	sub    $0xc,%esp
f010e5c1:	8d 45 90             	lea    -0x70(%ebp),%eax
f010e5c4:	50                   	push   %eax
f010e5c5:	e8 a1 35 02 00       	call   f0131b6b <insert_sorted_allocList>
f010e5ca:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 3;
f010e5cd:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010e5d4:	a1 d4 5c 87 f0       	mov    0xf0875cd4,%eax
f010e5d9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e5dc:	74 17                	je     f010e5f5 <test_insert_sorted_allocList+0x26b>
f010e5de:	83 ec 04             	sub    $0x4,%esp
f010e5e1:	68 7c 7b 13 f0       	push   $0xf0137b7c
f010e5e6:	68 85 00 00 00       	push   $0x85
f010e5eb:	68 f4 79 13 f0       	push   $0xf01379f4
f010e5f0:	e8 10 1c ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList\n");
f010e5f5:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f010e5fa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e5fd:	74 17                	je     f010e616 <test_insert_sorted_allocList+0x28c>
f010e5ff:	83 ec 04             	sub    $0x4,%esp
f010e602:	68 b4 7c 13 f0       	push   $0xf0137cb4
f010e607:	68 88 00 00 00       	push   $0x88
f010e60c:	68 f4 79 13 f0       	push   $0xf01379f4
f010e611:	e8 ef 1b ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010e616:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010e61d:	83 ec 0c             	sub    $0xc,%esp
f010e620:	ff 75 f0             	pushl  -0x10(%ebp)
f010e623:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010e626:	50                   	push   %eax
f010e627:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e62a:	50                   	push   %eax
f010e62b:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e62e:	50                   	push   %eax
f010e62f:	68 c8 5c 87 f0       	push   $0xf0875cc8
f010e634:	e8 e1 24 00 00       	call   f0110b1a <check_list_data>
f010e639:	83 c4 20             	add    $0x20,%esp
f010e63c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010e63f:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010e643:	74 17                	je     f010e65c <test_insert_sorted_allocList+0x2d2>
f010e645:	83 ec 04             	sub    $0x4,%esp
f010e648:	68 18 7c 13 f0       	push   $0xf0137c18
f010e64d:	68 8d 00 00 00       	push   $0x8d
f010e652:	68 f4 79 13 f0       	push   $0xf01379f4
f010e657:	e8 a9 1b ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010e65c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e65f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e662:	74 17                	je     f010e67b <test_insert_sorted_allocList+0x2f1>
f010e664:	83 ec 04             	sub    $0x4,%esp
f010e667:	68 68 7c 13 f0       	push   $0xf0137c68
f010e66c:	68 8e 00 00 00       	push   $0x8e
f010e671:	68 f4 79 13 f0       	push   $0xf01379f4
f010e676:	e8 8a 1b ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//INSERT Scenario 4: Insert BLOCK_4 in the AllocMemBlocksList with sva smaller than ALL (SHALL BE INSERTED AS HEAD)
	//BLOCK_4 sva = 0x0
	blocksToInsertSVAs[0] = (0x0);
f010e67b:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	blocksToInsertSizes[0] = (8*kilo);
f010e682:	c7 45 c4 00 20 00 00 	movl   $0x2000,-0x3c(%ebp)
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[0];
f010e689:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e68c:	89 45 88             	mov    %eax,-0x78(%ebp)
	blockToInsert4.size = blocksToInsertSizes[0];
f010e68f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e692:	89 45 8c             	mov    %eax,-0x74(%ebp)
	insert_sorted_allocList(&blockToInsert4);
f010e695:	83 ec 0c             	sub    $0xc,%esp
f010e698:	8d 45 80             	lea    -0x80(%ebp),%eax
f010e69b:	50                   	push   %eax
f010e69c:	e8 ca 34 02 00       	call   f0131b6b <insert_sorted_allocList>
f010e6a1:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 4;
f010e6a4:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010e6ab:	a1 d4 5c 87 f0       	mov    0xf0875cd4,%eax
f010e6b0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e6b3:	74 17                	je     f010e6cc <test_insert_sorted_allocList+0x342>
f010e6b5:	83 ec 04             	sub    $0x4,%esp
f010e6b8:	68 7c 7b 13 f0       	push   $0xf0137b7c
f010e6bd:	68 9c 00 00 00       	push   $0x9c
f010e6c2:	68 f4 79 13 f0       	push   $0xf01379f4
f010e6c7:	e8 39 1b ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010e6cc:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f010e6d1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e6d4:	74 17                	je     f010e6ed <test_insert_sorted_allocList+0x363>
f010e6d6:	83 ec 04             	sub    $0x4,%esp
f010e6d9:	68 c8 7b 13 f0       	push   $0xf0137bc8
f010e6de:	68 9f 00 00 00       	push   $0x9f
f010e6e3:	68 f4 79 13 f0       	push   $0xf01379f4
f010e6e8:	e8 18 1b ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010e6ed:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010e6f4:	83 ec 0c             	sub    $0xc,%esp
f010e6f7:	ff 75 f0             	pushl  -0x10(%ebp)
f010e6fa:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010e6fd:	50                   	push   %eax
f010e6fe:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e701:	50                   	push   %eax
f010e702:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e705:	50                   	push   %eax
f010e706:	68 c8 5c 87 f0       	push   $0xf0875cc8
f010e70b:	e8 0a 24 00 00       	call   f0110b1a <check_list_data>
f010e710:	83 c4 20             	add    $0x20,%esp
f010e713:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010e716:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010e71a:	74 17                	je     f010e733 <test_insert_sorted_allocList+0x3a9>
f010e71c:	83 ec 04             	sub    $0x4,%esp
f010e71f:	68 18 7c 13 f0       	push   $0xf0137c18
f010e724:	68 a4 00 00 00       	push   $0xa4
f010e729:	68 f4 79 13 f0       	push   $0xf01379f4
f010e72e:	e8 d2 1a ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010e733:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e736:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e739:	74 17                	je     f010e752 <test_insert_sorted_allocList+0x3c8>
f010e73b:	83 ec 04             	sub    $0x4,%esp
f010e73e:	68 68 7c 13 f0       	push   $0xf0137c68
f010e743:	68 a5 00 00 00       	push   $0xa5
f010e748:	68 f4 79 13 f0       	push   $0xf01379f4
f010e74d:	e8 b3 1a ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//INSERT Scenario 5: Insert BLOCK_5 in the AllocMemBlocksList with sva not greater than the first block only
	//BLOCK_5 sva = 24K
	blocksToInsertSVAs[3] = 24*kilo;
f010e752:	c7 45 e4 00 60 00 00 	movl   $0x6000,-0x1c(%ebp)
	blocksToInsertSizes[3] = (4*kilo);
f010e759:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[3];
f010e760:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e763:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
	blockToInsert5.size = blocksToInsertSizes[3];
f010e769:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e76c:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	insert_sorted_allocList(&blockToInsert5);
f010e772:	83 ec 0c             	sub    $0xc,%esp
f010e775:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f010e77b:	50                   	push   %eax
f010e77c:	e8 ea 33 02 00       	call   f0131b6b <insert_sorted_allocList>
f010e781:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 5;
f010e784:	c7 45 f0 05 00 00 00 	movl   $0x5,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010e78b:	a1 d4 5c 87 f0       	mov    0xf0875cd4,%eax
f010e790:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e793:	74 17                	je     f010e7ac <test_insert_sorted_allocList+0x422>
f010e795:	83 ec 04             	sub    $0x4,%esp
f010e798:	68 7c 7b 13 f0       	push   $0xf0137b7c
f010e79d:	68 b3 00 00 00       	push   $0xb3
f010e7a2:	68 f4 79 13 f0       	push   $0xf01379f4
f010e7a7:	e8 59 1a ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010e7ac:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f010e7b1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e7b4:	74 17                	je     f010e7cd <test_insert_sorted_allocList+0x443>
f010e7b6:	83 ec 04             	sub    $0x4,%esp
f010e7b9:	68 c8 7b 13 f0       	push   $0xf0137bc8
f010e7be:	68 b6 00 00 00       	push   $0xb6
f010e7c3:	68 f4 79 13 f0       	push   $0xf01379f4
f010e7c8:	e8 38 1a ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010e7cd:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010e7d4:	83 ec 0c             	sub    $0xc,%esp
f010e7d7:	ff 75 f0             	pushl  -0x10(%ebp)
f010e7da:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010e7dd:	50                   	push   %eax
f010e7de:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e7e1:	50                   	push   %eax
f010e7e2:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e7e5:	50                   	push   %eax
f010e7e6:	68 c8 5c 87 f0       	push   $0xf0875cc8
f010e7eb:	e8 2a 23 00 00       	call   f0110b1a <check_list_data>
f010e7f0:	83 c4 20             	add    $0x20,%esp
f010e7f3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010e7f6:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010e7fa:	74 17                	je     f010e813 <test_insert_sorted_allocList+0x489>
f010e7fc:	83 ec 04             	sub    $0x4,%esp
f010e7ff:	68 18 7c 13 f0       	push   $0xf0137c18
f010e804:	68 bb 00 00 00       	push   $0xbb
f010e809:	68 f4 79 13 f0       	push   $0xf01379f4
f010e80e:	e8 f2 19 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010e813:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e816:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e819:	74 17                	je     f010e832 <test_insert_sorted_allocList+0x4a8>
f010e81b:	83 ec 04             	sub    $0x4,%esp
f010e81e:	68 68 7c 13 f0       	push   $0xf0137c68
f010e823:	68 bc 00 00 00       	push   $0xbc
f010e828:	68 f4 79 13 f0       	push   $0xf01379f4
f010e82d:	e8 d3 19 ff ff       	call   f0100205 <_panic>
	//====================================================================//
	//====================================================================//
	//show_list_content(&AllocMemBlocksList);

	cprintf("Congratulations!! test insert_sorted completed successfully.\n");
f010e832:	83 ec 0c             	sub    $0xc,%esp
f010e835:	68 04 7d 13 f0       	push   $0xf0137d04
f010e83a:	e8 cf 24 ff ff       	call   f0100d0e <cprintf>
f010e83f:	83 c4 10             	add    $0x10,%esp
}
f010e842:	90                   	nop
f010e843:	8b 7d fc             	mov    -0x4(%ebp),%edi
f010e846:	c9                   	leave  
f010e847:	c3                   	ret    

f010e848 <test_find_block>:

void test_find_block()
{
f010e848:	55                   	push   %ebp
f010e849:	89 e5                	mov    %esp,%ebp
f010e84b:	57                   	push   %edi
f010e84c:	56                   	push   %esi
f010e84d:	53                   	push   %ebx
f010e84e:	81 ec ac 00 00 00    	sub    $0xac,%esp
	uint32 numOfBlocks = 6;
f010e854:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010e85b:	83 ec 0c             	sub    $0xc,%esp
f010e85e:	ff 75 e0             	pushl  -0x20(%ebp)
f010e861:	e8 d0 31 02 00       	call   f0131a36 <initialize_MemBlocksList>
f010e866:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&FreeMemBlocksList);
f010e869:	c7 05 64 5d 87 f0 00 	movl   $0x0,0xf0875d64
f010e870:	00 00 00 
f010e873:	c7 05 68 5d 87 f0 00 	movl   $0x0,0xf0875d68
f010e87a:	00 00 00 
f010e87d:	c7 05 70 5d 87 f0 00 	movl   $0x0,0xf0875d70
f010e884:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfAllocBlocks  6
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
f010e887:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e88a:	bb 7c 7e 13 f0       	mov    $0xf0137e7c,%ebx
f010e88f:	ba 06 00 00 00       	mov    $0x6,%edx
f010e894:	89 c7                	mov    %eax,%edi
f010e896:	89 de                	mov    %ebx,%esi
f010e898:	89 d1                	mov    %edx,%ecx
f010e89a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;
f010e89c:	8d 45 ac             	lea    -0x54(%ebp),%eax
f010e89f:	bb 94 7e 13 f0       	mov    $0xf0137e94,%ebx
f010e8a4:	ba 06 00 00 00       	mov    $0x6,%edx
f010e8a9:	89 c7                	mov    %eax,%edi
f010e8ab:	89 de                	mov    %ebx,%esi
f010e8ad:	89 d1                	mov    %edx,%ecx
f010e8af:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&AllocMemBlocksList);
f010e8b1:	c7 05 c8 5c 87 f0 00 	movl   $0x0,0xf0875cc8
f010e8b8:	00 00 00 
f010e8bb:	c7 05 cc 5c 87 f0 00 	movl   $0x0,0xf0875ccc
f010e8c2:	00 00 00 
f010e8c5:	c7 05 d4 5c 87 f0 00 	movl   $0x0,0xf0875cd4
f010e8cc:	00 00 00 
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010e8cf:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010e8d6:	e9 5f 01 00 00       	jmp    f010ea3a <test_find_block+0x1f2>
	{
		blockToInsert[i].sva = BlocksSVAs[i];
f010e8db:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e8de:	8b 44 85 c4          	mov    -0x3c(%ebp,%eax,4),%eax
f010e8e2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e8e5:	c1 e2 04             	shl    $0x4,%edx
f010e8e8:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e8eb:	01 da                	add    %ebx,%edx
f010e8ed:	81 ea 94 00 00 00    	sub    $0x94,%edx
f010e8f3:	89 02                	mov    %eax,(%edx)
		blockToInsert[i].size = BlocksSizes[i];
f010e8f5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e8f8:	8b 44 85 ac          	mov    -0x54(%ebp,%eax,4),%eax
f010e8fc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e8ff:	c1 e2 04             	shl    $0x4,%edx
f010e902:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e905:	01 f2                	add    %esi,%edx
f010e907:	81 ea 90 00 00 00    	sub    $0x90,%edx
f010e90d:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010e90f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010e913:	0f 85 92 00 00 00    	jne    f010e9ab <test_find_block+0x163>
			LIST_INSERT_HEAD(&AllocMemBlocksList, &(blockToInsert[i]));
f010e919:	a1 c8 5c 87 f0       	mov    0xf0875cc8,%eax
f010e91e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e921:	c1 e2 04             	shl    $0x4,%edx
f010e924:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010e927:	01 fa                	add    %edi,%edx
f010e929:	81 ea 9c 00 00 00    	sub    $0x9c,%edx
f010e92f:	89 02                	mov    %eax,(%edx)
f010e931:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e934:	c1 e0 04             	shl    $0x4,%eax
f010e937:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e93a:	01 d8                	add    %ebx,%eax
f010e93c:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010e941:	8b 00                	mov    (%eax),%eax
f010e943:	85 c0                	test   %eax,%eax
f010e945:	74 18                	je     f010e95f <test_find_block+0x117>
f010e947:	a1 c8 5c 87 f0       	mov    0xf0875cc8,%eax
f010e94c:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010e952:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e955:	c1 e1 04             	shl    $0x4,%ecx
f010e958:	01 ca                	add    %ecx,%edx
f010e95a:	89 50 04             	mov    %edx,0x4(%eax)
f010e95d:	eb 13                	jmp    f010e972 <test_find_block+0x12a>
f010e95f:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010e965:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e968:	c1 e2 04             	shl    $0x4,%edx
f010e96b:	01 d0                	add    %edx,%eax
f010e96d:	a3 cc 5c 87 f0       	mov    %eax,0xf0875ccc
f010e972:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010e978:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e97b:	c1 e2 04             	shl    $0x4,%edx
f010e97e:	01 d0                	add    %edx,%eax
f010e980:	a3 c8 5c 87 f0       	mov    %eax,0xf0875cc8
f010e985:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e988:	c1 e0 04             	shl    $0x4,%eax
f010e98b:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e98e:	01 f0                	add    %esi,%eax
f010e990:	2d 98 00 00 00       	sub    $0x98,%eax
f010e995:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e99b:	a1 d4 5c 87 f0       	mov    0xf0875cd4,%eax
f010e9a0:	40                   	inc    %eax
f010e9a1:	a3 d4 5c 87 f0       	mov    %eax,0xf0875cd4
f010e9a6:	e9 8c 00 00 00       	jmp    f010ea37 <test_find_block+0x1ef>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
f010e9ab:	a1 cc 5c 87 f0       	mov    0xf0875ccc,%eax
f010e9b0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e9b3:	c1 e2 04             	shl    $0x4,%edx
f010e9b6:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010e9b9:	01 fa                	add    %edi,%edx
f010e9bb:	81 ea 98 00 00 00    	sub    $0x98,%edx
f010e9c1:	89 02                	mov    %eax,(%edx)
f010e9c3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e9c6:	c1 e0 04             	shl    $0x4,%eax
f010e9c9:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e9cc:	01 d8                	add    %ebx,%eax
f010e9ce:	2d 98 00 00 00       	sub    $0x98,%eax
f010e9d3:	8b 00                	mov    (%eax),%eax
f010e9d5:	85 c0                	test   %eax,%eax
f010e9d7:	74 17                	je     f010e9f0 <test_find_block+0x1a8>
f010e9d9:	a1 cc 5c 87 f0       	mov    0xf0875ccc,%eax
f010e9de:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010e9e4:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e9e7:	c1 e1 04             	shl    $0x4,%ecx
f010e9ea:	01 ca                	add    %ecx,%edx
f010e9ec:	89 10                	mov    %edx,(%eax)
f010e9ee:	eb 13                	jmp    f010ea03 <test_find_block+0x1bb>
f010e9f0:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010e9f6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e9f9:	c1 e2 04             	shl    $0x4,%edx
f010e9fc:	01 d0                	add    %edx,%eax
f010e9fe:	a3 c8 5c 87 f0       	mov    %eax,0xf0875cc8
f010ea03:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010ea09:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ea0c:	c1 e2 04             	shl    $0x4,%edx
f010ea0f:	01 d0                	add    %edx,%eax
f010ea11:	a3 cc 5c 87 f0       	mov    %eax,0xf0875ccc
f010ea16:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ea19:	c1 e0 04             	shl    $0x4,%eax
f010ea1c:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ea1f:	01 f0                	add    %esi,%eax
f010ea21:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010ea26:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010ea2c:	a1 d4 5c 87 f0       	mov    0xf0875cd4,%eax
f010ea31:	40                   	inc    %eax
f010ea32:	a3 d4 5c 87 f0       	mov    %eax,0xf0875cd4
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;

	LIST_INIT(&AllocMemBlocksList);
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010ea37:	ff 45 e4             	incl   -0x1c(%ebp)
f010ea3a:	83 7d e4 05          	cmpl   $0x5,-0x1c(%ebp)
f010ea3e:	0f 8e 97 fe ff ff    	jle    f010e8db <test_find_block+0x93>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
	}

	/*FIND Scenario 1: Search for a block that doesn't exist (Block with SVA = 4KB)*/
	struct MemBlock * blockToFind = find_block(&AllocMemBlocksList, 0x1000);
f010ea44:	83 ec 08             	sub    $0x8,%esp
f010ea47:	68 00 10 00 00       	push   $0x1000
f010ea4c:	68 c8 5c 87 f0       	push   $0xf0875cc8
f010ea51:	e8 bd 30 02 00       	call   f0131b13 <find_block>
f010ea56:	83 c4 10             	add    $0x10,%esp
f010ea59:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind != NULL)
f010ea5c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ea60:	74 17                	je     f010ea79 <test_find_block+0x231>
		panic("find_block: WRONG SEARCH - The block you searched for doesn't exist, however find_block find it.");
f010ea62:	83 ec 04             	sub    $0x4,%esp
f010ea65:	68 44 7d 13 f0       	push   $0xf0137d44
f010ea6a:	68 de 00 00 00       	push   $0xde
f010ea6f:	68 f4 79 13 f0       	push   $0xf01379f4
f010ea74:	e8 8c 17 ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 2: Search for a block exist @ the beginning (Block with SVA = 0KB)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x0);
f010ea79:	83 ec 08             	sub    $0x8,%esp
f010ea7c:	6a 00                	push   $0x0
f010ea7e:	68 c8 5c 87 f0       	push   $0xf0875cc8
f010ea83:	e8 8b 30 02 00       	call   f0131b13 <find_block>
f010ea88:	83 c4 10             	add    $0x10,%esp
f010ea8b:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 3*kilo || blockToFind->sva != 0x0)
f010ea8e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ea92:	74 17                	je     f010eaab <test_find_block+0x263>
f010ea94:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ea97:	8b 40 0c             	mov    0xc(%eax),%eax
f010ea9a:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010ea9f:	75 0a                	jne    f010eaab <test_find_block+0x263>
f010eaa1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010eaa4:	8b 40 08             	mov    0x8(%eax),%eax
f010eaa7:	85 c0                	test   %eax,%eax
f010eaa9:	74 17                	je     f010eac2 <test_find_block+0x27a>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010eaab:	83 ec 04             	sub    $0x4,%esp
f010eaae:	68 a8 7d 13 f0       	push   $0xf0137da8
f010eab3:	68 e3 00 00 00       	push   $0xe3
f010eab8:	68 f4 79 13 f0       	push   $0xf01379f4
f010eabd:	e8 43 17 ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 3: Search for a block exist @ the mid (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x7000);
f010eac2:	83 ec 08             	sub    $0x8,%esp
f010eac5:	68 00 70 00 00       	push   $0x7000
f010eaca:	68 c8 5c 87 f0       	push   $0xf0875cc8
f010eacf:	e8 3f 30 02 00       	call   f0131b13 <find_block>
f010ead4:	83 c4 10             	add    $0x10,%esp
f010ead7:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 9*kilo || blockToFind->sva != 0x7000)
f010eada:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010eade:	74 1a                	je     f010eafa <test_find_block+0x2b2>
f010eae0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010eae3:	8b 40 0c             	mov    0xc(%eax),%eax
f010eae6:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010eaeb:	75 0d                	jne    f010eafa <test_find_block+0x2b2>
f010eaed:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010eaf0:	8b 40 08             	mov    0x8(%eax),%eax
f010eaf3:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010eaf8:	74 17                	je     f010eb11 <test_find_block+0x2c9>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010eafa:	83 ec 04             	sub    $0x4,%esp
f010eafd:	68 a8 7d 13 f0       	push   $0xf0137da8
f010eb02:	68 e8 00 00 00       	push   $0xe8
f010eb07:	68 f4 79 13 f0       	push   $0xf01379f4
f010eb0c:	e8 f4 16 ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 4: Search for a block exist @ the end (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x1A400);
f010eb11:	83 ec 08             	sub    $0x8,%esp
f010eb14:	68 00 a4 01 00       	push   $0x1a400
f010eb19:	68 c8 5c 87 f0       	push   $0xf0875cc8
f010eb1e:	e8 f0 2f 02 00       	call   f0131b13 <find_block>
f010eb23:	83 c4 10             	add    $0x10,%esp
f010eb26:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 2*Mega || blockToFind->sva != 0x1A400)
f010eb29:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010eb2d:	74 1a                	je     f010eb49 <test_find_block+0x301>
f010eb2f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010eb32:	8b 40 0c             	mov    0xc(%eax),%eax
f010eb35:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010eb3a:	75 0d                	jne    f010eb49 <test_find_block+0x301>
f010eb3c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010eb3f:	8b 40 08             	mov    0x8(%eax),%eax
f010eb42:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010eb47:	74 17                	je     f010eb60 <test_find_block+0x318>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010eb49:	83 ec 04             	sub    $0x4,%esp
f010eb4c:	68 a8 7d 13 f0       	push   $0xf0137da8
f010eb51:	68 ed 00 00 00       	push   $0xed
f010eb56:	68 f4 79 13 f0       	push   $0xf01379f4
f010eb5b:	e8 a5 16 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList & FreeMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 0 )
f010eb60:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f010eb65:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010eb68:	75 09                	jne    f010eb73 <test_find_block+0x32b>
f010eb6a:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f010eb6f:	85 c0                	test   %eax,%eax
f010eb71:	74 17                	je     f010eb8a <test_find_block+0x342>
	{
		panic("find_block: AvailableMemBlocksList and FreeMemBlocksList are affected and this shall not occurred.");
f010eb73:	83 ec 04             	sub    $0x4,%esp
f010eb76:	68 dc 7d 13 f0       	push   $0xf0137ddc
f010eb7b:	68 f2 00 00 00       	push   $0xf2
f010eb80:	68 f4 79 13 f0       	push   $0xf01379f4
f010eb85:	e8 7b 16 ff ff       	call   f0100205 <_panic>
	}

	//show_list_content(&AllocMemBlocksList);
	cprintf("Congratulations!! test find_block completed successfully.\n");
f010eb8a:	83 ec 0c             	sub    $0xc,%esp
f010eb8d:	68 40 7e 13 f0       	push   $0xf0137e40
f010eb92:	e8 77 21 ff ff       	call   f0100d0e <cprintf>
f010eb97:	83 c4 10             	add    $0x10,%esp
}
f010eb9a:	90                   	nop
f010eb9b:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010eb9e:	5b                   	pop    %ebx
f010eb9f:	5e                   	pop    %esi
f010eba0:	5f                   	pop    %edi
f010eba1:	5d                   	pop    %ebp
f010eba2:	c3                   	ret    

f010eba3 <test_alloc_block_FF>:

void test_alloc_block_FF()
{
f010eba3:	55                   	push   %ebp
f010eba4:	89 e5                	mov    %esp,%ebp
f010eba6:	57                   	push   %edi
f010eba7:	56                   	push   %esi
f010eba8:	53                   	push   %ebx
f010eba9:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010ebaf:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010ebb6:	83 ec 0c             	sub    $0xc,%esp
f010ebb9:	ff 75 e0             	pushl  -0x20(%ebp)
f010ebbc:	e8 75 2e 02 00       	call   f0131a36 <initialize_MemBlocksList>
f010ebc1:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010ebc4:	c7 05 c8 5c 87 f0 00 	movl   $0x0,0xf0875cc8
f010ebcb:	00 00 00 
f010ebce:	c7 05 cc 5c 87 f0 00 	movl   $0x0,0xf0875ccc
f010ebd5:	00 00 00 
f010ebd8:	c7 05 d4 5c 87 f0 00 	movl   $0x0,0xf0875cd4
f010ebdf:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_FF  8
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010ebe2:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010ebe5:	bb 20 81 13 f0       	mov    $0xf0138120,%ebx
f010ebea:	ba 08 00 00 00       	mov    $0x8,%edx
f010ebef:	89 c7                	mov    %eax,%edi
f010ebf1:	89 de                	mov    %ebx,%esi
f010ebf3:	89 d1                	mov    %edx,%ecx
f010ebf5:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;
f010ebf7:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010ebfa:	bb 40 81 13 f0       	mov    $0xf0138140,%ebx
f010ebff:	ba 08 00 00 00       	mov    $0x8,%edx
f010ec04:	89 c7                	mov    %eax,%edi
f010ec06:	89 de                	mov    %ebx,%esi
f010ec08:	89 d1                	mov    %edx,%ecx
f010ec0a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010ec0c:	c7 05 64 5d 87 f0 00 	movl   $0x0,0xf0875d64
f010ec13:	00 00 00 
f010ec16:	c7 05 68 5d 87 f0 00 	movl   $0x0,0xf0875d68
f010ec1d:	00 00 00 
f010ec20:	c7 05 70 5d 87 f0 00 	movl   $0x0,0xf0875d70
f010ec27:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010ec2a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010ec31:	e9 5f 01 00 00       	jmp    f010ed95 <test_alloc_block_FF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010ec36:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ec39:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010ec3d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ec40:	c1 e2 04             	shl    $0x4,%edx
f010ec43:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010ec46:	01 da                	add    %ebx,%edx
f010ec48:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010ec4e:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010ec50:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ec53:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010ec57:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ec5a:	c1 e2 04             	shl    $0x4,%edx
f010ec5d:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ec60:	01 f2                	add    %esi,%edx
f010ec62:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010ec68:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010ec6a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010ec6e:	0f 85 92 00 00 00    	jne    f010ed06 <test_alloc_block_FF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010ec74:	a1 64 5d 87 f0       	mov    0xf0875d64,%eax
f010ec79:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ec7c:	c1 e2 04             	shl    $0x4,%edx
f010ec7f:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010ec82:	01 fa                	add    %edi,%edx
f010ec84:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010ec8a:	89 02                	mov    %eax,(%edx)
f010ec8c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ec8f:	c1 e0 04             	shl    $0x4,%eax
f010ec92:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010ec95:	01 d8                	add    %ebx,%eax
f010ec97:	2d d4 00 00 00       	sub    $0xd4,%eax
f010ec9c:	8b 00                	mov    (%eax),%eax
f010ec9e:	85 c0                	test   %eax,%eax
f010eca0:	74 18                	je     f010ecba <test_alloc_block_FF+0x117>
f010eca2:	a1 64 5d 87 f0       	mov    0xf0875d64,%eax
f010eca7:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010ecad:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010ecb0:	c1 e1 04             	shl    $0x4,%ecx
f010ecb3:	01 ca                	add    %ecx,%edx
f010ecb5:	89 50 04             	mov    %edx,0x4(%eax)
f010ecb8:	eb 13                	jmp    f010eccd <test_alloc_block_FF+0x12a>
f010ecba:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010ecc0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ecc3:	c1 e2 04             	shl    $0x4,%edx
f010ecc6:	01 d0                	add    %edx,%eax
f010ecc8:	a3 68 5d 87 f0       	mov    %eax,0xf0875d68
f010eccd:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010ecd3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ecd6:	c1 e2 04             	shl    $0x4,%edx
f010ecd9:	01 d0                	add    %edx,%eax
f010ecdb:	a3 64 5d 87 f0       	mov    %eax,0xf0875d64
f010ece0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ece3:	c1 e0 04             	shl    $0x4,%eax
f010ece6:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ece9:	01 f0                	add    %esi,%eax
f010eceb:	2d d0 00 00 00       	sub    $0xd0,%eax
f010ecf0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010ecf6:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f010ecfb:	40                   	inc    %eax
f010ecfc:	a3 70 5d 87 f0       	mov    %eax,0xf0875d70
f010ed01:	e9 8c 00 00 00       	jmp    f010ed92 <test_alloc_block_FF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010ed06:	a1 68 5d 87 f0       	mov    0xf0875d68,%eax
f010ed0b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ed0e:	c1 e2 04             	shl    $0x4,%edx
f010ed11:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010ed14:	01 fa                	add    %edi,%edx
f010ed16:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010ed1c:	89 02                	mov    %eax,(%edx)
f010ed1e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ed21:	c1 e0 04             	shl    $0x4,%eax
f010ed24:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010ed27:	01 d8                	add    %ebx,%eax
f010ed29:	2d d0 00 00 00       	sub    $0xd0,%eax
f010ed2e:	8b 00                	mov    (%eax),%eax
f010ed30:	85 c0                	test   %eax,%eax
f010ed32:	74 17                	je     f010ed4b <test_alloc_block_FF+0x1a8>
f010ed34:	a1 68 5d 87 f0       	mov    0xf0875d68,%eax
f010ed39:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010ed3f:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010ed42:	c1 e1 04             	shl    $0x4,%ecx
f010ed45:	01 ca                	add    %ecx,%edx
f010ed47:	89 10                	mov    %edx,(%eax)
f010ed49:	eb 13                	jmp    f010ed5e <test_alloc_block_FF+0x1bb>
f010ed4b:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010ed51:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ed54:	c1 e2 04             	shl    $0x4,%edx
f010ed57:	01 d0                	add    %edx,%eax
f010ed59:	a3 64 5d 87 f0       	mov    %eax,0xf0875d64
f010ed5e:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010ed64:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ed67:	c1 e2 04             	shl    $0x4,%edx
f010ed6a:	01 d0                	add    %edx,%eax
f010ed6c:	a3 68 5d 87 f0       	mov    %eax,0xf0875d68
f010ed71:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ed74:	c1 e0 04             	shl    $0x4,%eax
f010ed77:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ed7a:	01 f0                	add    %esi,%eax
f010ed7c:	2d d4 00 00 00       	sub    $0xd4,%eax
f010ed81:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010ed87:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f010ed8c:	40                   	inc    %eax
f010ed8d:	a3 70 5d 87 f0       	mov    %eax,0xf0875d70
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010ed92:	ff 45 e4             	incl   -0x1c(%ebp)
f010ed95:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010ed99:	0f 8e 97 fe ff ff    	jle    f010ec36 <test_alloc_block_FF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_FF(3*Mega);
f010ed9f:	83 ec 0c             	sub    $0xc,%esp
f010eda2:	68 00 00 30 00       	push   $0x300000
f010eda7:	e8 4c 30 02 00       	call   f0131df8 <alloc_block_FF>
f010edac:	83 c4 10             	add    $0x10,%esp
f010edaf:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a block instead no existing free blocks with the given size.");
f010edb2:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010edb6:	74 17                	je     f010edcf <test_alloc_block_FF+0x22c>
f010edb8:	83 ec 04             	sub    $0x4,%esp
f010edbb:	68 ac 7e 13 f0       	push   $0xf0137eac
f010edc0:	68 15 01 00 00       	push   $0x115
f010edc5:	68 f4 79 13 f0       	push   $0xf01379f4
f010edca:	e8 36 14 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010edcf:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f010edd4:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010edd7:	75 13                	jne    f010edec <test_alloc_block_FF+0x249>
f010edd9:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f010edde:	83 f8 08             	cmp    $0x8,%eax
f010ede1:	75 09                	jne    f010edec <test_alloc_block_FF+0x249>
f010ede3:	a1 d4 5c 87 f0       	mov    0xf0875cd4,%eax
f010ede8:	85 c0                	test   %eax,%eax
f010edea:	74 17                	je     f010ee03 <test_alloc_block_FF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010edec:	83 ec 04             	sub    $0x4,%esp
f010edef:	68 20 7f 13 f0       	push   $0xf0137f20
f010edf4:	68 19 01 00 00       	push   $0x119
f010edf9:	68 f4 79 13 f0       	push   $0xf01379f4
f010edfe:	e8 02 14 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(9*kilo);
f010ee03:	83 ec 0c             	sub    $0xc,%esp
f010ee06:	68 00 24 00 00       	push   $0x2400
f010ee0b:	e8 e8 2f 02 00       	call   f0131df8 <alloc_block_FF>
f010ee10:	83 c4 10             	add    $0x10,%esp
f010ee13:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 9*kilo || blockToAlloc->sva != 0x7000)
f010ee16:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ee1a:	74 1a                	je     f010ee36 <test_alloc_block_FF+0x293>
f010ee1c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ee1f:	8b 40 0c             	mov    0xc(%eax),%eax
f010ee22:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010ee27:	75 0d                	jne    f010ee36 <test_alloc_block_FF+0x293>
f010ee29:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ee2c:	8b 40 08             	mov    0x8(%eax),%eax
f010ee2f:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010ee34:	74 17                	je     f010ee4d <test_alloc_block_FF+0x2aa>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010ee36:	83 ec 04             	sub    $0x4,%esp
f010ee39:	68 98 7f 13 f0       	push   $0xf0137f98
f010ee3e:	68 21 01 00 00       	push   $0x121
f010ee43:	68 f4 79 13 f0       	push   $0xf01379f4
f010ee48:	e8 b8 13 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ee4d:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f010ee52:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010ee55:	75 13                	jne    f010ee6a <test_alloc_block_FF+0x2c7>
f010ee57:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f010ee5c:	83 f8 07             	cmp    $0x7,%eax
f010ee5f:	75 09                	jne    f010ee6a <test_alloc_block_FF+0x2c7>
f010ee61:	a1 d4 5c 87 f0       	mov    0xf0875cd4,%eax
f010ee66:	85 c0                	test   %eax,%eax
f010ee68:	74 17                	je     f010ee81 <test_alloc_block_FF+0x2de>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010ee6a:	83 ec 04             	sub    $0x4,%esp
f010ee6d:	68 dc 7f 13 f0       	push   $0xf0137fdc
f010ee72:	68 25 01 00 00       	push   $0x125
f010ee77:	68 f4 79 13 f0       	push   $0xf01379f4
f010ee7c:	e8 84 13 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010ee81:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010ee88:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_FF-1;
f010ee8b:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010ee92:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010ee99:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010eea0:	83 ec 0c             	sub    $0xc,%esp
f010eea3:	ff 75 d8             	pushl  -0x28(%ebp)
f010eea6:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010eeac:	50                   	push   %eax
f010eead:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010eeb0:	50                   	push   %eax
f010eeb1:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010eeb4:	50                   	push   %eax
f010eeb5:	68 64 5d 87 f0       	push   $0xf0875d64
f010eeba:	e8 5b 1c 00 00       	call   f0110b1a <check_list_data>
f010eebf:	83 c4 20             	add    $0x20,%esp
f010eec2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010eec5:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010eec9:	74 17                	je     f010eee2 <test_alloc_block_FF+0x33f>
f010eecb:	83 ec 04             	sub    $0x4,%esp
f010eece:	68 40 80 13 f0       	push   $0xf0138040
f010eed3:	68 2d 01 00 00       	push   $0x12d
f010eed8:	68 f4 79 13 f0       	push   $0xf01379f4
f010eedd:	e8 23 13 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010eee2:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010eee8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010eeeb:	74 17                	je     f010ef04 <test_alloc_block_FF+0x361>
f010eeed:	83 ec 04             	sub    $0x4,%esp
f010eef0:	68 8c 80 13 f0       	push   $0xf013808c
f010eef5:	68 2e 01 00 00       	push   $0x12e
f010eefa:	68 f4 79 13 f0       	push   $0xf01379f4
f010eeff:	e8 01 13 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(1*Mega);
f010ef04:	83 ec 0c             	sub    $0xc,%esp
f010ef07:	68 00 00 10 00       	push   $0x100000
f010ef0c:	e8 e7 2e 02 00       	call   f0131df8 <alloc_block_FF>
f010ef11:	83 c4 10             	add    $0x10,%esp
f010ef14:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010ef17:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ef1b:	74 1a                	je     f010ef37 <test_alloc_block_FF+0x394>
f010ef1d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ef20:	8b 40 0c             	mov    0xc(%eax),%eax
f010ef23:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010ef28:	75 0d                	jne    f010ef37 <test_alloc_block_FF+0x394>
f010ef2a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ef2d:	8b 40 08             	mov    0x8(%eax),%eax
f010ef30:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010ef35:	74 17                	je     f010ef4e <test_alloc_block_FF+0x3ab>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010ef37:	83 ec 04             	sub    $0x4,%esp
f010ef3a:	68 98 7f 13 f0       	push   $0xf0137f98
f010ef3f:	68 36 01 00 00       	push   $0x136
f010ef44:	68 f4 79 13 f0       	push   $0xf01379f4
f010ef49:	e8 b7 12 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ef4e:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f010ef53:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010ef56:	4a                   	dec    %edx
f010ef57:	39 d0                	cmp    %edx,%eax
f010ef59:	75 13                	jne    f010ef6e <test_alloc_block_FF+0x3cb>
f010ef5b:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f010ef60:	83 f8 07             	cmp    $0x7,%eax
f010ef63:	75 09                	jne    f010ef6e <test_alloc_block_FF+0x3cb>
f010ef65:	a1 d4 5c 87 f0       	mov    0xf0875cd4,%eax
f010ef6a:	85 c0                	test   %eax,%eax
f010ef6c:	74 17                	je     f010ef85 <test_alloc_block_FF+0x3e2>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010ef6e:	83 ec 04             	sub    $0x4,%esp
f010ef71:	68 dc 7f 13 f0       	push   $0xf0137fdc
f010ef76:	68 3a 01 00 00       	push   $0x13a
f010ef7b:	68 f4 79 13 f0       	push   $0xf01379f4
f010ef80:	e8 80 12 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010ef85:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010ef8c:	00 00 00 
	actualSize = numOfFreeBlocks_FF-1;
f010ef8f:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010ef96:	c7 45 c8 00 a4 11 00 	movl   $0x11a400,-0x38(%ebp)
	BlocksSizes[5] = 1*Mega;
f010ef9d:	c7 45 a8 00 00 10 00 	movl   $0x100000,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010efa4:	83 ec 0c             	sub    $0xc,%esp
f010efa7:	ff 75 d8             	pushl  -0x28(%ebp)
f010efaa:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010efb0:	50                   	push   %eax
f010efb1:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010efb4:	50                   	push   %eax
f010efb5:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010efb8:	50                   	push   %eax
f010efb9:	68 64 5d 87 f0       	push   $0xf0875d64
f010efbe:	e8 57 1b 00 00       	call   f0110b1a <check_list_data>
f010efc3:	83 c4 20             	add    $0x20,%esp
f010efc6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010efc9:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010efcd:	74 17                	je     f010efe6 <test_alloc_block_FF+0x443>
f010efcf:	83 ec 04             	sub    $0x4,%esp
f010efd2:	68 40 80 13 f0       	push   $0xf0138040
f010efd7:	68 42 01 00 00       	push   $0x142
f010efdc:	68 f4 79 13 f0       	push   $0xf01379f4
f010efe1:	e8 1f 12 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010efe6:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010efec:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010efef:	74 17                	je     f010f008 <test_alloc_block_FF+0x465>
f010eff1:	83 ec 04             	sub    $0x4,%esp
f010eff4:	68 8c 80 13 f0       	push   $0xf013808c
f010eff9:	68 43 01 00 00       	push   $0x143
f010effe:	68 f4 79 13 f0       	push   $0xf01379f4
f010f003:	e8 fd 11 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_FF completed successfully.\n");
f010f008:	83 ec 0c             	sub    $0xc,%esp
f010f00b:	68 d8 80 13 f0       	push   $0xf01380d8
f010f010:	e8 f9 1c ff ff       	call   f0100d0e <cprintf>
f010f015:	83 c4 10             	add    $0x10,%esp
}
f010f018:	90                   	nop
f010f019:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f01c:	5b                   	pop    %ebx
f010f01d:	5e                   	pop    %esi
f010f01e:	5f                   	pop    %edi
f010f01f:	5d                   	pop    %ebp
f010f020:	c3                   	ret    

f010f021 <test_alloc_block_BF>:

void test_alloc_block_BF()
{
f010f021:	55                   	push   %ebp
f010f022:	89 e5                	mov    %esp,%ebp
f010f024:	57                   	push   %edi
f010f025:	56                   	push   %esi
f010f026:	53                   	push   %ebx
f010f027:	81 ec cc 00 00 00    	sub    $0xcc,%esp
	uint32 numOfBlocks = 10;
f010f02d:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010f034:	83 ec 0c             	sub    $0xc,%esp
f010f037:	ff 75 e0             	pushl  -0x20(%ebp)
f010f03a:	e8 f7 29 02 00       	call   f0131a36 <initialize_MemBlocksList>
f010f03f:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010f042:	c7 05 c8 5c 87 f0 00 	movl   $0x0,0xf0875cc8
f010f049:	00 00 00 
f010f04c:	c7 05 cc 5c 87 f0 00 	movl   $0x0,0xf0875ccc
f010f053:	00 00 00 
f010f056:	c7 05 d4 5c 87 f0 00 	movl   $0x0,0xf0875cd4
f010f05d:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_BF 7
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
f010f060:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f063:	bb 54 83 13 f0       	mov    $0xf0138354,%ebx
f010f068:	ba 07 00 00 00       	mov    $0x7,%edx
f010f06d:	89 c7                	mov    %eax,%edi
f010f06f:	89 de                	mov    %ebx,%esi
f010f071:	89 d1                	mov    %edx,%ecx
f010f073:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;
f010f075:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f078:	bb 70 83 13 f0       	mov    $0xf0138370,%ebx
f010f07d:	ba 07 00 00 00       	mov    $0x7,%edx
f010f082:	89 c7                	mov    %eax,%edi
f010f084:	89 de                	mov    %ebx,%esi
f010f086:	89 d1                	mov    %edx,%ecx
f010f088:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010f08a:	c7 05 64 5d 87 f0 00 	movl   $0x0,0xf0875d64
f010f091:	00 00 00 
f010f094:	c7 05 68 5d 87 f0 00 	movl   $0x0,0xf0875d68
f010f09b:	00 00 00 
f010f09e:	c7 05 70 5d 87 f0 00 	movl   $0x0,0xf0875d70
f010f0a5:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010f0a8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010f0af:	e9 5f 01 00 00       	jmp    f010f213 <test_alloc_block_BF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010f0b4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f0b7:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f010f0bb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f0be:	c1 e2 04             	shl    $0x4,%edx
f010f0c1:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f0c4:	01 da                	add    %ebx,%edx
f010f0c6:	81 ea b4 00 00 00    	sub    $0xb4,%edx
f010f0cc:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010f0ce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f0d1:	8b 44 85 9c          	mov    -0x64(%ebp,%eax,4),%eax
f010f0d5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f0d8:	c1 e2 04             	shl    $0x4,%edx
f010f0db:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f0de:	01 f2                	add    %esi,%edx
f010f0e0:	81 ea b0 00 00 00    	sub    $0xb0,%edx
f010f0e6:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010f0e8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010f0ec:	0f 85 92 00 00 00    	jne    f010f184 <test_alloc_block_BF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010f0f2:	a1 64 5d 87 f0       	mov    0xf0875d64,%eax
f010f0f7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f0fa:	c1 e2 04             	shl    $0x4,%edx
f010f0fd:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f100:	01 fa                	add    %edi,%edx
f010f102:	81 ea bc 00 00 00    	sub    $0xbc,%edx
f010f108:	89 02                	mov    %eax,(%edx)
f010f10a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f10d:	c1 e0 04             	shl    $0x4,%eax
f010f110:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f113:	01 d8                	add    %ebx,%eax
f010f115:	2d bc 00 00 00       	sub    $0xbc,%eax
f010f11a:	8b 00                	mov    (%eax),%eax
f010f11c:	85 c0                	test   %eax,%eax
f010f11e:	74 18                	je     f010f138 <test_alloc_block_BF+0x117>
f010f120:	a1 64 5d 87 f0       	mov    0xf0875d64,%eax
f010f125:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010f12b:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f12e:	c1 e1 04             	shl    $0x4,%ecx
f010f131:	01 ca                	add    %ecx,%edx
f010f133:	89 50 04             	mov    %edx,0x4(%eax)
f010f136:	eb 13                	jmp    f010f14b <test_alloc_block_BF+0x12a>
f010f138:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010f13e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f141:	c1 e2 04             	shl    $0x4,%edx
f010f144:	01 d0                	add    %edx,%eax
f010f146:	a3 68 5d 87 f0       	mov    %eax,0xf0875d68
f010f14b:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010f151:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f154:	c1 e2 04             	shl    $0x4,%edx
f010f157:	01 d0                	add    %edx,%eax
f010f159:	a3 64 5d 87 f0       	mov    %eax,0xf0875d64
f010f15e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f161:	c1 e0 04             	shl    $0x4,%eax
f010f164:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f167:	01 f0                	add    %esi,%eax
f010f169:	2d b8 00 00 00       	sub    $0xb8,%eax
f010f16e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f174:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f010f179:	40                   	inc    %eax
f010f17a:	a3 70 5d 87 f0       	mov    %eax,0xf0875d70
f010f17f:	e9 8c 00 00 00       	jmp    f010f210 <test_alloc_block_BF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010f184:	a1 68 5d 87 f0       	mov    0xf0875d68,%eax
f010f189:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f18c:	c1 e2 04             	shl    $0x4,%edx
f010f18f:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f192:	01 fa                	add    %edi,%edx
f010f194:	81 ea b8 00 00 00    	sub    $0xb8,%edx
f010f19a:	89 02                	mov    %eax,(%edx)
f010f19c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f19f:	c1 e0 04             	shl    $0x4,%eax
f010f1a2:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f1a5:	01 d8                	add    %ebx,%eax
f010f1a7:	2d b8 00 00 00       	sub    $0xb8,%eax
f010f1ac:	8b 00                	mov    (%eax),%eax
f010f1ae:	85 c0                	test   %eax,%eax
f010f1b0:	74 17                	je     f010f1c9 <test_alloc_block_BF+0x1a8>
f010f1b2:	a1 68 5d 87 f0       	mov    0xf0875d68,%eax
f010f1b7:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010f1bd:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f1c0:	c1 e1 04             	shl    $0x4,%ecx
f010f1c3:	01 ca                	add    %ecx,%edx
f010f1c5:	89 10                	mov    %edx,(%eax)
f010f1c7:	eb 13                	jmp    f010f1dc <test_alloc_block_BF+0x1bb>
f010f1c9:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010f1cf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f1d2:	c1 e2 04             	shl    $0x4,%edx
f010f1d5:	01 d0                	add    %edx,%eax
f010f1d7:	a3 64 5d 87 f0       	mov    %eax,0xf0875d64
f010f1dc:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010f1e2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f1e5:	c1 e2 04             	shl    $0x4,%edx
f010f1e8:	01 d0                	add    %edx,%eax
f010f1ea:	a3 68 5d 87 f0       	mov    %eax,0xf0875d68
f010f1ef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f1f2:	c1 e0 04             	shl    $0x4,%eax
f010f1f5:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f1f8:	01 f0                	add    %esi,%eax
f010f1fa:	2d bc 00 00 00       	sub    $0xbc,%eax
f010f1ff:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f205:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f010f20a:	40                   	inc    %eax
f010f20b:	a3 70 5d 87 f0       	mov    %eax,0xf0875d70
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010f210:	ff 45 e4             	incl   -0x1c(%ebp)
f010f213:	83 7d e4 06          	cmpl   $0x6,-0x1c(%ebp)
f010f217:	0f 8e 97 fe ff ff    	jle    f010f0b4 <test_alloc_block_BF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_BF(4*Mega);
f010f21d:	83 ec 0c             	sub    $0xc,%esp
f010f220:	68 00 00 40 00       	push   $0x400000
f010f225:	e8 9b 2d 02 00       	call   f0131fc5 <alloc_block_BF>
f010f22a:	83 c4 10             	add    $0x10,%esp
f010f22d:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a block instead no existing free blocks with the given size.");
f010f230:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f234:	74 17                	je     f010f24d <test_alloc_block_BF+0x22c>
f010f236:	83 ec 04             	sub    $0x4,%esp
f010f239:	68 60 81 13 f0       	push   $0xf0138160
f010f23e:	68 66 01 00 00       	push   $0x166
f010f243:	68 f4 79 13 f0       	push   $0xf01379f4
f010f248:	e8 b8 0f ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f24d:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f010f252:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f255:	75 13                	jne    f010f26a <test_alloc_block_BF+0x249>
f010f257:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f010f25c:	83 f8 07             	cmp    $0x7,%eax
f010f25f:	75 09                	jne    f010f26a <test_alloc_block_BF+0x249>
f010f261:	a1 d4 5c 87 f0       	mov    0xf0875cd4,%eax
f010f266:	85 c0                	test   %eax,%eax
f010f268:	74 17                	je     f010f281 <test_alloc_block_BF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010f26a:	83 ec 04             	sub    $0x4,%esp
f010f26d:	68 20 7f 13 f0       	push   $0xf0137f20
f010f272:	68 6a 01 00 00       	push   $0x16a
f010f277:	68 f4 79 13 f0       	push   $0xf01379f4
f010f27c:	e8 84 0f ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (NOT THE FIRST BLOCK FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010f281:	83 ec 0c             	sub    $0xc,%esp
f010f284:	68 00 00 10 00       	push   $0x100000
f010f289:	e8 37 2d 02 00       	call   f0131fc5 <alloc_block_BF>
f010f28e:	83 c4 10             	add    $0x10,%esp
f010f291:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x21B400)
f010f294:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f298:	74 1a                	je     f010f2b4 <test_alloc_block_BF+0x293>
f010f29a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f29d:	8b 40 0c             	mov    0xc(%eax),%eax
f010f2a0:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010f2a5:	75 0d                	jne    f010f2b4 <test_alloc_block_BF+0x293>
f010f2a7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f2aa:	8b 40 08             	mov    0x8(%eax),%eax
f010f2ad:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f010f2b2:	74 17                	je     f010f2cb <test_alloc_block_BF+0x2aa>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010f2b4:	83 ec 04             	sub    $0x4,%esp
f010f2b7:	68 d4 81 13 f0       	push   $0xf01381d4
f010f2bc:	68 72 01 00 00       	push   $0x172
f010f2c1:	68 f4 79 13 f0       	push   $0xf01379f4
f010f2c6:	e8 3a 0f ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f2cb:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f010f2d0:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f2d3:	75 13                	jne    f010f2e8 <test_alloc_block_BF+0x2c7>
f010f2d5:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f010f2da:	83 f8 06             	cmp    $0x6,%eax
f010f2dd:	75 09                	jne    f010f2e8 <test_alloc_block_BF+0x2c7>
f010f2df:	a1 d4 5c 87 f0       	mov    0xf0875cd4,%eax
f010f2e4:	85 c0                	test   %eax,%eax
f010f2e6:	74 17                	je     f010f2ff <test_alloc_block_BF+0x2de>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f2e8:	83 ec 04             	sub    $0x4,%esp
f010f2eb:	68 18 82 13 f0       	push   $0xf0138218
f010f2f0:	68 76 01 00 00       	push   $0x176
f010f2f5:	68 f4 79 13 f0       	push   $0xf01379f4
f010f2fa:	e8 06 0f ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010f2ff:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010f306:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_BF-1;
f010f309:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0;
f010f310:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	BlocksSizes[6] = 0;
f010f317:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f31e:	83 ec 0c             	sub    $0xc,%esp
f010f321:	ff 75 d8             	pushl  -0x28(%ebp)
f010f324:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010f32a:	50                   	push   %eax
f010f32b:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f32e:	50                   	push   %eax
f010f32f:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f332:	50                   	push   %eax
f010f333:	68 64 5d 87 f0       	push   $0xf0875d64
f010f338:	e8 dd 17 00 00       	call   f0110b1a <check_list_data>
f010f33d:	83 c4 20             	add    $0x20,%esp
f010f340:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010f343:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f347:	74 17                	je     f010f360 <test_alloc_block_BF+0x33f>
f010f349:	83 ec 04             	sub    $0x4,%esp
f010f34c:	68 7c 82 13 f0       	push   $0xf013827c
f010f351:	68 7e 01 00 00       	push   $0x17e
f010f356:	68 f4 79 13 f0       	push   $0xf01379f4
f010f35b:	e8 a5 0e ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010f360:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f366:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f369:	74 17                	je     f010f382 <test_alloc_block_BF+0x361>
f010f36b:	83 ec 04             	sub    $0x4,%esp
f010f36e:	68 c8 82 13 f0       	push   $0xf01382c8
f010f373:	68 7f 01 00 00       	push   $0x17f
f010f378:	68 f4 79 13 f0       	push   $0xf01379f4
f010f37d:	e8 83 0e ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of any existing free block (ONLY ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010f382:	83 ec 0c             	sub    $0xc,%esp
f010f385:	68 00 00 10 00       	push   $0x100000
f010f38a:	e8 36 2c 02 00       	call   f0131fc5 <alloc_block_BF>
f010f38f:	83 c4 10             	add    $0x10,%esp
f010f392:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010f395:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f399:	74 1a                	je     f010f3b5 <test_alloc_block_BF+0x394>
f010f39b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f39e:	8b 40 0c             	mov    0xc(%eax),%eax
f010f3a1:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010f3a6:	75 0d                	jne    f010f3b5 <test_alloc_block_BF+0x394>
f010f3a8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f3ab:	8b 40 08             	mov    0x8(%eax),%eax
f010f3ae:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010f3b3:	74 17                	je     f010f3cc <test_alloc_block_BF+0x3ab>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010f3b5:	83 ec 04             	sub    $0x4,%esp
f010f3b8:	68 d4 81 13 f0       	push   $0xf01381d4
f010f3bd:	68 87 01 00 00       	push   $0x187
f010f3c2:	68 f4 79 13 f0       	push   $0xf01379f4
f010f3c7:	e8 39 0e ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f3cc:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f010f3d1:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f3d4:	4a                   	dec    %edx
f010f3d5:	39 d0                	cmp    %edx,%eax
f010f3d7:	75 13                	jne    f010f3ec <test_alloc_block_BF+0x3cb>
f010f3d9:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f010f3de:	83 f8 06             	cmp    $0x6,%eax
f010f3e1:	75 09                	jne    f010f3ec <test_alloc_block_BF+0x3cb>
f010f3e3:	a1 d4 5c 87 f0       	mov    0xf0875cd4,%eax
f010f3e8:	85 c0                	test   %eax,%eax
f010f3ea:	74 17                	je     f010f403 <test_alloc_block_BF+0x3e2>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f3ec:	83 ec 04             	sub    $0x4,%esp
f010f3ef:	68 18 82 13 f0       	push   $0xf0138218
f010f3f4:	68 8b 01 00 00       	push   $0x18b
f010f3f9:	68 f4 79 13 f0       	push   $0xf01379f4
f010f3fe:	e8 02 0e ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f403:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010f40a:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010f40d:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010f414:	c7 45 cc 00 a4 11 00 	movl   $0x11a400,-0x34(%ebp)
	BlocksSizes[5] = 1*Mega;
f010f41b:	c7 45 b0 00 00 10 00 	movl   $0x100000,-0x50(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f422:	83 ec 0c             	sub    $0xc,%esp
f010f425:	ff 75 d8             	pushl  -0x28(%ebp)
f010f428:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010f42e:	50                   	push   %eax
f010f42f:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f432:	50                   	push   %eax
f010f433:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f436:	50                   	push   %eax
f010f437:	68 64 5d 87 f0       	push   $0xf0875d64
f010f43c:	e8 d9 16 00 00       	call   f0110b1a <check_list_data>
f010f441:	83 c4 20             	add    $0x20,%esp
f010f444:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010f447:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f44b:	74 17                	je     f010f464 <test_alloc_block_BF+0x443>
f010f44d:	83 ec 04             	sub    $0x4,%esp
f010f450:	68 7c 82 13 f0       	push   $0xf013827c
f010f455:	68 93 01 00 00       	push   $0x193
f010f45a:	68 f4 79 13 f0       	push   $0xf01379f4
f010f45f:	e8 a1 0d ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010f464:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f46a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f46d:	74 17                	je     f010f486 <test_alloc_block_BF+0x465>
f010f46f:	83 ec 04             	sub    $0x4,%esp
f010f472:	68 c8 82 13 f0       	push   $0xf01382c8
f010f477:	68 94 01 00 00       	push   $0x194
f010f47c:	68 f4 79 13 f0       	push   $0xf01379f4
f010f481:	e8 7f 0d ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (MORE THAN ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(3*kilo);
f010f486:	83 ec 0c             	sub    $0xc,%esp
f010f489:	68 00 0c 00 00       	push   $0xc00
f010f48e:	e8 32 2b 02 00       	call   f0131fc5 <alloc_block_BF>
f010f493:	83 c4 10             	add    $0x10,%esp
f010f496:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x19000)
f010f499:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f49d:	74 1a                	je     f010f4b9 <test_alloc_block_BF+0x498>
f010f49f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f4a2:	8b 40 0c             	mov    0xc(%eax),%eax
f010f4a5:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010f4aa:	75 0d                	jne    f010f4b9 <test_alloc_block_BF+0x498>
f010f4ac:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f4af:	8b 40 08             	mov    0x8(%eax),%eax
f010f4b2:	3d 00 90 01 00       	cmp    $0x19000,%eax
f010f4b7:	74 17                	je     f010f4d0 <test_alloc_block_BF+0x4af>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010f4b9:	83 ec 04             	sub    $0x4,%esp
f010f4bc:	68 d4 81 13 f0       	push   $0xf01381d4
f010f4c1:	68 9c 01 00 00       	push   $0x19c
f010f4c6:	68 f4 79 13 f0       	push   $0xf01379f4
f010f4cb:	e8 35 0d ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f4d0:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f010f4d5:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f4d8:	83 ea 02             	sub    $0x2,%edx
f010f4db:	39 d0                	cmp    %edx,%eax
f010f4dd:	75 13                	jne    f010f4f2 <test_alloc_block_BF+0x4d1>
f010f4df:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f010f4e4:	83 f8 06             	cmp    $0x6,%eax
f010f4e7:	75 09                	jne    f010f4f2 <test_alloc_block_BF+0x4d1>
f010f4e9:	a1 d4 5c 87 f0       	mov    0xf0875cd4,%eax
f010f4ee:	85 c0                	test   %eax,%eax
f010f4f0:	74 17                	je     f010f509 <test_alloc_block_BF+0x4e8>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f4f2:	83 ec 04             	sub    $0x4,%esp
f010f4f5:	68 18 82 13 f0       	push   $0xf0138218
f010f4fa:	68 a0 01 00 00       	push   $0x1a0
f010f4ff:	68 f4 79 13 f0       	push   $0xf01379f4
f010f504:	e8 fc 0c ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f509:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010f510:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010f513:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[4] = 0x19C00;  //100KB + 3KB
f010f51a:	c7 45 c8 00 9c 01 00 	movl   $0x19c00,-0x38(%ebp)
	BlocksSizes[4] = 1*kilo;
f010f521:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f528:	83 ec 0c             	sub    $0xc,%esp
f010f52b:	ff 75 d8             	pushl  -0x28(%ebp)
f010f52e:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010f534:	50                   	push   %eax
f010f535:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f538:	50                   	push   %eax
f010f539:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f53c:	50                   	push   %eax
f010f53d:	68 64 5d 87 f0       	push   $0xf0875d64
f010f542:	e8 d3 15 00 00       	call   f0110b1a <check_list_data>
f010f547:	83 c4 20             	add    $0x20,%esp
f010f54a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010f54d:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f551:	74 17                	je     f010f56a <test_alloc_block_BF+0x549>
f010f553:	83 ec 04             	sub    $0x4,%esp
f010f556:	68 7c 82 13 f0       	push   $0xf013827c
f010f55b:	68 a8 01 00 00       	push   $0x1a8
f010f560:	68 f4 79 13 f0       	push   $0xf01379f4
f010f565:	e8 9b 0c ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010f56a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f570:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f573:	74 17                	je     f010f58c <test_alloc_block_BF+0x56b>
f010f575:	83 ec 04             	sub    $0x4,%esp
f010f578:	68 c8 82 13 f0       	push   $0xf01382c8
f010f57d:	68 a9 01 00 00       	push   $0x1a9
f010f582:	68 f4 79 13 f0       	push   $0xf01379f4
f010f587:	e8 79 0c ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 5: Try to allocate a block @ the head of the free block list */
	blockToAlloc = alloc_block_BF(2*kilo);
f010f58c:	83 ec 0c             	sub    $0xc,%esp
f010f58f:	68 00 08 00 00       	push   $0x800
f010f594:	e8 2c 2a 02 00       	call   f0131fc5 <alloc_block_BF>
f010f599:	83 c4 10             	add    $0x10,%esp
f010f59c:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*kilo || blockToAlloc->sva != 0x0)
f010f59f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f5a3:	74 17                	je     f010f5bc <test_alloc_block_BF+0x59b>
f010f5a5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f5a8:	8b 40 0c             	mov    0xc(%eax),%eax
f010f5ab:	3d 00 08 00 00       	cmp    $0x800,%eax
f010f5b0:	75 0a                	jne    f010f5bc <test_alloc_block_BF+0x59b>
f010f5b2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f5b5:	8b 40 08             	mov    0x8(%eax),%eax
f010f5b8:	85 c0                	test   %eax,%eax
f010f5ba:	74 17                	je     f010f5d3 <test_alloc_block_BF+0x5b2>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010f5bc:	83 ec 04             	sub    $0x4,%esp
f010f5bf:	68 d4 81 13 f0       	push   $0xf01381d4
f010f5c4:	68 b1 01 00 00       	push   $0x1b1
f010f5c9:	68 f4 79 13 f0       	push   $0xf01379f4
f010f5ce:	e8 32 0c ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f5d3:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f010f5d8:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f5db:	83 ea 02             	sub    $0x2,%edx
f010f5de:	39 d0                	cmp    %edx,%eax
f010f5e0:	75 13                	jne    f010f5f5 <test_alloc_block_BF+0x5d4>
f010f5e2:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f010f5e7:	83 f8 05             	cmp    $0x5,%eax
f010f5ea:	75 09                	jne    f010f5f5 <test_alloc_block_BF+0x5d4>
f010f5ec:	a1 d4 5c 87 f0       	mov    0xf0875cd4,%eax
f010f5f1:	85 c0                	test   %eax,%eax
f010f5f3:	74 17                	je     f010f60c <test_alloc_block_BF+0x5eb>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f5f5:	83 ec 04             	sub    $0x4,%esp
f010f5f8:	68 18 82 13 f0       	push   $0xf0138218
f010f5fd:	68 b5 01 00 00       	push   $0x1b5
f010f602:	68 f4 79 13 f0       	push   $0xf01379f4
f010f607:	e8 f9 0b ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f60c:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010f613:	00 00 00 
	actualSize = numOfFreeBlocks_BF-2;
f010f616:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0x0;
f010f61d:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
	BlocksSizes[0] = 0;
f010f624:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f62b:	83 ec 0c             	sub    $0xc,%esp
f010f62e:	ff 75 d8             	pushl  -0x28(%ebp)
f010f631:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010f637:	50                   	push   %eax
f010f638:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f63b:	50                   	push   %eax
f010f63c:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f63f:	50                   	push   %eax
f010f640:	68 64 5d 87 f0       	push   $0xf0875d64
f010f645:	e8 d0 14 00 00       	call   f0110b1a <check_list_data>
f010f64a:	83 c4 20             	add    $0x20,%esp
f010f64d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010f650:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f654:	74 17                	je     f010f66d <test_alloc_block_BF+0x64c>
f010f656:	83 ec 04             	sub    $0x4,%esp
f010f659:	68 7c 82 13 f0       	push   $0xf013827c
f010f65e:	68 bd 01 00 00       	push   $0x1bd
f010f663:	68 f4 79 13 f0       	push   $0xf01379f4
f010f668:	e8 98 0b ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010f66d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f673:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f676:	74 17                	je     f010f68f <test_alloc_block_BF+0x66e>
f010f678:	83 ec 04             	sub    $0x4,%esp
f010f67b:	68 c8 82 13 f0       	push   $0xf01382c8
f010f680:	68 be 01 00 00       	push   $0x1be
f010f685:	68 f4 79 13 f0       	push   $0xf01379f4
f010f68a:	e8 76 0b ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_BF completed successfully.\n");
f010f68f:	83 ec 0c             	sub    $0xc,%esp
f010f692:	68 14 83 13 f0       	push   $0xf0138314
f010f697:	e8 72 16 ff ff       	call   f0100d0e <cprintf>
f010f69c:	83 c4 10             	add    $0x10,%esp
}
f010f69f:	90                   	nop
f010f6a0:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f6a3:	5b                   	pop    %ebx
f010f6a4:	5e                   	pop    %esi
f010f6a5:	5f                   	pop    %edi
f010f6a6:	5d                   	pop    %ebp
f010f6a7:	c3                   	ret    

f010f6a8 <test_alloc_block_NF>:

void test_alloc_block_NF()
{
f010f6a8:	55                   	push   %ebp
f010f6a9:	89 e5                	mov    %esp,%ebp
f010f6ab:	57                   	push   %edi
f010f6ac:	56                   	push   %esi
f010f6ad:	53                   	push   %ebx
f010f6ae:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010f6b4:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010f6bb:	83 ec 0c             	sub    $0xc,%esp
f010f6be:	ff 75 e0             	pushl  -0x20(%ebp)
f010f6c1:	e8 70 23 02 00       	call   f0131a36 <initialize_MemBlocksList>
f010f6c6:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010f6c9:	c7 05 c8 5c 87 f0 00 	movl   $0x0,0xf0875cc8
f010f6d0:	00 00 00 
f010f6d3:	c7 05 cc 5c 87 f0 00 	movl   $0x0,0xf0875ccc
f010f6da:	00 00 00 
f010f6dd:	c7 05 d4 5c 87 f0 00 	movl   $0x0,0xf0875cd4
f010f6e4:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_NF 8
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010f6e7:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f6ea:	bb 20 81 13 f0       	mov    $0xf0138120,%ebx
f010f6ef:	ba 08 00 00 00       	mov    $0x8,%edx
f010f6f4:	89 c7                	mov    %eax,%edi
f010f6f6:	89 de                	mov    %ebx,%esi
f010f6f8:	89 d1                	mov    %edx,%ecx
f010f6fa:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;
f010f6fc:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f6ff:	bb 80 85 13 f0       	mov    $0xf0138580,%ebx
f010f704:	ba 08 00 00 00       	mov    $0x8,%edx
f010f709:	89 c7                	mov    %eax,%edi
f010f70b:	89 de                	mov    %ebx,%esi
f010f70d:	89 d1                	mov    %edx,%ecx
f010f70f:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010f711:	c7 05 64 5d 87 f0 00 	movl   $0x0,0xf0875d64
f010f718:	00 00 00 
f010f71b:	c7 05 68 5d 87 f0 00 	movl   $0x0,0xf0875d68
f010f722:	00 00 00 
f010f725:	c7 05 70 5d 87 f0 00 	movl   $0x0,0xf0875d70
f010f72c:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f010f72f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010f736:	e9 5f 01 00 00       	jmp    f010f89a <test_alloc_block_NF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010f73b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f73e:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010f742:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f745:	c1 e2 04             	shl    $0x4,%edx
f010f748:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f74b:	01 da                	add    %ebx,%edx
f010f74d:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010f753:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010f755:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f758:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010f75c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f75f:	c1 e2 04             	shl    $0x4,%edx
f010f762:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f765:	01 f2                	add    %esi,%edx
f010f767:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010f76d:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010f76f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010f773:	0f 85 92 00 00 00    	jne    f010f80b <test_alloc_block_NF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010f779:	a1 64 5d 87 f0       	mov    0xf0875d64,%eax
f010f77e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f781:	c1 e2 04             	shl    $0x4,%edx
f010f784:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f787:	01 fa                	add    %edi,%edx
f010f789:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010f78f:	89 02                	mov    %eax,(%edx)
f010f791:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f794:	c1 e0 04             	shl    $0x4,%eax
f010f797:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f79a:	01 d8                	add    %ebx,%eax
f010f79c:	2d d4 00 00 00       	sub    $0xd4,%eax
f010f7a1:	8b 00                	mov    (%eax),%eax
f010f7a3:	85 c0                	test   %eax,%eax
f010f7a5:	74 18                	je     f010f7bf <test_alloc_block_NF+0x117>
f010f7a7:	a1 64 5d 87 f0       	mov    0xf0875d64,%eax
f010f7ac:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010f7b2:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f7b5:	c1 e1 04             	shl    $0x4,%ecx
f010f7b8:	01 ca                	add    %ecx,%edx
f010f7ba:	89 50 04             	mov    %edx,0x4(%eax)
f010f7bd:	eb 13                	jmp    f010f7d2 <test_alloc_block_NF+0x12a>
f010f7bf:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f7c5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f7c8:	c1 e2 04             	shl    $0x4,%edx
f010f7cb:	01 d0                	add    %edx,%eax
f010f7cd:	a3 68 5d 87 f0       	mov    %eax,0xf0875d68
f010f7d2:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f7d8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f7db:	c1 e2 04             	shl    $0x4,%edx
f010f7de:	01 d0                	add    %edx,%eax
f010f7e0:	a3 64 5d 87 f0       	mov    %eax,0xf0875d64
f010f7e5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f7e8:	c1 e0 04             	shl    $0x4,%eax
f010f7eb:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f7ee:	01 f0                	add    %esi,%eax
f010f7f0:	2d d0 00 00 00       	sub    $0xd0,%eax
f010f7f5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f7fb:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f010f800:	40                   	inc    %eax
f010f801:	a3 70 5d 87 f0       	mov    %eax,0xf0875d70
f010f806:	e9 8c 00 00 00       	jmp    f010f897 <test_alloc_block_NF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010f80b:	a1 68 5d 87 f0       	mov    0xf0875d68,%eax
f010f810:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f813:	c1 e2 04             	shl    $0x4,%edx
f010f816:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f819:	01 fa                	add    %edi,%edx
f010f81b:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010f821:	89 02                	mov    %eax,(%edx)
f010f823:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f826:	c1 e0 04             	shl    $0x4,%eax
f010f829:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f82c:	01 d8                	add    %ebx,%eax
f010f82e:	2d d0 00 00 00       	sub    $0xd0,%eax
f010f833:	8b 00                	mov    (%eax),%eax
f010f835:	85 c0                	test   %eax,%eax
f010f837:	74 17                	je     f010f850 <test_alloc_block_NF+0x1a8>
f010f839:	a1 68 5d 87 f0       	mov    0xf0875d68,%eax
f010f83e:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010f844:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f847:	c1 e1 04             	shl    $0x4,%ecx
f010f84a:	01 ca                	add    %ecx,%edx
f010f84c:	89 10                	mov    %edx,(%eax)
f010f84e:	eb 13                	jmp    f010f863 <test_alloc_block_NF+0x1bb>
f010f850:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f856:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f859:	c1 e2 04             	shl    $0x4,%edx
f010f85c:	01 d0                	add    %edx,%eax
f010f85e:	a3 64 5d 87 f0       	mov    %eax,0xf0875d64
f010f863:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f869:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f86c:	c1 e2 04             	shl    $0x4,%edx
f010f86f:	01 d0                	add    %edx,%eax
f010f871:	a3 68 5d 87 f0       	mov    %eax,0xf0875d68
f010f876:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f879:	c1 e0 04             	shl    $0x4,%eax
f010f87c:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f87f:	01 f0                	add    %esi,%eax
f010f881:	2d d4 00 00 00       	sub    $0xd4,%eax
f010f886:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f88c:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f010f891:	40                   	inc    %eax
f010f892:	a3 70 5d 87 f0       	mov    %eax,0xf0875d70
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f010f897:	ff 45 e4             	incl   -0x1c(%ebp)
f010f89a:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010f89e:	0f 8e 97 fe ff ff    	jle    f010f73b <test_alloc_block_NF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*NF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_NF(10*Mega);
f010f8a4:	83 ec 0c             	sub    $0xc,%esp
f010f8a7:	68 00 00 a0 00       	push   $0xa00000
f010f8ac:	e8 25 29 02 00       	call   f01321d6 <alloc_block_NF>
f010f8b1:	83 c4 10             	add    $0x10,%esp
f010f8b4:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a block instead no existing free blocks with the given size.");
f010f8b7:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f8bb:	74 17                	je     f010f8d4 <test_alloc_block_NF+0x22c>
f010f8bd:	83 ec 04             	sub    $0x4,%esp
f010f8c0:	68 8c 83 13 f0       	push   $0xf013838c
f010f8c5:	68 e1 01 00 00       	push   $0x1e1
f010f8ca:	68 f4 79 13 f0       	push   $0xf01379f4
f010f8cf:	e8 31 09 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f8d4:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f010f8d9:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f8dc:	75 13                	jne    f010f8f1 <test_alloc_block_NF+0x249>
f010f8de:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f010f8e3:	83 f8 08             	cmp    $0x8,%eax
f010f8e6:	75 09                	jne    f010f8f1 <test_alloc_block_NF+0x249>
f010f8e8:	a1 d4 5c 87 f0       	mov    0xf0875cd4,%eax
f010f8ed:	85 c0                	test   %eax,%eax
f010f8ef:	74 17                	je     f010f908 <test_alloc_block_NF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010f8f1:	83 ec 04             	sub    $0x4,%esp
f010f8f4:	68 20 7f 13 f0       	push   $0xf0137f20
f010f8f9:	68 e5 01 00 00       	push   $0x1e5
f010f8fe:	68 f4 79 13 f0       	push   $0xf01379f4
f010f903:	e8 fd 08 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (STARTING from 0)*/
	blockToAlloc = alloc_block_NF(10*kilo);
f010f908:	83 ec 0c             	sub    $0xc,%esp
f010f90b:	68 00 28 00 00       	push   $0x2800
f010f910:	e8 c1 28 02 00       	call   f01321d6 <alloc_block_NF>
f010f915:	83 c4 10             	add    $0x10,%esp
f010f918:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 10*kilo || blockToAlloc->sva != 0x7000)
f010f91b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f91f:	74 1a                	je     f010f93b <test_alloc_block_NF+0x293>
f010f921:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f924:	8b 40 0c             	mov    0xc(%eax),%eax
f010f927:	3d 00 28 00 00       	cmp    $0x2800,%eax
f010f92c:	75 0d                	jne    f010f93b <test_alloc_block_NF+0x293>
f010f92e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f931:	8b 40 08             	mov    0x8(%eax),%eax
f010f934:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010f939:	74 17                	je     f010f952 <test_alloc_block_NF+0x2aa>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010f93b:	83 ec 04             	sub    $0x4,%esp
f010f93e:	68 00 84 13 f0       	push   $0xf0138400
f010f943:	68 ed 01 00 00       	push   $0x1ed
f010f948:	68 f4 79 13 f0       	push   $0xf01379f4
f010f94d:	e8 b3 08 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f952:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f010f957:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f95a:	75 13                	jne    f010f96f <test_alloc_block_NF+0x2c7>
f010f95c:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f010f961:	83 f8 07             	cmp    $0x7,%eax
f010f964:	75 09                	jne    f010f96f <test_alloc_block_NF+0x2c7>
f010f966:	a1 d4 5c 87 f0       	mov    0xf0875cd4,%eax
f010f96b:	85 c0                	test   %eax,%eax
f010f96d:	74 17                	je     f010f986 <test_alloc_block_NF+0x2de>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f96f:	83 ec 04             	sub    $0x4,%esp
f010f972:	68 44 84 13 f0       	push   $0xf0138444
f010f977:	68 f1 01 00 00       	push   $0x1f1
f010f97c:	68 f4 79 13 f0       	push   $0xf01379f4
f010f981:	e8 7f 08 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010f986:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f98d:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_NF-1;
f010f990:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010f997:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010f99e:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f9a5:	83 ec 0c             	sub    $0xc,%esp
f010f9a8:	ff 75 d8             	pushl  -0x28(%ebp)
f010f9ab:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f9b1:	50                   	push   %eax
f010f9b2:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f9b5:	50                   	push   %eax
f010f9b6:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f9b9:	50                   	push   %eax
f010f9ba:	68 64 5d 87 f0       	push   $0xf0875d64
f010f9bf:	e8 56 11 00 00       	call   f0110b1a <check_list_data>
f010f9c4:	83 c4 20             	add    $0x20,%esp
f010f9c7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010f9ca:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f9ce:	74 17                	je     f010f9e7 <test_alloc_block_NF+0x33f>
f010f9d0:	83 ec 04             	sub    $0x4,%esp
f010f9d3:	68 a8 84 13 f0       	push   $0xf01384a8
f010f9d8:	68 f9 01 00 00       	push   $0x1f9
f010f9dd:	68 f4 79 13 f0       	push   $0xf01379f4
f010f9e2:	e8 1e 08 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010f9e7:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f9ed:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f9f0:	74 17                	je     f010fa09 <test_alloc_block_NF+0x361>
f010f9f2:	83 ec 04             	sub    $0x4,%esp
f010f9f5:	68 f4 84 13 f0       	push   $0xf01384f4
f010f9fa:	68 fa 01 00 00       	push   $0x1fa
f010f9ff:	68 f4 79 13 f0       	push   $0xf01379f4
f010fa04:	e8 fc 07 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the one existing free blocks (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(2*Mega);
f010fa09:	83 ec 0c             	sub    $0xc,%esp
f010fa0c:	68 00 00 20 00       	push   $0x200000
f010fa11:	e8 c0 27 02 00       	call   f01321d6 <alloc_block_NF>
f010fa16:	83 c4 10             	add    $0x10,%esp
f010fa19:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*Mega || blockToAlloc->sva != 0x1A400)
f010fa1c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fa20:	74 1a                	je     f010fa3c <test_alloc_block_NF+0x394>
f010fa22:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fa25:	8b 40 0c             	mov    0xc(%eax),%eax
f010fa28:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010fa2d:	75 0d                	jne    f010fa3c <test_alloc_block_NF+0x394>
f010fa2f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fa32:	8b 40 08             	mov    0x8(%eax),%eax
f010fa35:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010fa3a:	74 17                	je     f010fa53 <test_alloc_block_NF+0x3ab>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010fa3c:	83 ec 04             	sub    $0x4,%esp
f010fa3f:	68 00 84 13 f0       	push   $0xf0138400
f010fa44:	68 03 02 00 00       	push   $0x203
f010fa49:	68 f4 79 13 f0       	push   $0xf01379f4
f010fa4e:	e8 b2 07 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fa53:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f010fa58:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fa5b:	75 13                	jne    f010fa70 <test_alloc_block_NF+0x3c8>
f010fa5d:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f010fa62:	83 f8 06             	cmp    $0x6,%eax
f010fa65:	75 09                	jne    f010fa70 <test_alloc_block_NF+0x3c8>
f010fa67:	a1 d4 5c 87 f0       	mov    0xf0875cd4,%eax
f010fa6c:	85 c0                	test   %eax,%eax
f010fa6e:	74 17                	je     f010fa87 <test_alloc_block_NF+0x3df>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fa70:	83 ec 04             	sub    $0x4,%esp
f010fa73:	68 44 84 13 f0       	push   $0xf0138444
f010fa78:	68 07 02 00 00       	push   $0x207
f010fa7d:	68 f4 79 13 f0       	push   $0xf01379f4
f010fa82:	e8 7e 07 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010fa87:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010fa8e:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010fa91:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0;
f010fa98:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	BlocksSizes[5] = 0;
f010fa9f:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010faa6:	83 ec 0c             	sub    $0xc,%esp
f010faa9:	ff 75 d8             	pushl  -0x28(%ebp)
f010faac:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010fab2:	50                   	push   %eax
f010fab3:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fab6:	50                   	push   %eax
f010fab7:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010faba:	50                   	push   %eax
f010fabb:	68 64 5d 87 f0       	push   $0xf0875d64
f010fac0:	e8 55 10 00 00       	call   f0110b1a <check_list_data>
f010fac5:	83 c4 20             	add    $0x20,%esp
f010fac8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010facb:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010facf:	74 17                	je     f010fae8 <test_alloc_block_NF+0x440>
f010fad1:	83 ec 04             	sub    $0x4,%esp
f010fad4:	68 a8 84 13 f0       	push   $0xf01384a8
f010fad9:	68 0f 02 00 00       	push   $0x20f
f010fade:	68 f4 79 13 f0       	push   $0xf01379f4
f010fae3:	e8 1d 07 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010fae8:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010faee:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010faf1:	74 17                	je     f010fb0a <test_alloc_block_NF+0x462>
f010faf3:	83 ec 04             	sub    $0x4,%esp
f010faf6:	68 f4 84 13 f0       	push   $0xf01384f4
f010fafb:	68 10 02 00 00       	push   $0x210
f010fb00:	68 f4 79 13 f0       	push   $0xf01379f4
f010fb05:	e8 fb 06 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(512*kilo);
f010fb0a:	83 ec 0c             	sub    $0xc,%esp
f010fb0d:	68 00 00 08 00       	push   $0x80000
f010fb12:	e8 bf 26 02 00       	call   f01321d6 <alloc_block_NF>
f010fb17:	83 c4 10             	add    $0x10,%esp
f010fb1a:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 512*kilo || blockToAlloc->sva != 0x21B400)
f010fb1d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fb21:	74 1a                	je     f010fb3d <test_alloc_block_NF+0x495>
f010fb23:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fb26:	8b 40 0c             	mov    0xc(%eax),%eax
f010fb29:	3d 00 00 08 00       	cmp    $0x80000,%eax
f010fb2e:	75 0d                	jne    f010fb3d <test_alloc_block_NF+0x495>
f010fb30:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fb33:	8b 40 08             	mov    0x8(%eax),%eax
f010fb36:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f010fb3b:	74 17                	je     f010fb54 <test_alloc_block_NF+0x4ac>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010fb3d:	83 ec 04             	sub    $0x4,%esp
f010fb40:	68 00 84 13 f0       	push   $0xf0138400
f010fb45:	68 19 02 00 00       	push   $0x219
f010fb4a:	68 f4 79 13 f0       	push   $0xf01379f4
f010fb4f:	e8 b1 06 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fb54:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f010fb59:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010fb5c:	4a                   	dec    %edx
f010fb5d:	39 d0                	cmp    %edx,%eax
f010fb5f:	75 13                	jne    f010fb74 <test_alloc_block_NF+0x4cc>
f010fb61:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f010fb66:	83 f8 06             	cmp    $0x6,%eax
f010fb69:	75 09                	jne    f010fb74 <test_alloc_block_NF+0x4cc>
f010fb6b:	a1 d4 5c 87 f0       	mov    0xf0875cd4,%eax
f010fb70:	85 c0                	test   %eax,%eax
f010fb72:	74 17                	je     f010fb8b <test_alloc_block_NF+0x4e3>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fb74:	83 ec 04             	sub    $0x4,%esp
f010fb77:	68 44 84 13 f0       	push   $0xf0138444
f010fb7c:	68 1d 02 00 00       	push   $0x21d
f010fb81:	68 f4 79 13 f0       	push   $0xf01379f4
f010fb86:	e8 7a 06 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010fb8b:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010fb92:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010fb95:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo;
f010fb9c:	c7 45 cc 00 b4 29 00 	movl   $0x29b400,-0x34(%ebp)
	BlocksSizes[6] = 512*kilo;
f010fba3:	c7 45 ac 00 00 08 00 	movl   $0x80000,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fbaa:	83 ec 0c             	sub    $0xc,%esp
f010fbad:	ff 75 d8             	pushl  -0x28(%ebp)
f010fbb0:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010fbb6:	50                   	push   %eax
f010fbb7:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fbba:	50                   	push   %eax
f010fbbb:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010fbbe:	50                   	push   %eax
f010fbbf:	68 64 5d 87 f0       	push   $0xf0875d64
f010fbc4:	e8 51 0f 00 00       	call   f0110b1a <check_list_data>
f010fbc9:	83 c4 20             	add    $0x20,%esp
f010fbcc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010fbcf:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fbd3:	74 17                	je     f010fbec <test_alloc_block_NF+0x544>
f010fbd5:	83 ec 04             	sub    $0x4,%esp
f010fbd8:	68 a8 84 13 f0       	push   $0xf01384a8
f010fbdd:	68 25 02 00 00       	push   $0x225
f010fbe2:	68 f4 79 13 f0       	push   $0xf01379f4
f010fbe7:	e8 19 06 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010fbec:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010fbf2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fbf5:	74 17                	je     f010fc0e <test_alloc_block_NF+0x566>
f010fbf7:	83 ec 04             	sub    $0x4,%esp
f010fbfa:	68 f4 84 13 f0       	push   $0xf01384f4
f010fbff:	68 26 02 00 00       	push   $0x226
f010fc04:	68 f4 79 13 f0       	push   $0xf01379f4
f010fc09:	e8 f7 05 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 5: Try to allocate a block with a size smaller than the size of any existing free block (One from the updated blocks before in the free list)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(511*kilo);
f010fc0e:	83 ec 0c             	sub    $0xc,%esp
f010fc11:	68 00 fc 07 00       	push   $0x7fc00
f010fc16:	e8 bb 25 02 00       	call   f01321d6 <alloc_block_NF>
f010fc1b:	83 c4 10             	add    $0x10,%esp
f010fc1e:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 511*kilo || blockToAlloc->sva != (0x21B400 + 512*kilo))
f010fc21:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fc25:	74 1a                	je     f010fc41 <test_alloc_block_NF+0x599>
f010fc27:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fc2a:	8b 40 0c             	mov    0xc(%eax),%eax
f010fc2d:	3d 00 fc 07 00       	cmp    $0x7fc00,%eax
f010fc32:	75 0d                	jne    f010fc41 <test_alloc_block_NF+0x599>
f010fc34:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fc37:	8b 40 08             	mov    0x8(%eax),%eax
f010fc3a:	3d 00 b4 29 00       	cmp    $0x29b400,%eax
f010fc3f:	74 17                	je     f010fc58 <test_alloc_block_NF+0x5b0>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010fc41:	83 ec 04             	sub    $0x4,%esp
f010fc44:	68 00 84 13 f0       	push   $0xf0138400
f010fc49:	68 2f 02 00 00       	push   $0x22f
f010fc4e:	68 f4 79 13 f0       	push   $0xf01379f4
f010fc53:	e8 ad 05 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fc58:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f010fc5d:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010fc60:	83 ea 02             	sub    $0x2,%edx
f010fc63:	39 d0                	cmp    %edx,%eax
f010fc65:	75 13                	jne    f010fc7a <test_alloc_block_NF+0x5d2>
f010fc67:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f010fc6c:	83 f8 06             	cmp    $0x6,%eax
f010fc6f:	75 09                	jne    f010fc7a <test_alloc_block_NF+0x5d2>
f010fc71:	a1 d4 5c 87 f0       	mov    0xf0875cd4,%eax
f010fc76:	85 c0                	test   %eax,%eax
f010fc78:	74 17                	je     f010fc91 <test_alloc_block_NF+0x5e9>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fc7a:	83 ec 04             	sub    $0x4,%esp
f010fc7d:	68 44 84 13 f0       	push   $0xf0138444
f010fc82:	68 33 02 00 00       	push   $0x233
f010fc87:	68 f4 79 13 f0       	push   $0xf01379f4
f010fc8c:	e8 74 05 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010fc91:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010fc98:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010fc9b:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo + (511*kilo);
f010fca2:	c7 45 cc 00 b0 31 00 	movl   $0x31b000,-0x34(%ebp)
	BlocksSizes[6] = 1*kilo;
f010fca9:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fcb0:	83 ec 0c             	sub    $0xc,%esp
f010fcb3:	ff 75 d8             	pushl  -0x28(%ebp)
f010fcb6:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010fcbc:	50                   	push   %eax
f010fcbd:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fcc0:	50                   	push   %eax
f010fcc1:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010fcc4:	50                   	push   %eax
f010fcc5:	68 64 5d 87 f0       	push   $0xf0875d64
f010fcca:	e8 4b 0e 00 00       	call   f0110b1a <check_list_data>
f010fccf:	83 c4 20             	add    $0x20,%esp
f010fcd2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010fcd5:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fcd9:	74 17                	je     f010fcf2 <test_alloc_block_NF+0x64a>
f010fcdb:	83 ec 04             	sub    $0x4,%esp
f010fcde:	68 a8 84 13 f0       	push   $0xf01384a8
f010fce3:	68 3b 02 00 00       	push   $0x23b
f010fce8:	68 f4 79 13 f0       	push   $0xf01379f4
f010fced:	e8 13 05 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010fcf2:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010fcf8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fcfb:	74 17                	je     f010fd14 <test_alloc_block_NF+0x66c>
f010fcfd:	83 ec 04             	sub    $0x4,%esp
f010fd00:	68 f4 84 13 f0       	push   $0xf01384f4
f010fd05:	68 3c 02 00 00       	push   $0x23c
f010fd0a:	68 f4 79 13 f0       	push   $0xf01379f4
f010fd0f:	e8 f1 04 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 6: Try to allocate a block with a size smaller than ALL the NEXT existing blocks .. Shall start search from the start of the list*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(3*kilo);
f010fd14:	83 ec 0c             	sub    $0xc,%esp
f010fd17:	68 00 0c 00 00       	push   $0xc00
f010fd1c:	e8 b5 24 02 00       	call   f01321d6 <alloc_block_NF>
f010fd21:	83 c4 10             	add    $0x10,%esp
f010fd24:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x0)
f010fd27:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fd2b:	74 17                	je     f010fd44 <test_alloc_block_NF+0x69c>
f010fd2d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fd30:	8b 40 0c             	mov    0xc(%eax),%eax
f010fd33:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010fd38:	75 0a                	jne    f010fd44 <test_alloc_block_NF+0x69c>
f010fd3a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fd3d:	8b 40 08             	mov    0x8(%eax),%eax
f010fd40:	85 c0                	test   %eax,%eax
f010fd42:	74 17                	je     f010fd5b <test_alloc_block_NF+0x6b3>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010fd44:	83 ec 04             	sub    $0x4,%esp
f010fd47:	68 00 84 13 f0       	push   $0xf0138400
f010fd4c:	68 45 02 00 00       	push   $0x245
f010fd51:	68 f4 79 13 f0       	push   $0xf01379f4
f010fd56:	e8 aa 04 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fd5b:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f010fd60:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010fd63:	83 ea 02             	sub    $0x2,%edx
f010fd66:	39 d0                	cmp    %edx,%eax
f010fd68:	75 13                	jne    f010fd7d <test_alloc_block_NF+0x6d5>
f010fd6a:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f010fd6f:	83 f8 05             	cmp    $0x5,%eax
f010fd72:	75 09                	jne    f010fd7d <test_alloc_block_NF+0x6d5>
f010fd74:	a1 d4 5c 87 f0       	mov    0xf0875cd4,%eax
f010fd79:	85 c0                	test   %eax,%eax
f010fd7b:	74 17                	je     f010fd94 <test_alloc_block_NF+0x6ec>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fd7d:	83 ec 04             	sub    $0x4,%esp
f010fd80:	68 44 84 13 f0       	push   $0xf0138444
f010fd85:	68 49 02 00 00       	push   $0x249
f010fd8a:	68 f4 79 13 f0       	push   $0xf01379f4
f010fd8f:	e8 71 04 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010fd94:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010fd9b:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f010fd9e:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0;
f010fda5:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	BlocksSizes[0] = 0;
f010fdac:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fdb3:	83 ec 0c             	sub    $0xc,%esp
f010fdb6:	ff 75 d8             	pushl  -0x28(%ebp)
f010fdb9:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010fdbf:	50                   	push   %eax
f010fdc0:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fdc3:	50                   	push   %eax
f010fdc4:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010fdc7:	50                   	push   %eax
f010fdc8:	68 64 5d 87 f0       	push   $0xf0875d64
f010fdcd:	e8 48 0d 00 00       	call   f0110b1a <check_list_data>
f010fdd2:	83 c4 20             	add    $0x20,%esp
f010fdd5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010fdd8:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fddc:	74 17                	je     f010fdf5 <test_alloc_block_NF+0x74d>
f010fdde:	83 ec 04             	sub    $0x4,%esp
f010fde1:	68 a8 84 13 f0       	push   $0xf01384a8
f010fde6:	68 51 02 00 00       	push   $0x251
f010fdeb:	68 f4 79 13 f0       	push   $0xf01379f4
f010fdf0:	e8 10 04 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010fdf5:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010fdfb:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fdfe:	74 17                	je     f010fe17 <test_alloc_block_NF+0x76f>
f010fe00:	83 ec 04             	sub    $0x4,%esp
f010fe03:	68 f4 84 13 f0       	push   $0xf01384f4
f010fe08:	68 52 02 00 00       	push   $0x252
f010fe0d:	68 f4 79 13 f0       	push   $0xf01379f4
f010fe12:	e8 ee 03 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 7: Try to allocate a block with a size smaller than the existing blocks .. To try to update head not to remove it*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(1*kilo);
f010fe17:	83 ec 0c             	sub    $0xc,%esp
f010fe1a:	68 00 04 00 00       	push   $0x400
f010fe1f:	e8 b2 23 02 00       	call   f01321d6 <alloc_block_NF>
f010fe24:	83 c4 10             	add    $0x10,%esp
f010fe27:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*kilo || blockToAlloc->sva != 0x2000)
f010fe2a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fe2e:	74 1a                	je     f010fe4a <test_alloc_block_NF+0x7a2>
f010fe30:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fe33:	8b 40 0c             	mov    0xc(%eax),%eax
f010fe36:	3d 00 04 00 00       	cmp    $0x400,%eax
f010fe3b:	75 0d                	jne    f010fe4a <test_alloc_block_NF+0x7a2>
f010fe3d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fe40:	8b 40 08             	mov    0x8(%eax),%eax
f010fe43:	3d 00 20 00 00       	cmp    $0x2000,%eax
f010fe48:	74 17                	je     f010fe61 <test_alloc_block_NF+0x7b9>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010fe4a:	83 ec 04             	sub    $0x4,%esp
f010fe4d:	68 00 84 13 f0       	push   $0xf0138400
f010fe52:	68 5b 02 00 00       	push   $0x25b
f010fe57:	68 f4 79 13 f0       	push   $0xf01379f4
f010fe5c:	e8 a4 03 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-3 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fe61:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f010fe66:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010fe69:	83 ea 03             	sub    $0x3,%edx
f010fe6c:	39 d0                	cmp    %edx,%eax
f010fe6e:	75 13                	jne    f010fe83 <test_alloc_block_NF+0x7db>
f010fe70:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f010fe75:	83 f8 05             	cmp    $0x5,%eax
f010fe78:	75 09                	jne    f010fe83 <test_alloc_block_NF+0x7db>
f010fe7a:	a1 d4 5c 87 f0       	mov    0xf0875cd4,%eax
f010fe7f:	85 c0                	test   %eax,%eax
f010fe81:	74 17                	je     f010fe9a <test_alloc_block_NF+0x7f2>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fe83:	83 ec 04             	sub    $0x4,%esp
f010fe86:	68 44 84 13 f0       	push   $0xf0138444
f010fe8b:	68 5f 02 00 00       	push   $0x25f
f010fe90:	68 f4 79 13 f0       	push   $0xf01379f4
f010fe95:	e8 6b 03 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010fe9a:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010fea1:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f010fea4:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[1] = 0x2000 + 1*kilo;
f010feab:	c7 45 b8 00 24 00 00 	movl   $0x2400,-0x48(%ebp)
	BlocksSizes[1] = 7*kilo;
f010feb2:	c7 45 98 00 1c 00 00 	movl   $0x1c00,-0x68(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010feb9:	83 ec 0c             	sub    $0xc,%esp
f010febc:	ff 75 d8             	pushl  -0x28(%ebp)
f010febf:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010fec5:	50                   	push   %eax
f010fec6:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fec9:	50                   	push   %eax
f010feca:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010fecd:	50                   	push   %eax
f010fece:	68 64 5d 87 f0       	push   $0xf0875d64
f010fed3:	e8 42 0c 00 00       	call   f0110b1a <check_list_data>
f010fed8:	83 c4 20             	add    $0x20,%esp
f010fedb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010fede:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fee2:	74 17                	je     f010fefb <test_alloc_block_NF+0x853>
f010fee4:	83 ec 04             	sub    $0x4,%esp
f010fee7:	68 a8 84 13 f0       	push   $0xf01384a8
f010feec:	68 67 02 00 00       	push   $0x267
f010fef1:	68 f4 79 13 f0       	push   $0xf01379f4
f010fef6:	e8 0a 03 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010fefb:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010ff01:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ff04:	74 17                	je     f010ff1d <test_alloc_block_NF+0x875>
f010ff06:	83 ec 04             	sub    $0x4,%esp
f010ff09:	68 f4 84 13 f0       	push   $0xf01384f4
f010ff0e:	68 68 02 00 00       	push   $0x268
f010ff13:	68 f4 79 13 f0       	push   $0xf01379f4
f010ff18:	e8 e8 02 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_NF completed successfully.\n");
f010ff1d:	83 ec 0c             	sub    $0xc,%esp
f010ff20:	68 40 85 13 f0       	push   $0xf0138540
f010ff25:	e8 e4 0d ff ff       	call   f0100d0e <cprintf>
f010ff2a:	83 c4 10             	add    $0x10,%esp

}
f010ff2d:	90                   	nop
f010ff2e:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010ff31:	5b                   	pop    %ebx
f010ff32:	5e                   	pop    %esi
f010ff33:	5f                   	pop    %edi
f010ff34:	5d                   	pop    %ebp
f010ff35:	c3                   	ret    

f010ff36 <test_insert_sorted_with_merge_freeList>:

void test_insert_sorted_with_merge_freeList()
{
f010ff36:	55                   	push   %ebp
f010ff37:	89 e5                	mov    %esp,%ebp
f010ff39:	57                   	push   %edi
f010ff3a:	81 ec 04 01 00 00    	sub    $0x104,%esp
	uint32 numOfBlocks = 10;
f010ff40:	c7 45 f4 0a 00 00 00 	movl   $0xa,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010ff47:	83 ec 0c             	sub    $0xc,%esp
f010ff4a:	ff 75 f4             	pushl  -0xc(%ebp)
f010ff4d:	e8 e4 1a 02 00       	call   f0131a36 <initialize_MemBlocksList>
f010ff52:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010ff55:	c7 05 c8 5c 87 f0 00 	movl   $0x0,0xf0875cc8
f010ff5c:	00 00 00 
f010ff5f:	c7 05 cc 5c 87 f0 00 	movl   $0x0,0xf0875ccc
f010ff66:	00 00 00 
f010ff69:	c7 05 d4 5c 87 f0 00 	movl   $0x0,0xf0875cd4
f010ff70:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010ff73:	c7 05 64 5d 87 f0 00 	movl   $0x0,0xf0875d64
f010ff7a:	00 00 00 
f010ff7d:	c7 05 68 5d 87 f0 00 	movl   $0x0,0xf0875d68
f010ff84:	00 00 00 
f010ff87:	c7 05 70 5d 87 f0 00 	movl   $0x0,0xf0875d70
f010ff8e:	00 00 00 

	uint32 blocksToInsertSVAs[10]={0,0,0,0,0,0,0,0,0,0};
f010ff91:	8d 55 c0             	lea    -0x40(%ebp),%edx
f010ff94:	b9 0a 00 00 00       	mov    $0xa,%ecx
f010ff99:	b8 00 00 00 00       	mov    $0x0,%eax
f010ff9e:	89 d7                	mov    %edx,%edi
f010ffa0:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[10]={0,0,0,0,0,0,0,0,0,0};
f010ffa2:	8d 55 98             	lea    -0x68(%ebp),%edx
f010ffa5:	b9 0a 00 00 00       	mov    $0xa,%ecx
f010ffaa:	b8 00 00 00 00       	mov    $0x0,%eax
f010ffaf:	89 d7                	mov    %edx,%edi
f010ffb1:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f010ffb3:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	uint32 actualSize = 0;
f010ffba:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	/*INSERT_SORTED_WITH MERGE Scenario 1: CASE 0 - Insert BLOCK_1 in the empty FreeMemBlocksList*/
	int idx_blocksToInsert = 3;
f010ffc1:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo;
f010ffc8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ffcb:	c7 44 85 c0 00 20 00 	movl   $0x2000,-0x40(%ebp,%eax,4)
f010ffd2:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f010ffd3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ffd6:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f010ffdd:	00 
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010ffde:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ffe1:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010ffe5:	89 45 8c             	mov    %eax,-0x74(%ebp)
	blockToInsert1.size = blocksToInsertSizes[idx_blocksToInsert];
f010ffe8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ffeb:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010ffef:	89 45 90             	mov    %eax,-0x70(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert1);
f010fff2:	83 ec 0c             	sub    $0xc,%esp
f010fff5:	8d 45 84             	lea    -0x7c(%ebp),%eax
f010fff8:	50                   	push   %eax
f010fff9:	e8 a5 27 02 00       	call   f01327a3 <insert_sorted_with_merge_freeList>
f010fffe:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 1)
f0110001:	a1 d4 5c 87 f0       	mov    0xf0875cd4,%eax
f0110006:	85 c0                	test   %eax,%eax
f0110008:	75 14                	jne    f011001e <test_insert_sorted_with_merge_freeList+0xe8>
f011000a:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f011000f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110012:	75 0a                	jne    f011001e <test_insert_sorted_with_merge_freeList+0xe8>
f0110014:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f0110019:	83 f8 01             	cmp    $0x1,%eax
f011001c:	74 17                	je     f0110035 <test_insert_sorted_with_merge_freeList+0xff>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f011001e:	83 ec 04             	sub    $0x4,%esp
f0110021:	68 a0 85 13 f0       	push   $0xf01385a0
f0110026:	68 88 02 00 00       	push   $0x288
f011002b:	68 f4 79 13 f0       	push   $0xf01379f4
f0110030:	e8 d0 01 ff ff       	call   f0100205 <_panic>

	//Check 2: Check the free list content
	size = 0;
f0110035:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 1;
f011003c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110043:	83 ec 0c             	sub    $0xc,%esp
f0110046:	ff 75 f0             	pushl  -0x10(%ebp)
f0110049:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011004c:	50                   	push   %eax
f011004d:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110050:	50                   	push   %eax
f0110051:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110054:	50                   	push   %eax
f0110055:	68 64 5d 87 f0       	push   $0xf0875d64
f011005a:	e8 bb 0a 00 00       	call   f0110b1a <check_list_data>
f011005f:	83 c4 20             	add    $0x20,%esp
f0110062:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110065:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110069:	74 17                	je     f0110082 <test_insert_sorted_with_merge_freeList+0x14c>
f011006b:	83 ec 04             	sub    $0x4,%esp
f011006e:	68 0c 86 13 f0       	push   $0xf013860c
f0110073:	68 8e 02 00 00       	push   $0x28e
f0110078:	68 f4 79 13 f0       	push   $0xf01379f4
f011007d:	e8 83 01 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110082:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110085:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110088:	74 17                	je     f01100a1 <test_insert_sorted_with_merge_freeList+0x16b>
f011008a:	83 ec 04             	sub    $0x4,%esp
f011008d:	68 60 86 13 f0       	push   $0xf0138660
f0110092:	68 8f 02 00 00       	push   $0x28f
f0110097:	68 f4 79 13 f0       	push   $0xf01379f4
f011009c:	e8 64 01 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 2: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE TAIL)*/
	idx_blocksToInsert = 7;
f01100a1:	c7 45 ec 07 00 00 00 	movl   $0x7,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo;
f01100a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01100ab:	c7 44 85 c0 00 80 00 	movl   $0x8000,-0x40(%ebp,%eax,4)
f01100b2:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 7*kilo;
f01100b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01100b6:	c7 44 85 98 00 1c 00 	movl   $0x1c00,-0x68(%ebp,%eax,4)
f01100bd:	00 
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[idx_blocksToInsert];
f01100be:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01100c1:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01100c5:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	blockToInsert2.size = blocksToInsertSizes[idx_blocksToInsert];
f01100cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01100ce:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01100d2:	89 45 80             	mov    %eax,-0x80(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert2);
f01100d5:	83 ec 0c             	sub    $0xc,%esp
f01100d8:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f01100de:	50                   	push   %eax
f01100df:	e8 bf 26 02 00       	call   f01327a3 <insert_sorted_with_merge_freeList>
f01100e4:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 2)
f01100e7:	a1 d4 5c 87 f0       	mov    0xf0875cd4,%eax
f01100ec:	85 c0                	test   %eax,%eax
f01100ee:	75 14                	jne    f0110104 <test_insert_sorted_with_merge_freeList+0x1ce>
f01100f0:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f01100f5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01100f8:	75 0a                	jne    f0110104 <test_insert_sorted_with_merge_freeList+0x1ce>
f01100fa:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f01100ff:	83 f8 02             	cmp    $0x2,%eax
f0110102:	74 17                	je     f011011b <test_insert_sorted_with_merge_freeList+0x1e5>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110104:	83 ec 04             	sub    $0x4,%esp
f0110107:	68 a0 85 13 f0       	push   $0xf01385a0
f011010c:	68 9e 02 00 00       	push   $0x29e
f0110111:	68 f4 79 13 f0       	push   $0xf01379f4
f0110116:	e8 ea 00 ff ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f011011b:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 2;
f0110122:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110129:	83 ec 0c             	sub    $0xc,%esp
f011012c:	ff 75 f0             	pushl  -0x10(%ebp)
f011012f:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110132:	50                   	push   %eax
f0110133:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110136:	50                   	push   %eax
f0110137:	8d 45 c0             	lea    -0x40(%ebp),%eax
f011013a:	50                   	push   %eax
f011013b:	68 64 5d 87 f0       	push   $0xf0875d64
f0110140:	e8 d5 09 00 00       	call   f0110b1a <check_list_data>
f0110145:	83 c4 20             	add    $0x20,%esp
f0110148:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f011014b:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011014f:	74 17                	je     f0110168 <test_insert_sorted_with_merge_freeList+0x232>
f0110151:	83 ec 04             	sub    $0x4,%esp
f0110154:	68 0c 86 13 f0       	push   $0xf013860c
f0110159:	68 a4 02 00 00       	push   $0x2a4
f011015e:	68 f4 79 13 f0       	push   $0xf01379f4
f0110163:	e8 9d 00 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110168:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011016b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011016e:	74 17                	je     f0110187 <test_insert_sorted_with_merge_freeList+0x251>
f0110170:	83 ec 04             	sub    $0x4,%esp
f0110173:	68 60 86 13 f0       	push   $0xf0138660
f0110178:	68 a5 02 00 00       	push   $0x2a5
f011017d:	68 f4 79 13 f0       	push   $0xf01379f4
f0110182:	e8 7e 00 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 3: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE HEAD)*/
	idx_blocksToInsert = 1;
f0110187:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 1*kilo;
f011018e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110191:	c7 44 85 c0 00 04 00 	movl   $0x400,-0x40(%ebp,%eax,4)
f0110198:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f0110199:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011019c:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f01101a3:	00 
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[idx_blocksToInsert];
f01101a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01101a7:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01101ab:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
	blockToInsert3.size = blocksToInsertSizes[idx_blocksToInsert];
f01101b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01101b4:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01101b8:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert3);
f01101be:	83 ec 0c             	sub    $0xc,%esp
f01101c1:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
f01101c7:	50                   	push   %eax
f01101c8:	e8 d6 25 02 00       	call   f01327a3 <insert_sorted_with_merge_freeList>
f01101cd:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f01101d0:	a1 d4 5c 87 f0       	mov    0xf0875cd4,%eax
f01101d5:	85 c0                	test   %eax,%eax
f01101d7:	75 14                	jne    f01101ed <test_insert_sorted_with_merge_freeList+0x2b7>
f01101d9:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f01101de:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01101e1:	75 0a                	jne    f01101ed <test_insert_sorted_with_merge_freeList+0x2b7>
f01101e3:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f01101e8:	83 f8 03             	cmp    $0x3,%eax
f01101eb:	74 17                	je     f0110204 <test_insert_sorted_with_merge_freeList+0x2ce>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01101ed:	83 ec 04             	sub    $0x4,%esp
f01101f0:	68 a0 85 13 f0       	push   $0xf01385a0
f01101f5:	68 b4 02 00 00       	push   $0x2b4
f01101fa:	68 f4 79 13 f0       	push   $0xf01379f4
f01101ff:	e8 01 00 ff ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110204:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f011020b:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110212:	83 ec 0c             	sub    $0xc,%esp
f0110215:	ff 75 f0             	pushl  -0x10(%ebp)
f0110218:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011021b:	50                   	push   %eax
f011021c:	8d 45 98             	lea    -0x68(%ebp),%eax
f011021f:	50                   	push   %eax
f0110220:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110223:	50                   	push   %eax
f0110224:	68 64 5d 87 f0       	push   $0xf0875d64
f0110229:	e8 ec 08 00 00       	call   f0110b1a <check_list_data>
f011022e:	83 c4 20             	add    $0x20,%esp
f0110231:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110234:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110238:	74 17                	je     f0110251 <test_insert_sorted_with_merge_freeList+0x31b>
f011023a:	83 ec 04             	sub    $0x4,%esp
f011023d:	68 0c 86 13 f0       	push   $0xf013860c
f0110242:	68 ba 02 00 00       	push   $0x2ba
f0110247:	68 f4 79 13 f0       	push   $0xf01379f4
f011024c:	e8 b4 ff fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110251:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110254:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110257:	74 17                	je     f0110270 <test_insert_sorted_with_merge_freeList+0x33a>
f0110259:	83 ec 04             	sub    $0x4,%esp
f011025c:	68 60 86 13 f0       	push   $0xf0138660
f0110261:	68 bb 02 00 00       	push   $0x2bb
f0110266:	68 f4 79 13 f0       	push   $0xf01379f4
f011026b:	e8 95 ff fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 4: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 6;
f0110270:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 10*kilo;
f0110277:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011027a:	c7 44 85 c0 00 58 00 	movl   $0x5800,-0x40(%ebp,%eax,4)
f0110281:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f0110282:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110285:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f011028c:	00 
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[idx_blocksToInsert];
f011028d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110290:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110294:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
	blockToInsert4.size = blocksToInsertSizes[idx_blocksToInsert];
f011029a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011029d:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01102a1:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert4);
f01102a7:	83 ec 0c             	sub    $0xc,%esp
f01102aa:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f01102b0:	50                   	push   %eax
f01102b1:	e8 ed 24 02 00       	call   f01327a3 <insert_sorted_with_merge_freeList>
f01102b6:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f01102b9:	a1 d4 5c 87 f0       	mov    0xf0875cd4,%eax
f01102be:	85 c0                	test   %eax,%eax
f01102c0:	75 14                	jne    f01102d6 <test_insert_sorted_with_merge_freeList+0x3a0>
f01102c2:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f01102c7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01102ca:	75 0a                	jne    f01102d6 <test_insert_sorted_with_merge_freeList+0x3a0>
f01102cc:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f01102d1:	83 f8 04             	cmp    $0x4,%eax
f01102d4:	74 17                	je     f01102ed <test_insert_sorted_with_merge_freeList+0x3b7>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01102d6:	83 ec 04             	sub    $0x4,%esp
f01102d9:	68 a0 85 13 f0       	push   $0xf01385a0
f01102de:	68 ca 02 00 00       	push   $0x2ca
f01102e3:	68 f4 79 13 f0       	push   $0xf01379f4
f01102e8:	e8 18 ff fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f01102ed:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f01102f4:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f01102fb:	83 ec 0c             	sub    $0xc,%esp
f01102fe:	ff 75 f0             	pushl  -0x10(%ebp)
f0110301:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110304:	50                   	push   %eax
f0110305:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110308:	50                   	push   %eax
f0110309:	8d 45 c0             	lea    -0x40(%ebp),%eax
f011030c:	50                   	push   %eax
f011030d:	68 64 5d 87 f0       	push   $0xf0875d64
f0110312:	e8 03 08 00 00       	call   f0110b1a <check_list_data>
f0110317:	83 c4 20             	add    $0x20,%esp
f011031a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f011031d:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110321:	74 17                	je     f011033a <test_insert_sorted_with_merge_freeList+0x404>
f0110323:	83 ec 04             	sub    $0x4,%esp
f0110326:	68 0c 86 13 f0       	push   $0xf013860c
f011032b:	68 d0 02 00 00       	push   $0x2d0
f0110330:	68 f4 79 13 f0       	push   $0xf01379f4
f0110335:	e8 cb fe fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f011033a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011033d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110340:	74 17                	je     f0110359 <test_insert_sorted_with_merge_freeList+0x423>
f0110342:	83 ec 04             	sub    $0x4,%esp
f0110345:	68 60 86 13 f0       	push   $0xf0138660
f011034a:	68 d1 02 00 00       	push   $0x2d1
f011034f:	68 f4 79 13 f0       	push   $0xf01379f4
f0110354:	e8 ac fe fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 5: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (AT the tail)*/
	idx_blocksToInsert = 8;
f0110359:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo + 7*kilo;
f0110360:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110363:	c7 44 85 c0 00 9c 00 	movl   $0x9c00,-0x40(%ebp,%eax,4)
f011036a:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 3*kilo;
f011036b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011036e:	c7 44 85 98 00 0c 00 	movl   $0xc00,-0x68(%ebp,%eax,4)
f0110375:	00 
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110376:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110379:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f011037d:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
	blockToInsert5.size = blocksToInsertSizes[idx_blocksToInsert];
f0110383:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110386:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011038a:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert5);
f0110390:	83 ec 0c             	sub    $0xc,%esp
f0110393:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
f0110399:	50                   	push   %eax
f011039a:	e8 04 24 02 00       	call   f01327a3 <insert_sorted_with_merge_freeList>
f011039f:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 1 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f01103a2:	a1 d4 5c 87 f0       	mov    0xf0875cd4,%eax
f01103a7:	85 c0                	test   %eax,%eax
f01103a9:	75 17                	jne    f01103c2 <test_insert_sorted_with_merge_freeList+0x48c>
f01103ab:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f01103b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01103b3:	42                   	inc    %edx
f01103b4:	39 d0                	cmp    %edx,%eax
f01103b6:	75 0a                	jne    f01103c2 <test_insert_sorted_with_merge_freeList+0x48c>
f01103b8:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f01103bd:	83 f8 04             	cmp    $0x4,%eax
f01103c0:	74 17                	je     f01103d9 <test_insert_sorted_with_merge_freeList+0x4a3>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01103c2:	83 ec 04             	sub    $0x4,%esp
f01103c5:	68 a0 85 13 f0       	push   $0xf01385a0
f01103ca:	68 e3 02 00 00       	push   $0x2e3
f01103cf:	68 f4 79 13 f0       	push   $0xf01379f4
f01103d4:	e8 2c fe fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f01103d9:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f01103e0:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f01103e7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01103ea:	8d 50 ff             	lea    -0x1(%eax),%edx
f01103ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01103f0:	48                   	dec    %eax
f01103f1:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f01103f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01103f8:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01103fc:	01 c8                	add    %ecx,%eax
f01103fe:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110402:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110405:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f011040c:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f011040d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110410:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110417:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110418:	83 ec 0c             	sub    $0xc,%esp
f011041b:	ff 75 f0             	pushl  -0x10(%ebp)
f011041e:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110421:	50                   	push   %eax
f0110422:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110425:	50                   	push   %eax
f0110426:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110429:	50                   	push   %eax
f011042a:	68 64 5d 87 f0       	push   $0xf0875d64
f011042f:	e8 e6 06 00 00       	call   f0110b1a <check_list_data>
f0110434:	83 c4 20             	add    $0x20,%esp
f0110437:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f011043a:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011043e:	74 17                	je     f0110457 <test_insert_sorted_with_merge_freeList+0x521>
f0110440:	83 ec 04             	sub    $0x4,%esp
f0110443:	68 0c 86 13 f0       	push   $0xf013860c
f0110448:	68 ec 02 00 00       	push   $0x2ec
f011044d:	68 f4 79 13 f0       	push   $0xf01379f4
f0110452:	e8 ae fd fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110457:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011045a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011045d:	74 17                	je     f0110476 <test_insert_sorted_with_merge_freeList+0x540>
f011045f:	83 ec 04             	sub    $0x4,%esp
f0110462:	68 60 86 13 f0       	push   $0xf0138660
f0110467:	68 ed 02 00 00       	push   $0x2ed
f011046c:	68 f4 79 13 f0       	push   $0xf01379f4
f0110471:	e8 8f fd fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110476:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f011047d:	83 ec 0c             	sub    $0xc,%esp
f0110480:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110483:	50                   	push   %eax
f0110484:	e8 5d 07 00 00       	call   f0110be6 <check_avaliable_list_data>
f0110489:	83 c4 10             	add    $0x10,%esp
f011048c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f011048f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110492:	8d 50 01             	lea    0x1(%eax),%edx
f0110495:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110498:	39 c2                	cmp    %eax,%edx
f011049a:	74 17                	je     f01104b3 <test_insert_sorted_with_merge_freeList+0x57d>
f011049c:	83 ec 04             	sub    $0x4,%esp
f011049f:	68 b4 86 13 f0       	push   $0xf01386b4
f01104a4:	68 f2 02 00 00       	push   $0x2f2
f01104a9:	68 f4 79 13 f0       	push   $0xf01379f4
f01104ae:	e8 52 fd fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f01104b3:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01104b7:	74 17                	je     f01104d0 <test_insert_sorted_with_merge_freeList+0x59a>
f01104b9:	83 ec 04             	sub    $0x4,%esp
f01104bc:	68 0c 87 13 f0       	push   $0xf013870c
f01104c1:	68 f3 02 00 00       	push   $0x2f3
f01104c6:	68 f4 79 13 f0       	push   $0xf01379f4
f01104cb:	e8 35 fd fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 6: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 4;
f01104d0:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo;
f01104d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01104da:	c7 44 85 c0 00 30 00 	movl   $0x3000,-0x40(%ebp,%eax,4)
f01104e1:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f01104e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01104e5:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f01104ec:	00 
	struct MemBlock blockToInsert6;
	blockToInsert6.sva = blocksToInsertSVAs[idx_blocksToInsert];
f01104ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01104f0:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01104f4:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
	blockToInsert6.size = blocksToInsertSizes[idx_blocksToInsert];
f01104fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01104fd:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110501:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert6);
f0110507:	83 ec 0c             	sub    $0xc,%esp
f011050a:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0110510:	50                   	push   %eax
f0110511:	e8 8d 22 02 00       	call   f01327a3 <insert_sorted_with_merge_freeList>
f0110516:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 2 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110519:	a1 d4 5c 87 f0       	mov    0xf0875cd4,%eax
f011051e:	85 c0                	test   %eax,%eax
f0110520:	75 19                	jne    f011053b <test_insert_sorted_with_merge_freeList+0x605>
f0110522:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f0110527:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011052a:	83 c2 02             	add    $0x2,%edx
f011052d:	39 d0                	cmp    %edx,%eax
f011052f:	75 0a                	jne    f011053b <test_insert_sorted_with_merge_freeList+0x605>
f0110531:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f0110536:	83 f8 04             	cmp    $0x4,%eax
f0110539:	74 17                	je     f0110552 <test_insert_sorted_with_merge_freeList+0x61c>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f011053b:	83 ec 04             	sub    $0x4,%esp
f011053e:	68 a0 85 13 f0       	push   $0xf01385a0
f0110543:	68 05 03 00 00       	push   $0x305
f0110548:	68 f4 79 13 f0       	push   $0xf01379f4
f011054d:	e8 b3 fc fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110552:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110559:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f0110560:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110563:	8d 50 ff             	lea    -0x1(%eax),%edx
f0110566:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110569:	48                   	dec    %eax
f011056a:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f011056e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110571:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110575:	01 c8                	add    %ecx,%eax
f0110577:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f011057b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011057e:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110585:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110586:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110589:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110590:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110591:	83 ec 0c             	sub    $0xc,%esp
f0110594:	ff 75 f0             	pushl  -0x10(%ebp)
f0110597:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011059a:	50                   	push   %eax
f011059b:	8d 45 98             	lea    -0x68(%ebp),%eax
f011059e:	50                   	push   %eax
f011059f:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01105a2:	50                   	push   %eax
f01105a3:	68 64 5d 87 f0       	push   $0xf0875d64
f01105a8:	e8 6d 05 00 00       	call   f0110b1a <check_list_data>
f01105ad:	83 c4 20             	add    $0x20,%esp
f01105b0:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f01105b3:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01105b7:	74 17                	je     f01105d0 <test_insert_sorted_with_merge_freeList+0x69a>
f01105b9:	83 ec 04             	sub    $0x4,%esp
f01105bc:	68 0c 86 13 f0       	push   $0xf013860c
f01105c1:	68 0e 03 00 00       	push   $0x30e
f01105c6:	68 f4 79 13 f0       	push   $0xf01379f4
f01105cb:	e8 35 fc fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f01105d0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01105d3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01105d6:	74 17                	je     f01105ef <test_insert_sorted_with_merge_freeList+0x6b9>
f01105d8:	83 ec 04             	sub    $0x4,%esp
f01105db:	68 60 86 13 f0       	push   $0xf0138660
f01105e0:	68 0f 03 00 00       	push   $0x30f
f01105e5:	68 f4 79 13 f0       	push   $0xf01379f4
f01105ea:	e8 16 fc fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f01105ef:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f01105f6:	83 ec 0c             	sub    $0xc,%esp
f01105f9:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01105fc:	50                   	push   %eax
f01105fd:	e8 e4 05 00 00       	call   f0110be6 <check_avaliable_list_data>
f0110602:	83 c4 10             	add    $0x10,%esp
f0110605:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 2) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110608:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011060b:	8d 50 02             	lea    0x2(%eax),%edx
f011060e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110611:	39 c2                	cmp    %eax,%edx
f0110613:	74 17                	je     f011062c <test_insert_sorted_with_merge_freeList+0x6f6>
f0110615:	83 ec 04             	sub    $0x4,%esp
f0110618:	68 b4 86 13 f0       	push   $0xf01386b4
f011061d:	68 14 03 00 00       	push   $0x314
f0110622:	68 f4 79 13 f0       	push   $0xf01379f4
f0110627:	e8 d9 fb fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f011062c:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110630:	74 17                	je     f0110649 <test_insert_sorted_with_merge_freeList+0x713>
f0110632:	83 ec 04             	sub    $0x4,%esp
f0110635:	68 0c 87 13 f0       	push   $0xf013870c
f011063a:	68 15 03 00 00       	push   $0x315
f011063f:	68 f4 79 13 f0       	push   $0xf01379f4
f0110644:	e8 bc fb fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 7: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (AT the head)*/
	idx_blocksToInsert = 0;
f0110649:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110650:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110653:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f011065a:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f011065b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011065e:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f0110665:	00 
	struct MemBlock blockToInsert7;
	blockToInsert7.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110666:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110669:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f011066d:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
	blockToInsert7.size = blocksToInsertSizes[idx_blocksToInsert];
f0110673:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110676:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011067a:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert7);
f0110680:	83 ec 0c             	sub    $0xc,%esp
f0110683:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0110689:	50                   	push   %eax
f011068a:	e8 14 21 02 00       	call   f01327a3 <insert_sorted_with_merge_freeList>
f011068f:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 3 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110692:	a1 d4 5c 87 f0       	mov    0xf0875cd4,%eax
f0110697:	85 c0                	test   %eax,%eax
f0110699:	75 19                	jne    f01106b4 <test_insert_sorted_with_merge_freeList+0x77e>
f011069b:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f01106a0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01106a3:	83 c2 03             	add    $0x3,%edx
f01106a6:	39 d0                	cmp    %edx,%eax
f01106a8:	75 0a                	jne    f01106b4 <test_insert_sorted_with_merge_freeList+0x77e>
f01106aa:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f01106af:	83 f8 04             	cmp    $0x4,%eax
f01106b2:	74 17                	je     f01106cb <test_insert_sorted_with_merge_freeList+0x795>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01106b4:	83 ec 04             	sub    $0x4,%esp
f01106b7:	68 a0 85 13 f0       	push   $0xf01385a0
f01106bc:	68 28 03 00 00       	push   $0x328
f01106c1:	68 f4 79 13 f0       	push   $0xf01379f4
f01106c6:	e8 3a fb fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f01106cb:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f01106d2:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f01106d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01106dc:	8d 50 01             	lea    0x1(%eax),%edx
f01106df:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01106e2:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01106e6:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f01106ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01106ed:	8d 50 01             	lea    0x1(%eax),%edx
f01106f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01106f3:	40                   	inc    %eax
f01106f4:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f01106f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01106fb:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01106ff:	01 c8                	add    %ecx,%eax
f0110701:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110705:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110708:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f011070f:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110710:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110713:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f011071a:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f011071b:	83 ec 0c             	sub    $0xc,%esp
f011071e:	ff 75 f0             	pushl  -0x10(%ebp)
f0110721:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110724:	50                   	push   %eax
f0110725:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110728:	50                   	push   %eax
f0110729:	8d 45 c0             	lea    -0x40(%ebp),%eax
f011072c:	50                   	push   %eax
f011072d:	68 64 5d 87 f0       	push   $0xf0875d64
f0110732:	e8 e3 03 00 00       	call   f0110b1a <check_list_data>
f0110737:	83 c4 20             	add    $0x20,%esp
f011073a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f011073d:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110741:	74 17                	je     f011075a <test_insert_sorted_with_merge_freeList+0x824>
f0110743:	83 ec 04             	sub    $0x4,%esp
f0110746:	68 0c 86 13 f0       	push   $0xf013860c
f011074b:	68 32 03 00 00       	push   $0x332
f0110750:	68 f4 79 13 f0       	push   $0xf01379f4
f0110755:	e8 ab fa fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f011075a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011075d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110760:	74 17                	je     f0110779 <test_insert_sorted_with_merge_freeList+0x843>
f0110762:	83 ec 04             	sub    $0x4,%esp
f0110765:	68 60 86 13 f0       	push   $0xf0138660
f011076a:	68 33 03 00 00       	push   $0x333
f011076f:	68 f4 79 13 f0       	push   $0xf01379f4
f0110774:	e8 8c fa fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110779:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110780:	83 ec 0c             	sub    $0xc,%esp
f0110783:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110786:	50                   	push   %eax
f0110787:	e8 5a 04 00 00       	call   f0110be6 <check_avaliable_list_data>
f011078c:	83 c4 10             	add    $0x10,%esp
f011078f:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 3) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110792:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110795:	8d 50 03             	lea    0x3(%eax),%edx
f0110798:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011079b:	39 c2                	cmp    %eax,%edx
f011079d:	74 17                	je     f01107b6 <test_insert_sorted_with_merge_freeList+0x880>
f011079f:	83 ec 04             	sub    $0x4,%esp
f01107a2:	68 b4 86 13 f0       	push   $0xf01386b4
f01107a7:	68 38 03 00 00       	push   $0x338
f01107ac:	68 f4 79 13 f0       	push   $0xf01379f4
f01107b1:	e8 4f fa fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f01107b6:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01107ba:	74 17                	je     f01107d3 <test_insert_sorted_with_merge_freeList+0x89d>
f01107bc:	83 ec 04             	sub    $0x4,%esp
f01107bf:	68 0c 87 13 f0       	push   $0xf013870c
f01107c4:	68 39 03 00 00       	push   $0x339
f01107c9:	68 f4 79 13 f0       	push   $0xf01379f4
f01107ce:	e8 32 fa fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 8: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 5;
f01107d3:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = (8*kilo + 4*kilo + 10*kilo) - (4*kilo);
f01107da:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01107dd:	c7 44 85 c0 00 48 00 	movl   $0x4800,-0x40(%ebp,%eax,4)
f01107e4:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f01107e5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01107e8:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f01107ef:	00 
	struct MemBlock blockToInsert8;
	blockToInsert8.sva = blocksToInsertSVAs[idx_blocksToInsert];
f01107f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01107f3:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01107f7:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
	blockToInsert8.size = blocksToInsertSizes[idx_blocksToInsert];
f01107fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110800:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110804:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert8);
f011080a:	83 ec 0c             	sub    $0xc,%esp
f011080d:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f0110813:	50                   	push   %eax
f0110814:	e8 8a 1f 02 00       	call   f01327a3 <insert_sorted_with_merge_freeList>
f0110819:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 4 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f011081c:	a1 d4 5c 87 f0       	mov    0xf0875cd4,%eax
f0110821:	85 c0                	test   %eax,%eax
f0110823:	75 19                	jne    f011083e <test_insert_sorted_with_merge_freeList+0x908>
f0110825:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f011082a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011082d:	83 c2 04             	add    $0x4,%edx
f0110830:	39 d0                	cmp    %edx,%eax
f0110832:	75 0a                	jne    f011083e <test_insert_sorted_with_merge_freeList+0x908>
f0110834:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f0110839:	83 f8 04             	cmp    $0x4,%eax
f011083c:	74 17                	je     f0110855 <test_insert_sorted_with_merge_freeList+0x91f>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f011083e:	83 ec 04             	sub    $0x4,%esp
f0110841:	68 a0 85 13 f0       	push   $0xf01385a0
f0110846:	68 4c 03 00 00       	push   $0x34c
f011084b:	68 f4 79 13 f0       	push   $0xf01379f4
f0110850:	e8 b0 f9 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110855:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f011085c:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f0110863:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110866:	8d 50 01             	lea    0x1(%eax),%edx
f0110869:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011086c:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110870:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f0110874:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110877:	8d 50 01             	lea    0x1(%eax),%edx
f011087a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011087d:	40                   	inc    %eax
f011087e:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110882:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110885:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110889:	01 c8                	add    %ecx,%eax
f011088b:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f011088f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110892:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110899:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f011089a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011089d:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f01108a4:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f01108a5:	83 ec 0c             	sub    $0xc,%esp
f01108a8:	ff 75 f0             	pushl  -0x10(%ebp)
f01108ab:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01108ae:	50                   	push   %eax
f01108af:	8d 45 98             	lea    -0x68(%ebp),%eax
f01108b2:	50                   	push   %eax
f01108b3:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01108b6:	50                   	push   %eax
f01108b7:	68 64 5d 87 f0       	push   $0xf0875d64
f01108bc:	e8 59 02 00 00       	call   f0110b1a <check_list_data>
f01108c1:	83 c4 20             	add    $0x20,%esp
f01108c4:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f01108c7:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01108cb:	74 17                	je     f01108e4 <test_insert_sorted_with_merge_freeList+0x9ae>
f01108cd:	83 ec 04             	sub    $0x4,%esp
f01108d0:	68 0c 86 13 f0       	push   $0xf013860c
f01108d5:	68 56 03 00 00       	push   $0x356
f01108da:	68 f4 79 13 f0       	push   $0xf01379f4
f01108df:	e8 21 f9 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f01108e4:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01108e7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01108ea:	74 17                	je     f0110903 <test_insert_sorted_with_merge_freeList+0x9cd>
f01108ec:	83 ec 04             	sub    $0x4,%esp
f01108ef:	68 60 86 13 f0       	push   $0xf0138660
f01108f4:	68 57 03 00 00       	push   $0x357
f01108f9:	68 f4 79 13 f0       	push   $0xf01379f4
f01108fe:	e8 02 f9 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110903:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f011090a:	83 ec 0c             	sub    $0xc,%esp
f011090d:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110910:	50                   	push   %eax
f0110911:	e8 d0 02 00 00       	call   f0110be6 <check_avaliable_list_data>
f0110916:	83 c4 10             	add    $0x10,%esp
f0110919:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 4) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f011091c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011091f:	8d 50 04             	lea    0x4(%eax),%edx
f0110922:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110925:	39 c2                	cmp    %eax,%edx
f0110927:	74 17                	je     f0110940 <test_insert_sorted_with_merge_freeList+0xa0a>
f0110929:	83 ec 04             	sub    $0x4,%esp
f011092c:	68 b4 86 13 f0       	push   $0xf01386b4
f0110931:	68 5c 03 00 00       	push   $0x35c
f0110936:	68 f4 79 13 f0       	push   $0xf01379f4
f011093b:	e8 c5 f8 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110940:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110944:	74 17                	je     f011095d <test_insert_sorted_with_merge_freeList+0xa27>
f0110946:	83 ec 04             	sub    $0x4,%esp
f0110949:	68 0c 87 13 f0       	push   $0xf013870c
f011094e:	68 5d 03 00 00       	push   $0x35d
f0110953:	68 f4 79 13 f0       	push   $0xf01379f4
f0110958:	e8 a8 f8 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 9: CASE 4 - Merge with prev & next in the FreeMemBlocksList */
	idx_blocksToInsert = 2;
f011095d:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 2*kilo;
f0110964:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110967:	c7 44 85 c0 00 08 00 	movl   $0x800,-0x40(%ebp,%eax,4)
f011096e:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0x2000 - 2*kilo; //6144
f011096f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110972:	c7 44 85 98 00 18 00 	movl   $0x1800,-0x68(%ebp,%eax,4)
f0110979:	00 
	struct MemBlock blockToInsert9;
	blockToInsert9.sva = blocksToInsertSVAs[idx_blocksToInsert];
f011097a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011097d:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110981:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
	blockToInsert9.size = blocksToInsertSizes[idx_blocksToInsert];
f0110987:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011098a:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011098e:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)

	//printf("===>BEFORE\n");
	//show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert9);
f0110994:	83 ec 0c             	sub    $0xc,%esp
f0110997:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011099d:	50                   	push   %eax
f011099e:	e8 00 1e 02 00       	call   f01327a3 <insert_sorted_with_merge_freeList>
f01109a3:	83 c4 10             	add    $0x10,%esp
	//show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 6 || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f01109a6:	a1 d4 5c 87 f0       	mov    0xf0875cd4,%eax
f01109ab:	85 c0                	test   %eax,%eax
f01109ad:	75 19                	jne    f01109c8 <test_insert_sorted_with_merge_freeList+0xa92>
f01109af:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f01109b4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01109b7:	83 c2 06             	add    $0x6,%edx
f01109ba:	39 d0                	cmp    %edx,%eax
f01109bc:	75 0a                	jne    f01109c8 <test_insert_sorted_with_merge_freeList+0xa92>
f01109be:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f01109c3:	83 f8 03             	cmp    $0x3,%eax
f01109c6:	74 17                	je     f01109df <test_insert_sorted_with_merge_freeList+0xaa9>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01109c8:	83 ec 04             	sub    $0x4,%esp
f01109cb:	68 a0 85 13 f0       	push   $0xf01385a0
f01109d0:	68 70 03 00 00       	push   $0x370
f01109d5:	68 f4 79 13 f0       	push   $0xf01379f4
f01109da:	e8 26 f8 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f01109df:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f01109e6:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert-1] = 0x0;
f01109ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01109f0:	48                   	dec    %eax
f01109f1:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f01109f8:	00 
	blocksToInsertSizes[idx_blocksToInsert-1] = blocksToInsertSizes[idx_blocksToInsert-1] + blocksToInsertSizes[idx_blocksToInsert] + blocksToInsertSizes[idx_blocksToInsert+1];
f01109f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01109fc:	8d 50 ff             	lea    -0x1(%eax),%edx
f01109ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110a02:	48                   	dec    %eax
f0110a03:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110a07:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110a0a:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110a0e:	01 c1                	add    %eax,%ecx
f0110a10:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110a13:	40                   	inc    %eax
f0110a14:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110a18:	01 c8                	add    %ecx,%eax
f0110a1a:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110a1e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110a21:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110a28:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110a29:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110a2c:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110a33:	00 
	blocksToInsertSVAs[idx_blocksToInsert+1] = 0x0;
f0110a34:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110a37:	40                   	inc    %eax
f0110a38:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110a3f:	00 
	blocksToInsertSizes[idx_blocksToInsert+1] = 0;
f0110a40:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110a43:	40                   	inc    %eax
f0110a44:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110a4b:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110a4c:	83 ec 0c             	sub    $0xc,%esp
f0110a4f:	ff 75 f0             	pushl  -0x10(%ebp)
f0110a52:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110a55:	50                   	push   %eax
f0110a56:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110a59:	50                   	push   %eax
f0110a5a:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110a5d:	50                   	push   %eax
f0110a5e:	68 64 5d 87 f0       	push   $0xf0875d64
f0110a63:	e8 b2 00 00 00       	call   f0110b1a <check_list_data>
f0110a68:	83 c4 20             	add    $0x20,%esp
f0110a6b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110a6e:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110a72:	74 17                	je     f0110a8b <test_insert_sorted_with_merge_freeList+0xb55>
f0110a74:	83 ec 04             	sub    $0x4,%esp
f0110a77:	68 0c 86 13 f0       	push   $0xf013860c
f0110a7c:	68 7c 03 00 00       	push   $0x37c
f0110a81:	68 f4 79 13 f0       	push   $0xf01379f4
f0110a86:	e8 7a f7 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110a8b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110a8e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110a91:	74 17                	je     f0110aaa <test_insert_sorted_with_merge_freeList+0xb74>
f0110a93:	83 ec 04             	sub    $0x4,%esp
f0110a96:	68 60 86 13 f0       	push   $0xf0138660
f0110a9b:	68 7d 03 00 00       	push   $0x37d
f0110aa0:	68 f4 79 13 f0       	push   $0xf01379f4
f0110aa5:	e8 5b f7 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110aaa:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110ab1:	83 ec 0c             	sub    $0xc,%esp
f0110ab4:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110ab7:	50                   	push   %eax
f0110ab8:	e8 29 01 00 00       	call   f0110be6 <check_avaliable_list_data>
f0110abd:	83 c4 10             	add    $0x10,%esp
f0110ac0:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 6) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110ac3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110ac6:	8d 50 06             	lea    0x6(%eax),%edx
f0110ac9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110acc:	39 c2                	cmp    %eax,%edx
f0110ace:	74 17                	je     f0110ae7 <test_insert_sorted_with_merge_freeList+0xbb1>
f0110ad0:	83 ec 04             	sub    $0x4,%esp
f0110ad3:	68 b4 86 13 f0       	push   $0xf01386b4
f0110ad8:	68 82 03 00 00       	push   $0x382
f0110add:	68 f4 79 13 f0       	push   $0xf01379f4
f0110ae2:	e8 1e f7 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110ae7:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110aeb:	74 17                	je     f0110b04 <test_insert_sorted_with_merge_freeList+0xbce>
f0110aed:	83 ec 04             	sub    $0x4,%esp
f0110af0:	68 0c 87 13 f0       	push   $0xf013870c
f0110af5:	68 83 03 00 00       	push   $0x383
f0110afa:	68 f4 79 13 f0       	push   $0xf01379f4
f0110aff:	e8 01 f7 fe ff       	call   f0100205 <_panic>
	//====================================================================//


	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test insert_sorted_with_merge_freeList completed successfully.\n");
f0110b04:	83 ec 0c             	sub    $0xc,%esp
f0110b07:	68 68 87 13 f0       	push   $0xf0138768
f0110b0c:	e8 fd 01 ff ff       	call   f0100d0e <cprintf>
f0110b11:	83 c4 10             	add    $0x10,%esp

}
f0110b14:	90                   	nop
f0110b15:	8b 7d fc             	mov    -0x4(%ebp),%edi
f0110b18:	c9                   	leave  
f0110b19:	c3                   	ret    

f0110b1a <check_list_data>:

/********************Helper Functions***************************/
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
f0110b1a:	55                   	push   %ebp
f0110b1b:	89 e5                	mov    %esp,%ebp
f0110b1d:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f0110b20:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f0110b27:	8b 45 14             	mov    0x14(%ebp),%eax
f0110b2a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i = 0;
f0110b30:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	LIST_FOREACH(node, list)
f0110b37:	8b 45 08             	mov    0x8(%ebp),%eax
f0110b3a:	8b 00                	mov    (%eax),%eax
f0110b3c:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0110b3f:	eb 6e                	jmp    f0110baf <check_list_data+0x95>
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
			i++;
f0110b41:	ff 45 f8             	incl   -0x8(%ebp)
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
f0110b44:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0110b47:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110b4e:	8b 45 10             	mov    0x10(%ebp),%eax
f0110b51:	01 d0                	add    %edx,%eax
f0110b53:	8b 00                	mov    (%eax),%eax
f0110b55:	85 c0                	test   %eax,%eax
f0110b57:	74 e8                	je     f0110b41 <check_list_data+0x27>
			i++;
		if(node->sva != blocksSVAs[(i)] || node->size != blocksSizes[i])
f0110b59:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110b5c:	8b 50 08             	mov    0x8(%eax),%edx
f0110b5f:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0110b62:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0110b69:	8b 45 0c             	mov    0xc(%ebp),%eax
f0110b6c:	01 c8                	add    %ecx,%eax
f0110b6e:	8b 00                	mov    (%eax),%eax
f0110b70:	39 c2                	cmp    %eax,%edx
f0110b72:	75 1b                	jne    f0110b8f <check_list_data+0x75>
f0110b74:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110b77:	8b 50 0c             	mov    0xc(%eax),%edx
f0110b7a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0110b7d:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0110b84:	8b 45 10             	mov    0x10(%ebp),%eax
f0110b87:	01 c8                	add    %ecx,%eax
f0110b89:	8b 00                	mov    (%eax),%eax
f0110b8b:	39 c2                	cmp    %eax,%edx
f0110b8d:	74 07                	je     f0110b96 <check_list_data+0x7c>
		{
//			cprintf("i = %d .. \n", i);
//			cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
//			cprintf("blocks[i] data: sva = %x, size = %d\n", blocksSVAs[(i)], blocksSizes[i]);
			return 0;
f0110b8f:	b8 00 00 00 00       	mov    $0x0,%eax
f0110b94:	eb 4e                	jmp    f0110be4 <check_list_data+0xca>
		}
		(*size)++;
f0110b96:	8b 45 14             	mov    0x14(%ebp),%eax
f0110b99:	8b 00                	mov    (%eax),%eax
f0110b9b:	8d 50 01             	lea    0x1(%eax),%edx
f0110b9e:	8b 45 14             	mov    0x14(%ebp),%eax
f0110ba1:	89 10                	mov    %edx,(%eax)
		i++;
f0110ba3:	ff 45 f8             	incl   -0x8(%ebp)
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
f0110ba6:	8b 45 08             	mov    0x8(%ebp),%eax
f0110ba9:	8b 40 08             	mov    0x8(%eax),%eax
f0110bac:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0110baf:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0110bb3:	74 07                	je     f0110bbc <check_list_data+0xa2>
f0110bb5:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110bb8:	8b 00                	mov    (%eax),%eax
f0110bba:	eb 05                	jmp    f0110bc1 <check_list_data+0xa7>
f0110bbc:	b8 00 00 00 00       	mov    $0x0,%eax
f0110bc1:	8b 55 08             	mov    0x8(%ebp),%edx
f0110bc4:	89 42 08             	mov    %eax,0x8(%edx)
f0110bc7:	8b 45 08             	mov    0x8(%ebp),%eax
f0110bca:	8b 40 08             	mov    0x8(%eax),%eax
f0110bcd:	85 c0                	test   %eax,%eax
f0110bcf:	0f 85 6f ff ff ff    	jne    f0110b44 <check_list_data+0x2a>
f0110bd5:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0110bd9:	0f 85 65 ff ff ff    	jne    f0110b44 <check_list_data+0x2a>
			return 0;
		}
		(*size)++;
		i++;
	}
	return 1;
f0110bdf:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0110be4:	c9                   	leave  
f0110be5:	c3                   	ret    

f0110be6 <check_avaliable_list_data>:

int check_avaliable_list_data(uint32* size)
{
f0110be6:	55                   	push   %ebp
f0110be7:	89 e5                	mov    %esp,%ebp
f0110be9:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f0110bec:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f0110bf3:	8b 45 08             	mov    0x8(%ebp),%eax
f0110bf6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	LIST_FOREACH(node, &AvailableMemBlocksList)
f0110bfc:	a1 98 5d 87 f0       	mov    0xf0875d98,%eax
f0110c01:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0110c04:	eb 30                	jmp    f0110c36 <check_avaliable_list_data+0x50>
	{
		if(node->sva != 0x0 || node->size != 0)
f0110c06:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110c09:	8b 40 08             	mov    0x8(%eax),%eax
f0110c0c:	85 c0                	test   %eax,%eax
f0110c0e:	75 0a                	jne    f0110c1a <check_avaliable_list_data+0x34>
f0110c10:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110c13:	8b 40 0c             	mov    0xc(%eax),%eax
f0110c16:	85 c0                	test   %eax,%eax
f0110c18:	74 07                	je     f0110c21 <check_avaliable_list_data+0x3b>
		{
			return 0;
f0110c1a:	b8 00 00 00 00       	mov    $0x0,%eax
f0110c1f:	eb 40                	jmp    f0110c61 <check_avaliable_list_data+0x7b>
		}
		(*size)++;
f0110c21:	8b 45 08             	mov    0x8(%ebp),%eax
f0110c24:	8b 00                	mov    (%eax),%eax
f0110c26:	8d 50 01             	lea    0x1(%eax),%edx
f0110c29:	8b 45 08             	mov    0x8(%ebp),%eax
f0110c2c:	89 10                	mov    %edx,(%eax)
int check_avaliable_list_data(uint32* size)
{
	struct MemBlock* node = NULL;
	*size = 0;

	LIST_FOREACH(node, &AvailableMemBlocksList)
f0110c2e:	a1 a0 5d 87 f0       	mov    0xf0875da0,%eax
f0110c33:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0110c36:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0110c3a:	74 07                	je     f0110c43 <check_avaliable_list_data+0x5d>
f0110c3c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110c3f:	8b 00                	mov    (%eax),%eax
f0110c41:	eb 05                	jmp    f0110c48 <check_avaliable_list_data+0x62>
f0110c43:	b8 00 00 00 00       	mov    $0x0,%eax
f0110c48:	a3 a0 5d 87 f0       	mov    %eax,0xf0875da0
f0110c4d:	a1 a0 5d 87 f0       	mov    0xf0875da0,%eax
f0110c52:	85 c0                	test   %eax,%eax
f0110c54:	75 b0                	jne    f0110c06 <check_avaliable_list_data+0x20>
f0110c56:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0110c5a:	75 aa                	jne    f0110c06 <check_avaliable_list_data+0x20>
		{
			return 0;
		}
		(*size)++;
	}
	return 1;
f0110c5c:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0110c61:	c9                   	leave  
f0110c62:	c3                   	ret    

f0110c63 <show_list_content>:


void show_list_content(struct MemBlock_List* list)
{
f0110c63:	55                   	push   %ebp
f0110c64:	89 e5                	mov    %esp,%ebp
f0110c66:	83 ec 18             	sub    $0x18,%esp
	struct MemBlock* node = NULL;
f0110c69:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(node, list)
f0110c70:	8b 45 08             	mov    0x8(%ebp),%eax
f0110c73:	8b 00                	mov    (%eax),%eax
f0110c75:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0110c78:	eb 27                	jmp    f0110ca1 <show_list_content+0x3e>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f0110c7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110c7d:	8b 50 0c             	mov    0xc(%eax),%edx
f0110c80:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110c83:	8b 40 08             	mov    0x8(%eax),%eax
f0110c86:	83 ec 04             	sub    $0x4,%esp
f0110c89:	52                   	push   %edx
f0110c8a:	50                   	push   %eax
f0110c8b:	68 b8 7a 13 f0       	push   $0xf0137ab8
f0110c90:	e8 79 00 ff ff       	call   f0100d0e <cprintf>
f0110c95:	83 c4 10             	add    $0x10,%esp


void show_list_content(struct MemBlock_List* list)
{
	struct MemBlock* node = NULL;
	LIST_FOREACH(node, list)
f0110c98:	8b 45 08             	mov    0x8(%ebp),%eax
f0110c9b:	8b 40 08             	mov    0x8(%eax),%eax
f0110c9e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0110ca1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0110ca5:	74 07                	je     f0110cae <show_list_content+0x4b>
f0110ca7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110caa:	8b 00                	mov    (%eax),%eax
f0110cac:	eb 05                	jmp    f0110cb3 <show_list_content+0x50>
f0110cae:	b8 00 00 00 00       	mov    $0x0,%eax
f0110cb3:	8b 55 08             	mov    0x8(%ebp),%edx
f0110cb6:	89 42 08             	mov    %eax,0x8(%edx)
f0110cb9:	8b 45 08             	mov    0x8(%ebp),%eax
f0110cbc:	8b 40 08             	mov    0x8(%eax),%eax
f0110cbf:	85 c0                	test   %eax,%eax
f0110cc1:	75 b7                	jne    f0110c7a <show_list_content+0x17>
f0110cc3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0110cc7:	75 b1                	jne    f0110c7a <show_list_content+0x17>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
}
f0110cc9:	90                   	nop
f0110cca:	c9                   	leave  
f0110ccb:	c3                   	ret    

f0110ccc <TestAutoCompleteCommand>:
int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc);
int CA(uint32 *ptr_dir, uint32 va);
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which);
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type);
int TestAutoCompleteCommand()
{
f0110ccc:	55                   	push   %ebp
f0110ccd:	89 e5                	mov    %esp,%ebp
f0110ccf:	57                   	push   %edi
f0110cd0:	56                   	push   %esi
f0110cd1:	53                   	push   %ebx
f0110cd2:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	cprintf("Automatic Testing of Autocomplete:\n");
f0110cd8:	83 ec 0c             	sub    $0xc,%esp
f0110cdb:	68 bc 87 13 f0       	push   $0xf01387bc
f0110ce0:	e8 29 00 ff ff       	call   f0100d0e <cprintf>
f0110ce5:	83 c4 10             	add    $0x10,%esp
	cprintf("\n========================\n");
f0110ce8:	83 ec 0c             	sub    $0xc,%esp
f0110ceb:	68 e0 87 13 f0       	push   $0xf01387e0
f0110cf0:	e8 19 00 ff ff       	call   f0100d0e <cprintf>
f0110cf5:	83 c4 10             	add    $0x10,%esp
	//	cprintf("========================\n");
	//	cprintf("Q2 Test: manually try the test cases in the doc. \n..."
	//			"OR, you can do it automatically by un-commenting the code in this function, it should output the same results in the Examples exist in the MS1 ppt\n");
	//
	//	int retValue = 0;
	int i = 0;
f0110cf8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	//CASE1:
	//should execute the kernel_info command
	cprintf("==>Testing now AUTOCOMPLETE for: kernel_info\n");
f0110cff:	83 ec 0c             	sub    $0xc,%esp
f0110d02:	68 fc 87 13 f0       	push   $0xf01387fc
f0110d07:	e8 02 00 ff ff       	call   f0100d0e <cprintf>
f0110d0c:	83 c4 10             	add    $0x10,%esp
	char cr0[100] = "kernel_info";
f0110d0f:	8d 45 80             	lea    -0x80(%ebp),%eax
f0110d12:	bb b6 88 13 f0       	mov    $0xf01388b6,%ebx
f0110d17:	ba 03 00 00 00       	mov    $0x3,%edx
f0110d1c:	89 c7                	mov    %eax,%edi
f0110d1e:	89 de                	mov    %ebx,%esi
f0110d20:	89 d1                	mov    %edx,%ecx
f0110d22:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0110d24:	8d 55 8c             	lea    -0x74(%ebp),%edx
f0110d27:	b9 16 00 00 00       	mov    $0x16,%ecx
f0110d2c:	b8 00 00 00 00       	mov    $0x0,%eax
f0110d31:	89 d7                	mov    %edx,%edi
f0110d33:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr0) ;
f0110d35:	83 ec 0c             	sub    $0xc,%esp
f0110d38:	8d 45 80             	lea    -0x80(%ebp),%eax
f0110d3b:	50                   	push   %eax
f0110d3c:	e8 2f 00 ff ff       	call   f0100d70 <execute_command>
f0110d41:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0110d44:	83 ec 0c             	sub    $0xc,%esp
f0110d47:	68 2a 88 13 f0       	push   $0xf013882a
f0110d4c:	e8 bd ff fe ff       	call   f0100d0e <cprintf>
f0110d51:	83 c4 10             	add    $0x10,%esp

	//CASE2: should print the commands that start with he ---> Shall print (help)
	cprintf("==>Testing now AUTOCOMPLETE for: he\n");
f0110d54:	83 ec 0c             	sub    $0xc,%esp
f0110d57:	68 40 88 13 f0       	push   $0xf0138840
f0110d5c:	e8 ad ff fe ff       	call   f0100d0e <cprintf>
f0110d61:	83 c4 10             	add    $0x10,%esp
	char cr2[100] = "he";
f0110d64:	c7 85 1c ff ff ff 68 	movl   $0x6568,-0xe4(%ebp)
f0110d6b:	65 00 00 
f0110d6e:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f0110d74:	b9 18 00 00 00       	mov    $0x18,%ecx
f0110d79:	b8 00 00 00 00       	mov    $0x0,%eax
f0110d7e:	89 d7                	mov    %edx,%edi
f0110d80:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr2) ;
f0110d82:	83 ec 0c             	sub    $0xc,%esp
f0110d85:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f0110d8b:	50                   	push   %eax
f0110d8c:	e8 df ff fe ff       	call   f0100d70 <execute_command>
f0110d91:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0110d94:	83 ec 0c             	sub    $0xc,%esp
f0110d97:	68 2a 88 13 f0       	push   $0xf013882a
f0110d9c:	e8 6d ff fe ff       	call   f0100d0e <cprintf>
f0110da1:	83 c4 10             	add    $0x10,%esp


	//CASE3: should print the commands that start with ru ---> Shall print (rum, rub, rut, run, runall) .. Each in a separate line
	cprintf("==>Testing now AUTOCOMPLETE for: ru\n");
f0110da4:	83 ec 0c             	sub    $0xc,%esp
f0110da7:	68 68 88 13 f0       	push   $0xf0138868
f0110dac:	e8 5d ff fe ff       	call   f0100d0e <cprintf>
f0110db1:	83 c4 10             	add    $0x10,%esp
	char cr3[100] = "ru";
f0110db4:	c7 85 b8 fe ff ff 72 	movl   $0x7572,-0x148(%ebp)
f0110dbb:	75 00 00 
f0110dbe:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f0110dc4:	b9 18 00 00 00       	mov    $0x18,%ecx
f0110dc9:	b8 00 00 00 00       	mov    $0x0,%eax
f0110dce:	89 d7                	mov    %edx,%edi
f0110dd0:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr3) ;
f0110dd2:	83 ec 0c             	sub    $0xc,%esp
f0110dd5:	8d 85 b8 fe ff ff    	lea    -0x148(%ebp),%eax
f0110ddb:	50                   	push   %eax
f0110ddc:	e8 8f ff fe ff       	call   f0100d70 <execute_command>
f0110de1:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0110de4:	83 ec 0c             	sub    $0xc,%esp
f0110de7:	68 2a 88 13 f0       	push   $0xf013882a
f0110dec:	e8 1d ff fe ff       	call   f0100d0e <cprintf>
f0110df1:	83 c4 10             	add    $0x10,%esp

	//CASE4: should print unknown command
	cprintf("==>Testing now AUTOCOMPLETE for: smm\n");
f0110df4:	83 ec 0c             	sub    $0xc,%esp
f0110df7:	68 90 88 13 f0       	push   $0xf0138890
f0110dfc:	e8 0d ff fe ff       	call   f0100d0e <cprintf>
f0110e01:	83 c4 10             	add    $0x10,%esp
	char cr4[100] = "smm";
f0110e04:	c7 85 54 fe ff ff 73 	movl   $0x6d6d73,-0x1ac(%ebp)
f0110e0b:	6d 6d 00 
f0110e0e:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f0110e14:	b9 18 00 00 00       	mov    $0x18,%ecx
f0110e19:	b8 00 00 00 00       	mov    $0x0,%eax
f0110e1e:	89 d7                	mov    %edx,%edi
f0110e20:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr4) ;
f0110e22:	83 ec 0c             	sub    $0xc,%esp
f0110e25:	8d 85 54 fe ff ff    	lea    -0x1ac(%ebp),%eax
f0110e2b:	50                   	push   %eax
f0110e2c:	e8 3f ff fe ff       	call   f0100d70 <execute_command>
f0110e31:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0110e34:	83 ec 0c             	sub    $0xc,%esp
f0110e37:	68 2a 88 13 f0       	push   $0xf013882a
f0110e3c:	e8 cd fe fe ff       	call   f0100d0e <cprintf>
f0110e41:	83 c4 10             	add    $0x10,%esp
	return 0;
f0110e44:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0110e49:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0110e4c:	5b                   	pop    %ebx
f0110e4d:	5e                   	pop    %esi
f0110e4e:	5f                   	pop    %edi
f0110e4f:	5d                   	pop    %ebp
f0110e50:	c3                   	ret    

f0110e51 <test_pt_set_page_permissions>:

//=====================================
// 1) TEST SET/CLEAR PAGE PERMISSIONS:
//=====================================
int test_pt_set_page_permissions()
{
f0110e51:	55                   	push   %ebp
f0110e52:	89 e5                	mov    %esp,%ebp
f0110e54:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check setting a permission
	uint32 va = 0xEF800000;
f0110e57:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0110e5e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0110e65:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110e6c:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0110e71:	ff 75 ec             	pushl  -0x14(%ebp)
f0110e74:	ff 75 f0             	pushl  -0x10(%ebp)
f0110e77:	ff 75 f4             	pushl  -0xc(%ebp)
f0110e7a:	50                   	push   %eax
f0110e7b:	e8 2d 6d ff ff       	call   f0107bad <pt_set_page_permissions>
f0110e80:	83 c4 10             	add    $0x10,%esp
	int ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110e83:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0110e88:	ff 75 ec             	pushl  -0x14(%ebp)
f0110e8b:	ff 75 f0             	pushl  -0x10(%ebp)
f0110e8e:	ff 75 f4             	pushl  -0xc(%ebp)
f0110e91:	50                   	push   %eax
f0110e92:	e8 9e 4e 00 00       	call   f0115d35 <CP>
f0110e97:	83 c4 10             	add    $0x10,%esp
f0110e9a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110e9d:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110ea1:	74 14                	je     f0110eb7 <test_pt_set_page_permissions+0x66>
	{
		panic("[EVAL] #1 Set Permission Failed.\n");
f0110ea3:	83 ec 04             	sub    $0x4,%esp
f0110ea6:	68 1c 89 13 f0       	push   $0xf013891c
f0110eab:	6a 5a                	push   $0x5a
f0110ead:	68 3e 89 13 f0       	push   $0xf013893e
f0110eb2:	e8 4e f3 fe ff       	call   f0100205 <_panic>
	}

	//Case 2: Check setting MORE THAN ONE permission
	va = 0xEF801000;
f0110eb7:	c7 45 f4 00 10 80 ef 	movl   $0xef801000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER;
f0110ebe:	c7 45 f0 44 00 00 00 	movl   $0x44,-0x10(%ebp)
	permissions_to_clear = 0;
f0110ec5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110ecc:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0110ed1:	ff 75 ec             	pushl  -0x14(%ebp)
f0110ed4:	ff 75 f0             	pushl  -0x10(%ebp)
f0110ed7:	ff 75 f4             	pushl  -0xc(%ebp)
f0110eda:	50                   	push   %eax
f0110edb:	e8 cd 6c ff ff       	call   f0107bad <pt_set_page_permissions>
f0110ee0:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110ee3:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0110ee8:	ff 75 ec             	pushl  -0x14(%ebp)
f0110eeb:	ff 75 f0             	pushl  -0x10(%ebp)
f0110eee:	ff 75 f4             	pushl  -0xc(%ebp)
f0110ef1:	50                   	push   %eax
f0110ef2:	e8 3e 4e 00 00       	call   f0115d35 <CP>
f0110ef7:	83 c4 10             	add    $0x10,%esp
f0110efa:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110efd:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110f01:	74 14                	je     f0110f17 <test_pt_set_page_permissions+0xc6>
	{
		panic("[EVAL] #2 Set Permission Failed.\n");
f0110f03:	83 ec 04             	sub    $0x4,%esp
f0110f06:	68 5c 89 13 f0       	push   $0xf013895c
f0110f0b:	6a 66                	push   $0x66
f0110f0d:	68 3e 89 13 f0       	push   $0xf013893e
f0110f12:	e8 ee f2 fe ff       	call   f0100205 <_panic>
	}

	va = 0xEF800000;
f0110f17:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER|PERM_USED|PERM_PRESENT;
f0110f1e:	c7 45 f0 65 00 00 00 	movl   $0x65,-0x10(%ebp)
	permissions_to_clear = 0;
f0110f25:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110f2c:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0110f31:	ff 75 ec             	pushl  -0x14(%ebp)
f0110f34:	ff 75 f0             	pushl  -0x10(%ebp)
f0110f37:	ff 75 f4             	pushl  -0xc(%ebp)
f0110f3a:	50                   	push   %eax
f0110f3b:	e8 6d 6c ff ff       	call   f0107bad <pt_set_page_permissions>
f0110f40:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110f43:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0110f48:	ff 75 ec             	pushl  -0x14(%ebp)
f0110f4b:	ff 75 f0             	pushl  -0x10(%ebp)
f0110f4e:	ff 75 f4             	pushl  -0xc(%ebp)
f0110f51:	50                   	push   %eax
f0110f52:	e8 de 4d 00 00       	call   f0115d35 <CP>
f0110f57:	83 c4 10             	add    $0x10,%esp
f0110f5a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110f5d:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110f61:	74 14                	je     f0110f77 <test_pt_set_page_permissions+0x126>
	{
		panic("[EVAL] #3 Set Permission Failed.\n");
f0110f63:	83 ec 04             	sub    $0x4,%esp
f0110f66:	68 80 89 13 f0       	push   $0xf0138980
f0110f6b:	6a 71                	push   $0x71
f0110f6d:	68 3e 89 13 f0       	push   $0xf013893e
f0110f72:	e8 8e f2 fe ff       	call   f0100205 <_panic>
	}

	//Case 3: Check clearing a permission
	va = 0xF0000000;
f0110f77:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	permissions_to_set = 0;
f0110f7e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_PRESENT;
f0110f85:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110f8c:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0110f91:	ff 75 ec             	pushl  -0x14(%ebp)
f0110f94:	ff 75 f0             	pushl  -0x10(%ebp)
f0110f97:	ff 75 f4             	pushl  -0xc(%ebp)
f0110f9a:	50                   	push   %eax
f0110f9b:	e8 0d 6c ff ff       	call   f0107bad <pt_set_page_permissions>
f0110fa0:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110fa3:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0110fa8:	ff 75 ec             	pushl  -0x14(%ebp)
f0110fab:	ff 75 f0             	pushl  -0x10(%ebp)
f0110fae:	ff 75 f4             	pushl  -0xc(%ebp)
f0110fb1:	50                   	push   %eax
f0110fb2:	e8 7e 4d 00 00       	call   f0115d35 <CP>
f0110fb7:	83 c4 10             	add    $0x10,%esp
f0110fba:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110fbd:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110fc1:	74 14                	je     f0110fd7 <test_pt_set_page_permissions+0x186>
	{
		panic("[EVAL] #4 Clear Permission Failed.\n");
f0110fc3:	83 ec 04             	sub    $0x4,%esp
f0110fc6:	68 a4 89 13 f0       	push   $0xf01389a4
f0110fcb:	6a 7d                	push   $0x7d
f0110fcd:	68 3e 89 13 f0       	push   $0xf013893e
f0110fd2:	e8 2e f2 fe ff       	call   f0100205 <_panic>
	}

	//Case 4: Check clearing MORE THAN ONE permission
	va = 0xEF800000;
f0110fd7:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = 0;
f0110fde:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_MODIFIED|PERM_USER;
f0110fe5:	c7 45 ec 44 00 00 00 	movl   $0x44,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110fec:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0110ff1:	ff 75 ec             	pushl  -0x14(%ebp)
f0110ff4:	ff 75 f0             	pushl  -0x10(%ebp)
f0110ff7:	ff 75 f4             	pushl  -0xc(%ebp)
f0110ffa:	50                   	push   %eax
f0110ffb:	e8 ad 6b ff ff       	call   f0107bad <pt_set_page_permissions>
f0111000:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111003:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0111008:	ff 75 ec             	pushl  -0x14(%ebp)
f011100b:	ff 75 f0             	pushl  -0x10(%ebp)
f011100e:	ff 75 f4             	pushl  -0xc(%ebp)
f0111011:	50                   	push   %eax
f0111012:	e8 1e 4d 00 00       	call   f0115d35 <CP>
f0111017:	83 c4 10             	add    $0x10,%esp
f011101a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f011101d:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111021:	74 17                	je     f011103a <test_pt_set_page_permissions+0x1e9>
	{
		panic("[EVAL] #5 Clear Permission Failed.\n");
f0111023:	83 ec 04             	sub    $0x4,%esp
f0111026:	68 c8 89 13 f0       	push   $0xf01389c8
f011102b:	68 89 00 00 00       	push   $0x89
f0111030:	68 3e 89 13 f0       	push   $0xf013893e
f0111035:	e8 cb f1 fe ff       	call   f0100205 <_panic>
	}

	//Case 5: Check settiing & clearing MORE THAN ONE permission together
	va = 0xF0001000;
f011103a:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	permissions_to_set = PERM_USER|PERM_BUFFERED;
f0111041:	c7 45 f0 04 02 00 00 	movl   $0x204,-0x10(%ebp)
	permissions_to_clear = PERM_WRITEABLE|PERM_USED|PERM_MODIFIED;
f0111048:	c7 45 ec 62 00 00 00 	movl   $0x62,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011104f:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0111054:	ff 75 ec             	pushl  -0x14(%ebp)
f0111057:	ff 75 f0             	pushl  -0x10(%ebp)
f011105a:	ff 75 f4             	pushl  -0xc(%ebp)
f011105d:	50                   	push   %eax
f011105e:	e8 4a 6b ff ff       	call   f0107bad <pt_set_page_permissions>
f0111063:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111066:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f011106b:	ff 75 ec             	pushl  -0x14(%ebp)
f011106e:	ff 75 f0             	pushl  -0x10(%ebp)
f0111071:	ff 75 f4             	pushl  -0xc(%ebp)
f0111074:	50                   	push   %eax
f0111075:	e8 bb 4c 00 00       	call   f0115d35 <CP>
f011107a:	83 c4 10             	add    $0x10,%esp
f011107d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111080:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111084:	74 17                	je     f011109d <test_pt_set_page_permissions+0x24c>
	{
		panic("[EVAL] #6 Set & Clear Permission Failed.\n");
f0111086:	83 ec 04             	sub    $0x4,%esp
f0111089:	68 ec 89 13 f0       	push   $0xf01389ec
f011108e:	68 95 00 00 00       	push   $0x95
f0111093:	68 3e 89 13 f0       	push   $0xf013893e
f0111098:	e8 68 f1 fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test pt_set&clear_page_permissions completed successfully.\n");
f011109d:	83 ec 0c             	sub    $0xc,%esp
f01110a0:	68 18 8a 13 f0       	push   $0xf0138a18
f01110a5:	e8 64 fc fe ff       	call   f0100d0e <cprintf>
f01110aa:	83 c4 10             	add    $0x10,%esp
	return 0;
f01110ad:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01110b2:	c9                   	leave  
f01110b3:	c3                   	ret    

f01110b4 <test_pt_set_page_permissions_invalid_va>:

int test_pt_set_page_permissions_invalid_va()
{
f01110b4:	55                   	push   %ebp
f01110b5:	89 e5                	mov    %esp,%ebp
f01110b7:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x0;
f01110ba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f01110c1:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f01110c8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01110cf:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f01110d4:	ff 75 ec             	pushl  -0x14(%ebp)
f01110d7:	ff 75 f0             	pushl  -0x10(%ebp)
f01110da:	ff 75 f4             	pushl  -0xc(%ebp)
f01110dd:	50                   	push   %eax
f01110de:	e8 ca 6a ff ff       	call   f0107bad <pt_set_page_permissions>
f01110e3:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling setting permissions of an invalid virtual address with non existing page table.");
f01110e6:	83 ec 04             	sub    $0x4,%esp
f01110e9:	68 68 8a 13 f0       	push   $0xf0138a68
f01110ee:	68 a2 00 00 00       	push   $0xa2
f01110f3:	68 3e 89 13 f0       	push   $0xf013893e
f01110f8:	e8 08 f1 fe ff       	call   f0100205 <_panic>

f01110fd <test_pt_get_page_permissions>:

//=====================================
// 2) TEST GET PAGE PERMISSIONS:
//=====================================
int test_pt_get_page_permissions()
{
f01110fd:	55                   	push   %ebp
f01110fe:	89 e5                	mov    %esp,%ebp
f0111100:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check getting a permission of a non existing VA with NO table
	uint32 va = 0xeebfe000;
f0111103:	c7 45 f4 00 e0 bf ee 	movl   $0xeebfe000,-0xc(%ebp)
	int ret = pt_get_page_permissions(ptr_page_directory, va);
f011110a:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f011110f:	83 ec 08             	sub    $0x8,%esp
f0111112:	ff 75 f4             	pushl  -0xc(%ebp)
f0111115:	50                   	push   %eax
f0111116:	e8 46 6b ff ff       	call   f0107c61 <pt_get_page_permissions>
f011111b:	83 c4 10             	add    $0x10,%esp
f011111e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != -1)
f0111121:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0111125:	74 17                	je     f011113e <test_pt_get_page_permissions+0x41>
	{
		panic("[EVAL] #1 Get Permission Failed.\n");
f0111127:	83 ec 04             	sub    $0x4,%esp
f011112a:	68 04 8b 13 f0       	push   $0xf0138b04
f011112f:	68 b0 00 00 00       	push   $0xb0
f0111134:	68 3e 89 13 f0       	push   $0xf013893e
f0111139:	e8 c7 f0 fe ff       	call   f0100205 <_panic>
	}

	//Case 2: Check getting a permission of a non existing VA with an existing table
	va = 0xEF800000;
f011113e:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111145:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f011114a:	83 ec 08             	sub    $0x8,%esp
f011114d:	ff 75 f4             	pushl  -0xc(%ebp)
f0111150:	50                   	push   %eax
f0111151:	e8 0b 6b ff ff       	call   f0107c61 <pt_get_page_permissions>
f0111156:	83 c4 10             	add    $0x10,%esp
f0111159:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 0)
f011115c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111160:	74 17                	je     f0111179 <test_pt_get_page_permissions+0x7c>
	{
		panic("[EVAL] #2 Get Permission Failed.\n");
f0111162:	83 ec 04             	sub    $0x4,%esp
f0111165:	68 28 8b 13 f0       	push   $0xf0138b28
f011116a:	68 b8 00 00 00       	push   $0xb8
f011116f:	68 3e 89 13 f0       	push   $0xf013893e
f0111174:	e8 8c f0 fe ff       	call   f0100205 <_panic>
	}

	//Case 3: Check getting a permission of an existing VA with an existing table
	va = 0xf0000000;
f0111179:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111180:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0111185:	83 ec 08             	sub    $0x8,%esp
f0111188:	ff 75 f4             	pushl  -0xc(%ebp)
f011118b:	50                   	push   %eax
f011118c:	e8 d0 6a ff ff       	call   f0107c61 <pt_get_page_permissions>
f0111191:	83 c4 10             	add    $0x10,%esp
f0111194:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0111197:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f011119b:	74 17                	je     f01111b4 <test_pt_get_page_permissions+0xb7>
	{
		panic("[EVAL] #3 Get Permission Failed.\n");
f011119d:	83 ec 04             	sub    $0x4,%esp
f01111a0:	68 4c 8b 13 f0       	push   $0xf0138b4c
f01111a5:	68 c0 00 00 00       	push   $0xc0
f01111aa:	68 3e 89 13 f0       	push   $0xf013893e
f01111af:	e8 51 f0 fe ff       	call   f0100205 <_panic>
	}

	va = 0xF1000000;
f01111b4:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f01111bb:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f01111c0:	83 ec 08             	sub    $0x8,%esp
f01111c3:	ff 75 f4             	pushl  -0xc(%ebp)
f01111c6:	50                   	push   %eax
f01111c7:	e8 95 6a ff ff       	call   f0107c61 <pt_get_page_permissions>
f01111cc:	83 c4 10             	add    $0x10,%esp
f01111cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f01111d2:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f01111d6:	74 17                	je     f01111ef <test_pt_get_page_permissions+0xf2>
	{
		panic("[EVAL] #4 Get Permission Failed.\n");
f01111d8:	83 ec 04             	sub    $0x4,%esp
f01111db:	68 70 8b 13 f0       	push   $0xf0138b70
f01111e0:	68 c7 00 00 00       	push   $0xc7
f01111e5:	68 3e 89 13 f0       	push   $0xf013893e
f01111ea:	e8 16 f0 fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0001000;
f01111ef:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f01111f6:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f01111fb:	83 ec 08             	sub    $0x8,%esp
f01111fe:	ff 75 f4             	pushl  -0xc(%ebp)
f0111201:	50                   	push   %eax
f0111202:	e8 5a 6a ff ff       	call   f0107c61 <pt_get_page_permissions>
f0111207:	83 c4 10             	add    $0x10,%esp
f011120a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 99)
f011120d:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f0111211:	74 17                	je     f011122a <test_pt_get_page_permissions+0x12d>
	{
		panic("[EVAL] #5 Get Permission Failed.\n");
f0111213:	83 ec 04             	sub    $0x4,%esp
f0111216:	68 94 8b 13 f0       	push   $0xf0138b94
f011121b:	68 ce 00 00 00       	push   $0xce
f0111220:	68 3e 89 13 f0       	push   $0xf013893e
f0111225:	e8 db ef fe ff       	call   f0100205 <_panic>
	}
	cprintf("Congratulations!! test pt_get_page_permissions completed successfully.\n");
f011122a:	83 ec 0c             	sub    $0xc,%esp
f011122d:	68 b8 8b 13 f0       	push   $0xf0138bb8
f0111232:	e8 d7 fa fe ff       	call   f0100d0e <cprintf>
f0111237:	83 c4 10             	add    $0x10,%esp
	return 0;
f011123a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011123f:	c9                   	leave  
f0111240:	c3                   	ret    

f0111241 <test_pt_clear_page_table_entry>:

//=====================================
// 3) TEST CLEAR PAGE TABLE ENTRY:
//=====================================
int test_pt_clear_page_table_entry()
{
f0111241:	55                   	push   %ebp
f0111242:	89 e5                	mov    %esp,%ebp
f0111244:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0xF1000000;
f0111247:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f011124e:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0111253:	83 ec 08             	sub    $0x8,%esp
f0111256:	ff 75 f4             	pushl  -0xc(%ebp)
f0111259:	50                   	push   %eax
f011125a:	e8 5d 6a ff ff       	call   f0107cbc <pt_clear_page_table_entry>
f011125f:	83 c4 10             	add    $0x10,%esp
	int ret = CE(ptr_page_directory, va);
f0111262:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0111267:	83 ec 08             	sub    $0x8,%esp
f011126a:	ff 75 f4             	pushl  -0xc(%ebp)
f011126d:	50                   	push   %eax
f011126e:	e8 1e 4a 00 00       	call   f0115c91 <CE>
f0111273:	83 c4 10             	add    $0x10,%esp
f0111276:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111279:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f011127d:	74 17                	je     f0111296 <test_pt_clear_page_table_entry+0x55>
	{
		panic("[EVAL] #1 Clear Page Table Entry Failed.\n");
f011127f:	83 ec 04             	sub    $0x4,%esp
f0111282:	68 00 8c 13 f0       	push   $0xf0138c00
f0111287:	68 de 00 00 00       	push   $0xde
f011128c:	68 3e 89 13 f0       	push   $0xf013893e
f0111291:	e8 6f ef fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0001000;
f0111296:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f011129d:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f01112a2:	83 ec 08             	sub    $0x8,%esp
f01112a5:	ff 75 f4             	pushl  -0xc(%ebp)
f01112a8:	50                   	push   %eax
f01112a9:	e8 0e 6a ff ff       	call   f0107cbc <pt_clear_page_table_entry>
f01112ae:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f01112b1:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f01112b6:	83 ec 08             	sub    $0x8,%esp
f01112b9:	ff 75 f4             	pushl  -0xc(%ebp)
f01112bc:	50                   	push   %eax
f01112bd:	e8 cf 49 00 00       	call   f0115c91 <CE>
f01112c2:	83 c4 10             	add    $0x10,%esp
f01112c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f01112c8:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01112cc:	74 17                	je     f01112e5 <test_pt_clear_page_table_entry+0xa4>
	{
		panic("[EVAL] #2 Clear Page Table Entry Failed.\n");
f01112ce:	83 ec 04             	sub    $0x4,%esp
f01112d1:	68 2c 8c 13 f0       	push   $0xf0138c2c
f01112d6:	68 e6 00 00 00       	push   $0xe6
f01112db:	68 3e 89 13 f0       	push   $0xf013893e
f01112e0:	e8 20 ef fe ff       	call   f0100205 <_panic>
	}

	va = 0xEF800000;
f01112e5:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01112ec:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f01112f1:	83 ec 08             	sub    $0x8,%esp
f01112f4:	ff 75 f4             	pushl  -0xc(%ebp)
f01112f7:	50                   	push   %eax
f01112f8:	e8 bf 69 ff ff       	call   f0107cbc <pt_clear_page_table_entry>
f01112fd:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0111300:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0111305:	83 ec 08             	sub    $0x8,%esp
f0111308:	ff 75 f4             	pushl  -0xc(%ebp)
f011130b:	50                   	push   %eax
f011130c:	e8 80 49 00 00       	call   f0115c91 <CE>
f0111311:	83 c4 10             	add    $0x10,%esp
f0111314:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111317:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f011131b:	74 17                	je     f0111334 <test_pt_clear_page_table_entry+0xf3>
	{
		panic("[EVAL] #3 Clear Page Table Entry Failed.\n");
f011131d:	83 ec 04             	sub    $0x4,%esp
f0111320:	68 58 8c 13 f0       	push   $0xf0138c58
f0111325:	68 ee 00 00 00       	push   $0xee
f011132a:	68 3e 89 13 f0       	push   $0xf013893e
f011132f:	e8 d1 ee fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0000000;
f0111334:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f011133b:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0111340:	83 ec 08             	sub    $0x8,%esp
f0111343:	ff 75 f4             	pushl  -0xc(%ebp)
f0111346:	50                   	push   %eax
f0111347:	e8 70 69 ff ff       	call   f0107cbc <pt_clear_page_table_entry>
f011134c:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f011134f:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0111354:	83 ec 08             	sub    $0x8,%esp
f0111357:	ff 75 f4             	pushl  -0xc(%ebp)
f011135a:	50                   	push   %eax
f011135b:	e8 31 49 00 00       	call   f0115c91 <CE>
f0111360:	83 c4 10             	add    $0x10,%esp
f0111363:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111366:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f011136a:	74 17                	je     f0111383 <test_pt_clear_page_table_entry+0x142>
	{
		panic("[EVAL] #4 Clear Page Table Entry Failed.\n");
f011136c:	83 ec 04             	sub    $0x4,%esp
f011136f:	68 84 8c 13 f0       	push   $0xf0138c84
f0111374:	68 f6 00 00 00       	push   $0xf6
f0111379:	68 3e 89 13 f0       	push   $0xf013893e
f011137e:	e8 82 ee fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test pt_clear_page_table_entry completed successfully.\n");
f0111383:	83 ec 0c             	sub    $0xc,%esp
f0111386:	68 b0 8c 13 f0       	push   $0xf0138cb0
f011138b:	e8 7e f9 fe ff       	call   f0100d0e <cprintf>
f0111390:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111393:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111398:	c9                   	leave  
f0111399:	c3                   	ret    

f011139a <test_pt_clear_page_table_entry_invalid_va>:

int test_pt_clear_page_table_entry_invalid_va()
{
f011139a:	55                   	push   %ebp
f011139b:	89 e5                	mov    %esp,%ebp
f011139d:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x1000;
f01113a0:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01113a7:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f01113ac:	83 ec 08             	sub    $0x8,%esp
f01113af:	ff 75 f4             	pushl  -0xc(%ebp)
f01113b2:	50                   	push   %eax
f01113b3:	e8 04 69 ff ff       	call   f0107cbc <pt_clear_page_table_entry>
f01113b8:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling clearing the entry of an invalid virtual address non existing page table.");
f01113bb:	83 ec 04             	sub    $0x4,%esp
f01113be:	68 fc 8c 13 f0       	push   $0xf0138cfc
f01113c3:	68 01 01 00 00       	push   $0x101
f01113c8:	68 3e 89 13 f0       	push   $0xf013893e
f01113cd:	e8 33 ee fe ff       	call   f0100205 <_panic>

f01113d2 <test_virtual_to_physical>:

//=====================================
// 4) TEST CONVERTING VA 2 PA:
//=====================================
int test_virtual_to_physical()
{
f01113d2:	55                   	push   %ebp
f01113d3:	89 e5                	mov    %esp,%ebp
f01113d5:	57                   	push   %edi
f01113d6:	56                   	push   %esi
f01113d7:	53                   	push   %ebx
f01113d8:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	int kilo = 1024 ;
f01113de:	c7 45 e4 00 04 00 00 	movl   $0x400,-0x1c(%ebp)
	int mega = 1024*1024 ;
f01113e5:	c7 45 e0 00 00 10 00 	movl   $0x100000,-0x20(%ebp)
	uint32 va;
	ClearUserSpace(ptr_page_directory);
f01113ec:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f01113f1:	83 ec 0c             	sub    $0xc,%esp
f01113f4:	50                   	push   %eax
f01113f5:	e8 79 49 00 00       	call   f0115d73 <ClearUserSpace>
f01113fa:	83 c4 10             	add    $0x10,%esp

	//============================
	//Case 1: Check getting pa of a va with NO table
	va = 0xeebfe000;
f01113fd:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	int pa = virtual_to_physical(ptr_page_directory, va);
f0111404:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0111409:	83 ec 08             	sub    $0x8,%esp
f011140c:	ff 75 dc             	pushl  -0x24(%ebp)
f011140f:	50                   	push   %eax
f0111410:	e8 13 69 ff ff       	call   f0107d28 <virtual_to_physical>
f0111415:	83 c4 10             	add    $0x10,%esp
f0111418:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %d\n", va, CA(ptr_page_directory, va), pa);
	if(pa != -1)
f011141b:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
f011141f:	74 17                	je     f0111438 <test_virtual_to_physical+0x66>
		panic("[EVAL] #1 Test of virtual_to_physical Entry Failed.\n");
f0111421:	83 ec 04             	sub    $0x4,%esp
f0111424:	68 94 8d 13 f0       	push   $0xf0138d94
f0111429:	68 16 01 00 00       	push   $0x116
f011142e:	68 3e 89 13 f0       	push   $0xf013893e
f0111433:	e8 cd ed fe ff       	call   f0100205 <_panic>

	//============================
	//Case 2: Check getting pa of a va with a table
	va = 0xf0000000;
f0111438:	c7 45 dc 00 00 00 f0 	movl   $0xf0000000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f011143f:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0111444:	83 ec 08             	sub    $0x8,%esp
f0111447:	ff 75 dc             	pushl  -0x24(%ebp)
f011144a:	50                   	push   %eax
f011144b:	e8 d8 68 ff ff       	call   f0107d28 <virtual_to_physical>
f0111450:	83 c4 10             	add    $0x10,%esp
f0111453:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111456:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f011145b:	83 ec 08             	sub    $0x8,%esp
f011145e:	ff 75 dc             	pushl  -0x24(%ebp)
f0111461:	50                   	push   %eax
f0111462:	e8 0b 48 00 00       	call   f0115c72 <CA>
f0111467:	83 c4 10             	add    $0x10,%esp
f011146a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011146d:	74 17                	je     f0111486 <test_virtual_to_physical+0xb4>
		panic("[EVAL] #2 Test of virtual_to_physical Entry Failed.\n");
f011146f:	83 ec 04             	sub    $0x4,%esp
f0111472:	68 cc 8d 13 f0       	push   $0xf0138dcc
f0111477:	68 1f 01 00 00       	push   $0x11f
f011147c:	68 3e 89 13 f0       	push   $0xf013893e
f0111481:	e8 7f ed fe ff       	call   f0100205 <_panic>

	//============================
	char ap1[100] = "ap 0x2800000";execute_command(ap1);
f0111486:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f011148c:	bb 98 8f 13 f0       	mov    $0xf0138f98,%ebx
f0111491:	ba 0d 00 00 00       	mov    $0xd,%edx
f0111496:	89 c7                	mov    %eax,%edi
f0111498:	89 de                	mov    %ebx,%esi
f011149a:	89 d1                	mov    %edx,%ecx
f011149c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011149e:	8d 55 81             	lea    -0x7f(%ebp),%edx
f01114a1:	b9 57 00 00 00       	mov    $0x57,%ecx
f01114a6:	b0 00                	mov    $0x0,%al
f01114a8:	89 d7                	mov    %edx,%edi
f01114aa:	f3 aa                	rep stos %al,%es:(%edi)
f01114ac:	83 ec 0c             	sub    $0xc,%esp
f01114af:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f01114b5:	50                   	push   %eax
f01114b6:	e8 b5 f8 fe ff       	call   f0100d70 <execute_command>
f01114bb:	83 c4 10             	add    $0x10,%esp
	va = 0x2800000;
f01114be:	c7 45 dc 00 00 80 02 	movl   $0x2800000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f01114c5:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f01114ca:	83 ec 08             	sub    $0x8,%esp
f01114cd:	ff 75 dc             	pushl  -0x24(%ebp)
f01114d0:	50                   	push   %eax
f01114d1:	e8 52 68 ff ff       	call   f0107d28 <virtual_to_physical>
f01114d6:	83 c4 10             	add    $0x10,%esp
f01114d9:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f01114dc:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f01114e1:	83 ec 08             	sub    $0x8,%esp
f01114e4:	ff 75 dc             	pushl  -0x24(%ebp)
f01114e7:	50                   	push   %eax
f01114e8:	e8 85 47 00 00       	call   f0115c72 <CA>
f01114ed:	83 c4 10             	add    $0x10,%esp
f01114f0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01114f3:	74 17                	je     f011150c <test_virtual_to_physical+0x13a>
		panic("[EVAL] #3 Test of virtual_to_physical Entry Failed.\n");
f01114f5:	83 ec 04             	sub    $0x4,%esp
f01114f8:	68 04 8e 13 f0       	push   $0xf0138e04
f01114fd:	68 28 01 00 00       	push   $0x128
f0111502:	68 3e 89 13 f0       	push   $0xf013893e
f0111507:	e8 f9 ec fe ff       	call   f0100205 <_panic>

	//============================
	char ap2[100] = "ap 0x2801000";execute_command(ap2);
f011150c:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0111512:	bb fc 8f 13 f0       	mov    $0xf0138ffc,%ebx
f0111517:	ba 0d 00 00 00       	mov    $0xd,%edx
f011151c:	89 c7                	mov    %eax,%edi
f011151e:	89 de                	mov    %ebx,%esi
f0111520:	89 d1                	mov    %edx,%ecx
f0111522:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111524:	8d 95 1d ff ff ff    	lea    -0xe3(%ebp),%edx
f011152a:	b9 57 00 00 00       	mov    $0x57,%ecx
f011152f:	b0 00                	mov    $0x0,%al
f0111531:	89 d7                	mov    %edx,%edi
f0111533:	f3 aa                	rep stos %al,%es:(%edi)
f0111535:	83 ec 0c             	sub    $0xc,%esp
f0111538:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f011153e:	50                   	push   %eax
f011153f:	e8 2c f8 fe ff       	call   f0100d70 <execute_command>
f0111544:	83 c4 10             	add    $0x10,%esp
	va = 0x2801000;
f0111547:	c7 45 dc 00 10 80 02 	movl   $0x2801000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f011154e:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0111553:	83 ec 08             	sub    $0x8,%esp
f0111556:	ff 75 dc             	pushl  -0x24(%ebp)
f0111559:	50                   	push   %eax
f011155a:	e8 c9 67 ff ff       	call   f0107d28 <virtual_to_physical>
f011155f:	83 c4 10             	add    $0x10,%esp
f0111562:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111565:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f011156a:	83 ec 08             	sub    $0x8,%esp
f011156d:	ff 75 dc             	pushl  -0x24(%ebp)
f0111570:	50                   	push   %eax
f0111571:	e8 fc 46 00 00       	call   f0115c72 <CA>
f0111576:	83 c4 10             	add    $0x10,%esp
f0111579:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011157c:	74 17                	je     f0111595 <test_virtual_to_physical+0x1c3>
		panic("[EVAL] #4 Test of virtual_to_physical Entry Failed.\n");
f011157e:	83 ec 04             	sub    $0x4,%esp
f0111581:	68 3c 8e 13 f0       	push   $0xf0138e3c
f0111586:	68 31 01 00 00       	push   $0x131
f011158b:	68 3e 89 13 f0       	push   $0xf013893e
f0111590:	e8 70 ec fe ff       	call   f0100205 <_panic>

	//============================
	char ap3[100] = "ap 0x2802000";execute_command(ap3);
f0111595:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f011159b:	bb 60 90 13 f0       	mov    $0xf0139060,%ebx
f01115a0:	ba 0d 00 00 00       	mov    $0xd,%edx
f01115a5:	89 c7                	mov    %eax,%edi
f01115a7:	89 de                	mov    %ebx,%esi
f01115a9:	89 d1                	mov    %edx,%ecx
f01115ab:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01115ad:	8d 95 b9 fe ff ff    	lea    -0x147(%ebp),%edx
f01115b3:	b9 57 00 00 00       	mov    $0x57,%ecx
f01115b8:	b0 00                	mov    $0x0,%al
f01115ba:	89 d7                	mov    %edx,%edi
f01115bc:	f3 aa                	rep stos %al,%es:(%edi)
f01115be:	83 ec 0c             	sub    $0xc,%esp
f01115c1:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f01115c7:	50                   	push   %eax
f01115c8:	e8 a3 f7 fe ff       	call   f0100d70 <execute_command>
f01115cd:	83 c4 10             	add    $0x10,%esp
	va = 0x2802000;
f01115d0:	c7 45 dc 00 20 80 02 	movl   $0x2802000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f01115d7:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f01115dc:	83 ec 08             	sub    $0x8,%esp
f01115df:	ff 75 dc             	pushl  -0x24(%ebp)
f01115e2:	50                   	push   %eax
f01115e3:	e8 40 67 ff ff       	call   f0107d28 <virtual_to_physical>
f01115e8:	83 c4 10             	add    $0x10,%esp
f01115eb:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f01115ee:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f01115f3:	83 ec 08             	sub    $0x8,%esp
f01115f6:	ff 75 dc             	pushl  -0x24(%ebp)
f01115f9:	50                   	push   %eax
f01115fa:	e8 73 46 00 00       	call   f0115c72 <CA>
f01115ff:	83 c4 10             	add    $0x10,%esp
f0111602:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111605:	74 17                	je     f011161e <test_virtual_to_physical+0x24c>
		panic("[EVAL] #5 Test of virtual_to_physical Entry Failed.\n");
f0111607:	83 ec 04             	sub    $0x4,%esp
f011160a:	68 74 8e 13 f0       	push   $0xf0138e74
f011160f:	68 3a 01 00 00       	push   $0x13a
f0111614:	68 3e 89 13 f0       	push   $0xf013893e
f0111619:	e8 e7 eb fe ff       	call   f0100205 <_panic>

	//============================
	va = 0xF0001000;
f011161e:	c7 45 dc 00 10 00 f0 	movl   $0xf0001000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111625:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f011162a:	83 ec 08             	sub    $0x8,%esp
f011162d:	ff 75 dc             	pushl  -0x24(%ebp)
f0111630:	50                   	push   %eax
f0111631:	e8 f2 66 ff ff       	call   f0107d28 <virtual_to_physical>
f0111636:	83 c4 10             	add    $0x10,%esp
f0111639:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f011163c:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0111641:	83 ec 08             	sub    $0x8,%esp
f0111644:	ff 75 dc             	pushl  -0x24(%ebp)
f0111647:	50                   	push   %eax
f0111648:	e8 25 46 00 00       	call   f0115c72 <CA>
f011164d:	83 c4 10             	add    $0x10,%esp
f0111650:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111653:	74 17                	je     f011166c <test_virtual_to_physical+0x29a>
		panic("[EVAL] #6 Test of virtual_to_physical Entry Failed.\n");
f0111655:	83 ec 04             	sub    $0x4,%esp
f0111658:	68 ac 8e 13 f0       	push   $0xf0138eac
f011165d:	68 42 01 00 00       	push   $0x142
f0111662:	68 3e 89 13 f0       	push   $0xf013893e
f0111667:	e8 99 eb fe ff       	call   f0100205 <_panic>

	//============================
	va = 0xF0001005;
f011166c:	c7 45 dc 05 10 00 f0 	movl   $0xf0001005,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111673:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0111678:	83 ec 08             	sub    $0x8,%esp
f011167b:	ff 75 dc             	pushl  -0x24(%ebp)
f011167e:	50                   	push   %eax
f011167f:	e8 a4 66 ff ff       	call   f0107d28 <virtual_to_physical>
f0111684:	83 c4 10             	add    $0x10,%esp
f0111687:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f011168a:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f011168f:	83 ec 08             	sub    $0x8,%esp
f0111692:	ff 75 dc             	pushl  -0x24(%ebp)
f0111695:	50                   	push   %eax
f0111696:	e8 d7 45 00 00       	call   f0115c72 <CA>
f011169b:	83 c4 10             	add    $0x10,%esp
f011169e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01116a1:	74 17                	je     f01116ba <test_virtual_to_physical+0x2e8>
		panic("[EVAL] #7 Test of virtual_to_physical Entry Failed.\n");
f01116a3:	83 ec 04             	sub    $0x4,%esp
f01116a6:	68 e4 8e 13 f0       	push   $0xf0138ee4
f01116ab:	68 4a 01 00 00       	push   $0x14a
f01116b0:	68 3e 89 13 f0       	push   $0xf013893e
f01116b5:	e8 4b eb fe ff       	call   f0100205 <_panic>

	//============================
	char ap4[100] = "ap 0xeebfe000";execute_command(ap4);
f01116ba:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f01116c0:	bb c4 90 13 f0       	mov    $0xf01390c4,%ebx
f01116c5:	ba 0e 00 00 00       	mov    $0xe,%edx
f01116ca:	89 c7                	mov    %eax,%edi
f01116cc:	89 de                	mov    %ebx,%esi
f01116ce:	89 d1                	mov    %edx,%ecx
f01116d0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01116d2:	8d 95 56 fe ff ff    	lea    -0x1aa(%ebp),%edx
f01116d8:	b9 56 00 00 00       	mov    $0x56,%ecx
f01116dd:	b0 00                	mov    $0x0,%al
f01116df:	89 d7                	mov    %edx,%edi
f01116e1:	f3 aa                	rep stos %al,%es:(%edi)
f01116e3:	83 ec 0c             	sub    $0xc,%esp
f01116e6:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f01116ec:	50                   	push   %eax
f01116ed:	e8 7e f6 fe ff       	call   f0100d70 <execute_command>
f01116f2:	83 c4 10             	add    $0x10,%esp
	va = 0xeebfe000;
f01116f5:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f01116fc:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0111701:	83 ec 08             	sub    $0x8,%esp
f0111704:	ff 75 dc             	pushl  -0x24(%ebp)
f0111707:	50                   	push   %eax
f0111708:	e8 1b 66 ff ff       	call   f0107d28 <virtual_to_physical>
f011170d:	83 c4 10             	add    $0x10,%esp
f0111710:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111713:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0111718:	83 ec 08             	sub    $0x8,%esp
f011171b:	ff 75 dc             	pushl  -0x24(%ebp)
f011171e:	50                   	push   %eax
f011171f:	e8 4e 45 00 00       	call   f0115c72 <CA>
f0111724:	83 c4 10             	add    $0x10,%esp
f0111727:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011172a:	74 17                	je     f0111743 <test_virtual_to_physical+0x371>
		panic("[EVAL] #8 Test of virtual_to_physical Entry Failed.\n");
f011172c:	83 ec 04             	sub    $0x4,%esp
f011172f:	68 1c 8f 13 f0       	push   $0xf0138f1c
f0111734:	68 53 01 00 00       	push   $0x153
f0111739:	68 3e 89 13 f0       	push   $0xf013893e
f011173e:	e8 c2 ea fe ff       	call   f0100205 <_panic>

	//============================
	cprintf("Congratulations!! test virtual_to_physical completed successfully.\n");
f0111743:	83 ec 0c             	sub    $0xc,%esp
f0111746:	68 54 8f 13 f0       	push   $0xf0138f54
f011174b:	e8 be f5 fe ff       	call   f0100d0e <cprintf>
f0111750:	83 c4 10             	add    $0x10,%esp

	return 0;
f0111753:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111758:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011175b:	5b                   	pop    %ebx
f011175c:	5e                   	pop    %esi
f011175d:	5f                   	pop    %edi
f011175e:	5d                   	pop    %ebp
f011175f:	c3                   	ret    

f0111760 <test_cut_paste_pages>:

//===============================
// 1) TEST CUT-PASTE PAGES:
//===============================
int test_cut_paste_pages()
{
f0111760:	55                   	push   %ebp
f0111761:	89 e5                	mov    %esp,%ebp
f0111763:	57                   	push   %edi
f0111764:	56                   	push   %esi
f0111765:	53                   	push   %ebx
f0111766:	81 ec ec 03 00 00    	sub    $0x3ec,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f011176c:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0111772:	bb d8 93 13 f0       	mov    $0xf01393d8,%ebx
f0111777:	ba 0f 00 00 00       	mov    $0xf,%edx
f011177c:	89 c7                	mov    %eax,%edi
f011177e:	89 de                	mov    %ebx,%esi
f0111780:	89 d1                	mov    %edx,%ecx
f0111782:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111784:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f011178a:	b9 23 00 00 00       	mov    $0x23,%ecx
f011178f:	b0 00                	mov    $0x0,%al
f0111791:	89 d7                	mov    %edx,%edi
f0111793:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0111795:	6a 00                	push   $0x0
f0111797:	6a 0a                	push   $0xa
f0111799:	6a 14                	push   $0x14
f011179b:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01117a1:	50                   	push   %eax
f01117a2:	e8 bc 76 ff ff       	call   f0108e63 <env_create>
f01117a7:	83 c4 10             	add    $0x10,%esp
f01117aa:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01117ad:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01117b0:	8b 40 5c             	mov    0x5c(%eax),%eax
f01117b3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f01117b6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01117b9:	8b 40 60             	mov    0x60(%eax),%eax
f01117bc:	89 45 90             	mov    %eax,-0x70(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01117bf:	8b 45 90             	mov    -0x70(%ebp),%eax
f01117c2:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f01117c5:	c7 85 4a ff ff ff 61 	movl   $0x20707561,-0xb6(%ebp)
f01117cc:	75 70 20 
f01117cf:	c7 85 4e ff ff ff 00 	movl   $0x0,-0xb2(%ebp)
f01117d6:	00 00 00 
f01117d9:	8d 95 52 ff ff ff    	lea    -0xae(%ebp),%edx
f01117df:	b9 03 00 00 00       	mov    $0x3,%ecx
f01117e4:	b8 00 00 00 00       	mov    $0x0,%eax
f01117e9:	89 d7                	mov    %edx,%edi
f01117eb:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f01117ed:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01117f0:	8b 40 4c             	mov    0x4c(%eax),%eax
f01117f3:	83 ec 08             	sub    $0x8,%esp
f01117f6:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f01117fc:	52                   	push   %edx
f01117fd:	50                   	push   %eax
f01117fe:	e8 6f fb 01 00       	call   f0131372 <ltostr>
f0111803:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0111806:	83 ec 04             	sub    $0x4,%esp
f0111809:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011180f:	50                   	push   %eax
f0111810:	8d 85 36 ff ff ff    	lea    -0xca(%ebp),%eax
f0111816:	50                   	push   %eax
f0111817:	8d 85 4a ff ff ff    	lea    -0xb6(%ebp),%eax
f011181d:	50                   	push   %eax
f011181e:	e8 47 fc 01 00       	call   f013146a <strcconcat>
f0111823:	83 c4 10             	add    $0x10,%esp
	//===================================================
	int numOfArgs = 0;
f0111826:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6;
	int kilo = 1024 ;
f011182d:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f0111834:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)

	ClearUserSpace(proc_directory);
f011183b:	83 ec 0c             	sub    $0xc,%esp
f011183e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111841:	e8 2d 45 00 00       	call   f0115d73 <ClearUserSpace>
f0111846:	83 c4 10             	add    $0x10,%esp

	char ap1[100] ;strcconcat(aup_cmd, " 0x2800000", ap1); execute_command(ap1);
f0111849:	83 ec 04             	sub    $0x4,%esp
f011184c:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0111852:	50                   	push   %eax
f0111853:	68 28 91 13 f0       	push   $0xf0139128
f0111858:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011185e:	50                   	push   %eax
f011185f:	e8 06 fc 01 00       	call   f013146a <strcconcat>
f0111864:	83 c4 10             	add    $0x10,%esp
f0111867:	83 ec 0c             	sub    $0xc,%esp
f011186a:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0111870:	50                   	push   %eax
f0111871:	e8 fa f4 fe ff       	call   f0100d70 <execute_command>
f0111876:	83 c4 10             	add    $0x10,%esp
	char ap2[100] ;strcconcat(aup_cmd, " 0x2801000", ap2); execute_command(ap2);
f0111879:	83 ec 04             	sub    $0x4,%esp
f011187c:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f0111882:	50                   	push   %eax
f0111883:	68 33 91 13 f0       	push   $0xf0139133
f0111888:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011188e:	50                   	push   %eax
f011188f:	e8 d6 fb 01 00       	call   f013146a <strcconcat>
f0111894:	83 c4 10             	add    $0x10,%esp
f0111897:	83 ec 0c             	sub    $0xc,%esp
f011189a:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f01118a0:	50                   	push   %eax
f01118a1:	e8 ca f4 fe ff       	call   f0100d70 <execute_command>
f01118a6:	83 c4 10             	add    $0x10,%esp
	char ap3[100] ;strcconcat(aup_cmd, " 0x2802000", ap3); execute_command(ap3);
f01118a9:	83 ec 04             	sub    $0x4,%esp
f01118ac:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f01118b2:	50                   	push   %eax
f01118b3:	68 3e 91 13 f0       	push   $0xf013913e
f01118b8:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01118be:	50                   	push   %eax
f01118bf:	e8 a6 fb 01 00       	call   f013146a <strcconcat>
f01118c4:	83 c4 10             	add    $0x10,%esp
f01118c7:	83 ec 0c             	sub    $0xc,%esp
f01118ca:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f01118d0:	50                   	push   %eax
f01118d1:	e8 9a f4 fe ff       	call   f0100d70 <execute_command>
f01118d6:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x2800000; *ptr1 = 'a';
f01118d9:	c7 45 c0 00 00 80 02 	movl   $0x2800000,-0x40(%ebp)
f01118e0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01118e3:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x28017FF; *ptr1 = 'b';
f01118e6:	c7 45 c0 ff 17 80 02 	movl   $0x28017ff,-0x40(%ebp)
f01118ed:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01118f0:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x2802FFF; *ptr1 = 'c';
f01118f3:	c7 45 c0 ff 2f 80 02 	movl   $0x2802fff,-0x40(%ebp)
f01118fa:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01118fd:	c6 00 63             	movb   $0x63,(%eax)

	uint32 perms = GP(proc_directory, (uint32)ptr1);
f0111900:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111903:	83 ec 08             	sub    $0x8,%esp
f0111906:	50                   	push   %eax
f0111907:	ff 75 d4             	pushl  -0x2c(%ebp)
f011190a:	e8 45 44 00 00       	call   f0115d54 <GP>
f011190f:	83 c4 10             	add    $0x10,%esp
f0111912:	89 45 bc             	mov    %eax,-0x44(%ebp)

	int eval = 0;
f0111915:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int correct = 1;
f011191c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	int ff1 = sys_calculate_free_frames();
f0111923:	e8 75 b2 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0111928:	89 45 b8             	mov    %eax,-0x48(%ebp)

	/*=============================================*/
	/*PART I: Destination Pages Does NOT Exist 60% */
	/*=============================================*/
	cprintf("CASE I: Destination Pages Does NOT Exist [60%]\n") ;
f011192b:	83 ec 0c             	sub    $0xc,%esp
f011192e:	68 4c 91 13 f0       	push   $0xf013914c
f0111933:	e8 d6 f3 fe ff       	call   f0100d0e <cprintf>
f0111938:	83 c4 10             	add    $0x10,%esp
	int ret = cut_paste_pages(proc_directory, 0x2800000, 0x2900000, 3) ;
f011193b:	6a 03                	push   $0x3
f011193d:	68 00 00 90 02       	push   $0x2900000
f0111942:	68 00 00 80 02       	push   $0x2800000
f0111947:	ff 75 d4             	pushl  -0x2c(%ebp)
f011194a:	e8 01 6e ff ff       	call   f0108750 <cut_paste_pages>
f011194f:	83 c4 10             	add    $0x10,%esp
f0111952:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	int ff2 = sys_calculate_free_frames();
f0111955:	e8 43 b2 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011195a:	89 45 b0             	mov    %eax,-0x50(%ebp)

	correct = 1 ;
f011195d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	if (ret != 0 || ff1 != ff2)
f0111964:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0111968:	75 08                	jne    f0111972 <test_cut_paste_pages+0x212>
f011196a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011196d:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0111970:	74 2b                	je     f011199d <test_cut_paste_pages+0x23d>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0111972:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111975:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0111978:	83 ec 0c             	sub    $0xc,%esp
f011197b:	50                   	push   %eax
f011197c:	ff 75 b4             	pushl  -0x4c(%ebp)
f011197f:	68 7c 91 13 f0       	push   $0xf013917c
f0111984:	68 91 01 00 00       	push   $0x191
f0111989:	68 3e 89 13 f0       	push   $0xf013893e
f011198e:	e8 80 ea fe ff       	call   f0100413 <_warn>
f0111993:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0111996:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 5 ;
f011199d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01119a1:	74 04                	je     f01119a7 <test_cut_paste_pages+0x247>
f01119a3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f01119a7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2800000, 0x2900000, 3*PAGE_SIZE, 1, perms, 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f01119ae:	83 ec 08             	sub    $0x8,%esp
f01119b1:	6a 00                	push   $0x0
f01119b3:	6a 01                	push   $0x1
f01119b5:	6a 00                	push   $0x0
f01119b7:	68 ff 0f 00 00       	push   $0xfff
f01119bc:	ff 75 bc             	pushl  -0x44(%ebp)
f01119bf:	6a 01                	push   $0x1
f01119c1:	68 00 30 00 00       	push   $0x3000
f01119c6:	68 00 00 90 02       	push   $0x2900000
f01119cb:	68 00 00 80 02       	push   $0x2800000
f01119d0:	ff 75 d4             	pushl  -0x2c(%ebp)
f01119d3:	e8 cf 43 00 00       	call   f0115da7 <CCP>
f01119d8:	83 c4 30             	add    $0x30,%esp
f01119db:	83 f8 01             	cmp    $0x1,%eax
f01119de:	74 21                	je     f0111a01 <test_cut_paste_pages+0x2a1>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f01119e0:	83 ec 04             	sub    $0x4,%esp
f01119e3:	68 d0 91 13 f0       	push   $0xf01391d0
f01119e8:	68 99 01 00 00       	push   $0x199
f01119ed:	68 3e 89 13 f0       	push   $0xf013893e
f01119f2:	e8 1c ea fe ff       	call   f0100413 <_warn>
f01119f7:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01119fa:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 15 ;
f0111a01:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111a05:	74 04                	je     f0111a0b <test_cut_paste_pages+0x2ab>
f0111a07:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	correct = 1 ;
f0111a0b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2900000, 0) && CB(proc_directory, 0x2901000, 0) && CB(proc_directory, 0x2902000, 0))
f0111a12:	83 ec 04             	sub    $0x4,%esp
f0111a15:	6a 00                	push   $0x0
f0111a17:	68 00 00 90 02       	push   $0x2900000
f0111a1c:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111a1f:	e8 5f 41 00 00       	call   f0115b83 <CB>
f0111a24:	83 c4 10             	add    $0x10,%esp
f0111a27:	85 c0                	test   %eax,%eax
f0111a29:	0f 84 f6 00 00 00    	je     f0111b25 <test_cut_paste_pages+0x3c5>
f0111a2f:	83 ec 04             	sub    $0x4,%esp
f0111a32:	6a 00                	push   $0x0
f0111a34:	68 00 10 90 02       	push   $0x2901000
f0111a39:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111a3c:	e8 42 41 00 00       	call   f0115b83 <CB>
f0111a41:	83 c4 10             	add    $0x10,%esp
f0111a44:	85 c0                	test   %eax,%eax
f0111a46:	0f 84 d9 00 00 00    	je     f0111b25 <test_cut_paste_pages+0x3c5>
f0111a4c:	83 ec 04             	sub    $0x4,%esp
f0111a4f:	6a 00                	push   $0x0
f0111a51:	68 00 20 90 02       	push   $0x2902000
f0111a56:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111a59:	e8 25 41 00 00       	call   f0115b83 <CB>
f0111a5e:	83 c4 10             	add    $0x10,%esp
f0111a61:	85 c0                	test   %eax,%eax
f0111a63:	0f 84 bc 00 00 00    	je     f0111b25 <test_cut_paste_pages+0x3c5>
	{
		ptr1 = (char*)0x2900000;
f0111a69:	c7 45 c0 00 00 90 02 	movl   $0x2900000,-0x40(%ebp)
		ptr2 = (char*)0x29017FF;
f0111a70:	c7 45 ac ff 17 90 02 	movl   $0x29017ff,-0x54(%ebp)
		ptr3 = (char*)0x2902FFF;
f0111a77:	c7 45 a8 ff 2f 90 02 	movl   $0x2902fff,-0x58(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'b' || (*ptr3) != 'c')
f0111a7e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111a81:	8a 00                	mov    (%eax),%al
f0111a83:	3c 61                	cmp    $0x61,%al
f0111a85:	75 12                	jne    f0111a99 <test_cut_paste_pages+0x339>
f0111a87:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111a8a:	8a 00                	mov    (%eax),%al
f0111a8c:	3c 62                	cmp    $0x62,%al
f0111a8e:	75 09                	jne    f0111a99 <test_cut_paste_pages+0x339>
f0111a90:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111a93:	8a 00                	mov    (%eax),%al
f0111a95:	3c 63                	cmp    $0x63,%al
f0111a97:	74 21                	je     f0111aba <test_cut_paste_pages+0x35a>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0111a99:	83 ec 04             	sub    $0x4,%esp
f0111a9c:	68 1c 92 13 f0       	push   $0xf013921c
f0111aa1:	68 a6 01 00 00       	push   $0x1a6
f0111aa6:	68 3e 89 13 f0       	push   $0xf013893e
f0111aab:	e8 63 e9 fe ff       	call   f0100413 <_warn>
f0111ab0:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111ab3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0111aba:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111abe:	74 04                	je     f0111ac4 <test_cut_paste_pages+0x364>
f0111ac0:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0111ac4:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CB(proc_directory, 0x2901000, 1))
f0111acb:	83 ec 04             	sub    $0x4,%esp
f0111ace:	6a 01                	push   $0x1
f0111ad0:	68 00 10 90 02       	push   $0x2901000
f0111ad5:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111ad8:	e8 a6 40 00 00       	call   f0115b83 <CB>
f0111add:	83 c4 10             	add    $0x10,%esp
f0111ae0:	85 c0                	test   %eax,%eax
f0111ae2:	74 41                	je     f0111b25 <test_cut_paste_pages+0x3c5>
		{
			*ptr2 = 'y';
f0111ae4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111ae7:	c6 00 79             	movb   $0x79,(%eax)
			if ((*ptr2) != 'y')
f0111aea:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111aed:	8a 00                	mov    (%eax),%al
f0111aef:	3c 79                	cmp    $0x79,%al
f0111af1:	74 21                	je     f0111b14 <test_cut_paste_pages+0x3b4>
			{
				warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0111af3:	83 ec 04             	sub    $0x4,%esp
f0111af6:	68 1c 92 13 f0       	push   $0xf013921c
f0111afb:	68 b1 01 00 00       	push   $0x1b1
f0111b00:	68 3e 89 13 f0       	push   $0xf013893e
f0111b05:	e8 09 e9 fe ff       	call   f0100413 <_warn>
f0111b0a:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0111b0d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0111b14:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111b18:	74 04                	je     f0111b1e <test_cut_paste_pages+0x3be>
f0111b1a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0111b1e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}


	ff1 = ff2 ;
f0111b25:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0111b28:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x2901000, 0x2BFF000, 2) ;
f0111b2b:	6a 02                	push   $0x2
f0111b2d:	68 00 f0 bf 02       	push   $0x2bff000
f0111b32:	68 00 10 90 02       	push   $0x2901000
f0111b37:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111b3a:	e8 11 6c ff ff       	call   f0108750 <cut_paste_pages>
f0111b3f:	83 c4 10             	add    $0x10,%esp
f0111b42:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0111b45:	e8 53 b0 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0111b4a:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != 0 || ff1 - ff2 != 1)
f0111b4d:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0111b51:	75 0b                	jne    f0111b5e <test_cut_paste_pages+0x3fe>
f0111b53:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111b56:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0111b59:	83 f8 01             	cmp    $0x1,%eax
f0111b5c:	74 2b                	je     f0111b89 <test_cut_paste_pages+0x429>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0111b5e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111b61:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0111b64:	83 ec 0c             	sub    $0xc,%esp
f0111b67:	50                   	push   %eax
f0111b68:	ff 75 b4             	pushl  -0x4c(%ebp)
f0111b6b:	68 7c 91 13 f0       	push   $0xf013917c
f0111b70:	68 c2 01 00 00       	push   $0x1c2
f0111b75:	68 3e 89 13 f0       	push   $0xf013893e
f0111b7a:	e8 94 e8 fe ff       	call   f0100413 <_warn>
f0111b7f:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0111b82:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0111b89:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111b8d:	74 04                	je     f0111b93 <test_cut_paste_pages+0x433>
f0111b8f:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0111b93:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2901000, 0x2BFF000, 2*PAGE_SIZE, 1, perms , 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f0111b9a:	83 ec 08             	sub    $0x8,%esp
f0111b9d:	6a 00                	push   $0x0
f0111b9f:	6a 01                	push   $0x1
f0111ba1:	6a 00                	push   $0x0
f0111ba3:	68 ff 0f 00 00       	push   $0xfff
f0111ba8:	ff 75 bc             	pushl  -0x44(%ebp)
f0111bab:	6a 01                	push   $0x1
f0111bad:	68 00 20 00 00       	push   $0x2000
f0111bb2:	68 00 f0 bf 02       	push   $0x2bff000
f0111bb7:	68 00 10 90 02       	push   $0x2901000
f0111bbc:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111bbf:	e8 e3 41 00 00       	call   f0115da7 <CCP>
f0111bc4:	83 c4 30             	add    $0x30,%esp
f0111bc7:	83 f8 01             	cmp    $0x1,%eax
f0111bca:	74 21                	je     f0111bed <test_cut_paste_pages+0x48d>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0111bcc:	83 ec 04             	sub    $0x4,%esp
f0111bcf:	68 d0 91 13 f0       	push   $0xf01391d0
f0111bd4:	68 ca 01 00 00       	push   $0x1ca
f0111bd9:	68 3e 89 13 f0       	push   $0xf013893e
f0111bde:	e8 30 e8 fe ff       	call   f0100413 <_warn>
f0111be3:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0111be6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0111bed:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111bf1:	74 04                	je     f0111bf7 <test_cut_paste_pages+0x497>
f0111bf3:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0111bf7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2BFF7FF, 0) && CB(proc_directory, 0x2C00FFF, 0))
f0111bfe:	83 ec 04             	sub    $0x4,%esp
f0111c01:	6a 00                	push   $0x0
f0111c03:	68 ff f7 bf 02       	push   $0x2bff7ff
f0111c08:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111c0b:	e8 73 3f 00 00       	call   f0115b83 <CB>
f0111c10:	83 c4 10             	add    $0x10,%esp
f0111c13:	85 c0                	test   %eax,%eax
f0111c15:	74 6b                	je     f0111c82 <test_cut_paste_pages+0x522>
f0111c17:	83 ec 04             	sub    $0x4,%esp
f0111c1a:	6a 00                	push   $0x0
f0111c1c:	68 ff 0f c0 02       	push   $0x2c00fff
f0111c21:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111c24:	e8 5a 3f 00 00       	call   f0115b83 <CB>
f0111c29:	83 c4 10             	add    $0x10,%esp
f0111c2c:	85 c0                	test   %eax,%eax
f0111c2e:	74 52                	je     f0111c82 <test_cut_paste_pages+0x522>
	{
		ptr1 = (char*)0x2BFF7FF;
f0111c30:	c7 45 c0 ff f7 bf 02 	movl   $0x2bff7ff,-0x40(%ebp)
		ptr2 = (char*)0x2C00FFF;
f0111c37:	c7 45 ac ff 0f c0 02 	movl   $0x2c00fff,-0x54(%ebp)
		if ((*ptr1) != 'y' || (*ptr2) != 'c')
f0111c3e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111c41:	8a 00                	mov    (%eax),%al
f0111c43:	3c 79                	cmp    $0x79,%al
f0111c45:	75 09                	jne    f0111c50 <test_cut_paste_pages+0x4f0>
f0111c47:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111c4a:	8a 00                	mov    (%eax),%al
f0111c4c:	3c 63                	cmp    $0x63,%al
f0111c4e:	74 21                	je     f0111c71 <test_cut_paste_pages+0x511>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0111c50:	83 ec 04             	sub    $0x4,%esp
f0111c53:	68 1c 92 13 f0       	push   $0xf013921c
f0111c58:	68 d6 01 00 00       	push   $0x1d6
f0111c5d:	68 3e 89 13 f0       	push   $0xf013893e
f0111c62:	e8 ac e7 fe ff       	call   f0100413 <_warn>
f0111c67:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111c6a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0111c71:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111c75:	74 04                	je     f0111c7b <test_cut_paste_pages+0x51b>
f0111c77:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0111c7b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}
	cprintf("CASE I: END\n") ;
f0111c82:	83 ec 0c             	sub    $0xc,%esp
f0111c85:	68 55 92 13 f0       	push   $0xf0139255
f0111c8a:	e8 7f f0 fe ff       	call   f0100d0e <cprintf>
f0111c8f:	83 c4 10             	add    $0x10,%esp

	/*========================================*/
	/*PART II: Destination Pages Exist 40%	  */
	/*========================================*/
	cprintf("\nCASE II: Destination Pages Exist [40%]\n") ;
f0111c92:	83 ec 0c             	sub    $0xc,%esp
f0111c95:	68 64 92 13 f0       	push   $0xf0139264
f0111c9a:	e8 6f f0 fe ff       	call   f0100d0e <cprintf>
f0111c9f:	83 c4 10             	add    $0x10,%esp

	char ap4[100] ;strcconcat(aup_cmd, " 0x1400000", ap4); execute_command(ap4);
f0111ca2:	83 ec 04             	sub    $0x4,%esp
f0111ca5:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0111cab:	50                   	push   %eax
f0111cac:	68 8d 92 13 f0       	push   $0xf013928d
f0111cb1:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111cb7:	50                   	push   %eax
f0111cb8:	e8 ad f7 01 00       	call   f013146a <strcconcat>
f0111cbd:	83 c4 10             	add    $0x10,%esp
f0111cc0:	83 ec 0c             	sub    $0xc,%esp
f0111cc3:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0111cc9:	50                   	push   %eax
f0111cca:	e8 a1 f0 fe ff       	call   f0100d70 <execute_command>
f0111ccf:	83 c4 10             	add    $0x10,%esp
	char ap5[100] ;strcconcat(aup_cmd, " 0x1401000", ap5); execute_command(ap5);
f0111cd2:	83 ec 04             	sub    $0x4,%esp
f0111cd5:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0111cdb:	50                   	push   %eax
f0111cdc:	68 98 92 13 f0       	push   $0xf0139298
f0111ce1:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111ce7:	50                   	push   %eax
f0111ce8:	e8 7d f7 01 00       	call   f013146a <strcconcat>
f0111ced:	83 c4 10             	add    $0x10,%esp
f0111cf0:	83 ec 0c             	sub    $0xc,%esp
f0111cf3:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0111cf9:	50                   	push   %eax
f0111cfa:	e8 71 f0 fe ff       	call   f0100d70 <execute_command>
f0111cff:	83 c4 10             	add    $0x10,%esp
	char ap6[100] ;strcconcat(aup_cmd, " 0x1402000", ap6); execute_command(ap6);
f0111d02:	83 ec 04             	sub    $0x4,%esp
f0111d05:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0111d0b:	50                   	push   %eax
f0111d0c:	68 a3 92 13 f0       	push   $0xf01392a3
f0111d11:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111d17:	50                   	push   %eax
f0111d18:	e8 4d f7 01 00       	call   f013146a <strcconcat>
f0111d1d:	83 c4 10             	add    $0x10,%esp
f0111d20:	83 ec 0c             	sub    $0xc,%esp
f0111d23:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0111d29:	50                   	push   %eax
f0111d2a:	e8 41 f0 fe ff       	call   f0100d70 <execute_command>
f0111d2f:	83 c4 10             	add    $0x10,%esp
	char ap7[100] ;strcconcat(aup_cmd, " 0x1C00000", ap7); execute_command(ap7);
f0111d32:	83 ec 04             	sub    $0x4,%esp
f0111d35:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0111d3b:	50                   	push   %eax
f0111d3c:	68 ae 92 13 f0       	push   $0xf01392ae
f0111d41:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111d47:	50                   	push   %eax
f0111d48:	e8 1d f7 01 00       	call   f013146a <strcconcat>
f0111d4d:	83 c4 10             	add    $0x10,%esp
f0111d50:	83 ec 0c             	sub    $0xc,%esp
f0111d53:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0111d59:	50                   	push   %eax
f0111d5a:	e8 11 f0 fe ff       	call   f0100d70 <execute_command>
f0111d5f:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x1400000; *ptr1 = 'a';
f0111d62:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
f0111d69:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111d6c:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x14007FF; *ptr1 = 'b';
f0111d6f:	c7 45 c0 ff 07 40 01 	movl   $0x14007ff,-0x40(%ebp)
f0111d76:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111d79:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x1400FFF; *ptr1 = 'c';
f0111d7c:	c7 45 c0 ff 0f 40 01 	movl   $0x1400fff,-0x40(%ebp)
f0111d83:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111d86:	c6 00 63             	movb   $0x63,(%eax)
	ptr1 = (char*)0x1C00000; *ptr1 = 'x';
f0111d89:	c7 45 c0 00 00 c0 01 	movl   $0x1c00000,-0x40(%ebp)
f0111d90:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111d93:	c6 00 78             	movb   $0x78,(%eax)
	ptr1 = (char*)0x1C007FF; *ptr1 = 'y';
f0111d96:	c7 45 c0 ff 07 c0 01 	movl   $0x1c007ff,-0x40(%ebp)
f0111d9d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111da0:	c6 00 79             	movb   $0x79,(%eax)
	ptr1 = (char*)0x1C00FFF; *ptr1 = 'z';
f0111da3:	c7 45 c0 ff 0f c0 01 	movl   $0x1c00fff,-0x40(%ebp)
f0111daa:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111dad:	c6 00 7a             	movb   $0x7a,(%eax)
	uint32 srcp = GP(proc_directory, 0x1C00000) ;
f0111db0:	83 ec 08             	sub    $0x8,%esp
f0111db3:	68 00 00 c0 01       	push   $0x1c00000
f0111db8:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111dbb:	e8 94 3f 00 00       	call   f0115d54 <GP>
f0111dc0:	83 c4 10             	add    $0x10,%esp
f0111dc3:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	uint32 dstp = GP(proc_directory, 0x1400000) ;
f0111dc6:	83 ec 08             	sub    $0x8,%esp
f0111dc9:	68 00 00 40 01       	push   $0x1400000
f0111dce:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111dd1:	e8 7e 3f 00 00       	call   f0115d54 <GP>
f0111dd6:	83 c4 10             	add    $0x10,%esp
f0111dd9:	89 45 a0             	mov    %eax,-0x60(%ebp)

	ff1 = sys_calculate_free_frames();
f0111ddc:	e8 bc ad ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0111de1:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1C00000, 0x1400000, 1) ;
f0111de4:	6a 01                	push   $0x1
f0111de6:	68 00 00 40 01       	push   $0x1400000
f0111deb:	68 00 00 c0 01       	push   $0x1c00000
f0111df0:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111df3:	e8 58 69 ff ff       	call   f0108750 <cut_paste_pages>
f0111df8:	83 c4 10             	add    $0x10,%esp
f0111dfb:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0111dfe:	e8 9a ad ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0111e03:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0111e06:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0111e0a:	75 08                	jne    f0111e14 <test_cut_paste_pages+0x6b4>
f0111e0c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111e0f:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0111e12:	74 2b                	je     f0111e3f <test_cut_paste_pages+0x6df>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0111e14:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111e17:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0111e1a:	83 ec 0c             	sub    $0xc,%esp
f0111e1d:	50                   	push   %eax
f0111e1e:	ff 75 b4             	pushl  -0x4c(%ebp)
f0111e21:	68 bc 92 13 f0       	push   $0xf01392bc
f0111e26:	68 f9 01 00 00       	push   $0x1f9
f0111e2b:	68 3e 89 13 f0       	push   $0xf013893e
f0111e30:	e8 de e5 fe ff       	call   f0100413 <_warn>
f0111e35:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0111e38:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0111e3f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111e43:	74 04                	je     f0111e49 <test_cut_paste_pages+0x6e9>
f0111e45:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0111e49:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	int chk_cntnt = 1 ;
f0111e50:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CCP(proc_directory, 0x1C00000, 0x1400000, 1*PAGE_SIZE, 1, dstp , 0xFFF, srcp, 0xFFF, CHK_CUT_PASTE) != 1)
f0111e57:	83 ec 08             	sub    $0x8,%esp
f0111e5a:	6a 00                	push   $0x0
f0111e5c:	68 ff 0f 00 00       	push   $0xfff
f0111e61:	ff 75 a4             	pushl  -0x5c(%ebp)
f0111e64:	68 ff 0f 00 00       	push   $0xfff
f0111e69:	ff 75 a0             	pushl  -0x60(%ebp)
f0111e6c:	6a 01                	push   $0x1
f0111e6e:	68 00 10 00 00       	push   $0x1000
f0111e73:	68 00 00 40 01       	push   $0x1400000
f0111e78:	68 00 00 c0 01       	push   $0x1c00000
f0111e7d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111e80:	e8 22 3f 00 00       	call   f0115da7 <CCP>
f0111e85:	83 c4 30             	add    $0x30,%esp
f0111e88:	83 f8 01             	cmp    $0x1,%eax
f0111e8b:	74 28                	je     f0111eb5 <test_cut_paste_pages+0x755>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0111e8d:	83 ec 04             	sub    $0x4,%esp
f0111e90:	68 d0 91 13 f0       	push   $0xf01391d0
f0111e95:	68 02 02 00 00       	push   $0x202
f0111e9a:	68 3e 89 13 f0       	push   $0xf013893e
f0111e9f:	e8 6f e5 fe ff       	call   f0100413 <_warn>
f0111ea4:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0111ea7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f0111eae:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0111eb5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111eb9:	74 04                	je     f0111ebf <test_cut_paste_pages+0x75f>
f0111ebb:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0111ebf:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0111ec6:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0111eca:	0f 84 92 00 00 00    	je     f0111f62 <test_cut_paste_pages+0x802>
	{
		ptr1 = (char*)0x1400000;
f0111ed0:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0111ed7:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0111ede:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0111ee5:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0111eec:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0111ef3:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0111efa:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111efd:	8a 00                	mov    (%eax),%al
f0111eff:	3c 61                	cmp    $0x61,%al
f0111f01:	75 2d                	jne    f0111f30 <test_cut_paste_pages+0x7d0>
f0111f03:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111f06:	8a 00                	mov    (%eax),%al
f0111f08:	3c 78                	cmp    $0x78,%al
f0111f0a:	75 24                	jne    f0111f30 <test_cut_paste_pages+0x7d0>
f0111f0c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111f0f:	8a 00                	mov    (%eax),%al
f0111f11:	3c 62                	cmp    $0x62,%al
f0111f13:	75 1b                	jne    f0111f30 <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0111f15:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111f18:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0111f1a:	3c 79                	cmp    $0x79,%al
f0111f1c:	75 12                	jne    f0111f30 <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0111f1e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111f21:	8a 00                	mov    (%eax),%al
f0111f23:	3c 63                	cmp    $0x63,%al
f0111f25:	75 09                	jne    f0111f30 <test_cut_paste_pages+0x7d0>
f0111f27:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111f2a:	8a 00                	mov    (%eax),%al
f0111f2c:	3c 7a                	cmp    $0x7a,%al
f0111f2e:	74 21                	je     f0111f51 <test_cut_paste_pages+0x7f1>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0111f30:	83 ec 04             	sub    $0x4,%esp
f0111f33:	68 1c 92 13 f0       	push   $0xf013921c
f0111f38:	68 14 02 00 00       	push   $0x214
f0111f3d:	68 3e 89 13 f0       	push   $0xf013893e
f0111f42:	e8 cc e4 fe ff       	call   f0100413 <_warn>
f0111f47:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111f4a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0111f51:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111f55:	74 04                	je     f0111f5b <test_cut_paste_pages+0x7fb>
f0111f57:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0111f5b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	ff1 = sys_calculate_free_frames();
f0111f62:	e8 36 ac ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0111f67:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1400000, 0x1BFF000, 3) ;
f0111f6a:	6a 03                	push   $0x3
f0111f6c:	68 00 f0 bf 01       	push   $0x1bff000
f0111f71:	68 00 00 40 01       	push   $0x1400000
f0111f76:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111f79:	e8 d2 67 ff ff       	call   f0108750 <cut_paste_pages>
f0111f7e:	83 c4 10             	add    $0x10,%esp
f0111f81:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0111f84:	e8 14 ac ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0111f89:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0111f8c:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0111f90:	75 08                	jne    f0111f9a <test_cut_paste_pages+0x83a>
f0111f92:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111f95:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0111f98:	74 2b                	je     f0111fc5 <test_cut_paste_pages+0x865>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0111f9a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111f9d:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0111fa0:	83 ec 0c             	sub    $0xc,%esp
f0111fa3:	50                   	push   %eax
f0111fa4:	ff 75 b4             	pushl  -0x4c(%ebp)
f0111fa7:	68 bc 92 13 f0       	push   $0xf01392bc
f0111fac:	68 23 02 00 00       	push   $0x223
f0111fb1:	68 3e 89 13 f0       	push   $0xf013893e
f0111fb6:	e8 58 e4 fe ff       	call   f0100413 <_warn>
f0111fbb:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0111fbe:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0111fc5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111fc9:	74 04                	je     f0111fcf <test_cut_paste_pages+0x86f>
f0111fcb:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0111fcf:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	chk_cntnt = 1;
f0111fd6:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0111fdd:	83 ec 04             	sub    $0x4,%esp
f0111fe0:	6a 00                	push   $0x0
f0111fe2:	68 00 00 40 01       	push   $0x1400000
f0111fe7:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111fea:	e8 94 3b 00 00       	call   f0115b83 <CB>
f0111fef:	83 c4 10             	add    $0x10,%esp
f0111ff2:	83 f8 01             	cmp    $0x1,%eax
f0111ff5:	0f 85 80 00 00 00    	jne    f011207b <test_cut_paste_pages+0x91b>
f0111ffb:	83 ec 04             	sub    $0x4,%esp
f0111ffe:	6a 00                	push   $0x0
f0112000:	68 00 10 40 01       	push   $0x1401000
f0112005:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112008:	e8 76 3b 00 00       	call   f0115b83 <CB>
f011200d:	83 c4 10             	add    $0x10,%esp
f0112010:	83 f8 01             	cmp    $0x1,%eax
f0112013:	75 66                	jne    f011207b <test_cut_paste_pages+0x91b>
f0112015:	83 ec 04             	sub    $0x4,%esp
f0112018:	6a 00                	push   $0x0
f011201a:	68 00 20 40 01       	push   $0x1402000
f011201f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112022:	e8 5c 3b 00 00       	call   f0115b83 <CB>
f0112027:	83 c4 10             	add    $0x10,%esp
f011202a:	83 f8 01             	cmp    $0x1,%eax
f011202d:	75 4c                	jne    f011207b <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f011202f:	83 ec 04             	sub    $0x4,%esp
f0112032:	6a 00                	push   $0x0
f0112034:	68 00 f0 bf 01       	push   $0x1bff000
f0112039:	ff 75 d4             	pushl  -0x2c(%ebp)
f011203c:	e8 42 3b 00 00       	call   f0115b83 <CB>
f0112041:	83 c4 10             	add    $0x10,%esp
		correct = 0;
	}
	if (correct) eval += 10 ;
	correct = 1 ;
	chk_cntnt = 1;
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0112044:	85 c0                	test   %eax,%eax
f0112046:	75 33                	jne    f011207b <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0112048:	83 ec 04             	sub    $0x4,%esp
f011204b:	6a 00                	push   $0x0
f011204d:	68 00 00 c0 01       	push   $0x1c00000
f0112052:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112055:	e8 29 3b 00 00       	call   f0115b83 <CB>
f011205a:	83 c4 10             	add    $0x10,%esp
f011205d:	83 f8 01             	cmp    $0x1,%eax
f0112060:	75 19                	jne    f011207b <test_cut_paste_pages+0x91b>
f0112062:	83 ec 04             	sub    $0x4,%esp
f0112065:	6a 00                	push   $0x0
f0112067:	68 00 10 c0 01       	push   $0x1c01000
f011206c:	ff 75 d4             	pushl  -0x2c(%ebp)
f011206f:	e8 0f 3b 00 00       	call   f0115b83 <CB>
f0112074:	83 c4 10             	add    $0x10,%esp
f0112077:	85 c0                	test   %eax,%eax
f0112079:	74 28                	je     f01120a3 <test_cut_paste_pages+0x943>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions)\n");
f011207b:	83 ec 04             	sub    $0x4,%esp
f011207e:	68 1c 93 13 f0       	push   $0xf013931c
f0112083:	68 2c 02 00 00       	push   $0x22c
f0112088:	68 3e 89 13 f0       	push   $0xf013893e
f011208d:	e8 81 e3 fe ff       	call   f0100413 <_warn>
f0112092:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112095:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f011209c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f01120a3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01120a7:	74 04                	je     f01120ad <test_cut_paste_pages+0x94d>
f01120a9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f01120ad:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f01120b4:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01120b8:	0f 84 99 00 00 00    	je     f0112157 <test_cut_paste_pages+0x9f7>
	{
		ptr1 = (char*)0x1400000;
f01120be:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f01120c5:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f01120cc:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f01120d3:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f01120da:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f01120e1:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f01120e8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01120eb:	8a 00                	mov    (%eax),%al
f01120ed:	3c 61                	cmp    $0x61,%al
f01120ef:	75 2d                	jne    f011211e <test_cut_paste_pages+0x9be>
f01120f1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01120f4:	8a 00                	mov    (%eax),%al
f01120f6:	3c 78                	cmp    $0x78,%al
f01120f8:	75 24                	jne    f011211e <test_cut_paste_pages+0x9be>
f01120fa:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01120fd:	8a 00                	mov    (%eax),%al
f01120ff:	3c 62                	cmp    $0x62,%al
f0112101:	75 1b                	jne    f011211e <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112103:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112106:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112108:	3c 79                	cmp    $0x79,%al
f011210a:	75 12                	jne    f011211e <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f011210c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011210f:	8a 00                	mov    (%eax),%al
f0112111:	3c 63                	cmp    $0x63,%al
f0112113:	75 09                	jne    f011211e <test_cut_paste_pages+0x9be>
f0112115:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112118:	8a 00                	mov    (%eax),%al
f011211a:	3c 7a                	cmp    $0x7a,%al
f011211c:	74 28                	je     f0112146 <test_cut_paste_pages+0x9e6>
		{
			correct = 0;
f011211e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chk_cntnt = 0;
f0112125:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011212c:	83 ec 04             	sub    $0x4,%esp
f011212f:	68 1c 92 13 f0       	push   $0xf013921c
f0112134:	68 40 02 00 00       	push   $0x240
f0112139:	68 3e 89 13 f0       	push   $0xf013893e
f011213e:	e8 d0 e2 fe ff       	call   f0100413 <_warn>
f0112143:	83 c4 10             	add    $0x10,%esp
		}
		if (correct) eval += 5 ;
f0112146:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011214a:	74 04                	je     f0112150 <test_cut_paste_pages+0x9f0>
f011214c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112150:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	cprintf("CASE II: END\n") ;
f0112157:	83 ec 0c             	sub    $0xc,%esp
f011215a:	68 55 93 13 f0       	push   $0xf0139355
f011215f:	e8 aa eb fe ff       	call   f0100d0e <cprintf>
f0112164:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] cut_paste_pages: FINISHED. Evaluation = %d\n", eval);
f0112167:	83 ec 08             	sub    $0x8,%esp
f011216a:	ff 75 e4             	pushl  -0x1c(%ebp)
f011216d:	68 64 93 13 f0       	push   $0xf0139364
f0112172:	e8 97 eb fe ff       	call   f0100d0e <cprintf>
f0112177:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f011217a:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f011217e:	75 10                	jne    f0112190 <test_cut_paste_pages+0xa30>
		cprintf("Congratulations!! test cut_paste_pages completed successfully.\n");
f0112180:	83 ec 0c             	sub    $0xc,%esp
f0112183:	68 98 93 13 f0       	push   $0xf0139398
f0112188:	e8 81 eb fe ff       	call   f0100d0e <cprintf>
f011218d:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0112190:	a1 ac 5d 87 f0       	mov    0xf0875dac,%eax
f0112195:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0112198:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011219b:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f011219e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01121a3:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01121a6:	5b                   	pop    %ebx
f01121a7:	5e                   	pop    %esi
f01121a8:	5f                   	pop    %edi
f01121a9:	5d                   	pop    %ebp
f01121aa:	c3                   	ret    

f01121ab <test_copy_paste_chunk>:

//===============================
// 2) TEST COPY-PASTE CHUNK:
//===============================
int test_copy_paste_chunk()
{
f01121ab:	55                   	push   %ebp
f01121ac:	89 e5                	mov    %esp,%ebp
f01121ae:	57                   	push   %edi
f01121af:	56                   	push   %esi
f01121b0:	53                   	push   %ebx
f01121b1:	81 ec ac 05 00 00    	sub    $0x5ac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01121b7:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f01121bd:	bb d8 93 13 f0       	mov    $0xf01393d8,%ebx
f01121c2:	ba 0f 00 00 00       	mov    $0xf,%edx
f01121c7:	89 c7                	mov    %eax,%edi
f01121c9:	89 de                	mov    %ebx,%esi
f01121cb:	89 d1                	mov    %edx,%ecx
f01121cd:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01121cf:	8d 95 51 ff ff ff    	lea    -0xaf(%ebp),%edx
f01121d5:	b9 23 00 00 00       	mov    $0x23,%ecx
f01121da:	b0 00                	mov    $0x0,%al
f01121dc:	89 d7                	mov    %edx,%edi
f01121de:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01121e0:	6a 00                	push   $0x0
f01121e2:	6a 0a                	push   $0xa
f01121e4:	6a 14                	push   $0x14
f01121e6:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f01121ec:	50                   	push   %eax
f01121ed:	e8 71 6c ff ff       	call   f0108e63 <env_create>
f01121f2:	83 c4 10             	add    $0x10,%esp
f01121f5:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01121f8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01121fb:	8b 40 5c             	mov    0x5c(%eax),%eax
f01121fe:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0112201:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112204:	8b 40 60             	mov    0x60(%eax),%eax
f0112207:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f011220d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0112213:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0112216:	c7 85 2e ff ff ff 61 	movl   $0x20707561,-0xd2(%ebp)
f011221d:	75 70 20 
f0112220:	c7 85 32 ff ff ff 00 	movl   $0x0,-0xce(%ebp)
f0112227:	00 00 00 
f011222a:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0112230:	b9 03 00 00 00       	mov    $0x3,%ecx
f0112235:	b8 00 00 00 00       	mov    $0x0,%eax
f011223a:	89 d7                	mov    %edx,%edi
f011223c:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f011223e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112241:	8b 40 4c             	mov    0x4c(%eax),%eax
f0112244:	83 ec 08             	sub    $0x8,%esp
f0112247:	8d 95 1a ff ff ff    	lea    -0xe6(%ebp),%edx
f011224d:	52                   	push   %edx
f011224e:	50                   	push   %eax
f011224f:	e8 1e f1 01 00       	call   f0131372 <ltostr>
f0112254:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0112257:	83 ec 04             	sub    $0x4,%esp
f011225a:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112260:	50                   	push   %eax
f0112261:	8d 85 1a ff ff ff    	lea    -0xe6(%ebp),%eax
f0112267:	50                   	push   %eax
f0112268:	8d 85 2e ff ff ff    	lea    -0xd2(%ebp),%eax
f011226e:	50                   	push   %eax
f011226f:	e8 f6 f1 01 00       	call   f013146a <strcconcat>
f0112274:	83 c4 10             	add    $0x10,%esp
	//===================================================

	ClearUserSpace(proc_directory);
f0112277:	83 ec 0c             	sub    $0xc,%esp
f011227a:	ff 75 d4             	pushl  -0x2c(%ebp)
f011227d:	e8 f1 3a 00 00       	call   f0115d73 <ClearUserSpace>
f0112282:	83 c4 10             	add    $0x10,%esp
	int numOfArgs = 0;
f0112285:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;
	uint32 res =0;
f011228c:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 eval = 0; int correct = 1 ;
f0112293:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f011229a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter ;
	char *ch1, *ch2, *ch3, *ch4, *ch5, *ch6, *ch7,*ch8, *ch9, *ch10, *ch11, *ch12 ;
	char tch[13];
	int kilo = 1024 ;
f01122a1:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f01122a8:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	/*==================================================*/
	/*PART I: Destination page(s) exist & read only 20% */
	/*==================================================*/
	cprintf("\nCASE I: Destination page(s) exist & read only [20%]\n") ;
f01122af:	83 ec 0c             	sub    $0xc,%esp
f01122b2:	68 0c 94 13 f0       	push   $0xf013940c
f01122b7:	e8 52 ea fe ff       	call   f0100d0e <cprintf>
f01122bc:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f01122bf:	83 ec 04             	sub    $0x4,%esp
f01122c2:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01122c8:	50                   	push   %eax
f01122c9:	68 42 94 13 f0       	push   $0xf0139442
f01122ce:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01122d4:	50                   	push   %eax
f01122d5:	e8 90 f1 01 00       	call   f013146a <strcconcat>
f01122da:	83 c4 10             	add    $0x10,%esp
f01122dd:	83 ec 0c             	sub    $0xc,%esp
f01122e0:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01122e6:	50                   	push   %eax
f01122e7:	e8 84 ea fe ff       	call   f0100d70 <execute_command>
f01122ec:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x1000", c1); execute_command(c1);
f01122ef:	83 ec 04             	sub    $0x4,%esp
f01122f2:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01122f8:	50                   	push   %eax
f01122f9:	68 47 94 13 f0       	push   $0xf0139447
f01122fe:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112304:	50                   	push   %eax
f0112305:	e8 60 f1 01 00       	call   f013146a <strcconcat>
f011230a:	83 c4 10             	add    $0x10,%esp
f011230d:	83 ec 0c             	sub    $0xc,%esp
f0112310:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112316:	50                   	push   %eax
f0112317:	e8 54 ea fe ff       	call   f0100d70 <execute_command>
f011231c:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x000000 a";execute_command(c2);
f011231f:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112325:	bb 4d 97 13 f0       	mov    $0xf013974d,%ebx
f011232a:	ba 0f 00 00 00       	mov    $0xf,%edx
f011232f:	89 c7                	mov    %eax,%edi
f0112331:	89 de                	mov    %ebx,%esi
f0112333:	89 d1                	mov    %edx,%ecx
f0112335:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112337:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f011233d:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112342:	b0 00                	mov    $0x0,%al
f0112344:	89 d7                	mov    %edx,%edi
f0112346:	f3 aa                	rep stos %al,%es:(%edi)
f0112348:	83 ec 0c             	sub    $0xc,%esp
f011234b:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112351:	50                   	push   %eax
f0112352:	e8 19 ea fe ff       	call   f0100d70 <execute_command>
f0112357:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x0007FF b";execute_command(c3);
f011235a:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112360:	bb b1 97 13 f0       	mov    $0xf01397b1,%ebx
f0112365:	ba 0f 00 00 00       	mov    $0xf,%edx
f011236a:	89 c7                	mov    %eax,%edi
f011236c:	89 de                	mov    %ebx,%esi
f011236e:	89 d1                	mov    %edx,%ecx
f0112370:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112372:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0112378:	b9 55 00 00 00       	mov    $0x55,%ecx
f011237d:	b0 00                	mov    $0x0,%al
f011237f:	89 d7                	mov    %edx,%edi
f0112381:	f3 aa                	rep stos %al,%es:(%edi)
f0112383:	83 ec 0c             	sub    $0xc,%esp
f0112386:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f011238c:	50                   	push   %eax
f011238d:	e8 de e9 fe ff       	call   f0100d70 <execute_command>
f0112392:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x000FFF c";execute_command(c4);
f0112395:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f011239b:	bb 15 98 13 f0       	mov    $0xf0139815,%ebx
f01123a0:	ba 0f 00 00 00       	mov    $0xf,%edx
f01123a5:	89 c7                	mov    %eax,%edi
f01123a7:	89 de                	mov    %ebx,%esi
f01123a9:	89 d1                	mov    %edx,%ecx
f01123ab:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01123ad:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f01123b3:	b9 55 00 00 00       	mov    $0x55,%ecx
f01123b8:	b0 00                	mov    $0x0,%al
f01123ba:	89 d7                	mov    %edx,%edi
f01123bc:	f3 aa                	rep stos %al,%es:(%edi)
f01123be:	83 ec 0c             	sub    $0xc,%esp
f01123c1:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f01123c7:	50                   	push   %eax
f01123c8:	e8 a3 e9 fe ff       	call   f0100d70 <execute_command>
f01123cd:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x001000 d";execute_command(c22);
f01123d0:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f01123d6:	bb 79 98 13 f0       	mov    $0xf0139879,%ebx
f01123db:	ba 0f 00 00 00       	mov    $0xf,%edx
f01123e0:	89 c7                	mov    %eax,%edi
f01123e2:	89 de                	mov    %ebx,%esi
f01123e4:	89 d1                	mov    %edx,%ecx
f01123e6:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01123e8:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f01123ee:	b9 55 00 00 00       	mov    $0x55,%ecx
f01123f3:	b0 00                	mov    $0x0,%al
f01123f5:	89 d7                	mov    %edx,%edi
f01123f7:	f3 aa                	rep stos %al,%es:(%edi)
f01123f9:	83 ec 0c             	sub    $0xc,%esp
f01123fc:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112402:	50                   	push   %eax
f0112403:	e8 68 e9 fe ff       	call   f0100d70 <execute_command>
f0112408:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x0017FF e";execute_command(c23);
f011240b:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112411:	bb dd 98 13 f0       	mov    $0xf01398dd,%ebx
f0112416:	ba 0f 00 00 00       	mov    $0xf,%edx
f011241b:	89 c7                	mov    %eax,%edi
f011241d:	89 de                	mov    %ebx,%esi
f011241f:	89 d1                	mov    %edx,%ecx
f0112421:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112423:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0112429:	b9 55 00 00 00       	mov    $0x55,%ecx
f011242e:	b0 00                	mov    $0x0,%al
f0112430:	89 d7                	mov    %edx,%edi
f0112432:	f3 aa                	rep stos %al,%es:(%edi)
f0112434:	83 ec 0c             	sub    $0xc,%esp
f0112437:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f011243d:	50                   	push   %eax
f011243e:	e8 2d e9 fe ff       	call   f0100d70 <execute_command>
f0112443:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x001FFF f";execute_command(c24);
f0112446:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f011244c:	bb 41 99 13 f0       	mov    $0xf0139941,%ebx
f0112451:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112456:	89 c7                	mov    %eax,%edi
f0112458:	89 de                	mov    %ebx,%esi
f011245a:	89 d1                	mov    %edx,%ecx
f011245c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011245e:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0112464:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112469:	b0 00                	mov    $0x0,%al
f011246b:	89 d7                	mov    %edx,%edi
f011246d:	f3 aa                	rep stos %al,%es:(%edi)
f011246f:	83 ec 0c             	sub    $0xc,%esp
f0112472:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112478:	50                   	push   %eax
f0112479:	e8 f2 e8 fe ff       	call   f0100d70 <execute_command>
f011247e:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x100000", c5); execute_command(c5);
f0112481:	83 ec 04             	sub    $0x4,%esp
f0112484:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011248a:	50                   	push   %eax
f011248b:	68 4f 94 13 f0       	push   $0xf013944f
f0112490:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112496:	50                   	push   %eax
f0112497:	e8 ce ef 01 00       	call   f013146a <strcconcat>
f011249c:	83 c4 10             	add    $0x10,%esp
f011249f:	83 ec 0c             	sub    $0xc,%esp
f01124a2:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01124a8:	50                   	push   %eax
f01124a9:	e8 c2 e8 fe ff       	call   f0100d70 <execute_command>
f01124ae:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x101000 r", c5); execute_command(c5);
f01124b1:	83 ec 04             	sub    $0x4,%esp
f01124b4:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01124ba:	50                   	push   %eax
f01124bb:	68 59 94 13 f0       	push   $0xf0139459
f01124c0:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01124c6:	50                   	push   %eax
f01124c7:	e8 9e ef 01 00       	call   f013146a <strcconcat>
f01124cc:	83 c4 10             	add    $0x10,%esp
f01124cf:	83 ec 0c             	sub    $0xc,%esp
f01124d2:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01124d8:	50                   	push   %eax
f01124d9:	e8 92 e8 fe ff       	call   f0100d70 <execute_command>
f01124de:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x100000 x";execute_command(c6);
f01124e1:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01124e7:	bb a5 99 13 f0       	mov    $0xf01399a5,%ebx
f01124ec:	ba 0f 00 00 00       	mov    $0xf,%edx
f01124f1:	89 c7                	mov    %eax,%edi
f01124f3:	89 de                	mov    %ebx,%esi
f01124f5:	89 d1                	mov    %edx,%ecx
f01124f7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01124f9:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f01124ff:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112504:	b0 00                	mov    $0x0,%al
f0112506:	89 d7                	mov    %edx,%edi
f0112508:	f3 aa                	rep stos %al,%es:(%edi)
f011250a:	83 ec 0c             	sub    $0xc,%esp
f011250d:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112513:	50                   	push   %eax
f0112514:	e8 57 e8 fe ff       	call   f0100d70 <execute_command>
f0112519:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x1007FF y";execute_command(c7);
f011251c:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112522:	bb 09 9a 13 f0       	mov    $0xf0139a09,%ebx
f0112527:	ba 0f 00 00 00       	mov    $0xf,%edx
f011252c:	89 c7                	mov    %eax,%edi
f011252e:	89 de                	mov    %ebx,%esi
f0112530:	89 d1                	mov    %edx,%ecx
f0112532:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112534:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f011253a:	b9 55 00 00 00       	mov    $0x55,%ecx
f011253f:	b0 00                	mov    $0x0,%al
f0112541:	89 d7                	mov    %edx,%edi
f0112543:	f3 aa                	rep stos %al,%es:(%edi)
f0112545:	83 ec 0c             	sub    $0xc,%esp
f0112548:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011254e:	50                   	push   %eax
f011254f:	e8 1c e8 fe ff       	call   f0100d70 <execute_command>
f0112554:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x100FFF z";execute_command(c8);
f0112557:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f011255d:	bb 6d 9a 13 f0       	mov    $0xf0139a6d,%ebx
f0112562:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112567:	89 c7                	mov    %eax,%edi
f0112569:	89 de                	mov    %ebx,%esi
f011256b:	89 d1                	mov    %edx,%ecx
f011256d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011256f:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0112575:	b9 55 00 00 00       	mov    $0x55,%ecx
f011257a:	b0 00                	mov    $0x0,%al
f011257c:	89 d7                	mov    %edx,%edi
f011257e:	f3 aa                	rep stos %al,%es:(%edi)
f0112580:	83 ec 0c             	sub    $0xc,%esp
f0112583:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112589:	50                   	push   %eax
f011258a:	e8 e1 e7 fe ff       	call   f0100d70 <execute_command>
f011258f:	83 c4 10             	add    $0x10,%esp

		ch1 = (char*)0x000000; ch2 = (char*)0x100000;
f0112592:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0112599:	c7 45 b8 00 00 10 00 	movl   $0x100000,-0x48(%ebp)
		ch3 = (char*)0x0007FF; ch4 = (char*)0x1007FF;
f01125a0:	c7 45 b4 ff 07 00 00 	movl   $0x7ff,-0x4c(%ebp)
f01125a7:	c7 45 b0 ff 07 10 00 	movl   $0x1007ff,-0x50(%ebp)
		ch5 = (char*)0x000FFF; ch6 = (char*)0x100FFF;
f01125ae:	c7 45 ac ff 0f 00 00 	movl   $0xfff,-0x54(%ebp)
f01125b5:	c7 45 a8 ff 0f 10 00 	movl   $0x100fff,-0x58(%ebp)
		ch7 = (char*)0x001000; ch8 = (char*)0x101000;
f01125bc:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01125c3:	c7 45 a0 00 10 10 00 	movl   $0x101000,-0x60(%ebp)
		ch9 = (char*)0x0017FF; ch10= (char*)0x1017FF;
f01125ca:	c7 45 9c ff 17 00 00 	movl   $0x17ff,-0x64(%ebp)
f01125d1:	c7 45 98 ff 17 10 00 	movl   $0x1017ff,-0x68(%ebp)
		ch11= (char*)0x001FFF; ch12= (char*)0x101FFF;
f01125d8:	c7 45 94 ff 1f 00 00 	movl   $0x1fff,-0x6c(%ebp)
f01125df:	c7 45 90 ff 1f 10 00 	movl   $0x101fff,-0x70(%ebp)

		tch[8] = *ch8 ;tch[10] = *ch10 ;tch[12] = *ch12 ;
f01125e6:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01125e9:	8a 00                	mov    (%eax),%al
f01125eb:	88 85 a3 fe ff ff    	mov    %al,-0x15d(%ebp)
f01125f1:	8b 45 98             	mov    -0x68(%ebp),%eax
f01125f4:	8a 00                	mov    (%eax),%al
f01125f6:	88 85 a5 fe ff ff    	mov    %al,-0x15b(%ebp)
f01125fc:	8b 45 90             	mov    -0x70(%ebp),%eax
f01125ff:	8a 00                	mov    (%eax),%al
f0112601:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112607:	e8 91 a5 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011260c:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x0, 0x100000, 6*kilo);
f011260f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112612:	89 d0                	mov    %edx,%eax
f0112614:	01 c0                	add    %eax,%eax
f0112616:	01 d0                	add    %edx,%eax
f0112618:	01 c0                	add    %eax,%eax
f011261a:	50                   	push   %eax
f011261b:	68 00 00 10 00       	push   $0x100000
f0112620:	6a 00                	push   $0x0
f0112622:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112625:	e8 a4 62 ff ff       	call   f01088ce <copy_paste_chunk>
f011262a:	83 c4 10             	add    $0x10,%esp
f011262d:	89 45 88             	mov    %eax,-0x78(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112630:	e8 68 a5 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0112635:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0112638:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != -1 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f011263f:	83 7d 88 ff          	cmpl   $0xffffffff,-0x78(%ebp)
f0112643:	75 08                	jne    f011264d <test_copy_paste_chunk+0x4a2>
f0112645:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112648:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011264b:	74 2b                	je     f0112678 <test_copy_paste_chunk+0x4cd>
		{
			warn("[EVAL] copy_paste_chunk: Failed (dest is read-only... operation should be denied) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011264d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112650:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112653:	83 ec 0c             	sub    $0xc,%esp
f0112656:	50                   	push   %eax
f0112657:	ff 75 88             	pushl  -0x78(%ebp)
f011265a:	68 68 94 13 f0       	push   $0xf0139468
f011265f:	68 93 02 00 00       	push   $0x293
f0112664:	68 3e 89 13 f0       	push   $0xf013893e
f0112669:	e8 a5 dd fe ff       	call   f0100413 <_warn>
f011266e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112671:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112678:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011267c:	74 04                	je     f0112682 <test_copy_paste_chunk+0x4d7>
f011267e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112682:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'x' || *ch3 != 'b' || *ch4 != 'y' || *ch5 != 'c' || *ch6 != 'z'
f0112689:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011268c:	8a 00                	mov    (%eax),%al
f011268e:	3c 61                	cmp    $0x61,%al
f0112690:	75 75                	jne    f0112707 <test_copy_paste_chunk+0x55c>
f0112692:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112695:	8a 00                	mov    (%eax),%al
f0112697:	3c 78                	cmp    $0x78,%al
f0112699:	75 6c                	jne    f0112707 <test_copy_paste_chunk+0x55c>
f011269b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011269e:	8a 00                	mov    (%eax),%al
f01126a0:	3c 62                	cmp    $0x62,%al
f01126a2:	75 63                	jne    f0112707 <test_copy_paste_chunk+0x55c>
f01126a4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01126a7:	8a 00                	mov    (%eax),%al
f01126a9:	3c 79                	cmp    $0x79,%al
f01126ab:	75 5a                	jne    f0112707 <test_copy_paste_chunk+0x55c>
f01126ad:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01126b0:	8a 00                	mov    (%eax),%al
f01126b2:	3c 63                	cmp    $0x63,%al
f01126b4:	75 51                	jne    f0112707 <test_copy_paste_chunk+0x55c>
f01126b6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01126b9:	8a 00                	mov    (%eax),%al
f01126bb:	3c 7a                	cmp    $0x7a,%al
f01126bd:	75 48                	jne    f0112707 <test_copy_paste_chunk+0x55c>
				||  *ch7 != 'd' || *ch8 != tch[8] || *ch9 != 'e' || *ch10 != tch[10] || *ch11!= 'f' || *ch12 != tch[12])
f01126bf:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01126c2:	8a 00                	mov    (%eax),%al
f01126c4:	3c 64                	cmp    $0x64,%al
f01126c6:	75 3f                	jne    f0112707 <test_copy_paste_chunk+0x55c>
f01126c8:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01126cb:	8a 10                	mov    (%eax),%dl
f01126cd:	8a 85 a3 fe ff ff    	mov    -0x15d(%ebp),%al
f01126d3:	38 c2                	cmp    %al,%dl
f01126d5:	75 30                	jne    f0112707 <test_copy_paste_chunk+0x55c>
f01126d7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01126da:	8a 00                	mov    (%eax),%al
f01126dc:	3c 65                	cmp    $0x65,%al
f01126de:	75 27                	jne    f0112707 <test_copy_paste_chunk+0x55c>
f01126e0:	8b 45 98             	mov    -0x68(%ebp),%eax
f01126e3:	8a 10                	mov    (%eax),%dl
f01126e5:	8a 85 a5 fe ff ff    	mov    -0x15b(%ebp),%al
f01126eb:	38 c2                	cmp    %al,%dl
f01126ed:	75 18                	jne    f0112707 <test_copy_paste_chunk+0x55c>
f01126ef:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01126f2:	8a 00                	mov    (%eax),%al
f01126f4:	3c 66                	cmp    $0x66,%al
f01126f6:	75 0f                	jne    f0112707 <test_copy_paste_chunk+0x55c>
f01126f8:	8b 45 90             	mov    -0x70(%ebp),%eax
f01126fb:	8a 10                	mov    (%eax),%dl
f01126fd:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0112703:	38 c2                	cmp    %al,%dl
f0112705:	74 21                	je     f0112728 <test_copy_paste_chunk+0x57d>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112707:	83 ec 04             	sub    $0x4,%esp
f011270a:	68 cc 94 13 f0       	push   $0xf01394cc
f011270f:	68 9c 02 00 00       	push   $0x29c
f0112714:	68 3e 89 13 f0       	push   $0xf013893e
f0112719:	e8 f5 dc fe ff       	call   f0100413 <_warn>
f011271e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112721:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112728:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011272c:	74 04                	je     f0112732 <test_copy_paste_chunk+0x587>
f011272e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112732:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE I: END \n") ;
f0112739:	83 ec 0c             	sub    $0xc,%esp
f011273c:	68 06 95 13 f0       	push   $0xf0139506
f0112741:	e8 c8 e5 fe ff       	call   f0100d0e <cprintf>
f0112746:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: Destination page(s) exist & writable 40% */
	/*==================================================*/
	cprintf("\nCASE II: Destination page(s) exist & writable [40%]\n") ;
f0112749:	83 ec 0c             	sub    $0xc,%esp
f011274c:	68 18 95 13 f0       	push   $0xf0139518
f0112751:	e8 b8 e5 fe ff       	call   f0100d0e <cprintf>
f0112756:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x200000", c1); execute_command(c1);
f0112759:	83 ec 04             	sub    $0x4,%esp
f011275c:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112762:	50                   	push   %eax
f0112763:	68 4e 95 13 f0       	push   $0xf013954e
f0112768:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011276e:	50                   	push   %eax
f011276f:	e8 f6 ec 01 00       	call   f013146a <strcconcat>
f0112774:	83 c4 10             	add    $0x10,%esp
f0112777:	83 ec 0c             	sub    $0xc,%esp
f011277a:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112780:	50                   	push   %eax
f0112781:	e8 ea e5 fe ff       	call   f0100d70 <execute_command>
f0112786:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x201000", c1); execute_command(c1);
f0112789:	83 ec 04             	sub    $0x4,%esp
f011278c:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112792:	50                   	push   %eax
f0112793:	68 58 95 13 f0       	push   $0xf0139558
f0112798:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011279e:	50                   	push   %eax
f011279f:	e8 c6 ec 01 00       	call   f013146a <strcconcat>
f01127a4:	83 c4 10             	add    $0x10,%esp
f01127a7:	83 ec 0c             	sub    $0xc,%esp
f01127aa:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01127b0:	50                   	push   %eax
f01127b1:	e8 ba e5 fe ff       	call   f0100d70 <execute_command>
f01127b6:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x200000 a";execute_command(c2);
f01127b9:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f01127bf:	bb d1 9a 13 f0       	mov    $0xf0139ad1,%ebx
f01127c4:	ba 0f 00 00 00       	mov    $0xf,%edx
f01127c9:	89 c7                	mov    %eax,%edi
f01127cb:	89 de                	mov    %ebx,%esi
f01127cd:	89 d1                	mov    %edx,%ecx
f01127cf:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01127d1:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f01127d7:	b9 55 00 00 00       	mov    $0x55,%ecx
f01127dc:	b0 00                	mov    $0x0,%al
f01127de:	89 d7                	mov    %edx,%edi
f01127e0:	f3 aa                	rep stos %al,%es:(%edi)
f01127e2:	83 ec 0c             	sub    $0xc,%esp
f01127e5:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f01127eb:	50                   	push   %eax
f01127ec:	e8 7f e5 fe ff       	call   f0100d70 <execute_command>
f01127f1:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x2007FF b";execute_command(c3);
f01127f4:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f01127fa:	bb 35 9b 13 f0       	mov    $0xf0139b35,%ebx
f01127ff:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112804:	89 c7                	mov    %eax,%edi
f0112806:	89 de                	mov    %ebx,%esi
f0112808:	89 d1                	mov    %edx,%ecx
f011280a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011280c:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0112812:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112817:	b0 00                	mov    $0x0,%al
f0112819:	89 d7                	mov    %edx,%edi
f011281b:	f3 aa                	rep stos %al,%es:(%edi)
f011281d:	83 ec 0c             	sub    $0xc,%esp
f0112820:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112826:	50                   	push   %eax
f0112827:	e8 44 e5 fe ff       	call   f0100d70 <execute_command>
f011282c:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x200FFF c";execute_command(c4);
f011282f:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112835:	bb 99 9b 13 f0       	mov    $0xf0139b99,%ebx
f011283a:	ba 0f 00 00 00       	mov    $0xf,%edx
f011283f:	89 c7                	mov    %eax,%edi
f0112841:	89 de                	mov    %ebx,%esi
f0112843:	89 d1                	mov    %edx,%ecx
f0112845:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112847:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f011284d:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112852:	b0 00                	mov    $0x0,%al
f0112854:	89 d7                	mov    %edx,%edi
f0112856:	f3 aa                	rep stos %al,%es:(%edi)
f0112858:	83 ec 0c             	sub    $0xc,%esp
f011285b:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112861:	50                   	push   %eax
f0112862:	e8 09 e5 fe ff       	call   f0100d70 <execute_command>
f0112867:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x201000 d";execute_command(c22);
f011286a:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112870:	bb fd 9b 13 f0       	mov    $0xf0139bfd,%ebx
f0112875:	ba 0f 00 00 00       	mov    $0xf,%edx
f011287a:	89 c7                	mov    %eax,%edi
f011287c:	89 de                	mov    %ebx,%esi
f011287e:	89 d1                	mov    %edx,%ecx
f0112880:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112882:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0112888:	b9 55 00 00 00       	mov    $0x55,%ecx
f011288d:	b0 00                	mov    $0x0,%al
f011288f:	89 d7                	mov    %edx,%edi
f0112891:	f3 aa                	rep stos %al,%es:(%edi)
f0112893:	83 ec 0c             	sub    $0xc,%esp
f0112896:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f011289c:	50                   	push   %eax
f011289d:	e8 ce e4 fe ff       	call   f0100d70 <execute_command>
f01128a2:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x2017FF e";execute_command(c23);
f01128a5:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f01128ab:	bb 61 9c 13 f0       	mov    $0xf0139c61,%ebx
f01128b0:	ba 0f 00 00 00       	mov    $0xf,%edx
f01128b5:	89 c7                	mov    %eax,%edi
f01128b7:	89 de                	mov    %ebx,%esi
f01128b9:	89 d1                	mov    %edx,%ecx
f01128bb:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01128bd:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f01128c3:	b9 55 00 00 00       	mov    $0x55,%ecx
f01128c8:	b0 00                	mov    $0x0,%al
f01128ca:	89 d7                	mov    %edx,%edi
f01128cc:	f3 aa                	rep stos %al,%es:(%edi)
f01128ce:	83 ec 0c             	sub    $0xc,%esp
f01128d1:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f01128d7:	50                   	push   %eax
f01128d8:	e8 93 e4 fe ff       	call   f0100d70 <execute_command>
f01128dd:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x201FFF f";execute_command(c24);
f01128e0:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f01128e6:	bb c5 9c 13 f0       	mov    $0xf0139cc5,%ebx
f01128eb:	ba 0f 00 00 00       	mov    $0xf,%edx
f01128f0:	89 c7                	mov    %eax,%edi
f01128f2:	89 de                	mov    %ebx,%esi
f01128f4:	89 d1                	mov    %edx,%ecx
f01128f6:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01128f8:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f01128fe:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112903:	b0 00                	mov    $0x0,%al
f0112905:	89 d7                	mov    %edx,%edi
f0112907:	f3 aa                	rep stos %al,%es:(%edi)
f0112909:	83 ec 0c             	sub    $0xc,%esp
f011290c:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112912:	50                   	push   %eax
f0112913:	e8 58 e4 fe ff       	call   f0100d70 <execute_command>
f0112918:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x400000", c5); execute_command(c5);
f011291b:	83 ec 04             	sub    $0x4,%esp
f011291e:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112924:	50                   	push   %eax
f0112925:	68 62 95 13 f0       	push   $0xf0139562
f011292a:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112930:	50                   	push   %eax
f0112931:	e8 34 eb 01 00       	call   f013146a <strcconcat>
f0112936:	83 c4 10             	add    $0x10,%esp
f0112939:	83 ec 0c             	sub    $0xc,%esp
f011293c:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112942:	50                   	push   %eax
f0112943:	e8 28 e4 fe ff       	call   f0100d70 <execute_command>
f0112948:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x401000", c5); execute_command(c5);
f011294b:	83 ec 04             	sub    $0x4,%esp
f011294e:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112954:	50                   	push   %eax
f0112955:	68 6c 95 13 f0       	push   $0xf013956c
f011295a:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112960:	50                   	push   %eax
f0112961:	e8 04 eb 01 00       	call   f013146a <strcconcat>
f0112966:	83 c4 10             	add    $0x10,%esp
f0112969:	83 ec 0c             	sub    $0xc,%esp
f011296c:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112972:	50                   	push   %eax
f0112973:	e8 f8 e3 fe ff       	call   f0100d70 <execute_command>
f0112978:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x400000 x";execute_command(c6);
f011297b:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112981:	bb 29 9d 13 f0       	mov    $0xf0139d29,%ebx
f0112986:	ba 0f 00 00 00       	mov    $0xf,%edx
f011298b:	89 c7                	mov    %eax,%edi
f011298d:	89 de                	mov    %ebx,%esi
f011298f:	89 d1                	mov    %edx,%ecx
f0112991:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112993:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0112999:	b9 55 00 00 00       	mov    $0x55,%ecx
f011299e:	b0 00                	mov    $0x0,%al
f01129a0:	89 d7                	mov    %edx,%edi
f01129a2:	f3 aa                	rep stos %al,%es:(%edi)
f01129a4:	83 ec 0c             	sub    $0xc,%esp
f01129a7:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01129ad:	50                   	push   %eax
f01129ae:	e8 bd e3 fe ff       	call   f0100d70 <execute_command>
f01129b3:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x4007FF y";execute_command(c7);
f01129b6:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01129bc:	bb 8d 9d 13 f0       	mov    $0xf0139d8d,%ebx
f01129c1:	ba 0f 00 00 00       	mov    $0xf,%edx
f01129c6:	89 c7                	mov    %eax,%edi
f01129c8:	89 de                	mov    %ebx,%esi
f01129ca:	89 d1                	mov    %edx,%ecx
f01129cc:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01129ce:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f01129d4:	b9 55 00 00 00       	mov    $0x55,%ecx
f01129d9:	b0 00                	mov    $0x0,%al
f01129db:	89 d7                	mov    %edx,%edi
f01129dd:	f3 aa                	rep stos %al,%es:(%edi)
f01129df:	83 ec 0c             	sub    $0xc,%esp
f01129e2:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01129e8:	50                   	push   %eax
f01129e9:	e8 82 e3 fe ff       	call   f0100d70 <execute_command>
f01129ee:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x400FFF z";execute_command(c8);
f01129f1:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01129f7:	bb f1 9d 13 f0       	mov    $0xf0139df1,%ebx
f01129fc:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112a01:	89 c7                	mov    %eax,%edi
f0112a03:	89 de                	mov    %ebx,%esi
f0112a05:	89 d1                	mov    %edx,%ecx
f0112a07:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112a09:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0112a0f:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112a14:	b0 00                	mov    $0x0,%al
f0112a16:	89 d7                	mov    %edx,%edi
f0112a18:	f3 aa                	rep stos %al,%es:(%edi)
f0112a1a:	83 ec 0c             	sub    $0xc,%esp
f0112a1d:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112a23:	50                   	push   %eax
f0112a24:	e8 47 e3 fe ff       	call   f0100d70 <execute_command>
f0112a29:	83 c4 10             	add    $0x10,%esp

		//Test1
		ch1 = (char*)0x200000; ch2 = (char*)0x400000;
f0112a2c:	c7 45 bc 00 00 20 00 	movl   $0x200000,-0x44(%ebp)
f0112a33:	c7 45 b8 00 00 40 00 	movl   $0x400000,-0x48(%ebp)
		ch3 = (char*)0x2007FF; ch4 = (char*)0x4007FF;
f0112a3a:	c7 45 b4 ff 07 20 00 	movl   $0x2007ff,-0x4c(%ebp)
f0112a41:	c7 45 b0 ff 07 40 00 	movl   $0x4007ff,-0x50(%ebp)
		ch5 = (char*)0x200FFF; ch6 = (char*)0x400FFF;
f0112a48:	c7 45 ac ff 0f 20 00 	movl   $0x200fff,-0x54(%ebp)
f0112a4f:	c7 45 a8 ff 0f 40 00 	movl   $0x400fff,-0x58(%ebp)
		ch7 = (char*)0x201000; ch8 = (char*)0x401000;
f0112a56:	c7 45 a4 00 10 20 00 	movl   $0x201000,-0x5c(%ebp)
f0112a5d:	c7 45 a0 00 10 40 00 	movl   $0x401000,-0x60(%ebp)
		ch9 = (char*)0x2017FF; ch10= (char*)0x4017FF;
f0112a64:	c7 45 9c ff 17 20 00 	movl   $0x2017ff,-0x64(%ebp)
f0112a6b:	c7 45 98 ff 17 40 00 	movl   $0x4017ff,-0x68(%ebp)
		ch11= (char*)0x201FFF; ch12= (char*)0x401FFF;
f0112a72:	c7 45 94 ff 1f 20 00 	movl   $0x201fff,-0x6c(%ebp)
f0112a79:	c7 45 90 ff 1f 40 00 	movl   $0x401fff,-0x70(%ebp)

		tch[12] = *ch12 ;
f0112a80:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112a83:	8a 00                	mov    (%eax),%al
f0112a85:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112a8b:	e8 0d a1 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0112a90:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x200000, 0x400000, 6*kilo);
f0112a93:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112a96:	89 d0                	mov    %edx,%eax
f0112a98:	01 c0                	add    %eax,%eax
f0112a9a:	01 d0                	add    %edx,%eax
f0112a9c:	01 c0                	add    %eax,%eax
f0112a9e:	50                   	push   %eax
f0112a9f:	68 00 00 40 00       	push   $0x400000
f0112aa4:	68 00 00 20 00       	push   $0x200000
f0112aa9:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112aac:	e8 1d 5e ff ff       	call   f01088ce <copy_paste_chunk>
f0112ab1:	83 c4 10             	add    $0x10,%esp
f0112ab4:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112ab7:	e8 e1 a0 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0112abc:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0112abf:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0112ac6:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0112aca:	75 08                	jne    f0112ad4 <test_copy_paste_chunk+0x929>
f0112acc:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112acf:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0112ad2:	74 2b                	je     f0112aff <test_copy_paste_chunk+0x954>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112ad4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112ad7:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112ada:	83 ec 0c             	sub    $0xc,%esp
f0112add:	50                   	push   %eax
f0112ade:	ff 75 80             	pushl  -0x80(%ebp)
f0112ae1:	68 78 95 13 f0       	push   $0xf0139578
f0112ae6:	68 cc 02 00 00       	push   $0x2cc
f0112aeb:	68 3e 89 13 f0       	push   $0xf013893e
f0112af0:	e8 1e d9 fe ff       	call   f0100413 <_warn>
f0112af5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112af8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112aff:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112b03:	74 04                	je     f0112b09 <test_copy_paste_chunk+0x95e>
f0112b05:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112b09:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1;
f0112b10:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%ebp)
f0112b17:	00 00 00 
		if (CCP(proc_directory, 0x200000, 0x400000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0112b1a:	83 ec 08             	sub    $0x8,%esp
f0112b1d:	6a 01                	push   $0x1
f0112b1f:	6a 07                	push   $0x7
f0112b21:	6a 07                	push   $0x7
f0112b23:	6a 07                	push   $0x7
f0112b25:	6a 07                	push   $0x7
f0112b27:	6a 01                	push   $0x1
f0112b29:	68 00 20 00 00       	push   $0x2000
f0112b2e:	68 00 00 40 00       	push   $0x400000
f0112b33:	68 00 00 20 00       	push   $0x200000
f0112b38:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112b3b:	e8 67 32 00 00       	call   f0115da7 <CCP>
f0112b40:	83 c4 30             	add    $0x30,%esp
f0112b43:	83 f8 01             	cmp    $0x1,%eax
f0112b46:	74 2b                	je     f0112b73 <test_copy_paste_chunk+0x9c8>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references)\n");
f0112b48:	83 ec 04             	sub    $0x4,%esp
f0112b4b:	68 cc 95 13 f0       	push   $0xf01395cc
f0112b50:	68 d5 02 00 00       	push   $0x2d5
f0112b55:	68 3e 89 13 f0       	push   $0xf013893e
f0112b5a:	e8 b4 d8 fe ff       	call   f0100413 <_warn>
f0112b5f:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112b62:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0;
f0112b69:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%ebp)
f0112b70:	00 00 00 
		}
		if (correct) eval += 5 ;
f0112b73:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112b77:	74 04                	je     f0112b7d <test_copy_paste_chunk+0x9d2>
f0112b79:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112b7d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		*ch3 = 'y' ;	// wum 0x2007FF y
f0112b84:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112b87:	c6 00 79             	movb   $0x79,(%eax)
		*ch6 = 'z' ;	// wum 0x400FFF z
f0112b8a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112b8d:	c6 00 7a             	movb   $0x7a,(%eax)
		*ch7 = 'w' ;	// wum 0x201000 w
f0112b90:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112b93:	c6 00 77             	movb   $0x77,(%eax)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z'
f0112b96:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112b99:	8a 00                	mov    (%eax),%al
f0112b9b:	3c 61                	cmp    $0x61,%al
f0112b9d:	75 69                	jne    f0112c08 <test_copy_paste_chunk+0xa5d>
f0112b9f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112ba2:	8a 00                	mov    (%eax),%al
f0112ba4:	3c 61                	cmp    $0x61,%al
f0112ba6:	75 60                	jne    f0112c08 <test_copy_paste_chunk+0xa5d>
f0112ba8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112bab:	8a 00                	mov    (%eax),%al
f0112bad:	3c 79                	cmp    $0x79,%al
f0112baf:	75 57                	jne    f0112c08 <test_copy_paste_chunk+0xa5d>
f0112bb1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112bb4:	8a 00                	mov    (%eax),%al
f0112bb6:	3c 62                	cmp    $0x62,%al
f0112bb8:	75 4e                	jne    f0112c08 <test_copy_paste_chunk+0xa5d>
f0112bba:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112bbd:	8a 00                	mov    (%eax),%al
f0112bbf:	3c 63                	cmp    $0x63,%al
f0112bc1:	75 45                	jne    f0112c08 <test_copy_paste_chunk+0xa5d>
f0112bc3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112bc6:	8a 00                	mov    (%eax),%al
f0112bc8:	3c 7a                	cmp    $0x7a,%al
f0112bca:	75 3c                	jne    f0112c08 <test_copy_paste_chunk+0xa5d>
				||  *ch7 != 'w' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'e' || *ch11!= 'f' || *ch12 != tch[12])
f0112bcc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112bcf:	8a 00                	mov    (%eax),%al
f0112bd1:	3c 77                	cmp    $0x77,%al
f0112bd3:	75 33                	jne    f0112c08 <test_copy_paste_chunk+0xa5d>
f0112bd5:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112bd8:	8a 00                	mov    (%eax),%al
f0112bda:	3c 64                	cmp    $0x64,%al
f0112bdc:	75 2a                	jne    f0112c08 <test_copy_paste_chunk+0xa5d>
f0112bde:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112be1:	8a 00                	mov    (%eax),%al
f0112be3:	3c 65                	cmp    $0x65,%al
f0112be5:	75 21                	jne    f0112c08 <test_copy_paste_chunk+0xa5d>
f0112be7:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112bea:	8a 00                	mov    (%eax),%al
f0112bec:	3c 65                	cmp    $0x65,%al
f0112bee:	75 18                	jne    f0112c08 <test_copy_paste_chunk+0xa5d>
f0112bf0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112bf3:	8a 00                	mov    (%eax),%al
f0112bf5:	3c 66                	cmp    $0x66,%al
f0112bf7:	75 0f                	jne    f0112c08 <test_copy_paste_chunk+0xa5d>
f0112bf9:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112bfc:	8a 10                	mov    (%eax),%dl
f0112bfe:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0112c04:	38 c2                	cmp    %al,%dl
f0112c06:	74 21                	je     f0112c29 <test_copy_paste_chunk+0xa7e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112c08:	83 ec 04             	sub    $0x4,%esp
f0112c0b:	68 cc 94 13 f0       	push   $0xf01394cc
f0112c10:	68 e3 02 00 00       	push   $0x2e3
f0112c15:	68 3e 89 13 f0       	push   $0xf013893e
f0112c1a:	e8 f4 d7 fe ff       	call   f0100413 <_warn>
f0112c1f:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112c22:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112c29:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112c2d:	74 04                	je     f0112c33 <test_copy_paste_chunk+0xa88>
f0112c2f:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112c33:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		//Test2
		*ch10 = 'x';	// wum 0x4017FF y
f0112c3a:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112c3d:	c6 00 78             	movb   $0x78,(%eax)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112c40:	e8 58 9f ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0112c45:	89 45 8c             	mov    %eax,-0x74(%ebp)

		ret = copy_paste_chunk(proc_directory, 0x400800, 0x200800, 3*kilo);
f0112c48:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112c4b:	89 c2                	mov    %eax,%edx
f0112c4d:	01 d2                	add    %edx,%edx
f0112c4f:	01 d0                	add    %edx,%eax
f0112c51:	50                   	push   %eax
f0112c52:	68 00 08 20 00       	push   $0x200800
f0112c57:	68 00 08 40 00       	push   $0x400800
f0112c5c:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112c5f:	e8 6a 5c ff ff       	call   f01088ce <copy_paste_chunk>
f0112c64:	83 c4 10             	add    $0x10,%esp
f0112c67:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112c6a:	e8 2e 9f ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0112c6f:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0112c72:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0112c76:	75 08                	jne    f0112c80 <test_copy_paste_chunk+0xad5>
f0112c78:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112c7b:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0112c7e:	74 2b                	je     f0112cab <test_copy_paste_chunk+0xb00>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112c80:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112c83:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112c86:	83 ec 0c             	sub    $0xc,%esp
f0112c89:	50                   	push   %eax
f0112c8a:	ff 75 80             	pushl  -0x80(%ebp)
f0112c8d:	68 78 95 13 f0       	push   $0xf0139578
f0112c92:	68 f3 02 00 00       	push   $0x2f3
f0112c97:	68 3e 89 13 f0       	push   $0xf013893e
f0112c9c:	e8 72 d7 fe ff       	call   f0100413 <_warn>
f0112ca1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112ca4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112cab:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112caf:	74 04                	je     f0112cb5 <test_copy_paste_chunk+0xb0a>
f0112cb1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112cb5:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CCP(proc_directory, 0x400000, 0x200000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0112cbc:	83 ec 08             	sub    $0x8,%esp
f0112cbf:	6a 01                	push   $0x1
f0112cc1:	6a 07                	push   $0x7
f0112cc3:	6a 07                	push   $0x7
f0112cc5:	6a 07                	push   $0x7
f0112cc7:	6a 07                	push   $0x7
f0112cc9:	6a 01                	push   $0x1
f0112ccb:	68 00 20 00 00       	push   $0x2000
f0112cd0:	68 00 00 20 00       	push   $0x200000
f0112cd5:	68 00 00 40 00       	push   $0x400000
f0112cda:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112cdd:	e8 c5 30 00 00       	call   f0115da7 <CCP>
f0112ce2:	83 c4 30             	add    $0x30,%esp
f0112ce5:	83 f8 01             	cmp    $0x1,%eax
f0112ce8:	74 21                	je     f0112d0b <test_copy_paste_chunk+0xb60>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0112cea:	83 ec 04             	sub    $0x4,%esp
f0112ced:	68 18 96 13 f0       	push   $0xf0139618
f0112cf2:	68 fb 02 00 00       	push   $0x2fb
f0112cf7:	68 3e 89 13 f0       	push   $0xf013893e
f0112cfc:	e8 12 d7 fe ff       	call   f0100413 <_warn>
f0112d01:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112d04:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112d0b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112d0f:	74 04                	je     f0112d15 <test_copy_paste_chunk+0xb6a>
f0112d11:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112d15:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0112d1c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112d1f:	8a 00                	mov    (%eax),%al
f0112d21:	3c 61                	cmp    $0x61,%al
f0112d23:	75 69                	jne    f0112d8e <test_copy_paste_chunk+0xbe3>
f0112d25:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112d28:	8a 00                	mov    (%eax),%al
f0112d2a:	3c 61                	cmp    $0x61,%al
f0112d2c:	75 60                	jne    f0112d8e <test_copy_paste_chunk+0xbe3>
f0112d2e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112d31:	8a 00                	mov    (%eax),%al
f0112d33:	3c 79                	cmp    $0x79,%al
f0112d35:	75 57                	jne    f0112d8e <test_copy_paste_chunk+0xbe3>
f0112d37:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112d3a:	8a 00                	mov    (%eax),%al
f0112d3c:	3c 62                	cmp    $0x62,%al
f0112d3e:	75 4e                	jne    f0112d8e <test_copy_paste_chunk+0xbe3>
f0112d40:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112d43:	8a 00                	mov    (%eax),%al
f0112d45:	3c 7a                	cmp    $0x7a,%al
f0112d47:	75 45                	jne    f0112d8e <test_copy_paste_chunk+0xbe3>
f0112d49:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112d4c:	8a 00                	mov    (%eax),%al
f0112d4e:	3c 7a                	cmp    $0x7a,%al
f0112d50:	75 3c                	jne    f0112d8e <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0112d52:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112d55:	8a 00                	mov    (%eax),%al
			correct = 0;
		}
		if (correct) eval += 5 ;
		correct = 1 ;

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0112d57:	3c 64                	cmp    $0x64,%al
f0112d59:	75 33                	jne    f0112d8e <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0112d5b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112d5e:	8a 00                	mov    (%eax),%al
f0112d60:	3c 64                	cmp    $0x64,%al
f0112d62:	75 2a                	jne    f0112d8e <test_copy_paste_chunk+0xbe3>
f0112d64:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112d67:	8a 00                	mov    (%eax),%al
f0112d69:	3c 65                	cmp    $0x65,%al
f0112d6b:	75 21                	jne    f0112d8e <test_copy_paste_chunk+0xbe3>
f0112d6d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112d70:	8a 00                	mov    (%eax),%al
f0112d72:	3c 78                	cmp    $0x78,%al
f0112d74:	75 18                	jne    f0112d8e <test_copy_paste_chunk+0xbe3>
f0112d76:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112d79:	8a 00                	mov    (%eax),%al
f0112d7b:	3c 66                	cmp    $0x66,%al
f0112d7d:	75 0f                	jne    f0112d8e <test_copy_paste_chunk+0xbe3>
f0112d7f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112d82:	8a 10                	mov    (%eax),%dl
f0112d84:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0112d8a:	38 c2                	cmp    %al,%dl
f0112d8c:	74 21                	je     f0112daf <test_copy_paste_chunk+0xc04>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112d8e:	83 ec 04             	sub    $0x4,%esp
f0112d91:	68 cc 94 13 f0       	push   $0xf01394cc
f0112d96:	68 04 03 00 00       	push   $0x304
f0112d9b:	68 3e 89 13 f0       	push   $0xf013893e
f0112da0:	e8 6e d6 fe ff       	call   f0100413 <_warn>
f0112da5:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112da8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112daf:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112db3:	74 04                	je     f0112db9 <test_copy_paste_chunk+0xc0e>
f0112db5:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112db9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE II: END\n") ;
f0112dc0:	83 ec 0c             	sub    $0xc,%esp
f0112dc3:	68 63 96 13 f0       	push   $0xf0139663
f0112dc8:	e8 41 df fe ff       	call   f0100d0e <cprintf>
f0112dcd:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART III: Destination page(s) doesn't exist 40% */
	/*================================================*/
	cprintf("\nCASE III: Destination page(s) doesn't exist [40%]\n") ;
f0112dd0:	83 ec 0c             	sub    $0xc,%esp
f0112dd3:	68 74 96 13 f0       	push   $0xf0139674
f0112dd8:	e8 31 df fe ff       	call   f0100d0e <cprintf>
f0112ddd:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x800000", c1); execute_command(c1);
f0112de0:	83 ec 04             	sub    $0x4,%esp
f0112de3:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112de9:	50                   	push   %eax
f0112dea:	68 a8 96 13 f0       	push   $0xf01396a8
f0112def:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112df5:	50                   	push   %eax
f0112df6:	e8 6f e6 01 00       	call   f013146a <strcconcat>
f0112dfb:	83 c4 10             	add    $0x10,%esp
f0112dfe:	83 ec 0c             	sub    $0xc,%esp
f0112e01:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112e07:	50                   	push   %eax
f0112e08:	e8 63 df fe ff       	call   f0100d70 <execute_command>
f0112e0d:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x801000", c1); execute_command(c1);
f0112e10:	83 ec 04             	sub    $0x4,%esp
f0112e13:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112e19:	50                   	push   %eax
f0112e1a:	68 b2 96 13 f0       	push   $0xf01396b2
f0112e1f:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112e25:	50                   	push   %eax
f0112e26:	e8 3f e6 01 00       	call   f013146a <strcconcat>
f0112e2b:	83 c4 10             	add    $0x10,%esp
f0112e2e:	83 ec 0c             	sub    $0xc,%esp
f0112e31:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112e37:	50                   	push   %eax
f0112e38:	e8 33 df fe ff       	call   f0100d70 <execute_command>
f0112e3d:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x802000", c1); execute_command(c1);
f0112e40:	83 ec 04             	sub    $0x4,%esp
f0112e43:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112e49:	50                   	push   %eax
f0112e4a:	68 bc 96 13 f0       	push   $0xf01396bc
f0112e4f:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112e55:	50                   	push   %eax
f0112e56:	e8 0f e6 01 00       	call   f013146a <strcconcat>
f0112e5b:	83 c4 10             	add    $0x10,%esp
f0112e5e:	83 ec 0c             	sub    $0xc,%esp
f0112e61:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112e67:	50                   	push   %eax
f0112e68:	e8 03 df fe ff       	call   f0100d70 <execute_command>
f0112e6d:	83 c4 10             	add    $0x10,%esp
		char c14[100] = "wum 0x800000 a"; execute_command(c14);
f0112e70:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112e76:	bb 55 9e 13 f0       	mov    $0xf0139e55,%ebx
f0112e7b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112e80:	89 c7                	mov    %eax,%edi
f0112e82:	89 de                	mov    %ebx,%esi
f0112e84:	89 d1                	mov    %edx,%ecx
f0112e86:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112e88:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0112e8e:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112e93:	b0 00                	mov    $0x0,%al
f0112e95:	89 d7                	mov    %edx,%edi
f0112e97:	f3 aa                	rep stos %al,%es:(%edi)
f0112e99:	83 ec 0c             	sub    $0xc,%esp
f0112e9c:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112ea2:	50                   	push   %eax
f0112ea3:	e8 c8 de fe ff       	call   f0100d70 <execute_command>
f0112ea8:	83 c4 10             	add    $0x10,%esp
		char c15[100] = "wum 0x8017FF b"; execute_command(c15);
f0112eab:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112eb1:	bb b9 9e 13 f0       	mov    $0xf0139eb9,%ebx
f0112eb6:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112ebb:	89 c7                	mov    %eax,%edi
f0112ebd:	89 de                	mov    %ebx,%esi
f0112ebf:	89 d1                	mov    %edx,%ecx
f0112ec1:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112ec3:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0112ec9:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112ece:	b0 00                	mov    $0x0,%al
f0112ed0:	89 d7                	mov    %edx,%edi
f0112ed2:	f3 aa                	rep stos %al,%es:(%edi)
f0112ed4:	83 ec 0c             	sub    $0xc,%esp
f0112ed7:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112edd:	50                   	push   %eax
f0112ede:	e8 8d de fe ff       	call   f0100d70 <execute_command>
f0112ee3:	83 c4 10             	add    $0x10,%esp
		char c16[100] = "wum 0x802FFF c"; execute_command(c16);
f0112ee6:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112eec:	bb 1d 9f 13 f0       	mov    $0xf0139f1d,%ebx
f0112ef1:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112ef6:	89 c7                	mov    %eax,%edi
f0112ef8:	89 de                	mov    %ebx,%esi
f0112efa:	89 d1                	mov    %edx,%ecx
f0112efc:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112efe:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0112f04:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112f09:	b0 00                	mov    $0x0,%al
f0112f0b:	89 d7                	mov    %edx,%edi
f0112f0d:	f3 aa                	rep stos %al,%es:(%edi)
f0112f0f:	83 ec 0c             	sub    $0xc,%esp
f0112f12:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112f18:	50                   	push   %eax
f0112f19:	e8 52 de fe ff       	call   f0100d70 <execute_command>
f0112f1e:	83 c4 10             	add    $0x10,%esp

		//Test3
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112f21:	e8 77 9c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0112f26:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x800000, 0x900000, 12*kilo);
f0112f29:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112f2c:	89 d0                	mov    %edx,%eax
f0112f2e:	01 c0                	add    %eax,%eax
f0112f30:	01 d0                	add    %edx,%eax
f0112f32:	c1 e0 02             	shl    $0x2,%eax
f0112f35:	50                   	push   %eax
f0112f36:	68 00 00 90 00       	push   $0x900000
f0112f3b:	68 00 00 80 00       	push   $0x800000
f0112f40:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112f43:	e8 86 59 ff ff       	call   f01088ce <copy_paste_chunk>
f0112f48:	83 c4 10             	add    $0x10,%esp
f0112f4b:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112f51:	e8 47 9c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0112f56:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0112f59:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0112f60:	75 0b                	jne    f0112f6d <test_copy_paste_chunk+0xdc2>
f0112f62:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112f65:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112f68:	83 f8 03             	cmp    $0x3,%eax
f0112f6b:	74 2e                	je     f0112f9b <test_copy_paste_chunk+0xdf0>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112f6d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112f70:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112f73:	83 ec 0c             	sub    $0xc,%esp
f0112f76:	50                   	push   %eax
f0112f77:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0112f7d:	68 78 95 13 f0       	push   $0xf0139578
f0112f82:	68 22 03 00 00       	push   $0x322
f0112f87:	68 3e 89 13 f0       	push   $0xf013893e
f0112f8c:	e8 82 d4 fe ff       	call   f0100413 <_warn>
f0112f91:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112f94:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112f9b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112f9f:	74 04                	je     f0112fa5 <test_copy_paste_chunk+0xdfa>
f0112fa1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112fa5:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1 ;
f0112fac:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x800000, 0x900000, 3*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0112fb3:	83 ec 08             	sub    $0x8,%esp
f0112fb6:	6a 01                	push   $0x1
f0112fb8:	6a 07                	push   $0x7
f0112fba:	6a 07                	push   $0x7
f0112fbc:	6a 07                	push   $0x7
f0112fbe:	6a 07                	push   $0x7
f0112fc0:	6a 01                	push   $0x1
f0112fc2:	68 00 30 00 00       	push   $0x3000
f0112fc7:	68 00 00 90 00       	push   $0x900000
f0112fcc:	68 00 00 80 00       	push   $0x800000
f0112fd1:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112fd4:	e8 ce 2d 00 00       	call   f0115da7 <CCP>
f0112fd9:	83 c4 30             	add    $0x30,%esp
f0112fdc:	83 f8 01             	cmp    $0x1,%eax
f0112fdf:	74 28                	je     f0113009 <test_copy_paste_chunk+0xe5e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0112fe1:	83 ec 04             	sub    $0x4,%esp
f0112fe4:	68 18 96 13 f0       	push   $0xf0139618
f0112fe9:	68 2b 03 00 00       	push   $0x32b
f0112fee:	68 3e 89 13 f0       	push   $0xf013893e
f0112ff3:	e8 1b d4 fe ff       	call   f0100413 <_warn>
f0112ff8:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112ffb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0113002:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 5 ;
f0113009:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011300d:	74 04                	je     f0113013 <test_copy_paste_chunk+0xe68>
f011300f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113013:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f011301a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011301e:	0f 84 9e 00 00 00    	je     f01130c2 <test_copy_paste_chunk+0xf17>
		{
			ch1 = (char*)0x800000; ch2 = (char*)0x900000;
f0113024:	c7 45 bc 00 00 80 00 	movl   $0x800000,-0x44(%ebp)
f011302b:	c7 45 b8 00 00 90 00 	movl   $0x900000,-0x48(%ebp)
			ch3 = (char*)0x8017FF; ch4 = (char*)0x9017FF;
f0113032:	c7 45 b4 ff 17 80 00 	movl   $0x8017ff,-0x4c(%ebp)
f0113039:	c7 45 b0 ff 17 90 00 	movl   $0x9017ff,-0x50(%ebp)
			ch5 = (char*)0x802FFF; ch6 = (char*)0x902FFF;
f0113040:	c7 45 ac ff 2f 80 00 	movl   $0x802fff,-0x54(%ebp)
f0113047:	c7 45 a8 ff 2f 90 00 	movl   $0x902fff,-0x58(%ebp)

			*ch3 = 'y';	//wum 0x8017FF y
f011304e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113051:	c6 00 79             	movb   $0x79,(%eax)
			*ch6 = 'z';	//wum 0x902FFF z
f0113054:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113057:	c6 00 7a             	movb   $0x7a,(%eax)

			if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z')
f011305a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011305d:	8a 00                	mov    (%eax),%al
f011305f:	3c 61                	cmp    $0x61,%al
f0113061:	75 2d                	jne    f0113090 <test_copy_paste_chunk+0xee5>
f0113063:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113066:	8a 00                	mov    (%eax),%al
f0113068:	3c 61                	cmp    $0x61,%al
f011306a:	75 24                	jne    f0113090 <test_copy_paste_chunk+0xee5>
f011306c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011306f:	8a 00                	mov    (%eax),%al
f0113071:	3c 79                	cmp    $0x79,%al
f0113073:	75 1b                	jne    f0113090 <test_copy_paste_chunk+0xee5>
f0113075:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113078:	8a 00                	mov    (%eax),%al
f011307a:	3c 62                	cmp    $0x62,%al
f011307c:	75 12                	jne    f0113090 <test_copy_paste_chunk+0xee5>
f011307e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113081:	8a 00                	mov    (%eax),%al
f0113083:	3c 63                	cmp    $0x63,%al
f0113085:	75 09                	jne    f0113090 <test_copy_paste_chunk+0xee5>
f0113087:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011308a:	8a 00                	mov    (%eax),%al
f011308c:	3c 7a                	cmp    $0x7a,%al
f011308e:	74 21                	je     f01130b1 <test_copy_paste_chunk+0xf06>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113090:	83 ec 04             	sub    $0x4,%esp
f0113093:	68 cc 94 13 f0       	push   $0xf01394cc
f0113098:	68 3d 03 00 00       	push   $0x33d
f011309d:	68 3e 89 13 f0       	push   $0xf013893e
f01130a2:	e8 6c d3 fe ff       	call   f0100413 <_warn>
f01130a7:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01130aa:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 10 ;
f01130b1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01130b5:	74 04                	je     f01130bb <test_copy_paste_chunk+0xf10>
f01130b7:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
			correct = 1 ;
f01130bb:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
		//Test4
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01130c2:	e8 d6 9a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01130c7:	89 45 8c             	mov    %eax,-0x74(%ebp)
		SB(proc_directory, 0x901000, 2 , 0) ;
f01130ca:	6a 00                	push   $0x0
f01130cc:	6a 02                	push   $0x2
f01130ce:	68 00 10 90 00       	push   $0x901000
f01130d3:	ff 75 d4             	pushl  -0x2c(%ebp)
f01130d6:	e8 59 2b 00 00       	call   f0115c34 <SB>
f01130db:	83 c4 10             	add    $0x10,%esp
		SB(proc_directory, 0x902000, 2 , 0) ;
f01130de:	6a 00                	push   $0x0
f01130e0:	6a 02                	push   $0x2
f01130e2:	68 00 20 90 00       	push   $0x902000
f01130e7:	ff 75 d4             	pushl  -0x2c(%ebp)
f01130ea:	e8 45 2b 00 00       	call   f0115c34 <SB>
f01130ef:	83 c4 10             	add    $0x10,%esp

		ret = copy_paste_chunk(proc_directory, 0x901000, 0xBFF000, 8*kilo);
f01130f2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01130f5:	c1 e0 03             	shl    $0x3,%eax
f01130f8:	50                   	push   %eax
f01130f9:	68 00 f0 bf 00       	push   $0xbff000
f01130fe:	68 00 10 90 00       	push   $0x901000
f0113103:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113106:	e8 c3 57 ff ff       	call   f01088ce <copy_paste_chunk>
f011310b:	83 c4 10             	add    $0x10,%esp
f011310e:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113114:	e8 84 9a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0113119:	89 45 84             	mov    %eax,-0x7c(%ebp)
		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f011311c:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0113123:	75 0b                	jne    f0113130 <test_copy_paste_chunk+0xf85>
f0113125:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113128:	2b 45 84             	sub    -0x7c(%ebp),%eax
f011312b:	83 f8 03             	cmp    $0x3,%eax
f011312e:	74 2e                	je     f011315e <test_copy_paste_chunk+0xfb3>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113130:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113133:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113136:	83 ec 0c             	sub    $0xc,%esp
f0113139:	50                   	push   %eax
f011313a:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0113140:	68 78 95 13 f0       	push   $0xf0139578
f0113145:	68 4d 03 00 00       	push   $0x34d
f011314a:	68 3e 89 13 f0       	push   $0xf013893e
f011314f:	e8 bf d2 fe ff       	call   f0100413 <_warn>
f0113154:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113157:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011315e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113162:	74 04                	je     f0113168 <test_copy_paste_chunk+0xfbd>
f0113164:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113168:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		chkcnt = 1 ;
f011316f:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x901000, 0xBFF000, 2*PAGE_SIZE, 1, 0x003, 0x007, 0x003, 0x007, CHK_COPY_PASTE) != 1)
f0113176:	83 ec 08             	sub    $0x8,%esp
f0113179:	6a 01                	push   $0x1
f011317b:	6a 07                	push   $0x7
f011317d:	6a 03                	push   $0x3
f011317f:	6a 07                	push   $0x7
f0113181:	6a 03                	push   $0x3
f0113183:	6a 01                	push   $0x1
f0113185:	68 00 20 00 00       	push   $0x2000
f011318a:	68 00 f0 bf 00       	push   $0xbff000
f011318f:	68 00 10 90 00       	push   $0x901000
f0113194:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113197:	e8 0b 2c 00 00       	call   f0115da7 <CCP>
f011319c:	83 c4 30             	add    $0x30,%esp
f011319f:	83 f8 01             	cmp    $0x1,%eax
f01131a2:	74 28                	je     f01131cc <test_copy_paste_chunk+0x1021>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f01131a4:	83 ec 04             	sub    $0x4,%esp
f01131a7:	68 18 96 13 f0       	push   $0xf0139618
f01131ac:	68 56 03 00 00       	push   $0x356
f01131b1:	68 3e 89 13 f0       	push   $0xf013893e
f01131b6:	e8 58 d2 fe ff       	call   f0100413 <_warn>
f01131bb:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01131be:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f01131c5:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f01131cc:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01131d0:	74 04                	je     f01131d6 <test_copy_paste_chunk+0x102b>
f01131d2:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01131d6:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f01131dd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01131e1:	74 72                	je     f0113255 <test_copy_paste_chunk+0x10aa>
		{
			ch1 = (char*)0x9017FF; ch2 = (char*)0xBFF7FF; ch3 = (char*)0x902FFF;ch4 = (char*)0xC00FFF;
f01131e3:	c7 45 bc ff 17 90 00 	movl   $0x9017ff,-0x44(%ebp)
f01131ea:	c7 45 b8 ff f7 bf 00 	movl   $0xbff7ff,-0x48(%ebp)
f01131f1:	c7 45 b4 ff 2f 90 00 	movl   $0x902fff,-0x4c(%ebp)
f01131f8:	c7 45 b0 ff 0f c0 00 	movl   $0xc00fff,-0x50(%ebp)
			if (*ch1 != 'b' || *ch2 != 'b' || *ch3 != 'z' || *ch4 != 'z')
f01131ff:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113202:	8a 00                	mov    (%eax),%al
f0113204:	3c 62                	cmp    $0x62,%al
f0113206:	75 1b                	jne    f0113223 <test_copy_paste_chunk+0x1078>
f0113208:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011320b:	8a 00                	mov    (%eax),%al
f011320d:	3c 62                	cmp    $0x62,%al
f011320f:	75 12                	jne    f0113223 <test_copy_paste_chunk+0x1078>
f0113211:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113214:	8a 00                	mov    (%eax),%al
f0113216:	3c 7a                	cmp    $0x7a,%al
f0113218:	75 09                	jne    f0113223 <test_copy_paste_chunk+0x1078>
f011321a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011321d:	8a 00                	mov    (%eax),%al
f011321f:	3c 7a                	cmp    $0x7a,%al
f0113221:	74 21                	je     f0113244 <test_copy_paste_chunk+0x1099>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113223:	83 ec 04             	sub    $0x4,%esp
f0113226:	68 cc 94 13 f0       	push   $0xf01394cc
f011322b:	68 62 03 00 00       	push   $0x362
f0113230:	68 3e 89 13 f0       	push   $0xf013893e
f0113235:	e8 d9 d1 fe ff       	call   f0100413 <_warn>
f011323a:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011323d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0113244:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113248:	74 04                	je     f011324e <test_copy_paste_chunk+0x10a3>
f011324a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011324e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0113255:	83 ec 0c             	sub    $0xc,%esp
f0113258:	68 c6 96 13 f0       	push   $0xf01396c6
f011325d:	e8 ac da fe ff       	call   f0100d0e <cprintf>
f0113262:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] copy_paste_chunk: FINISHED. Evaluation = %d\n", eval);
f0113265:	83 ec 08             	sub    $0x8,%esp
f0113268:	ff 75 e4             	pushl  -0x1c(%ebp)
f011326b:	68 d8 96 13 f0       	push   $0xf01396d8
f0113270:	e8 99 da fe ff       	call   f0100d0e <cprintf>
f0113275:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0113278:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f011327c:	75 10                	jne    f011328e <test_copy_paste_chunk+0x10e3>
		cprintf("Congratulations!! test copy_paste_chunk completed successfully.\n");
f011327e:	83 ec 0c             	sub    $0xc,%esp
f0113281:	68 0c 97 13 f0       	push   $0xf013970c
f0113286:	e8 83 da fe ff       	call   f0100d0e <cprintf>
f011328b:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f011328e:	a1 ac 5d 87 f0       	mov    0xf0875dac,%eax
f0113293:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0113296:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113299:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f011329c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01132a1:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01132a4:	5b                   	pop    %ebx
f01132a5:	5e                   	pop    %esi
f01132a6:	5f                   	pop    %edi
f01132a7:	5d                   	pop    %ebp
f01132a8:	c3                   	ret    

f01132a9 <test_share_chunk>:

//===============================
// 3) TEST SHARE CHUNK:
//===============================
int test_share_chunk()
{
f01132a9:	55                   	push   %ebp
f01132aa:	89 e5                	mov    %esp,%ebp
f01132ac:	57                   	push   %edi
f01132ad:	56                   	push   %esi
f01132ae:	53                   	push   %ebx
f01132af:	81 ec bc 00 00 00    	sub    $0xbc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01132b5:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f01132bb:	bb d8 93 13 f0       	mov    $0xf01393d8,%ebx
f01132c0:	ba 0f 00 00 00       	mov    $0xf,%edx
f01132c5:	89 c7                	mov    %eax,%edi
f01132c7:	89 de                	mov    %ebx,%esi
f01132c9:	89 d1                	mov    %edx,%ecx
f01132cb:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01132cd:	8d 95 5d ff ff ff    	lea    -0xa3(%ebp),%edx
f01132d3:	b9 23 00 00 00       	mov    $0x23,%ecx
f01132d8:	b0 00                	mov    $0x0,%al
f01132da:	89 d7                	mov    %edx,%edi
f01132dc:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01132de:	6a 00                	push   $0x0
f01132e0:	6a 0a                	push   $0xa
f01132e2:	6a 14                	push   $0x14
f01132e4:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f01132ea:	50                   	push   %eax
f01132eb:	e8 73 5b ff ff       	call   f0108e63 <env_create>
f01132f0:	83 c4 10             	add    $0x10,%esp
f01132f3:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01132f6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01132f9:	8b 40 5c             	mov    0x5c(%eax),%eax
f01132fc:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f01132ff:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113302:	8b 40 60             	mov    0x60(%eax),%eax
f0113305:	89 45 80             	mov    %eax,-0x80(%ebp)
f0113308:	8b 45 80             	mov    -0x80(%ebp),%eax
f011330b:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f011330e:	83 ec 0c             	sub    $0xc,%esp
f0113311:	ff 75 cc             	pushl  -0x34(%ebp)
f0113314:	e8 5a 2a 00 00       	call   f0115d73 <ClearUserSpace>
f0113319:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f011331c:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0113323:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f011332a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0113331:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 20% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [20%]\n") ;
f0113335:	83 ec 0c             	sub    $0xc,%esp
f0113338:	68 84 9f 13 f0       	push   $0xf0139f84
f011333d:	e8 cc d9 fe ff       	call   f0100d0e <cprintf>
f0113342:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)0xF0100000;
f0113345:	c7 45 bc 00 00 10 f0 	movl   $0xf0100000,-0x44(%ebp)
		ptr2 = (char*)0xF1004000;
f011334c:	c7 45 b8 00 40 00 f1 	movl   $0xf1004000,-0x48(%ebp)
		tptr[1] = *ptr1 ;
f0113353:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113356:	8a 00                	mov    (%eax),%al
f0113358:	88 85 45 ff ff ff    	mov    %al,-0xbb(%ebp)
		tptr[2] = *ptr2 ;
f011335e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113361:	8a 00                	mov    (%eax),%al
f0113363:	88 85 46 ff ff ff    	mov    %al,-0xba(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113369:	e8 2f 98 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011336e:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0100000,0xF0104000, 6*kilo, PERM_WRITEABLE) ;
f0113371:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113374:	89 d0                	mov    %edx,%eax
f0113376:	01 c0                	add    %eax,%eax
f0113378:	01 d0                	add    %edx,%eax
f011337a:	01 c0                	add    %eax,%eax
f011337c:	83 ec 0c             	sub    $0xc,%esp
f011337f:	6a 02                	push   $0x2
f0113381:	50                   	push   %eax
f0113382:	68 00 40 10 f0       	push   $0xf0104000
f0113387:	68 00 00 10 f0       	push   $0xf0100000
f011338c:	ff 75 cc             	pushl  -0x34(%ebp)
f011338f:	e8 7e 56 ff ff       	call   f0108a12 <share_chunk>
f0113394:	83 c4 20             	add    $0x20,%esp
f0113397:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011339a:	e8 fe 97 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011339f:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f01133a2:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f01133a6:	75 08                	jne    f01133b0 <test_share_chunk+0x107>
f01133a8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01133ab:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01133ae:	74 28                	je     f01133d8 <test_share_chunk+0x12f>
		{
			warn("[EVAL] share_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter));
f01133b0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01133b3:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01133b6:	83 ec 0c             	sub    $0xc,%esp
f01133b9:	50                   	push   %eax
f01133ba:	ff 75 b0             	pushl  -0x50(%ebp)
f01133bd:	68 b0 9f 13 f0       	push   $0xf0139fb0
f01133c2:	68 9e 03 00 00       	push   $0x39e
f01133c7:	68 3e 89 13 f0       	push   $0xf013893e
f01133cc:	e8 42 d0 fe ff       	call   f0100413 <_warn>
f01133d1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01133d4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01133d8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01133dc:	74 04                	je     f01133e2 <test_share_chunk+0x139>
f01133de:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01133e2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xF0100000, 0xF0104000, 8*kilo, 1, 0x003, 0x007, 0x003, 0x007, ~CHK_SHARE) == 0)
f01133e6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01133e9:	c1 e0 03             	shl    $0x3,%eax
f01133ec:	83 ec 08             	sub    $0x8,%esp
f01133ef:	68 fd 00 00 00       	push   $0xfd
f01133f4:	6a 07                	push   $0x7
f01133f6:	6a 03                	push   $0x3
f01133f8:	6a 07                	push   $0x7
f01133fa:	6a 03                	push   $0x3
f01133fc:	6a 01                	push   $0x1
f01133fe:	50                   	push   %eax
f01133ff:	68 00 40 10 f0       	push   $0xf0104000
f0113404:	68 00 00 10 f0       	push   $0xf0100000
f0113409:	ff 75 cc             	pushl  -0x34(%ebp)
f011340c:	e8 96 29 00 00       	call   f0115da7 <CCP>
f0113411:	83 c4 30             	add    $0x30,%esp
f0113414:	85 c0                	test   %eax,%eax
f0113416:	75 1e                	jne    f0113436 <test_share_chunk+0x18d>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113418:	83 ec 04             	sub    $0x4,%esp
f011341b:	68 0c a0 13 f0       	push   $0xf013a00c
f0113420:	68 a6 03 00 00       	push   $0x3a6
f0113425:	68 3e 89 13 f0       	push   $0xf013893e
f011342a:	e8 e4 cf fe ff       	call   f0100413 <_warn>
f011342f:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113432:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113436:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011343a:	74 04                	je     f0113440 <test_share_chunk+0x197>
f011343c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)

		*ptr1 = 'A' ;
f0113440:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113443:	c6 00 41             	movb   $0x41,(%eax)
		*ptr2 = 'B' ;
f0113446:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113449:	c6 00 42             	movb   $0x42,(%eax)

		if ((*ptr1) != 'A' || (*ptr2) != 'B')
f011344c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011344f:	8a 00                	mov    (%eax),%al
f0113451:	3c 41                	cmp    $0x41,%al
f0113453:	75 09                	jne    f011345e <test_share_chunk+0x1b5>
f0113455:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113458:	8a 00                	mov    (%eax),%al
f011345a:	3c 42                	cmp    $0x42,%al
f011345c:	74 1e                	je     f011347c <test_share_chunk+0x1d3>
		{
			warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f011345e:	83 ec 04             	sub    $0x4,%esp
f0113461:	68 54 a0 13 f0       	push   $0xf013a054
f0113466:	68 b0 03 00 00       	push   $0x3b0
f011346b:	68 3e 89 13 f0       	push   $0xf013893e
f0113470:	e8 9e cf fe ff       	call   f0100413 <_warn>
f0113475:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113478:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011347c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113480:	74 04                	je     f0113486 <test_share_chunk+0x1dd>
f0113482:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113486:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		*ptr1 = tptr[1] ;
f011348a:	8a 95 45 ff ff ff    	mov    -0xbb(%ebp),%dl
f0113490:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113493:	88 10                	mov    %dl,(%eax)
		*ptr2 = tptr[2] ;
f0113495:	8a 95 46 ff ff ff    	mov    -0xba(%ebp),%dl
f011349b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011349e:	88 10                	mov    %dl,(%eax)
	}
	cprintf("\nCASE I: END\n") ;
f01134a0:	83 ec 0c             	sub    $0xc,%esp
f01134a3:	68 89 a0 13 f0       	push   $0xf013a089
f01134a8:	e8 61 d8 fe ff       	call   f0100d0e <cprintf>
f01134ad:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART II: Destination page(s) not exist [Supervisor] 25% */
	/*========================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor] [25%]\n") ;
f01134b0:	83 ec 0c             	sub    $0xc,%esp
f01134b3:	68 98 a0 13 f0       	push   $0xf013a098
f01134b8:	e8 51 d8 fe ff       	call   f0100d0e <cprintf>
f01134bd:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01134c0:	e8 d8 96 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01134c5:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0000000,0x40000000, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f01134c8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01134cb:	c1 e0 05             	shl    $0x5,%eax
f01134ce:	83 ec 0c             	sub    $0xc,%esp
f01134d1:	68 02 0e 00 00       	push   $0xe02
f01134d6:	50                   	push   %eax
f01134d7:	68 00 00 00 40       	push   $0x40000000
f01134dc:	68 00 00 00 f0       	push   $0xf0000000
f01134e1:	ff 75 cc             	pushl  -0x34(%ebp)
f01134e4:	e8 29 55 ff ff       	call   f0108a12 <share_chunk>
f01134e9:	83 c4 20             	add    $0x20,%esp
f01134ec:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01134ef:	e8 a9 96 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01134f4:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (32*mega) / (4*mega))
f01134f7:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f01134fb:	75 1f                	jne    f011351c <test_share_chunk+0x273>
f01134fd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113500:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113503:	89 c1                	mov    %eax,%ecx
f0113505:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113508:	c1 e0 05             	shl    $0x5,%eax
f011350b:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011350e:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0113515:	99                   	cltd   
f0113516:	f7 fb                	idiv   %ebx
f0113518:	39 c1                	cmp    %eax,%ecx
f011351a:	74 28                	je     f0113544 <test_share_chunk+0x29b>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011351c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011351f:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113522:	83 ec 0c             	sub    $0xc,%esp
f0113525:	50                   	push   %eax
f0113526:	ff 75 a8             	pushl  -0x58(%ebp)
f0113529:	68 d4 a0 13 f0       	push   $0xf013a0d4
f011352e:	68 c8 03 00 00       	push   $0x3c8
f0113533:	68 3e 89 13 f0       	push   $0xf013893e
f0113538:	e8 d6 ce fe ff       	call   f0100413 <_warn>
f011353d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113540:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113544:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113548:	74 04                	je     f011354e <test_share_chunk+0x2a5>
f011354a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011354e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113552:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0xF0000000, 0x40000000, 32*mega, -1, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0113559:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011355c:	c1 e0 05             	shl    $0x5,%eax
f011355f:	83 ec 08             	sub    $0x8,%esp
f0113562:	6a 02                	push   $0x2
f0113564:	6a 07                	push   $0x7
f0113566:	6a 03                	push   $0x3
f0113568:	68 07 0e 00 00       	push   $0xe07
f011356d:	68 03 0e 00 00       	push   $0xe03
f0113572:	6a ff                	push   $0xffffffff
f0113574:	50                   	push   %eax
f0113575:	68 00 00 00 40       	push   $0x40000000
f011357a:	68 00 00 00 f0       	push   $0xf0000000
f011357f:	ff 75 cc             	pushl  -0x34(%ebp)
f0113582:	e8 20 28 00 00       	call   f0115da7 <CCP>
f0113587:	83 c4 30             	add    $0x30,%esp
f011358a:	85 c0                	test   %eax,%eax
f011358c:	75 25                	jne    f01135b3 <test_share_chunk+0x30a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011358e:	83 ec 04             	sub    $0x4,%esp
f0113591:	68 0c a0 13 f0       	push   $0xf013a00c
f0113596:	68 d1 03 00 00       	push   $0x3d1
f011359b:	68 3e 89 13 f0       	push   $0xf013893e
f01135a0:	e8 6e ce fe ff       	call   f0100413 <_warn>
f01135a5:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01135a8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01135ac:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}

		if (CCP(proc_directory, 0xF0000000, 0x40000000, 12*kilo, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f01135b3:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01135b6:	89 d0                	mov    %edx,%eax
f01135b8:	01 c0                	add    %eax,%eax
f01135ba:	01 d0                	add    %edx,%eax
f01135bc:	c1 e0 02             	shl    $0x2,%eax
f01135bf:	83 ec 08             	sub    $0x8,%esp
f01135c2:	6a 02                	push   $0x2
f01135c4:	6a 07                	push   $0x7
f01135c6:	6a 03                	push   $0x3
f01135c8:	68 07 0e 00 00       	push   $0xe07
f01135cd:	68 03 0e 00 00       	push   $0xe03
f01135d2:	6a 02                	push   $0x2
f01135d4:	50                   	push   %eax
f01135d5:	68 00 00 00 40       	push   $0x40000000
f01135da:	68 00 00 00 f0       	push   $0xf0000000
f01135df:	ff 75 cc             	pushl  -0x34(%ebp)
f01135e2:	e8 c0 27 00 00       	call   f0115da7 <CCP>
f01135e7:	83 c4 30             	add    $0x30,%esp
f01135ea:	85 c0                	test   %eax,%eax
f01135ec:	75 1e                	jne    f011360c <test_share_chunk+0x363>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01135ee:	83 ec 04             	sub    $0x4,%esp
f01135f1:	68 0c a0 13 f0       	push   $0xf013a00c
f01135f6:	68 d8 03 00 00       	push   $0x3d8
f01135fb:	68 3e 89 13 f0       	push   $0xf013893e
f0113600:	e8 0e ce fe ff       	call   f0100413 <_warn>
f0113605:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113608:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011360c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113610:	74 04                	je     f0113616 <test_share_chunk+0x36d>
f0113612:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113616:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		extern char end_of_kernel[];
		uint32 endRange = ((uint32)end_of_kernel - KERNEL_BASE);
f011361a:	b8 bc 5e 87 f0       	mov    $0xf0875ebc,%eax
f011361f:	05 00 00 00 10       	add    $0x10000000,%eax
f0113624:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (CCP(proc_directory, 0xF0000000+PHYS_IO_MEM, 0x40000000+PHYS_IO_MEM, endRange - PHYS_IO_MEM, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0113627:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011362a:	2d 00 00 0a 00       	sub    $0xa0000,%eax
f011362f:	83 ec 08             	sub    $0x8,%esp
f0113632:	6a 02                	push   $0x2
f0113634:	6a 07                	push   $0x7
f0113636:	6a 03                	push   $0x3
f0113638:	68 07 0e 00 00       	push   $0xe07
f011363d:	68 03 0e 00 00       	push   $0xe03
f0113642:	6a 02                	push   $0x2
f0113644:	50                   	push   %eax
f0113645:	68 00 00 0a 40       	push   $0x400a0000
f011364a:	68 00 00 0a f0       	push   $0xf00a0000
f011364f:	ff 75 cc             	pushl  -0x34(%ebp)
f0113652:	e8 50 27 00 00       	call   f0115da7 <CCP>
f0113657:	83 c4 30             	add    $0x30,%esp
f011365a:	85 c0                	test   %eax,%eax
f011365c:	75 1e                	jne    f011367c <test_share_chunk+0x3d3>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011365e:	83 ec 04             	sub    $0x4,%esp
f0113661:	68 0c a0 13 f0       	push   $0xf013a00c
f0113666:	68 e2 03 00 00       	push   $0x3e2
f011366b:	68 3e 89 13 f0       	push   $0xf013893e
f0113670:	e8 9e cd fe ff       	call   f0100413 <_warn>
f0113675:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113678:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011367c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113680:	74 04                	je     f0113686 <test_share_chunk+0x3dd>
f0113682:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113686:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f011368a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011368e:	0f 84 a4 00 00 00    	je     f0113738 <test_share_chunk+0x48f>
		{
			ptr1 = (char*)0xF00007FF; *ptr1 = 'A' ;
f0113694:	c7 45 bc ff 07 00 f0 	movl   $0xf00007ff,-0x44(%ebp)
f011369b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011369e:	c6 00 41             	movb   $0x41,(%eax)
			ptr2 = (char*)0x400007FF;
f01136a1:	c7 45 b8 ff 07 00 40 	movl   $0x400007ff,-0x48(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A')
f01136a8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01136ab:	8a 00                	mov    (%eax),%al
f01136ad:	3c 41                	cmp    $0x41,%al
f01136af:	75 09                	jne    f01136ba <test_share_chunk+0x411>
f01136b1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01136b4:	8a 00                	mov    (%eax),%al
f01136b6:	3c 41                	cmp    $0x41,%al
f01136b8:	74 1e                	je     f01136d8 <test_share_chunk+0x42f>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01136ba:	83 ec 04             	sub    $0x4,%esp
f01136bd:	68 54 a0 13 f0       	push   $0xf013a054
f01136c2:	68 ef 03 00 00       	push   $0x3ef
f01136c7:	68 3e 89 13 f0       	push   $0xf013893e
f01136cc:	e8 42 cd fe ff       	call   f0100413 <_warn>
f01136d1:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01136d4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01136d8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01136dc:	74 04                	je     f01136e2 <test_share_chunk+0x439>
f01136de:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01136e2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

			ptr1 = (char*)0x41000FFF; *ptr1 = 'C' ;
f01136e6:	c7 45 bc ff 0f 00 41 	movl   $0x41000fff,-0x44(%ebp)
f01136ed:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01136f0:	c6 00 43             	movb   $0x43,(%eax)
			ptr2 = (char*)0xF1000FFF;
f01136f3:	c7 45 b8 ff 0f 00 f1 	movl   $0xf1000fff,-0x48(%ebp)

			if ((*ptr1) != 'C' || (*ptr2) != 'C')
f01136fa:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01136fd:	8a 00                	mov    (%eax),%al
f01136ff:	3c 43                	cmp    $0x43,%al
f0113701:	75 09                	jne    f011370c <test_share_chunk+0x463>
f0113703:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113706:	8a 00                	mov    (%eax),%al
f0113708:	3c 43                	cmp    $0x43,%al
f011370a:	74 1e                	je     f011372a <test_share_chunk+0x481>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f011370c:	83 ec 04             	sub    $0x4,%esp
f011370f:	68 54 a0 13 f0       	push   $0xf013a054
f0113714:	68 fa 03 00 00       	push   $0x3fa
f0113719:	68 3e 89 13 f0       	push   $0xf013893e
f011371e:	e8 f0 cc fe ff       	call   f0100413 <_warn>
f0113723:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113726:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f011372a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011372e:	74 04                	je     f0113734 <test_share_chunk+0x48b>
f0113730:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113734:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0113738:	83 ec 0c             	sub    $0xc,%esp
f011373b:	68 63 96 13 f0       	push   $0xf0139663
f0113740:	e8 c9 d5 fe ff       	call   f0100d0e <cprintf>
f0113745:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART III: Destination page(s) not exist [User r/w] 25%  */
	/*========================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [User r/w] [25%]\n") ;
f0113748:	83 ec 0c             	sub    $0xc,%esp
f011374b:	68 24 a1 13 f0       	push   $0xf013a124
f0113750:	e8 b9 d5 fe ff       	call   f0100d0e <cprintf>
f0113755:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113758:	e8 40 94 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011375d:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x40000000,0x0, 648*kilo, PERM_WRITEABLE|PERM_USER) ;
f0113760:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113763:	89 d0                	mov    %edx,%eax
f0113765:	c1 e0 03             	shl    $0x3,%eax
f0113768:	01 d0                	add    %edx,%eax
f011376a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0113771:	01 d0                	add    %edx,%eax
f0113773:	c1 e0 03             	shl    $0x3,%eax
f0113776:	83 ec 0c             	sub    $0xc,%esp
f0113779:	6a 06                	push   $0x6
f011377b:	50                   	push   %eax
f011377c:	6a 00                	push   $0x0
f011377e:	68 00 00 00 40       	push   $0x40000000
f0113783:	ff 75 cc             	pushl  -0x34(%ebp)
f0113786:	e8 87 52 ff ff       	call   f0108a12 <share_chunk>
f011378b:	83 c4 20             	add    $0x20,%esp
f011378e:	89 45 a0             	mov    %eax,-0x60(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113791:	e8 07 94 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0113796:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0113799:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f011379d:	75 0b                	jne    f01137aa <test_share_chunk+0x501>
f011379f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01137a2:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01137a5:	83 f8 01             	cmp    $0x1,%eax
f01137a8:	74 28                	je     f01137d2 <test_share_chunk+0x529>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01137aa:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01137ad:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01137b0:	83 ec 0c             	sub    $0xc,%esp
f01137b3:	50                   	push   %eax
f01137b4:	ff 75 a0             	pushl  -0x60(%ebp)
f01137b7:	68 d4 a0 13 f0       	push   $0xf013a0d4
f01137bc:	68 10 04 00 00       	push   $0x410
f01137c1:	68 3e 89 13 f0       	push   $0xf013893e
f01137c6:	e8 48 cc fe ff       	call   f0100413 <_warn>
f01137cb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01137ce:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01137d2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01137d6:	74 04                	je     f01137dc <test_share_chunk+0x533>
f01137d8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01137dc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01137e0:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0x40000000, 0x0, PHYS_IO_MEM + 4*kilo, -1, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f01137e7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01137ea:	05 00 80 02 00       	add    $0x28000,%eax
f01137ef:	c1 e0 02             	shl    $0x2,%eax
f01137f2:	83 ec 08             	sub    $0x8,%esp
f01137f5:	6a 02                	push   $0x2
f01137f7:	6a 07                	push   $0x7
f01137f9:	6a 03                	push   $0x3
f01137fb:	6a 07                	push   $0x7
f01137fd:	6a 07                	push   $0x7
f01137ff:	6a ff                	push   $0xffffffff
f0113801:	50                   	push   %eax
f0113802:	6a 00                	push   $0x0
f0113804:	68 00 00 00 40       	push   $0x40000000
f0113809:	ff 75 cc             	pushl  -0x34(%ebp)
f011380c:	e8 96 25 00 00       	call   f0115da7 <CCP>
f0113811:	83 c4 30             	add    $0x30,%esp
f0113814:	85 c0                	test   %eax,%eax
f0113816:	75 25                	jne    f011383d <test_share_chunk+0x594>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113818:	83 ec 04             	sub    $0x4,%esp
f011381b:	68 0c a0 13 f0       	push   $0xf013a00c
f0113820:	68 19 04 00 00       	push   $0x419
f0113825:	68 3e 89 13 f0       	push   $0xf013893e
f011382a:	e8 e4 cb fe ff       	call   f0100413 <_warn>
f011382f:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113832:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113836:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}

		if (CCP(proc_directory, 0x40000000, 0x0, 12*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f011383d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113840:	89 d0                	mov    %edx,%eax
f0113842:	01 c0                	add    %eax,%eax
f0113844:	01 d0                	add    %edx,%eax
f0113846:	c1 e0 02             	shl    $0x2,%eax
f0113849:	83 ec 08             	sub    $0x8,%esp
f011384c:	6a 02                	push   $0x2
f011384e:	6a 07                	push   $0x7
f0113850:	6a 03                	push   $0x3
f0113852:	6a 07                	push   $0x7
f0113854:	6a 07                	push   $0x7
f0113856:	6a 03                	push   $0x3
f0113858:	50                   	push   %eax
f0113859:	6a 00                	push   $0x0
f011385b:	68 00 00 00 40       	push   $0x40000000
f0113860:	ff 75 cc             	pushl  -0x34(%ebp)
f0113863:	e8 3f 25 00 00       	call   f0115da7 <CCP>
f0113868:	83 c4 30             	add    $0x30,%esp
f011386b:	85 c0                	test   %eax,%eax
f011386d:	75 1e                	jne    f011388d <test_share_chunk+0x5e4>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011386f:	83 ec 04             	sub    $0x4,%esp
f0113872:	68 0c a0 13 f0       	push   $0xf013a00c
f0113877:	68 20 04 00 00       	push   $0x420
f011387c:	68 3e 89 13 f0       	push   $0xf013893e
f0113881:	e8 8d cb fe ff       	call   f0100413 <_warn>
f0113886:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113889:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011388d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113891:	74 04                	je     f0113897 <test_share_chunk+0x5ee>
f0113893:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113897:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40003000, 0x3000, PHYS_IO_MEM - 12*kilo, 2, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f011389b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011389e:	89 d0                	mov    %edx,%eax
f01138a0:	01 c0                	add    %eax,%eax
f01138a2:	01 d0                	add    %edx,%eax
f01138a4:	c1 e0 02             	shl    $0x2,%eax
f01138a7:	f7 d8                	neg    %eax
f01138a9:	05 00 00 0a 00       	add    $0xa0000,%eax
f01138ae:	83 ec 08             	sub    $0x8,%esp
f01138b1:	6a 02                	push   $0x2
f01138b3:	6a 07                	push   $0x7
f01138b5:	6a 03                	push   $0x3
f01138b7:	6a 07                	push   $0x7
f01138b9:	6a 07                	push   $0x7
f01138bb:	6a 02                	push   $0x2
f01138bd:	50                   	push   %eax
f01138be:	68 00 30 00 00       	push   $0x3000
f01138c3:	68 00 30 00 40       	push   $0x40003000
f01138c8:	ff 75 cc             	pushl  -0x34(%ebp)
f01138cb:	e8 d7 24 00 00       	call   f0115da7 <CCP>
f01138d0:	83 c4 30             	add    $0x30,%esp
f01138d3:	85 c0                	test   %eax,%eax
f01138d5:	75 1e                	jne    f01138f5 <test_share_chunk+0x64c>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01138d7:	83 ec 04             	sub    $0x4,%esp
f01138da:	68 0c a0 13 f0       	push   $0xf013a00c
f01138df:	68 28 04 00 00       	push   $0x428
f01138e4:	68 3e 89 13 f0       	push   $0xf013893e
f01138e9:	e8 25 cb fe ff       	call   f0100413 <_warn>
f01138ee:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01138f1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01138f5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01138f9:	74 04                	je     f01138ff <test_share_chunk+0x656>
f01138fb:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01138ff:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40000000+PHYS_IO_MEM, PHYS_IO_MEM, 4*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0113903:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113906:	c1 e0 02             	shl    $0x2,%eax
f0113909:	83 ec 08             	sub    $0x8,%esp
f011390c:	6a 02                	push   $0x2
f011390e:	6a 07                	push   $0x7
f0113910:	6a 03                	push   $0x3
f0113912:	6a 07                	push   $0x7
f0113914:	6a 07                	push   $0x7
f0113916:	6a 03                	push   $0x3
f0113918:	50                   	push   %eax
f0113919:	68 00 00 0a 00       	push   $0xa0000
f011391e:	68 00 00 0a 40       	push   $0x400a0000
f0113923:	ff 75 cc             	pushl  -0x34(%ebp)
f0113926:	e8 7c 24 00 00       	call   f0115da7 <CCP>
f011392b:	83 c4 30             	add    $0x30,%esp
f011392e:	85 c0                	test   %eax,%eax
f0113930:	75 1e                	jne    f0113950 <test_share_chunk+0x6a7>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113932:	83 ec 04             	sub    $0x4,%esp
f0113935:	68 0c a0 13 f0       	push   $0xf013a00c
f011393a:	68 30 04 00 00       	push   $0x430
f011393f:	68 3e 89 13 f0       	push   $0xf013893e
f0113944:	e8 ca ca fe ff       	call   f0100413 <_warn>
f0113949:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011394c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113950:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113954:	74 04                	je     f011395a <test_share_chunk+0x6b1>
f0113956:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011395a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f011395e:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0113962:	0f 84 92 00 00 00    	je     f01139fa <test_share_chunk+0x751>
		{
			ptr1 = (char*)0x7FF;
f0113968:	c7 45 bc ff 07 00 00 	movl   $0x7ff,-0x44(%ebp)
			ptr2 = (char*)0xF00007FF;
f011396f:	c7 45 b8 ff 07 00 f0 	movl   $0xf00007ff,-0x48(%ebp)
			ptr3 = (char*)0x400007FF;
f0113976:	c7 45 9c ff 07 00 40 	movl   $0x400007ff,-0x64(%ebp)
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
f011397d:	c7 45 98 ff ff 09 00 	movl   $0x9ffff,-0x68(%ebp)
f0113984:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113987:	c6 00 44             	movb   $0x44,(%eax)
			ptr5 = (char*)0xF009FFFF;
f011398a:	c7 45 94 ff ff 09 f0 	movl   $0xf009ffff,-0x6c(%ebp)
			ptr6 = (char*)0x4009FFFF;
f0113991:	c7 45 90 ff ff 09 40 	movl   $0x4009ffff,-0x70(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f0113998:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011399b:	8a 00                	mov    (%eax),%al
f011399d:	3c 41                	cmp    $0x41,%al
f011399f:	75 2d                	jne    f01139ce <test_share_chunk+0x725>
f01139a1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01139a4:	8a 00                	mov    (%eax),%al
f01139a6:	3c 41                	cmp    $0x41,%al
f01139a8:	75 24                	jne    f01139ce <test_share_chunk+0x725>
f01139aa:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01139ad:	8a 00                	mov    (%eax),%al
f01139af:	3c 41                	cmp    $0x41,%al
f01139b1:	75 1b                	jne    f01139ce <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f01139b3:	8b 45 98             	mov    -0x68(%ebp),%eax
f01139b6:	8a 00                	mov    (%eax),%al
			ptr3 = (char*)0x400007FF;
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
			ptr5 = (char*)0xF009FFFF;
			ptr6 = (char*)0x4009FFFF;

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f01139b8:	3c 44                	cmp    $0x44,%al
f01139ba:	75 12                	jne    f01139ce <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f01139bc:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01139bf:	8a 00                	mov    (%eax),%al
f01139c1:	3c 44                	cmp    $0x44,%al
f01139c3:	75 09                	jne    f01139ce <test_share_chunk+0x725>
f01139c5:	8b 45 90             	mov    -0x70(%ebp),%eax
f01139c8:	8a 00                	mov    (%eax),%al
f01139ca:	3c 44                	cmp    $0x44,%al
f01139cc:	74 1e                	je     f01139ec <test_share_chunk+0x743>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01139ce:	83 ec 04             	sub    $0x4,%esp
f01139d1:	68 54 a0 13 f0       	push   $0xf013a054
f01139d6:	68 42 04 00 00       	push   $0x442
f01139db:	68 3e 89 13 f0       	push   $0xf013893e
f01139e0:	e8 2e ca fe ff       	call   f0100413 <_warn>
f01139e5:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01139e8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01139ec:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01139f0:	74 04                	je     f01139f6 <test_share_chunk+0x74d>
f01139f2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01139f6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f01139fa:	83 ec 0c             	sub    $0xc,%esp
f01139fd:	68 c6 96 13 f0       	push   $0xf01396c6
f0113a02:	e8 07 d3 fe ff       	call   f0100d0e <cprintf>
f0113a07:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r] 30%     */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r] [30%]\n") ;
f0113a0a:	83 ec 0c             	sub    $0xc,%esp
f0113a0d:	68 60 a1 13 f0       	push   $0xf013a160
f0113a12:	e8 f7 d2 fe ff       	call   f0100d0e <cprintf>
f0113a17:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113a1a:	e8 7e 91 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0113a1f:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x9FC00,0x3FFC00, 7*kilo, PERM_USER) ;
f0113a22:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113a25:	89 d0                	mov    %edx,%eax
f0113a27:	01 c0                	add    %eax,%eax
f0113a29:	01 d0                	add    %edx,%eax
f0113a2b:	01 c0                	add    %eax,%eax
f0113a2d:	01 d0                	add    %edx,%eax
f0113a2f:	83 ec 0c             	sub    $0xc,%esp
f0113a32:	6a 04                	push   $0x4
f0113a34:	50                   	push   %eax
f0113a35:	68 00 fc 3f 00       	push   $0x3ffc00
f0113a3a:	68 00 fc 09 00       	push   $0x9fc00
f0113a3f:	ff 75 cc             	pushl  -0x34(%ebp)
f0113a42:	e8 cb 4f ff ff       	call   f0108a12 <share_chunk>
f0113a47:	83 c4 20             	add    $0x20,%esp
f0113a4a:	89 45 8c             	mov    %eax,-0x74(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113a4d:	e8 4b 91 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0113a52:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0113a55:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
f0113a59:	75 0b                	jne    f0113a66 <test_share_chunk+0x7bd>
f0113a5b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113a5e:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113a61:	83 f8 01             	cmp    $0x1,%eax
f0113a64:	74 28                	je     f0113a8e <test_share_chunk+0x7e5>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113a66:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113a69:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113a6c:	83 ec 0c             	sub    $0xc,%esp
f0113a6f:	50                   	push   %eax
f0113a70:	ff 75 8c             	pushl  -0x74(%ebp)
f0113a73:	68 d4 a0 13 f0       	push   $0xf013a0d4
f0113a78:	68 58 04 00 00       	push   $0x458
f0113a7d:	68 3e 89 13 f0       	push   $0xf013893e
f0113a82:	e8 8c c9 fe ff       	call   f0100413 <_warn>
f0113a87:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113a8a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113a8e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113a92:	74 04                	je     f0113a98 <test_share_chunk+0x7ef>
f0113a94:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113a98:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113a9c:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0x9F000, 0x3FF000, 12*kilo, -1, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0113aa3:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113aa6:	89 d0                	mov    %edx,%eax
f0113aa8:	01 c0                	add    %eax,%eax
f0113aaa:	01 d0                	add    %edx,%eax
f0113aac:	c1 e0 02             	shl    $0x2,%eax
f0113aaf:	83 ec 08             	sub    $0x8,%esp
f0113ab2:	6a 02                	push   $0x2
f0113ab4:	6a 07                	push   $0x7
f0113ab6:	6a 07                	push   $0x7
f0113ab8:	6a 07                	push   $0x7
f0113aba:	6a 05                	push   $0x5
f0113abc:	6a ff                	push   $0xffffffff
f0113abe:	50                   	push   %eax
f0113abf:	68 00 f0 3f 00       	push   $0x3ff000
f0113ac4:	68 00 f0 09 00       	push   $0x9f000
f0113ac9:	ff 75 cc             	pushl  -0x34(%ebp)
f0113acc:	e8 d6 22 00 00       	call   f0115da7 <CCP>
f0113ad1:	83 c4 30             	add    $0x30,%esp
f0113ad4:	85 c0                	test   %eax,%eax
f0113ad6:	75 25                	jne    f0113afd <test_share_chunk+0x854>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113ad8:	83 ec 04             	sub    $0x4,%esp
f0113adb:	68 0c a0 13 f0       	push   $0xf013a00c
f0113ae0:	68 61 04 00 00       	push   $0x461
f0113ae5:	68 3e 89 13 f0       	push   $0xf013893e
f0113aea:	e8 24 c9 fe ff       	call   f0100413 <_warn>
f0113aef:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113af2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113af6:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 5 ;
f0113afd:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113b01:	74 04                	je     f0113b07 <test_share_chunk+0x85e>
f0113b03:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113b07:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x9F000, 0x3FF000, 4*kilo, 3, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0113b0b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113b0e:	c1 e0 02             	shl    $0x2,%eax
f0113b11:	83 ec 08             	sub    $0x8,%esp
f0113b14:	6a 02                	push   $0x2
f0113b16:	6a 07                	push   $0x7
f0113b18:	6a 07                	push   $0x7
f0113b1a:	6a 07                	push   $0x7
f0113b1c:	6a 05                	push   $0x5
f0113b1e:	6a 03                	push   $0x3
f0113b20:	50                   	push   %eax
f0113b21:	68 00 f0 3f 00       	push   $0x3ff000
f0113b26:	68 00 f0 09 00       	push   $0x9f000
f0113b2b:	ff 75 cc             	pushl  -0x34(%ebp)
f0113b2e:	e8 74 22 00 00       	call   f0115da7 <CCP>
f0113b33:	83 c4 30             	add    $0x30,%esp
f0113b36:	85 c0                	test   %eax,%eax
f0113b38:	75 1e                	jne    f0113b58 <test_share_chunk+0x8af>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113b3a:	83 ec 04             	sub    $0x4,%esp
f0113b3d:	68 0c a0 13 f0       	push   $0xf013a00c
f0113b42:	68 6a 04 00 00       	push   $0x46a
f0113b47:	68 3e 89 13 f0       	push   $0xf013893e
f0113b4c:	e8 c2 c8 fe ff       	call   f0100413 <_warn>
f0113b51:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113b54:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113b58:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113b5c:	74 04                	je     f0113b62 <test_share_chunk+0x8b9>
f0113b5e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113b62:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xA0000, 0x400000, 8*kilo, 4, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0113b66:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113b69:	c1 e0 03             	shl    $0x3,%eax
f0113b6c:	83 ec 08             	sub    $0x8,%esp
f0113b6f:	6a 02                	push   $0x2
f0113b71:	6a 07                	push   $0x7
f0113b73:	6a 07                	push   $0x7
f0113b75:	6a 07                	push   $0x7
f0113b77:	6a 05                	push   $0x5
f0113b79:	6a 04                	push   $0x4
f0113b7b:	50                   	push   %eax
f0113b7c:	68 00 00 40 00       	push   $0x400000
f0113b81:	68 00 00 0a 00       	push   $0xa0000
f0113b86:	ff 75 cc             	pushl  -0x34(%ebp)
f0113b89:	e8 19 22 00 00       	call   f0115da7 <CCP>
f0113b8e:	83 c4 30             	add    $0x30,%esp
f0113b91:	85 c0                	test   %eax,%eax
f0113b93:	75 1e                	jne    f0113bb3 <test_share_chunk+0x90a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113b95:	83 ec 04             	sub    $0x4,%esp
f0113b98:	68 0c a0 13 f0       	push   $0xf013a00c
f0113b9d:	68 72 04 00 00       	push   $0x472
f0113ba2:	68 3e 89 13 f0       	push   $0xf013893e
f0113ba7:	e8 67 c8 fe ff       	call   f0100413 <_warn>
f0113bac:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113baf:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113bb3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113bb7:	74 04                	je     f0113bbd <test_share_chunk+0x914>
f0113bb9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113bbd:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0113bc1:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0113bc5:	0f 84 b2 00 00 00    	je     f0113c7d <test_share_chunk+0x9d4>
		{
			ptr1 = (char*)0x0009FFFF;
f0113bcb:	c7 45 bc ff ff 09 00 	movl   $0x9ffff,-0x44(%ebp)
			ptr2 = (char*)0x003FFFFF;
f0113bd2:	c7 45 b8 ff ff 3f 00 	movl   $0x3fffff,-0x48(%ebp)
			ptr3 = (char*)0x4009FFFF;
f0113bd9:	c7 45 9c ff ff 09 40 	movl   $0x4009ffff,-0x64(%ebp)
			ptr4 = (char*)0xF009FFFF;
f0113be0:	c7 45 98 ff ff 09 f0 	movl   $0xf009ffff,-0x68(%ebp)

			ptr5 = (char*)0x000A1001;
f0113be7:	c7 45 94 01 10 0a 00 	movl   $0xa1001,-0x6c(%ebp)
			ptr6 = (char*)0x00401001;
f0113bee:	c7 45 90 01 10 40 00 	movl   $0x401001,-0x70(%ebp)
			ptr7 = (char*)0x400A1001;
f0113bf5:	c7 45 88 01 10 0a 40 	movl   $0x400a1001,-0x78(%ebp)
			ptr8 = (char*)0xF00A1001;
f0113bfc:	c7 45 84 01 10 0a f0 	movl   $0xf00a1001,-0x7c(%ebp)

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f0113c03:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113c06:	8a 00                	mov    (%eax),%al
f0113c08:	3c 44                	cmp    $0x44,%al
f0113c0a:	75 45                	jne    f0113c51 <test_share_chunk+0x9a8>
f0113c0c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113c0f:	8a 00                	mov    (%eax),%al
f0113c11:	3c 44                	cmp    $0x44,%al
f0113c13:	75 3c                	jne    f0113c51 <test_share_chunk+0x9a8>
f0113c15:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113c18:	8a 00                	mov    (%eax),%al
f0113c1a:	3c 44                	cmp    $0x44,%al
f0113c1c:	75 33                	jne    f0113c51 <test_share_chunk+0x9a8>
f0113c1e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113c21:	8a 00                	mov    (%eax),%al
f0113c23:	3c 44                	cmp    $0x44,%al
f0113c25:	75 2a                	jne    f0113c51 <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0113c27:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113c2a:	8a 10                	mov    (%eax),%dl
f0113c2c:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113c2f:	8a 00                	mov    (%eax),%al
			ptr5 = (char*)0x000A1001;
			ptr6 = (char*)0x00401001;
			ptr7 = (char*)0x400A1001;
			ptr8 = (char*)0xF00A1001;

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f0113c31:	38 c2                	cmp    %al,%dl
f0113c33:	75 1c                	jne    f0113c51 <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0113c35:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113c38:	8a 10                	mov    (%eax),%dl
f0113c3a:	8b 45 88             	mov    -0x78(%ebp),%eax
f0113c3d:	8a 00                	mov    (%eax),%al
f0113c3f:	38 c2                	cmp    %al,%dl
f0113c41:	75 0e                	jne    f0113c51 <test_share_chunk+0x9a8>
f0113c43:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113c46:	8a 10                	mov    (%eax),%dl
f0113c48:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0113c4b:	8a 00                	mov    (%eax),%al
f0113c4d:	38 c2                	cmp    %al,%dl
f0113c4f:	74 1e                	je     f0113c6f <test_share_chunk+0x9c6>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113c51:	83 ec 04             	sub    $0x4,%esp
f0113c54:	68 54 a0 13 f0       	push   $0xf013a054
f0113c59:	68 87 04 00 00       	push   $0x487
f0113c5e:	68 3e 89 13 f0       	push   $0xf013893e
f0113c63:	e8 ab c7 fe ff       	call   f0100413 <_warn>
f0113c68:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113c6b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113c6f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113c73:	74 04                	je     f0113c79 <test_share_chunk+0x9d0>
f0113c75:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113c79:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE IV: END\n") ;
f0113c7d:	83 ec 0c             	sub    $0xc,%esp
f0113c80:	68 98 a1 13 f0       	push   $0xf013a198
f0113c85:	e8 84 d0 fe ff       	call   f0100d0e <cprintf>
f0113c8a:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] share_chunk: FINISHED. Evaluation = %d\n", eval);
f0113c8d:	83 ec 08             	sub    $0x8,%esp
f0113c90:	ff 75 e4             	pushl  -0x1c(%ebp)
f0113c93:	68 a8 a1 13 f0       	push   $0xf013a1a8
f0113c98:	e8 71 d0 fe ff       	call   f0100d0e <cprintf>
f0113c9d:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0113ca0:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0113ca4:	75 10                	jne    f0113cb6 <test_share_chunk+0xa0d>
		cprintf("Congratulations!! test share_chunk completed successfully.\n");
f0113ca6:	83 ec 0c             	sub    $0xc,%esp
f0113ca9:	68 d8 a1 13 f0       	push   $0xf013a1d8
f0113cae:	e8 5b d0 fe ff       	call   f0100d0e <cprintf>
f0113cb3:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0113cb6:	a1 ac 5d 87 f0       	mov    0xf0875dac,%eax
f0113cbb:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0113cbe:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113cc1:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0113cc4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0113cc9:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0113ccc:	5b                   	pop    %ebx
f0113ccd:	5e                   	pop    %esi
f0113cce:	5f                   	pop    %edi
f0113ccf:	5d                   	pop    %ebp
f0113cd0:	c3                   	ret    

f0113cd1 <test_allocate_chunk>:

//===============================
// 4) TEST ALLOCATE CHUNK:
//===============================
int test_allocate_chunk()
{
f0113cd1:	55                   	push   %ebp
f0113cd2:	89 e5                	mov    %esp,%ebp
f0113cd4:	57                   	push   %edi
f0113cd5:	56                   	push   %esi
f0113cd6:	53                   	push   %ebx
f0113cd7:	81 ec ac 00 00 00    	sub    $0xac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0113cdd:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0113ce3:	bb d8 93 13 f0       	mov    $0xf01393d8,%ebx
f0113ce8:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113ced:	89 c7                	mov    %eax,%edi
f0113cef:	89 de                	mov    %ebx,%esi
f0113cf1:	89 d1                	mov    %edx,%ecx
f0113cf3:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113cf5:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0113cfb:	b9 23 00 00 00       	mov    $0x23,%ecx
f0113d00:	b0 00                	mov    $0x0,%al
f0113d02:	89 d7                	mov    %edx,%edi
f0113d04:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0113d06:	6a 00                	push   $0x0
f0113d08:	6a 0a                	push   $0xa
f0113d0a:	6a 14                	push   $0x14
f0113d0c:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0113d12:	50                   	push   %eax
f0113d13:	e8 4b 51 ff ff       	call   f0108e63 <env_create>
f0113d18:	83 c4 10             	add    $0x10,%esp
f0113d1b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0113d1e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0113d21:	8b 40 5c             	mov    0x5c(%eax),%eax
f0113d24:	89 45 d0             	mov    %eax,-0x30(%ebp)
	lcr3(env->env_cr3) ;
f0113d27:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0113d2a:	8b 40 60             	mov    0x60(%eax),%eax
f0113d2d:	89 45 90             	mov    %eax,-0x70(%ebp)
f0113d30:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113d33:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0113d36:	83 ec 0c             	sub    $0xc,%esp
f0113d39:	ff 75 d0             	pushl  -0x30(%ebp)
f0113d3c:	e8 32 20 00 00       	call   f0115d73 <ClearUserSpace>
f0113d41:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0113d44:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f0113d4b:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)
	uint32 eval = 0;
f0113d52:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0113d59:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 30% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [30%]\n") ;
f0113d5d:	83 ec 0c             	sub    $0xc,%esp
f0113d60:	68 14 a2 13 f0       	push   $0xf013a214
f0113d65:	e8 a4 cf fe ff       	call   f0100d0e <cprintf>
f0113d6a:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)KERNEL_STACK_TOP - 1;
f0113d6d:	c7 45 c0 ff ff bf ef 	movl   $0xefbfffff,-0x40(%ebp)
		ptr2 = (char*)KERNEL_STACK_TOP - 2;
f0113d74:	c7 45 bc fe ff bf ef 	movl   $0xefbffffe,-0x44(%ebp)
		tptr[1] = *ptr1 ;
f0113d7b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113d7e:	8a 00                	mov    (%eax),%al
f0113d80:	88 85 55 ff ff ff    	mov    %al,-0xab(%ebp)
		tptr[2] = *ptr2 ;
f0113d86:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113d89:	8a 00                	mov    (%eax),%al
f0113d8b:	88 85 56 ff ff ff    	mov    %al,-0xaa(%ebp)
		uint32 old_perms = GP(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE) ;
f0113d91:	83 ec 08             	sub    $0x8,%esp
f0113d94:	68 00 f0 bf ef       	push   $0xefbff000
f0113d99:	ff 75 d0             	pushl  -0x30(%ebp)
f0113d9c:	e8 b3 1f 00 00       	call   f0115d54 <GP>
f0113da1:	83 c4 10             	add    $0x10,%esp
f0113da4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113da7:	e8 f1 8d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0113dac:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE, 4*kilo, PERM_WRITEABLE) ;
f0113daf:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113db2:	c1 e0 02             	shl    $0x2,%eax
f0113db5:	6a 02                	push   $0x2
f0113db7:	50                   	push   %eax
f0113db8:	68 00 f0 bf ef       	push   $0xefbff000
f0113dbd:	ff 75 d0             	pushl  -0x30(%ebp)
f0113dc0:	e8 60 4d ff ff       	call   f0108b25 <allocate_chunk>
f0113dc5:	83 c4 10             	add    $0x10,%esp
f0113dc8:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113dcb:	e8 cd 8d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0113dd0:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0113dd3:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0113dd7:	75 08                	jne    f0113de1 <test_allocate_chunk+0x110>
f0113dd9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113ddc:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0113ddf:	74 2a                	je     f0113e0b <test_allocate_chunk+0x13a>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0113de1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113de4:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113de7:	83 ec 08             	sub    $0x8,%esp
f0113dea:	6a 00                	push   $0x0
f0113dec:	50                   	push   %eax
f0113ded:	ff 75 b0             	pushl  -0x50(%ebp)
f0113df0:	68 40 a2 13 f0       	push   $0xf013a240
f0113df5:	68 c3 04 00 00       	push   $0x4c3
f0113dfa:	68 3e 89 13 f0       	push   $0xf013893e
f0113dff:	e8 0f c6 fe ff       	call   f0100413 <_warn>
f0113e04:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113e07:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113e0b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113e0f:	74 04                	je     f0113e15 <test_allocate_chunk+0x144>
f0113e11:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113e15:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113e19:	e8 7f 8d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0113e1e:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 5*kilo, 2*kilo, PERM_WRITEABLE) ;
f0113e21:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113e24:	01 c0                	add    %eax,%eax
f0113e26:	89 c1                	mov    %eax,%ecx
f0113e28:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113e2b:	89 d0                	mov    %edx,%eax
f0113e2d:	c1 e0 02             	shl    $0x2,%eax
f0113e30:	01 d0                	add    %edx,%eax
f0113e32:	f7 d8                	neg    %eax
f0113e34:	2d 00 00 40 10       	sub    $0x10400000,%eax
f0113e39:	6a 02                	push   $0x2
f0113e3b:	51                   	push   %ecx
f0113e3c:	50                   	push   %eax
f0113e3d:	ff 75 d0             	pushl  -0x30(%ebp)
f0113e40:	e8 e0 4c ff ff       	call   f0108b25 <allocate_chunk>
f0113e45:	83 c4 10             	add    $0x10,%esp
f0113e48:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113e4b:	e8 4d 8d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0113e50:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0113e53:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0113e57:	75 08                	jne    f0113e61 <test_allocate_chunk+0x190>
f0113e59:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113e5c:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0113e5f:	74 2a                	je     f0113e8b <test_allocate_chunk+0x1ba>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0113e61:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113e64:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113e67:	83 ec 08             	sub    $0x8,%esp
f0113e6a:	6a 00                	push   $0x0
f0113e6c:	50                   	push   %eax
f0113e6d:	ff 75 b0             	pushl  -0x50(%ebp)
f0113e70:	68 40 a2 13 f0       	push   $0xf013a240
f0113e75:	68 d1 04 00 00       	push   $0x4d1
f0113e7a:	68 3e 89 13 f0       	push   $0xf013893e
f0113e7f:	e8 8f c5 fe ff       	call   f0100413 <_warn>
f0113e84:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113e87:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113e8b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113e8f:	74 04                	je     f0113e95 <test_allocate_chunk+0x1c4>
f0113e91:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113e95:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0, KERNEL_STACK_TOP-1*PAGE_SIZE, 4*kilo, 1, old_perms, 0xFFF, 0, 0, CHK_ALLOC) == 0)
f0113e99:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113e9c:	c1 e0 02             	shl    $0x2,%eax
f0113e9f:	83 ec 08             	sub    $0x8,%esp
f0113ea2:	6a 03                	push   $0x3
f0113ea4:	6a 00                	push   $0x0
f0113ea6:	6a 00                	push   $0x0
f0113ea8:	68 ff 0f 00 00       	push   $0xfff
f0113ead:	ff 75 b8             	pushl  -0x48(%ebp)
f0113eb0:	6a 01                	push   $0x1
f0113eb2:	50                   	push   %eax
f0113eb3:	68 00 f0 bf ef       	push   $0xefbff000
f0113eb8:	6a 00                	push   $0x0
f0113eba:	ff 75 d0             	pushl  -0x30(%ebp)
f0113ebd:	e8 e5 1e 00 00       	call   f0115da7 <CCP>
f0113ec2:	83 c4 30             	add    $0x30,%esp
f0113ec5:	85 c0                	test   %eax,%eax
f0113ec7:	75 1e                	jne    f0113ee7 <test_allocate_chunk+0x216>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0113ec9:	83 ec 04             	sub    $0x4,%esp
f0113ecc:	68 a8 a2 13 f0       	push   $0xf013a2a8
f0113ed1:	68 d9 04 00 00       	push   $0x4d9
f0113ed6:	68 3e 89 13 f0       	push   $0xf013893e
f0113edb:	e8 33 c5 fe ff       	call   f0100413 <_warn>
f0113ee0:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113ee3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113ee7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113eeb:	74 04                	je     f0113ef1 <test_allocate_chunk+0x220>
f0113eed:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113ef1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if ((*ptr1) != tptr[1] || (*ptr2) != tptr[2])
f0113ef5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113ef8:	8a 10                	mov    (%eax),%dl
f0113efa:	8a 85 55 ff ff ff    	mov    -0xab(%ebp),%al
f0113f00:	38 c2                	cmp    %al,%dl
f0113f02:	75 0f                	jne    f0113f13 <test_allocate_chunk+0x242>
f0113f04:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113f07:	8a 10                	mov    (%eax),%dl
f0113f09:	8a 85 56 ff ff ff    	mov    -0xaa(%ebp),%al
f0113f0f:	38 c2                	cmp    %al,%dl
f0113f11:	74 1e                	je     f0113f31 <test_allocate_chunk+0x260>
		{
			warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0113f13:	83 ec 04             	sub    $0x4,%esp
f0113f16:	68 f4 a2 13 f0       	push   $0xf013a2f4
f0113f1b:	68 e1 04 00 00       	push   $0x4e1
f0113f20:	68 3e 89 13 f0       	push   $0xf013893e
f0113f25:	e8 e9 c4 fe ff       	call   f0100413 <_warn>
f0113f2a:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113f2d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113f31:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113f35:	74 04                	je     f0113f3b <test_allocate_chunk+0x26a>
f0113f37:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113f3b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0113f3f:	83 ec 0c             	sub    $0xc,%esp
f0113f42:	68 89 a0 13 f0       	push   $0xf013a089
f0113f47:	e8 c2 cd fe ff       	call   f0100d0e <cprintf>
f0113f4c:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART II: Destination page(s) not exist [Supervisor r/w] 20% */
	/*============================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor r/w] [20%]\n") ;
f0113f4f:	83 ec 0c             	sub    $0xc,%esp
f0113f52:	68 2c a3 13 f0       	push   $0xf013a32c
f0113f57:	e8 b2 cd fe ff       	call   f0100d0e <cprintf>
f0113f5c:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113f5f:	e8 39 8c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0113f64:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0113f67:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113f6a:	c1 e0 05             	shl    $0x5,%eax
f0113f6d:	68 02 0e 00 00       	push   $0xe02
f0113f72:	50                   	push   %eax
f0113f73:	6a 00                	push   $0x0
f0113f75:	ff 75 d0             	pushl  -0x30(%ebp)
f0113f78:	e8 a8 4b ff ff       	call   f0108b25 <allocate_chunk>
f0113f7d:	83 c4 10             	add    $0x10,%esp
f0113f80:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113f83:	e8 15 8c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0113f88:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((32*mega)/(4*mega) + (32*mega)/(4*kilo)))
f0113f8b:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0113f8f:	75 36                	jne    f0113fc7 <test_allocate_chunk+0x2f6>
f0113f91:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113f94:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113f97:	89 c1                	mov    %eax,%ecx
f0113f99:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113f9c:	c1 e0 05             	shl    $0x5,%eax
f0113f9f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113fa2:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113fa9:	99                   	cltd   
f0113faa:	f7 fe                	idiv   %esi
f0113fac:	89 c3                	mov    %eax,%ebx
f0113fae:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113fb1:	c1 e0 05             	shl    $0x5,%eax
f0113fb4:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113fb7:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113fbe:	99                   	cltd   
f0113fbf:	f7 fe                	idiv   %esi
f0113fc1:	01 d8                	add    %ebx,%eax
f0113fc3:	39 c1                	cmp    %eax,%ecx
f0113fc5:	74 54                	je     f011401b <test_allocate_chunk+0x34a>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((32*mega)/(4*mega) + (32*mega)/(4*kilo)));
f0113fc7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113fca:	c1 e0 05             	shl    $0x5,%eax
f0113fcd:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113fd0:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0113fd7:	99                   	cltd   
f0113fd8:	f7 ff                	idiv   %edi
f0113fda:	89 c1                	mov    %eax,%ecx
f0113fdc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113fdf:	c1 e0 05             	shl    $0x5,%eax
f0113fe2:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113fe5:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113fec:	99                   	cltd   
f0113fed:	f7 fe                	idiv   %esi
f0113fef:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0113ff2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113ff5:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113ff8:	83 ec 08             	sub    $0x8,%esp
f0113ffb:	52                   	push   %edx
f0113ffc:	50                   	push   %eax
f0113ffd:	ff 75 a8             	pushl  -0x58(%ebp)
f0114000:	68 6c a3 13 f0       	push   $0xf013a36c
f0114005:	68 f6 04 00 00       	push   $0x4f6
f011400a:	68 3e 89 13 f0       	push   $0xf013893e
f011400f:	e8 ff c3 fe ff       	call   f0100413 <_warn>
f0114014:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114017:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011401b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011401f:	74 04                	je     f0114025 <test_allocate_chunk+0x354>
f0114021:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114025:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114029:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0, 0x0, 32*mega, 1, 0xE03, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114030:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114033:	c1 e0 05             	shl    $0x5,%eax
f0114036:	83 ec 08             	sub    $0x8,%esp
f0114039:	6a 03                	push   $0x3
f011403b:	6a 00                	push   $0x0
f011403d:	6a 00                	push   $0x0
f011403f:	68 07 0e 00 00       	push   $0xe07
f0114044:	68 03 0e 00 00       	push   $0xe03
f0114049:	6a 01                	push   $0x1
f011404b:	50                   	push   %eax
f011404c:	6a 00                	push   $0x0
f011404e:	6a 00                	push   $0x0
f0114050:	ff 75 d0             	pushl  -0x30(%ebp)
f0114053:	e8 4f 1d 00 00       	call   f0115da7 <CCP>
f0114058:	83 c4 30             	add    $0x30,%esp
f011405b:	85 c0                	test   %eax,%eax
f011405d:	75 25                	jne    f0114084 <test_allocate_chunk+0x3b3>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f011405f:	83 ec 04             	sub    $0x4,%esp
f0114062:	68 a8 a2 13 f0       	push   $0xf013a2a8
f0114067:	68 ff 04 00 00       	push   $0x4ff
f011406c:	68 3e 89 13 f0       	push   $0xf013893e
f0114071:	e8 9d c3 fe ff       	call   f0100413 <_warn>
f0114076:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114079:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f011407d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f0114084:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114088:	74 04                	je     f011408e <test_allocate_chunk+0x3bd>
f011408a:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011408e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114092:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0114096:	74 5a                	je     f01140f2 <test_allocate_chunk+0x421>
		{
			ptr1 = (char*)(0x0+2*kilo); *ptr1 = 'K' ;
f0114098:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011409b:	01 c0                	add    %eax,%eax
f011409d:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01140a0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01140a3:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(0x0+2*mega); *ptr2 = 'M' ;
f01140a6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01140a9:	01 c0                	add    %eax,%eax
f01140ab:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01140ae:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01140b1:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f01140b4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01140b7:	8a 00                	mov    (%eax),%al
f01140b9:	3c 4b                	cmp    $0x4b,%al
f01140bb:	75 09                	jne    f01140c6 <test_allocate_chunk+0x3f5>
f01140bd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01140c0:	8a 00                	mov    (%eax),%al
f01140c2:	3c 4d                	cmp    $0x4d,%al
f01140c4:	74 1e                	je     f01140e4 <test_allocate_chunk+0x413>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f01140c6:	83 ec 04             	sub    $0x4,%esp
f01140c9:	68 f4 a2 13 f0       	push   $0xf013a2f4
f01140ce:	68 0d 05 00 00       	push   $0x50d
f01140d3:	68 3e 89 13 f0       	push   $0xf013893e
f01140d8:	e8 36 c3 fe ff       	call   f0100413 <_warn>
f01140dd:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01140e0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01140e4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01140e8:	74 04                	je     f01140ee <test_allocate_chunk+0x41d>
f01140ea:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01140ee:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f01140f2:	83 ec 0c             	sub    $0xc,%esp
f01140f5:	68 63 96 13 f0       	push   $0xf0139663
f01140fa:	e8 0f cc fe ff       	call   f0100d0e <cprintf>
f01140ff:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART III: Destination page(s) not exist [Supervisor r] 15%  */
	/*============================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [Supervisor r] [15%]\n") ;
f0114102:	83 ec 0c             	sub    $0xc,%esp
f0114105:	68 cc a3 13 f0       	push   $0xf013a3cc
f011410a:	e8 ff cb fe ff       	call   f0100d0e <cprintf>
f011410f:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114112:	e8 86 8a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0114117:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0+32*mega, 64*mega, 0) ;
f011411a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011411d:	c1 e0 06             	shl    $0x6,%eax
f0114120:	89 c2                	mov    %eax,%edx
f0114122:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114125:	c1 e0 05             	shl    $0x5,%eax
f0114128:	6a 00                	push   $0x0
f011412a:	52                   	push   %edx
f011412b:	50                   	push   %eax
f011412c:	ff 75 d0             	pushl  -0x30(%ebp)
f011412f:	e8 f1 49 ff ff       	call   f0108b25 <allocate_chunk>
f0114134:	83 c4 10             	add    $0x10,%esp
f0114137:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011413a:	e8 5e 8a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011413f:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*mega) + (64*mega)/(4*kilo)))
f0114142:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
f0114146:	75 36                	jne    f011417e <test_allocate_chunk+0x4ad>
f0114148:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011414b:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011414e:	89 c1                	mov    %eax,%ecx
f0114150:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114153:	c1 e0 06             	shl    $0x6,%eax
f0114156:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114159:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114160:	99                   	cltd   
f0114161:	f7 ff                	idiv   %edi
f0114163:	89 c3                	mov    %eax,%ebx
f0114165:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114168:	c1 e0 06             	shl    $0x6,%eax
f011416b:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011416e:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114175:	99                   	cltd   
f0114176:	f7 fe                	idiv   %esi
f0114178:	01 d8                	add    %ebx,%eax
f011417a:	39 c1                	cmp    %eax,%ecx
f011417c:	74 54                	je     f01141d2 <test_allocate_chunk+0x501>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*mega) + (64*mega)/(4*kilo)));
f011417e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114181:	c1 e0 06             	shl    $0x6,%eax
f0114184:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114187:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f011418e:	99                   	cltd   
f011418f:	f7 fb                	idiv   %ebx
f0114191:	89 c1                	mov    %eax,%ecx
f0114193:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114196:	c1 e0 06             	shl    $0x6,%eax
f0114199:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011419c:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f01141a3:	99                   	cltd   
f01141a4:	f7 ff                	idiv   %edi
f01141a6:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01141a9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01141ac:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01141af:	83 ec 08             	sub    $0x8,%esp
f01141b2:	52                   	push   %edx
f01141b3:	50                   	push   %eax
f01141b4:	ff 75 a4             	pushl  -0x5c(%ebp)
f01141b7:	68 6c a3 13 f0       	push   $0xf013a36c
f01141bc:	68 23 05 00 00       	push   $0x523
f01141c1:	68 3e 89 13 f0       	push   $0xf013893e
f01141c6:	e8 48 c2 fe ff       	call   f0100413 <_warn>
f01141cb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01141ce:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01141d2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01141d6:	74 04                	je     f01141dc <test_allocate_chunk+0x50b>
f01141d8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01141dc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01141e0:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
		if (CCP(proc_directory, 0, 0x0+32*mega, 64*mega, 1, 0x001, 0xE07, 0, 0, CHK_ALLOC) == 0)
f01141e7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01141ea:	c1 e0 06             	shl    $0x6,%eax
f01141ed:	89 c2                	mov    %eax,%edx
f01141ef:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01141f2:	c1 e0 05             	shl    $0x5,%eax
f01141f5:	83 ec 08             	sub    $0x8,%esp
f01141f8:	6a 03                	push   $0x3
f01141fa:	6a 00                	push   $0x0
f01141fc:	6a 00                	push   $0x0
f01141fe:	68 07 0e 00 00       	push   $0xe07
f0114203:	6a 01                	push   $0x1
f0114205:	6a 01                	push   $0x1
f0114207:	52                   	push   %edx
f0114208:	50                   	push   %eax
f0114209:	6a 00                	push   $0x0
f011420b:	ff 75 d0             	pushl  -0x30(%ebp)
f011420e:	e8 94 1b 00 00       	call   f0115da7 <CCP>
f0114213:	83 c4 30             	add    $0x30,%esp
f0114216:	85 c0                	test   %eax,%eax
f0114218:	75 25                	jne    f011423f <test_allocate_chunk+0x56e>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f011421a:	83 ec 04             	sub    $0x4,%esp
f011421d:	68 a8 a2 13 f0       	push   $0xf013a2a8
f0114222:	68 2c 05 00 00       	push   $0x52c
f0114227:	68 3e 89 13 f0       	push   $0xf013893e
f011422c:	e8 e2 c1 fe ff       	call   f0100413 <_warn>
f0114231:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114234:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114238:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		}
		if (correct) eval += 10 ;
f011423f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114243:	74 04                	je     f0114249 <test_allocate_chunk+0x578>
f0114245:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114249:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE III: END\n") ;
f011424d:	83 ec 0c             	sub    $0xc,%esp
f0114250:	68 c6 96 13 f0       	push   $0xf01396c6
f0114255:	e8 b4 ca fe ff       	call   f0100d0e <cprintf>
f011425a:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r/w] 20%  */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r/w] [20%]\n") ;
f011425d:	83 ec 0c             	sub    $0xc,%esp
f0114260:	68 0c a4 13 f0       	push   $0xf013a40c
f0114265:	e8 a4 ca fe ff       	call   f0100d0e <cprintf>
f011426a:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011426d:	e8 2b 89 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0114272:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, USER_HEAP_START, 64*mega, PERM_WRITEABLE|PERM_USER|PERM_AVAILABLE) ;
f0114275:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114278:	c1 e0 06             	shl    $0x6,%eax
f011427b:	68 06 0e 00 00       	push   $0xe06
f0114280:	50                   	push   %eax
f0114281:	68 00 00 00 80       	push   $0x80000000
f0114286:	ff 75 d0             	pushl  -0x30(%ebp)
f0114289:	e8 97 48 ff ff       	call   f0108b25 <allocate_chunk>
f011428e:	83 c4 10             	add    $0x10,%esp
f0114291:	89 45 9c             	mov    %eax,-0x64(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114294:	e8 04 89 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0114299:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*kilo)+(64*mega)/(4*mega)))
f011429c:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f01142a0:	75 36                	jne    f01142d8 <test_allocate_chunk+0x607>
f01142a2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01142a5:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01142a8:	89 c1                	mov    %eax,%ecx
f01142aa:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01142ad:	c1 e0 06             	shl    $0x6,%eax
f01142b0:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01142b3:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01142ba:	99                   	cltd   
f01142bb:	f7 fb                	idiv   %ebx
f01142bd:	89 c3                	mov    %eax,%ebx
f01142bf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01142c2:	c1 e0 06             	shl    $0x6,%eax
f01142c5:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01142c8:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01142cf:	99                   	cltd   
f01142d0:	f7 fe                	idiv   %esi
f01142d2:	01 d8                	add    %ebx,%eax
f01142d4:	39 c1                	cmp    %eax,%ecx
f01142d6:	74 54                	je     f011432c <test_allocate_chunk+0x65b>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*kilo)+(64*mega)/(4*mega)));
f01142d8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01142db:	c1 e0 06             	shl    $0x6,%eax
f01142de:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01142e1:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f01142e8:	99                   	cltd   
f01142e9:	f7 ff                	idiv   %edi
f01142eb:	89 c1                	mov    %eax,%ecx
f01142ed:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01142f0:	c1 e0 06             	shl    $0x6,%eax
f01142f3:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01142f6:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01142fd:	99                   	cltd   
f01142fe:	f7 fb                	idiv   %ebx
f0114300:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114303:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114306:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114309:	83 ec 08             	sub    $0x8,%esp
f011430c:	52                   	push   %edx
f011430d:	50                   	push   %eax
f011430e:	ff 75 9c             	pushl  -0x64(%ebp)
f0114311:	68 6c a3 13 f0       	push   $0xf013a36c
f0114316:	68 42 05 00 00       	push   $0x542
f011431b:	68 3e 89 13 f0       	push   $0xf013893e
f0114320:	e8 ee c0 fe ff       	call   f0100413 <_warn>
f0114325:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114328:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011432c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114330:	74 04                	je     f0114336 <test_allocate_chunk+0x665>
f0114332:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114336:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f011433a:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0, USER_HEAP_START, 64*mega, 1, 0xE07, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114341:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114344:	c1 e0 06             	shl    $0x6,%eax
f0114347:	83 ec 08             	sub    $0x8,%esp
f011434a:	6a 03                	push   $0x3
f011434c:	6a 00                	push   $0x0
f011434e:	6a 00                	push   $0x0
f0114350:	68 07 0e 00 00       	push   $0xe07
f0114355:	68 07 0e 00 00       	push   $0xe07
f011435a:	6a 01                	push   $0x1
f011435c:	50                   	push   %eax
f011435d:	68 00 00 00 80       	push   $0x80000000
f0114362:	6a 00                	push   $0x0
f0114364:	ff 75 d0             	pushl  -0x30(%ebp)
f0114367:	e8 3b 1a 00 00       	call   f0115da7 <CCP>
f011436c:	83 c4 30             	add    $0x30,%esp
f011436f:	85 c0                	test   %eax,%eax
f0114371:	75 25                	jne    f0114398 <test_allocate_chunk+0x6c7>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114373:	83 ec 04             	sub    $0x4,%esp
f0114376:	68 a8 a2 13 f0       	push   $0xf013a2a8
f011437b:	68 4b 05 00 00       	push   $0x54b
f0114380:	68 3e 89 13 f0       	push   $0xf013893e
f0114385:	e8 89 c0 fe ff       	call   f0100413 <_warn>
f011438a:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011438d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114391:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}
		if (correct) eval += 10 ;
f0114398:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011439c:	74 04                	je     f01143a2 <test_allocate_chunk+0x6d1>
f011439e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01143a2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01143a6:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f01143aa:	74 6f                	je     f011441b <test_allocate_chunk+0x74a>
		{
			ptr1 = (char*)(USER_HEAP_START+2*kilo); *ptr1 = 'K' ;
f01143ac:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01143af:	01 c0                	add    %eax,%eax
f01143b1:	05 00 00 00 80       	add    $0x80000000,%eax
f01143b6:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01143b9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01143bc:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(USER_HEAP_START+22*mega);*ptr2 = 'M' ;
f01143bf:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01143c2:	89 d0                	mov    %edx,%eax
f01143c4:	c1 e0 02             	shl    $0x2,%eax
f01143c7:	01 d0                	add    %edx,%eax
f01143c9:	01 c0                	add    %eax,%eax
f01143cb:	01 d0                	add    %edx,%eax
f01143cd:	01 c0                	add    %eax,%eax
f01143cf:	05 00 00 00 80       	add    $0x80000000,%eax
f01143d4:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01143d7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01143da:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f01143dd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01143e0:	8a 00                	mov    (%eax),%al
f01143e2:	3c 4b                	cmp    $0x4b,%al
f01143e4:	75 09                	jne    f01143ef <test_allocate_chunk+0x71e>
f01143e6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01143e9:	8a 00                	mov    (%eax),%al
f01143eb:	3c 4d                	cmp    $0x4d,%al
f01143ed:	74 1e                	je     f011440d <test_allocate_chunk+0x73c>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f01143ef:	83 ec 04             	sub    $0x4,%esp
f01143f2:	68 f4 a2 13 f0       	push   $0xf013a2f4
f01143f7:	68 59 05 00 00       	push   $0x559
f01143fc:	68 3e 89 13 f0       	push   $0xf013893e
f0114401:	e8 0d c0 fe ff       	call   f0100413 <_warn>
f0114406:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114409:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f011440d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114411:	74 04                	je     f0114417 <test_allocate_chunk+0x746>
f0114413:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114417:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		}
	}
	cprintf("\nCASE IV: END\n") ;
f011441b:	83 ec 0c             	sub    $0xc,%esp
f011441e:	68 98 a1 13 f0       	push   $0xf013a198
f0114423:	e8 e6 c8 fe ff       	call   f0100d0e <cprintf>
f0114428:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART V: Destination page(s) not exist [User r] 15%     */
	/*========================================================*/
	cprintf("\nCASE V: Destination page(s) not exist [User r] [15%]\n") ;
f011442b:	83 ec 0c             	sub    $0xc,%esp
f011442e:	68 48 a4 13 f0       	push   $0xf013a448
f0114433:	e8 d6 c8 fe ff       	call   f0100d0e <cprintf>
f0114438:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011443b:	e8 5d 87 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0114440:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory,0x403FFC00, 7*kilo, PERM_USER|PERM_AVAILABLE) ;
f0114443:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114446:	89 d0                	mov    %edx,%eax
f0114448:	01 c0                	add    %eax,%eax
f011444a:	01 d0                	add    %edx,%eax
f011444c:	01 c0                	add    %eax,%eax
f011444e:	01 d0                	add    %edx,%eax
f0114450:	68 04 0e 00 00       	push   $0xe04
f0114455:	50                   	push   %eax
f0114456:	68 00 fc 3f 40       	push   $0x403ffc00
f011445b:	ff 75 d0             	pushl  -0x30(%ebp)
f011445e:	e8 c2 46 ff ff       	call   f0108b25 <allocate_chunk>
f0114463:	83 c4 10             	add    $0x10,%esp
f0114466:	89 45 98             	mov    %eax,-0x68(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114469:	e8 2f 87 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011446e:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (3+2))
f0114471:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0114475:	75 0b                	jne    f0114482 <test_allocate_chunk+0x7b1>
f0114477:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011447a:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011447d:	83 f8 05             	cmp    $0x5,%eax
f0114480:	74 2a                	je     f01144ac <test_allocate_chunk+0x7db>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, (3+2));
f0114482:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114485:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114488:	83 ec 08             	sub    $0x8,%esp
f011448b:	6a 05                	push   $0x5
f011448d:	50                   	push   %eax
f011448e:	ff 75 98             	pushl  -0x68(%ebp)
f0114491:	68 6c a3 13 f0       	push   $0xf013a36c
f0114496:	68 70 05 00 00       	push   $0x570
f011449b:	68 3e 89 13 f0       	push   $0xf013893e
f01144a0:	e8 6e bf fe ff       	call   f0100413 <_warn>
f01144a5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01144a8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01144ac:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01144b0:	74 04                	je     f01144b6 <test_allocate_chunk+0x7e5>
f01144b2:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01144b6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01144ba:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
		if (CCP(proc_directory, 0, 0x403FF000, 12*kilo, 1, 0xE05, 0xE07, 0, 0, CHK_ALLOC) == 0)
f01144c1:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01144c4:	89 d0                	mov    %edx,%eax
f01144c6:	01 c0                	add    %eax,%eax
f01144c8:	01 d0                	add    %edx,%eax
f01144ca:	c1 e0 02             	shl    $0x2,%eax
f01144cd:	83 ec 08             	sub    $0x8,%esp
f01144d0:	6a 03                	push   $0x3
f01144d2:	6a 00                	push   $0x0
f01144d4:	6a 00                	push   $0x0
f01144d6:	68 07 0e 00 00       	push   $0xe07
f01144db:	68 05 0e 00 00       	push   $0xe05
f01144e0:	6a 01                	push   $0x1
f01144e2:	50                   	push   %eax
f01144e3:	68 00 f0 3f 40       	push   $0x403ff000
f01144e8:	6a 00                	push   $0x0
f01144ea:	ff 75 d0             	pushl  -0x30(%ebp)
f01144ed:	e8 b5 18 00 00       	call   f0115da7 <CCP>
f01144f2:	83 c4 30             	add    $0x30,%esp
f01144f5:	85 c0                	test   %eax,%eax
f01144f7:	75 25                	jne    f011451e <test_allocate_chunk+0x84d>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f01144f9:	83 ec 04             	sub    $0x4,%esp
f01144fc:	68 a8 a2 13 f0       	push   $0xf013a2a8
f0114501:	68 79 05 00 00       	push   $0x579
f0114506:	68 3e 89 13 f0       	push   $0xf013893e
f011450b:	e8 03 bf fe ff       	call   f0100413 <_warn>
f0114510:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114513:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114517:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
		}
		if (correct) eval += 5 ;
f011451e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114522:	74 04                	je     f0114528 <test_allocate_chunk+0x857>
f0114524:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114528:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

	}
	cprintf("\nCASE V: END\n") ;
f011452c:	83 ec 0c             	sub    $0xc,%esp
f011452f:	68 7f a4 13 f0       	push   $0xf013a47f
f0114534:	e8 d5 c7 fe ff       	call   f0100d0e <cprintf>
f0114539:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] allocate_chunk: FINISHED. Evaluation = %d\n", eval);
f011453c:	83 ec 08             	sub    $0x8,%esp
f011453f:	ff 75 e4             	pushl  -0x1c(%ebp)
f0114542:	68 90 a4 13 f0       	push   $0xf013a490
f0114547:	e8 c2 c7 fe ff       	call   f0100d0e <cprintf>
f011454c:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f011454f:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0114553:	75 10                	jne    f0114565 <test_allocate_chunk+0x894>
		cprintf("Congratulations!! test allocate_chunk completed successfully.\n");
f0114555:	83 ec 0c             	sub    $0xc,%esp
f0114558:	68 c4 a4 13 f0       	push   $0xf013a4c4
f011455d:	e8 ac c7 fe ff       	call   f0100d0e <cprintf>
f0114562:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0114565:	a1 ac 5d 87 f0       	mov    0xf0875dac,%eax
f011456a:	89 45 cc             	mov    %eax,-0x34(%ebp)
f011456d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114570:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0114573:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0114578:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011457b:	5b                   	pop    %ebx
f011457c:	5e                   	pop    %esi
f011457d:	5f                   	pop    %edi
f011457e:	5d                   	pop    %ebp
f011457f:	c3                   	ret    

f0114580 <test_calculate_required_frames>:

//======================================
// 5) [+]TEST CALCULATE REQUIRED FRAMES:
//======================================
int test_calculate_required_frames()
{
f0114580:	55                   	push   %ebp
f0114581:	89 e5                	mov    %esp,%ebp
f0114583:	57                   	push   %edi
f0114584:	56                   	push   %esi
f0114585:	53                   	push   %ebx
f0114586:	81 ec fc 01 00 00    	sub    $0x1fc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f011458c:	8d 45 8e             	lea    -0x72(%ebp),%eax
f011458f:	bb d8 93 13 f0       	mov    $0xf01393d8,%ebx
f0114594:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114599:	89 c7                	mov    %eax,%edi
f011459b:	89 de                	mov    %ebx,%esi
f011459d:	89 d1                	mov    %edx,%ecx
f011459f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01145a1:	8d 55 9d             	lea    -0x63(%ebp),%edx
f01145a4:	b9 23 00 00 00       	mov    $0x23,%ecx
f01145a9:	b0 00                	mov    $0x0,%al
f01145ab:	89 d7                	mov    %edx,%edi
f01145ad:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01145af:	6a 00                	push   $0x0
f01145b1:	6a 0a                	push   $0xa
f01145b3:	6a 14                	push   $0x14
f01145b5:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01145b8:	50                   	push   %eax
f01145b9:	e8 a5 48 ff ff       	call   f0108e63 <env_create>
f01145be:	83 c4 10             	add    $0x10,%esp
f01145c1:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01145c4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01145c7:	8b 40 5c             	mov    0x5c(%eax),%eax
f01145ca:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f01145cd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01145d0:	8b 40 60             	mov    0x60(%eax),%eax
f01145d3:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01145d6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01145d9:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f01145dc:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f01145e3:	75 70 20 
f01145e6:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f01145ed:	00 00 00 
f01145f0:	8d 55 82             	lea    -0x7e(%ebp),%edx
f01145f3:	b9 03 00 00 00       	mov    $0x3,%ecx
f01145f8:	b8 00 00 00 00       	mov    $0x0,%eax
f01145fd:	89 d7                	mov    %edx,%edi
f01145ff:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0114601:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114604:	8b 40 4c             	mov    0x4c(%eax),%eax
f0114607:	83 ec 08             	sub    $0x8,%esp
f011460a:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0114610:	52                   	push   %edx
f0114611:	50                   	push   %eax
f0114612:	e8 5b cd 01 00       	call   f0131372 <ltostr>
f0114617:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f011461a:	83 ec 04             	sub    $0x4,%esp
f011461d:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114623:	50                   	push   %eax
f0114624:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f011462a:	50                   	push   %eax
f011462b:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0114631:	50                   	push   %eax
f0114632:	e8 33 ce 01 00       	call   f013146a <strcconcat>
f0114637:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f011463a:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0114641:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0114648:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32 res =0;
f011464f:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint8 correct = 1;
f0114656:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;

	ClearUserSpace(proc_directory);
f011465a:	83 ec 0c             	sub    $0xc,%esp
f011465d:	ff 75 d8             	pushl  -0x28(%ebp)
f0114660:	e8 0e 17 00 00       	call   f0115d73 <ClearUserSpace>
f0114665:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0114668:	83 ec 0c             	sub    $0xc,%esp
f011466b:	68 04 a5 13 f0       	push   $0xf013a504
f0114670:	e8 99 c6 fe ff       	call   f0100d0e <cprintf>
f0114675:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0114678:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011467b:	c1 e0 03             	shl    $0x3,%eax
f011467e:	83 ec 04             	sub    $0x4,%esp
f0114681:	50                   	push   %eax
f0114682:	6a 00                	push   $0x0
f0114684:	ff 75 d8             	pushl  -0x28(%ebp)
f0114687:	e8 b4 46 ff ff       	call   f0108d40 <calculate_required_frames>
f011468c:	83 c4 10             	add    $0x10,%esp
f011468f:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0114692:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0114696:	74 23                	je     f01146bb <test_calculate_required_frames+0x13b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0114698:	83 ec 0c             	sub    $0xc,%esp
f011469b:	6a 03                	push   $0x3
f011469d:	ff 75 c8             	pushl  -0x38(%ebp)
f01146a0:	68 38 a5 13 f0       	push   $0xf013a538
f01146a5:	68 b2 05 00 00       	push   $0x5b2
f01146aa:	68 3e 89 13 f0       	push   $0xf013893e
f01146af:	e8 5f bd fe ff       	call   f0100413 <_warn>
f01146b4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01146b7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01146bb:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01146bf:	74 04                	je     f01146c5 <test_calculate_required_frames+0x145>
f01146c1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01146c5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 4*mega);
f01146c9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01146cc:	c1 e0 02             	shl    $0x2,%eax
f01146cf:	83 ec 04             	sub    $0x4,%esp
f01146d2:	50                   	push   %eax
f01146d3:	6a 00                	push   $0x0
f01146d5:	ff 75 d8             	pushl  -0x28(%ebp)
f01146d8:	e8 63 46 ff ff       	call   f0108d40 <calculate_required_frames>
f01146dd:	83 c4 10             	add    $0x10,%esp
f01146e0:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 1025)
f01146e3:	81 7d c8 01 04 00 00 	cmpl   $0x401,-0x38(%ebp)
f01146ea:	74 26                	je     f0114712 <test_calculate_required_frames+0x192>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 1025);
f01146ec:	83 ec 0c             	sub    $0xc,%esp
f01146ef:	68 01 04 00 00       	push   $0x401
f01146f4:	ff 75 c8             	pushl  -0x38(%ebp)
f01146f7:	68 38 a5 13 f0       	push   $0xf013a538
f01146fc:	68 bc 05 00 00       	push   $0x5bc
f0114701:	68 3e 89 13 f0       	push   $0xf013893e
f0114706:	e8 08 bd fe ff       	call   f0100413 <_warn>
f011470b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011470e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114712:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114716:	74 04                	je     f011471c <test_calculate_required_frames+0x19c>
f0114718:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011471c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f0114720:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114723:	c1 e0 0a             	shl    $0xa,%eax
f0114726:	83 ec 04             	sub    $0x4,%esp
f0114729:	50                   	push   %eax
f011472a:	6a 00                	push   $0x0
f011472c:	ff 75 d8             	pushl  -0x28(%ebp)
f011472f:	e8 0c 46 ff ff       	call   f0108d40 <calculate_required_frames>
f0114734:	83 c4 10             	add    $0x10,%esp
f0114737:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)))
f011473a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011473d:	c1 e0 0a             	shl    $0xa,%eax
f0114740:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114743:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f011474a:	99                   	cltd   
f011474b:	f7 fb                	idiv   %ebx
f011474d:	89 c1                	mov    %eax,%ecx
f011474f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114752:	c1 e0 0a             	shl    $0xa,%eax
f0114755:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114758:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011475f:	99                   	cltd   
f0114760:	f7 fe                	idiv   %esi
f0114762:	01 c8                	add    %ecx,%eax
f0114764:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114767:	74 4c                	je     f01147b5 <test_calculate_required_frames+0x235>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)));
f0114769:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011476c:	c1 e0 0a             	shl    $0xa,%eax
f011476f:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114772:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114779:	99                   	cltd   
f011477a:	f7 fb                	idiv   %ebx
f011477c:	89 c1                	mov    %eax,%ecx
f011477e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114781:	c1 e0 0a             	shl    $0xa,%eax
f0114784:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114787:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011478e:	99                   	cltd   
f011478f:	f7 fe                	idiv   %esi
f0114791:	01 c8                	add    %ecx,%eax
f0114793:	83 ec 0c             	sub    $0xc,%esp
f0114796:	50                   	push   %eax
f0114797:	ff 75 c8             	pushl  -0x38(%ebp)
f011479a:	68 38 a5 13 f0       	push   $0xf013a538
f011479f:	68 c6 05 00 00       	push   $0x5c6
f01147a4:	68 3e 89 13 f0       	push   $0xf013893e
f01147a9:	e8 65 bc fe ff       	call   f0100413 <_warn>
f01147ae:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01147b1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01147b5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01147b9:	74 04                	je     f01147bf <test_calculate_required_frames+0x23f>
f01147bb:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01147bf:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test4
		res = calculate_required_frames(proc_directory, 0x1000, 6*kilo);
f01147c3:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01147c6:	89 d0                	mov    %edx,%eax
f01147c8:	01 c0                	add    %eax,%eax
f01147ca:	01 d0                	add    %edx,%eax
f01147cc:	01 c0                	add    %eax,%eax
f01147ce:	83 ec 04             	sub    $0x4,%esp
f01147d1:	50                   	push   %eax
f01147d2:	68 00 10 00 00       	push   $0x1000
f01147d7:	ff 75 d8             	pushl  -0x28(%ebp)
f01147da:	e8 61 45 ff ff       	call   f0108d40 <calculate_required_frames>
f01147df:	83 c4 10             	add    $0x10,%esp
f01147e2:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f01147e5:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f01147e9:	74 23                	je     f011480e <test_calculate_required_frames+0x28e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f01147eb:	83 ec 0c             	sub    $0xc,%esp
f01147ee:	6a 03                	push   $0x3
f01147f0:	ff 75 c8             	pushl  -0x38(%ebp)
f01147f3:	68 38 a5 13 f0       	push   $0xf013a538
f01147f8:	68 d2 05 00 00       	push   $0x5d2
f01147fd:	68 3e 89 13 f0       	push   $0xf013893e
f0114802:	e8 0c bc fe ff       	call   f0100413 <_warn>
f0114807:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011480a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011480e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114812:	74 04                	je     f0114818 <test_calculate_required_frames+0x298>
f0114814:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114818:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f011481c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011481f:	89 c2                	mov    %eax,%edx
f0114821:	01 d2                	add    %edx,%edx
f0114823:	01 d0                	add    %edx,%eax
f0114825:	83 ec 04             	sub    $0x4,%esp
f0114828:	50                   	push   %eax
f0114829:	68 00 18 00 00       	push   $0x1800
f011482e:	ff 75 d8             	pushl  -0x28(%ebp)
f0114831:	e8 0a 45 ff ff       	call   f0108d40 <calculate_required_frames>
f0114836:	83 c4 10             	add    $0x10,%esp
f0114839:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f011483c:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0114840:	74 23                	je     f0114865 <test_calculate_required_frames+0x2e5>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0114842:	83 ec 0c             	sub    $0xc,%esp
f0114845:	6a 03                	push   $0x3
f0114847:	ff 75 c8             	pushl  -0x38(%ebp)
f011484a:	68 38 a5 13 f0       	push   $0xf013a538
f011484f:	68 dc 05 00 00       	push   $0x5dc
f0114854:	68 3e 89 13 f0       	push   $0xf013893e
f0114859:	e8 b5 bb fe ff       	call   f0100413 <_warn>
f011485e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114861:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114865:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114869:	74 04                	je     f011486f <test_calculate_required_frames+0x2ef>
f011486b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011486f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0114873:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114876:	89 d0                	mov    %edx,%eax
f0114878:	c1 e0 02             	shl    $0x2,%eax
f011487b:	01 d0                	add    %edx,%eax
f011487d:	01 c0                	add    %eax,%eax
f011487f:	83 ec 04             	sub    $0x4,%esp
f0114882:	50                   	push   %eax
f0114883:	68 00 00 40 00       	push   $0x400000
f0114888:	ff 75 d8             	pushl  -0x28(%ebp)
f011488b:	e8 b0 44 ff ff       	call   f0108d40 <calculate_required_frames>
f0114890:	83 c4 10             	add    $0x10,%esp
f0114893:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2563)
f0114896:	81 7d c8 03 0a 00 00 	cmpl   $0xa03,-0x38(%ebp)
f011489d:	74 26                	je     f01148c5 <test_calculate_required_frames+0x345>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f011489f:	83 ec 0c             	sub    $0xc,%esp
f01148a2:	68 03 0a 00 00       	push   $0xa03
f01148a7:	ff 75 c8             	pushl  -0x38(%ebp)
f01148aa:	68 38 a5 13 f0       	push   $0xf013a538
f01148af:	68 e6 05 00 00       	push   $0x5e6
f01148b4:	68 3e 89 13 f0       	push   $0xf013893e
f01148b9:	e8 55 bb fe ff       	call   f0100413 <_warn>
f01148be:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01148c1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01148c5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01148c9:	74 04                	je     f01148cf <test_calculate_required_frames+0x34f>
f01148cb:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01148cf:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f01148d3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01148d6:	01 c0                	add    %eax,%eax
f01148d8:	83 ec 04             	sub    $0x4,%esp
f01148db:	50                   	push   %eax
f01148dc:	68 00 00 70 00       	push   $0x700000
f01148e1:	ff 75 d8             	pushl  -0x28(%ebp)
f01148e4:	e8 57 44 ff ff       	call   f0108d40 <calculate_required_frames>
f01148e9:	83 c4 10             	add    $0x10,%esp
f01148ec:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 514)
f01148ef:	81 7d c8 02 02 00 00 	cmpl   $0x202,-0x38(%ebp)
f01148f6:	74 26                	je     f011491e <test_calculate_required_frames+0x39e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 514);
f01148f8:	83 ec 0c             	sub    $0xc,%esp
f01148fb:	68 02 02 00 00       	push   $0x202
f0114900:	ff 75 c8             	pushl  -0x38(%ebp)
f0114903:	68 38 a5 13 f0       	push   $0xf013a538
f0114908:	68 f2 05 00 00       	push   $0x5f2
f011490d:	68 3e 89 13 f0       	push   $0xf013893e
f0114912:	e8 fc ba fe ff       	call   f0100413 <_warn>
f0114917:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011491a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011491e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114922:	74 04                	je     f0114928 <test_calculate_required_frames+0x3a8>
f0114924:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114928:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f011492c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011492f:	83 ec 04             	sub    $0x4,%esp
f0114932:	50                   	push   %eax
f0114933:	68 ff ff 3f 00       	push   $0x3fffff
f0114938:	ff 75 d8             	pushl  -0x28(%ebp)
f011493b:	e8 00 44 ff ff       	call   f0108d40 <calculate_required_frames>
f0114940:	83 c4 10             	add    $0x10,%esp
f0114943:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 4)
f0114946:	83 7d c8 04          	cmpl   $0x4,-0x38(%ebp)
f011494a:	74 23                	je     f011496f <test_calculate_required_frames+0x3ef>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 4);
f011494c:	83 ec 0c             	sub    $0xc,%esp
f011494f:	6a 04                	push   $0x4
f0114951:	ff 75 c8             	pushl  -0x38(%ebp)
f0114954:	68 38 a5 13 f0       	push   $0xf013a538
f0114959:	68 fc 05 00 00       	push   $0x5fc
f011495e:	68 3e 89 13 f0       	push   $0xf013893e
f0114963:	e8 ab ba fe ff       	call   f0100413 <_warn>
f0114968:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011496b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011496f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114973:	74 04                	je     f0114979 <test_calculate_required_frames+0x3f9>
f0114975:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114979:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f011497d:	83 ec 0c             	sub    $0xc,%esp
f0114980:	68 89 a0 13 f0       	push   $0xf013a089
f0114985:	e8 84 c3 fe ff       	call   f0100d0e <cprintf>
f011498a:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f011498d:	83 ec 0c             	sub    $0xc,%esp
f0114990:	68 90 a5 13 f0       	push   $0xf013a590
f0114995:	e8 74 c3 fe ff       	call   f0100d0e <cprintf>
f011499a:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f011499d:	83 ec 04             	sub    $0x4,%esp
f01149a0:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f01149a6:	50                   	push   %eax
f01149a7:	68 42 94 13 f0       	push   $0xf0139442
f01149ac:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01149b2:	50                   	push   %eax
f01149b3:	e8 b2 ca 01 00       	call   f013146a <strcconcat>
f01149b8:	83 c4 10             	add    $0x10,%esp
f01149bb:	83 ec 0c             	sub    $0xc,%esp
f01149be:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f01149c4:	50                   	push   %eax
f01149c5:	e8 a6 c3 fe ff       	call   f0100d70 <execute_command>
f01149ca:	83 c4 10             	add    $0x10,%esp

		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f01149cd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01149d0:	c1 e0 03             	shl    $0x3,%eax
f01149d3:	83 ec 04             	sub    $0x4,%esp
f01149d6:	50                   	push   %eax
f01149d7:	6a 00                	push   $0x0
f01149d9:	ff 75 d8             	pushl  -0x28(%ebp)
f01149dc:	e8 5f 43 ff ff       	call   f0108d40 <calculate_required_frames>
f01149e1:	83 c4 10             	add    $0x10,%esp
f01149e4:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f01149e7:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f01149ee:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01149f1:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01149f4:	74 24                	je     f0114a1a <test_calculate_required_frames+0x49a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01149f6:	83 ec 0c             	sub    $0xc,%esp
f01149f9:	ff 75 c4             	pushl  -0x3c(%ebp)
f01149fc:	ff 75 c8             	pushl  -0x38(%ebp)
f01149ff:	68 38 a5 13 f0       	push   $0xf013a538
f0114a04:	68 10 06 00 00       	push   $0x610
f0114a09:	68 3e 89 13 f0       	push   $0xf013893e
f0114a0e:	e8 00 ba fe ff       	call   f0100413 <_warn>
f0114a13:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114a16:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114a1a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114a1e:	74 04                	je     f0114a24 <test_calculate_required_frames+0x4a4>
f0114a20:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114a24:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0114a28:	83 ec 04             	sub    $0x4,%esp
f0114a2b:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0114a31:	50                   	push   %eax
f0114a32:	68 4f 94 13 f0       	push   $0xf013944f
f0114a37:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114a3d:	50                   	push   %eax
f0114a3e:	e8 27 ca 01 00       	call   f013146a <strcconcat>
f0114a43:	83 c4 10             	add    $0x10,%esp
f0114a46:	83 ec 0c             	sub    $0xc,%esp
f0114a49:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0114a4f:	50                   	push   %eax
f0114a50:	e8 1b c3 fe ff       	call   f0100d70 <execute_command>
f0114a55:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0114a58:	83 ec 04             	sub    $0x4,%esp
f0114a5b:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114a61:	50                   	push   %eax
f0114a62:	68 c4 a5 13 f0       	push   $0xf013a5c4
f0114a67:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114a6d:	50                   	push   %eax
f0114a6e:	e8 f7 c9 01 00       	call   f013146a <strcconcat>
f0114a73:	83 c4 10             	add    $0x10,%esp
f0114a76:	83 ec 0c             	sub    $0xc,%esp
f0114a79:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114a7f:	50                   	push   %eax
f0114a80:	e8 eb c2 fe ff       	call   f0100d70 <execute_command>
f0114a85:	83 c4 10             	add    $0x10,%esp

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 8*mega);
f0114a88:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114a8b:	c1 e0 03             	shl    $0x3,%eax
f0114a8e:	83 ec 04             	sub    $0x4,%esp
f0114a91:	50                   	push   %eax
f0114a92:	6a 00                	push   $0x0
f0114a94:	ff 75 d8             	pushl  -0x28(%ebp)
f0114a97:	e8 a4 42 ff ff       	call   f0108d40 <calculate_required_frames>
f0114a9c:	83 c4 10             	add    $0x10,%esp
f0114a9f:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 2047;
f0114aa2:	c7 45 c4 ff 07 00 00 	movl   $0x7ff,-0x3c(%ebp)
		if (res != expected)
f0114aa9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114aac:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114aaf:	74 24                	je     f0114ad5 <test_calculate_required_frames+0x555>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114ab1:	83 ec 0c             	sub    $0xc,%esp
f0114ab4:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114ab7:	ff 75 c8             	pushl  -0x38(%ebp)
f0114aba:	68 38 a5 13 f0       	push   $0xf013a538
f0114abf:	68 1e 06 00 00       	push   $0x61e
f0114ac4:	68 3e 89 13 f0       	push   $0xf013893e
f0114ac9:	e8 45 b9 fe ff       	call   f0100413 <_warn>
f0114ace:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114ad1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114ad5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114ad9:	74 04                	je     f0114adf <test_calculate_required_frames+0x55f>
f0114adb:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114adf:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f0114ae3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114ae6:	c1 e0 0a             	shl    $0xa,%eax
f0114ae9:	83 ec 04             	sub    $0x4,%esp
f0114aec:	50                   	push   %eax
f0114aed:	6a 00                	push   $0x0
f0114aef:	ff 75 d8             	pushl  -0x28(%ebp)
f0114af2:	e8 49 42 ff ff       	call   f0108d40 <calculate_required_frames>
f0114af7:	83 c4 10             	add    $0x10,%esp
f0114afa:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)) - 2 - 1 - 2;
f0114afd:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114b00:	c1 e0 0a             	shl    $0xa,%eax
f0114b03:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114b06:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114b0d:	99                   	cltd   
f0114b0e:	f7 fb                	idiv   %ebx
f0114b10:	89 c1                	mov    %eax,%ecx
f0114b12:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114b15:	c1 e0 0a             	shl    $0xa,%eax
f0114b18:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114b1b:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114b22:	99                   	cltd   
f0114b23:	f7 fe                	idiv   %esi
f0114b25:	01 c8                	add    %ecx,%eax
f0114b27:	83 e8 05             	sub    $0x5,%eax
f0114b2a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (res != expected)
f0114b2d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114b30:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114b33:	74 24                	je     f0114b59 <test_calculate_required_frames+0x5d9>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114b35:	83 ec 0c             	sub    $0xc,%esp
f0114b38:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114b3b:	ff 75 c8             	pushl  -0x38(%ebp)
f0114b3e:	68 38 a5 13 f0       	push   $0xf013a538
f0114b43:	68 29 06 00 00       	push   $0x629
f0114b48:	68 3e 89 13 f0       	push   $0xf013893e
f0114b4d:	e8 c1 b8 fe ff       	call   f0100413 <_warn>
f0114b52:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114b55:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114b59:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114b5d:	74 04                	je     f0114b63 <test_calculate_required_frames+0x5e3>
f0114b5f:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114b63:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0114b67:	83 ec 04             	sub    $0x4,%esp
f0114b6a:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0114b70:	50                   	push   %eax
f0114b71:	68 d0 a5 13 f0       	push   $0xf013a5d0
f0114b76:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114b7c:	50                   	push   %eax
f0114b7d:	e8 e8 c8 01 00       	call   f013146a <strcconcat>
f0114b82:	83 c4 10             	add    $0x10,%esp
f0114b85:	83 ec 0c             	sub    $0xc,%esp
f0114b88:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0114b8e:	50                   	push   %eax
f0114b8f:	e8 dc c1 fe ff       	call   f0100d70 <execute_command>
f0114b94:	83 c4 10             	add    $0x10,%esp

		//Test4
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0114b97:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114b9a:	89 c2                	mov    %eax,%edx
f0114b9c:	01 d2                	add    %edx,%edx
f0114b9e:	01 d0                	add    %edx,%eax
f0114ba0:	83 ec 04             	sub    $0x4,%esp
f0114ba3:	50                   	push   %eax
f0114ba4:	68 00 18 00 00       	push   $0x1800
f0114ba9:	ff 75 d8             	pushl  -0x28(%ebp)
f0114bac:	e8 8f 41 ff ff       	call   f0108d40 <calculate_required_frames>
f0114bb1:	83 c4 10             	add    $0x10,%esp
f0114bb4:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0114bb7:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f0114bbe:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114bc1:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114bc4:	74 24                	je     f0114bea <test_calculate_required_frames+0x66a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114bc6:	83 ec 0c             	sub    $0xc,%esp
f0114bc9:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114bcc:	ff 75 c8             	pushl  -0x38(%ebp)
f0114bcf:	68 38 a5 13 f0       	push   $0xf013a538
f0114bd4:	68 38 06 00 00       	push   $0x638
f0114bd9:	68 3e 89 13 f0       	push   $0xf013893e
f0114bde:	e8 30 b8 fe ff       	call   f0100413 <_warn>
f0114be3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114be6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114bea:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114bee:	74 04                	je     f0114bf4 <test_calculate_required_frames+0x674>
f0114bf0:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114bf4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0114bf8:	83 ec 04             	sub    $0x4,%esp
f0114bfb:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114c01:	50                   	push   %eax
f0114c02:	68 a8 96 13 f0       	push   $0xf01396a8
f0114c07:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114c0d:	50                   	push   %eax
f0114c0e:	e8 57 c8 01 00       	call   f013146a <strcconcat>
f0114c13:	83 c4 10             	add    $0x10,%esp
f0114c16:	83 ec 0c             	sub    $0xc,%esp
f0114c19:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114c1f:	50                   	push   %eax
f0114c20:	e8 4b c1 fe ff       	call   f0100d70 <execute_command>
f0114c25:	83 c4 10             	add    $0x10,%esp

		//Test5
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0114c28:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114c2b:	89 d0                	mov    %edx,%eax
f0114c2d:	c1 e0 02             	shl    $0x2,%eax
f0114c30:	01 d0                	add    %edx,%eax
f0114c32:	01 c0                	add    %eax,%eax
f0114c34:	83 ec 04             	sub    $0x4,%esp
f0114c37:	50                   	push   %eax
f0114c38:	68 00 00 40 00       	push   $0x400000
f0114c3d:	ff 75 d8             	pushl  -0x28(%ebp)
f0114c40:	e8 fb 40 ff ff       	call   f0108d40 <calculate_required_frames>
f0114c45:	83 c4 10             	add    $0x10,%esp
f0114c48:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2561)
f0114c4b:	81 7d c8 01 0a 00 00 	cmpl   $0xa01,-0x38(%ebp)
f0114c52:	74 26                	je     f0114c7a <test_calculate_required_frames+0x6fa>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0114c54:	83 ec 0c             	sub    $0xc,%esp
f0114c57:	68 03 0a 00 00       	push   $0xa03
f0114c5c:	ff 75 c8             	pushl  -0x38(%ebp)
f0114c5f:	68 38 a5 13 f0       	push   $0xf013a538
f0114c64:	68 44 06 00 00       	push   $0x644
f0114c69:	68 3e 89 13 f0       	push   $0xf013893e
f0114c6e:	e8 a0 b7 fe ff       	call   f0100413 <_warn>
f0114c73:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114c76:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114c7a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114c7e:	74 04                	je     f0114c84 <test_calculate_required_frames+0x704>
f0114c80:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114c84:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0114c88:	83 ec 04             	sub    $0x4,%esp
f0114c8b:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0114c91:	50                   	push   %eax
f0114c92:	68 b2 96 13 f0       	push   $0xf01396b2
f0114c97:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114c9d:	50                   	push   %eax
f0114c9e:	e8 c7 c7 01 00       	call   f013146a <strcconcat>
f0114ca3:	83 c4 10             	add    $0x10,%esp
f0114ca6:	83 ec 0c             	sub    $0xc,%esp
f0114ca9:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0114caf:	50                   	push   %eax
f0114cb0:	e8 bb c0 fe ff       	call   f0100d70 <execute_command>
f0114cb5:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0114cb8:	83 ec 04             	sub    $0x4,%esp
f0114cbb:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114cc1:	50                   	push   %eax
f0114cc2:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0114cc7:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114ccd:	50                   	push   %eax
f0114cce:	e8 97 c7 01 00       	call   f013146a <strcconcat>
f0114cd3:	83 c4 10             	add    $0x10,%esp
f0114cd6:	83 ec 0c             	sub    $0xc,%esp
f0114cd9:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114cdf:	50                   	push   %eax
f0114ce0:	e8 8b c0 fe ff       	call   f0100d70 <execute_command>
f0114ce5:	83 c4 10             	add    $0x10,%esp

		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f0114ce8:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114ceb:	01 c0                	add    %eax,%eax
f0114ced:	83 ec 04             	sub    $0x4,%esp
f0114cf0:	50                   	push   %eax
f0114cf1:	68 00 00 70 00       	push   $0x700000
f0114cf6:	ff 75 d8             	pushl  -0x28(%ebp)
f0114cf9:	e8 42 40 ff ff       	call   f0108d40 <calculate_required_frames>
f0114cfe:	83 c4 10             	add    $0x10,%esp
f0114d01:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 510 ;
f0114d04:	c7 45 c4 fe 01 00 00 	movl   $0x1fe,-0x3c(%ebp)
		if (res != expected)
f0114d0b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114d0e:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114d11:	74 24                	je     f0114d37 <test_calculate_required_frames+0x7b7>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114d13:	83 ec 0c             	sub    $0xc,%esp
f0114d16:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114d19:	ff 75 c8             	pushl  -0x38(%ebp)
f0114d1c:	68 38 a5 13 f0       	push   $0xf013a538
f0114d21:	68 54 06 00 00       	push   $0x654
f0114d26:	68 3e 89 13 f0       	push   $0xf013893e
f0114d2b:	e8 e3 b6 fe ff       	call   f0100413 <_warn>
f0114d30:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114d33:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114d37:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114d3b:	74 04                	je     f0114d41 <test_calculate_required_frames+0x7c1>
f0114d3d:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114d41:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0114d45:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114d48:	83 ec 04             	sub    $0x4,%esp
f0114d4b:	50                   	push   %eax
f0114d4c:	68 ff ff 3f 00       	push   $0x3fffff
f0114d51:	ff 75 d8             	pushl  -0x28(%ebp)
f0114d54:	e8 e7 3f ff ff       	call   f0108d40 <calculate_required_frames>
f0114d59:	83 c4 10             	add    $0x10,%esp
f0114d5c:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 3 ;
f0114d5f:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (res != expected)
f0114d66:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114d69:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114d6c:	74 24                	je     f0114d92 <test_calculate_required_frames+0x812>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114d6e:	83 ec 0c             	sub    $0xc,%esp
f0114d71:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114d74:	ff 75 c8             	pushl  -0x38(%ebp)
f0114d77:	68 38 a5 13 f0       	push   $0xf013a538
f0114d7c:	68 5f 06 00 00       	push   $0x65f
f0114d81:	68 3e 89 13 f0       	push   $0xf013893e
f0114d86:	e8 88 b6 fe ff       	call   f0100413 <_warn>
f0114d8b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114d8e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114d92:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114d96:	74 04                	je     f0114d9c <test_calculate_required_frames+0x81c>
f0114d98:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114d9c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0114da0:	83 ec 0c             	sub    $0xc,%esp
f0114da3:	68 63 96 13 f0       	push   $0xf0139663
f0114da8:	e8 61 bf fe ff       	call   f0100d0e <cprintf>
f0114dad:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_required_frames: FINISHED. Evaluation = %d\n", eval);
f0114db0:	83 ec 08             	sub    $0x8,%esp
f0114db3:	ff 75 e4             	pushl  -0x1c(%ebp)
f0114db6:	68 e4 a5 13 f0       	push   $0xf013a5e4
f0114dbb:	e8 4e bf fe ff       	call   f0100d0e <cprintf>
f0114dc0:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0114dc3:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0114dc7:	75 10                	jne    f0114dd9 <test_calculate_required_frames+0x859>
		cprintf("Congratulations!! test calculate_required_frames completed successfully.\n");
f0114dc9:	83 ec 0c             	sub    $0xc,%esp
f0114dcc:	68 24 a6 13 f0       	push   $0xf013a624
f0114dd1:	e8 38 bf fe ff       	call   f0100d0e <cprintf>
f0114dd6:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0114dd9:	a1 ac 5d 87 f0       	mov    0xf0875dac,%eax
f0114dde:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0114de1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0114de4:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0114de7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0114dec:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114def:	5b                   	pop    %ebx
f0114df0:	5e                   	pop    %esi
f0114df1:	5f                   	pop    %edi
f0114df2:	5d                   	pop    %ebp
f0114df3:	c3                   	ret    

f0114df4 <test_calculate_allocated_space>:

int test_calculate_allocated_space()
{
f0114df4:	55                   	push   %ebp
f0114df5:	89 e5                	mov    %esp,%ebp
f0114df7:	57                   	push   %edi
f0114df8:	56                   	push   %esi
f0114df9:	53                   	push   %ebx
f0114dfa:	81 ec 0c 02 00 00    	sub    $0x20c,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0114e00:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0114e03:	bb d8 93 13 f0       	mov    $0xf01393d8,%ebx
f0114e08:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114e0d:	89 c7                	mov    %eax,%edi
f0114e0f:	89 de                	mov    %ebx,%esi
f0114e11:	89 d1                	mov    %edx,%ecx
f0114e13:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114e15:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0114e18:	b9 23 00 00 00       	mov    $0x23,%ecx
f0114e1d:	b0 00                	mov    $0x0,%al
f0114e1f:	89 d7                	mov    %edx,%edi
f0114e21:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0114e23:	6a 00                	push   $0x0
f0114e25:	6a 0a                	push   $0xa
f0114e27:	6a 14                	push   $0x14
f0114e29:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0114e2c:	50                   	push   %eax
f0114e2d:	e8 31 40 ff ff       	call   f0108e63 <env_create>
f0114e32:	83 c4 10             	add    $0x10,%esp
f0114e35:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0114e38:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114e3b:	8b 40 5c             	mov    0x5c(%eax),%eax
f0114e3e:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0114e41:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114e44:	8b 40 60             	mov    0x60(%eax),%eax
f0114e47:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114e4a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114e4d:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0114e50:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0114e57:	75 70 20 
f0114e5a:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0114e61:	00 00 00 
f0114e64:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0114e67:	b9 03 00 00 00       	mov    $0x3,%ecx
f0114e6c:	b8 00 00 00 00       	mov    $0x0,%eax
f0114e71:	89 d7                	mov    %edx,%edi
f0114e73:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0114e75:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114e78:	8b 40 4c             	mov    0x4c(%eax),%eax
f0114e7b:	83 ec 08             	sub    $0x8,%esp
f0114e7e:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0114e84:	52                   	push   %edx
f0114e85:	50                   	push   %eax
f0114e86:	e8 e7 c4 01 00       	call   f0131372 <ltostr>
f0114e8b:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0114e8e:	83 ec 04             	sub    $0x4,%esp
f0114e91:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114e97:	50                   	push   %eax
f0114e98:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0114e9e:	50                   	push   %eax
f0114e9f:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0114ea5:	50                   	push   %eax
f0114ea6:	e8 bf c5 01 00       	call   f013146a <strcconcat>
f0114eab:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0114eae:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0114eb5:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0114ebc:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct = 1;
f0114ec3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected_num_pages;
	uint32 expected_num_tables;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;
	uint32 num_pages = 0;
f0114ec7:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114ece:	00 00 00 
	uint32 num_tables = 0;
f0114ed1:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114ed8:	00 00 00 
	ClearUserSpace(proc_directory);
f0114edb:	83 ec 0c             	sub    $0xc,%esp
f0114ede:	ff 75 d8             	pushl  -0x28(%ebp)
f0114ee1:	e8 8d 0e 00 00       	call   f0115d73 <ClearUserSpace>
f0114ee6:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0114ee9:	83 ec 0c             	sub    $0xc,%esp
f0114eec:	68 04 a5 13 f0       	push   $0xf013a504
f0114ef1:	e8 18 be fe ff       	call   f0100d0e <cprintf>
f0114ef6:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0114ef9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114efc:	c1 e0 03             	shl    $0x3,%eax
f0114eff:	89 c2                	mov    %eax,%edx
f0114f01:	83 ec 0c             	sub    $0xc,%esp
f0114f04:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114f0a:	50                   	push   %eax
f0114f0b:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114f11:	50                   	push   %eax
f0114f12:	52                   	push   %edx
f0114f13:	6a 00                	push   $0x0
f0114f15:	ff 75 d8             	pushl  -0x28(%ebp)
f0114f18:	e8 2e 3d ff ff       	call   f0108c4b <calculate_allocated_space>
f0114f1d:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114f20:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114f26:	85 c0                	test   %eax,%eax
f0114f28:	74 27                	je     f0114f51 <test_calculate_allocated_space+0x15d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114f2a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114f30:	83 ec 0c             	sub    $0xc,%esp
f0114f33:	6a 00                	push   $0x0
f0114f35:	50                   	push   %eax
f0114f36:	68 70 a6 13 f0       	push   $0xf013a670
f0114f3b:	68 94 06 00 00       	push   $0x694
f0114f40:	68 3e 89 13 f0       	push   $0xf013893e
f0114f45:	e8 c9 b4 fe ff       	call   f0100413 <_warn>
f0114f4a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114f4d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114f51:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114f57:	85 c0                	test   %eax,%eax
f0114f59:	74 27                	je     f0114f82 <test_calculate_allocated_space+0x18e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114f5b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114f61:	83 ec 0c             	sub    $0xc,%esp
f0114f64:	6a 00                	push   $0x0
f0114f66:	50                   	push   %eax
f0114f67:	68 d0 a6 13 f0       	push   $0xf013a6d0
f0114f6c:	68 99 06 00 00       	push   $0x699
f0114f71:	68 3e 89 13 f0       	push   $0xf013893e
f0114f76:	e8 98 b4 fe ff       	call   f0100413 <_warn>
f0114f7b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114f7e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114f82:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114f86:	74 04                	je     f0114f8c <test_calculate_allocated_space+0x198>
f0114f88:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114f8c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		num_tables = 0;
f0114f90:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114f97:	00 00 00 
		num_pages = 0;
f0114f9a:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114fa1:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+4*mega, &num_tables, &num_pages);
f0114fa4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114fa7:	c1 e0 02             	shl    $0x2,%eax
f0114faa:	89 c2                	mov    %eax,%edx
f0114fac:	83 ec 0c             	sub    $0xc,%esp
f0114faf:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114fb5:	50                   	push   %eax
f0114fb6:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114fbc:	50                   	push   %eax
f0114fbd:	52                   	push   %edx
f0114fbe:	6a 00                	push   $0x0
f0114fc0:	ff 75 d8             	pushl  -0x28(%ebp)
f0114fc3:	e8 83 3c ff ff       	call   f0108c4b <calculate_allocated_space>
f0114fc8:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114fcb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114fd1:	85 c0                	test   %eax,%eax
f0114fd3:	74 27                	je     f0114ffc <test_calculate_allocated_space+0x208>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114fd5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114fdb:	83 ec 0c             	sub    $0xc,%esp
f0114fde:	6a 00                	push   $0x0
f0114fe0:	50                   	push   %eax
f0114fe1:	68 70 a6 13 f0       	push   $0xf013a670
f0114fe6:	68 a5 06 00 00       	push   $0x6a5
f0114feb:	68 3e 89 13 f0       	push   $0xf013893e
f0114ff0:	e8 1e b4 fe ff       	call   f0100413 <_warn>
f0114ff5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114ff8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114ffc:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115002:	85 c0                	test   %eax,%eax
f0115004:	74 27                	je     f011502d <test_calculate_allocated_space+0x239>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115006:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011500c:	83 ec 0c             	sub    $0xc,%esp
f011500f:	6a 00                	push   $0x0
f0115011:	50                   	push   %eax
f0115012:	68 d0 a6 13 f0       	push   $0xf013a6d0
f0115017:	68 aa 06 00 00       	push   $0x6aa
f011501c:	68 3e 89 13 f0       	push   $0xf013893e
f0115021:	e8 ed b3 fe ff       	call   f0100413 <_warn>
f0115026:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115029:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011502d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115031:	74 04                	je     f0115037 <test_calculate_allocated_space+0x243>
f0115033:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115037:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f011503b:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115042:	00 00 00 
		num_pages = 0;
f0115045:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011504c:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f011504f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115052:	c1 e0 0a             	shl    $0xa,%eax
f0115055:	89 c2                	mov    %eax,%edx
f0115057:	83 ec 0c             	sub    $0xc,%esp
f011505a:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115060:	50                   	push   %eax
f0115061:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115067:	50                   	push   %eax
f0115068:	52                   	push   %edx
f0115069:	6a 00                	push   $0x0
f011506b:	ff 75 d8             	pushl  -0x28(%ebp)
f011506e:	e8 d8 3b ff ff       	call   f0108c4b <calculate_allocated_space>
f0115073:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115076:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011507c:	85 c0                	test   %eax,%eax
f011507e:	74 27                	je     f01150a7 <test_calculate_allocated_space+0x2b3>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115080:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115086:	83 ec 0c             	sub    $0xc,%esp
f0115089:	6a 00                	push   $0x0
f011508b:	50                   	push   %eax
f011508c:	68 70 a6 13 f0       	push   $0xf013a670
f0115091:	68 b6 06 00 00       	push   $0x6b6
f0115096:	68 3e 89 13 f0       	push   $0xf013893e
f011509b:	e8 73 b3 fe ff       	call   f0100413 <_warn>
f01150a0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01150a3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01150a7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01150ad:	85 c0                	test   %eax,%eax
f01150af:	74 27                	je     f01150d8 <test_calculate_allocated_space+0x2e4>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01150b1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01150b7:	83 ec 0c             	sub    $0xc,%esp
f01150ba:	6a 00                	push   $0x0
f01150bc:	50                   	push   %eax
f01150bd:	68 d0 a6 13 f0       	push   $0xf013a6d0
f01150c2:	68 bb 06 00 00       	push   $0x6bb
f01150c7:	68 3e 89 13 f0       	push   $0xf013893e
f01150cc:	e8 42 b3 fe ff       	call   f0100413 <_warn>
f01150d1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01150d4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01150d8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01150dc:	74 04                	je     f01150e2 <test_calculate_allocated_space+0x2ee>
f01150de:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01150e2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test4
		num_tables = 0;
f01150e6:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01150ed:	00 00 00 
		num_pages = 0;
f01150f0:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01150f7:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1000, 0x1000+6*kilo, &num_tables, &num_pages);
f01150fa:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01150fd:	89 d0                	mov    %edx,%eax
f01150ff:	01 c0                	add    %eax,%eax
f0115101:	01 d0                	add    %edx,%eax
f0115103:	01 c0                	add    %eax,%eax
f0115105:	05 00 10 00 00       	add    $0x1000,%eax
f011510a:	89 c2                	mov    %eax,%edx
f011510c:	83 ec 0c             	sub    $0xc,%esp
f011510f:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115115:	50                   	push   %eax
f0115116:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011511c:	50                   	push   %eax
f011511d:	52                   	push   %edx
f011511e:	68 00 10 00 00       	push   $0x1000
f0115123:	ff 75 d8             	pushl  -0x28(%ebp)
f0115126:	e8 20 3b ff ff       	call   f0108c4b <calculate_allocated_space>
f011512b:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011512e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115134:	85 c0                	test   %eax,%eax
f0115136:	74 27                	je     f011515f <test_calculate_allocated_space+0x36b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115138:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011513e:	83 ec 0c             	sub    $0xc,%esp
f0115141:	6a 00                	push   $0x0
f0115143:	50                   	push   %eax
f0115144:	68 70 a6 13 f0       	push   $0xf013a670
f0115149:	68 c8 06 00 00       	push   $0x6c8
f011514e:	68 3e 89 13 f0       	push   $0xf013893e
f0115153:	e8 bb b2 fe ff       	call   f0100413 <_warn>
f0115158:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011515b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f011515f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115165:	85 c0                	test   %eax,%eax
f0115167:	74 27                	je     f0115190 <test_calculate_allocated_space+0x39c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115169:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011516f:	83 ec 0c             	sub    $0xc,%esp
f0115172:	6a 00                	push   $0x0
f0115174:	50                   	push   %eax
f0115175:	68 d0 a6 13 f0       	push   $0xf013a6d0
f011517a:	68 cd 06 00 00       	push   $0x6cd
f011517f:	68 3e 89 13 f0       	push   $0xf013893e
f0115184:	e8 8a b2 fe ff       	call   f0100413 <_warn>
f0115189:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011518c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115190:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115194:	74 04                	je     f011519a <test_calculate_allocated_space+0x3a6>
f0115196:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011519a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		num_tables = 0;
f011519e:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01151a5:	00 00 00 
		num_pages = 0;
f01151a8:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01151af:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f01151b2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01151b5:	89 c2                	mov    %eax,%edx
f01151b7:	01 d2                	add    %edx,%edx
f01151b9:	01 d0                	add    %edx,%eax
f01151bb:	05 00 18 00 00       	add    $0x1800,%eax
f01151c0:	89 c2                	mov    %eax,%edx
f01151c2:	83 ec 0c             	sub    $0xc,%esp
f01151c5:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01151cb:	50                   	push   %eax
f01151cc:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01151d2:	50                   	push   %eax
f01151d3:	52                   	push   %edx
f01151d4:	68 00 18 00 00       	push   $0x1800
f01151d9:	ff 75 d8             	pushl  -0x28(%ebp)
f01151dc:	e8 6a 3a ff ff       	call   f0108c4b <calculate_allocated_space>
f01151e1:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01151e4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01151ea:	85 c0                	test   %eax,%eax
f01151ec:	74 27                	je     f0115215 <test_calculate_allocated_space+0x421>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01151ee:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01151f4:	83 ec 0c             	sub    $0xc,%esp
f01151f7:	6a 00                	push   $0x0
f01151f9:	50                   	push   %eax
f01151fa:	68 70 a6 13 f0       	push   $0xf013a670
f01151ff:	68 d9 06 00 00       	push   $0x6d9
f0115204:	68 3e 89 13 f0       	push   $0xf013893e
f0115209:	e8 05 b2 fe ff       	call   f0100413 <_warn>
f011520e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115211:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115215:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011521b:	85 c0                	test   %eax,%eax
f011521d:	74 27                	je     f0115246 <test_calculate_allocated_space+0x452>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011521f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115225:	83 ec 0c             	sub    $0xc,%esp
f0115228:	6a 00                	push   $0x0
f011522a:	50                   	push   %eax
f011522b:	68 d0 a6 13 f0       	push   $0xf013a6d0
f0115230:	68 de 06 00 00       	push   $0x6de
f0115235:	68 3e 89 13 f0       	push   $0xf013893e
f011523a:	e8 d4 b1 fe ff       	call   f0100413 <_warn>
f011523f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115242:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115246:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011524a:	74 04                	je     f0115250 <test_calculate_allocated_space+0x45c>
f011524c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115250:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		num_tables = 0;
f0115254:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011525b:	00 00 00 
		num_pages = 0;
f011525e:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115265:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0115268:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011526b:	89 d0                	mov    %edx,%eax
f011526d:	c1 e0 02             	shl    $0x2,%eax
f0115270:	01 d0                	add    %edx,%eax
f0115272:	01 c0                	add    %eax,%eax
f0115274:	05 00 00 40 00       	add    $0x400000,%eax
f0115279:	89 c2                	mov    %eax,%edx
f011527b:	83 ec 0c             	sub    $0xc,%esp
f011527e:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115284:	50                   	push   %eax
f0115285:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011528b:	50                   	push   %eax
f011528c:	52                   	push   %edx
f011528d:	68 00 00 40 00       	push   $0x400000
f0115292:	ff 75 d8             	pushl  -0x28(%ebp)
f0115295:	e8 b1 39 ff ff       	call   f0108c4b <calculate_allocated_space>
f011529a:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011529d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01152a3:	85 c0                	test   %eax,%eax
f01152a5:	74 27                	je     f01152ce <test_calculate_allocated_space+0x4da>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01152a7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01152ad:	83 ec 0c             	sub    $0xc,%esp
f01152b0:	6a 00                	push   $0x0
f01152b2:	50                   	push   %eax
f01152b3:	68 70 a6 13 f0       	push   $0xf013a670
f01152b8:	68 ea 06 00 00       	push   $0x6ea
f01152bd:	68 3e 89 13 f0       	push   $0xf013893e
f01152c2:	e8 4c b1 fe ff       	call   f0100413 <_warn>
f01152c7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01152ca:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01152ce:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01152d4:	85 c0                	test   %eax,%eax
f01152d6:	74 27                	je     f01152ff <test_calculate_allocated_space+0x50b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01152d8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01152de:	83 ec 0c             	sub    $0xc,%esp
f01152e1:	6a 00                	push   $0x0
f01152e3:	50                   	push   %eax
f01152e4:	68 d0 a6 13 f0       	push   $0xf013a6d0
f01152e9:	68 ef 06 00 00       	push   $0x6ef
f01152ee:	68 3e 89 13 f0       	push   $0xf013893e
f01152f3:	e8 1b b1 fe ff       	call   f0100413 <_warn>
f01152f8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01152fb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01152ff:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115303:	74 04                	je     f0115309 <test_calculate_allocated_space+0x515>
f0115305:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115309:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test7
		num_tables = 0;
f011530d:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115314:	00 00 00 
		num_pages = 0;
f0115317:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011531e:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0115321:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115324:	05 00 00 38 00       	add    $0x380000,%eax
f0115329:	01 c0                	add    %eax,%eax
f011532b:	89 c2                	mov    %eax,%edx
f011532d:	83 ec 0c             	sub    $0xc,%esp
f0115330:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115336:	50                   	push   %eax
f0115337:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011533d:	50                   	push   %eax
f011533e:	52                   	push   %edx
f011533f:	68 00 00 70 00       	push   $0x700000
f0115344:	ff 75 d8             	pushl  -0x28(%ebp)
f0115347:	e8 ff 38 ff ff       	call   f0108c4b <calculate_allocated_space>
f011534c:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011534f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115355:	85 c0                	test   %eax,%eax
f0115357:	74 27                	je     f0115380 <test_calculate_allocated_space+0x58c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115359:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011535f:	83 ec 0c             	sub    $0xc,%esp
f0115362:	6a 00                	push   $0x0
f0115364:	50                   	push   %eax
f0115365:	68 70 a6 13 f0       	push   $0xf013a670
f011536a:	68 fc 06 00 00       	push   $0x6fc
f011536f:	68 3e 89 13 f0       	push   $0xf013893e
f0115374:	e8 9a b0 fe ff       	call   f0100413 <_warn>
f0115379:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011537c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115380:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115386:	85 c0                	test   %eax,%eax
f0115388:	74 27                	je     f01153b1 <test_calculate_allocated_space+0x5bd>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011538a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115390:	83 ec 0c             	sub    $0xc,%esp
f0115393:	6a 00                	push   $0x0
f0115395:	50                   	push   %eax
f0115396:	68 d0 a6 13 f0       	push   $0xf013a6d0
f011539b:	68 01 07 00 00       	push   $0x701
f01153a0:	68 3e 89 13 f0       	push   $0xf013893e
f01153a5:	e8 69 b0 fe ff       	call   f0100413 <_warn>
f01153aa:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01153ad:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01153b1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01153b5:	74 04                	je     f01153bb <test_calculate_allocated_space+0x5c7>
f01153b7:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01153bb:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		num_tables = 0;
f01153bf:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01153c6:	00 00 00 
		num_pages = 0;
f01153c9:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01153d0:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f01153d3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01153d6:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f01153db:	89 c2                	mov    %eax,%edx
f01153dd:	83 ec 0c             	sub    $0xc,%esp
f01153e0:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01153e6:	50                   	push   %eax
f01153e7:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01153ed:	50                   	push   %eax
f01153ee:	52                   	push   %edx
f01153ef:	68 ff ff 3f 00       	push   $0x3fffff
f01153f4:	ff 75 d8             	pushl  -0x28(%ebp)
f01153f7:	e8 4f 38 ff ff       	call   f0108c4b <calculate_allocated_space>
f01153fc:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01153ff:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115405:	85 c0                	test   %eax,%eax
f0115407:	74 27                	je     f0115430 <test_calculate_allocated_space+0x63c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115409:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011540f:	83 ec 0c             	sub    $0xc,%esp
f0115412:	6a 00                	push   $0x0
f0115414:	50                   	push   %eax
f0115415:	68 70 a6 13 f0       	push   $0xf013a670
f011541a:	68 0d 07 00 00       	push   $0x70d
f011541f:	68 3e 89 13 f0       	push   $0xf013893e
f0115424:	e8 ea af fe ff       	call   f0100413 <_warn>
f0115429:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011542c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115430:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115436:	85 c0                	test   %eax,%eax
f0115438:	74 27                	je     f0115461 <test_calculate_allocated_space+0x66d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011543a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115440:	83 ec 0c             	sub    $0xc,%esp
f0115443:	6a 00                	push   $0x0
f0115445:	50                   	push   %eax
f0115446:	68 d0 a6 13 f0       	push   $0xf013a6d0
f011544b:	68 12 07 00 00       	push   $0x712
f0115450:	68 3e 89 13 f0       	push   $0xf013893e
f0115455:	e8 b9 af fe ff       	call   f0100413 <_warn>
f011545a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011545d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115461:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115465:	74 04                	je     f011546b <test_calculate_allocated_space+0x677>
f0115467:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011546b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f011546f:	83 ec 0c             	sub    $0xc,%esp
f0115472:	68 89 a0 13 f0       	push   $0xf013a089
f0115477:	e8 92 b8 fe ff       	call   f0100d0e <cprintf>
f011547c:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f011547f:	83 ec 0c             	sub    $0xc,%esp
f0115482:	68 90 a5 13 f0       	push   $0xf013a590
f0115487:	e8 82 b8 fe ff       	call   f0100d0e <cprintf>
f011548c:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f011548f:	83 ec 04             	sub    $0x4,%esp
f0115492:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0115498:	50                   	push   %eax
f0115499:	68 42 94 13 f0       	push   $0xf0139442
f011549e:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01154a4:	50                   	push   %eax
f01154a5:	e8 c0 bf 01 00       	call   f013146a <strcconcat>
f01154aa:	83 c4 10             	add    $0x10,%esp
f01154ad:	83 ec 0c             	sub    $0xc,%esp
f01154b0:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f01154b6:	50                   	push   %eax
f01154b7:	e8 b4 b8 fe ff       	call   f0100d70 <execute_command>
f01154bc:	83 c4 10             	add    $0x10,%esp

		num_tables = 0;
f01154bf:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01154c6:	00 00 00 
		num_pages = 0;
f01154c9:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01154d0:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f01154d3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01154d6:	c1 e0 03             	shl    $0x3,%eax
f01154d9:	89 c2                	mov    %eax,%edx
f01154db:	83 ec 0c             	sub    $0xc,%esp
f01154de:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01154e4:	50                   	push   %eax
f01154e5:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01154eb:	50                   	push   %eax
f01154ec:	52                   	push   %edx
f01154ed:	6a 00                	push   $0x0
f01154ef:	ff 75 d8             	pushl  -0x28(%ebp)
f01154f2:	e8 54 37 ff ff       	call   f0108c4b <calculate_allocated_space>
f01154f7:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f01154fa:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1 ;
f0115501:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115508:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011550e:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115511:	74 28                	je     f011553b <test_calculate_allocated_space+0x747>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115513:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115519:	83 ec 0c             	sub    $0xc,%esp
f011551c:	ff 75 c8             	pushl  -0x38(%ebp)
f011551f:	50                   	push   %eax
f0115520:	68 70 a6 13 f0       	push   $0xf013a670
f0115525:	68 29 07 00 00       	push   $0x729
f011552a:	68 3e 89 13 f0       	push   $0xf013893e
f011552f:	e8 df ae fe ff       	call   f0100413 <_warn>
f0115534:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115537:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011553b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115541:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115544:	74 28                	je     f011556e <test_calculate_allocated_space+0x77a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115546:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011554c:	83 ec 0c             	sub    $0xc,%esp
f011554f:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115552:	50                   	push   %eax
f0115553:	68 d0 a6 13 f0       	push   $0xf013a6d0
f0115558:	68 2e 07 00 00       	push   $0x72e
f011555d:	68 3e 89 13 f0       	push   $0xf013893e
f0115562:	e8 ac ae fe ff       	call   f0100413 <_warn>
f0115567:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011556a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011556e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115572:	74 04                	je     f0115578 <test_calculate_allocated_space+0x784>
f0115574:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115578:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f011557c:	83 ec 04             	sub    $0x4,%esp
f011557f:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115585:	50                   	push   %eax
f0115586:	68 4f 94 13 f0       	push   $0xf013944f
f011558b:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115591:	50                   	push   %eax
f0115592:	e8 d3 be 01 00       	call   f013146a <strcconcat>
f0115597:	83 c4 10             	add    $0x10,%esp
f011559a:	83 ec 0c             	sub    $0xc,%esp
f011559d:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01155a3:	50                   	push   %eax
f01155a4:	e8 c7 b7 fe ff       	call   f0100d70 <execute_command>
f01155a9:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f01155ac:	83 ec 04             	sub    $0x4,%esp
f01155af:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01155b5:	50                   	push   %eax
f01155b6:	68 c4 a5 13 f0       	push   $0xf013a5c4
f01155bb:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01155c1:	50                   	push   %eax
f01155c2:	e8 a3 be 01 00       	call   f013146a <strcconcat>
f01155c7:	83 c4 10             	add    $0x10,%esp
f01155ca:	83 ec 0c             	sub    $0xc,%esp
f01155cd:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01155d3:	50                   	push   %eax
f01155d4:	e8 97 b7 fe ff       	call   f0100d70 <execute_command>
f01155d9:	83 c4 10             	add    $0x10,%esp

		//Test2
		num_tables = 0;
f01155dc:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01155e3:	00 00 00 
		num_pages = 0;
f01155e6:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01155ed:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*mega, &num_tables, &num_pages);
f01155f0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01155f3:	c1 e0 03             	shl    $0x3,%eax
f01155f6:	89 c2                	mov    %eax,%edx
f01155f8:	83 ec 0c             	sub    $0xc,%esp
f01155fb:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115601:	50                   	push   %eax
f0115602:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115608:	50                   	push   %eax
f0115609:	52                   	push   %edx
f011560a:	6a 00                	push   $0x0
f011560c:	ff 75 d8             	pushl  -0x28(%ebp)
f011560f:	e8 37 36 ff ff       	call   f0108c4b <calculate_allocated_space>
f0115614:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0115617:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 2 ;
f011561e:	c7 45 c4 02 00 00 00 	movl   $0x2,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115625:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011562b:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011562e:	74 28                	je     f0115658 <test_calculate_allocated_space+0x864>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115630:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115636:	83 ec 0c             	sub    $0xc,%esp
f0115639:	ff 75 c8             	pushl  -0x38(%ebp)
f011563c:	50                   	push   %eax
f011563d:	68 70 a6 13 f0       	push   $0xf013a670
f0115642:	68 3f 07 00 00       	push   $0x73f
f0115647:	68 3e 89 13 f0       	push   $0xf013893e
f011564c:	e8 c2 ad fe ff       	call   f0100413 <_warn>
f0115651:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115654:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115658:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011565e:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115661:	74 28                	je     f011568b <test_calculate_allocated_space+0x897>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115663:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115669:	83 ec 0c             	sub    $0xc,%esp
f011566c:	ff 75 c4             	pushl  -0x3c(%ebp)
f011566f:	50                   	push   %eax
f0115670:	68 d0 a6 13 f0       	push   $0xf013a6d0
f0115675:	68 44 07 00 00       	push   $0x744
f011567a:	68 3e 89 13 f0       	push   $0xf013893e
f011567f:	e8 8f ad fe ff       	call   f0100413 <_warn>
f0115684:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115687:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011568b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011568f:	74 04                	je     f0115695 <test_calculate_allocated_space+0x8a1>
f0115691:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115695:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0115699:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01156a0:	00 00 00 
		num_pages = 0;
f01156a3:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01156aa:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f01156ad:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01156b0:	c1 e0 0a             	shl    $0xa,%eax
f01156b3:	89 c2                	mov    %eax,%edx
f01156b5:	83 ec 0c             	sub    $0xc,%esp
f01156b8:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01156be:	50                   	push   %eax
f01156bf:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01156c5:	50                   	push   %eax
f01156c6:	52                   	push   %edx
f01156c7:	6a 00                	push   $0x0
f01156c9:	ff 75 d8             	pushl  -0x28(%ebp)
f01156cc:	e8 7a 35 ff ff       	call   f0108c4b <calculate_allocated_space>
f01156d1:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 + 1;
f01156d4:	c7 45 c8 02 00 00 00 	movl   $0x2,-0x38(%ebp)
		expected_num_pages = 1 + 1 + 1;
f01156db:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01156e2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01156e8:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01156eb:	74 28                	je     f0115715 <test_calculate_allocated_space+0x921>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01156ed:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01156f3:	83 ec 0c             	sub    $0xc,%esp
f01156f6:	ff 75 c8             	pushl  -0x38(%ebp)
f01156f9:	50                   	push   %eax
f01156fa:	68 70 a6 13 f0       	push   $0xf013a670
f01156ff:	68 52 07 00 00       	push   $0x752
f0115704:	68 3e 89 13 f0       	push   $0xf013893e
f0115709:	e8 05 ad fe ff       	call   f0100413 <_warn>
f011570e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115711:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115715:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011571b:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011571e:	74 28                	je     f0115748 <test_calculate_allocated_space+0x954>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115720:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115726:	83 ec 0c             	sub    $0xc,%esp
f0115729:	ff 75 c4             	pushl  -0x3c(%ebp)
f011572c:	50                   	push   %eax
f011572d:	68 d0 a6 13 f0       	push   $0xf013a6d0
f0115732:	68 57 07 00 00       	push   $0x757
f0115737:	68 3e 89 13 f0       	push   $0xf013893e
f011573c:	e8 d2 ac fe ff       	call   f0100413 <_warn>
f0115741:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115744:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115748:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011574c:	74 04                	je     f0115752 <test_calculate_allocated_space+0x95e>
f011574e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115752:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0115756:	83 ec 04             	sub    $0x4,%esp
f0115759:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f011575f:	50                   	push   %eax
f0115760:	68 d0 a5 13 f0       	push   $0xf013a5d0
f0115765:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011576b:	50                   	push   %eax
f011576c:	e8 f9 bc 01 00       	call   f013146a <strcconcat>
f0115771:	83 c4 10             	add    $0x10,%esp
f0115774:	83 ec 0c             	sub    $0xc,%esp
f0115777:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f011577d:	50                   	push   %eax
f011577e:	e8 ed b5 fe ff       	call   f0100d70 <execute_command>
f0115783:	83 c4 10             	add    $0x10,%esp

		//Test4
		num_tables = 0;
f0115786:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011578d:	00 00 00 
		num_pages = 0;
f0115790:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115797:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f011579a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011579d:	89 c2                	mov    %eax,%edx
f011579f:	01 d2                	add    %edx,%edx
f01157a1:	01 d0                	add    %edx,%eax
f01157a3:	05 00 18 00 00       	add    $0x1800,%eax
f01157a8:	89 c2                	mov    %eax,%edx
f01157aa:	83 ec 0c             	sub    $0xc,%esp
f01157ad:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01157b3:	50                   	push   %eax
f01157b4:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01157ba:	50                   	push   %eax
f01157bb:	52                   	push   %edx
f01157bc:	68 00 18 00 00       	push   $0x1800
f01157c1:	ff 75 d8             	pushl  -0x28(%ebp)
f01157c4:	e8 82 34 ff ff       	call   f0108c4b <calculate_allocated_space>
f01157c9:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01157cc:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f01157d3:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01157da:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01157e0:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01157e3:	74 28                	je     f011580d <test_calculate_allocated_space+0xa19>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01157e5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01157eb:	83 ec 0c             	sub    $0xc,%esp
f01157ee:	ff 75 c8             	pushl  -0x38(%ebp)
f01157f1:	50                   	push   %eax
f01157f2:	68 70 a6 13 f0       	push   $0xf013a670
f01157f7:	68 68 07 00 00       	push   $0x768
f01157fc:	68 3e 89 13 f0       	push   $0xf013893e
f0115801:	e8 0d ac fe ff       	call   f0100413 <_warn>
f0115806:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115809:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011580d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115813:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115816:	74 28                	je     f0115840 <test_calculate_allocated_space+0xa4c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115818:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011581e:	83 ec 0c             	sub    $0xc,%esp
f0115821:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115824:	50                   	push   %eax
f0115825:	68 d0 a6 13 f0       	push   $0xf013a6d0
f011582a:	68 6d 07 00 00       	push   $0x76d
f011582f:	68 3e 89 13 f0       	push   $0xf013893e
f0115834:	e8 da ab fe ff       	call   f0100413 <_warn>
f0115839:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011583c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115840:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115844:	74 04                	je     f011584a <test_calculate_allocated_space+0xa56>
f0115846:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011584a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f011584e:	83 ec 04             	sub    $0x4,%esp
f0115851:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115857:	50                   	push   %eax
f0115858:	68 a8 96 13 f0       	push   $0xf01396a8
f011585d:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115863:	50                   	push   %eax
f0115864:	e8 01 bc 01 00       	call   f013146a <strcconcat>
f0115869:	83 c4 10             	add    $0x10,%esp
f011586c:	83 ec 0c             	sub    $0xc,%esp
f011586f:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115875:	50                   	push   %eax
f0115876:	e8 f5 b4 fe ff       	call   f0100d70 <execute_command>
f011587b:	83 c4 10             	add    $0x10,%esp

		//Test5
		num_tables = 0;
f011587e:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115885:	00 00 00 
		num_pages = 0;
f0115888:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011588f:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0115892:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115895:	89 d0                	mov    %edx,%eax
f0115897:	c1 e0 02             	shl    $0x2,%eax
f011589a:	01 d0                	add    %edx,%eax
f011589c:	01 c0                	add    %eax,%eax
f011589e:	05 00 00 40 00       	add    $0x400000,%eax
f01158a3:	89 c2                	mov    %eax,%edx
f01158a5:	83 ec 0c             	sub    $0xc,%esp
f01158a8:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01158ae:	50                   	push   %eax
f01158af:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01158b5:	50                   	push   %eax
f01158b6:	52                   	push   %edx
f01158b7:	68 00 00 40 00       	push   $0x400000
f01158bc:	ff 75 d8             	pushl  -0x28(%ebp)
f01158bf:	e8 87 33 ff ff       	call   f0108c4b <calculate_allocated_space>
f01158c4:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01158c7:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f01158ce:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01158d5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01158db:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01158de:	74 28                	je     f0115908 <test_calculate_allocated_space+0xb14>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01158e0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01158e6:	83 ec 0c             	sub    $0xc,%esp
f01158e9:	ff 75 c8             	pushl  -0x38(%ebp)
f01158ec:	50                   	push   %eax
f01158ed:	68 70 a6 13 f0       	push   $0xf013a670
f01158f2:	68 7d 07 00 00       	push   $0x77d
f01158f7:	68 3e 89 13 f0       	push   $0xf013893e
f01158fc:	e8 12 ab fe ff       	call   f0100413 <_warn>
f0115901:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115904:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115908:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011590e:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115911:	74 28                	je     f011593b <test_calculate_allocated_space+0xb47>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115913:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115919:	83 ec 0c             	sub    $0xc,%esp
f011591c:	ff 75 c4             	pushl  -0x3c(%ebp)
f011591f:	50                   	push   %eax
f0115920:	68 d0 a6 13 f0       	push   $0xf013a6d0
f0115925:	68 82 07 00 00       	push   $0x782
f011592a:	68 3e 89 13 f0       	push   $0xf013893e
f011592f:	e8 df aa fe ff       	call   f0100413 <_warn>
f0115934:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115937:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011593b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011593f:	74 04                	je     f0115945 <test_calculate_allocated_space+0xb51>
f0115941:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115945:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0115949:	83 ec 04             	sub    $0x4,%esp
f011594c:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115952:	50                   	push   %eax
f0115953:	68 b2 96 13 f0       	push   $0xf01396b2
f0115958:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011595e:	50                   	push   %eax
f011595f:	e8 06 bb 01 00       	call   f013146a <strcconcat>
f0115964:	83 c4 10             	add    $0x10,%esp
f0115967:	83 ec 0c             	sub    $0xc,%esp
f011596a:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115970:	50                   	push   %eax
f0115971:	e8 fa b3 fe ff       	call   f0100d70 <execute_command>
f0115976:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0115979:	83 ec 04             	sub    $0x4,%esp
f011597c:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115982:	50                   	push   %eax
f0115983:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0115988:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011598e:	50                   	push   %eax
f011598f:	e8 d6 ba 01 00       	call   f013146a <strcconcat>
f0115994:	83 c4 10             	add    $0x10,%esp
f0115997:	83 ec 0c             	sub    $0xc,%esp
f011599a:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01159a0:	50                   	push   %eax
f01159a1:	e8 ca b3 fe ff       	call   f0100d70 <execute_command>
f01159a6:	83 c4 10             	add    $0x10,%esp

		//Test6
		num_tables = 0;
f01159a9:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01159b0:	00 00 00 
		num_pages = 0;
f01159b3:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01159ba:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f01159bd:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01159c0:	05 00 00 38 00       	add    $0x380000,%eax
f01159c5:	01 c0                	add    %eax,%eax
f01159c7:	89 c2                	mov    %eax,%edx
f01159c9:	83 ec 0c             	sub    $0xc,%esp
f01159cc:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01159d2:	50                   	push   %eax
f01159d3:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01159d9:	50                   	push   %eax
f01159da:	52                   	push   %edx
f01159db:	68 00 00 70 00       	push   $0x700000
f01159e0:	ff 75 d8             	pushl  -0x28(%ebp)
f01159e3:	e8 63 32 ff ff       	call   f0108c4b <calculate_allocated_space>
f01159e8:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01159eb:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 3;
f01159f2:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01159f9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01159ff:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115a02:	74 28                	je     f0115a2c <test_calculate_allocated_space+0xc38>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115a04:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115a0a:	83 ec 0c             	sub    $0xc,%esp
f0115a0d:	ff 75 c8             	pushl  -0x38(%ebp)
f0115a10:	50                   	push   %eax
f0115a11:	68 70 a6 13 f0       	push   $0xf013a670
f0115a16:	68 94 07 00 00       	push   $0x794
f0115a1b:	68 3e 89 13 f0       	push   $0xf013893e
f0115a20:	e8 ee a9 fe ff       	call   f0100413 <_warn>
f0115a25:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115a28:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115a2c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115a32:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115a35:	74 28                	je     f0115a5f <test_calculate_allocated_space+0xc6b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115a37:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115a3d:	83 ec 0c             	sub    $0xc,%esp
f0115a40:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115a43:	50                   	push   %eax
f0115a44:	68 d0 a6 13 f0       	push   $0xf013a6d0
f0115a49:	68 99 07 00 00       	push   $0x799
f0115a4e:	68 3e 89 13 f0       	push   $0xf013893e
f0115a53:	e8 bb a9 fe ff       	call   f0100413 <_warn>
f0115a58:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115a5b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115a5f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115a63:	74 04                	je     f0115a69 <test_calculate_allocated_space+0xc75>
f0115a65:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115a69:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test7
		num_tables = 0;
f0115a6d:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115a74:	00 00 00 
		num_pages = 0;
f0115a77:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115a7e:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0115a81:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115a84:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0115a89:	89 c2                	mov    %eax,%edx
f0115a8b:	83 ec 0c             	sub    $0xc,%esp
f0115a8e:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115a94:	50                   	push   %eax
f0115a95:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115a9b:	50                   	push   %eax
f0115a9c:	52                   	push   %edx
f0115a9d:	68 ff ff 3f 00       	push   $0x3fffff
f0115aa2:	ff 75 d8             	pushl  -0x28(%ebp)
f0115aa5:	e8 a1 31 ff ff       	call   f0108c4b <calculate_allocated_space>
f0115aaa:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0115aad:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 0;
f0115ab4:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115abb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115ac1:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115ac4:	74 28                	je     f0115aee <test_calculate_allocated_space+0xcfa>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115ac6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115acc:	83 ec 0c             	sub    $0xc,%esp
f0115acf:	ff 75 c8             	pushl  -0x38(%ebp)
f0115ad2:	50                   	push   %eax
f0115ad3:	68 70 a6 13 f0       	push   $0xf013a670
f0115ad8:	68 a7 07 00 00       	push   $0x7a7
f0115add:	68 3e 89 13 f0       	push   $0xf013893e
f0115ae2:	e8 2c a9 fe ff       	call   f0100413 <_warn>
f0115ae7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115aea:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115aee:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115af4:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115af7:	74 28                	je     f0115b21 <test_calculate_allocated_space+0xd2d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115af9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115aff:	83 ec 0c             	sub    $0xc,%esp
f0115b02:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115b05:	50                   	push   %eax
f0115b06:	68 d0 a6 13 f0       	push   $0xf013a6d0
f0115b0b:	68 ac 07 00 00       	push   $0x7ac
f0115b10:	68 3e 89 13 f0       	push   $0xf013893e
f0115b15:	e8 f9 a8 fe ff       	call   f0100413 <_warn>
f0115b1a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115b1d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115b21:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115b25:	74 04                	je     f0115b2b <test_calculate_allocated_space+0xd37>
f0115b27:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115b2b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0115b2f:	83 ec 0c             	sub    $0xc,%esp
f0115b32:	68 63 96 13 f0       	push   $0xf0139663
f0115b37:	e8 d2 b1 fe ff       	call   f0100d0e <cprintf>
f0115b3c:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_allocated_space: FINISHED. Evaluation = %d\n", eval);
f0115b3f:	83 ec 08             	sub    $0x8,%esp
f0115b42:	ff 75 e4             	pushl  -0x1c(%ebp)
f0115b45:	68 2c a7 13 f0       	push   $0xf013a72c
f0115b4a:	e8 bf b1 fe ff       	call   f0100d0e <cprintf>
f0115b4f:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0115b52:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0115b56:	75 10                	jne    f0115b68 <test_calculate_allocated_space+0xd74>
		cprintf("Congratulations!! test calculate_allocated_space completed successfully.\n");
f0115b58:	83 ec 0c             	sub    $0xc,%esp
f0115b5b:	68 6c a7 13 f0       	push   $0xf013a76c
f0115b60:	e8 a9 b1 fe ff       	call   f0100d0e <cprintf>
f0115b65:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0115b68:	a1 ac 5d 87 f0       	mov    0xf0875dac,%eax
f0115b6d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0115b70:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0115b73:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0115b76:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0115b7b:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0115b7e:	5b                   	pop    %ebx
f0115b7f:	5e                   	pop    %esi
f0115b80:	5f                   	pop    %edi
f0115b81:	5d                   	pop    %ebp
f0115b82:	c3                   	ret    

f0115b83 <CB>:
//===========================================================================
//===========================================================================
//===========================================================================

int CB(uint32 *ptr_dir, uint32 va, int bn)
{
f0115b83:	55                   	push   %ebp
f0115b84:	89 e5                	mov    %esp,%ebp
f0115b86:	83 ec 18             	sub    $0x18,%esp
	//assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f0115b89:	8b 45 10             	mov    0x10(%ebp),%eax
f0115b8c:	ba 01 00 00 00       	mov    $0x1,%edx
f0115b91:	88 c1                	mov    %al,%cl
f0115b93:	d3 e2                	shl    %cl,%edx
f0115b95:	89 d0                	mov    %edx,%eax
f0115b97:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0115b9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115b9d:	c1 e8 16             	shr    $0x16,%eax
f0115ba0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115ba7:	8b 45 08             	mov    0x8(%ebp),%eax
f0115baa:	01 d0                	add    %edx,%eax
f0115bac:	8b 00                	mov    (%eax),%eax
f0115bae:	83 e0 01             	and    $0x1,%eax
f0115bb1:	85 c0                	test   %eax,%eax
f0115bb3:	75 07                	jne    f0115bbc <CB+0x39>
f0115bb5:	b8 00 00 00 00       	mov    $0x0,%eax
f0115bba:	eb 76                	jmp    f0115c32 <CB+0xaf>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0115bbc:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115bbf:	c1 e8 16             	shr    $0x16,%eax
f0115bc2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115bc9:	8b 45 08             	mov    0x8(%ebp),%eax
f0115bcc:	01 d0                	add    %edx,%eax
f0115bce:	8b 00                	mov    (%eax),%eax
f0115bd0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0115bd5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0115bd8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115bdb:	c1 e8 0c             	shr    $0xc,%eax
f0115bde:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0115be1:	a1 10 5d 87 f0       	mov    0xf0875d10,%eax
f0115be6:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0115be9:	72 17                	jb     f0115c02 <CB+0x7f>
f0115beb:	ff 75 f0             	pushl  -0x10(%ebp)
f0115bee:	68 b8 a7 13 f0       	push   $0xf013a7b8
f0115bf3:	68 c7 07 00 00       	push   $0x7c7
f0115bf8:	68 3e 89 13 f0       	push   $0xf013893e
f0115bfd:	e8 03 a6 fe ff       	call   f0100205 <_panic>
f0115c02:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115c05:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0115c0a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return ((table[((((uint32) (va)) >> 12) & 0x3FF)]&mask) == mask)? 1 : 0 ;
f0115c0d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115c10:	c1 e8 0c             	shr    $0xc,%eax
f0115c13:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115c18:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115c1f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0115c22:	01 d0                	add    %edx,%eax
f0115c24:	8b 00                	mov    (%eax),%eax
f0115c26:	23 45 f4             	and    -0xc(%ebp),%eax
f0115c29:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0115c2c:	0f 94 c0             	sete   %al
f0115c2f:	0f b6 c0             	movzbl %al,%eax
}
f0115c32:	c9                   	leave  
f0115c33:	c3                   	ret    

f0115c34 <SB>:
int SB(uint32 *ptr_dir, uint32 va, int bn , int v)
{
f0115c34:	55                   	push   %ebp
f0115c35:	89 e5                	mov    %esp,%ebp
f0115c37:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0115c3a:	68 e7 a7 13 f0       	push   $0xf013a7e7
f0115c3f:	68 f6 a7 13 f0       	push   $0xf013a7f6
f0115c44:	68 cc 07 00 00       	push   $0x7cc
f0115c49:	68 3e 89 13 f0       	push   $0xf013893e
f0115c4e:	e8 b2 a5 fe ff       	call   f0100205 <_panic>

f0115c53 <CPs>:
	if (~v) table[((((uint32) (va)) >> 12) & 0x3FF)] &= ~mask ;
	else 	table[((((uint32) (va)) >> 12) & 0x3FF)] |= mask ;
	return 0;
}
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
f0115c53:	55                   	push   %ebp
f0115c54:	89 e5                	mov    %esp,%ebp
f0115c56:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0115c59:	68 e7 a7 13 f0       	push   $0xf013a7e7
f0115c5e:	68 f6 a7 13 f0       	push   $0xf013a7f6
f0115c63:	68 d6 07 00 00       	push   $0x7d6
f0115c68:	68 3e 89 13 f0       	push   $0xf013893e
f0115c6d:	e8 93 a5 fe ff       	call   f0100205 <_panic>

f0115c72 <CA>:
	}
	return 1;
}

int CA(uint32 *ptr_dir, uint32 va)
{
f0115c72:	55                   	push   %ebp
f0115c73:	89 e5                	mov    %esp,%ebp
f0115c75:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0115c78:	68 e7 a7 13 f0       	push   $0xf013a7e7
f0115c7d:	68 f6 a7 13 f0       	push   $0xf013a7f6
f0115c82:	68 e5 07 00 00       	push   $0x7e5
f0115c87:	68 3e 89 13 f0       	push   $0xf013893e
f0115c8c:	e8 74 a5 fe ff       	call   f0100205 <_panic>

f0115c91 <CE>:
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	return table[((((uint32) (va)) >> 12) & 0x3FF)]&~0x00000FFF;
}

int CE(uint32 *_d, uint32 va)
{
f0115c91:	55                   	push   %ebp
f0115c92:	89 e5                	mov    %esp,%ebp
f0115c94:	83 ec 18             	sub    $0x18,%esp
	if (!(_d[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0115c97:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115c9a:	c1 e8 16             	shr    $0x16,%eax
f0115c9d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115ca4:	8b 45 08             	mov    0x8(%ebp),%eax
f0115ca7:	01 d0                	add    %edx,%eax
f0115ca9:	8b 00                	mov    (%eax),%eax
f0115cab:	83 e0 01             	and    $0x1,%eax
f0115cae:	85 c0                	test   %eax,%eax
f0115cb0:	75 07                	jne    f0115cb9 <CE+0x28>
f0115cb2:	b8 00 00 00 00       	mov    $0x0,%eax
f0115cb7:	eb 7a                	jmp    f0115d33 <CE+0xa2>
	uint32 *_t = (STATIC_KERNEL_VIRTUAL_ADDRESS(_d[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0115cb9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115cbc:	c1 e8 16             	shr    $0x16,%eax
f0115cbf:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115cc6:	8b 45 08             	mov    0x8(%ebp),%eax
f0115cc9:	01 d0                	add    %edx,%eax
f0115ccb:	8b 00                	mov    (%eax),%eax
f0115ccd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0115cd2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0115cd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115cd8:	c1 e8 0c             	shr    $0xc,%eax
f0115cdb:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0115cde:	a1 10 5d 87 f0       	mov    0xf0875d10,%eax
f0115ce3:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0115ce6:	72 17                	jb     f0115cff <CE+0x6e>
f0115ce8:	ff 75 f4             	pushl  -0xc(%ebp)
f0115ceb:	68 b8 a7 13 f0       	push   $0xf013a7b8
f0115cf0:	68 ee 07 00 00       	push   $0x7ee
f0115cf5:	68 3e 89 13 f0       	push   $0xf013893e
f0115cfa:	e8 06 a5 fe ff       	call   f0100205 <_panic>
f0115cff:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115d02:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0115d07:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((_t[((((uint32) (va)) >> 12) & 0x3FF)])!=0) return 0;
f0115d0a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115d0d:	c1 e8 0c             	shr    $0xc,%eax
f0115d10:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115d15:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115d1c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0115d1f:	01 d0                	add    %edx,%eax
f0115d21:	8b 00                	mov    (%eax),%eax
f0115d23:	85 c0                	test   %eax,%eax
f0115d25:	74 07                	je     f0115d2e <CE+0x9d>
f0115d27:	b8 00 00 00 00       	mov    $0x0,%eax
f0115d2c:	eb 05                	jmp    f0115d33 <CE+0xa2>
	return 1;
f0115d2e:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0115d33:	c9                   	leave  
f0115d34:	c3                   	ret    

f0115d35 <CP>:

int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc)
{
f0115d35:	55                   	push   %ebp
f0115d36:	89 e5                	mov    %esp,%ebp
f0115d38:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0115d3b:	68 e7 a7 13 f0       	push   $0xf013a7e7
f0115d40:	68 f6 a7 13 f0       	push   $0xf013a7f6
f0115d45:	68 f5 07 00 00       	push   $0x7f5
f0115d4a:	68 3e 89 13 f0       	push   $0xf013893e
f0115d4f:	e8 b1 a4 fe ff       	call   f0100205 <_panic>

f0115d54 <GP>:
	}
	return 0;
}

uint32 GP(uint32 *ptr_dir, uint32 va)
{
f0115d54:	55                   	push   %ebp
f0115d55:	89 e5                	mov    %esp,%ebp
f0115d57:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0115d5a:	68 e7 a7 13 f0       	push   $0xf013a7e7
f0115d5f:	68 f6 a7 13 f0       	push   $0xf013a7f6
f0115d64:	68 05 08 00 00       	push   $0x805
f0115d69:	68 3e 89 13 f0       	push   $0xf013893e
f0115d6e:	e8 92 a4 fe ff       	call   f0100205 <_panic>

f0115d73 <ClearUserSpace>:
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
f0115d73:	55                   	push   %ebp
f0115d74:	89 e5                	mov    %esp,%ebp
f0115d76:	83 ec 10             	sub    $0x10,%esp
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0115d79:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0115d80:	eb 18                	jmp    f0115d9a <ClearUserSpace+0x27>
		ptr_dir[i] = 0;
f0115d82:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0115d85:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115d8c:	8b 45 08             	mov    0x8(%ebp),%eax
f0115d8f:	01 d0                	add    %edx,%eax
f0115d91:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0115d97:	ff 45 fc             	incl   -0x4(%ebp)
f0115d9a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0115d9d:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f0115da2:	76 de                	jbe    f0115d82 <ClearUserSpace+0xf>
		ptr_dir[i] = 0;
	}
}
f0115da4:	90                   	nop
f0115da5:	c9                   	leave  
f0115da6:	c3                   	ret    

f0115da7 <CCP>:

int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
f0115da7:	55                   	push   %ebp
f0115da8:	89 e5                	mov    %esp,%ebp
f0115daa:	83 ec 38             	sub    $0x38,%esp
f0115dad:	8b 45 2c             	mov    0x2c(%ebp),%eax
f0115db0:	88 45 d4             	mov    %al,-0x2c(%ebp)
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
f0115db3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115db6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0115dbb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));
f0115dbe:	8b 45 10             	mov    0x10(%ebp),%eax
f0115dc1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0115dc6:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0115dc9:	e9 ea 01 00 00       	jmp    f0115fb8 <CCP+0x211>
	{
		uint32* ptr_table1;
		uint32* ptr_table2;
		struct FrameInfo * pfi1 ;
		struct FrameInfo * pfi2 ;
		if (chk_type != CHK_ALLOC)
f0115dce:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0115dd2:	74 44                	je     f0115e18 <CCP+0x71>
		{
			pfi1 = get_frame_info(ptr_dir, (uint32)ptrTemp1, &ptr_table1);
f0115dd4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115dd7:	83 ec 04             	sub    $0x4,%esp
f0115dda:	8d 55 dc             	lea    -0x24(%ebp),%edx
f0115ddd:	52                   	push   %edx
f0115dde:	50                   	push   %eax
f0115ddf:	ff 75 08             	pushl  0x8(%ebp)
f0115de2:	e8 1f 10 ff ff       	call   f0106e06 <get_frame_info>
f0115de7:	83 c4 10             	add    $0x10,%esp
f0115dea:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (ptr_table1 == NULL)
f0115ded:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115df0:	85 c0                	test   %eax,%eax
f0115df2:	75 24                	jne    f0115e18 <CCP+0x71>
			{
				warn("[EVAL] Failed. Table of address 1 = NULL\n");
f0115df4:	83 ec 04             	sub    $0x4,%esp
f0115df7:	68 0c a8 13 f0       	push   $0xf013a80c
f0115dfc:	68 22 08 00 00       	push   $0x822
f0115e01:	68 3e 89 13 f0       	push   $0xf013893e
f0115e06:	e8 08 a6 fe ff       	call   f0100413 <_warn>
f0115e0b:	83 c4 10             	add    $0x10,%esp
				return 0;
f0115e0e:	b8 00 00 00 00       	mov    $0x0,%eax
f0115e13:	e9 b6 01 00 00       	jmp    f0115fce <CCP+0x227>
			}
		}
		pfi2 = get_frame_info(ptr_dir, (uint32)ptrTemp2, &ptr_table2);
f0115e18:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115e1b:	83 ec 04             	sub    $0x4,%esp
f0115e1e:	8d 55 d8             	lea    -0x28(%ebp),%edx
f0115e21:	52                   	push   %edx
f0115e22:	50                   	push   %eax
f0115e23:	ff 75 08             	pushl  0x8(%ebp)
f0115e26:	e8 db 0f ff ff       	call   f0106e06 <get_frame_info>
f0115e2b:	83 c4 10             	add    $0x10,%esp
f0115e2e:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (ptr_table2 == NULL)
f0115e31:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0115e34:	85 c0                	test   %eax,%eax
f0115e36:	75 24                	jne    f0115e5c <CCP+0xb5>
		{
			warn("[EVAL] Failed. Table of address 2 = NULL\n");
f0115e38:	83 ec 04             	sub    $0x4,%esp
f0115e3b:	68 38 a8 13 f0       	push   $0xf013a838
f0115e40:	68 29 08 00 00       	push   $0x829
f0115e45:	68 3e 89 13 f0       	push   $0xf013893e
f0115e4a:	e8 c4 a5 fe ff       	call   f0100413 <_warn>
f0115e4f:	83 c4 10             	add    $0x10,%esp
			return 0;
f0115e52:	b8 00 00 00 00       	mov    $0x0,%eax
f0115e57:	e9 72 01 00 00       	jmp    f0115fce <CCP+0x227>
		}
		if (chk_type == CHK_SHARE)
f0115e5c:	80 7d d4 02          	cmpb   $0x2,-0x2c(%ebp)
f0115e60:	75 70                	jne    f0115ed2 <CCP+0x12b>
		{
			uint32 fn1 = ptr_table1[PTX(ptrTemp1)] >> 12 ;
f0115e62:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115e65:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0115e68:	c1 ea 0c             	shr    $0xc,%edx
f0115e6b:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0115e71:	c1 e2 02             	shl    $0x2,%edx
f0115e74:	01 d0                	add    %edx,%eax
f0115e76:	8b 00                	mov    (%eax),%eax
f0115e78:	c1 e8 0c             	shr    $0xc,%eax
f0115e7b:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 fn2 = ptr_table2[PTX(ptrTemp2)] >> 12 ;
f0115e7e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0115e81:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0115e84:	c1 ea 0c             	shr    $0xc,%edx
f0115e87:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0115e8d:	c1 e2 02             	shl    $0x2,%edx
f0115e90:	01 d0                	add    %edx,%eax
f0115e92:	8b 00                	mov    (%eax),%eax
f0115e94:	c1 e8 0c             	shr    $0xc,%eax
f0115e97:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			if(fn1 != fn2)
f0115e9a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0115e9d:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0115ea0:	74 30                	je     f0115ed2 <CCP+0x12b>
			{
				warn("[EVAL] Failed. Frame numbers not equal in the whole range!\nva1=%x, va2=%x, fn1=%x, fn2=%x\n", ptrTemp1, ptrTemp2, fn1, fn2);
f0115ea2:	83 ec 04             	sub    $0x4,%esp
f0115ea5:	ff 75 e4             	pushl  -0x1c(%ebp)
f0115ea8:	ff 75 e8             	pushl  -0x18(%ebp)
f0115eab:	ff 75 f0             	pushl  -0x10(%ebp)
f0115eae:	ff 75 f4             	pushl  -0xc(%ebp)
f0115eb1:	68 64 a8 13 f0       	push   $0xf013a864
f0115eb6:	68 33 08 00 00       	push   $0x833
f0115ebb:	68 3e 89 13 f0       	push   $0xf013893e
f0115ec0:	e8 4e a5 fe ff       	call   f0100413 <_warn>
f0115ec5:	83 c4 20             	add    $0x20,%esp
				return 0;
f0115ec8:	b8 00 00 00 00       	mov    $0x0,%eax
f0115ecd:	e9 fc 00 00 00       	jmp    f0115fce <CCP+0x227>
			}
		}
		if (ref != -1)
f0115ed2:	83 7d 18 ff          	cmpl   $0xffffffff,0x18(%ebp)
f0115ed6:	74 52                	je     f0115f2a <CCP+0x183>
		{
			if (pfi2 == NULL || (*pfi2).references != ref)
f0115ed8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0115edc:	74 0e                	je     f0115eec <CCP+0x145>
f0115ede:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0115ee1:	8b 40 08             	mov    0x8(%eax),%eax
f0115ee4:	0f b7 c0             	movzwl %ax,%eax
f0115ee7:	3b 45 18             	cmp    0x18(%ebp),%eax
f0115eea:	74 3e                	je     f0115f2a <CCP+0x183>
			{
				warn("[EVAL] Failed. Num of frame references is not correct. MAKE SURE to use the functions of LAB5! va2=%x, ref2=%d\n", ptrTemp2, pfi2==NULL? 0 : (*pfi2).references);
f0115eec:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0115ef0:	74 0b                	je     f0115efd <CCP+0x156>
f0115ef2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0115ef5:	8b 40 08             	mov    0x8(%eax),%eax
f0115ef8:	0f b7 c0             	movzwl %ax,%eax
f0115efb:	eb 05                	jmp    f0115f02 <CCP+0x15b>
f0115efd:	b8 00 00 00 00       	mov    $0x0,%eax
f0115f02:	83 ec 0c             	sub    $0xc,%esp
f0115f05:	50                   	push   %eax
f0115f06:	ff 75 f0             	pushl  -0x10(%ebp)
f0115f09:	68 c0 a8 13 f0       	push   $0xf013a8c0
f0115f0e:	68 3b 08 00 00       	push   $0x83b
f0115f13:	68 3e 89 13 f0       	push   $0xf013893e
f0115f18:	e8 f6 a4 fe ff       	call   f0100413 <_warn>
f0115f1d:	83 c4 20             	add    $0x20,%esp
				return 0;
f0115f20:	b8 00 00 00 00       	mov    $0x0,%eax
f0115f25:	e9 a4 00 00 00       	jmp    f0115fce <CCP+0x227>
			}
		}
		if (CPs(ptr_dir, (uint32)ptrTemp2, dst_perms, dst_to_chk) <= 0)
f0115f2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115f2d:	ff 75 20             	pushl  0x20(%ebp)
f0115f30:	ff 75 1c             	pushl  0x1c(%ebp)
f0115f33:	50                   	push   %eax
f0115f34:	ff 75 08             	pushl  0x8(%ebp)
f0115f37:	e8 17 fd ff ff       	call   f0115c53 <CPs>
f0115f3c:	83 c4 10             	add    $0x10,%esp
f0115f3f:	85 c0                	test   %eax,%eax
f0115f41:	7f 21                	jg     f0115f64 <CCP+0x1bd>
		{
			warn("[EVAL] Failed. one or more permission in destination is not correct\n");
f0115f43:	83 ec 04             	sub    $0x4,%esp
f0115f46:	68 30 a9 13 f0       	push   $0xf013a930
f0115f4b:	68 41 08 00 00       	push   $0x841
f0115f50:	68 3e 89 13 f0       	push   $0xf013893e
f0115f55:	e8 b9 a4 fe ff       	call   f0100413 <_warn>
f0115f5a:	83 c4 10             	add    $0x10,%esp
			return 0;
f0115f5d:	b8 00 00 00 00       	mov    $0x0,%eax
f0115f62:	eb 6a                	jmp    f0115fce <CCP+0x227>
		}
		if (chk_type != CHK_ALLOC)
f0115f64:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0115f68:	74 3a                	je     f0115fa4 <CCP+0x1fd>
		{
			if (CPs(ptr_dir, (uint32)ptrTemp1, src_perms, src_to_chk) <= 0)
f0115f6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115f6d:	ff 75 28             	pushl  0x28(%ebp)
f0115f70:	ff 75 24             	pushl  0x24(%ebp)
f0115f73:	50                   	push   %eax
f0115f74:	ff 75 08             	pushl  0x8(%ebp)
f0115f77:	e8 d7 fc ff ff       	call   f0115c53 <CPs>
f0115f7c:	83 c4 10             	add    $0x10,%esp
f0115f7f:	85 c0                	test   %eax,%eax
f0115f81:	7f 21                	jg     f0115fa4 <CCP+0x1fd>
			{
				warn("[EVAL] Failed. one or more permission in source is not correct\n");
f0115f83:	83 ec 04             	sub    $0x4,%esp
f0115f86:	68 78 a9 13 f0       	push   $0xf013a978
f0115f8b:	68 48 08 00 00       	push   $0x848
f0115f90:	68 3e 89 13 f0       	push   $0xf013893e
f0115f95:	e8 79 a4 fe ff       	call   f0100413 <_warn>
f0115f9a:	83 c4 10             	add    $0x10,%esp
				return 0;
f0115f9d:	b8 00 00 00 00       	mov    $0x0,%eax
f0115fa2:	eb 2a                	jmp    f0115fce <CCP+0x227>
			}
		}
		if (chk_type != CHK_ALLOC)
f0115fa4:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0115fa8:	74 07                	je     f0115fb1 <CCP+0x20a>
		{
			ptrTemp1 += PAGE_SIZE;
f0115faa:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0115fb1:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0115fb8:	8b 55 10             	mov    0x10(%ebp),%edx
f0115fbb:	8b 45 14             	mov    0x14(%ebp),%eax
f0115fbe:	01 d0                	add    %edx,%eax
f0115fc0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0115fc3:	0f 87 05 fe ff ff    	ja     f0115dce <CCP+0x27>
		{
			ptrTemp1 += PAGE_SIZE;
		}
	}

	return 1;
f0115fc9:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0115fce:	c9                   	leave  
f0115fcf:	c3                   	ret    

f0115fd0 <test_priority_normal_and_higher>:

extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f0115fd0:	55                   	push   %ebp
f0115fd1:	89 e5                	mov    %esp,%ebp
f0115fd3:	57                   	push   %edi
f0115fd4:	56                   	push   %esi
f0115fd5:	53                   	push   %ebx
f0115fd6:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
	if(firstTime)
f0115fdc:	a0 22 2d 19 f0       	mov    0xf0192d22,%al
f0115fe1:	84 c0                	test   %al,%al
f0115fe3:	0f 84 b4 09 00 00    	je     f011699d <test_priority_normal_and_higher+0x9cd>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f0115fe9:	c6 05 22 2d 19 f0 00 	movb   $0x0,0xf0192d22
		char command[100] = "load fos_add 20";
f0115ff0:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0115ff6:	bb 18 ac 13 f0       	mov    $0xf013ac18,%ebx
f0115ffb:	ba 04 00 00 00       	mov    $0x4,%edx
f0116000:	89 c7                	mov    %eax,%edi
f0116002:	89 de                	mov    %ebx,%esi
f0116004:	89 d1                	mov    %edx,%ecx
f0116006:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0116008:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f011600e:	b9 15 00 00 00       	mov    $0x15,%ecx
f0116013:	b8 00 00 00 00       	mov    $0x0,%eax
f0116018:	89 d7                	mov    %edx,%edi
f011601a:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f011601c:	83 ec 0c             	sub    $0xc,%esp
f011601f:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0116025:	50                   	push   %eax
f0116026:	e8 45 ad fe ff       	call   f0100d70 <execute_command>
f011602b:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f011602e:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0116034:	bb 7c ac 13 f0       	mov    $0xf013ac7c,%ebx
f0116039:	ba 0d 00 00 00       	mov    $0xd,%edx
f011603e:	89 c7                	mov    %eax,%edi
f0116040:	89 de                	mov    %ebx,%esi
f0116042:	89 d1                	mov    %edx,%ecx
f0116044:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116046:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f011604c:	b9 57 00 00 00       	mov    $0x57,%ecx
f0116051:	b0 00                	mov    $0x0,%al
f0116053:	89 d7                	mov    %edx,%edi
f0116055:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0116057:	83 ec 0c             	sub    $0xc,%esp
f011605a:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0116060:	50                   	push   %eax
f0116061:	e8 0a ad fe ff       	call   f0100d70 <execute_command>
f0116066:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f0116069:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f011606f:	bb e0 ac 13 f0       	mov    $0xf013ace0,%ebx
f0116074:	ba 17 00 00 00       	mov    $0x17,%edx
f0116079:	89 c7                	mov    %eax,%edi
f011607b:	89 de                	mov    %ebx,%esi
f011607d:	89 d1                	mov    %edx,%ecx
f011607f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116081:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f0116087:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f011608c:	b0 00                	mov    $0x0,%al
f011608e:	89 d7                	mov    %edx,%edi
f0116090:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0116092:	83 ec 0c             	sub    $0xc,%esp
f0116095:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f011609b:	50                   	push   %eax
f011609c:	e8 cf ac fe ff       	call   f0100d70 <execute_command>
f01160a1:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f01160a4:	83 ec 04             	sub    $0x4,%esp
f01160a7:	6a 00                	push   $0x0
f01160a9:	8d 45 ac             	lea    -0x54(%ebp),%eax
f01160ac:	50                   	push   %eax
f01160ad:	68 00 10 00 00       	push   $0x1000
f01160b2:	e8 53 3a ff ff       	call   f0109b0a <envid2env>
f01160b7:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f01160ba:	83 ec 04             	sub    $0x4,%esp
f01160bd:	6a 00                	push   $0x0
f01160bf:	8d 45 a8             	lea    -0x58(%ebp),%eax
f01160c2:	50                   	push   %eax
f01160c3:	68 01 10 00 00       	push   $0x1001
f01160c8:	e8 3d 3a ff ff       	call   f0109b0a <envid2env>
f01160cd:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f01160d0:	83 ec 04             	sub    $0x4,%esp
f01160d3:	6a 00                	push   $0x0
f01160d5:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f01160d8:	50                   	push   %eax
f01160d9:	68 02 10 00 00       	push   $0x1002
f01160de:	e8 27 3a ff ff       	call   f0109b0a <envid2env>
f01160e3:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f01160e6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01160e9:	85 c0                	test   %eax,%eax
f01160eb:	74 0e                	je     f01160fb <test_priority_normal_and_higher+0x12b>
f01160ed:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01160f0:	85 c0                	test   %eax,%eax
f01160f2:	74 07                	je     f01160fb <test_priority_normal_and_higher+0x12b>
f01160f4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01160f7:	85 c0                	test   %eax,%eax
f01160f9:	75 14                	jne    f011610f <test_priority_normal_and_higher+0x13f>
			panic("Loading programs failed\n");
f01160fb:	83 ec 04             	sub    $0x4,%esp
f01160fe:	68 b8 a9 13 f0       	push   $0xf013a9b8
f0116103:	6a 26                	push   $0x26
f0116105:	68 d1 a9 13 f0       	push   $0xf013a9d1
f011610a:	e8 f6 a0 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f011610f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116112:	8b 40 74             	mov    0x74(%eax),%eax
f0116115:	83 f8 14             	cmp    $0x14,%eax
f0116118:	75 16                	jne    f0116130 <test_priority_normal_and_higher+0x160>
f011611a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011611d:	8b 40 74             	mov    0x74(%eax),%eax
f0116120:	83 f8 0f             	cmp    $0xf,%eax
f0116123:	75 0b                	jne    f0116130 <test_priority_normal_and_higher+0x160>
f0116125:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116128:	8b 40 74             	mov    0x74(%eax),%eax
f011612b:	83 f8 0a             	cmp    $0xa,%eax
f011612e:	74 14                	je     f0116144 <test_priority_normal_and_higher+0x174>
			panic("The programs should be initially loaded with the given working set size\n");
f0116130:	83 ec 04             	sub    $0x4,%esp
f0116133:	68 ec a9 13 f0       	push   $0xf013a9ec
f0116138:	6a 29                	push   $0x29
f011613a:	68 d1 a9 13 f0       	push   $0xf013a9d1
f011613f:	e8 c1 a0 fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 20; i++)
f0116144:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f011614b:	eb 44                	jmp    f0116191 <test_priority_normal_and_higher+0x1c1>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f011614d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116150:	8b 48 78             	mov    0x78(%eax),%ecx
f0116153:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0116156:	89 d0                	mov    %edx,%eax
f0116158:	01 c0                	add    %eax,%eax
f011615a:	01 d0                	add    %edx,%eax
f011615c:	c1 e0 03             	shl    $0x3,%eax
f011615f:	01 c8                	add    %ecx,%eax
f0116161:	8b 10                	mov    (%eax),%edx
f0116163:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116166:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f011616d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116170:	8b 48 78             	mov    0x78(%eax),%ecx
f0116173:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0116176:	89 d0                	mov    %edx,%eax
f0116178:	01 c0                	add    %eax,%eax
f011617a:	01 d0                	add    %edx,%eax
f011617c:	c1 e0 03             	shl    $0x3,%eax
f011617f:	01 c8                	add    %ecx,%eax
f0116181:	8b 50 08             	mov    0x8(%eax),%edx
f0116184:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116187:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f011618e:	ff 45 e4             	incl   -0x1c(%ebp)
f0116191:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0116195:	7e b6                	jle    f011614d <test_priority_normal_and_higher+0x17d>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0116197:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011619e:	eb 44                	jmp    f01161e4 <test_priority_normal_and_higher+0x214>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f01161a0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01161a3:	8b 48 78             	mov    0x78(%eax),%ecx
f01161a6:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01161a9:	89 d0                	mov    %edx,%eax
f01161ab:	01 c0                	add    %eax,%eax
f01161ad:	01 d0                	add    %edx,%eax
f01161af:	c1 e0 03             	shl    $0x3,%eax
f01161b2:	01 c8                	add    %ecx,%eax
f01161b4:	8b 10                	mov    (%eax),%edx
f01161b6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01161b9:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f01161c0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01161c3:	8b 48 78             	mov    0x78(%eax),%ecx
f01161c6:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01161c9:	89 d0                	mov    %edx,%eax
f01161cb:	01 c0                	add    %eax,%eax
f01161cd:	01 d0                	add    %edx,%eax
f01161cf:	c1 e0 03             	shl    $0x3,%eax
f01161d2:	01 c8                	add    %ecx,%eax
f01161d4:	8b 50 08             	mov    0x8(%eax),%edx
f01161d7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01161da:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f01161e1:	ff 45 e0             	incl   -0x20(%ebp)
f01161e4:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f01161e8:	7e b6                	jle    f01161a0 <test_priority_normal_and_higher+0x1d0>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f01161ea:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f01161f1:	eb 44                	jmp    f0116237 <test_priority_normal_and_higher+0x267>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f01161f3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01161f6:	8b 48 78             	mov    0x78(%eax),%ecx
f01161f9:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01161fc:	89 d0                	mov    %edx,%eax
f01161fe:	01 c0                	add    %eax,%eax
f0116200:	01 d0                	add    %edx,%eax
f0116202:	c1 e0 03             	shl    $0x3,%eax
f0116205:	01 c8                	add    %ecx,%eax
f0116207:	8b 10                	mov    (%eax),%edx
f0116209:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011620c:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0116213:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116216:	8b 48 78             	mov    0x78(%eax),%ecx
f0116219:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011621c:	89 d0                	mov    %edx,%eax
f011621e:	01 c0                	add    %eax,%eax
f0116220:	01 d0                	add    %edx,%eax
f0116222:	c1 e0 03             	shl    $0x3,%eax
f0116225:	01 c8                	add    %ecx,%eax
f0116227:	8b 50 08             	mov    0x8(%eax),%edx
f011622a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011622d:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0116234:	ff 45 dc             	incl   -0x24(%ebp)
f0116237:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f011623b:	7e b6                	jle    f01161f3 <test_priority_normal_and_higher+0x223>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f011623d:	e8 5b 69 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116242:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f0116245:	e8 7e db fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011624a:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f011624d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116250:	83 ec 08             	sub    $0x8,%esp
f0116253:	6a 03                	push   $0x3
f0116255:	50                   	push   %eax
f0116256:	e8 8d 4d ff ff       	call   f010afe8 <set_program_priority>
f011625b:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f011625e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116261:	83 ec 08             	sub    $0x8,%esp
f0116264:	6a 03                	push   $0x3
f0116266:	50                   	push   %eax
f0116267:	e8 7c 4d ff ff       	call   f010afe8 <set_program_priority>
f011626c:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f011626f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116272:	83 ec 08             	sub    $0x8,%esp
f0116275:	6a 03                	push   $0x3
f0116277:	50                   	push   %eax
f0116278:	e8 6b 4d ff ff       	call   f010afe8 <set_program_priority>
f011627d:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116280:	e8 43 db fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116285:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116288:	74 14                	je     f011629e <test_priority_normal_and_higher+0x2ce>
f011628a:	83 ec 04             	sub    $0x4,%esp
f011628d:	68 38 aa 13 f0       	push   $0xf013aa38
f0116292:	6a 45                	push   $0x45
f0116294:	68 d1 a9 13 f0       	push   $0xf013a9d1
f0116299:	e8 67 9f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011629e:	e8 fa 68 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01162a3:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01162a6:	74 14                	je     f01162bc <test_priority_normal_and_higher+0x2ec>
f01162a8:	83 ec 04             	sub    $0x4,%esp
f01162ab:	68 38 aa 13 f0       	push   $0xf013aa38
f01162b0:	6a 46                	push   $0x46
f01162b2:	68 d1 a9 13 f0       	push   $0xf013a9d1
f01162b7:	e8 49 9f fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f01162bc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01162bf:	8b 40 74             	mov    0x74(%eax),%eax
f01162c2:	83 f8 14             	cmp    $0x14,%eax
f01162c5:	75 16                	jne    f01162dd <test_priority_normal_and_higher+0x30d>
f01162c7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01162ca:	8b 40 74             	mov    0x74(%eax),%eax
f01162cd:	83 f8 0f             	cmp    $0xf,%eax
f01162d0:	75 0b                	jne    f01162dd <test_priority_normal_and_higher+0x30d>
f01162d2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01162d5:	8b 40 74             	mov    0x74(%eax),%eax
f01162d8:	83 f8 0a             	cmp    $0xa,%eax
f01162db:	74 14                	je     f01162f1 <test_priority_normal_and_higher+0x321>
			panic("The programs' working set size should not change after setting priority to normal\n");
f01162dd:	83 ec 04             	sub    $0x4,%esp
f01162e0:	68 64 aa 13 f0       	push   $0xf013aa64
f01162e5:	6a 49                	push   $0x49
f01162e7:	68 d1 a9 13 f0       	push   $0xf013a9d1
f01162ec:	e8 14 9f fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f01162f1:	e8 a7 68 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01162f6:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01162f9:	e8 ca da fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01162fe:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f0116301:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116304:	83 ec 08             	sub    $0x8,%esp
f0116307:	6a 04                	push   $0x4
f0116309:	50                   	push   %eax
f011630a:	e8 d9 4c ff ff       	call   f010afe8 <set_program_priority>
f011630f:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f0116312:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116315:	83 ec 08             	sub    $0x8,%esp
f0116318:	6a 04                	push   $0x4
f011631a:	50                   	push   %eax
f011631b:	e8 c8 4c ff ff       	call   f010afe8 <set_program_priority>
f0116320:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0116323:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116326:	83 ec 08             	sub    $0x8,%esp
f0116329:	6a 04                	push   $0x4
f011632b:	50                   	push   %eax
f011632c:	e8 b7 4c ff ff       	call   f010afe8 <set_program_priority>
f0116331:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116334:	e8 8f da fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116339:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011633c:	74 14                	je     f0116352 <test_priority_normal_and_higher+0x382>
f011633e:	83 ec 04             	sub    $0x4,%esp
f0116341:	68 38 aa 13 f0       	push   $0xf013aa38
f0116346:	6a 53                	push   $0x53
f0116348:	68 d1 a9 13 f0       	push   $0xf013a9d1
f011634d:	e8 b3 9e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f0116352:	e8 46 68 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116357:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011635a:	74 14                	je     f0116370 <test_priority_normal_and_higher+0x3a0>
f011635c:	83 ec 04             	sub    $0x4,%esp
f011635f:	68 b8 aa 13 f0       	push   $0xf013aab8
f0116364:	6a 54                	push   $0x54
f0116366:	68 d1 a9 13 f0       	push   $0xf013a9d1
f011636b:	e8 95 9e fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116370:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116373:	8b 40 74             	mov    0x74(%eax),%eax
f0116376:	83 f8 14             	cmp    $0x14,%eax
f0116379:	75 16                	jne    f0116391 <test_priority_normal_and_higher+0x3c1>
f011637b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011637e:	8b 40 74             	mov    0x74(%eax),%eax
f0116381:	83 f8 0f             	cmp    $0xf,%eax
f0116384:	75 0b                	jne    f0116391 <test_priority_normal_and_higher+0x3c1>
f0116386:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116389:	8b 40 74             	mov    0x74(%eax),%eax
f011638c:	83 f8 14             	cmp    $0x14,%eax
f011638f:	74 14                	je     f01163a5 <test_priority_normal_and_higher+0x3d5>
			panic("The programs' working set size should be doubled only if it is full\n");
f0116391:	83 ec 04             	sub    $0x4,%esp
f0116394:	68 e8 aa 13 f0       	push   $0xf013aae8
f0116399:	6a 57                	push   $0x57
f011639b:	68 d1 a9 13 f0       	push   $0xf013a9d1
f01163a0:	e8 60 9e fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f01163a5:	e8 f3 67 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01163aa:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01163ad:	e8 16 da fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01163b2:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f01163b5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01163b8:	83 ec 08             	sub    $0x8,%esp
f01163bb:	6a 04                	push   $0x4
f01163bd:	50                   	push   %eax
f01163be:	e8 25 4c ff ff       	call   f010afe8 <set_program_priority>
f01163c3:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01163c6:	e8 fd d9 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01163cb:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01163ce:	74 14                	je     f01163e4 <test_priority_normal_and_higher+0x414>
f01163d0:	83 ec 04             	sub    $0x4,%esp
f01163d3:	68 38 aa 13 f0       	push   $0xf013aa38
f01163d8:	6a 5f                	push   $0x5f
f01163da:	68 d1 a9 13 f0       	push   $0xf013a9d1
f01163df:	e8 21 9e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01163e4:	e8 b4 67 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01163e9:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01163ec:	74 14                	je     f0116402 <test_priority_normal_and_higher+0x432>
f01163ee:	83 ec 04             	sub    $0x4,%esp
f01163f1:	68 38 aa 13 f0       	push   $0xf013aa38
f01163f6:	6a 60                	push   $0x60
f01163f8:	68 d1 a9 13 f0       	push   $0xf013a9d1
f01163fd:	e8 03 9e fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116402:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116405:	8b 40 74             	mov    0x74(%eax),%eax
f0116408:	83 f8 14             	cmp    $0x14,%eax
f011640b:	75 16                	jne    f0116423 <test_priority_normal_and_higher+0x453>
f011640d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116410:	8b 40 74             	mov    0x74(%eax),%eax
f0116413:	83 f8 0f             	cmp    $0xf,%eax
f0116416:	75 0b                	jne    f0116423 <test_priority_normal_and_higher+0x453>
f0116418:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011641b:	8b 40 74             	mov    0x74(%eax),%eax
f011641e:	83 f8 14             	cmp    $0x14,%eax
f0116421:	74 14                	je     f0116437 <test_priority_normal_and_higher+0x467>
			panic("The programs' working set size should be doubled only once\n");
f0116423:	83 ec 04             	sub    $0x4,%esp
f0116426:	68 30 ab 13 f0       	push   $0xf013ab30
f011642b:	6a 63                	push   $0x63
f011642d:	68 d1 a9 13 f0       	push   $0xf013a9d1
f0116432:	e8 ce 9d fe ff       	call   f0100205 <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0116437:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f011643e:	eb 1b                	jmp    f011645b <test_priority_normal_and_higher+0x48b>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0116440:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116443:	8b 48 78             	mov    0x78(%eax),%ecx
f0116446:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0116449:	89 d0                	mov    %edx,%eax
f011644b:	01 c0                	add    %eax,%eax
f011644d:	01 d0                	add    %edx,%eax
f011644f:	c1 e0 03             	shl    $0x3,%eax
f0116452:	01 c8                	add    %ecx,%eax
f0116454:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0116458:	ff 45 d8             	incl   -0x28(%ebp)
f011645b:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f011645f:	7e df                	jle    f0116440 <test_priority_normal_and_higher+0x470>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116461:	e8 37 67 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116466:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116469:	e8 5a d9 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011646e:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f0116471:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116474:	83 ec 08             	sub    $0x8,%esp
f0116477:	6a 04                	push   $0x4
f0116479:	50                   	push   %eax
f011647a:	e8 69 4b ff ff       	call   f010afe8 <set_program_priority>
f011647f:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116482:	e8 41 d9 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116487:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011648a:	74 14                	je     f01164a0 <test_priority_normal_and_higher+0x4d0>
f011648c:	83 ec 04             	sub    $0x4,%esp
f011648f:	68 38 aa 13 f0       	push   $0xf013aa38
f0116494:	6a 70                	push   $0x70
f0116496:	68 d1 a9 13 f0       	push   $0xf013a9d1
f011649b:	e8 65 9d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01164a0:	e8 f8 66 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01164a5:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01164a8:	74 14                	je     f01164be <test_priority_normal_and_higher+0x4ee>
f01164aa:	83 ec 04             	sub    $0x4,%esp
f01164ad:	68 38 aa 13 f0       	push   $0xf013aa38
f01164b2:	6a 71                	push   $0x71
f01164b4:	68 d1 a9 13 f0       	push   $0xf013a9d1
f01164b9:	e8 47 9d fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f01164be:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01164c1:	8b 40 74             	mov    0x74(%eax),%eax
f01164c4:	83 f8 14             	cmp    $0x14,%eax
f01164c7:	75 16                	jne    f01164df <test_priority_normal_and_higher+0x50f>
f01164c9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01164cc:	8b 40 74             	mov    0x74(%eax),%eax
f01164cf:	83 f8 0f             	cmp    $0xf,%eax
f01164d2:	75 0b                	jne    f01164df <test_priority_normal_and_higher+0x50f>
f01164d4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01164d7:	8b 40 74             	mov    0x74(%eax),%eax
f01164da:	83 f8 14             	cmp    $0x14,%eax
f01164dd:	74 14                	je     f01164f3 <test_priority_normal_and_higher+0x523>
			panic("The programs' working set size should be doubled only once\n");
f01164df:	83 ec 04             	sub    $0x4,%esp
f01164e2:	68 30 ab 13 f0       	push   $0xf013ab30
f01164e7:	6a 74                	push   $0x74
f01164e9:	68 d1 a9 13 f0       	push   $0xf013a9d1
f01164ee:	e8 12 9d fe ff       	call   f0100205 <_panic>

		for(int i = 10; i < 15; i++)
f01164f3:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f01164fa:	eb 1b                	jmp    f0116517 <test_priority_normal_and_higher+0x547>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f01164fc:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01164ff:	8b 48 78             	mov    0x78(%eax),%ecx
f0116502:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0116505:	89 d0                	mov    %edx,%eax
f0116507:	01 c0                	add    %eax,%eax
f0116509:	01 d0                	add    %edx,%eax
f011650b:	c1 e0 03             	shl    $0x3,%eax
f011650e:	01 c8                	add    %ecx,%eax
f0116510:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f0116514:	ff 45 d4             	incl   -0x2c(%ebp)
f0116517:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f011651b:	7e df                	jle    f01164fc <test_priority_normal_and_higher+0x52c>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f011651d:	e8 7b 66 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116522:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116525:	e8 9e d8 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011652a:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f011652d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116530:	83 ec 08             	sub    $0x8,%esp
f0116533:	6a 05                	push   $0x5
f0116535:	50                   	push   %eax
f0116536:	e8 ad 4a ff ff       	call   f010afe8 <set_program_priority>
f011653b:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f011653e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116541:	83 ec 08             	sub    $0x8,%esp
f0116544:	6a 05                	push   $0x5
f0116546:	50                   	push   %eax
f0116547:	e8 9c 4a ff ff       	call   f010afe8 <set_program_priority>
f011654c:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011654f:	e8 74 d8 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116554:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116557:	74 14                	je     f011656d <test_priority_normal_and_higher+0x59d>
f0116559:	83 ec 04             	sub    $0x4,%esp
f011655c:	68 38 aa 13 f0       	push   $0xf013aa38
f0116561:	6a 7f                	push   $0x7f
f0116563:	68 d1 a9 13 f0       	push   $0xf013a9d1
f0116568:	e8 98 9c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011656d:	e8 2b 66 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116572:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116575:	74 17                	je     f011658e <test_priority_normal_and_higher+0x5be>
f0116577:	83 ec 04             	sub    $0x4,%esp
f011657a:	68 38 aa 13 f0       	push   $0xf013aa38
f011657f:	68 80 00 00 00       	push   $0x80
f0116584:	68 d1 a9 13 f0       	push   $0xf013a9d1
f0116589:	e8 77 9c fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f011658e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116591:	8b 40 74             	mov    0x74(%eax),%eax
f0116594:	83 f8 14             	cmp    $0x14,%eax
f0116597:	75 16                	jne    f01165af <test_priority_normal_and_higher+0x5df>
f0116599:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011659c:	8b 40 74             	mov    0x74(%eax),%eax
f011659f:	83 f8 1e             	cmp    $0x1e,%eax
f01165a2:	75 0b                	jne    f01165af <test_priority_normal_and_higher+0x5df>
f01165a4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01165a7:	8b 40 74             	mov    0x74(%eax),%eax
f01165aa:	83 f8 28             	cmp    $0x28,%eax
f01165ad:	74 17                	je     f01165c6 <test_priority_normal_and_higher+0x5f6>
			panic("The programs' working set size should be doubled if full\n");
f01165af:	83 ec 04             	sub    $0x4,%esp
f01165b2:	68 6c ab 13 f0       	push   $0xf013ab6c
f01165b7:	68 83 00 00 00       	push   $0x83
f01165bc:	68 d1 a9 13 f0       	push   $0xf013a9d1
f01165c1:	e8 3f 9c fe ff       	call   f0100205 <_panic>

		for(int i = 20; i < 40; i++)
f01165c6:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f01165cd:	eb 1b                	jmp    f01165ea <test_priority_normal_and_higher+0x61a>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f01165cf:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01165d2:	8b 48 78             	mov    0x78(%eax),%ecx
f01165d5:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01165d8:	89 d0                	mov    %edx,%eax
f01165da:	01 c0                	add    %eax,%eax
f01165dc:	01 d0                	add    %edx,%eax
f01165de:	c1 e0 03             	shl    $0x3,%eax
f01165e1:	01 c8                	add    %ecx,%eax
f01165e3:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f01165e7:	ff 45 d0             	incl   -0x30(%ebp)
f01165ea:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f01165ee:	7e df                	jle    f01165cf <test_priority_normal_and_higher+0x5ff>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01165f0:	e8 a8 65 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01165f5:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01165f8:	e8 cb d7 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01165fd:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0116600:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116603:	83 ec 08             	sub    $0x8,%esp
f0116606:	6a 05                	push   $0x5
f0116608:	50                   	push   %eax
f0116609:	e8 da 49 ff ff       	call   f010afe8 <set_program_priority>
f011660e:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0116611:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116614:	83 ec 08             	sub    $0x8,%esp
f0116617:	6a 04                	push   $0x4
f0116619:	50                   	push   %eax
f011661a:	e8 c9 49 ff ff       	call   f010afe8 <set_program_priority>
f011661f:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116622:	e8 a1 d7 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116627:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011662a:	74 17                	je     f0116643 <test_priority_normal_and_higher+0x673>
f011662c:	83 ec 04             	sub    $0x4,%esp
f011662f:	68 38 aa 13 f0       	push   $0xf013aa38
f0116634:	68 8e 00 00 00       	push   $0x8e
f0116639:	68 d1 a9 13 f0       	push   $0xf013a9d1
f011663e:	e8 c2 9b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116643:	e8 55 65 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116648:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011664b:	74 17                	je     f0116664 <test_priority_normal_and_higher+0x694>
f011664d:	83 ec 04             	sub    $0x4,%esp
f0116650:	68 38 aa 13 f0       	push   $0xf013aa38
f0116655:	68 8f 00 00 00       	push   $0x8f
f011665a:	68 d1 a9 13 f0       	push   $0xf013a9d1
f011665f:	e8 a1 9b fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0116664:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116667:	8b 40 74             	mov    0x74(%eax),%eax
f011666a:	83 f8 14             	cmp    $0x14,%eax
f011666d:	75 16                	jne    f0116685 <test_priority_normal_and_higher+0x6b5>
f011666f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116672:	8b 40 74             	mov    0x74(%eax),%eax
f0116675:	83 f8 1e             	cmp    $0x1e,%eax
f0116678:	75 0b                	jne    f0116685 <test_priority_normal_and_higher+0x6b5>
f011667a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011667d:	8b 40 74             	mov    0x74(%eax),%eax
f0116680:	83 f8 28             	cmp    $0x28,%eax
f0116683:	74 17                	je     f011669c <test_priority_normal_and_higher+0x6cc>
			panic("The programs' working set size should be doubled if full\n");
f0116685:	83 ec 04             	sub    $0x4,%esp
f0116688:	68 6c ab 13 f0       	push   $0xf013ab6c
f011668d:	68 92 00 00 00       	push   $0x92
f0116692:	68 d1 a9 13 f0       	push   $0xf013a9d1
f0116697:	e8 69 9b fe ff       	call   f0100205 <_panic>

		for(int i = 15; i < 30; i++)
f011669c:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f01166a3:	eb 1b                	jmp    f01166c0 <test_priority_normal_and_higher+0x6f0>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f01166a5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01166a8:	8b 48 78             	mov    0x78(%eax),%ecx
f01166ab:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01166ae:	89 d0                	mov    %edx,%eax
f01166b0:	01 c0                	add    %eax,%eax
f01166b2:	01 d0                	add    %edx,%eax
f01166b4:	c1 e0 03             	shl    $0x3,%eax
f01166b7:	01 c8                	add    %ecx,%eax
f01166b9:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f01166bd:	ff 45 cc             	incl   -0x34(%ebp)
f01166c0:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f01166c4:	7e df                	jle    f01166a5 <test_priority_normal_and_higher+0x6d5>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01166c6:	e8 d2 64 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01166cb:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01166ce:	e8 f5 d6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01166d3:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f01166d6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01166d9:	83 ec 08             	sub    $0x8,%esp
f01166dc:	6a 05                	push   $0x5
f01166de:	50                   	push   %eax
f01166df:	e8 04 49 ff ff       	call   f010afe8 <set_program_priority>
f01166e4:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f01166e7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01166ea:	83 ec 08             	sub    $0x8,%esp
f01166ed:	6a 04                	push   $0x4
f01166ef:	50                   	push   %eax
f01166f0:	e8 f3 48 ff ff       	call   f010afe8 <set_program_priority>
f01166f5:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01166f8:	e8 cb d6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01166fd:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116700:	74 17                	je     f0116719 <test_priority_normal_and_higher+0x749>
f0116702:	83 ec 04             	sub    $0x4,%esp
f0116705:	68 38 aa 13 f0       	push   $0xf013aa38
f011670a:	68 9d 00 00 00       	push   $0x9d
f011670f:	68 d1 a9 13 f0       	push   $0xf013a9d1
f0116714:	e8 ec 9a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116719:	e8 7f 64 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011671e:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116721:	74 17                	je     f011673a <test_priority_normal_and_higher+0x76a>
f0116723:	83 ec 04             	sub    $0x4,%esp
f0116726:	68 38 aa 13 f0       	push   $0xf013aa38
f011672b:	68 9e 00 00 00       	push   $0x9e
f0116730:	68 d1 a9 13 f0       	push   $0xf013a9d1
f0116735:	e8 cb 9a fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f011673a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011673d:	8b 40 74             	mov    0x74(%eax),%eax
f0116740:	83 f8 14             	cmp    $0x14,%eax
f0116743:	75 16                	jne    f011675b <test_priority_normal_and_higher+0x78b>
f0116745:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116748:	8b 40 74             	mov    0x74(%eax),%eax
f011674b:	83 f8 3c             	cmp    $0x3c,%eax
f011674e:	75 0b                	jne    f011675b <test_priority_normal_and_higher+0x78b>
f0116750:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116753:	8b 40 74             	mov    0x74(%eax),%eax
f0116756:	83 f8 28             	cmp    $0x28,%eax
f0116759:	74 17                	je     f0116772 <test_priority_normal_and_higher+0x7a2>
			panic("The programs' working set size should be doubled if full\n");
f011675b:	83 ec 04             	sub    $0x4,%esp
f011675e:	68 6c ab 13 f0       	push   $0xf013ab6c
f0116763:	68 a1 00 00 00       	push   $0xa1
f0116768:	68 d1 a9 13 f0       	push   $0xf013a9d1
f011676d:	e8 93 9a fe ff       	call   f0100205 <_panic>

		for(int i = 15; i < 60; i++)
f0116772:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f0116779:	eb 1b                	jmp    f0116796 <test_priority_normal_and_higher+0x7c6>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f011677b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011677e:	8b 48 78             	mov    0x78(%eax),%ecx
f0116781:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0116784:	89 d0                	mov    %edx,%eax
f0116786:	01 c0                	add    %eax,%eax
f0116788:	01 d0                	add    %edx,%eax
f011678a:	c1 e0 03             	shl    $0x3,%eax
f011678d:	01 c8                	add    %ecx,%eax
f011678f:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f0116793:	ff 45 c8             	incl   -0x38(%ebp)
f0116796:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f011679a:	7e df                	jle    f011677b <test_priority_normal_and_higher+0x7ab>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f011679c:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f01167a3:	eb 1b                	jmp    f01167c0 <test_priority_normal_and_higher+0x7f0>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f01167a5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01167a8:	8b 48 78             	mov    0x78(%eax),%ecx
f01167ab:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01167ae:	89 d0                	mov    %edx,%eax
f01167b0:	01 c0                	add    %eax,%eax
f01167b2:	01 d0                	add    %edx,%eax
f01167b4:	c1 e0 03             	shl    $0x3,%eax
f01167b7:	01 c8                	add    %ecx,%eax
f01167b9:	c6 40 04 01          	movb   $0x1,0x4(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f01167bd:	ff 45 c4             	incl   -0x3c(%ebp)
f01167c0:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f01167c4:	7e df                	jle    f01167a5 <test_priority_normal_and_higher+0x7d5>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f01167c6:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f01167cd:	eb 7a                	jmp    f0116849 <test_priority_normal_and_higher+0x879>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f01167cf:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01167d2:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f01167d9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01167dc:	8b 58 78             	mov    0x78(%eax),%ebx
f01167df:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01167e2:	89 d0                	mov    %edx,%eax
f01167e4:	01 c0                	add    %eax,%eax
f01167e6:	01 d0                	add    %edx,%eax
f01167e8:	c1 e0 03             	shl    $0x3,%eax
f01167eb:	01 d8                	add    %ebx,%eax
f01167ed:	8b 00                	mov    (%eax),%eax
f01167ef:	39 c1                	cmp    %eax,%ecx
f01167f1:	74 17                	je     f011680a <test_priority_normal_and_higher+0x83a>
				panic("Working set should be moved properly to the new one");
f01167f3:	83 ec 04             	sub    $0x4,%esp
f01167f6:	68 a8 ab 13 f0       	push   $0xf013aba8
f01167fb:	68 af 00 00 00       	push   $0xaf
f0116800:	68 d1 a9 13 f0       	push   $0xf013a9d1
f0116805:	e8 fb 99 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f011680a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011680d:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f0116814:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116817:	8b 58 78             	mov    0x78(%eax),%ebx
f011681a:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011681d:	89 d0                	mov    %edx,%eax
f011681f:	01 c0                	add    %eax,%eax
f0116821:	01 d0                	add    %edx,%eax
f0116823:	c1 e0 03             	shl    $0x3,%eax
f0116826:	01 d8                	add    %ebx,%eax
f0116828:	8b 40 08             	mov    0x8(%eax),%eax
f011682b:	39 c1                	cmp    %eax,%ecx
f011682d:	74 17                	je     f0116846 <test_priority_normal_and_higher+0x876>
				panic("Working set should be moved properly to the new one");
f011682f:	83 ec 04             	sub    $0x4,%esp
f0116832:	68 a8 ab 13 f0       	push   $0xf013aba8
f0116837:	68 b2 00 00 00       	push   $0xb2
f011683c:	68 d1 a9 13 f0       	push   $0xf013a9d1
f0116841:	e8 bf 99 fe ff       	call   f0100205 <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0116846:	ff 45 c0             	incl   -0x40(%ebp)
f0116849:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f011684d:	7e 80                	jle    f01167cf <test_priority_normal_and_higher+0x7ff>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f011684f:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0116856:	eb 7a                	jmp    f01168d2 <test_priority_normal_and_higher+0x902>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0116858:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011685b:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f0116862:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116865:	8b 58 78             	mov    0x78(%eax),%ebx
f0116868:	8b 55 bc             	mov    -0x44(%ebp),%edx
f011686b:	89 d0                	mov    %edx,%eax
f011686d:	01 c0                	add    %eax,%eax
f011686f:	01 d0                	add    %edx,%eax
f0116871:	c1 e0 03             	shl    $0x3,%eax
f0116874:	01 d8                	add    %ebx,%eax
f0116876:	8b 00                	mov    (%eax),%eax
f0116878:	39 c1                	cmp    %eax,%ecx
f011687a:	74 17                	je     f0116893 <test_priority_normal_and_higher+0x8c3>
				panic("Working set should be moved properly to the new one");
f011687c:	83 ec 04             	sub    $0x4,%esp
f011687f:	68 a8 ab 13 f0       	push   $0xf013aba8
f0116884:	68 b8 00 00 00       	push   $0xb8
f0116889:	68 d1 a9 13 f0       	push   $0xf013a9d1
f011688e:	e8 72 99 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0116893:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0116896:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f011689d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01168a0:	8b 58 78             	mov    0x78(%eax),%ebx
f01168a3:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01168a6:	89 d0                	mov    %edx,%eax
f01168a8:	01 c0                	add    %eax,%eax
f01168aa:	01 d0                	add    %edx,%eax
f01168ac:	c1 e0 03             	shl    $0x3,%eax
f01168af:	01 d8                	add    %ebx,%eax
f01168b1:	8b 40 08             	mov    0x8(%eax),%eax
f01168b4:	39 c1                	cmp    %eax,%ecx
f01168b6:	74 17                	je     f01168cf <test_priority_normal_and_higher+0x8ff>
				panic("Working set should be moved properly to the new one");
f01168b8:	83 ec 04             	sub    $0x4,%esp
f01168bb:	68 a8 ab 13 f0       	push   $0xf013aba8
f01168c0:	68 bb 00 00 00       	push   $0xbb
f01168c5:	68 d1 a9 13 f0       	push   $0xf013a9d1
f01168ca:	e8 36 99 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f01168cf:	ff 45 bc             	incl   -0x44(%ebp)
f01168d2:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f01168d6:	7e 80                	jle    f0116858 <test_priority_normal_and_higher+0x888>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f01168d8:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f01168df:	eb 7a                	jmp    f011695b <test_priority_normal_and_higher+0x98b>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f01168e1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01168e4:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f01168eb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01168ee:	8b 58 78             	mov    0x78(%eax),%ebx
f01168f1:	8b 55 b8             	mov    -0x48(%ebp),%edx
f01168f4:	89 d0                	mov    %edx,%eax
f01168f6:	01 c0                	add    %eax,%eax
f01168f8:	01 d0                	add    %edx,%eax
f01168fa:	c1 e0 03             	shl    $0x3,%eax
f01168fd:	01 d8                	add    %ebx,%eax
f01168ff:	8b 00                	mov    (%eax),%eax
f0116901:	39 c1                	cmp    %eax,%ecx
f0116903:	74 17                	je     f011691c <test_priority_normal_and_higher+0x94c>
				panic("Working set should be moved properly to the new one");
f0116905:	83 ec 04             	sub    $0x4,%esp
f0116908:	68 a8 ab 13 f0       	push   $0xf013aba8
f011690d:	68 c1 00 00 00       	push   $0xc1
f0116912:	68 d1 a9 13 f0       	push   $0xf013a9d1
f0116917:	e8 e9 98 fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f011691c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011691f:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f0116926:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116929:	8b 58 78             	mov    0x78(%eax),%ebx
f011692c:	8b 55 b8             	mov    -0x48(%ebp),%edx
f011692f:	89 d0                	mov    %edx,%eax
f0116931:	01 c0                	add    %eax,%eax
f0116933:	01 d0                	add    %edx,%eax
f0116935:	c1 e0 03             	shl    $0x3,%eax
f0116938:	01 d8                	add    %ebx,%eax
f011693a:	8b 40 08             	mov    0x8(%eax),%eax
f011693d:	39 c1                	cmp    %eax,%ecx
f011693f:	74 17                	je     f0116958 <test_priority_normal_and_higher+0x988>
				panic("Working set should be moved properly to the new one");
f0116941:	83 ec 04             	sub    $0x4,%esp
f0116944:	68 a8 ab 13 f0       	push   $0xf013aba8
f0116949:	68 c4 00 00 00       	push   $0xc4
f011694e:	68 d1 a9 13 f0       	push   $0xf013a9d1
f0116953:	e8 ad 98 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116958:	ff 45 b8             	incl   -0x48(%ebp)
f011695b:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f011695f:	7e 80                	jle    f01168e1 <test_priority_normal_and_higher+0x911>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f0116961:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f0116968:	75 6e 61 
f011696b:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f0116972:	6c 00 00 
f0116975:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f011697b:	b9 17 00 00 00       	mov    $0x17,%ecx
f0116980:	b8 00 00 00 00       	mov    $0x0,%eax
f0116985:	89 d7                	mov    %edx,%edi
f0116987:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0116989:	83 ec 0c             	sub    $0xc,%esp
f011698c:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f0116992:	50                   	push   %eax
f0116993:	e8 d8 a3 fe ff       	call   f0100d70 <execute_command>
f0116998:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
}
f011699b:	eb 10                	jmp    f01169ad <test_priority_normal_and_higher+0x9dd>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f011699d:	83 ec 0c             	sub    $0xc,%esp
f01169a0:	68 dc ab 13 f0       	push   $0xf013abdc
f01169a5:	e8 64 a3 fe ff       	call   f0100d0e <cprintf>
f01169aa:	83 c4 10             	add    $0x10,%esp
	}
}
f01169ad:	90                   	nop
f01169ae:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01169b1:	5b                   	pop    %ebx
f01169b2:	5e                   	pop    %esi
f01169b3:	5f                   	pop    %edi
f01169b4:	5d                   	pop    %ebp
f01169b5:	c3                   	ret    

f01169b6 <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f01169b6:	55                   	push   %ebp
f01169b7:	89 e5                	mov    %esp,%ebp
f01169b9:	57                   	push   %edi
f01169ba:	56                   	push   %esi
f01169bb:	53                   	push   %ebx
f01169bc:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
	if(firstTime)
f01169c2:	a0 22 2d 19 f0       	mov    0xf0192d22,%al
f01169c7:	84 c0                	test   %al,%al
f01169c9:	0f 84 be 09 00 00    	je     f011738d <test_priority_normal_and_lower+0x9d7>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f01169cf:	c6 05 22 2d 19 f0 00 	movb   $0x0,0xf0192d22
		char command[100] = "load fos_add 20";
f01169d6:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f01169dc:	bb 18 ac 13 f0       	mov    $0xf013ac18,%ebx
f01169e1:	ba 04 00 00 00       	mov    $0x4,%edx
f01169e6:	89 c7                	mov    %eax,%edi
f01169e8:	89 de                	mov    %ebx,%esi
f01169ea:	89 d1                	mov    %edx,%ecx
f01169ec:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01169ee:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f01169f4:	b9 15 00 00 00       	mov    $0x15,%ecx
f01169f9:	b8 00 00 00 00       	mov    $0x0,%eax
f01169fe:	89 d7                	mov    %edx,%edi
f0116a00:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0116a02:	83 ec 0c             	sub    $0xc,%esp
f0116a05:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0116a0b:	50                   	push   %eax
f0116a0c:	e8 5f a3 fe ff       	call   f0100d70 <execute_command>
f0116a11:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f0116a14:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0116a1a:	bb d4 ae 13 f0       	mov    $0xf013aed4,%ebx
f0116a1f:	ba 0d 00 00 00       	mov    $0xd,%edx
f0116a24:	89 c7                	mov    %eax,%edi
f0116a26:	89 de                	mov    %ebx,%esi
f0116a28:	89 d1                	mov    %edx,%ecx
f0116a2a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116a2c:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f0116a32:	b9 57 00 00 00       	mov    $0x57,%ecx
f0116a37:	b0 00                	mov    $0x0,%al
f0116a39:	89 d7                	mov    %edx,%edi
f0116a3b:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0116a3d:	83 ec 0c             	sub    $0xc,%esp
f0116a40:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0116a46:	50                   	push   %eax
f0116a47:	e8 24 a3 fe ff       	call   f0100d70 <execute_command>
f0116a4c:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f0116a4f:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0116a55:	bb 38 af 13 f0       	mov    $0xf013af38,%ebx
f0116a5a:	ba 17 00 00 00       	mov    $0x17,%edx
f0116a5f:	89 c7                	mov    %eax,%edi
f0116a61:	89 de                	mov    %ebx,%esi
f0116a63:	89 d1                	mov    %edx,%ecx
f0116a65:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116a67:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f0116a6d:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0116a72:	b0 00                	mov    $0x0,%al
f0116a74:	89 d7                	mov    %edx,%edi
f0116a76:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0116a78:	83 ec 0c             	sub    $0xc,%esp
f0116a7b:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0116a81:	50                   	push   %eax
f0116a82:	e8 e9 a2 fe ff       	call   f0100d70 <execute_command>
f0116a87:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0116a8a:	83 ec 04             	sub    $0x4,%esp
f0116a8d:	6a 00                	push   $0x0
f0116a8f:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0116a92:	50                   	push   %eax
f0116a93:	68 00 10 00 00       	push   $0x1000
f0116a98:	e8 6d 30 ff ff       	call   f0109b0a <envid2env>
f0116a9d:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0116aa0:	83 ec 04             	sub    $0x4,%esp
f0116aa3:	6a 00                	push   $0x0
f0116aa5:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0116aa8:	50                   	push   %eax
f0116aa9:	68 01 10 00 00       	push   $0x1001
f0116aae:	e8 57 30 ff ff       	call   f0109b0a <envid2env>
f0116ab3:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f0116ab6:	83 ec 04             	sub    $0x4,%esp
f0116ab9:	6a 00                	push   $0x0
f0116abb:	8d 45 b0             	lea    -0x50(%ebp),%eax
f0116abe:	50                   	push   %eax
f0116abf:	68 02 10 00 00       	push   $0x1002
f0116ac4:	e8 41 30 ff ff       	call   f0109b0a <envid2env>
f0116ac9:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0116acc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116acf:	85 c0                	test   %eax,%eax
f0116ad1:	74 0e                	je     f0116ae1 <test_priority_normal_and_lower+0x12b>
f0116ad3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116ad6:	85 c0                	test   %eax,%eax
f0116ad8:	74 07                	je     f0116ae1 <test_priority_normal_and_lower+0x12b>
f0116ada:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116add:	85 c0                	test   %eax,%eax
f0116adf:	75 17                	jne    f0116af8 <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f0116ae1:	83 ec 04             	sub    $0x4,%esp
f0116ae4:	68 b8 a9 13 f0       	push   $0xf013a9b8
f0116ae9:	68 eb 00 00 00       	push   $0xeb
f0116aee:	68 d1 a9 13 f0       	push   $0xf013a9d1
f0116af3:	e8 0d 97 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0116af8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116afb:	8b 40 74             	mov    0x74(%eax),%eax
f0116afe:	83 f8 14             	cmp    $0x14,%eax
f0116b01:	75 16                	jne    f0116b19 <test_priority_normal_and_lower+0x163>
f0116b03:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116b06:	8b 40 74             	mov    0x74(%eax),%eax
f0116b09:	83 f8 1e             	cmp    $0x1e,%eax
f0116b0c:	75 0b                	jne    f0116b19 <test_priority_normal_and_lower+0x163>
f0116b0e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116b11:	8b 40 74             	mov    0x74(%eax),%eax
f0116b14:	83 f8 28             	cmp    $0x28,%eax
f0116b17:	74 17                	je     f0116b30 <test_priority_normal_and_lower+0x17a>
			panic("The programs should be initially loaded with the given working set size\n");
f0116b19:	83 ec 04             	sub    $0x4,%esp
f0116b1c:	68 ec a9 13 f0       	push   $0xf013a9ec
f0116b21:	68 ee 00 00 00       	push   $0xee
f0116b26:	68 d1 a9 13 f0       	push   $0xf013a9d1
f0116b2b:	e8 d5 96 fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 20; i++)
f0116b30:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0116b37:	eb 44                	jmp    f0116b7d <test_priority_normal_and_lower+0x1c7>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0116b39:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116b3c:	8b 48 78             	mov    0x78(%eax),%ecx
f0116b3f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0116b42:	89 d0                	mov    %edx,%eax
f0116b44:	01 c0                	add    %eax,%eax
f0116b46:	01 d0                	add    %edx,%eax
f0116b48:	c1 e0 03             	shl    $0x3,%eax
f0116b4b:	01 c8                	add    %ecx,%eax
f0116b4d:	8b 10                	mov    (%eax),%edx
f0116b4f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116b52:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0116b59:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116b5c:	8b 48 78             	mov    0x78(%eax),%ecx
f0116b5f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0116b62:	89 d0                	mov    %edx,%eax
f0116b64:	01 c0                	add    %eax,%eax
f0116b66:	01 d0                	add    %edx,%eax
f0116b68:	c1 e0 03             	shl    $0x3,%eax
f0116b6b:	01 c8                	add    %ecx,%eax
f0116b6d:	8b 50 08             	mov    0x8(%eax),%edx
f0116b70:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116b73:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0116b7a:	ff 45 e4             	incl   -0x1c(%ebp)
f0116b7d:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0116b81:	7e b6                	jle    f0116b39 <test_priority_normal_and_lower+0x183>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0116b83:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0116b8a:	eb 44                	jmp    f0116bd0 <test_priority_normal_and_lower+0x21a>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0116b8c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116b8f:	8b 48 78             	mov    0x78(%eax),%ecx
f0116b92:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0116b95:	89 d0                	mov    %edx,%eax
f0116b97:	01 c0                	add    %eax,%eax
f0116b99:	01 d0                	add    %edx,%eax
f0116b9b:	c1 e0 03             	shl    $0x3,%eax
f0116b9e:	01 c8                	add    %ecx,%eax
f0116ba0:	8b 10                	mov    (%eax),%edx
f0116ba2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116ba5:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0116bac:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116baf:	8b 48 78             	mov    0x78(%eax),%ecx
f0116bb2:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0116bb5:	89 d0                	mov    %edx,%eax
f0116bb7:	01 c0                	add    %eax,%eax
f0116bb9:	01 d0                	add    %edx,%eax
f0116bbb:	c1 e0 03             	shl    $0x3,%eax
f0116bbe:	01 c8                	add    %ecx,%eax
f0116bc0:	8b 50 08             	mov    0x8(%eax),%edx
f0116bc3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116bc6:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0116bcd:	ff 45 e0             	incl   -0x20(%ebp)
f0116bd0:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f0116bd4:	7e b6                	jle    f0116b8c <test_priority_normal_and_lower+0x1d6>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0116bd6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0116bdd:	eb 44                	jmp    f0116c23 <test_priority_normal_and_lower+0x26d>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0116bdf:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116be2:	8b 48 78             	mov    0x78(%eax),%ecx
f0116be5:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0116be8:	89 d0                	mov    %edx,%eax
f0116bea:	01 c0                	add    %eax,%eax
f0116bec:	01 d0                	add    %edx,%eax
f0116bee:	c1 e0 03             	shl    $0x3,%eax
f0116bf1:	01 c8                	add    %ecx,%eax
f0116bf3:	8b 10                	mov    (%eax),%edx
f0116bf5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116bf8:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0116bff:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116c02:	8b 48 78             	mov    0x78(%eax),%ecx
f0116c05:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0116c08:	89 d0                	mov    %edx,%eax
f0116c0a:	01 c0                	add    %eax,%eax
f0116c0c:	01 d0                	add    %edx,%eax
f0116c0e:	c1 e0 03             	shl    $0x3,%eax
f0116c11:	01 c8                	add    %ecx,%eax
f0116c13:	8b 50 08             	mov    0x8(%eax),%edx
f0116c16:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116c19:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0116c20:	ff 45 dc             	incl   -0x24(%ebp)
f0116c23:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f0116c27:	7e b6                	jle    f0116bdf <test_priority_normal_and_lower+0x229>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0116c29:	e8 6f 5f ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116c2e:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0116c31:	e8 92 d1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116c36:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0116c39:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116c3c:	83 ec 08             	sub    $0x8,%esp
f0116c3f:	6a 03                	push   $0x3
f0116c41:	50                   	push   %eax
f0116c42:	e8 a1 43 ff ff       	call   f010afe8 <set_program_priority>
f0116c47:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0116c4a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116c4d:	83 ec 08             	sub    $0x8,%esp
f0116c50:	6a 03                	push   $0x3
f0116c52:	50                   	push   %eax
f0116c53:	e8 90 43 ff ff       	call   f010afe8 <set_program_priority>
f0116c58:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0116c5b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116c5e:	83 ec 08             	sub    $0x8,%esp
f0116c61:	6a 03                	push   $0x3
f0116c63:	50                   	push   %eax
f0116c64:	e8 7f 43 ff ff       	call   f010afe8 <set_program_priority>
f0116c69:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116c6c:	e8 57 d1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116c71:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116c74:	74 17                	je     f0116c8d <test_priority_normal_and_lower+0x2d7>
f0116c76:	83 ec 04             	sub    $0x4,%esp
f0116c79:	68 38 aa 13 f0       	push   $0xf013aa38
f0116c7e:	68 0a 01 00 00       	push   $0x10a
f0116c83:	68 d1 a9 13 f0       	push   $0xf013a9d1
f0116c88:	e8 78 95 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116c8d:	e8 0b 5f ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116c92:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0116c95:	74 17                	je     f0116cae <test_priority_normal_and_lower+0x2f8>
f0116c97:	83 ec 04             	sub    $0x4,%esp
f0116c9a:	68 38 aa 13 f0       	push   $0xf013aa38
f0116c9f:	68 0b 01 00 00       	push   $0x10b
f0116ca4:	68 d1 a9 13 f0       	push   $0xf013a9d1
f0116ca9:	e8 57 95 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0116cae:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116cb1:	8b 40 74             	mov    0x74(%eax),%eax
f0116cb4:	83 f8 14             	cmp    $0x14,%eax
f0116cb7:	75 16                	jne    f0116ccf <test_priority_normal_and_lower+0x319>
f0116cb9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116cbc:	8b 40 74             	mov    0x74(%eax),%eax
f0116cbf:	83 f8 1e             	cmp    $0x1e,%eax
f0116cc2:	75 0b                	jne    f0116ccf <test_priority_normal_and_lower+0x319>
f0116cc4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116cc7:	8b 40 74             	mov    0x74(%eax),%eax
f0116cca:	83 f8 28             	cmp    $0x28,%eax
f0116ccd:	74 17                	je     f0116ce6 <test_priority_normal_and_lower+0x330>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0116ccf:	83 ec 04             	sub    $0x4,%esp
f0116cd2:	68 64 aa 13 f0       	push   $0xf013aa64
f0116cd7:	68 0e 01 00 00       	push   $0x10e
f0116cdc:	68 d1 a9 13 f0       	push   $0xf013a9d1
f0116ce1:	e8 1f 95 fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f0116ce6:	e8 b2 5e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116ceb:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116cee:	e8 d5 d0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116cf3:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0116cf6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116cf9:	83 ec 08             	sub    $0x8,%esp
f0116cfc:	6a 02                	push   $0x2
f0116cfe:	50                   	push   %eax
f0116cff:	e8 e4 42 ff ff       	call   f010afe8 <set_program_priority>
f0116d04:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f0116d07:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116d0a:	83 ec 08             	sub    $0x8,%esp
f0116d0d:	6a 02                	push   $0x2
f0116d0f:	50                   	push   %eax
f0116d10:	e8 d3 42 ff ff       	call   f010afe8 <set_program_priority>
f0116d15:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0116d18:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116d1b:	83 ec 08             	sub    $0x8,%esp
f0116d1e:	6a 02                	push   $0x2
f0116d20:	50                   	push   %eax
f0116d21:	e8 c2 42 ff ff       	call   f010afe8 <set_program_priority>
f0116d26:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116d29:	e8 9a d0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116d2e:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116d31:	74 17                	je     f0116d4a <test_priority_normal_and_lower+0x394>
f0116d33:	83 ec 04             	sub    $0x4,%esp
f0116d36:	68 38 aa 13 f0       	push   $0xf013aa38
f0116d3b:	68 18 01 00 00       	push   $0x118
f0116d40:	68 d1 a9 13 f0       	push   $0xf013a9d1
f0116d45:	e8 bb 94 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0116d4a:	e8 4e 5e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116d4f:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0116d52:	74 21                	je     f0116d75 <test_priority_normal_and_lower+0x3bf>
f0116d54:	e8 44 5e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116d59:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116d5c:	29 c2                	sub    %eax,%edx
f0116d5e:	89 d0                	mov    %edx,%eax
f0116d60:	50                   	push   %eax
f0116d61:	68 b8 aa 13 f0       	push   $0xf013aab8
f0116d66:	68 19 01 00 00       	push   $0x119
f0116d6b:	68 d1 a9 13 f0       	push   $0xf013a9d1
f0116d70:	e8 90 94 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116d75:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116d78:	8b 40 74             	mov    0x74(%eax),%eax
f0116d7b:	83 f8 0a             	cmp    $0xa,%eax
f0116d7e:	75 16                	jne    f0116d96 <test_priority_normal_and_lower+0x3e0>
f0116d80:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116d83:	8b 40 74             	mov    0x74(%eax),%eax
f0116d86:	83 f8 0f             	cmp    $0xf,%eax
f0116d89:	75 0b                	jne    f0116d96 <test_priority_normal_and_lower+0x3e0>
f0116d8b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116d8e:	8b 40 74             	mov    0x74(%eax),%eax
f0116d91:	83 f8 14             	cmp    $0x14,%eax
f0116d94:	74 17                	je     f0116dad <test_priority_normal_and_lower+0x3f7>
			panic("The programs' working set size should be doubled only if it is full\n");
f0116d96:	83 ec 04             	sub    $0x4,%esp
f0116d99:	68 e8 aa 13 f0       	push   $0xf013aae8
f0116d9e:	68 1c 01 00 00       	push   $0x11c
f0116da3:	68 d1 a9 13 f0       	push   $0xf013a9d1
f0116da8:	e8 58 94 fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f0116dad:	e8 eb 5d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116db2:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116db5:	e8 0e d0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116dba:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0116dbd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116dc0:	83 ec 08             	sub    $0x8,%esp
f0116dc3:	6a 02                	push   $0x2
f0116dc5:	50                   	push   %eax
f0116dc6:	e8 1d 42 ff ff       	call   f010afe8 <set_program_priority>
f0116dcb:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f0116dce:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116dd1:	83 ec 08             	sub    $0x8,%esp
f0116dd4:	6a 02                	push   $0x2
f0116dd6:	50                   	push   %eax
f0116dd7:	e8 0c 42 ff ff       	call   f010afe8 <set_program_priority>
f0116ddc:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0116ddf:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116de2:	83 ec 08             	sub    $0x8,%esp
f0116de5:	6a 02                	push   $0x2
f0116de7:	50                   	push   %eax
f0116de8:	e8 fb 41 ff ff       	call   f010afe8 <set_program_priority>
f0116ded:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116df0:	e8 d3 cf fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116df5:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116df8:	74 17                	je     f0116e11 <test_priority_normal_and_lower+0x45b>
f0116dfa:	83 ec 04             	sub    $0x4,%esp
f0116dfd:	68 38 aa 13 f0       	push   $0xf013aa38
f0116e02:	68 26 01 00 00       	push   $0x126
f0116e07:	68 d1 a9 13 f0       	push   $0xf013a9d1
f0116e0c:	e8 f4 93 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0116e11:	e8 87 5d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116e16:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0116e19:	74 21                	je     f0116e3c <test_priority_normal_and_lower+0x486>
f0116e1b:	e8 7d 5d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0116e20:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116e23:	29 c2                	sub    %eax,%edx
f0116e25:	89 d0                	mov    %edx,%eax
f0116e27:	50                   	push   %eax
f0116e28:	68 b8 aa 13 f0       	push   $0xf013aab8
f0116e2d:	68 27 01 00 00       	push   $0x127
f0116e32:	68 d1 a9 13 f0       	push   $0xf013a9d1
f0116e37:	e8 c9 93 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0116e3c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116e3f:	8b 40 74             	mov    0x74(%eax),%eax
f0116e42:	83 f8 0a             	cmp    $0xa,%eax
f0116e45:	75 16                	jne    f0116e5d <test_priority_normal_and_lower+0x4a7>
f0116e47:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116e4a:	8b 40 74             	mov    0x74(%eax),%eax
f0116e4d:	83 f8 0f             	cmp    $0xf,%eax
f0116e50:	75 0b                	jne    f0116e5d <test_priority_normal_and_lower+0x4a7>
f0116e52:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116e55:	8b 40 74             	mov    0x74(%eax),%eax
f0116e58:	83 f8 0a             	cmp    $0xa,%eax
f0116e5b:	74 17                	je     f0116e74 <test_priority_normal_and_lower+0x4be>
			panic("The programs' working set size should be doubled only if it is full\n");
f0116e5d:	83 ec 04             	sub    $0x4,%esp
f0116e60:	68 e8 aa 13 f0       	push   $0xf013aae8
f0116e65:	68 2a 01 00 00       	push   $0x12a
f0116e6a:	68 d1 a9 13 f0       	push   $0xf013a9d1
f0116e6f:	e8 91 93 fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 10; i++)
f0116e74:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0116e7b:	eb 7a                	jmp    f0116ef7 <test_priority_normal_and_lower+0x541>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0116e7d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116e80:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0116e87:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116e8a:	8b 58 78             	mov    0x78(%eax),%ebx
f0116e8d:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0116e90:	89 d0                	mov    %edx,%eax
f0116e92:	01 c0                	add    %eax,%eax
f0116e94:	01 d0                	add    %edx,%eax
f0116e96:	c1 e0 03             	shl    $0x3,%eax
f0116e99:	01 d8                	add    %ebx,%eax
f0116e9b:	8b 00                	mov    (%eax),%eax
f0116e9d:	39 c1                	cmp    %eax,%ecx
f0116e9f:	74 17                	je     f0116eb8 <test_priority_normal_and_lower+0x502>
				panic("Working set should be moved properly to the new one");
f0116ea1:	83 ec 04             	sub    $0x4,%esp
f0116ea4:	68 a8 ab 13 f0       	push   $0xf013aba8
f0116ea9:	68 2f 01 00 00       	push   $0x12f
f0116eae:	68 d1 a9 13 f0       	push   $0xf013a9d1
f0116eb3:	e8 4d 93 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0116eb8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116ebb:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0116ec2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116ec5:	8b 58 78             	mov    0x78(%eax),%ebx
f0116ec8:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0116ecb:	89 d0                	mov    %edx,%eax
f0116ecd:	01 c0                	add    %eax,%eax
f0116ecf:	01 d0                	add    %edx,%eax
f0116ed1:	c1 e0 03             	shl    $0x3,%eax
f0116ed4:	01 d8                	add    %ebx,%eax
f0116ed6:	8b 40 08             	mov    0x8(%eax),%eax
f0116ed9:	39 c1                	cmp    %eax,%ecx
f0116edb:	74 17                	je     f0116ef4 <test_priority_normal_and_lower+0x53e>
				panic("Working set should be moved properly to the new one");
f0116edd:	83 ec 04             	sub    $0x4,%esp
f0116ee0:	68 a8 ab 13 f0       	push   $0xf013aba8
f0116ee5:	68 32 01 00 00       	push   $0x132
f0116eea:	68 d1 a9 13 f0       	push   $0xf013a9d1
f0116eef:	e8 11 93 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f0116ef4:	ff 45 d8             	incl   -0x28(%ebp)
f0116ef7:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f0116efb:	7e 80                	jle    f0116e7d <test_priority_normal_and_lower+0x4c7>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116efd:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0116f04:	eb 7a                	jmp    f0116f80 <test_priority_normal_and_lower+0x5ca>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0116f06:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0116f09:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0116f10:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116f13:	8b 58 78             	mov    0x78(%eax),%ebx
f0116f16:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0116f19:	89 d0                	mov    %edx,%eax
f0116f1b:	01 c0                	add    %eax,%eax
f0116f1d:	01 d0                	add    %edx,%eax
f0116f1f:	c1 e0 03             	shl    $0x3,%eax
f0116f22:	01 d8                	add    %ebx,%eax
f0116f24:	8b 00                	mov    (%eax),%eax
f0116f26:	39 c1                	cmp    %eax,%ecx
f0116f28:	74 17                	je     f0116f41 <test_priority_normal_and_lower+0x58b>
				panic("Working set should be moved properly to the new one");
f0116f2a:	83 ec 04             	sub    $0x4,%esp
f0116f2d:	68 a8 ab 13 f0       	push   $0xf013aba8
f0116f32:	68 38 01 00 00       	push   $0x138
f0116f37:	68 d1 a9 13 f0       	push   $0xf013a9d1
f0116f3c:	e8 c4 92 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0116f41:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0116f44:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0116f4b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116f4e:	8b 58 78             	mov    0x78(%eax),%ebx
f0116f51:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0116f54:	89 d0                	mov    %edx,%eax
f0116f56:	01 c0                	add    %eax,%eax
f0116f58:	01 d0                	add    %edx,%eax
f0116f5a:	c1 e0 03             	shl    $0x3,%eax
f0116f5d:	01 d8                	add    %ebx,%eax
f0116f5f:	8b 40 08             	mov    0x8(%eax),%eax
f0116f62:	39 c1                	cmp    %eax,%ecx
f0116f64:	74 17                	je     f0116f7d <test_priority_normal_and_lower+0x5c7>
				panic("Working set should be moved properly to the new one");
f0116f66:	83 ec 04             	sub    $0x4,%esp
f0116f69:	68 a8 ab 13 f0       	push   $0xf013aba8
f0116f6e:	68 3b 01 00 00       	push   $0x13b
f0116f73:	68 d1 a9 13 f0       	push   $0xf013a9d1
f0116f78:	e8 88 92 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116f7d:	ff 45 d4             	incl   -0x2c(%ebp)
f0116f80:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0116f84:	7e 80                	jle    f0116f06 <test_priority_normal_and_lower+0x550>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116f86:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0116f8d:	eb 7a                	jmp    f0117009 <test_priority_normal_and_lower+0x653>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0116f8f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116f92:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0116f99:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116f9c:	8b 58 78             	mov    0x78(%eax),%ebx
f0116f9f:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0116fa2:	89 d0                	mov    %edx,%eax
f0116fa4:	01 c0                	add    %eax,%eax
f0116fa6:	01 d0                	add    %edx,%eax
f0116fa8:	c1 e0 03             	shl    $0x3,%eax
f0116fab:	01 d8                	add    %ebx,%eax
f0116fad:	8b 00                	mov    (%eax),%eax
f0116faf:	39 c1                	cmp    %eax,%ecx
f0116fb1:	74 17                	je     f0116fca <test_priority_normal_and_lower+0x614>
				panic("Working set should be moved properly to the new one");
f0116fb3:	83 ec 04             	sub    $0x4,%esp
f0116fb6:	68 a8 ab 13 f0       	push   $0xf013aba8
f0116fbb:	68 41 01 00 00       	push   $0x141
f0116fc0:	68 d1 a9 13 f0       	push   $0xf013a9d1
f0116fc5:	e8 3b 92 fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0116fca:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116fcd:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0116fd4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116fd7:	8b 58 78             	mov    0x78(%eax),%ebx
f0116fda:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0116fdd:	89 d0                	mov    %edx,%eax
f0116fdf:	01 c0                	add    %eax,%eax
f0116fe1:	01 d0                	add    %edx,%eax
f0116fe3:	c1 e0 03             	shl    $0x3,%eax
f0116fe6:	01 d8                	add    %ebx,%eax
f0116fe8:	8b 40 08             	mov    0x8(%eax),%eax
f0116feb:	39 c1                	cmp    %eax,%ecx
f0116fed:	74 17                	je     f0117006 <test_priority_normal_and_lower+0x650>
				panic("Working set should be moved properly to the new one");
f0116fef:	83 ec 04             	sub    $0x4,%esp
f0116ff2:	68 a8 ab 13 f0       	push   $0xf013aba8
f0116ff7:	68 44 01 00 00       	push   $0x144
f0116ffc:	68 d1 a9 13 f0       	push   $0xf013a9d1
f0117001:	e8 ff 91 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117006:	ff 45 d0             	incl   -0x30(%ebp)
f0117009:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f011700d:	7e 80                	jle    f0116f8f <test_priority_normal_and_lower+0x5d9>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f011700f:	e8 89 5b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117014:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117017:	e8 ac cd fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011701c:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f011701f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117022:	83 ec 08             	sub    $0x8,%esp
f0117025:	6a 01                	push   $0x1
f0117027:	50                   	push   %eax
f0117028:	e8 bb 3f ff ff       	call   f010afe8 <set_program_priority>
f011702d:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f0117030:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117033:	83 ec 08             	sub    $0x8,%esp
f0117036:	6a 01                	push   $0x1
f0117038:	50                   	push   %eax
f0117039:	e8 aa 3f ff ff       	call   f010afe8 <set_program_priority>
f011703e:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f0117041:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117044:	83 ec 08             	sub    $0x8,%esp
f0117047:	6a 01                	push   $0x1
f0117049:	50                   	push   %eax
f011704a:	e8 99 3f ff ff       	call   f010afe8 <set_program_priority>
f011704f:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117052:	e8 71 cd fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117057:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011705a:	74 17                	je     f0117073 <test_priority_normal_and_lower+0x6bd>
f011705c:	83 ec 04             	sub    $0x4,%esp
f011705f:	68 38 aa 13 f0       	push   $0xf013aa38
f0117064:	68 4d 01 00 00       	push   $0x14d
f0117069:	68 d1 a9 13 f0       	push   $0xf013a9d1
f011706e:	e8 92 91 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f0117073:	e8 25 5b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117078:	2b 45 c0             	sub    -0x40(%ebp),%eax
f011707b:	83 f8 0d             	cmp    $0xd,%eax
f011707e:	74 17                	je     f0117097 <test_priority_normal_and_lower+0x6e1>
f0117080:	83 ec 04             	sub    $0x4,%esp
f0117083:	68 44 ad 13 f0       	push   $0xf013ad44
f0117088:	68 4e 01 00 00       	push   $0x14e
f011708d:	68 d1 a9 13 f0       	push   $0xf013a9d1
f0117092:	e8 6e 91 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0117097:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011709a:	8b 40 74             	mov    0x74(%eax),%eax
f011709d:	83 f8 05             	cmp    $0x5,%eax
f01170a0:	75 16                	jne    f01170b8 <test_priority_normal_and_lower+0x702>
f01170a2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01170a5:	8b 40 74             	mov    0x74(%eax),%eax
f01170a8:	83 f8 07             	cmp    $0x7,%eax
f01170ab:	75 0b                	jne    f01170b8 <test_priority_normal_and_lower+0x702>
f01170ad:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01170b0:	8b 40 74             	mov    0x74(%eax),%eax
f01170b3:	83 f8 05             	cmp    $0x5,%eax
f01170b6:	74 17                	je     f01170cf <test_priority_normal_and_lower+0x719>
			panic("The programs' working set size should be half\n");
f01170b8:	83 ec 04             	sub    $0x4,%esp
f01170bb:	68 8c ad 13 f0       	push   $0xf013ad8c
f01170c0:	68 51 01 00 00       	push   $0x151
f01170c5:	68 d1 a9 13 f0       	push   $0xf013a9d1
f01170ca:	e8 36 91 fe ff       	call   f0100205 <_panic>


		freeFrames = sys_calculate_free_frames();
f01170cf:	e8 c9 5a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01170d4:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01170d7:	e8 ec cc fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01170dc:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f01170df:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01170e2:	83 ec 08             	sub    $0x8,%esp
f01170e5:	6a 01                	push   $0x1
f01170e7:	50                   	push   %eax
f01170e8:	e8 fb 3e ff ff       	call   f010afe8 <set_program_priority>
f01170ed:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01170f0:	e8 d3 cc fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01170f5:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01170f8:	74 17                	je     f0117111 <test_priority_normal_and_lower+0x75b>
f01170fa:	83 ec 04             	sub    $0x4,%esp
f01170fd:	68 38 aa 13 f0       	push   $0xf013aa38
f0117102:	68 57 01 00 00       	push   $0x157
f0117107:	68 d1 a9 13 f0       	push   $0xf013a9d1
f011710c:	e8 f4 90 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f0117111:	e8 87 5a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117116:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0117119:	83 f8 03             	cmp    $0x3,%eax
f011711c:	74 17                	je     f0117135 <test_priority_normal_and_lower+0x77f>
f011711e:	83 ec 04             	sub    $0x4,%esp
f0117121:	68 38 aa 13 f0       	push   $0xf013aa38
f0117126:	68 58 01 00 00       	push   $0x158
f011712b:	68 d1 a9 13 f0       	push   $0xf013a9d1
f0117130:	e8 d0 90 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0117135:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117138:	8b 40 74             	mov    0x74(%eax),%eax
f011713b:	83 f8 02             	cmp    $0x2,%eax
f011713e:	75 16                	jne    f0117156 <test_priority_normal_and_lower+0x7a0>
f0117140:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117143:	8b 40 74             	mov    0x74(%eax),%eax
f0117146:	83 f8 07             	cmp    $0x7,%eax
f0117149:	75 0b                	jne    f0117156 <test_priority_normal_and_lower+0x7a0>
f011714b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011714e:	8b 40 74             	mov    0x74(%eax),%eax
f0117151:	83 f8 05             	cmp    $0x5,%eax
f0117154:	74 17                	je     f011716d <test_priority_normal_and_lower+0x7b7>
			panic("The programs' working set size should be doubled if full\n");
f0117156:	83 ec 04             	sub    $0x4,%esp
f0117159:	68 6c ab 13 f0       	push   $0xf013ab6c
f011715e:	68 5b 01 00 00       	push   $0x15b
f0117163:	68 d1 a9 13 f0       	push   $0xf013a9d1
f0117168:	e8 98 90 fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 2; i++)
f011716d:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0117174:	e9 80 00 00 00       	jmp    f01171f9 <test_priority_normal_and_lower+0x843>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0117179:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011717c:	83 c0 08             	add    $0x8,%eax
f011717f:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0117186:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117189:	8b 58 78             	mov    0x78(%eax),%ebx
f011718c:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011718f:	89 d0                	mov    %edx,%eax
f0117191:	01 c0                	add    %eax,%eax
f0117193:	01 d0                	add    %edx,%eax
f0117195:	c1 e0 03             	shl    $0x3,%eax
f0117198:	01 d8                	add    %ebx,%eax
f011719a:	8b 00                	mov    (%eax),%eax
f011719c:	39 c1                	cmp    %eax,%ecx
f011719e:	74 17                	je     f01171b7 <test_priority_normal_and_lower+0x801>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01171a0:	83 ec 04             	sub    $0x4,%esp
f01171a3:	68 bc ad 13 f0       	push   $0xf013adbc
f01171a8:	68 60 01 00 00       	push   $0x160
f01171ad:	68 d1 a9 13 f0       	push   $0xf013a9d1
f01171b2:	e8 4e 90 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f01171b7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01171ba:	83 c0 08             	add    $0x8,%eax
f01171bd:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f01171c4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01171c7:	8b 58 78             	mov    0x78(%eax),%ebx
f01171ca:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01171cd:	89 d0                	mov    %edx,%eax
f01171cf:	01 c0                	add    %eax,%eax
f01171d1:	01 d0                	add    %edx,%eax
f01171d3:	c1 e0 03             	shl    $0x3,%eax
f01171d6:	01 d8                	add    %ebx,%eax
f01171d8:	8b 40 08             	mov    0x8(%eax),%eax
f01171db:	39 c1                	cmp    %eax,%ecx
f01171dd:	74 17                	je     f01171f6 <test_priority_normal_and_lower+0x840>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01171df:	83 ec 04             	sub    $0x4,%esp
f01171e2:	68 bc ad 13 f0       	push   $0xf013adbc
f01171e7:	68 63 01 00 00       	push   $0x163
f01171ec:	68 d1 a9 13 f0       	push   $0xf013a9d1
f01171f1:	e8 0f 90 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f01171f6:	ff 45 cc             	incl   -0x34(%ebp)
f01171f9:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f01171fd:	0f 8e 76 ff ff ff    	jle    f0117179 <test_priority_normal_and_lower+0x7c3>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0117203:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f011720a:	e9 80 00 00 00       	jmp    f011728f <test_priority_normal_and_lower+0x8d9>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f011720f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117212:	83 c0 03             	add    $0x3,%eax
f0117215:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f011721c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011721f:	8b 58 78             	mov    0x78(%eax),%ebx
f0117222:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0117225:	89 d0                	mov    %edx,%eax
f0117227:	01 c0                	add    %eax,%eax
f0117229:	01 d0                	add    %edx,%eax
f011722b:	c1 e0 03             	shl    $0x3,%eax
f011722e:	01 d8                	add    %ebx,%eax
f0117230:	8b 00                	mov    (%eax),%eax
f0117232:	39 c1                	cmp    %eax,%ecx
f0117234:	74 17                	je     f011724d <test_priority_normal_and_lower+0x897>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f0117236:	ff 75 c8             	pushl  -0x38(%ebp)
f0117239:	68 28 ae 13 f0       	push   $0xf013ae28
f011723e:	68 69 01 00 00       	push   $0x169
f0117243:	68 d1 a9 13 f0       	push   $0xf013a9d1
f0117248:	e8 b8 8f fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f011724d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117250:	83 c0 03             	add    $0x3,%eax
f0117253:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f011725a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011725d:	8b 58 78             	mov    0x78(%eax),%ebx
f0117260:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0117263:	89 d0                	mov    %edx,%eax
f0117265:	01 c0                	add    %eax,%eax
f0117267:	01 d0                	add    %edx,%eax
f0117269:	c1 e0 03             	shl    $0x3,%eax
f011726c:	01 d8                	add    %ebx,%eax
f011726e:	8b 40 08             	mov    0x8(%eax),%eax
f0117271:	39 c1                	cmp    %eax,%ecx
f0117273:	74 17                	je     f011728c <test_priority_normal_and_lower+0x8d6>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117275:	83 ec 04             	sub    $0x4,%esp
f0117278:	68 bc ad 13 f0       	push   $0xf013adbc
f011727d:	68 6c 01 00 00       	push   $0x16c
f0117282:	68 d1 a9 13 f0       	push   $0xf013a9d1
f0117287:	e8 79 8f fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f011728c:	ff 45 c8             	incl   -0x38(%ebp)
f011728f:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f0117293:	0f 8e 76 ff ff ff    	jle    f011720f <test_priority_normal_and_lower+0x859>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0117299:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f01172a0:	e9 80 00 00 00       	jmp    f0117325 <test_priority_normal_and_lower+0x96f>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f01172a5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01172a8:	83 c0 05             	add    $0x5,%eax
f01172ab:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f01172b2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01172b5:	8b 58 78             	mov    0x78(%eax),%ebx
f01172b8:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01172bb:	89 d0                	mov    %edx,%eax
f01172bd:	01 c0                	add    %eax,%eax
f01172bf:	01 d0                	add    %edx,%eax
f01172c1:	c1 e0 03             	shl    $0x3,%eax
f01172c4:	01 d8                	add    %ebx,%eax
f01172c6:	8b 00                	mov    (%eax),%eax
f01172c8:	39 c1                	cmp    %eax,%ecx
f01172ca:	74 17                	je     f01172e3 <test_priority_normal_and_lower+0x92d>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01172cc:	83 ec 04             	sub    $0x4,%esp
f01172cf:	68 bc ad 13 f0       	push   $0xf013adbc
f01172d4:	68 72 01 00 00       	push   $0x172
f01172d9:	68 d1 a9 13 f0       	push   $0xf013a9d1
f01172de:	e8 22 8f fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f01172e3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01172e6:	83 c0 05             	add    $0x5,%eax
f01172e9:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f01172f0:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01172f3:	8b 58 78             	mov    0x78(%eax),%ebx
f01172f6:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01172f9:	89 d0                	mov    %edx,%eax
f01172fb:	01 c0                	add    %eax,%eax
f01172fd:	01 d0                	add    %edx,%eax
f01172ff:	c1 e0 03             	shl    $0x3,%eax
f0117302:	01 d8                	add    %ebx,%eax
f0117304:	8b 40 08             	mov    0x8(%eax),%eax
f0117307:	39 c1                	cmp    %eax,%ecx
f0117309:	74 17                	je     f0117322 <test_priority_normal_and_lower+0x96c>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f011730b:	83 ec 04             	sub    $0x4,%esp
f011730e:	68 bc ad 13 f0       	push   $0xf013adbc
f0117313:	68 75 01 00 00       	push   $0x175
f0117318:	68 d1 a9 13 f0       	push   $0xf013a9d1
f011731d:	e8 e3 8e fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0117322:	ff 45 c4             	incl   -0x3c(%ebp)
f0117325:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f0117329:	0f 8e 76 ff ff ff    	jle    f01172a5 <test_priority_normal_and_lower+0x8ef>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f011732f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117332:	83 ec 08             	sub    $0x8,%esp
f0117335:	6a 05                	push   $0x5
f0117337:	50                   	push   %eax
f0117338:	e8 ab 3c ff ff       	call   f010afe8 <set_program_priority>
f011733d:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f0117340:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117343:	83 ec 08             	sub    $0x8,%esp
f0117346:	6a 05                	push   $0x5
f0117348:	50                   	push   %eax
f0117349:	e8 9a 3c ff ff       	call   f010afe8 <set_program_priority>
f011734e:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f0117351:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f0117358:	75 6e 61 
f011735b:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f0117362:	6c 00 00 
f0117365:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f011736b:	b9 17 00 00 00       	mov    $0x17,%ecx
f0117370:	b8 00 00 00 00       	mov    $0x0,%eax
f0117375:	89 d7                	mov    %edx,%edi
f0117377:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0117379:	83 ec 0c             	sub    $0xc,%esp
f011737c:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f0117382:	50                   	push   %eax
f0117383:	e8 e8 99 fe ff       	call   f0100d70 <execute_command>
f0117388:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
}
f011738b:	eb 10                	jmp    f011739d <test_priority_normal_and_lower+0x9e7>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f011738d:	83 ec 0c             	sub    $0xc,%esp
f0117390:	68 98 ae 13 f0       	push   $0xf013ae98
f0117395:	e8 74 99 fe ff       	call   f0100d0e <cprintf>
f011739a:	83 c4 10             	add    $0x10,%esp
	}
}
f011739d:	90                   	nop
f011739e:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01173a1:	5b                   	pop    %ebx
f01173a2:	5e                   	pop    %esi
f01173a3:	5f                   	pop    %edi
f01173a4:	5d                   	pop    %ebp
f01173a5:	c3                   	ret    

f01173a6 <isKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f01173a6:	55                   	push   %ebp
f01173a7:	89 e5                	mov    %esp,%ebp
f01173a9:	a1 5c 5d 87 f0       	mov    0xf0875d5c,%eax
f01173ae:	83 f8 03             	cmp    $0x3,%eax
f01173b1:	75 04                	jne    f01173b7 <isKHeapPlacementStrategyNEXTFIT+0x11>
f01173b3:	b0 01                	mov    $0x1,%al
f01173b5:	eb 02                	jmp    f01173b9 <isKHeapPlacementStrategyNEXTFIT+0x13>
f01173b7:	b0 00                	mov    $0x0,%al
f01173b9:	5d                   	pop    %ebp
f01173ba:	c3                   	ret    

f01173bb <test_kmalloc>:
	int c;
};


int test_kmalloc()
{
f01173bb:	55                   	push   %ebp
f01173bc:	89 e5                	mov    %esp,%ebp
f01173be:	57                   	push   %edi
f01173bf:	53                   	push   %ebx
f01173c0:	81 ec c0 01 00 00    	sub    $0x1c0,%esp
	cprintf("==============================================\n");
f01173c6:	83 ec 0c             	sub    $0xc,%esp
f01173c9:	68 9c af 13 f0       	push   $0xf013af9c
f01173ce:	e8 3b 99 fe ff       	call   f0100d0e <cprintf>
f01173d3:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01173d6:	83 ec 0c             	sub    $0xc,%esp
f01173d9:	68 cc af 13 f0       	push   $0xf013afcc
f01173de:	e8 2b 99 fe ff       	call   f0100d0e <cprintf>
f01173e3:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01173e6:	83 ec 0c             	sub    $0xc,%esp
f01173e9:	68 9c af 13 f0       	push   $0xf013af9c
f01173ee:	e8 1b 99 fe ff       	call   f0100d0e <cprintf>
f01173f3:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01173f6:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f01173fa:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f01173fe:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0117404:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f011740a:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0117411:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0117418:	e8 80 57 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011741d:	89 45 e0             	mov    %eax,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f0117420:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f0117426:	b9 14 00 00 00       	mov    $0x14,%ecx
f011742b:	b8 00 00 00 00       	mov    $0x0,%eax
f0117430:	89 d7                	mov    %edx,%edi
f0117432:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//Insufficient space
		int freeFrames = sys_calculate_free_frames() ;
f0117434:	e8 64 57 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117439:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011743c:	e8 87 c9 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117441:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f0117444:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011744b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011744e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117453:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0117456:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117459:	ba 00 00 00 00       	mov    $0x0,%edx
f011745e:	f7 75 d4             	divl   -0x2c(%ebp)
f0117461:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117464:	29 d0                	sub    %edx,%eax
f0117466:	89 c1                	mov    %eax,%ecx
f0117468:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011746f:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0117474:	0f b6 d0             	movzbl %al,%edx
f0117477:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011747a:	01 d0                	add    %edx,%eax
f011747c:	48                   	dec    %eax
f011747d:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0117480:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117483:	ba 00 00 00 00       	mov    $0x0,%edx
f0117488:	f7 75 cc             	divl   -0x34(%ebp)
f011748b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011748e:	29 d0                	sub    %edx,%eax
f0117490:	01 c1                	add    %eax,%ecx
f0117492:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0117499:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011749e:	0f b6 c0             	movzbl %al,%eax
f01174a1:	c1 e0 04             	shl    $0x4,%eax
f01174a4:	89 c2                	mov    %eax,%edx
f01174a6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01174a9:	01 d0                	add    %edx,%eax
f01174ab:	48                   	dec    %eax
f01174ac:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01174af:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01174b2:	ba 00 00 00 00       	mov    $0x0,%edx
f01174b7:	f7 75 c4             	divl   -0x3c(%ebp)
f01174ba:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01174bd:	29 d0                	sub    %edx,%eax
f01174bf:	01 c8                	add    %ecx,%eax
f01174c1:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f01174c6:	29 c2                	sub    %eax,%edx
f01174c8:	89 d0                	mov    %edx,%eax
f01174ca:	89 45 bc             	mov    %eax,-0x44(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f01174cd:	83 ec 0c             	sub    $0xc,%esp
f01174d0:	ff 75 bc             	pushl  -0x44(%ebp)
f01174d3:	e8 ad 03 ff ff       	call   f0107885 <kmalloc>
f01174d8:	83 c4 10             	add    $0x10,%esp
f01174db:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Allocating insufficient space: should return NULL");
f01174e1:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01174e7:	85 c0                	test   %eax,%eax
f01174e9:	74 14                	je     f01174ff <test_kmalloc+0x144>
f01174eb:	83 ec 04             	sub    $0x4,%esp
f01174ee:	68 28 b0 13 f0       	push   $0xf013b028
f01174f3:	6a 40                	push   $0x40
f01174f5:	68 5a b0 13 f0       	push   $0xf013b05a
f01174fa:	e8 06 8d fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01174ff:	e8 c4 c8 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117504:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117507:	74 14                	je     f011751d <test_kmalloc+0x162>
f0117509:	83 ec 04             	sub    $0x4,%esp
f011750c:	68 74 b0 13 f0       	push   $0xf013b074
f0117511:	6a 41                	push   $0x41
f0117513:	68 5a b0 13 f0       	push   $0xf013b05a
f0117518:	e8 e8 8c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f011751d:	e8 7b 56 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117522:	89 c2                	mov    %eax,%edx
f0117524:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117527:	39 c2                	cmp    %eax,%edx
f0117529:	74 14                	je     f011753f <test_kmalloc+0x184>
f011752b:	83 ec 04             	sub    $0x4,%esp
f011752e:	68 dc b0 13 f0       	push   $0xf013b0dc
f0117533:	6a 42                	push   $0x42
f0117535:	68 5a b0 13 f0       	push   $0xf013b05a
f011753a:	e8 c6 8c fe ff       	call   f0100205 <_panic>

		cprintf("\nkmalloc: current evaluation = 10%");
f011753f:	83 ec 0c             	sub    $0xc,%esp
f0117542:	68 1c b1 13 f0       	push   $0xf013b11c
f0117547:	e8 c2 97 fe ff       	call   f0100d0e <cprintf>
f011754c:	83 c4 10             	add    $0x10,%esp
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011754f:	e8 49 56 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117554:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117557:	e8 6c c8 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011755c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011755f:	83 ec 0c             	sub    $0xc,%esp
f0117562:	68 00 fc 1f 00       	push   $0x1ffc00
f0117567:	e8 19 03 ff ff       	call   f0107885 <kmalloc>
f011756c:	83 c4 10             	add    $0x10,%esp
f011756f:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117575:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011757b:	89 c1                	mov    %eax,%ecx
f011757d:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0117584:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117587:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011758c:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f011758f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117592:	ba 00 00 00 00       	mov    $0x0,%edx
f0117597:	f7 75 b8             	divl   -0x48(%ebp)
f011759a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011759d:	29 d0                	sub    %edx,%eax
f011759f:	89 c3                	mov    %eax,%ebx
f01175a1:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01175a8:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01175ad:	0f b6 d0             	movzbl %al,%edx
f01175b0:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01175b3:	01 d0                	add    %edx,%eax
f01175b5:	48                   	dec    %eax
f01175b6:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01175b9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01175bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01175c1:	f7 75 b0             	divl   -0x50(%ebp)
f01175c4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01175c7:	29 d0                	sub    %edx,%eax
f01175c9:	01 c3                	add    %eax,%ebx
f01175cb:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01175d2:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01175d7:	0f b6 c0             	movzbl %al,%eax
f01175da:	c1 e0 04             	shl    $0x4,%eax
f01175dd:	89 c2                	mov    %eax,%edx
f01175df:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01175e2:	01 d0                	add    %edx,%eax
f01175e4:	48                   	dec    %eax
f01175e5:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01175e8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01175eb:	ba 00 00 00 00       	mov    $0x0,%edx
f01175f0:	f7 75 a8             	divl   -0x58(%ebp)
f01175f3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01175f6:	29 d0                	sub    %edx,%eax
f01175f8:	01 d8                	add    %ebx,%eax
f01175fa:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01175ff:	39 c1                	cmp    %eax,%ecx
f0117601:	74 14                	je     f0117617 <test_kmalloc+0x25c>
f0117603:	83 ec 04             	sub    $0x4,%esp
f0117606:	68 40 b1 13 f0       	push   $0xf013b140
f011760b:	6a 49                	push   $0x49
f011760d:	68 5a b0 13 f0       	push   $0xf013b05a
f0117612:	e8 ee 8b fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117617:	e8 ac c7 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011761c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011761f:	74 14                	je     f0117635 <test_kmalloc+0x27a>
f0117621:	83 ec 04             	sub    $0x4,%esp
f0117624:	68 74 b0 13 f0       	push   $0xf013b074
f0117629:	6a 4a                	push   $0x4a
f011762b:	68 5a b0 13 f0       	push   $0xf013b05a
f0117630:	e8 d0 8b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117635:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117638:	e8 60 55 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011763d:	29 c3                	sub    %eax,%ebx
f011763f:	89 d8                	mov    %ebx,%eax
f0117641:	3d 00 02 00 00       	cmp    $0x200,%eax
f0117646:	74 14                	je     f011765c <test_kmalloc+0x2a1>
f0117648:	83 ec 04             	sub    $0x4,%esp
f011764b:	68 dc b0 13 f0       	push   $0xf013b0dc
f0117650:	6a 4b                	push   $0x4b
f0117652:	68 5a b0 13 f0       	push   $0xf013b05a
f0117657:	e8 a9 8b fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011765c:	e8 3c 55 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117661:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117664:	e8 5f c7 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117669:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011766c:	83 ec 0c             	sub    $0xc,%esp
f011766f:	68 00 fc 1f 00       	push   $0x1ffc00
f0117674:	e8 0c 02 ff ff       	call   f0107885 <kmalloc>
f0117679:	83 c4 10             	add    $0x10,%esp
f011767c:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117682:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0117688:	89 c1                	mov    %eax,%ecx
f011768a:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0117691:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0117694:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117699:	89 45 9c             	mov    %eax,-0x64(%ebp)
f011769c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011769f:	ba 00 00 00 00       	mov    $0x0,%edx
f01176a4:	f7 75 a0             	divl   -0x60(%ebp)
f01176a7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01176aa:	29 d0                	sub    %edx,%eax
f01176ac:	89 c3                	mov    %eax,%ebx
f01176ae:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01176b5:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01176ba:	0f b6 d0             	movzbl %al,%edx
f01176bd:	8b 45 98             	mov    -0x68(%ebp),%eax
f01176c0:	01 d0                	add    %edx,%eax
f01176c2:	48                   	dec    %eax
f01176c3:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01176c6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01176c9:	ba 00 00 00 00       	mov    $0x0,%edx
f01176ce:	f7 75 98             	divl   -0x68(%ebp)
f01176d1:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01176d4:	29 d0                	sub    %edx,%eax
f01176d6:	01 c3                	add    %eax,%ebx
f01176d8:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01176df:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01176e4:	0f b6 c0             	movzbl %al,%eax
f01176e7:	c1 e0 04             	shl    $0x4,%eax
f01176ea:	89 c2                	mov    %eax,%edx
f01176ec:	8b 45 90             	mov    -0x70(%ebp),%eax
f01176ef:	01 d0                	add    %edx,%eax
f01176f1:	48                   	dec    %eax
f01176f2:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01176f5:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01176f8:	ba 00 00 00 00       	mov    $0x0,%edx
f01176fd:	f7 75 90             	divl   -0x70(%ebp)
f0117700:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0117703:	29 d0                	sub    %edx,%eax
f0117705:	01 d8                	add    %ebx,%eax
f0117707:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011770c:	39 c1                	cmp    %eax,%ecx
f011770e:	74 14                	je     f0117724 <test_kmalloc+0x369>
f0117710:	83 ec 04             	sub    $0x4,%esp
f0117713:	68 40 b1 13 f0       	push   $0xf013b140
f0117718:	6a 51                	push   $0x51
f011771a:	68 5a b0 13 f0       	push   $0xf013b05a
f011771f:	e8 e1 8a fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117724:	e8 9f c6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117729:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011772c:	74 14                	je     f0117742 <test_kmalloc+0x387>
f011772e:	83 ec 04             	sub    $0x4,%esp
f0117731:	68 74 b0 13 f0       	push   $0xf013b074
f0117736:	6a 52                	push   $0x52
f0117738:	68 5a b0 13 f0       	push   $0xf013b05a
f011773d:	e8 c3 8a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117742:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117745:	e8 53 54 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011774a:	29 c3                	sub    %eax,%ebx
f011774c:	89 d8                	mov    %ebx,%eax
f011774e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0117753:	74 14                	je     f0117769 <test_kmalloc+0x3ae>
f0117755:	83 ec 04             	sub    $0x4,%esp
f0117758:	68 dc b0 13 f0       	push   $0xf013b0dc
f011775d:	6a 53                	push   $0x53
f011775f:	68 5a b0 13 f0       	push   $0xf013b05a
f0117764:	e8 9c 8a fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0117769:	e8 2f 54 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011776e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117771:	e8 52 c6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117776:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0117779:	83 ec 0c             	sub    $0xc,%esp
f011777c:	68 00 08 00 00       	push   $0x800
f0117781:	e8 ff 00 ff ff       	call   f0107885 <kmalloc>
f0117786:	83 c4 10             	add    $0x10,%esp
f0117789:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011778f:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0117795:	89 c1                	mov    %eax,%ecx
f0117797:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f011779e:	8b 45 88             	mov    -0x78(%ebp),%eax
f01177a1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01177a6:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01177a9:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01177ac:	ba 00 00 00 00       	mov    $0x0,%edx
f01177b1:	f7 75 88             	divl   -0x78(%ebp)
f01177b4:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01177b7:	29 d0                	sub    %edx,%eax
f01177b9:	89 c3                	mov    %eax,%ebx
f01177bb:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01177c2:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01177c7:	0f b6 d0             	movzbl %al,%edx
f01177ca:	8b 45 80             	mov    -0x80(%ebp),%eax
f01177cd:	01 d0                	add    %edx,%eax
f01177cf:	48                   	dec    %eax
f01177d0:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01177d6:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01177dc:	ba 00 00 00 00       	mov    $0x0,%edx
f01177e1:	f7 75 80             	divl   -0x80(%ebp)
f01177e4:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01177ea:	29 d0                	sub    %edx,%eax
f01177ec:	01 c3                	add    %eax,%ebx
f01177ee:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f01177f5:	10 00 00 
f01177f8:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01177fd:	0f b6 c0             	movzbl %al,%eax
f0117800:	c1 e0 04             	shl    $0x4,%eax
f0117803:	89 c2                	mov    %eax,%edx
f0117805:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011780b:	01 d0                	add    %edx,%eax
f011780d:	48                   	dec    %eax
f011780e:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0117814:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011781a:	ba 00 00 00 00       	mov    $0x0,%edx
f011781f:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0117825:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011782b:	29 d0                	sub    %edx,%eax
f011782d:	01 d8                	add    %ebx,%eax
f011782f:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0117834:	39 c1                	cmp    %eax,%ecx
f0117836:	74 14                	je     f011784c <test_kmalloc+0x491>
f0117838:	83 ec 04             	sub    $0x4,%esp
f011783b:	68 40 b1 13 f0       	push   $0xf013b140
f0117840:	6a 59                	push   $0x59
f0117842:	68 5a b0 13 f0       	push   $0xf013b05a
f0117847:	e8 b9 89 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011784c:	e8 77 c5 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117851:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117854:	74 14                	je     f011786a <test_kmalloc+0x4af>
f0117856:	83 ec 04             	sub    $0x4,%esp
f0117859:	68 74 b0 13 f0       	push   $0xf013b074
f011785e:	6a 5a                	push   $0x5a
f0117860:	68 5a b0 13 f0       	push   $0xf013b05a
f0117865:	e8 9b 89 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011786a:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011786d:	e8 2b 53 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117872:	29 c3                	sub    %eax,%ebx
f0117874:	89 d8                	mov    %ebx,%eax
f0117876:	83 f8 01             	cmp    $0x1,%eax
f0117879:	74 14                	je     f011788f <test_kmalloc+0x4d4>
f011787b:	83 ec 04             	sub    $0x4,%esp
f011787e:	68 dc b0 13 f0       	push   $0xf013b0dc
f0117883:	6a 5b                	push   $0x5b
f0117885:	68 5a b0 13 f0       	push   $0xf013b05a
f011788a:	e8 76 89 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011788f:	e8 09 53 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117894:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117897:	e8 2c c5 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011789c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011789f:	83 ec 0c             	sub    $0xc,%esp
f01178a2:	68 00 08 00 00       	push   $0x800
f01178a7:	e8 d9 ff fe ff       	call   f0107885 <kmalloc>
f01178ac:	83 c4 10             	add    $0x10,%esp
f01178af:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01178b5:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01178bb:	89 c1                	mov    %eax,%ecx
f01178bd:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01178c4:	10 00 00 
f01178c7:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01178cd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01178d2:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01178d8:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01178de:	ba 00 00 00 00       	mov    $0x0,%edx
f01178e3:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01178e9:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01178ef:	29 d0                	sub    %edx,%eax
f01178f1:	89 c3                	mov    %eax,%ebx
f01178f3:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01178fa:	10 00 00 
f01178fd:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0117902:	0f b6 d0             	movzbl %al,%edx
f0117905:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011790b:	01 d0                	add    %edx,%eax
f011790d:	48                   	dec    %eax
f011790e:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0117914:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011791a:	ba 00 00 00 00       	mov    $0x0,%edx
f011791f:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0117925:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011792b:	29 d0                	sub    %edx,%eax
f011792d:	01 c3                	add    %eax,%ebx
f011792f:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0117936:	10 00 00 
f0117939:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011793e:	0f b6 c0             	movzbl %al,%eax
f0117941:	c1 e0 04             	shl    $0x4,%eax
f0117944:	89 c2                	mov    %eax,%edx
f0117946:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011794c:	01 d0                	add    %edx,%eax
f011794e:	48                   	dec    %eax
f011794f:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0117955:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011795b:	ba 00 00 00 00       	mov    $0x0,%edx
f0117960:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0117966:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011796c:	29 d0                	sub    %edx,%eax
f011796e:	01 d8                	add    %ebx,%eax
f0117970:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0117975:	39 c1                	cmp    %eax,%ecx
f0117977:	74 14                	je     f011798d <test_kmalloc+0x5d2>
f0117979:	83 ec 04             	sub    $0x4,%esp
f011797c:	68 40 b1 13 f0       	push   $0xf013b140
f0117981:	6a 61                	push   $0x61
f0117983:	68 5a b0 13 f0       	push   $0xf013b05a
f0117988:	e8 78 88 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011798d:	e8 36 c4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117992:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117995:	74 14                	je     f01179ab <test_kmalloc+0x5f0>
f0117997:	83 ec 04             	sub    $0x4,%esp
f011799a:	68 74 b0 13 f0       	push   $0xf013b074
f011799f:	6a 62                	push   $0x62
f01179a1:	68 5a b0 13 f0       	push   $0xf013b05a
f01179a6:	e8 5a 88 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01179ab:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01179ae:	e8 ea 51 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01179b3:	29 c3                	sub    %eax,%ebx
f01179b5:	89 d8                	mov    %ebx,%eax
f01179b7:	83 f8 01             	cmp    $0x1,%eax
f01179ba:	74 14                	je     f01179d0 <test_kmalloc+0x615>
f01179bc:	83 ec 04             	sub    $0x4,%esp
f01179bf:	68 dc b0 13 f0       	push   $0xf013b0dc
f01179c4:	6a 63                	push   $0x63
f01179c6:	68 5a b0 13 f0       	push   $0xf013b05a
f01179cb:	e8 35 88 fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01179d0:	e8 c8 51 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01179d5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01179d8:	e8 eb c3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01179dd:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01179e0:	83 ec 0c             	sub    $0xc,%esp
f01179e3:	68 00 1c 00 00       	push   $0x1c00
f01179e8:	e8 98 fe fe ff       	call   f0107885 <kmalloc>
f01179ed:	83 c4 10             	add    $0x10,%esp
f01179f0:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01179f6:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01179fc:	89 c1                	mov    %eax,%ecx
f01179fe:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0117a05:	10 00 00 
f0117a08:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0117a0e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117a13:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0117a19:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0117a1f:	ba 00 00 00 00       	mov    $0x0,%edx
f0117a24:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0117a2a:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0117a30:	29 d0                	sub    %edx,%eax
f0117a32:	89 c3                	mov    %eax,%ebx
f0117a34:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0117a3b:	10 00 00 
f0117a3e:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0117a43:	0f b6 d0             	movzbl %al,%edx
f0117a46:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0117a4c:	01 d0                	add    %edx,%eax
f0117a4e:	48                   	dec    %eax
f0117a4f:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0117a55:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0117a5b:	ba 00 00 00 00       	mov    $0x0,%edx
f0117a60:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0117a66:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0117a6c:	29 d0                	sub    %edx,%eax
f0117a6e:	01 c3                	add    %eax,%ebx
f0117a70:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0117a77:	10 00 00 
f0117a7a:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0117a7f:	0f b6 c0             	movzbl %al,%eax
f0117a82:	c1 e0 04             	shl    $0x4,%eax
f0117a85:	89 c2                	mov    %eax,%edx
f0117a87:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0117a8d:	01 d0                	add    %edx,%eax
f0117a8f:	48                   	dec    %eax
f0117a90:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0117a96:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0117a9c:	ba 00 00 00 00       	mov    $0x0,%edx
f0117aa1:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0117aa7:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0117aad:	29 d0                	sub    %edx,%eax
f0117aaf:	01 d8                	add    %ebx,%eax
f0117ab1:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0117ab6:	39 c1                	cmp    %eax,%ecx
f0117ab8:	74 14                	je     f0117ace <test_kmalloc+0x713>
f0117aba:	83 ec 04             	sub    $0x4,%esp
f0117abd:	68 40 b1 13 f0       	push   $0xf013b140
f0117ac2:	6a 69                	push   $0x69
f0117ac4:	68 5a b0 13 f0       	push   $0xf013b05a
f0117ac9:	e8 37 87 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117ace:	e8 f5 c2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117ad3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117ad6:	74 14                	je     f0117aec <test_kmalloc+0x731>
f0117ad8:	83 ec 04             	sub    $0x4,%esp
f0117adb:	68 74 b0 13 f0       	push   $0xf013b074
f0117ae0:	6a 6a                	push   $0x6a
f0117ae2:	68 5a b0 13 f0       	push   $0xf013b05a
f0117ae7:	e8 19 87 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117aec:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117aef:	e8 a9 50 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117af4:	29 c3                	sub    %eax,%ebx
f0117af6:	89 d8                	mov    %ebx,%eax
f0117af8:	83 f8 02             	cmp    $0x2,%eax
f0117afb:	74 14                	je     f0117b11 <test_kmalloc+0x756>
f0117afd:	83 ec 04             	sub    $0x4,%esp
f0117b00:	68 dc b0 13 f0       	push   $0xf013b0dc
f0117b05:	6a 6b                	push   $0x6b
f0117b07:	68 5a b0 13 f0       	push   $0xf013b05a
f0117b0c:	e8 f4 86 fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0117b11:	e8 87 50 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117b16:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117b19:	e8 aa c2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117b1e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0117b21:	83 ec 0c             	sub    $0xc,%esp
f0117b24:	68 00 fc 2f 00       	push   $0x2ffc00
f0117b29:	e8 57 fd fe ff       	call   f0107885 <kmalloc>
f0117b2e:	83 c4 10             	add    $0x10,%esp
f0117b31:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117b37:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0117b3d:	89 c1                	mov    %eax,%ecx
f0117b3f:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0117b46:	10 00 00 
f0117b49:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0117b4f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117b54:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0117b5a:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0117b60:	ba 00 00 00 00       	mov    $0x0,%edx
f0117b65:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0117b6b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0117b71:	29 d0                	sub    %edx,%eax
f0117b73:	89 c3                	mov    %eax,%ebx
f0117b75:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0117b7c:	10 00 00 
f0117b7f:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0117b84:	0f b6 d0             	movzbl %al,%edx
f0117b87:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0117b8d:	01 d0                	add    %edx,%eax
f0117b8f:	48                   	dec    %eax
f0117b90:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0117b96:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0117b9c:	ba 00 00 00 00       	mov    $0x0,%edx
f0117ba1:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0117ba7:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0117bad:	29 d0                	sub    %edx,%eax
f0117baf:	01 c3                	add    %eax,%ebx
f0117bb1:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0117bb8:	10 00 00 
f0117bbb:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0117bc0:	0f b6 c0             	movzbl %al,%eax
f0117bc3:	c1 e0 04             	shl    $0x4,%eax
f0117bc6:	89 c2                	mov    %eax,%edx
f0117bc8:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0117bce:	01 d0                	add    %edx,%eax
f0117bd0:	48                   	dec    %eax
f0117bd1:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0117bd7:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0117bdd:	ba 00 00 00 00       	mov    $0x0,%edx
f0117be2:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0117be8:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0117bee:	29 d0                	sub    %edx,%eax
f0117bf0:	01 d8                	add    %ebx,%eax
f0117bf2:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0117bf7:	39 c1                	cmp    %eax,%ecx
f0117bf9:	74 14                	je     f0117c0f <test_kmalloc+0x854>
f0117bfb:	83 ec 04             	sub    $0x4,%esp
f0117bfe:	68 40 b1 13 f0       	push   $0xf013b140
f0117c03:	6a 71                	push   $0x71
f0117c05:	68 5a b0 13 f0       	push   $0xf013b05a
f0117c0a:	e8 f6 85 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117c0f:	e8 b4 c1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117c14:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117c17:	74 14                	je     f0117c2d <test_kmalloc+0x872>
f0117c19:	83 ec 04             	sub    $0x4,%esp
f0117c1c:	68 74 b0 13 f0       	push   $0xf013b074
f0117c21:	6a 72                	push   $0x72
f0117c23:	68 5a b0 13 f0       	push   $0xf013b05a
f0117c28:	e8 d8 85 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117c2d:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117c30:	e8 68 4f ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117c35:	29 c3                	sub    %eax,%ebx
f0117c37:	89 d8                	mov    %ebx,%eax
f0117c39:	3d 00 03 00 00       	cmp    $0x300,%eax
f0117c3e:	74 14                	je     f0117c54 <test_kmalloc+0x899>
f0117c40:	83 ec 04             	sub    $0x4,%esp
f0117c43:	68 dc b0 13 f0       	push   $0xf013b0dc
f0117c48:	6a 73                	push   $0x73
f0117c4a:	68 5a b0 13 f0       	push   $0xf013b05a
f0117c4f:	e8 b1 85 fe ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0117c54:	e8 44 4f ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117c59:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117c5c:	e8 67 c1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117c61:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0117c64:	83 ec 0c             	sub    $0xc,%esp
f0117c67:	68 00 fc 5f 00       	push   $0x5ffc00
f0117c6c:	e8 14 fc fe ff       	call   f0107885 <kmalloc>
f0117c71:	83 c4 10             	add    $0x10,%esp
f0117c74:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117c7a:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0117c80:	89 c1                	mov    %eax,%ecx
f0117c82:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0117c89:	10 00 00 
f0117c8c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0117c92:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117c97:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0117c9d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117ca3:	ba 00 00 00 00       	mov    $0x0,%edx
f0117ca8:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0117cae:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117cb4:	29 d0                	sub    %edx,%eax
f0117cb6:	89 c3                	mov    %eax,%ebx
f0117cb8:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0117cbf:	10 00 00 
f0117cc2:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0117cc7:	0f b6 d0             	movzbl %al,%edx
f0117cca:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117cd0:	01 d0                	add    %edx,%eax
f0117cd2:	48                   	dec    %eax
f0117cd3:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0117cd9:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0117cdf:	ba 00 00 00 00       	mov    $0x0,%edx
f0117ce4:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0117cea:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0117cf0:	29 d0                	sub    %edx,%eax
f0117cf2:	01 c3                	add    %eax,%ebx
f0117cf4:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0117cfb:	10 00 00 
f0117cfe:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0117d03:	0f b6 c0             	movzbl %al,%eax
f0117d06:	c1 e0 04             	shl    $0x4,%eax
f0117d09:	89 c2                	mov    %eax,%edx
f0117d0b:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0117d11:	01 d0                	add    %edx,%eax
f0117d13:	48                   	dec    %eax
f0117d14:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0117d1a:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0117d20:	ba 00 00 00 00       	mov    $0x0,%edx
f0117d25:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0117d2b:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0117d31:	29 d0                	sub    %edx,%eax
f0117d33:	01 d8                	add    %ebx,%eax
f0117d35:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0117d3a:	39 c1                	cmp    %eax,%ecx
f0117d3c:	74 14                	je     f0117d52 <test_kmalloc+0x997>
f0117d3e:	83 ec 04             	sub    $0x4,%esp
f0117d41:	68 40 b1 13 f0       	push   $0xf013b140
f0117d46:	6a 79                	push   $0x79
f0117d48:	68 5a b0 13 f0       	push   $0xf013b05a
f0117d4d:	e8 b3 84 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117d52:	e8 71 c0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117d57:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117d5a:	74 14                	je     f0117d70 <test_kmalloc+0x9b5>
f0117d5c:	83 ec 04             	sub    $0x4,%esp
f0117d5f:	68 74 b0 13 f0       	push   $0xf013b074
f0117d64:	6a 7a                	push   $0x7a
f0117d66:	68 5a b0 13 f0       	push   $0xf013b05a
f0117d6b:	e8 95 84 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117d70:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117d73:	e8 25 4e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117d78:	29 c3                	sub    %eax,%ebx
f0117d7a:	89 d8                	mov    %ebx,%eax
f0117d7c:	3d 00 06 00 00       	cmp    $0x600,%eax
f0117d81:	74 14                	je     f0117d97 <test_kmalloc+0x9dc>
f0117d83:	83 ec 04             	sub    $0x4,%esp
f0117d86:	68 dc b0 13 f0       	push   $0xf013b0dc
f0117d8b:	6a 7b                	push   $0x7b
f0117d8d:	68 5a b0 13 f0       	push   $0xf013b05a
f0117d92:	e8 6e 84 fe ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0117d97:	e8 01 4e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117d9c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117d9f:	e8 24 c0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117da4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0117da7:	83 ec 0c             	sub    $0xc,%esp
f0117daa:	68 00 38 00 00       	push   $0x3800
f0117daf:	e8 d1 fa fe ff       	call   f0107885 <kmalloc>
f0117db4:	83 c4 10             	add    $0x10,%esp
f0117db7:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117dbd:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0117dc3:	89 c1                	mov    %eax,%ecx
f0117dc5:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0117dcc:	10 00 00 
f0117dcf:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0117dd5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117dda:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0117de0:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0117de6:	ba 00 00 00 00       	mov    $0x0,%edx
f0117deb:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0117df1:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0117df7:	29 d0                	sub    %edx,%eax
f0117df9:	89 c3                	mov    %eax,%ebx
f0117dfb:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0117e02:	10 00 00 
f0117e05:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0117e0a:	0f b6 d0             	movzbl %al,%edx
f0117e0d:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0117e13:	01 d0                	add    %edx,%eax
f0117e15:	48                   	dec    %eax
f0117e16:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0117e1c:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0117e22:	ba 00 00 00 00       	mov    $0x0,%edx
f0117e27:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0117e2d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0117e33:	29 d0                	sub    %edx,%eax
f0117e35:	01 c3                	add    %eax,%ebx
f0117e37:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0117e3e:	10 00 00 
f0117e41:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0117e46:	0f b6 c0             	movzbl %al,%eax
f0117e49:	c1 e0 04             	shl    $0x4,%eax
f0117e4c:	89 c2                	mov    %eax,%edx
f0117e4e:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0117e54:	01 d0                	add    %edx,%eax
f0117e56:	48                   	dec    %eax
f0117e57:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0117e5d:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0117e63:	ba 00 00 00 00       	mov    $0x0,%edx
f0117e68:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0117e6e:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0117e74:	29 d0                	sub    %edx,%eax
f0117e76:	01 d8                	add    %ebx,%eax
f0117e78:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0117e7d:	39 c1                	cmp    %eax,%ecx
f0117e7f:	74 17                	je     f0117e98 <test_kmalloc+0xadd>
f0117e81:	83 ec 04             	sub    $0x4,%esp
f0117e84:	68 40 b1 13 f0       	push   $0xf013b140
f0117e89:	68 81 00 00 00       	push   $0x81
f0117e8e:	68 5a b0 13 f0       	push   $0xf013b05a
f0117e93:	e8 6d 83 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117e98:	e8 2b bf fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117e9d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117ea0:	74 17                	je     f0117eb9 <test_kmalloc+0xafe>
f0117ea2:	83 ec 04             	sub    $0x4,%esp
f0117ea5:	68 74 b0 13 f0       	push   $0xf013b074
f0117eaa:	68 82 00 00 00       	push   $0x82
f0117eaf:	68 5a b0 13 f0       	push   $0xf013b05a
f0117eb4:	e8 4c 83 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117eb9:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117ebc:	e8 dc 4c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117ec1:	29 c3                	sub    %eax,%ebx
f0117ec3:	89 d8                	mov    %ebx,%eax
f0117ec5:	83 f8 04             	cmp    $0x4,%eax
f0117ec8:	74 17                	je     f0117ee1 <test_kmalloc+0xb26>
f0117eca:	83 ec 04             	sub    $0x4,%esp
f0117ecd:	68 dc b0 13 f0       	push   $0xf013b0dc
f0117ed2:	68 83 00 00 00       	push   $0x83
f0117ed7:	68 5a b0 13 f0       	push   $0xf013b05a
f0117edc:	e8 24 83 fe ff       	call   f0100205 <_panic>

		cprintf("\b\b\b50%");
f0117ee1:	83 ec 0c             	sub    $0xc,%esp
f0117ee4:	68 a6 b1 13 f0       	push   $0xf013b1a6
f0117ee9:	e8 20 8e fe ff       	call   f0100d0e <cprintf>
f0117eee:	83 c4 10             	add    $0x10,%esp
		//Checking read/write on the allocated spaces
		{
			freeFrames = sys_calculate_free_frames() ;
f0117ef1:	e8 a7 4c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0117ef6:	89 45 dc             	mov    %eax,-0x24(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0117ef9:	e8 ca be fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117efe:	89 45 d8             	mov    %eax,-0x28(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f0117f01:	c7 85 f8 fe ff ff ff 	movl   $0x1ffbff,-0x108(%ebp)
f0117f08:	fb 1f 00 
			byteArr = (char *) ptr_allocations[0];
f0117f0b:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0117f11:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
			byteArr[0] = minByte ;
f0117f17:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0117f1d:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0117f20:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f0117f22:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f0117f28:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0117f2e:	01 c2                	add    %eax,%edx
f0117f30:	8a 45 f2             	mov    -0xe(%ebp),%al
f0117f33:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f0117f35:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0117f3b:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f0117f41:	c7 85 ec fe ff ff ff 	movl   $0xffdff,-0x114(%ebp)
f0117f48:	fd 0f 00 
			shortArr[0] = minShort;
f0117f4b:	8b 95 f0 fe ff ff    	mov    -0x110(%ebp),%edx
f0117f51:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0117f54:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f0117f57:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0117f5d:	01 c0                	add    %eax,%eax
f0117f5f:	89 c2                	mov    %eax,%edx
f0117f61:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0117f67:	01 c2                	add    %eax,%edx
f0117f69:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0117f6d:	66 89 02             	mov    %ax,(%edx)

			//In next 2 KB
			intArr = (int *) ptr_allocations[2];
f0117f70:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0117f76:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
			lastIndexOfInt = (2*kilo)/sizeof(int) - 1;
f0117f7c:	c7 85 e4 fe ff ff ff 	movl   $0x1ff,-0x11c(%ebp)
f0117f83:	01 00 00 
			intArr[0] = minInt;
f0117f86:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0117f8c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0117f8f:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f0117f91:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0117f97:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0117f9e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0117fa4:	01 c2                	add    %eax,%edx
f0117fa6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117fa9:	89 02                	mov    %eax,(%edx)

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f0117fab:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0117fb1:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f0117fb7:	c7 85 dc fe ff ff 7f 	movl   $0x37f,-0x124(%ebp)
f0117fbe:	03 00 00 
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f0117fc1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117fc7:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0117fca:	88 10                	mov    %dl,(%eax)
f0117fcc:	8b 95 e0 fe ff ff    	mov    -0x120(%ebp),%edx
f0117fd2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0117fd5:	66 89 42 02          	mov    %ax,0x2(%edx)
f0117fd9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117fdf:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0117fe2:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f0117fe5:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117feb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117ff2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117ff8:	01 c2                	add    %eax,%edx
f0117ffa:	8a 45 f2             	mov    -0xe(%ebp),%al
f0117ffd:	88 02                	mov    %al,(%edx)
f0117fff:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118005:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011800c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118012:	01 c2                	add    %eax,%edx
f0118014:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118018:	66 89 42 02          	mov    %ax,0x2(%edx)
f011801c:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118022:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118029:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011802f:	01 c2                	add    %eax,%edx
f0118031:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118034:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte2 = (6*Mega-kilo)/sizeof(char) - 1;
f0118037:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f011803e:	fb 5f 00 
			byteArr2 = (char *) ptr_allocations[6];
f0118041:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0118047:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
			byteArr2[0] = minByte ;
f011804d:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118053:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118056:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2 / 2] = maxByte / 2;
f0118058:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011805e:	89 c2                	mov    %eax,%edx
f0118060:	c1 ea 1f             	shr    $0x1f,%edx
f0118063:	01 d0                	add    %edx,%eax
f0118065:	d1 f8                	sar    %eax
f0118067:	89 c2                	mov    %eax,%edx
f0118069:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011806f:	01 c2                	add    %eax,%edx
f0118071:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118074:	88 c1                	mov    %al,%cl
f0118076:	c0 e9 07             	shr    $0x7,%cl
f0118079:	01 c8                	add    %ecx,%eax
f011807b:	d0 f8                	sar    %al
f011807d:	88 02                	mov    %al,(%edx)
			byteArr2[lastIndexOfByte2] = maxByte ;
f011807f:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f0118085:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011808b:	01 c2                	add    %eax,%edx
f011808d:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118090:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f0118092:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0118098:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f011809e:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f01180a5:	1b 00 00 
			shortArr2[0] = minShort;
f01180a8:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f01180ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01180b1:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f01180b4:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01180ba:	01 c0                	add    %eax,%eax
f01180bc:	89 c2                	mov    %eax,%edx
f01180be:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01180c4:	01 c2                	add    %eax,%edx
f01180c6:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f01180ca:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f01180cd:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01180d3:	8a 00                	mov    (%eax),%al
f01180d5:	3a 45 f3             	cmp    -0xd(%ebp),%al
f01180d8:	75 15                	jne    f01180ef <test_kmalloc+0xd34>
f01180da:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f01180e0:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01180e6:	01 d0                	add    %edx,%eax
f01180e8:	8a 00                	mov    (%eax),%al
f01180ea:	3a 45 f2             	cmp    -0xe(%ebp),%al
f01180ed:	74 17                	je     f0118106 <test_kmalloc+0xd4b>
f01180ef:	83 ec 04             	sub    $0x4,%esp
f01180f2:	68 b0 b1 13 f0       	push   $0xf013b1b0
f01180f7:	68 b2 00 00 00       	push   $0xb2
f01180fc:	68 5a b0 13 f0       	push   $0xf013b05a
f0118101:	e8 ff 80 fe ff       	call   f0100205 <_panic>
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0118106:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011810c:	66 8b 00             	mov    (%eax),%ax
f011810f:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0118113:	75 1b                	jne    f0118130 <test_kmalloc+0xd75>
f0118115:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011811b:	01 c0                	add    %eax,%eax
f011811d:	89 c2                	mov    %eax,%edx
f011811f:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0118125:	01 d0                	add    %edx,%eax
f0118127:	66 8b 00             	mov    (%eax),%ax
f011812a:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f011812e:	74 17                	je     f0118147 <test_kmalloc+0xd8c>
f0118130:	83 ec 04             	sub    $0x4,%esp
f0118133:	68 b0 b1 13 f0       	push   $0xf013b1b0
f0118138:	68 b3 00 00 00       	push   $0xb3
f011813d:	68 5a b0 13 f0       	push   $0xf013b05a
f0118142:	e8 be 80 fe ff       	call   f0100205 <_panic>
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) panic("Wrong allocation: stored values are wrongly changed!");
f0118147:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011814d:	8b 00                	mov    (%eax),%eax
f011814f:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0118152:	75 1c                	jne    f0118170 <test_kmalloc+0xdb5>
f0118154:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011815a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118161:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118167:	01 d0                	add    %edx,%eax
f0118169:	8b 00                	mov    (%eax),%eax
f011816b:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f011816e:	74 17                	je     f0118187 <test_kmalloc+0xdcc>
f0118170:	83 ec 04             	sub    $0x4,%esp
f0118173:	68 b0 b1 13 f0       	push   $0xf013b1b0
f0118178:	68 b4 00 00 00       	push   $0xb4
f011817d:	68 5a b0 13 f0       	push   $0xf013b05a
f0118182:	e8 7e 80 fe ff       	call   f0100205 <_panic>

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	panic("Wrong allocation: stored values are wrongly changed!");
f0118187:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011818d:	8a 00                	mov    (%eax),%al
f011818f:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118192:	75 1c                	jne    f01181b0 <test_kmalloc+0xdf5>
f0118194:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011819a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01181a1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01181a7:	01 d0                	add    %edx,%eax
f01181a9:	8a 00                	mov    (%eax),%al
f01181ab:	3a 45 f2             	cmp    -0xe(%ebp),%al
f01181ae:	74 17                	je     f01181c7 <test_kmalloc+0xe0c>
f01181b0:	83 ec 04             	sub    $0x4,%esp
f01181b3:	68 b0 b1 13 f0       	push   $0xf013b1b0
f01181b8:	68 b6 00 00 00       	push   $0xb6
f01181bd:	68 5a b0 13 f0       	push   $0xf013b05a
f01181c2:	e8 3e 80 fe ff       	call   f0100205 <_panic>
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	panic("Wrong allocation: stored values are wrongly changed!");
f01181c7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01181cd:	66 8b 40 02          	mov    0x2(%eax),%ax
f01181d1:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f01181d5:	75 1f                	jne    f01181f6 <test_kmalloc+0xe3b>
f01181d7:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01181dd:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01181e4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01181ea:	01 d0                	add    %edx,%eax
f01181ec:	66 8b 40 02          	mov    0x2(%eax),%ax
f01181f0:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f01181f4:	74 17                	je     f011820d <test_kmalloc+0xe52>
f01181f6:	83 ec 04             	sub    $0x4,%esp
f01181f9:	68 b0 b1 13 f0       	push   $0xf013b1b0
f01181fe:	68 b7 00 00 00       	push   $0xb7
f0118203:	68 5a b0 13 f0       	push   $0xf013b05a
f0118208:	e8 f8 7f fe ff       	call   f0100205 <_panic>
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	panic("Wrong allocation: stored values are wrongly changed!");
f011820d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118213:	8b 40 04             	mov    0x4(%eax),%eax
f0118216:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0118219:	75 1d                	jne    f0118238 <test_kmalloc+0xe7d>
f011821b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118221:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118228:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011822e:	01 d0                	add    %edx,%eax
f0118230:	8b 40 04             	mov    0x4(%eax),%eax
f0118233:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0118236:	74 17                	je     f011824f <test_kmalloc+0xe94>
f0118238:	83 ec 04             	sub    $0x4,%esp
f011823b:	68 b0 b1 13 f0       	push   $0xf013b1b0
f0118240:	68 b8 00 00 00       	push   $0xb8
f0118245:	68 5a b0 13 f0       	push   $0xf013b05a
f011824a:	e8 b6 7f fe ff       	call   f0100205 <_panic>

			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2/2] != maxByte/2 || byteArr2[lastIndexOfByte2] != maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f011824f:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118255:	8a 00                	mov    (%eax),%al
f0118257:	3a 45 f3             	cmp    -0xd(%ebp),%al
f011825a:	75 40                	jne    f011829c <test_kmalloc+0xee1>
f011825c:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0118262:	89 c2                	mov    %eax,%edx
f0118264:	c1 ea 1f             	shr    $0x1f,%edx
f0118267:	01 d0                	add    %edx,%eax
f0118269:	d1 f8                	sar    %eax
f011826b:	89 c2                	mov    %eax,%edx
f011826d:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118273:	01 d0                	add    %edx,%eax
f0118275:	8a 10                	mov    (%eax),%dl
f0118277:	8a 45 f2             	mov    -0xe(%ebp),%al
f011827a:	88 c1                	mov    %al,%cl
f011827c:	c0 e9 07             	shr    $0x7,%cl
f011827f:	01 c8                	add    %ecx,%eax
f0118281:	d0 f8                	sar    %al
f0118283:	38 c2                	cmp    %al,%dl
f0118285:	75 15                	jne    f011829c <test_kmalloc+0xee1>
f0118287:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f011828d:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118293:	01 d0                	add    %edx,%eax
f0118295:	8a 00                	mov    (%eax),%al
f0118297:	3a 45 f2             	cmp    -0xe(%ebp),%al
f011829a:	74 17                	je     f01182b3 <test_kmalloc+0xef8>
f011829c:	83 ec 04             	sub    $0x4,%esp
f011829f:	68 b0 b1 13 f0       	push   $0xf013b1b0
f01182a4:	68 ba 00 00 00       	push   $0xba
f01182a9:	68 5a b0 13 f0       	push   $0xf013b05a
f01182ae:	e8 52 7f fe ff       	call   f0100205 <_panic>
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f01182b3:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01182b9:	66 8b 00             	mov    (%eax),%ax
f01182bc:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f01182c0:	75 1b                	jne    f01182dd <test_kmalloc+0xf22>
f01182c2:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01182c8:	01 c0                	add    %eax,%eax
f01182ca:	89 c2                	mov    %eax,%edx
f01182cc:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01182d2:	01 d0                	add    %edx,%eax
f01182d4:	66 8b 00             	mov    (%eax),%ax
f01182d7:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f01182db:	74 17                	je     f01182f4 <test_kmalloc+0xf39>
f01182dd:	83 ec 04             	sub    $0x4,%esp
f01182e0:	68 b0 b1 13 f0       	push   $0xf013b1b0
f01182e5:	68 bb 00 00 00       	push   $0xbb
f01182ea:	68 5a b0 13 f0       	push   $0xf013b05a
f01182ef:	e8 11 7f fe ff       	call   f0100205 <_panic>

			if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f01182f4:	e8 a4 48 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01182f9:	89 c2                	mov    %eax,%edx
f01182fb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01182fe:	39 c2                	cmp    %eax,%edx
f0118300:	74 17                	je     f0118319 <test_kmalloc+0xf5e>
f0118302:	83 ec 04             	sub    $0x4,%esp
f0118305:	68 dc b0 13 f0       	push   $0xf013b0dc
f011830a:	68 bd 00 00 00       	push   $0xbd
f011830f:	68 5a b0 13 f0       	push   $0xf013b05a
f0118314:	e8 ec 7e fe ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118319:	e8 aa ba fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011831e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118321:	74 17                	je     f011833a <test_kmalloc+0xf7f>
f0118323:	83 ec 04             	sub    $0x4,%esp
f0118326:	68 74 b0 13 f0       	push   $0xf013b074
f011832b:	68 be 00 00 00       	push   $0xbe
f0118330:	68 5a b0 13 f0       	push   $0xf013b05a
f0118335:	e8 cb 7e fe ff       	call   f0100205 <_panic>
		}

		cprintf("\b\b\b80%");
f011833a:	83 ec 0c             	sub    $0xc,%esp
f011833d:	68 e5 b1 13 f0       	push   $0xf013b1e5
f0118342:	e8 c7 89 fe ff       	call   f0100d0e <cprintf>
f0118347:	83 c4 10             	add    $0x10,%esp

		//Insufficient space again
		freeFrames = sys_calculate_free_frames() ;
f011834a:	e8 4e 48 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011834f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118352:	e8 71 ba fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118357:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+4*kilo+4*kilo+8*kilo+3*Mega+6*Mega+16*kilo) ;
f011835a:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f0118361:	10 00 00 
f0118364:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011836a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011836f:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f0118375:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011837b:	ba 00 00 00 00       	mov    $0x0,%edx
f0118380:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f0118386:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011838c:	29 d0                	sub    %edx,%eax
f011838e:	89 c1                	mov    %eax,%ecx
f0118390:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f0118397:	10 00 00 
f011839a:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011839f:	0f b6 d0             	movzbl %al,%edx
f01183a2:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01183a8:	01 d0                	add    %edx,%eax
f01183aa:	48                   	dec    %eax
f01183ab:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f01183b1:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01183b7:	ba 00 00 00 00       	mov    $0x0,%edx
f01183bc:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f01183c2:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01183c8:	29 d0                	sub    %edx,%eax
f01183ca:	01 c1                	add    %eax,%ecx
f01183cc:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f01183d3:	10 00 00 
f01183d6:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01183db:	0f b6 c0             	movzbl %al,%eax
f01183de:	c1 e0 04             	shl    $0x4,%eax
f01183e1:	89 c2                	mov    %eax,%edx
f01183e3:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01183e9:	01 d0                	add    %edx,%eax
f01183eb:	48                   	dec    %eax
f01183ec:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f01183f2:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01183f8:	ba 00 00 00 00       	mov    $0x0,%edx
f01183fd:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f0118403:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118409:	29 d0                	sub    %edx,%eax
f011840b:	01 c8                	add    %ecx,%eax
f011840d:	ba 00 50 2f 09       	mov    $0x92f5000,%edx
f0118412:	29 c2                	sub    %eax,%edx
f0118414:	89 d0                	mov    %edx,%eax
f0118416:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f011841c:	83 ec 0c             	sub    $0xc,%esp
f011841f:	ff b5 b0 fe ff ff    	pushl  -0x150(%ebp)
f0118425:	e8 5b f4 fe ff       	call   f0107885 <kmalloc>
f011842a:	83 c4 10             	add    $0x10,%esp
f011842d:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if (ptr_allocations[8] != NULL) panic("Allocating insufficient space: should return NULL");
f0118433:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0118439:	85 c0                	test   %eax,%eax
f011843b:	74 17                	je     f0118454 <test_kmalloc+0x1099>
f011843d:	83 ec 04             	sub    $0x4,%esp
f0118440:	68 28 b0 13 f0       	push   $0xf013b028
f0118445:	68 c8 00 00 00       	push   $0xc8
f011844a:	68 5a b0 13 f0       	push   $0xf013b05a
f011844f:	e8 b1 7d fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118454:	e8 6f b9 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118459:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011845c:	74 17                	je     f0118475 <test_kmalloc+0x10ba>
f011845e:	83 ec 04             	sub    $0x4,%esp
f0118461:	68 74 b0 13 f0       	push   $0xf013b074
f0118466:	68 c9 00 00 00       	push   $0xc9
f011846b:	68 5a b0 13 f0       	push   $0xf013b05a
f0118470:	e8 90 7d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118475:	e8 23 47 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011847a:	89 c2                	mov    %eax,%edx
f011847c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011847f:	39 c2                	cmp    %eax,%edx
f0118481:	74 17                	je     f011849a <test_kmalloc+0x10df>
f0118483:	83 ec 04             	sub    $0x4,%esp
f0118486:	68 dc b0 13 f0       	push   $0xf013b0dc
f011848b:	68 ca 00 00 00       	push   $0xca
f0118490:	68 5a b0 13 f0       	push   $0xf013b05a
f0118495:	e8 6b 7d fe ff       	call   f0100205 <_panic>

		cprintf("\b\b\b90%");
f011849a:	83 ec 0c             	sub    $0xc,%esp
f011849d:	68 ec b1 13 f0       	push   $0xf013b1ec
f01184a2:	e8 67 88 fe ff       	call   f0100d0e <cprintf>
f01184a7:	83 c4 10             	add    $0x10,%esp

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f01184aa:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01184b0:	05 00 40 00 00       	add    $0x4000,%eax
f01184b5:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f01184bb:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f01184c2:	10 00 00 
f01184c5:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01184cb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01184d0:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f01184d6:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01184dc:	ba 00 00 00 00       	mov    $0x0,%edx
f01184e1:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f01184e7:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01184ed:	29 d0                	sub    %edx,%eax
f01184ef:	89 c1                	mov    %eax,%ecx
f01184f1:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f01184f8:	10 00 00 
f01184fb:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0118500:	0f b6 d0             	movzbl %al,%edx
f0118503:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0118509:	01 d0                	add    %edx,%eax
f011850b:	48                   	dec    %eax
f011850c:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0118512:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0118518:	ba 00 00 00 00       	mov    $0x0,%edx
f011851d:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0118523:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0118529:	29 d0                	sub    %edx,%eax
f011852b:	01 c1                	add    %eax,%ecx
f011852d:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0118534:	10 00 00 
f0118537:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011853c:	0f b6 c0             	movzbl %al,%eax
f011853f:	c1 e0 04             	shl    $0x4,%eax
f0118542:	89 c2                	mov    %eax,%edx
f0118544:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011854a:	01 d0                	add    %edx,%eax
f011854c:	48                   	dec    %eax
f011854d:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0118553:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0118559:	ba 00 00 00 00       	mov    $0x0,%edx
f011855e:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0118564:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011856a:	29 d0                	sub    %edx,%eax
f011856c:	01 c8                	add    %ecx,%eax
f011856e:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0118573:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0118576:	eb 6a                	jmp    f01185e2 <test_kmalloc+0x1227>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, va, &table);
f0118578:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f011857d:	83 ec 04             	sub    $0x4,%esp
f0118580:	8d 95 3c fe ff ff    	lea    -0x1c4(%ebp),%edx
f0118586:	52                   	push   %edx
f0118587:	ff 75 f4             	pushl  -0xc(%ebp)
f011858a:	50                   	push   %eax
f011858b:	e8 21 e5 fe ff       	call   f0106ab1 <get_page_table>
f0118590:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f0118593:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0118599:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011859c:	c1 ea 0c             	shr    $0xc,%edx
f011859f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01185a5:	c1 e2 02             	shl    $0x2,%edx
f01185a8:	01 d0                	add    %edx,%eax
f01185aa:	8b 00                	mov    (%eax),%eax
f01185ac:	25 ff 0f 00 00       	and    $0xfff,%eax
f01185b1:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f01185b7:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01185bd:	83 e0 04             	and    $0x4,%eax
f01185c0:	85 c0                	test   %eax,%eax
f01185c2:	74 17                	je     f01185db <test_kmalloc+0x1220>
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
f01185c4:	83 ec 04             	sub    $0x4,%esp
f01185c7:	68 f4 b1 13 f0       	push   $0xf013b1f4
f01185cc:	68 d7 00 00 00       	push   $0xd7
f01185d1:	68 5a b0 13 f0       	push   $0xf013b05a
f01185d6:	e8 2a 7c fe ff       	call   f0100205 <_panic>
		cprintf("\b\b\b90%");

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f01185db:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01185e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01185e5:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f01185eb:	72 8b                	jb     f0118578 <test_kmalloc+0x11bd>
			uint32 perm = table[PTX(va)] & 0xFFF;
			if ((perm & PERM_USER) == PERM_USER)
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
		}

		cprintf("\b\b\b100%\n");
f01185ed:	83 ec 0c             	sub    $0xc,%esp
f01185f0:	68 3e b2 13 f0       	push   $0xf013b23e
f01185f5:	e8 14 87 fe ff       	call   f0100d0e <cprintf>
f01185fa:	83 c4 10             	add    $0x10,%esp

	}

	cprintf("\nCongratulations!! test kmalloc completed successfully.\n");
f01185fd:	83 ec 0c             	sub    $0xc,%esp
f0118600:	68 48 b2 13 f0       	push   $0xf013b248
f0118605:	e8 04 87 fe ff       	call   f0100d0e <cprintf>
f011860a:	83 c4 10             	add    $0x10,%esp

	return 1;
f011860d:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0118612:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0118615:	5b                   	pop    %ebx
f0118616:	5f                   	pop    %edi
f0118617:	5d                   	pop    %ebp
f0118618:	c3                   	ret    

f0118619 <test_kmalloc_nextfit>:

int test_kmalloc_nextfit()
{
f0118619:	55                   	push   %ebp
f011861a:	89 e5                	mov    %esp,%ebp
f011861c:	57                   	push   %edi
f011861d:	53                   	push   %ebx
f011861e:	81 ec 70 04 00 00    	sub    $0x470,%esp
	cprintf("==============================================\n");
f0118624:	83 ec 0c             	sub    $0xc,%esp
f0118627:	68 9c af 13 f0       	push   $0xf013af9c
f011862c:	e8 dd 86 fe ff       	call   f0100d0e <cprintf>
f0118631:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0118634:	83 ec 0c             	sub    $0xc,%esp
f0118637:	68 cc af 13 f0       	push   $0xf013afcc
f011863c:	e8 cd 86 fe ff       	call   f0100d0e <cprintf>
f0118641:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0118644:	83 ec 0c             	sub    $0xc,%esp
f0118647:	68 9c af 13 f0       	push   $0xf013af9c
f011864c:	e8 bd 86 fe ff       	call   f0100d0e <cprintf>
f0118651:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f0118654:	8d 95 88 fb ff ff    	lea    -0x478(%ebp),%edx
f011865a:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f011865f:	b8 00 00 00 00       	mov    $0x0,%eax
f0118664:	89 d7                	mov    %edx,%edi
f0118666:	f3 ab                	rep stos %eax,%es:(%edi)
	cprintf("This test has THREE cases. A pass message will be displayed after each one.\n");
f0118668:	83 ec 0c             	sub    $0xc,%esp
f011866b:	68 84 b2 13 f0       	push   $0xf013b284
f0118670:	e8 99 86 fe ff       	call   f0100d0e <cprintf>
f0118675:	83 c4 10             	add    $0x10,%esp

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f0118678:	e8 20 45 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011867d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f0118680:	e8 43 b7 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118685:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0118688:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011868f:	eb 1f                	jmp    f01186b0 <test_kmalloc_nextfit+0x97>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f0118691:	83 ec 0c             	sub    $0xc,%esp
f0118694:	68 00 00 20 00       	push   $0x200000
f0118699:	e8 e7 f1 fe ff       	call   f0107885 <kmalloc>
f011869e:	83 c4 10             	add    $0x10,%esp
f01186a1:	89 c2                	mov    %eax,%edx
f01186a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01186a6:	89 94 85 88 fb ff ff 	mov    %edx,-0x478(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f01186ad:	ff 45 f4             	incl   -0xc(%ebp)
f01186b0:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f01186b4:	7e db                	jle    f0118691 <test_kmalloc_nextfit+0x78>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);
f01186b6:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f01186bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01186c0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01186c5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01186c8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01186cb:	ba 00 00 00 00       	mov    $0x0,%edx
f01186d0:	f7 75 e8             	divl   -0x18(%ebp)
f01186d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01186d6:	29 d0                	sub    %edx,%eax
f01186d8:	89 c1                	mov    %eax,%ecx
f01186da:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f01186e1:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01186e6:	0f b6 d0             	movzbl %al,%edx
f01186e9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01186ec:	01 d0                	add    %edx,%eax
f01186ee:	48                   	dec    %eax
f01186ef:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01186f2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01186f5:	ba 00 00 00 00       	mov    $0x0,%edx
f01186fa:	f7 75 e0             	divl   -0x20(%ebp)
f01186fd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118700:	29 d0                	sub    %edx,%eax
f0118702:	01 c1                	add    %eax,%ecx
f0118704:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f011870b:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0118710:	0f b6 c0             	movzbl %al,%eax
f0118713:	c1 e0 04             	shl    $0x4,%eax
f0118716:	89 c2                	mov    %eax,%edx
f0118718:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011871b:	01 d0                	add    %edx,%eax
f011871d:	48                   	dec    %eax
f011871e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0118721:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0118724:	ba 00 00 00 00       	mov    $0x0,%edx
f0118729:	f7 75 d8             	divl   -0x28(%ebp)
f011872c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011872f:	29 d0                	sub    %edx,%eax
f0118731:	01 c8                	add    %ecx,%eax
f0118733:	ba 00 b0 1f 00       	mov    $0x1fb000,%edx
f0118738:	29 c2                	sub    %eax,%edx
f011873a:	89 d0                	mov    %edx,%eax
f011873c:	83 ec 0c             	sub    $0xc,%esp
f011873f:	50                   	push   %eax
f0118740:	e8 40 f1 fe ff       	call   f0107885 <kmalloc>
f0118745:	83 c4 10             	add    $0x10,%esp
f0118748:	89 85 c4 fc ff ff    	mov    %eax,-0x33c(%ebp)


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011874e:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f0118754:	89 c1                	mov    %eax,%ecx
f0118756:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f011875d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0118760:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118765:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0118768:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011876b:	ba 00 00 00 00       	mov    $0x0,%edx
f0118770:	f7 75 d0             	divl   -0x30(%ebp)
f0118773:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0118776:	29 d0                	sub    %edx,%eax
f0118778:	89 c3                	mov    %eax,%ebx
f011877a:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0118781:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0118786:	0f b6 d0             	movzbl %al,%edx
f0118789:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011878c:	01 d0                	add    %edx,%eax
f011878e:	48                   	dec    %eax
f011878f:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0118792:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0118795:	ba 00 00 00 00       	mov    $0x0,%edx
f011879a:	f7 75 c8             	divl   -0x38(%ebp)
f011879d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01187a0:	29 d0                	sub    %edx,%eax
f01187a2:	01 c3                	add    %eax,%ebx
f01187a4:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01187ab:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01187b0:	0f b6 c0             	movzbl %al,%eax
f01187b3:	c1 e0 04             	shl    $0x4,%eax
f01187b6:	89 c2                	mov    %eax,%edx
f01187b8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01187bb:	01 d0                	add    %edx,%eax
f01187bd:	48                   	dec    %eax
f01187be:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01187c1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01187c4:	ba 00 00 00 00       	mov    $0x0,%edx
f01187c9:	f7 75 c0             	divl   -0x40(%ebp)
f01187cc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01187cf:	29 d0                	sub    %edx,%eax
f01187d1:	01 d8                	add    %ebx,%eax
f01187d3:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01187d8:	39 c1                	cmp    %eax,%ecx
f01187da:	0f 85 ed 04 00 00    	jne    f0118ccd <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f01187e0:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f01187e6:	89 c1                	mov    %eax,%ecx
f01187e8:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01187ef:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01187f2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01187f7:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01187fa:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01187fd:	ba 00 00 00 00       	mov    $0x0,%edx
f0118802:	f7 75 b8             	divl   -0x48(%ebp)
f0118805:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118808:	29 d0                	sub    %edx,%eax
f011880a:	89 c3                	mov    %eax,%ebx
f011880c:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0118813:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0118818:	0f b6 d0             	movzbl %al,%edx
f011881b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011881e:	01 d0                	add    %edx,%eax
f0118820:	48                   	dec    %eax
f0118821:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0118824:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118827:	ba 00 00 00 00       	mov    $0x0,%edx
f011882c:	f7 75 b0             	divl   -0x50(%ebp)
f011882f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118832:	29 d0                	sub    %edx,%eax
f0118834:	01 c3                	add    %eax,%ebx
f0118836:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f011883d:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0118842:	0f b6 c0             	movzbl %al,%eax
f0118845:	c1 e0 04             	shl    $0x4,%eax
f0118848:	89 c2                	mov    %eax,%edx
f011884a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011884d:	01 d0                	add    %edx,%eax
f011884f:	48                   	dec    %eax
f0118850:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0118853:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118856:	ba 00 00 00 00       	mov    $0x0,%edx
f011885b:	f7 75 a8             	divl   -0x58(%ebp)
f011885e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118861:	29 d0                	sub    %edx,%eax
f0118863:	01 d8                	add    %ebx,%eax
f0118865:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011886a:	39 c1                	cmp    %eax,%ecx
f011886c:	0f 85 5b 04 00 00    	jne    f0118ccd <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0118872:	8b 85 a8 fb ff ff    	mov    -0x458(%ebp),%eax
f0118878:	89 c1                	mov    %eax,%ecx
f011887a:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0118881:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0118884:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118889:	89 45 9c             	mov    %eax,-0x64(%ebp)
f011888c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011888f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118894:	f7 75 a0             	divl   -0x60(%ebp)
f0118897:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011889a:	29 d0                	sub    %edx,%eax
f011889c:	89 c3                	mov    %eax,%ebx
f011889e:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01188a5:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01188aa:	0f b6 d0             	movzbl %al,%edx
f01188ad:	8b 45 98             	mov    -0x68(%ebp),%eax
f01188b0:	01 d0                	add    %edx,%eax
f01188b2:	48                   	dec    %eax
f01188b3:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01188b6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01188b9:	ba 00 00 00 00       	mov    $0x0,%edx
f01188be:	f7 75 98             	divl   -0x68(%ebp)
f01188c1:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01188c4:	29 d0                	sub    %edx,%eax
f01188c6:	01 c3                	add    %eax,%ebx
f01188c8:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01188cf:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01188d4:	0f b6 c0             	movzbl %al,%eax
f01188d7:	c1 e0 04             	shl    $0x4,%eax
f01188da:	89 c2                	mov    %eax,%edx
f01188dc:	8b 45 90             	mov    -0x70(%ebp),%eax
f01188df:	01 d0                	add    %edx,%eax
f01188e1:	48                   	dec    %eax
f01188e2:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01188e5:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01188e8:	ba 00 00 00 00       	mov    $0x0,%edx
f01188ed:	f7 75 90             	divl   -0x70(%ebp)
f01188f0:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01188f3:	29 d0                	sub    %edx,%eax
f01188f5:	01 d8                	add    %ebx,%eax
f01188f7:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f01188fc:	39 c1                	cmp    %eax,%ecx
f01188fe:	0f 85 c9 03 00 00    	jne    f0118ccd <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0118904:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f011890a:	89 c1                	mov    %eax,%ecx
f011890c:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0118913:	8b 45 88             	mov    -0x78(%ebp),%eax
f0118916:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011891b:	89 45 84             	mov    %eax,-0x7c(%ebp)
f011891e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0118921:	ba 00 00 00 00       	mov    $0x0,%edx
f0118926:	f7 75 88             	divl   -0x78(%ebp)
f0118929:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011892c:	29 d0                	sub    %edx,%eax
f011892e:	89 c3                	mov    %eax,%ebx
f0118930:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0118937:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011893c:	0f b6 d0             	movzbl %al,%edx
f011893f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0118942:	01 d0                	add    %edx,%eax
f0118944:	48                   	dec    %eax
f0118945:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f011894b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0118951:	ba 00 00 00 00       	mov    $0x0,%edx
f0118956:	f7 75 80             	divl   -0x80(%ebp)
f0118959:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011895f:	29 d0                	sub    %edx,%eax
f0118961:	01 c3                	add    %eax,%ebx
f0118963:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f011896a:	10 00 00 
f011896d:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0118972:	0f b6 c0             	movzbl %al,%eax
f0118975:	c1 e0 04             	shl    $0x4,%eax
f0118978:	89 c2                	mov    %eax,%edx
f011897a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0118980:	01 d0                	add    %edx,%eax
f0118982:	48                   	dec    %eax
f0118983:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0118989:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011898f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118994:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f011899a:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01189a0:	29 d0                	sub    %edx,%eax
f01189a2:	01 d8                	add    %ebx,%eax
f01189a4:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f01189a9:	39 c1                	cmp    %eax,%ecx
f01189ab:	0f 85 1c 03 00 00    	jne    f0118ccd <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f01189b1:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f01189b7:	89 c1                	mov    %eax,%ecx
f01189b9:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01189c0:	10 00 00 
f01189c3:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01189c9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01189ce:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01189d4:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01189da:	ba 00 00 00 00       	mov    $0x0,%edx
f01189df:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01189e5:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01189eb:	29 d0                	sub    %edx,%eax
f01189ed:	89 c3                	mov    %eax,%ebx
f01189ef:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01189f6:	10 00 00 
f01189f9:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01189fe:	0f b6 d0             	movzbl %al,%edx
f0118a01:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0118a07:	01 d0                	add    %edx,%eax
f0118a09:	48                   	dec    %eax
f0118a0a:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0118a10:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118a16:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a1b:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0118a21:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118a27:	29 d0                	sub    %edx,%eax
f0118a29:	01 c3                	add    %eax,%ebx
f0118a2b:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0118a32:	10 00 00 
f0118a35:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0118a3a:	0f b6 c0             	movzbl %al,%eax
f0118a3d:	c1 e0 04             	shl    $0x4,%eax
f0118a40:	89 c2                	mov    %eax,%edx
f0118a42:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0118a48:	01 d0                	add    %edx,%eax
f0118a4a:	48                   	dec    %eax
f0118a4b:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0118a51:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0118a57:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a5c:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0118a62:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0118a68:	29 d0                	sub    %edx,%eax
f0118a6a:	01 d8                	add    %ebx,%eax
f0118a6c:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0118a71:	39 c1                	cmp    %eax,%ecx
f0118a73:	0f 85 54 02 00 00    	jne    f0118ccd <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f0118a79:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f0118a7f:	89 c1                	mov    %eax,%ecx
f0118a81:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0118a88:	10 00 00 
f0118a8b:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0118a91:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118a96:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0118a9c:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118aa2:	ba 00 00 00 00       	mov    $0x0,%edx
f0118aa7:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0118aad:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118ab3:	29 d0                	sub    %edx,%eax
f0118ab5:	89 c3                	mov    %eax,%ebx
f0118ab7:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0118abe:	10 00 00 
f0118ac1:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0118ac6:	0f b6 d0             	movzbl %al,%edx
f0118ac9:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0118acf:	01 d0                	add    %edx,%eax
f0118ad1:	48                   	dec    %eax
f0118ad2:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0118ad8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118ade:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ae3:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0118ae9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118aef:	29 d0                	sub    %edx,%eax
f0118af1:	01 c3                	add    %eax,%ebx
f0118af3:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0118afa:	10 00 00 
f0118afd:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0118b02:	0f b6 c0             	movzbl %al,%eax
f0118b05:	c1 e0 04             	shl    $0x4,%eax
f0118b08:	89 c2                	mov    %eax,%edx
f0118b0a:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0118b10:	01 d0                	add    %edx,%eax
f0118b12:	48                   	dec    %eax
f0118b13:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0118b19:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0118b1f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118b24:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0118b2a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0118b30:	29 d0                	sub    %edx,%eax
f0118b32:	01 d8                	add    %ebx,%eax
f0118b34:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f0118b39:	39 c1                	cmp    %eax,%ecx
f0118b3b:	0f 85 8c 01 00 00    	jne    f0118ccd <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f0118b41:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f0118b47:	89 c1                	mov    %eax,%ecx
f0118b49:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0118b50:	10 00 00 
f0118b53:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0118b59:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118b5e:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0118b64:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118b6a:	ba 00 00 00 00       	mov    $0x0,%edx
f0118b6f:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0118b75:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118b7b:	29 d0                	sub    %edx,%eax
f0118b7d:	89 c3                	mov    %eax,%ebx
f0118b7f:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0118b86:	10 00 00 
f0118b89:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0118b8e:	0f b6 d0             	movzbl %al,%edx
f0118b91:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0118b97:	01 d0                	add    %edx,%eax
f0118b99:	48                   	dec    %eax
f0118b9a:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0118ba0:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0118ba6:	ba 00 00 00 00       	mov    $0x0,%edx
f0118bab:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0118bb1:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0118bb7:	29 d0                	sub    %edx,%eax
f0118bb9:	01 c3                	add    %eax,%ebx
f0118bbb:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0118bc2:	10 00 00 
f0118bc5:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0118bca:	0f b6 c0             	movzbl %al,%eax
f0118bcd:	c1 e0 04             	shl    $0x4,%eax
f0118bd0:	89 c2                	mov    %eax,%edx
f0118bd2:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0118bd8:	01 d0                	add    %edx,%eax
f0118bda:	48                   	dec    %eax
f0118bdb:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0118be1:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118be7:	ba 00 00 00 00       	mov    $0x0,%edx
f0118bec:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0118bf2:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118bf8:	29 d0                	sub    %edx,%eax
f0118bfa:	01 d8                	add    %ebx,%eax
f0118bfc:	2d 00 c0 df 06       	sub    $0x6dfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f0118c01:	39 c1                	cmp    %eax,%ecx
f0118c03:	0f 85 c4 00 00 00    	jne    f0118ccd <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
f0118c09:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f0118c0f:	89 c1                	mov    %eax,%ecx
f0118c11:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0118c18:	10 00 00 
f0118c1b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118c21:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118c26:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0118c2c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118c32:	ba 00 00 00 00       	mov    $0x0,%edx
f0118c37:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0118c3d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118c43:	29 d0                	sub    %edx,%eax
f0118c45:	89 c3                	mov    %eax,%ebx
f0118c47:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0118c4e:	10 00 00 
f0118c51:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0118c56:	0f b6 d0             	movzbl %al,%edx
f0118c59:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0118c5f:	01 d0                	add    %edx,%eax
f0118c61:	48                   	dec    %eax
f0118c62:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0118c68:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118c6e:	ba 00 00 00 00       	mov    $0x0,%edx
f0118c73:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0118c79:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118c7f:	29 d0                	sub    %edx,%eax
f0118c81:	01 c3                	add    %eax,%ebx
f0118c83:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0118c8a:	10 00 00 
f0118c8d:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0118c92:	0f b6 c0             	movzbl %al,%eax
f0118c95:	c1 e0 04             	shl    $0x4,%eax
f0118c98:	89 c2                	mov    %eax,%edx
f0118c9a:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0118ca0:	01 d0                	add    %edx,%eax
f0118ca2:	48                   	dec    %eax
f0118ca3:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0118ca9:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0118caf:	ba 00 00 00 00       	mov    $0x0,%edx
f0118cb4:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0118cba:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0118cc0:	29 d0                	sub    %edx,%eax
f0118cc2:	01 d8                	add    %ebx,%eax
f0118cc4:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f0118cc9:	39 c1                	cmp    %eax,%ecx
f0118ccb:	74 17                	je     f0118ce4 <test_kmalloc_nextfit+0x6cb>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f0118ccd:	83 ec 04             	sub    $0x4,%esp
f0118cd0:	68 d4 b2 13 f0       	push   $0xf013b2d4
f0118cd5:	68 03 01 00 00       	push   $0x103
f0118cda:	68 5a b0 13 f0       	push   $0xf013b05a
f0118cdf:	e8 21 75 fe ff       	call   f0100205 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118ce4:	e8 df b0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118ce9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118cec:	74 17                	je     f0118d05 <test_kmalloc_nextfit+0x6ec>
f0118cee:	83 ec 04             	sub    $0x4,%esp
f0118cf1:	68 74 b0 13 f0       	push   $0xf013b074
f0118cf6:	68 05 01 00 00       	push   $0x105
f0118cfb:	68 5a b0 13 f0       	push   $0xf013b05a
f0118d00:	e8 00 75 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f0118d05:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118d08:	e8 90 3e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0118d0d:	29 c3                	sub    %eax,%ebx
f0118d0f:	89 d9                	mov    %ebx,%ecx
f0118d11:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0118d18:	10 00 00 
f0118d1b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0118d21:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118d26:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0118d2c:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0118d32:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d37:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0118d3d:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0118d43:	29 d0                	sub    %edx,%eax
f0118d45:	89 c3                	mov    %eax,%ebx
f0118d47:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0118d4e:	10 00 00 
f0118d51:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0118d56:	0f b6 d0             	movzbl %al,%edx
f0118d59:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0118d5f:	01 d0                	add    %edx,%eax
f0118d61:	48                   	dec    %eax
f0118d62:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0118d68:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0118d6e:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d73:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0118d79:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0118d7f:	29 d0                	sub    %edx,%eax
f0118d81:	01 c3                	add    %eax,%ebx
f0118d83:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0118d8a:	10 00 00 
f0118d8d:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0118d92:	0f b6 c0             	movzbl %al,%eax
f0118d95:	c1 e0 04             	shl    $0x4,%eax
f0118d98:	89 c2                	mov    %eax,%edx
f0118d9a:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0118da0:	01 d0                	add    %edx,%eax
f0118da2:	48                   	dec    %eax
f0118da3:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0118da9:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0118daf:	ba 00 00 00 00       	mov    $0x0,%edx
f0118db4:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0118dba:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0118dc0:	29 d0                	sub    %edx,%eax
f0118dc2:	01 d8                	add    %ebx,%eax
f0118dc4:	ba 00 b0 ff 09       	mov    $0x9ffb000,%edx
f0118dc9:	29 c2                	sub    %eax,%edx
f0118dcb:	89 d0                	mov    %edx,%eax
f0118dcd:	c1 e8 0c             	shr    $0xc,%eax
f0118dd0:	39 c1                	cmp    %eax,%ecx
f0118dd2:	74 17                	je     f0118deb <test_kmalloc_nextfit+0x7d2>
f0118dd4:	83 ec 04             	sub    $0x4,%esp
f0118dd7:	68 17 b3 13 f0       	push   $0xf013b317
f0118ddc:	68 06 01 00 00       	push   $0x106
f0118de1:	68 5a b0 13 f0       	push   $0xf013b05a
f0118de6:	e8 1a 74 fe ff       	call   f0100205 <_panic>

	// Make memory holes.
	freeDiskFrames = pf_calculate_free_frames() ;
f0118deb:	e8 d8 af fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118df0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118df3:	e8 a5 3d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0118df8:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kfree(ptr_allocations[0]);		// Hole 1 = 2 M
f0118dfb:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f0118e01:	83 ec 0c             	sub    $0xc,%esp
f0118e04:	50                   	push   %eax
f0118e05:	e8 46 eb fe ff       	call   f0107950 <kfree>
f0118e0a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		// Hole 2 = 4 M
f0118e0d:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f0118e13:	83 ec 0c             	sub    $0xc,%esp
f0118e16:	50                   	push   %eax
f0118e17:	e8 34 eb fe ff       	call   f0107950 <kfree>
f0118e1c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f0118e1f:	8b 85 94 fb ff ff    	mov    -0x46c(%ebp),%eax
f0118e25:	83 ec 0c             	sub    $0xc,%esp
f0118e28:	50                   	push   %eax
f0118e29:	e8 22 eb fe ff       	call   f0107950 <kfree>
f0118e2e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[5]);		// Hole 3 = 2 M
f0118e31:	8b 85 9c fb ff ff    	mov    -0x464(%ebp),%eax
f0118e37:	83 ec 0c             	sub    $0xc,%esp
f0118e3a:	50                   	push   %eax
f0118e3b:	e8 10 eb fe ff       	call   f0107950 <kfree>
f0118e40:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		// Hole 4 = 6 M
f0118e43:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f0118e49:	83 ec 0c             	sub    $0xc,%esp
f0118e4c:	50                   	push   %eax
f0118e4d:	e8 fe ea fe ff       	call   f0107950 <kfree>
f0118e52:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f0118e55:	8b 85 b8 fb ff ff    	mov    -0x448(%ebp),%eax
f0118e5b:	83 ec 0c             	sub    $0xc,%esp
f0118e5e:	50                   	push   %eax
f0118e5f:	e8 ec ea fe ff       	call   f0107950 <kfree>
f0118e64:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f0118e67:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f0118e6d:	83 ec 0c             	sub    $0xc,%esp
f0118e70:	50                   	push   %eax
f0118e71:	e8 da ea fe ff       	call   f0107950 <kfree>
f0118e76:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[20]);		// Hole 5 = 2 M
f0118e79:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f0118e7f:	83 ec 0c             	sub    $0xc,%esp
f0118e82:	50                   	push   %eax
f0118e83:	e8 c8 ea fe ff       	call   f0107950 <kfree>
f0118e88:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[25]);		// Hole 6 = 2 M
f0118e8b:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f0118e91:	83 ec 0c             	sub    $0xc,%esp
f0118e94:	50                   	push   %eax
f0118e95:	e8 b6 ea fe ff       	call   f0107950 <kfree>
f0118e9a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[79]);		// Hole 7 = 2 M - 4 KB
f0118e9d:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f0118ea3:	83 ec 0c             	sub    $0xc,%esp
f0118ea6:	50                   	push   %eax
f0118ea7:	e8 a4 ea fe ff       	call   f0107950 <kfree>
f0118eac:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118eaf:	e8 14 af fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118eb4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118eb7:	74 17                	je     f0118ed0 <test_kmalloc_nextfit+0x8b7>
f0118eb9:	83 ec 04             	sub    $0x4,%esp
f0118ebc:	68 74 b0 13 f0       	push   $0xf013b074
f0118ec1:	68 17 01 00 00       	push   $0x117
f0118ec6:	68 5a b0 13 f0       	push   $0xf013b05a
f0118ecb:	e8 35 73 fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((10*2*Mega) - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0118ed0:	e8 c8 3c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0118ed5:	89 c2                	mov    %eax,%edx
f0118ed7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118eda:	89 d1                	mov    %edx,%ecx
f0118edc:	29 c1                	sub    %eax,%ecx
f0118ede:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0118ee5:	10 00 00 
f0118ee8:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0118eee:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118ef3:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0118ef9:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118eff:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f04:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0118f0a:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118f10:	29 d0                	sub    %edx,%eax
f0118f12:	89 c3                	mov    %eax,%ebx
f0118f14:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0118f1b:	10 00 00 
f0118f1e:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0118f23:	0f b6 d0             	movzbl %al,%edx
f0118f26:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0118f2c:	01 d0                	add    %edx,%eax
f0118f2e:	48                   	dec    %eax
f0118f2f:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0118f35:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0118f3b:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f40:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0118f46:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0118f4c:	29 d0                	sub    %edx,%eax
f0118f4e:	01 c3                	add    %eax,%ebx
f0118f50:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0118f57:	10 00 00 
f0118f5a:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0118f5f:	0f b6 c0             	movzbl %al,%eax
f0118f62:	c1 e0 04             	shl    $0x4,%eax
f0118f65:	89 c2                	mov    %eax,%edx
f0118f67:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118f6d:	01 d0                	add    %edx,%eax
f0118f6f:	48                   	dec    %eax
f0118f70:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0118f76:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0118f7c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f81:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0118f87:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0118f8d:	29 d0                	sub    %edx,%eax
f0118f8f:	01 d8                	add    %ebx,%eax
f0118f91:	ba 00 b0 3f 01       	mov    $0x13fb000,%edx
f0118f96:	29 c2                	sub    %eax,%edx
f0118f98:	89 d0                	mov    %edx,%eax
f0118f9a:	c1 e8 0c             	shr    $0xc,%eax
f0118f9d:	39 c1                	cmp    %eax,%ecx
f0118f9f:	74 17                	je     f0118fb8 <test_kmalloc_nextfit+0x99f>
f0118fa1:	83 ec 04             	sub    $0x4,%esp
f0118fa4:	68 28 b3 13 f0       	push   $0xf013b328
f0118fa9:	68 18 01 00 00       	push   $0x118
f0118fae:	68 5a b0 13 f0       	push   $0xf013b05a
f0118fb3:	e8 4d 72 fe ff       	call   f0100205 <_panic>

	// Test next fit
	freeDiskFrames = pf_calculate_free_frames() ;
f0118fb8:	e8 0b ae fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118fbd:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118fc0:	e8 d8 3b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0118fc5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	void* tempAddress = kmalloc(Mega-kilo);		// Use Hole 1 -> Hole 1 = 1 M
f0118fc8:	83 ec 0c             	sub    $0xc,%esp
f0118fcb:	68 00 fc 0f 00       	push   $0xffc00
f0118fd0:	e8 b0 e8 fe ff       	call   f0107885 <kmalloc>
f0118fd5:	83 c4 10             	add    $0x10,%esp
f0118fd8:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f0118fde:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0118fe5:	10 00 00 
f0118fe8:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118fee:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118ff3:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0118ff9:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0118fff:	ba 00 00 00 00       	mov    $0x0,%edx
f0119004:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011900a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0119010:	29 d0                	sub    %edx,%eax
f0119012:	89 c1                	mov    %eax,%ecx
f0119014:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011901b:	10 00 00 
f011901e:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0119023:	0f b6 d0             	movzbl %al,%edx
f0119026:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011902c:	01 d0                	add    %edx,%eax
f011902e:	48                   	dec    %eax
f011902f:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0119035:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011903b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119040:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0119046:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011904c:	29 d0                	sub    %edx,%eax
f011904e:	01 c1                	add    %eax,%ecx
f0119050:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0119057:	10 00 00 
f011905a:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011905f:	0f b6 c0             	movzbl %al,%eax
f0119062:	c1 e0 04             	shl    $0x4,%eax
f0119065:	89 c2                	mov    %eax,%edx
f0119067:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011906d:	01 d0                	add    %edx,%eax
f011906f:	48                   	dec    %eax
f0119070:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0119076:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011907c:	ba 00 00 00 00       	mov    $0x0,%edx
f0119081:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0119087:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011908d:	29 d0                	sub    %edx,%eax
f011908f:	01 c8                	add    %ecx,%eax
f0119091:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f0119097:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011909d:	39 c2                	cmp    %eax,%edx
f011909f:	74 17                	je     f01190b8 <test_kmalloc_nextfit+0xa9f>
		panic("Next Fit not working correctly");
f01190a1:	83 ec 04             	sub    $0x4,%esp
f01190a4:	68 68 b3 13 f0       	push   $0xf013b368
f01190a9:	68 1f 01 00 00       	push   $0x11f
f01190ae:	68 5a b0 13 f0       	push   $0xf013b05a
f01190b3:	e8 4d 71 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01190b8:	e8 0b ad fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01190bd:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01190c0:	74 17                	je     f01190d9 <test_kmalloc_nextfit+0xac0>
f01190c2:	83 ec 04             	sub    $0x4,%esp
f01190c5:	68 74 b0 13 f0       	push   $0xf013b074
f01190ca:	68 20 01 00 00       	push   $0x120
f01190cf:	68 5a b0 13 f0       	push   $0xf013b05a
f01190d4:	e8 2c 71 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f01190d9:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01190dc:	e8 bc 3a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01190e1:	29 c3                	sub    %eax,%ebx
f01190e3:	89 d8                	mov    %ebx,%eax
f01190e5:	3d 00 01 00 00       	cmp    $0x100,%eax
f01190ea:	74 17                	je     f0119103 <test_kmalloc_nextfit+0xaea>
f01190ec:	83 ec 04             	sub    $0x4,%esp
f01190ef:	68 17 b3 13 f0       	push   $0xf013b317
f01190f4:	68 21 01 00 00       	push   $0x121
f01190f9:	68 5a b0 13 f0       	push   $0xf013b05a
f01190fe:	e8 02 71 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119103:	e8 c0 ac fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119108:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011910b:	e8 8d 3a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119110:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo);					// Use Hole 1 -> Hole 1 = 1 M - Kilo -> requires one page only
f0119113:	83 ec 0c             	sub    $0xc,%esp
f0119116:	68 00 04 00 00       	push   $0x400
f011911b:	e8 65 e7 fe ff       	call   f0107885 <kmalloc>
f0119120:	83 c4 10             	add    $0x10,%esp
f0119123:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00100000)
f0119129:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0119130:	10 00 00 
f0119133:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0119139:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011913e:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0119144:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011914a:	ba 00 00 00 00       	mov    $0x0,%edx
f011914f:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0119155:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011915b:	29 d0                	sub    %edx,%eax
f011915d:	89 c1                	mov    %eax,%ecx
f011915f:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0119166:	10 00 00 
f0119169:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011916e:	0f b6 d0             	movzbl %al,%edx
f0119171:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0119177:	01 d0                	add    %edx,%eax
f0119179:	48                   	dec    %eax
f011917a:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0119180:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0119186:	ba 00 00 00 00       	mov    $0x0,%edx
f011918b:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0119191:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0119197:	29 d0                	sub    %edx,%eax
f0119199:	01 c1                	add    %eax,%ecx
f011919b:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f01191a2:	10 00 00 
f01191a5:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01191aa:	0f b6 c0             	movzbl %al,%eax
f01191ad:	c1 e0 04             	shl    $0x4,%eax
f01191b0:	89 c2                	mov    %eax,%edx
f01191b2:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01191b8:	01 d0                	add    %edx,%eax
f01191ba:	48                   	dec    %eax
f01191bb:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f01191c1:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01191c7:	ba 00 00 00 00       	mov    $0x0,%edx
f01191cc:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f01191d2:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01191d8:	29 d0                	sub    %edx,%eax
f01191da:	01 c8                	add    %ecx,%eax
f01191dc:	8d 90 00 40 10 f6    	lea    -0x9efc000(%eax),%edx
f01191e2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01191e8:	39 c2                	cmp    %eax,%edx
f01191ea:	74 17                	je     f0119203 <test_kmalloc_nextfit+0xbea>
		panic("Next Fit not working correctly");
f01191ec:	83 ec 04             	sub    $0x4,%esp
f01191ef:	68 68 b3 13 f0       	push   $0xf013b368
f01191f4:	68 27 01 00 00       	push   $0x127
f01191f9:	68 5a b0 13 f0       	push   $0xf013b05a
f01191fe:	e8 02 70 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119203:	e8 c0 ab fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119208:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011920b:	74 17                	je     f0119224 <test_kmalloc_nextfit+0xc0b>
f011920d:	83 ec 04             	sub    $0x4,%esp
f0119210:	68 74 b0 13 f0       	push   $0xf013b074
f0119215:	68 28 01 00 00       	push   $0x128
f011921a:	68 5a b0 13 f0       	push   $0xf013b05a
f011921f:	e8 e1 6f fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0119224:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119227:	e8 71 39 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011922c:	29 c3                	sub    %eax,%ebx
f011922e:	89 d8                	mov    %ebx,%eax
f0119230:	83 f8 01             	cmp    $0x1,%eax
f0119233:	74 17                	je     f011924c <test_kmalloc_nextfit+0xc33>
f0119235:	83 ec 04             	sub    $0x4,%esp
f0119238:	68 17 b3 13 f0       	push   $0xf013b317
f011923d:	68 29 01 00 00       	push   $0x129
f0119242:	68 5a b0 13 f0       	push   $0xf013b05a
f0119247:	e8 b9 6f fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011924c:	e8 77 ab fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119251:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119254:	e8 44 39 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119259:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(5*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f011925c:	83 ec 0c             	sub    $0xc,%esp
f011925f:	68 00 00 50 00       	push   $0x500000
f0119264:	e8 1c e6 fe ff       	call   f0107885 <kmalloc>
f0119269:	83 c4 10             	add    $0x10,%esp
f011926c:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f0119272:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f0119279:	10 00 00 
f011927c:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0119282:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119287:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011928d:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0119293:	ba 00 00 00 00       	mov    $0x0,%edx
f0119298:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011929e:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01192a4:	29 d0                	sub    %edx,%eax
f01192a6:	89 c1                	mov    %eax,%ecx
f01192a8:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f01192af:	10 00 00 
f01192b2:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01192b7:	0f b6 d0             	movzbl %al,%edx
f01192ba:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01192c0:	01 d0                	add    %edx,%eax
f01192c2:	48                   	dec    %eax
f01192c3:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f01192c9:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01192cf:	ba 00 00 00 00       	mov    $0x0,%edx
f01192d4:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f01192da:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01192e0:	29 d0                	sub    %edx,%eax
f01192e2:	01 c1                	add    %eax,%ecx
f01192e4:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f01192eb:	10 00 00 
f01192ee:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01192f3:	0f b6 c0             	movzbl %al,%eax
f01192f6:	c1 e0 04             	shl    $0x4,%eax
f01192f9:	89 c2                	mov    %eax,%edx
f01192fb:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0119301:	01 d0                	add    %edx,%eax
f0119303:	48                   	dec    %eax
f0119304:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f011930a:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0119310:	ba 00 00 00 00       	mov    $0x0,%edx
f0119315:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f011931b:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0119321:	29 d0                	sub    %edx,%eax
f0119323:	01 c8                	add    %ecx,%eax
f0119325:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f011932b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119331:	39 c2                	cmp    %eax,%edx
f0119333:	74 17                	je     f011934c <test_kmalloc_nextfit+0xd33>
		panic("Next Fit not working correctly");
f0119335:	83 ec 04             	sub    $0x4,%esp
f0119338:	68 68 b3 13 f0       	push   $0xf013b368
f011933d:	68 2f 01 00 00       	push   $0x12f
f0119342:	68 5a b0 13 f0       	push   $0xf013b05a
f0119347:	e8 b9 6e fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011934c:	e8 77 aa fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119351:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119354:	74 17                	je     f011936d <test_kmalloc_nextfit+0xd54>
f0119356:	83 ec 04             	sub    $0x4,%esp
f0119359:	68 74 b0 13 f0       	push   $0xf013b074
f011935e:	68 30 01 00 00       	push   $0x130
f0119363:	68 5a b0 13 f0       	push   $0xf013b05a
f0119368:	e8 98 6e fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (5*Mega)/PAGE_SIZE) panic("Wrong allocation");
f011936d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119370:	e8 28 38 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119375:	29 c3                	sub    %eax,%ebx
f0119377:	89 d8                	mov    %ebx,%eax
f0119379:	3d 00 05 00 00       	cmp    $0x500,%eax
f011937e:	74 17                	je     f0119397 <test_kmalloc_nextfit+0xd7e>
f0119380:	83 ec 04             	sub    $0x4,%esp
f0119383:	68 17 b3 13 f0       	push   $0xf013b317
f0119388:	68 31 01 00 00       	push   $0x131
f011938d:	68 5a b0 13 f0       	push   $0xf013b05a
f0119392:	e8 6e 6e fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119397:	e8 2c aa fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011939c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011939f:	e8 f9 37 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01193a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(1*Mega); 			   // Use Hole 4 -> Hole 4 = 0 M
f01193a7:	83 ec 0c             	sub    $0xc,%esp
f01193aa:	68 00 00 10 00       	push   $0x100000
f01193af:	e8 d1 e4 fe ff       	call   f0107885 <kmalloc>
f01193b4:	83 c4 10             	add    $0x10,%esp
f01193b7:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01900000)
f01193bd:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f01193c4:	10 00 00 
f01193c7:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01193cd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01193d2:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f01193d8:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01193de:	ba 00 00 00 00       	mov    $0x0,%edx
f01193e3:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f01193e9:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01193ef:	29 d0                	sub    %edx,%eax
f01193f1:	89 c1                	mov    %eax,%ecx
f01193f3:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f01193fa:	10 00 00 
f01193fd:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0119402:	0f b6 d0             	movzbl %al,%edx
f0119405:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011940b:	01 d0                	add    %edx,%eax
f011940d:	48                   	dec    %eax
f011940e:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f0119414:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011941a:	ba 00 00 00 00       	mov    $0x0,%edx
f011941f:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f0119425:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011942b:	29 d0                	sub    %edx,%eax
f011942d:	01 c1                	add    %eax,%ecx
f011942f:	c7 85 84 fe ff ff 00 	movl   $0x1000,-0x17c(%ebp)
f0119436:	10 00 00 
f0119439:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011943e:	0f b6 c0             	movzbl %al,%eax
f0119441:	c1 e0 04             	shl    $0x4,%eax
f0119444:	89 c2                	mov    %eax,%edx
f0119446:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011944c:	01 d0                	add    %edx,%eax
f011944e:	48                   	dec    %eax
f011944f:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
f0119455:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011945b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119460:	f7 b5 84 fe ff ff    	divl   -0x17c(%ebp)
f0119466:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011946c:	29 d0                	sub    %edx,%eax
f011946e:	01 c8                	add    %ecx,%eax
f0119470:	8d 90 00 40 90 f7    	lea    -0x86fc000(%eax),%edx
f0119476:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011947c:	39 c2                	cmp    %eax,%edx
f011947e:	74 17                	je     f0119497 <test_kmalloc_nextfit+0xe7e>
		panic("Next Fit not working correctly");
f0119480:	83 ec 04             	sub    $0x4,%esp
f0119483:	68 68 b3 13 f0       	push   $0xf013b368
f0119488:	68 37 01 00 00       	push   $0x137
f011948d:	68 5a b0 13 f0       	push   $0xf013b05a
f0119492:	e8 6e 6d fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119497:	e8 2c a9 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011949c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011949f:	74 17                	je     f01194b8 <test_kmalloc_nextfit+0xe9f>
f01194a1:	83 ec 04             	sub    $0x4,%esp
f01194a4:	68 74 b0 13 f0       	push   $0xf013b074
f01194a9:	68 38 01 00 00       	push   $0x138
f01194ae:	68 5a b0 13 f0       	push   $0xf013b05a
f01194b3:	e8 4d 6d fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f01194b8:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01194bb:	e8 dd 36 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01194c0:	29 c3                	sub    %eax,%ebx
f01194c2:	89 d8                	mov    %ebx,%eax
f01194c4:	3d 00 01 00 00       	cmp    $0x100,%eax
f01194c9:	74 17                	je     f01194e2 <test_kmalloc_nextfit+0xec9>
f01194cb:	83 ec 04             	sub    $0x4,%esp
f01194ce:	68 17 b3 13 f0       	push   $0xf013b317
f01194d3:	68 39 01 00 00       	push   $0x139
f01194d8:	68 5a b0 13 f0       	push   $0xf013b05a
f01194dd:	e8 23 6d fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f01194e2:	e8 e1 a8 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01194e7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01194ea:	e8 ae 36 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01194ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[15]);					// Make a new hole => 2 M
f01194f2:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f01194f8:	83 ec 0c             	sub    $0xc,%esp
f01194fb:	50                   	push   %eax
f01194fc:	e8 4f e4 fe ff       	call   f0107950 <kfree>
f0119501:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119504:	e8 bf a8 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119509:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011950c:	74 17                	je     f0119525 <test_kmalloc_nextfit+0xf0c>
f011950e:	83 ec 04             	sub    $0x4,%esp
f0119511:	68 74 b0 13 f0       	push   $0xf013b074
f0119516:	68 3e 01 00 00       	push   $0x13e
f011951b:	68 5a b0 13 f0       	push   $0xf013b05a
f0119520:	e8 e0 6c fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) !=  (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0119525:	e8 73 36 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011952a:	89 c2                	mov    %eax,%edx
f011952c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011952f:	29 c2                	sub    %eax,%edx
f0119531:	89 d0                	mov    %edx,%eax
f0119533:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119538:	74 17                	je     f0119551 <test_kmalloc_nextfit+0xf38>
f011953a:	83 ec 04             	sub    $0x4,%esp
f011953d:	68 28 b3 13 f0       	push   $0xf013b328
f0119542:	68 3f 01 00 00       	push   $0x13f
f0119547:	68 5a b0 13 f0       	push   $0xf013b05a
f011954c:	e8 b4 6c fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119551:	e8 72 a8 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119556:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119559:	e8 3f 36 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011955e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use new Hole = 2 M - 4 kilo
f0119561:	83 ec 0c             	sub    $0xc,%esp
f0119564:	68 00 04 00 00       	push   $0x400
f0119569:	e8 17 e3 fe ff       	call   f0107885 <kmalloc>
f011956e:	83 c4 10             	add    $0x10,%esp
f0119571:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E00000)
f0119577:	c7 85 7c fe ff ff 00 	movl   $0x1000,-0x184(%ebp)
f011957e:	10 00 00 
f0119581:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0119587:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011958c:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
f0119592:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0119598:	ba 00 00 00 00       	mov    $0x0,%edx
f011959d:	f7 b5 7c fe ff ff    	divl   -0x184(%ebp)
f01195a3:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01195a9:	29 d0                	sub    %edx,%eax
f01195ab:	89 c1                	mov    %eax,%ecx
f01195ad:	c7 85 74 fe ff ff 00 	movl   $0x1000,-0x18c(%ebp)
f01195b4:	10 00 00 
f01195b7:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01195bc:	0f b6 d0             	movzbl %al,%edx
f01195bf:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01195c5:	01 d0                	add    %edx,%eax
f01195c7:	48                   	dec    %eax
f01195c8:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
f01195ce:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01195d4:	ba 00 00 00 00       	mov    $0x0,%edx
f01195d9:	f7 b5 74 fe ff ff    	divl   -0x18c(%ebp)
f01195df:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01195e5:	29 d0                	sub    %edx,%eax
f01195e7:	01 c1                	add    %eax,%ecx
f01195e9:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f01195f0:	10 00 00 
f01195f3:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01195f8:	0f b6 c0             	movzbl %al,%eax
f01195fb:	c1 e0 04             	shl    $0x4,%eax
f01195fe:	89 c2                	mov    %eax,%edx
f0119600:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0119606:	01 d0                	add    %edx,%eax
f0119608:	48                   	dec    %eax
f0119609:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f011960f:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0119615:	ba 00 00 00 00       	mov    $0x0,%edx
f011961a:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f0119620:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0119626:	29 d0                	sub    %edx,%eax
f0119628:	01 c8                	add    %ecx,%eax
f011962a:	8d 90 00 40 e0 f7    	lea    -0x81fc000(%eax),%edx
f0119630:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119636:	39 c2                	cmp    %eax,%edx
f0119638:	74 17                	je     f0119651 <test_kmalloc_nextfit+0x1038>
		panic("Next Fit not working correctly");
f011963a:	83 ec 04             	sub    $0x4,%esp
f011963d:	68 68 b3 13 f0       	push   $0xf013b368
f0119642:	68 45 01 00 00       	push   $0x145
f0119647:	68 5a b0 13 f0       	push   $0xf013b05a
f011964c:	e8 b4 6b fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119651:	e8 72 a7 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119656:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119659:	74 17                	je     f0119672 <test_kmalloc_nextfit+0x1059>
f011965b:	83 ec 04             	sub    $0x4,%esp
f011965e:	68 74 b0 13 f0       	push   $0xf013b074
f0119663:	68 46 01 00 00       	push   $0x146
f0119668:	68 5a b0 13 f0       	push   $0xf013b05a
f011966d:	e8 93 6b fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0119672:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119675:	e8 23 35 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011967a:	29 c3                	sub    %eax,%ebx
f011967c:	89 d8                	mov    %ebx,%eax
f011967e:	83 f8 01             	cmp    $0x1,%eax
f0119681:	74 17                	je     f011969a <test_kmalloc_nextfit+0x1081>
f0119683:	83 ec 04             	sub    $0x4,%esp
f0119686:	68 17 b3 13 f0       	push   $0xf013b317
f011968b:	68 47 01 00 00       	push   $0x147
f0119690:	68 5a b0 13 f0       	push   $0xf013b05a
f0119695:	e8 6b 6b fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011969a:	e8 29 a7 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011969f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01196a2:	e8 f6 34 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01196a7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(Mega + 1016*kilo); 	// Use new Hole = 4 kilo
f01196aa:	83 ec 0c             	sub    $0xc,%esp
f01196ad:	68 00 e0 1f 00       	push   $0x1fe000
f01196b2:	e8 ce e1 fe ff       	call   f0107885 <kmalloc>
f01196b7:	83 c4 10             	add    $0x10,%esp
f01196ba:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E01000)
f01196c0:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f01196c7:	10 00 00 
f01196ca:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01196d0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01196d5:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f01196db:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01196e1:	ba 00 00 00 00       	mov    $0x0,%edx
f01196e6:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f01196ec:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01196f2:	29 d0                	sub    %edx,%eax
f01196f4:	89 c1                	mov    %eax,%ecx
f01196f6:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f01196fd:	10 00 00 
f0119700:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0119705:	0f b6 d0             	movzbl %al,%edx
f0119708:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011970e:	01 d0                	add    %edx,%eax
f0119710:	48                   	dec    %eax
f0119711:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0119717:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011971d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119722:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0119728:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011972e:	29 d0                	sub    %edx,%eax
f0119730:	01 c1                	add    %eax,%ecx
f0119732:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f0119739:	10 00 00 
f011973c:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0119741:	0f b6 c0             	movzbl %al,%eax
f0119744:	c1 e0 04             	shl    $0x4,%eax
f0119747:	89 c2                	mov    %eax,%edx
f0119749:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011974f:	01 d0                	add    %edx,%eax
f0119751:	48                   	dec    %eax
f0119752:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f0119758:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011975e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119763:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f0119769:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011976f:	29 d0                	sub    %edx,%eax
f0119771:	01 c8                	add    %ecx,%eax
f0119773:	8d 90 00 50 e0 f7    	lea    -0x81fb000(%eax),%edx
f0119779:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011977f:	39 c2                	cmp    %eax,%edx
f0119781:	74 17                	je     f011979a <test_kmalloc_nextfit+0x1181>
		panic("Next Fit not working correctly");
f0119783:	83 ec 04             	sub    $0x4,%esp
f0119786:	68 68 b3 13 f0       	push   $0xf013b368
f011978b:	68 4d 01 00 00       	push   $0x14d
f0119790:	68 5a b0 13 f0       	push   $0xf013b05a
f0119795:	e8 6b 6a fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011979a:	e8 29 a6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011979f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01197a2:	74 17                	je     f01197bb <test_kmalloc_nextfit+0x11a2>
f01197a4:	83 ec 04             	sub    $0x4,%esp
f01197a7:	68 74 b0 13 f0       	push   $0xf013b074
f01197ac:	68 4e 01 00 00       	push   $0x14e
f01197b1:	68 5a b0 13 f0       	push   $0xf013b05a
f01197b6:	e8 4a 6a fe ff       	call   f0100205 <_panic>

	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega+1016*kilo)/PAGE_SIZE) panic("Wrong allocation");
f01197bb:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01197be:	e8 da 33 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01197c3:	29 c3                	sub    %eax,%ebx
f01197c5:	89 d8                	mov    %ebx,%eax
f01197c7:	3d fe 01 00 00       	cmp    $0x1fe,%eax
f01197cc:	74 17                	je     f01197e5 <test_kmalloc_nextfit+0x11cc>
f01197ce:	83 ec 04             	sub    $0x4,%esp
f01197d1:	68 17 b3 13 f0       	push   $0xf013b317
f01197d6:	68 50 01 00 00       	push   $0x150
f01197db:	68 5a b0 13 f0       	push   $0xf013b05a
f01197e0:	e8 20 6a fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f01197e5:	e8 de a5 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01197ea:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01197ed:	e8 ab 33 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f01197f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 5 -> Hole 5 = 1.5 M
f01197f5:	83 ec 0c             	sub    $0xc,%esp
f01197f8:	68 00 00 08 00       	push   $0x80000
f01197fd:	e8 83 e0 fe ff       	call   f0107885 <kmalloc>
f0119802:	83 c4 10             	add    $0x10,%esp
f0119805:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x02800000)
f011980b:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0119812:	10 00 00 
f0119815:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011981b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119820:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0119826:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011982c:	ba 00 00 00 00       	mov    $0x0,%edx
f0119831:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0119837:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011983d:	29 d0                	sub    %edx,%eax
f011983f:	89 c1                	mov    %eax,%ecx
f0119841:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f0119848:	10 00 00 
f011984b:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0119850:	0f b6 d0             	movzbl %al,%edx
f0119853:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0119859:	01 d0                	add    %edx,%eax
f011985b:	48                   	dec    %eax
f011985c:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f0119862:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0119868:	ba 00 00 00 00       	mov    $0x0,%edx
f011986d:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f0119873:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0119879:	29 d0                	sub    %edx,%eax
f011987b:	01 c1                	add    %eax,%ecx
f011987d:	c7 85 3c fe ff ff 00 	movl   $0x1000,-0x1c4(%ebp)
f0119884:	10 00 00 
f0119887:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011988c:	0f b6 c0             	movzbl %al,%eax
f011988f:	c1 e0 04             	shl    $0x4,%eax
f0119892:	89 c2                	mov    %eax,%edx
f0119894:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011989a:	01 d0                	add    %edx,%eax
f011989c:	48                   	dec    %eax
f011989d:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
f01198a3:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01198a9:	ba 00 00 00 00       	mov    $0x0,%edx
f01198ae:	f7 b5 3c fe ff ff    	divl   -0x1c4(%ebp)
f01198b4:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01198ba:	29 d0                	sub    %edx,%eax
f01198bc:	01 c8                	add    %ecx,%eax
f01198be:	8d 90 00 40 80 f8    	lea    -0x77fc000(%eax),%edx
f01198c4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01198ca:	39 c2                	cmp    %eax,%edx
f01198cc:	74 17                	je     f01198e5 <test_kmalloc_nextfit+0x12cc>
		panic("Next Fit not working correctly");
f01198ce:	83 ec 04             	sub    $0x4,%esp
f01198d1:	68 68 b3 13 f0       	push   $0xf013b368
f01198d6:	68 56 01 00 00       	push   $0x156
f01198db:	68 5a b0 13 f0       	push   $0xf013b05a
f01198e0:	e8 20 69 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01198e5:	e8 de a4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01198ea:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01198ed:	74 17                	je     f0119906 <test_kmalloc_nextfit+0x12ed>
f01198ef:	83 ec 04             	sub    $0x4,%esp
f01198f2:	68 74 b0 13 f0       	push   $0xf013b074
f01198f7:	68 57 01 00 00       	push   $0x157
f01198fc:	68 5a b0 13 f0       	push   $0xf013b05a
f0119901:	e8 ff 68 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0119906:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119909:	e8 8f 32 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011990e:	29 c3                	sub    %eax,%ebx
f0119910:	89 d8                	mov    %ebx,%eax
f0119912:	3d 80 00 00 00       	cmp    $0x80,%eax
f0119917:	74 17                	je     f0119930 <test_kmalloc_nextfit+0x1317>
f0119919:	83 ec 04             	sub    $0x4,%esp
f011991c:	68 17 b3 13 f0       	push   $0xf013b317
f0119921:	68 58 01 00 00       	push   $0x158
f0119926:	68 5a b0 13 f0       	push   $0xf013b05a
f011992b:	e8 d5 68 fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE1: (next fit without looping back) is succeeded...\n") ;
f0119930:	83 ec 0c             	sub    $0xc,%esp
f0119933:	68 88 b3 13 f0       	push   $0xf013b388
f0119938:	e8 d1 73 fe ff       	call   f0100d0e <cprintf>
f011993d:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit is looping back to check for free space
	freeDiskFrames = pf_calculate_free_frames() ;
f0119940:	e8 83 a4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119945:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119948:	e8 50 32 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011994d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(3*Mega + 512*kilo); 			   // Use Hole 2 -> Hole 2 = 0.5 M
f0119950:	83 ec 0c             	sub    $0xc,%esp
f0119953:	68 00 00 38 00       	push   $0x380000
f0119958:	e8 28 df fe ff       	call   f0107885 <kmalloc>
f011995d:	83 c4 10             	add    $0x10,%esp
f0119960:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f0119966:	c7 85 34 fe ff ff 00 	movl   $0x1000,-0x1cc(%ebp)
f011996d:	10 00 00 
f0119970:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0119976:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011997b:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
f0119981:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0119987:	ba 00 00 00 00       	mov    $0x0,%edx
f011998c:	f7 b5 34 fe ff ff    	divl   -0x1cc(%ebp)
f0119992:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0119998:	29 d0                	sub    %edx,%eax
f011999a:	89 c1                	mov    %eax,%ecx
f011999c:	c7 85 2c fe ff ff 00 	movl   $0x1000,-0x1d4(%ebp)
f01199a3:	10 00 00 
f01199a6:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01199ab:	0f b6 d0             	movzbl %al,%edx
f01199ae:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01199b4:	01 d0                	add    %edx,%eax
f01199b6:	48                   	dec    %eax
f01199b7:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
f01199bd:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01199c3:	ba 00 00 00 00       	mov    $0x0,%edx
f01199c8:	f7 b5 2c fe ff ff    	divl   -0x1d4(%ebp)
f01199ce:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01199d4:	29 d0                	sub    %edx,%eax
f01199d6:	01 c1                	add    %eax,%ecx
f01199d8:	c7 85 24 fe ff ff 00 	movl   $0x1000,-0x1dc(%ebp)
f01199df:	10 00 00 
f01199e2:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01199e7:	0f b6 c0             	movzbl %al,%eax
f01199ea:	c1 e0 04             	shl    $0x4,%eax
f01199ed:	89 c2                	mov    %eax,%edx
f01199ef:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f01199f5:	01 d0                	add    %edx,%eax
f01199f7:	48                   	dec    %eax
f01199f8:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
f01199fe:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0119a04:	ba 00 00 00 00       	mov    $0x0,%edx
f0119a09:	f7 b5 24 fe ff ff    	divl   -0x1dc(%ebp)
f0119a0f:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0119a15:	29 d0                	sub    %edx,%eax
f0119a17:	01 c8                	add    %ecx,%eax
f0119a19:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f0119a1f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119a25:	39 c2                	cmp    %eax,%edx
f0119a27:	74 17                	je     f0119a40 <test_kmalloc_nextfit+0x1427>
		panic("Next Fit not working correctly");
f0119a29:	83 ec 04             	sub    $0x4,%esp
f0119a2c:	68 68 b3 13 f0       	push   $0xf013b368
f0119a31:	68 62 01 00 00       	push   $0x162
f0119a36:	68 5a b0 13 f0       	push   $0xf013b05a
f0119a3b:	e8 c5 67 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119a40:	e8 83 a3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119a45:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119a48:	74 17                	je     f0119a61 <test_kmalloc_nextfit+0x1448>
f0119a4a:	83 ec 04             	sub    $0x4,%esp
f0119a4d:	68 74 b0 13 f0       	push   $0xf013b074
f0119a52:	68 63 01 00 00       	push   $0x163
f0119a57:	68 5a b0 13 f0       	push   $0xf013b05a
f0119a5c:	e8 a4 67 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (3*Mega+512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0119a61:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119a64:	e8 34 31 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119a69:	29 c3                	sub    %eax,%ebx
f0119a6b:	89 d8                	mov    %ebx,%eax
f0119a6d:	3d 80 03 00 00       	cmp    $0x380,%eax
f0119a72:	74 17                	je     f0119a8b <test_kmalloc_nextfit+0x1472>
f0119a74:	83 ec 04             	sub    $0x4,%esp
f0119a77:	68 17 b3 13 f0       	push   $0xf013b317
f0119a7c:	68 64 01 00 00       	push   $0x164
f0119a81:	68 5a b0 13 f0       	push   $0xf013b05a
f0119a86:	e8 7a 67 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119a8b:	e8 38 a3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119a90:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119a93:	e8 05 31 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119a98:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[24]);		// Increase size of Hole 6 to 4 M
f0119a9b:	8b 85 e8 fb ff ff    	mov    -0x418(%ebp),%eax
f0119aa1:	83 ec 0c             	sub    $0xc,%esp
f0119aa4:	50                   	push   %eax
f0119aa5:	e8 a6 de fe ff       	call   f0107950 <kfree>
f0119aaa:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119aad:	e8 16 a3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119ab2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119ab5:	74 17                	je     f0119ace <test_kmalloc_nextfit+0x14b5>
f0119ab7:	83 ec 04             	sub    $0x4,%esp
f0119aba:	68 74 b0 13 f0       	push   $0xf013b074
f0119abf:	68 69 01 00 00       	push   $0x169
f0119ac4:	68 5a b0 13 f0       	push   $0xf013b05a
f0119ac9:	e8 37 67 fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0119ace:	e8 ca 30 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119ad3:	89 c2                	mov    %eax,%edx
f0119ad5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119ad8:	29 c2                	sub    %eax,%edx
f0119ada:	89 d0                	mov    %edx,%eax
f0119adc:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119ae1:	74 17                	je     f0119afa <test_kmalloc_nextfit+0x14e1>
f0119ae3:	83 ec 04             	sub    $0x4,%esp
f0119ae6:	68 28 b3 13 f0       	push   $0xf013b328
f0119aeb:	68 6a 01 00 00       	push   $0x16a
f0119af0:	68 5a b0 13 f0       	push   $0xf013b05a
f0119af5:	e8 0b 67 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119afa:	e8 c9 a2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119aff:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119b02:	e8 96 30 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119b07:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(4*Mega-kilo);		// Use Hole 6 -> Hole 6 = 0 M
f0119b0a:	83 ec 0c             	sub    $0xc,%esp
f0119b0d:	68 00 fc 3f 00       	push   $0x3ffc00
f0119b12:	e8 6e dd fe ff       	call   f0107885 <kmalloc>
f0119b17:	83 c4 10             	add    $0x10,%esp
f0119b1a:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03000000)
f0119b20:	c7 85 1c fe ff ff 00 	movl   $0x1000,-0x1e4(%ebp)
f0119b27:	10 00 00 
f0119b2a:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0119b30:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119b35:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
f0119b3b:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0119b41:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b46:	f7 b5 1c fe ff ff    	divl   -0x1e4(%ebp)
f0119b4c:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0119b52:	29 d0                	sub    %edx,%eax
f0119b54:	89 c1                	mov    %eax,%ecx
f0119b56:	c7 85 14 fe ff ff 00 	movl   $0x1000,-0x1ec(%ebp)
f0119b5d:	10 00 00 
f0119b60:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0119b65:	0f b6 d0             	movzbl %al,%edx
f0119b68:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0119b6e:	01 d0                	add    %edx,%eax
f0119b70:	48                   	dec    %eax
f0119b71:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
f0119b77:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f0119b7d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b82:	f7 b5 14 fe ff ff    	divl   -0x1ec(%ebp)
f0119b88:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f0119b8e:	29 d0                	sub    %edx,%eax
f0119b90:	01 c1                	add    %eax,%ecx
f0119b92:	c7 85 0c fe ff ff 00 	movl   $0x1000,-0x1f4(%ebp)
f0119b99:	10 00 00 
f0119b9c:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0119ba1:	0f b6 c0             	movzbl %al,%eax
f0119ba4:	c1 e0 04             	shl    $0x4,%eax
f0119ba7:	89 c2                	mov    %eax,%edx
f0119ba9:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0119baf:	01 d0                	add    %edx,%eax
f0119bb1:	48                   	dec    %eax
f0119bb2:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
f0119bb8:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0119bbe:	ba 00 00 00 00       	mov    $0x0,%edx
f0119bc3:	f7 b5 0c fe ff ff    	divl   -0x1f4(%ebp)
f0119bc9:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0119bcf:	29 d0                	sub    %edx,%eax
f0119bd1:	01 c8                	add    %ecx,%eax
f0119bd3:	8d 90 00 40 00 f9    	lea    -0x6ffc000(%eax),%edx
f0119bd9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119bdf:	39 c2                	cmp    %eax,%edx
f0119be1:	74 17                	je     f0119bfa <test_kmalloc_nextfit+0x15e1>
		panic("Next Fit not working correctly");
f0119be3:	83 ec 04             	sub    $0x4,%esp
f0119be6:	68 68 b3 13 f0       	push   $0xf013b368
f0119beb:	68 70 01 00 00       	push   $0x170
f0119bf0:	68 5a b0 13 f0       	push   $0xf013b05a
f0119bf5:	e8 0b 66 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119bfa:	e8 c9 a1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119bff:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119c02:	74 17                	je     f0119c1b <test_kmalloc_nextfit+0x1602>
f0119c04:	83 ec 04             	sub    $0x4,%esp
f0119c07:	68 74 b0 13 f0       	push   $0xf013b074
f0119c0c:	68 71 01 00 00       	push   $0x171
f0119c11:	68 5a b0 13 f0       	push   $0xf013b05a
f0119c16:	e8 ea 65 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (4*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119c1b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119c1e:	e8 7a 2f ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119c23:	29 c3                	sub    %eax,%ebx
f0119c25:	89 d8                	mov    %ebx,%eax
f0119c27:	3d 00 04 00 00       	cmp    $0x400,%eax
f0119c2c:	74 17                	je     f0119c45 <test_kmalloc_nextfit+0x162c>
f0119c2e:	83 ec 04             	sub    $0x4,%esp
f0119c31:	68 17 b3 13 f0       	push   $0xf013b317
f0119c36:	68 72 01 00 00       	push   $0x172
f0119c3b:	68 5a b0 13 f0       	push   $0xf013b05a
f0119c40:	e8 c0 65 fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE2: (next fit WITH looping back) is succeeded...\n") ;
f0119c45:	83 ec 0c             	sub    $0xc,%esp
f0119c48:	68 c4 b3 13 f0       	push   $0xf013b3c4
f0119c4d:	e8 bc 70 fe ff       	call   f0100d0e <cprintf>
f0119c52:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit returns null in case all holes are not free
	freeDiskFrames = pf_calculate_free_frames() ;
f0119c55:	e8 6e a1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119c5a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119c5d:	e8 3b 2f ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119c62:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(6*Mega); 			   // No Suitable Hole is available
f0119c65:	83 ec 0c             	sub    $0xc,%esp
f0119c68:	68 00 00 60 00       	push   $0x600000
f0119c6d:	e8 13 dc fe ff       	call   f0107885 <kmalloc>
f0119c72:	83 c4 10             	add    $0x10,%esp
f0119c75:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != 0x0)
f0119c7b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119c81:	85 c0                	test   %eax,%eax
f0119c83:	74 17                	je     f0119c9c <test_kmalloc_nextfit+0x1683>
		panic("Next Fit not working correctly");
f0119c85:	83 ec 04             	sub    $0x4,%esp
f0119c88:	68 68 b3 13 f0       	push   $0xf013b368
f0119c8d:	68 7c 01 00 00       	push   $0x17c
f0119c92:	68 5a b0 13 f0       	push   $0xf013b05a
f0119c97:	e8 69 65 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119c9c:	e8 27 a1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119ca1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119ca4:	74 17                	je     f0119cbd <test_kmalloc_nextfit+0x16a4>
f0119ca6:	83 ec 04             	sub    $0x4,%esp
f0119ca9:	68 74 b0 13 f0       	push   $0xf013b074
f0119cae:	68 7d 01 00 00       	push   $0x17d
f0119cb3:	68 5a b0 13 f0       	push   $0xf013b05a
f0119cb8:	e8 48 65 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation");
f0119cbd:	e8 db 2e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119cc2:	89 c2                	mov    %eax,%edx
f0119cc4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119cc7:	39 c2                	cmp    %eax,%edx
f0119cc9:	74 17                	je     f0119ce2 <test_kmalloc_nextfit+0x16c9>
f0119ccb:	83 ec 04             	sub    $0x4,%esp
f0119cce:	68 17 b3 13 f0       	push   $0xf013b317
f0119cd3:	68 7e 01 00 00       	push   $0x17e
f0119cd8:	68 5a b0 13 f0       	push   $0xf013b05a
f0119cdd:	e8 23 65 fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE3: (next fit with insufficient space) is succeeded...\n") ;
f0119ce2:	83 ec 0c             	sub    $0xc,%esp
f0119ce5:	68 fc b3 13 f0       	push   $0xf013b3fc
f0119cea:	e8 1f 70 fe ff       	call   f0100d0e <cprintf>
f0119cef:	83 c4 10             	add    $0x10,%esp
	/******************************/

	cprintf("Congratulations!! test Next Fit completed successfully.\n");
f0119cf2:	83 ec 0c             	sub    $0xc,%esp
f0119cf5:	68 38 b4 13 f0       	push   $0xf013b438
f0119cfa:	e8 0f 70 fe ff       	call   f0100d0e <cprintf>
f0119cff:	83 c4 10             	add    $0x10,%esp
	return 1;
f0119d02:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0119d07:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0119d0a:	5b                   	pop    %ebx
f0119d0b:	5f                   	pop    %edi
f0119d0c:	5d                   	pop    %ebp
f0119d0d:	c3                   	ret    

f0119d0e <test_kmalloc_bestfit1>:

int test_kmalloc_bestfit1()
{
f0119d0e:	55                   	push   %ebp
f0119d0f:	89 e5                	mov    %esp,%ebp
f0119d11:	57                   	push   %edi
f0119d12:	53                   	push   %ebx
f0119d13:	81 ec 90 01 00 00    	sub    $0x190,%esp
	cprintf("==============================================\n");
f0119d19:	83 ec 0c             	sub    $0xc,%esp
f0119d1c:	68 9c af 13 f0       	push   $0xf013af9c
f0119d21:	e8 e8 6f fe ff       	call   f0100d0e <cprintf>
f0119d26:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0119d29:	83 ec 0c             	sub    $0xc,%esp
f0119d2c:	68 cc af 13 f0       	push   $0xf013afcc
f0119d31:	e8 d8 6f fe ff       	call   f0100d0e <cprintf>
f0119d36:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0119d39:	83 ec 0c             	sub    $0xc,%esp
f0119d3c:	68 9c af 13 f0       	push   $0xf013af9c
f0119d41:	e8 c8 6f fe ff       	call   f0100d0e <cprintf>
f0119d46:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f0119d49:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f0119d4f:	b9 14 00 00 00       	mov    $0x14,%ecx
f0119d54:	b8 00 00 00 00       	mov    $0x0,%eax
f0119d59:	89 d7                	mov    %edx,%edi
f0119d5b:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0119d5d:	e8 3b 2e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119d62:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119d65:	e8 5e a0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119d6a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(3*Mega-kilo);
f0119d6d:	83 ec 0c             	sub    $0xc,%esp
f0119d70:	68 00 fc 2f 00       	push   $0x2ffc00
f0119d75:	e8 0b db fe ff       	call   f0107885 <kmalloc>
f0119d7a:	83 c4 10             	add    $0x10,%esp
f0119d7d:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f0119d83:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0119d89:	89 c1                	mov    %eax,%ecx
f0119d8b:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f0119d92:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0119d95:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119d9a:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0119d9d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0119da0:	ba 00 00 00 00       	mov    $0x0,%edx
f0119da5:	f7 75 ec             	divl   -0x14(%ebp)
f0119da8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0119dab:	29 d0                	sub    %edx,%eax
f0119dad:	89 c3                	mov    %eax,%ebx
f0119daf:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0119db6:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0119dbb:	0f b6 d0             	movzbl %al,%edx
f0119dbe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0119dc1:	01 d0                	add    %edx,%eax
f0119dc3:	48                   	dec    %eax
f0119dc4:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0119dc7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0119dca:	ba 00 00 00 00       	mov    $0x0,%edx
f0119dcf:	f7 75 e4             	divl   -0x1c(%ebp)
f0119dd2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0119dd5:	29 d0                	sub    %edx,%eax
f0119dd7:	01 c3                	add    %eax,%ebx
f0119dd9:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0119de0:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0119de5:	0f b6 c0             	movzbl %al,%eax
f0119de8:	c1 e0 04             	shl    $0x4,%eax
f0119deb:	89 c2                	mov    %eax,%edx
f0119ded:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0119df0:	01 d0                	add    %edx,%eax
f0119df2:	48                   	dec    %eax
f0119df3:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0119df6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0119df9:	ba 00 00 00 00       	mov    $0x0,%edx
f0119dfe:	f7 75 dc             	divl   -0x24(%ebp)
f0119e01:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0119e04:	29 d0                	sub    %edx,%eax
f0119e06:	01 d8                	add    %ebx,%eax
f0119e08:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0119e0d:	39 c1                	cmp    %eax,%ecx
f0119e0f:	74 17                	je     f0119e28 <test_kmalloc_bestfit1+0x11a>
f0119e11:	83 ec 04             	sub    $0x4,%esp
f0119e14:	68 74 b4 13 f0       	push   $0xf013b474
f0119e19:	68 98 01 00 00       	push   $0x198
f0119e1e:	68 5a b0 13 f0       	push   $0xf013b05a
f0119e23:	e8 dd 63 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119e28:	e8 9b 9f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119e2d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119e30:	74 17                	je     f0119e49 <test_kmalloc_bestfit1+0x13b>
f0119e32:	83 ec 04             	sub    $0x4,%esp
f0119e35:	68 74 b0 13 f0       	push   $0xf013b074
f0119e3a:	68 99 01 00 00       	push   $0x199
f0119e3f:	68 5a b0 13 f0       	push   $0xf013b05a
f0119e44:	e8 bc 63 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f0119e49:	e8 4f 2d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119e4e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119e51:	29 c2                	sub    %eax,%edx
f0119e53:	89 d0                	mov    %edx,%eax
f0119e55:	3d 00 03 00 00       	cmp    $0x300,%eax
f0119e5a:	74 17                	je     f0119e73 <test_kmalloc_bestfit1+0x165>
f0119e5c:	83 ec 04             	sub    $0x4,%esp
f0119e5f:	68 a4 b4 13 f0       	push   $0xf013b4a4
f0119e64:	68 9a 01 00 00       	push   $0x19a
f0119e69:	68 5a b0 13 f0       	push   $0xf013b05a
f0119e6e:	e8 92 63 fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0119e73:	e8 25 2d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119e78:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119e7b:	e8 48 9f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119e80:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(3*Mega-kilo);
f0119e83:	83 ec 0c             	sub    $0xc,%esp
f0119e86:	68 00 fc 2f 00       	push   $0x2ffc00
f0119e8b:	e8 f5 d9 fe ff       	call   f0107885 <kmalloc>
f0119e90:	83 c4 10             	add    $0x10,%esp
f0119e93:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[1] !=  (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f0119e99:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0119e9f:	89 c1                	mov    %eax,%ecx
f0119ea1:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0119ea8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0119eab:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119eb0:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0119eb3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0119eb6:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ebb:	f7 75 d4             	divl   -0x2c(%ebp)
f0119ebe:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0119ec1:	29 d0                	sub    %edx,%eax
f0119ec3:	89 c3                	mov    %eax,%ebx
f0119ec5:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0119ecc:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0119ed1:	0f b6 d0             	movzbl %al,%edx
f0119ed4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0119ed7:	01 d0                	add    %edx,%eax
f0119ed9:	48                   	dec    %eax
f0119eda:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0119edd:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0119ee0:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ee5:	f7 75 cc             	divl   -0x34(%ebp)
f0119ee8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0119eeb:	29 d0                	sub    %edx,%eax
f0119eed:	01 c3                	add    %eax,%ebx
f0119eef:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0119ef6:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0119efb:	0f b6 c0             	movzbl %al,%eax
f0119efe:	c1 e0 04             	shl    $0x4,%eax
f0119f01:	89 c2                	mov    %eax,%edx
f0119f03:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0119f06:	01 d0                	add    %edx,%eax
f0119f08:	48                   	dec    %eax
f0119f09:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0119f0c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0119f0f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f14:	f7 75 c4             	divl   -0x3c(%ebp)
f0119f17:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0119f1a:	29 d0                	sub    %edx,%eax
f0119f1c:	01 d8                	add    %ebx,%eax
f0119f1e:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0119f23:	39 c1                	cmp    %eax,%ecx
f0119f25:	74 17                	je     f0119f3e <test_kmalloc_bestfit1+0x230>
f0119f27:	83 ec 04             	sub    $0x4,%esp
f0119f2a:	68 74 b4 13 f0       	push   $0xf013b474
f0119f2f:	68 a0 01 00 00       	push   $0x1a0
f0119f34:	68 5a b0 13 f0       	push   $0xf013b05a
f0119f39:	e8 c7 62 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119f3e:	e8 85 9e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119f43:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119f46:	74 17                	je     f0119f5f <test_kmalloc_bestfit1+0x251>
f0119f48:	83 ec 04             	sub    $0x4,%esp
f0119f4b:	68 74 b0 13 f0       	push   $0xf013b074
f0119f50:	68 a1 01 00 00       	push   $0x1a1
f0119f55:	68 5a b0 13 f0       	push   $0xf013b05a
f0119f5a:	e8 a6 62 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f0119f5f:	e8 39 2c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119f64:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119f67:	29 c2                	sub    %eax,%edx
f0119f69:	89 d0                	mov    %edx,%eax
f0119f6b:	3d 00 03 00 00       	cmp    $0x300,%eax
f0119f70:	74 17                	je     f0119f89 <test_kmalloc_bestfit1+0x27b>
f0119f72:	83 ec 04             	sub    $0x4,%esp
f0119f75:	68 a4 b4 13 f0       	push   $0xf013b4a4
f0119f7a:	68 a2 01 00 00       	push   $0x1a2
f0119f7f:	68 5a b0 13 f0       	push   $0xf013b05a
f0119f84:	e8 7c 62 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0119f89:	e8 0f 2c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f0119f8e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119f91:	e8 32 9e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119f96:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(2*Mega-kilo);
f0119f99:	83 ec 0c             	sub    $0xc,%esp
f0119f9c:	68 00 fc 1f 00       	push   $0x1ffc00
f0119fa1:	e8 df d8 fe ff       	call   f0107885 <kmalloc>
f0119fa6:	83 c4 10             	add    $0x10,%esp
f0119fa9:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[2] !=  (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f0119faf:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0119fb5:	89 c1                	mov    %eax,%ecx
f0119fb7:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0119fbe:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0119fc1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119fc6:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0119fc9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119fcc:	ba 00 00 00 00       	mov    $0x0,%edx
f0119fd1:	f7 75 bc             	divl   -0x44(%ebp)
f0119fd4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119fd7:	29 d0                	sub    %edx,%eax
f0119fd9:	89 c3                	mov    %eax,%ebx
f0119fdb:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0119fe2:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0119fe7:	0f b6 d0             	movzbl %al,%edx
f0119fea:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119fed:	01 d0                	add    %edx,%eax
f0119fef:	48                   	dec    %eax
f0119ff0:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0119ff3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119ff6:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ffb:	f7 75 b4             	divl   -0x4c(%ebp)
f0119ffe:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a001:	29 d0                	sub    %edx,%eax
f011a003:	01 c3                	add    %eax,%ebx
f011a005:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011a00c:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011a011:	0f b6 c0             	movzbl %al,%eax
f011a014:	c1 e0 04             	shl    $0x4,%eax
f011a017:	89 c2                	mov    %eax,%edx
f011a019:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011a01c:	01 d0                	add    %edx,%eax
f011a01e:	48                   	dec    %eax
f011a01f:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011a022:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a025:	ba 00 00 00 00       	mov    $0x0,%edx
f011a02a:	f7 75 ac             	divl   -0x54(%ebp)
f011a02d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a030:	29 d0                	sub    %edx,%eax
f011a032:	01 d8                	add    %ebx,%eax
f011a034:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011a039:	39 c1                	cmp    %eax,%ecx
f011a03b:	74 17                	je     f011a054 <test_kmalloc_bestfit1+0x346>
f011a03d:	83 ec 04             	sub    $0x4,%esp
f011a040:	68 74 b4 13 f0       	push   $0xf013b474
f011a045:	68 a8 01 00 00       	push   $0x1a8
f011a04a:	68 5a b0 13 f0       	push   $0xf013b05a
f011a04f:	e8 b1 61 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a054:	e8 6f 9d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a059:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a05c:	74 17                	je     f011a075 <test_kmalloc_bestfit1+0x367>
f011a05e:	83 ec 04             	sub    $0x4,%esp
f011a061:	68 74 b0 13 f0       	push   $0xf013b074
f011a066:	68 a9 01 00 00       	push   $0x1a9
f011a06b:	68 5a b0 13 f0       	push   $0xf013b05a
f011a070:	e8 90 61 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a075:	e8 23 2b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a07a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a07d:	29 c2                	sub    %eax,%edx
f011a07f:	89 d0                	mov    %edx,%eax
f011a081:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a086:	74 17                	je     f011a09f <test_kmalloc_bestfit1+0x391>
f011a088:	83 ec 04             	sub    $0x4,%esp
f011a08b:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011a090:	68 aa 01 00 00       	push   $0x1aa
f011a095:	68 5a b0 13 f0       	push   $0xf013b05a
f011a09a:	e8 66 61 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011a09f:	e8 f9 2a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a0a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a0a7:	e8 1c 9d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a0ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(2*Mega-kilo);
f011a0af:	83 ec 0c             	sub    $0xc,%esp
f011a0b2:	68 00 fc 1f 00       	push   $0x1ffc00
f011a0b7:	e8 c9 d7 fe ff       	call   f0107885 <kmalloc>
f011a0bc:	83 c4 10             	add    $0x10,%esp
f011a0bf:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011a0c5:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011a0cb:	89 c1                	mov    %eax,%ecx
f011a0cd:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011a0d4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011a0d7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a0dc:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011a0df:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011a0e2:	ba 00 00 00 00       	mov    $0x0,%edx
f011a0e7:	f7 75 a4             	divl   -0x5c(%ebp)
f011a0ea:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011a0ed:	29 d0                	sub    %edx,%eax
f011a0ef:	89 c3                	mov    %eax,%ebx
f011a0f1:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011a0f8:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011a0fd:	0f b6 d0             	movzbl %al,%edx
f011a100:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011a103:	01 d0                	add    %edx,%eax
f011a105:	48                   	dec    %eax
f011a106:	89 45 98             	mov    %eax,-0x68(%ebp)
f011a109:	8b 45 98             	mov    -0x68(%ebp),%eax
f011a10c:	ba 00 00 00 00       	mov    $0x0,%edx
f011a111:	f7 75 9c             	divl   -0x64(%ebp)
f011a114:	8b 45 98             	mov    -0x68(%ebp),%eax
f011a117:	29 d0                	sub    %edx,%eax
f011a119:	01 c3                	add    %eax,%ebx
f011a11b:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011a122:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011a127:	0f b6 c0             	movzbl %al,%eax
f011a12a:	c1 e0 04             	shl    $0x4,%eax
f011a12d:	89 c2                	mov    %eax,%edx
f011a12f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011a132:	01 d0                	add    %edx,%eax
f011a134:	48                   	dec    %eax
f011a135:	89 45 90             	mov    %eax,-0x70(%ebp)
f011a138:	8b 45 90             	mov    -0x70(%ebp),%eax
f011a13b:	ba 00 00 00 00       	mov    $0x0,%edx
f011a140:	f7 75 94             	divl   -0x6c(%ebp)
f011a143:	8b 45 90             	mov    -0x70(%ebp),%eax
f011a146:	29 d0                	sub    %edx,%eax
f011a148:	01 d8                	add    %ebx,%eax
f011a14a:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011a14f:	39 c1                	cmp    %eax,%ecx
f011a151:	74 17                	je     f011a16a <test_kmalloc_bestfit1+0x45c>
f011a153:	83 ec 04             	sub    $0x4,%esp
f011a156:	68 74 b4 13 f0       	push   $0xf013b474
f011a15b:	68 b0 01 00 00       	push   $0x1b0
f011a160:	68 5a b0 13 f0       	push   $0xf013b05a
f011a165:	e8 9b 60 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a16a:	e8 59 9c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a16f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a172:	74 17                	je     f011a18b <test_kmalloc_bestfit1+0x47d>
f011a174:	83 ec 04             	sub    $0x4,%esp
f011a177:	68 74 b0 13 f0       	push   $0xf013b074
f011a17c:	68 b1 01 00 00       	push   $0x1b1
f011a181:	68 5a b0 13 f0       	push   $0xf013b05a
f011a186:	e8 7a 60 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a18b:	e8 0d 2a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a190:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a193:	29 c2                	sub    %eax,%edx
f011a195:	89 d0                	mov    %edx,%eax
f011a197:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a19c:	74 17                	je     f011a1b5 <test_kmalloc_bestfit1+0x4a7>
f011a19e:	83 ec 04             	sub    $0x4,%esp
f011a1a1:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011a1a6:	68 b2 01 00 00       	push   $0x1b2
f011a1ab:	68 5a b0 13 f0       	push   $0xf013b05a
f011a1b0:	e8 50 60 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a1b5:	e8 e3 29 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a1ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a1bd:	e8 06 9c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a1c2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(1*Mega-kilo);
f011a1c5:	83 ec 0c             	sub    $0xc,%esp
f011a1c8:	68 00 fc 0f 00       	push   $0xffc00
f011a1cd:	e8 b3 d6 fe ff       	call   f0107885 <kmalloc>
f011a1d2:	83 c4 10             	add    $0x10,%esp
f011a1d5:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[4] !=  (ACTUAL_START + 10*Mega)) panic("Wrong start address for the allocated space... ");
f011a1db:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011a1e1:	89 c1                	mov    %eax,%ecx
f011a1e3:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011a1ea:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011a1ed:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a1f2:	89 45 88             	mov    %eax,-0x78(%ebp)
f011a1f5:	8b 45 88             	mov    -0x78(%ebp),%eax
f011a1f8:	ba 00 00 00 00       	mov    $0x0,%edx
f011a1fd:	f7 75 8c             	divl   -0x74(%ebp)
f011a200:	8b 45 88             	mov    -0x78(%ebp),%eax
f011a203:	29 d0                	sub    %edx,%eax
f011a205:	89 c3                	mov    %eax,%ebx
f011a207:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011a20e:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011a213:	0f b6 d0             	movzbl %al,%edx
f011a216:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011a219:	01 d0                	add    %edx,%eax
f011a21b:	48                   	dec    %eax
f011a21c:	89 45 80             	mov    %eax,-0x80(%ebp)
f011a21f:	8b 45 80             	mov    -0x80(%ebp),%eax
f011a222:	ba 00 00 00 00       	mov    $0x0,%edx
f011a227:	f7 75 84             	divl   -0x7c(%ebp)
f011a22a:	8b 45 80             	mov    -0x80(%ebp),%eax
f011a22d:	29 d0                	sub    %edx,%eax
f011a22f:	01 c3                	add    %eax,%ebx
f011a231:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011a238:	10 00 00 
f011a23b:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011a240:	0f b6 c0             	movzbl %al,%eax
f011a243:	c1 e0 04             	shl    $0x4,%eax
f011a246:	89 c2                	mov    %eax,%edx
f011a248:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011a24e:	01 d0                	add    %edx,%eax
f011a250:	48                   	dec    %eax
f011a251:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011a257:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011a25d:	ba 00 00 00 00       	mov    $0x0,%edx
f011a262:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011a268:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011a26e:	29 d0                	sub    %edx,%eax
f011a270:	01 d8                	add    %ebx,%eax
f011a272:	2d 00 c0 5f 09       	sub    $0x95fc000,%eax
f011a277:	39 c1                	cmp    %eax,%ecx
f011a279:	74 17                	je     f011a292 <test_kmalloc_bestfit1+0x584>
f011a27b:	83 ec 04             	sub    $0x4,%esp
f011a27e:	68 74 b4 13 f0       	push   $0xf013b474
f011a283:	68 b8 01 00 00       	push   $0x1b8
f011a288:	68 5a b0 13 f0       	push   $0xf013b05a
f011a28d:	e8 73 5f fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a292:	e8 31 9b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a297:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a29a:	74 17                	je     f011a2b3 <test_kmalloc_bestfit1+0x5a5>
f011a29c:	83 ec 04             	sub    $0x4,%esp
f011a29f:	68 74 b0 13 f0       	push   $0xf013b074
f011a2a4:	68 b9 01 00 00       	push   $0x1b9
f011a2a9:	68 5a b0 13 f0       	push   $0xf013b05a
f011a2ae:	e8 52 5f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a2b3:	e8 e5 28 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a2b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a2bb:	29 c2                	sub    %eax,%edx
f011a2bd:	89 d0                	mov    %edx,%eax
f011a2bf:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a2c4:	74 17                	je     f011a2dd <test_kmalloc_bestfit1+0x5cf>
f011a2c6:	83 ec 04             	sub    $0x4,%esp
f011a2c9:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011a2ce:	68 ba 01 00 00       	push   $0x1ba
f011a2d3:	68 5a b0 13 f0       	push   $0xf013b05a
f011a2d8:	e8 28 5f fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a2dd:	e8 bb 28 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a2e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a2e5:	e8 de 9a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a2ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(1*Mega-kilo);
f011a2ed:	83 ec 0c             	sub    $0xc,%esp
f011a2f0:	68 00 fc 0f 00       	push   $0xffc00
f011a2f5:	e8 8b d5 fe ff       	call   f0107885 <kmalloc>
f011a2fa:	83 c4 10             	add    $0x10,%esp
f011a2fd:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011a303:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011a309:	89 c1                	mov    %eax,%ecx
f011a30b:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011a312:	10 00 00 
f011a315:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011a31b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a320:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011a326:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011a32c:	ba 00 00 00 00       	mov    $0x0,%edx
f011a331:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011a337:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011a33d:	29 d0                	sub    %edx,%eax
f011a33f:	89 c3                	mov    %eax,%ebx
f011a341:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011a348:	10 00 00 
f011a34b:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011a350:	0f b6 d0             	movzbl %al,%edx
f011a353:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011a359:	01 d0                	add    %edx,%eax
f011a35b:	48                   	dec    %eax
f011a35c:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011a362:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011a368:	ba 00 00 00 00       	mov    $0x0,%edx
f011a36d:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011a373:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011a379:	29 d0                	sub    %edx,%eax
f011a37b:	01 c3                	add    %eax,%ebx
f011a37d:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011a384:	10 00 00 
f011a387:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011a38c:	0f b6 c0             	movzbl %al,%eax
f011a38f:	c1 e0 04             	shl    $0x4,%eax
f011a392:	89 c2                	mov    %eax,%edx
f011a394:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011a39a:	01 d0                	add    %edx,%eax
f011a39c:	48                   	dec    %eax
f011a39d:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011a3a3:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011a3a9:	ba 00 00 00 00       	mov    $0x0,%edx
f011a3ae:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011a3b4:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011a3ba:	29 d0                	sub    %edx,%eax
f011a3bc:	01 d8                	add    %ebx,%eax
f011a3be:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011a3c3:	39 c1                	cmp    %eax,%ecx
f011a3c5:	74 17                	je     f011a3de <test_kmalloc_bestfit1+0x6d0>
f011a3c7:	83 ec 04             	sub    $0x4,%esp
f011a3ca:	68 74 b4 13 f0       	push   $0xf013b474
f011a3cf:	68 c0 01 00 00       	push   $0x1c0
f011a3d4:	68 5a b0 13 f0       	push   $0xf013b05a
f011a3d9:	e8 27 5e fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a3de:	e8 e5 99 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a3e3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a3e6:	74 17                	je     f011a3ff <test_kmalloc_bestfit1+0x6f1>
f011a3e8:	83 ec 04             	sub    $0x4,%esp
f011a3eb:	68 74 b0 13 f0       	push   $0xf013b074
f011a3f0:	68 c1 01 00 00       	push   $0x1c1
f011a3f5:	68 5a b0 13 f0       	push   $0xf013b05a
f011a3fa:	e8 06 5e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a3ff:	e8 99 27 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a404:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a407:	29 c2                	sub    %eax,%edx
f011a409:	89 d0                	mov    %edx,%eax
f011a40b:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a410:	74 17                	je     f011a429 <test_kmalloc_bestfit1+0x71b>
f011a412:	83 ec 04             	sub    $0x4,%esp
f011a415:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011a41a:	68 c2 01 00 00       	push   $0x1c2
f011a41f:	68 5a b0 13 f0       	push   $0xf013b05a
f011a424:	e8 dc 5d fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a429:	e8 6f 27 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a42e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a431:	e8 92 99 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a436:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(1*Mega-kilo);
f011a439:	83 ec 0c             	sub    $0xc,%esp
f011a43c:	68 00 fc 0f 00       	push   $0xffc00
f011a441:	e8 3f d4 fe ff       	call   f0107885 <kmalloc>
f011a446:	83 c4 10             	add    $0x10,%esp
f011a449:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 12*Mega)) panic("Wrong start address for the allocated space... ");
f011a44f:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011a455:	89 c1                	mov    %eax,%ecx
f011a457:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011a45e:	10 00 00 
f011a461:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011a467:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a46c:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011a472:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011a478:	ba 00 00 00 00       	mov    $0x0,%edx
f011a47d:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011a483:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011a489:	29 d0                	sub    %edx,%eax
f011a48b:	89 c3                	mov    %eax,%ebx
f011a48d:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011a494:	10 00 00 
f011a497:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011a49c:	0f b6 d0             	movzbl %al,%edx
f011a49f:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011a4a5:	01 d0                	add    %edx,%eax
f011a4a7:	48                   	dec    %eax
f011a4a8:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011a4ae:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011a4b4:	ba 00 00 00 00       	mov    $0x0,%edx
f011a4b9:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011a4bf:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011a4c5:	29 d0                	sub    %edx,%eax
f011a4c7:	01 c3                	add    %eax,%ebx
f011a4c9:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011a4d0:	10 00 00 
f011a4d3:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011a4d8:	0f b6 c0             	movzbl %al,%eax
f011a4db:	c1 e0 04             	shl    $0x4,%eax
f011a4de:	89 c2                	mov    %eax,%edx
f011a4e0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011a4e6:	01 d0                	add    %edx,%eax
f011a4e8:	48                   	dec    %eax
f011a4e9:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011a4ef:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011a4f5:	ba 00 00 00 00       	mov    $0x0,%edx
f011a4fa:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011a500:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011a506:	29 d0                	sub    %edx,%eax
f011a508:	01 d8                	add    %ebx,%eax
f011a50a:	2d 00 c0 3f 09       	sub    $0x93fc000,%eax
f011a50f:	39 c1                	cmp    %eax,%ecx
f011a511:	74 17                	je     f011a52a <test_kmalloc_bestfit1+0x81c>
f011a513:	83 ec 04             	sub    $0x4,%esp
f011a516:	68 74 b4 13 f0       	push   $0xf013b474
f011a51b:	68 c8 01 00 00       	push   $0x1c8
f011a520:	68 5a b0 13 f0       	push   $0xf013b05a
f011a525:	e8 db 5c fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a52a:	e8 99 98 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a52f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a532:	74 17                	je     f011a54b <test_kmalloc_bestfit1+0x83d>
f011a534:	83 ec 04             	sub    $0x4,%esp
f011a537:	68 74 b0 13 f0       	push   $0xf013b074
f011a53c:	68 c9 01 00 00       	push   $0x1c9
f011a541:	68 5a b0 13 f0       	push   $0xf013b05a
f011a546:	e8 ba 5c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a54b:	e8 4d 26 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a550:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a553:	29 c2                	sub    %eax,%edx
f011a555:	89 d0                	mov    %edx,%eax
f011a557:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a55c:	74 17                	je     f011a575 <test_kmalloc_bestfit1+0x867>
f011a55e:	83 ec 04             	sub    $0x4,%esp
f011a561:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011a566:	68 ca 01 00 00       	push   $0x1ca
f011a56b:	68 5a b0 13 f0       	push   $0xf013b05a
f011a570:	e8 90 5c fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a575:	e8 23 26 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a57a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a57d:	e8 46 98 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a582:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(1*Mega-kilo);
f011a585:	83 ec 0c             	sub    $0xc,%esp
f011a588:	68 00 fc 0f 00       	push   $0xffc00
f011a58d:	e8 f3 d2 fe ff       	call   f0107885 <kmalloc>
f011a592:	83 c4 10             	add    $0x10,%esp
f011a595:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega)) panic("Wrong start address for the allocated space... ");
f011a59b:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011a5a1:	89 c1                	mov    %eax,%ecx
f011a5a3:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011a5aa:	10 00 00 
f011a5ad:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011a5b3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a5b8:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011a5be:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011a5c4:	ba 00 00 00 00       	mov    $0x0,%edx
f011a5c9:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011a5cf:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011a5d5:	29 d0                	sub    %edx,%eax
f011a5d7:	89 c3                	mov    %eax,%ebx
f011a5d9:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011a5e0:	10 00 00 
f011a5e3:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011a5e8:	0f b6 d0             	movzbl %al,%edx
f011a5eb:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011a5f1:	01 d0                	add    %edx,%eax
f011a5f3:	48                   	dec    %eax
f011a5f4:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011a5fa:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a600:	ba 00 00 00 00       	mov    $0x0,%edx
f011a605:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011a60b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a611:	29 d0                	sub    %edx,%eax
f011a613:	01 c3                	add    %eax,%ebx
f011a615:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011a61c:	10 00 00 
f011a61f:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011a624:	0f b6 c0             	movzbl %al,%eax
f011a627:	c1 e0 04             	shl    $0x4,%eax
f011a62a:	89 c2                	mov    %eax,%edx
f011a62c:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011a632:	01 d0                	add    %edx,%eax
f011a634:	48                   	dec    %eax
f011a635:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011a63b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011a641:	ba 00 00 00 00       	mov    $0x0,%edx
f011a646:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011a64c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011a652:	29 d0                	sub    %edx,%eax
f011a654:	01 d8                	add    %ebx,%eax
f011a656:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f011a65b:	39 c1                	cmp    %eax,%ecx
f011a65d:	74 17                	je     f011a676 <test_kmalloc_bestfit1+0x968>
f011a65f:	83 ec 04             	sub    $0x4,%esp
f011a662:	68 74 b4 13 f0       	push   $0xf013b474
f011a667:	68 d0 01 00 00       	push   $0x1d0
f011a66c:	68 5a b0 13 f0       	push   $0xf013b05a
f011a671:	e8 8f 5b fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a676:	e8 4d 97 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a67b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a67e:	74 17                	je     f011a697 <test_kmalloc_bestfit1+0x989>
f011a680:	83 ec 04             	sub    $0x4,%esp
f011a683:	68 74 b0 13 f0       	push   $0xf013b074
f011a688:	68 d1 01 00 00       	push   $0x1d1
f011a68d:	68 5a b0 13 f0       	push   $0xf013b05a
f011a692:	e8 6e 5b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a697:	e8 01 25 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a69c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a69f:	29 c2                	sub    %eax,%edx
f011a6a1:	89 d0                	mov    %edx,%eax
f011a6a3:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a6a8:	74 17                	je     f011a6c1 <test_kmalloc_bestfit1+0x9b3>
f011a6aa:	83 ec 04             	sub    $0x4,%esp
f011a6ad:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011a6b2:	68 d2 01 00 00       	push   $0x1d2
f011a6b7:	68 5a b0 13 f0       	push   $0xf013b05a
f011a6bc:	e8 44 5b fe ff       	call   f0100205 <_panic>
	}

	//[2] Free some to create holes
	{
		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011a6c1:	e8 d7 24 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a6c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a6c9:	e8 fa 96 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a6ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011a6d1:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011a6d7:	83 ec 0c             	sub    $0xc,%esp
f011a6da:	50                   	push   %eax
f011a6db:	e8 70 d2 fe ff       	call   f0107950 <kfree>
f011a6e0:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a6e3:	e8 e0 96 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a6e8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a6eb:	74 17                	je     f011a704 <test_kmalloc_bestfit1+0x9f6>
f011a6ed:	83 ec 04             	sub    $0x4,%esp
f011a6f0:	68 74 b0 13 f0       	push   $0xf013b074
f011a6f5:	68 db 01 00 00       	push   $0x1db
f011a6fa:	68 5a b0 13 f0       	push   $0xf013b05a
f011a6ff:	e8 01 5b fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((3*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011a704:	e8 94 24 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a709:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011a70c:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a711:	74 17                	je     f011a72a <test_kmalloc_bestfit1+0xa1c>
f011a713:	83 ec 04             	sub    $0x4,%esp
f011a716:	68 b7 b4 13 f0       	push   $0xf013b4b7
f011a71b:	68 dc 01 00 00       	push   $0x1dc
f011a720:	68 5a b0 13 f0       	push   $0xf013b05a
f011a725:	e8 db 5a fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011a72a:	e8 6e 24 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a72f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a732:	e8 91 96 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a737:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011a73a:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011a740:	83 ec 0c             	sub    $0xc,%esp
f011a743:	50                   	push   %eax
f011a744:	e8 07 d2 fe ff       	call   f0107950 <kfree>
f011a749:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a74c:	e8 77 96 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a751:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a754:	74 17                	je     f011a76d <test_kmalloc_bestfit1+0xa5f>
f011a756:	83 ec 04             	sub    $0x4,%esp
f011a759:	68 74 b0 13 f0       	push   $0xf013b074
f011a75e:	68 e2 01 00 00       	push   $0x1e2
f011a763:	68 5a b0 13 f0       	push   $0xf013b05a
f011a768:	e8 98 5a fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((2*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011a76d:	e8 2b 24 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a772:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011a775:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a77a:	74 17                	je     f011a793 <test_kmalloc_bestfit1+0xa85>
f011a77c:	83 ec 04             	sub    $0x4,%esp
f011a77f:	68 b7 b4 13 f0       	push   $0xf013b4b7
f011a784:	68 e3 01 00 00       	push   $0x1e3
f011a789:	68 5a b0 13 f0       	push   $0xf013b05a
f011a78e:	e8 72 5a fe ff       	call   f0100205 <_panic>

		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011a793:	e8 05 24 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a798:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a79b:	e8 28 96 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a7a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[5]);
f011a7a3:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011a7a9:	83 ec 0c             	sub    $0xc,%esp
f011a7ac:	50                   	push   %eax
f011a7ad:	e8 9e d1 fe ff       	call   f0107950 <kfree>
f011a7b2:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a7b5:	e8 0e 96 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a7ba:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a7bd:	74 17                	je     f011a7d6 <test_kmalloc_bestfit1+0xac8>
f011a7bf:	83 ec 04             	sub    $0x4,%esp
f011a7c2:	68 74 b0 13 f0       	push   $0xf013b074
f011a7c7:	68 e9 01 00 00       	push   $0x1e9
f011a7cc:	68 5a b0 13 f0       	push   $0xf013b05a
f011a7d1:	e8 2f 5a fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011a7d6:	e8 c2 23 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a7db:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011a7de:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a7e3:	74 17                	je     f011a7fc <test_kmalloc_bestfit1+0xaee>
f011a7e5:	83 ec 04             	sub    $0x4,%esp
f011a7e8:	68 b7 b4 13 f0       	push   $0xf013b4b7
f011a7ed:	68 ea 01 00 00       	push   $0x1ea
f011a7f2:	68 5a b0 13 f0       	push   $0xf013b05a
f011a7f7:	e8 09 5a fe ff       	call   f0100205 <_panic>
	}

	//[3] Allocate again [test best fit]
	{
		//Allocate 512 KB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011a7fc:	e8 9c 23 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a801:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a804:	e8 bf 95 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a809:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo);
f011a80c:	83 ec 0c             	sub    $0xc,%esp
f011a80f:	68 00 00 08 00       	push   $0x80000
f011a814:	e8 6c d0 fe ff       	call   f0107885 <kmalloc>
f011a819:	83 c4 10             	add    $0x10,%esp
f011a81c:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
		if ((uint32) ptr_allocations[8] !=  (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011a822:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011a828:	89 c1                	mov    %eax,%ecx
f011a82a:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011a831:	10 00 00 
f011a834:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011a83a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a83f:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011a845:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011a84b:	ba 00 00 00 00       	mov    $0x0,%edx
f011a850:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011a856:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011a85c:	29 d0                	sub    %edx,%eax
f011a85e:	89 c3                	mov    %eax,%ebx
f011a860:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011a867:	10 00 00 
f011a86a:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011a86f:	0f b6 d0             	movzbl %al,%edx
f011a872:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011a878:	01 d0                	add    %edx,%eax
f011a87a:	48                   	dec    %eax
f011a87b:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011a881:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011a887:	ba 00 00 00 00       	mov    $0x0,%edx
f011a88c:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011a892:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011a898:	29 d0                	sub    %edx,%eax
f011a89a:	01 c3                	add    %eax,%ebx
f011a89c:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011a8a3:	10 00 00 
f011a8a6:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011a8ab:	0f b6 c0             	movzbl %al,%eax
f011a8ae:	c1 e0 04             	shl    $0x4,%eax
f011a8b1:	89 c2                	mov    %eax,%edx
f011a8b3:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011a8b9:	01 d0                	add    %edx,%eax
f011a8bb:	48                   	dec    %eax
f011a8bc:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011a8c2:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011a8c8:	ba 00 00 00 00       	mov    $0x0,%edx
f011a8cd:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011a8d3:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011a8d9:	29 d0                	sub    %edx,%eax
f011a8db:	01 d8                	add    %ebx,%eax
f011a8dd:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011a8e2:	39 c1                	cmp    %eax,%ecx
f011a8e4:	74 17                	je     f011a8fd <test_kmalloc_bestfit1+0xbef>
f011a8e6:	83 ec 04             	sub    $0x4,%esp
f011a8e9:	68 74 b4 13 f0       	push   $0xf013b474
f011a8ee:	68 f3 01 00 00       	push   $0x1f3
f011a8f3:	68 5a b0 13 f0       	push   $0xf013b05a
f011a8f8:	e8 08 59 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a8fd:	e8 c6 94 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a902:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a905:	74 17                	je     f011a91e <test_kmalloc_bestfit1+0xc10>
f011a907:	83 ec 04             	sub    $0x4,%esp
f011a90a:	68 74 b0 13 f0       	push   $0xf013b074
f011a90f:	68 f4 01 00 00       	push   $0x1f4
f011a914:	68 5a b0 13 f0       	push   $0xf013b05a
f011a919:	e8 e7 58 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011a91e:	e8 7a 22 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a923:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a926:	29 c2                	sub    %eax,%edx
f011a928:	89 d0                	mov    %edx,%eax
f011a92a:	3d 80 00 00 00       	cmp    $0x80,%eax
f011a92f:	74 17                	je     f011a948 <test_kmalloc_bestfit1+0xc3a>
f011a931:	83 ec 04             	sub    $0x4,%esp
f011a934:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011a939:	68 f5 01 00 00       	push   $0x1f5
f011a93e:	68 5a b0 13 f0       	push   $0xf013b05a
f011a943:	e8 bd 58 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011a948:	e8 50 22 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011a94d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a950:	e8 73 94 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a955:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011a958:	83 ec 0c             	sub    $0xc,%esp
f011a95b:	68 00 fc 0f 00       	push   $0xffc00
f011a960:	e8 20 cf fe ff       	call   f0107885 <kmalloc>
f011a965:	83 c4 10             	add    $0x10,%esp
f011a968:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		if ((uint32) ptr_allocations[9] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011a96e:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011a974:	89 c1                	mov    %eax,%ecx
f011a976:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011a97d:	10 00 00 
f011a980:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011a986:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a98b:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011a991:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011a997:	ba 00 00 00 00       	mov    $0x0,%edx
f011a99c:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011a9a2:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011a9a8:	29 d0                	sub    %edx,%eax
f011a9aa:	89 c3                	mov    %eax,%ebx
f011a9ac:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011a9b3:	10 00 00 
f011a9b6:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011a9bb:	0f b6 d0             	movzbl %al,%edx
f011a9be:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011a9c4:	01 d0                	add    %edx,%eax
f011a9c6:	48                   	dec    %eax
f011a9c7:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011a9cd:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011a9d3:	ba 00 00 00 00       	mov    $0x0,%edx
f011a9d8:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011a9de:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011a9e4:	29 d0                	sub    %edx,%eax
f011a9e6:	01 c3                	add    %eax,%ebx
f011a9e8:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011a9ef:	10 00 00 
f011a9f2:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011a9f7:	0f b6 c0             	movzbl %al,%eax
f011a9fa:	c1 e0 04             	shl    $0x4,%eax
f011a9fd:	89 c2                	mov    %eax,%edx
f011a9ff:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011aa05:	01 d0                	add    %edx,%eax
f011aa07:	48                   	dec    %eax
f011aa08:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011aa0e:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011aa14:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa19:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011aa1f:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011aa25:	29 d0                	sub    %edx,%eax
f011aa27:	01 d8                	add    %ebx,%eax
f011aa29:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011aa2e:	39 c1                	cmp    %eax,%ecx
f011aa30:	74 17                	je     f011aa49 <test_kmalloc_bestfit1+0xd3b>
f011aa32:	83 ec 04             	sub    $0x4,%esp
f011aa35:	68 74 b4 13 f0       	push   $0xf013b474
f011aa3a:	68 fb 01 00 00       	push   $0x1fb
f011aa3f:	68 5a b0 13 f0       	push   $0xf013b05a
f011aa44:	e8 bc 57 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aa49:	e8 7a 93 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011aa4e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aa51:	74 17                	je     f011aa6a <test_kmalloc_bestfit1+0xd5c>
f011aa53:	83 ec 04             	sub    $0x4,%esp
f011aa56:	68 74 b0 13 f0       	push   $0xf013b074
f011aa5b:	68 fc 01 00 00       	push   $0x1fc
f011aa60:	68 5a b0 13 f0       	push   $0xf013b05a
f011aa65:	e8 9b 57 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011aa6a:	e8 2e 21 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011aa6f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011aa72:	29 c2                	sub    %eax,%edx
f011aa74:	89 d0                	mov    %edx,%eax
f011aa76:	3d 00 01 00 00       	cmp    $0x100,%eax
f011aa7b:	74 17                	je     f011aa94 <test_kmalloc_bestfit1+0xd86>
f011aa7d:	83 ec 04             	sub    $0x4,%esp
f011aa80:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011aa85:	68 fd 01 00 00       	push   $0x1fd
f011aa8a:	68 5a b0 13 f0       	push   $0xf013b05a
f011aa8f:	e8 71 57 fe ff       	call   f0100205 <_panic>

		//Allocate 256 KB - should be placed in remaining of 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011aa94:	e8 04 21 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011aa99:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aa9c:	e8 27 93 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011aaa1:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011aaa4:	83 ec 0c             	sub    $0xc,%esp
f011aaa7:	68 00 fc 03 00       	push   $0x3fc00
f011aaac:	e8 d4 cd fe ff       	call   f0107885 <kmalloc>
f011aab1:	83 c4 10             	add    $0x10,%esp
f011aab4:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		if ((uint32) ptr_allocations[10] !=  (ACTUAL_START + 11*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011aaba:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011aac0:	89 c1                	mov    %eax,%ecx
f011aac2:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011aac9:	10 00 00 
f011aacc:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011aad2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011aad7:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011aadd:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011aae3:	ba 00 00 00 00       	mov    $0x0,%edx
f011aae8:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011aaee:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011aaf4:	29 d0                	sub    %edx,%eax
f011aaf6:	89 c3                	mov    %eax,%ebx
f011aaf8:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011aaff:	10 00 00 
f011ab02:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011ab07:	0f b6 d0             	movzbl %al,%edx
f011ab0a:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011ab10:	01 d0                	add    %edx,%eax
f011ab12:	48                   	dec    %eax
f011ab13:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011ab19:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011ab1f:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab24:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011ab2a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011ab30:	29 d0                	sub    %edx,%eax
f011ab32:	01 c3                	add    %eax,%ebx
f011ab34:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011ab3b:	10 00 00 
f011ab3e:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011ab43:	0f b6 c0             	movzbl %al,%eax
f011ab46:	c1 e0 04             	shl    $0x4,%eax
f011ab49:	89 c2                	mov    %eax,%edx
f011ab4b:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011ab51:	01 d0                	add    %edx,%eax
f011ab53:	48                   	dec    %eax
f011ab54:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011ab5a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011ab60:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab65:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011ab6b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011ab71:	29 d0                	sub    %edx,%eax
f011ab73:	01 d8                	add    %ebx,%eax
f011ab75:	2d 00 c0 47 09       	sub    $0x947c000,%eax
f011ab7a:	39 c1                	cmp    %eax,%ecx
f011ab7c:	74 17                	je     f011ab95 <test_kmalloc_bestfit1+0xe87>
f011ab7e:	83 ec 04             	sub    $0x4,%esp
f011ab81:	68 74 b4 13 f0       	push   $0xf013b474
f011ab86:	68 03 02 00 00       	push   $0x203
f011ab8b:	68 5a b0 13 f0       	push   $0xf013b05a
f011ab90:	e8 70 56 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ab95:	e8 2e 92 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ab9a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ab9d:	74 17                	je     f011abb6 <test_kmalloc_bestfit1+0xea8>
f011ab9f:	83 ec 04             	sub    $0x4,%esp
f011aba2:	68 74 b0 13 f0       	push   $0xf013b074
f011aba7:	68 04 02 00 00       	push   $0x204
f011abac:	68 5a b0 13 f0       	push   $0xf013b05a
f011abb1:	e8 4f 56 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011abb6:	e8 e2 1f ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011abbb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011abbe:	29 c2                	sub    %eax,%edx
f011abc0:	89 d0                	mov    %edx,%eax
f011abc2:	83 f8 40             	cmp    $0x40,%eax
f011abc5:	74 17                	je     f011abde <test_kmalloc_bestfit1+0xed0>
f011abc7:	83 ec 04             	sub    $0x4,%esp
f011abca:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011abcf:	68 05 02 00 00       	push   $0x205
f011abd4:	68 5a b0 13 f0       	push   $0xf013b05a
f011abd9:	e8 27 56 fe ff       	call   f0100205 <_panic>

		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011abde:	e8 ba 1f ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011abe3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011abe6:	e8 dd 91 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011abeb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega - kilo);
f011abee:	83 ec 0c             	sub    $0xc,%esp
f011abf1:	68 00 fc 3f 00       	push   $0x3ffc00
f011abf6:	e8 8a cc fe ff       	call   f0107885 <kmalloc>
f011abfb:	83 c4 10             	add    $0x10,%esp
f011abfe:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011ac04:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011ac0a:	89 c1                	mov    %eax,%ecx
f011ac0c:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011ac13:	10 00 00 
f011ac16:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011ac1c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ac21:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011ac27:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011ac2d:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac32:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011ac38:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011ac3e:	29 d0                	sub    %edx,%eax
f011ac40:	89 c3                	mov    %eax,%ebx
f011ac42:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011ac49:	10 00 00 
f011ac4c:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011ac51:	0f b6 d0             	movzbl %al,%edx
f011ac54:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011ac5a:	01 d0                	add    %edx,%eax
f011ac5c:	48                   	dec    %eax
f011ac5d:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011ac63:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011ac69:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac6e:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011ac74:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011ac7a:	29 d0                	sub    %edx,%eax
f011ac7c:	01 c3                	add    %eax,%ebx
f011ac7e:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011ac85:	10 00 00 
f011ac88:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011ac8d:	0f b6 c0             	movzbl %al,%eax
f011ac90:	c1 e0 04             	shl    $0x4,%eax
f011ac93:	89 c2                	mov    %eax,%edx
f011ac95:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011ac9b:	01 d0                	add    %edx,%eax
f011ac9d:	48                   	dec    %eax
f011ac9e:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011aca4:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011acaa:	ba 00 00 00 00       	mov    $0x0,%edx
f011acaf:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011acb5:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011acbb:	29 d0                	sub    %edx,%eax
f011acbd:	01 d8                	add    %ebx,%eax
f011acbf:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011acc4:	39 c1                	cmp    %eax,%ecx
f011acc6:	74 17                	je     f011acdf <test_kmalloc_bestfit1+0xfd1>
f011acc8:	83 ec 04             	sub    $0x4,%esp
f011accb:	68 74 b4 13 f0       	push   $0xf013b474
f011acd0:	68 0b 02 00 00       	push   $0x20b
f011acd5:	68 5a b0 13 f0       	push   $0xf013b05a
f011acda:	e8 26 55 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011acdf:	e8 e4 90 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ace4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ace7:	74 17                	je     f011ad00 <test_kmalloc_bestfit1+0xff2>
f011ace9:	83 ec 04             	sub    $0x4,%esp
f011acec:	68 74 b0 13 f0       	push   $0xf013b074
f011acf1:	68 0c 02 00 00       	push   $0x20c
f011acf6:	68 5a b0 13 f0       	push   $0xf013b05a
f011acfb:	e8 05 55 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011ad00:	e8 98 1e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011ad05:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ad08:	29 c2                	sub    %eax,%edx
f011ad0a:	89 d0                	mov    %edx,%eax
f011ad0c:	3d 00 04 00 00       	cmp    $0x400,%eax
f011ad11:	74 17                	je     f011ad2a <test_kmalloc_bestfit1+0x101c>
f011ad13:	83 ec 04             	sub    $0x4,%esp
f011ad16:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011ad1b:	68 0d 02 00 00       	push   $0x20d
f011ad20:	68 5a b0 13 f0       	push   $0xf013b05a
f011ad25:	e8 db 54 fe ff       	call   f0100205 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1M Hole appended to already existing 1M hole in the middle
		freeFrames = sys_calculate_free_frames() ;
f011ad2a:	e8 6e 1e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011ad2f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ad32:	e8 91 90 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ad37:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011ad3a:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011ad40:	83 ec 0c             	sub    $0xc,%esp
f011ad43:	50                   	push   %eax
f011ad44:	e8 07 cc fe ff       	call   f0107950 <kfree>
f011ad49:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ad4c:	e8 77 90 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ad51:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ad54:	74 17                	je     f011ad6d <test_kmalloc_bestfit1+0x105f>
f011ad56:	83 ec 04             	sub    $0x4,%esp
f011ad59:	68 74 b0 13 f0       	push   $0xf013b074
f011ad5e:	68 16 02 00 00       	push   $0x216
f011ad63:	68 5a b0 13 f0       	push   $0xf013b05a
f011ad68:	e8 98 54 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011ad6d:	e8 2b 1e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011ad72:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011ad75:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ad7a:	74 17                	je     f011ad93 <test_kmalloc_bestfit1+0x1085>
f011ad7c:	83 ec 04             	sub    $0x4,%esp
f011ad7f:	68 b7 b4 13 f0       	push   $0xf013b4b7
f011ad84:	68 17 02 00 00       	push   $0x217
f011ad89:	68 5a b0 13 f0       	push   $0xf013b05a
f011ad8e:	e8 72 54 fe ff       	call   f0100205 <_panic>

		//another 512 KB Hole appended to the hole
		freeFrames = sys_calculate_free_frames() ;
f011ad93:	e8 05 1e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011ad98:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ad9b:	e8 28 90 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ada0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[8]);
f011ada3:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011ada9:	83 ec 0c             	sub    $0xc,%esp
f011adac:	50                   	push   %eax
f011adad:	e8 9e cb fe ff       	call   f0107950 <kfree>
f011adb2:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011adb5:	e8 0e 90 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011adba:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011adbd:	74 17                	je     f011add6 <test_kmalloc_bestfit1+0x10c8>
f011adbf:	83 ec 04             	sub    $0x4,%esp
f011adc2:	68 74 b0 13 f0       	push   $0xf013b074
f011adc7:	68 1d 02 00 00       	push   $0x21d
f011adcc:	68 5a b0 13 f0       	push   $0xf013b05a
f011add1:	e8 2f 54 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 128) panic("Wrong free: ");
f011add6:	e8 c2 1d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011addb:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011adde:	3d 80 00 00 00       	cmp    $0x80,%eax
f011ade3:	74 17                	je     f011adfc <test_kmalloc_bestfit1+0x10ee>
f011ade5:	83 ec 04             	sub    $0x4,%esp
f011ade8:	68 b7 b4 13 f0       	push   $0xf013b4b7
f011aded:	68 1e 02 00 00       	push   $0x21e
f011adf2:	68 5a b0 13 f0       	push   $0xf013b05a
f011adf7:	e8 09 54 fe ff       	call   f0100205 <_panic>
	}

	//[5] Allocate again [test best fit]
	{
		//Allocate 2 MB - should be placed in the contiguous hole (2 MB + 512 KB)
		freeFrames = sys_calculate_free_frames();
f011adfc:	e8 9c 1d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011ae01:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ae04:	e8 bf 8f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ae09:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(2*Mega - kilo);
f011ae0c:	83 ec 0c             	sub    $0xc,%esp
f011ae0f:	68 00 fc 1f 00       	push   $0x1ffc00
f011ae14:	e8 6c ca fe ff       	call   f0107885 <kmalloc>
f011ae19:	83 c4 10             	add    $0x10,%esp
f011ae1c:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 9*Mega)) panic("Wrong start address for the allocated space... ");
f011ae22:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011ae28:	89 c1                	mov    %eax,%ecx
f011ae2a:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011ae31:	10 00 00 
f011ae34:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011ae3a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ae3f:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011ae45:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011ae4b:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae50:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011ae56:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011ae5c:	29 d0                	sub    %edx,%eax
f011ae5e:	89 c3                	mov    %eax,%ebx
f011ae60:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011ae67:	10 00 00 
f011ae6a:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011ae6f:	0f b6 d0             	movzbl %al,%edx
f011ae72:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011ae78:	01 d0                	add    %edx,%eax
f011ae7a:	48                   	dec    %eax
f011ae7b:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011ae81:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011ae87:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae8c:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011ae92:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011ae98:	29 d0                	sub    %edx,%eax
f011ae9a:	01 c3                	add    %eax,%ebx
f011ae9c:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011aea3:	10 00 00 
f011aea6:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011aeab:	0f b6 c0             	movzbl %al,%eax
f011aeae:	c1 e0 04             	shl    $0x4,%eax
f011aeb1:	89 c2                	mov    %eax,%edx
f011aeb3:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011aeb9:	01 d0                	add    %edx,%eax
f011aebb:	48                   	dec    %eax
f011aebc:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011aec2:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011aec8:	ba 00 00 00 00       	mov    $0x0,%edx
f011aecd:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011aed3:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011aed9:	29 d0                	sub    %edx,%eax
f011aedb:	01 d8                	add    %ebx,%eax
f011aedd:	2d 00 c0 6f 09       	sub    $0x96fc000,%eax
f011aee2:	39 c1                	cmp    %eax,%ecx
f011aee4:	74 17                	je     f011aefd <test_kmalloc_bestfit1+0x11ef>
f011aee6:	83 ec 04             	sub    $0x4,%esp
f011aee9:	68 74 b4 13 f0       	push   $0xf013b474
f011aeee:	68 27 02 00 00       	push   $0x227
f011aef3:	68 5a b0 13 f0       	push   $0xf013b05a
f011aef8:	e8 08 53 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aefd:	e8 c6 8e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011af02:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011af05:	74 17                	je     f011af1e <test_kmalloc_bestfit1+0x1210>
f011af07:	83 ec 04             	sub    $0x4,%esp
f011af0a:	68 74 b0 13 f0       	push   $0xf013b074
f011af0f:	68 28 02 00 00       	push   $0x228
f011af14:	68 5a b0 13 f0       	push   $0xf013b05a
f011af19:	e8 e7 52 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011af1e:	e8 7a 1c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011af23:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011af26:	29 c2                	sub    %eax,%edx
f011af28:	89 d0                	mov    %edx,%eax
f011af2a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011af2f:	74 17                	je     f011af48 <test_kmalloc_bestfit1+0x123a>
f011af31:	83 ec 04             	sub    $0x4,%esp
f011af34:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011af39:	68 29 02 00 00       	push   $0x229
f011af3e:	68 5a b0 13 f0       	push   $0xf013b05a
f011af43:	e8 bd 52 fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test BEST FIT allocation (1) completed successfully.\n");
f011af48:	83 ec 0c             	sub    $0xc,%esp
f011af4b:	68 c4 b4 13 f0       	push   $0xf013b4c4
f011af50:	e8 b9 5d fe ff       	call   f0100d0e <cprintf>
f011af55:	83 c4 10             	add    $0x10,%esp

	return 1;
f011af58:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011af5d:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011af60:	5b                   	pop    %ebx
f011af61:	5f                   	pop    %edi
f011af62:	5d                   	pop    %ebp
f011af63:	c3                   	ret    

f011af64 <test_kmalloc_bestfit2>:

int test_kmalloc_bestfit2()
{
f011af64:	55                   	push   %ebp
f011af65:	89 e5                	mov    %esp,%ebp
f011af67:	57                   	push   %edi
f011af68:	53                   	push   %ebx
f011af69:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011af6f:	83 ec 0c             	sub    $0xc,%esp
f011af72:	68 9c af 13 f0       	push   $0xf013af9c
f011af77:	e8 92 5d fe ff       	call   f0100d0e <cprintf>
f011af7c:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011af7f:	83 ec 0c             	sub    $0xc,%esp
f011af82:	68 cc af 13 f0       	push   $0xf013afcc
f011af87:	e8 82 5d fe ff       	call   f0100d0e <cprintf>
f011af8c:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011af8f:	83 ec 0c             	sub    $0xc,%esp
f011af92:	68 9c af 13 f0       	push   $0xf013af9c
f011af97:	e8 72 5d fe ff       	call   f0100d0e <cprintf>
f011af9c:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011af9f:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011afa5:	b9 14 00 00 00       	mov    $0x14,%ecx
f011afaa:	b8 00 00 00 00       	mov    $0x0,%eax
f011afaf:	89 d7                	mov    %edx,%edi
f011afb1:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011afb3:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011afba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011afbd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011afc2:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011afc5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011afc8:	ba 00 00 00 00       	mov    $0x0,%edx
f011afcd:	f7 75 f4             	divl   -0xc(%ebp)
f011afd0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011afd3:	29 d0                	sub    %edx,%eax
f011afd5:	89 c1                	mov    %eax,%ecx
f011afd7:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011afde:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011afe3:	0f b6 d0             	movzbl %al,%edx
f011afe6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011afe9:	01 d0                	add    %edx,%eax
f011afeb:	48                   	dec    %eax
f011afec:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011afef:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011aff2:	ba 00 00 00 00       	mov    $0x0,%edx
f011aff7:	f7 75 ec             	divl   -0x14(%ebp)
f011affa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011affd:	29 d0                	sub    %edx,%eax
f011afff:	01 c1                	add    %eax,%ecx
f011b001:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011b008:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011b00d:	0f b6 c0             	movzbl %al,%eax
f011b010:	c1 e0 04             	shl    $0x4,%eax
f011b013:	89 c2                	mov    %eax,%edx
f011b015:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011b018:	01 d0                	add    %edx,%eax
f011b01a:	48                   	dec    %eax
f011b01b:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011b01e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011b021:	ba 00 00 00 00       	mov    $0x0,%edx
f011b026:	f7 75 e4             	divl   -0x1c(%ebp)
f011b029:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011b02c:	29 d0                	sub    %edx,%eax
f011b02e:	01 c8                	add    %ecx,%eax
f011b030:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011b035:	29 c2                	sub    %eax,%edx
f011b037:	89 d0                	mov    %edx,%eax
f011b039:	83 ec 0c             	sub    $0xc,%esp
f011b03c:	50                   	push   %eax
f011b03d:	e8 43 c8 fe ff       	call   f0107885 <kmalloc>
f011b042:	83 c4 10             	add    $0x10,%esp
f011b045:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Kmalloc: Attempt to allocate more than heap size, should return NULL");
f011b04b:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011b051:	85 c0                	test   %eax,%eax
f011b053:	74 17                	je     f011b06c <test_kmalloc_bestfit2+0x108>
f011b055:	83 ec 04             	sub    $0x4,%esp
f011b058:	68 0c b5 13 f0       	push   $0xf013b50c
f011b05d:	68 3f 02 00 00       	push   $0x23f
f011b062:	68 5a b0 13 f0       	push   $0xf013b05a
f011b067:	e8 99 51 fe ff       	call   f0100205 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b06c:	e8 2c 1b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b071:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b074:	e8 4f 8d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b079:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011b07c:	83 ec 0c             	sub    $0xc,%esp
f011b07f:	68 00 fc 1f 00       	push   $0x1ffc00
f011b084:	e8 fc c7 fe ff       	call   f0107885 <kmalloc>
f011b089:	83 c4 10             	add    $0x10,%esp
f011b08c:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011b092:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011b098:	89 c1                	mov    %eax,%ecx
f011b09a:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011b0a1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011b0a4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b0a9:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011b0ac:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011b0af:	ba 00 00 00 00       	mov    $0x0,%edx
f011b0b4:	f7 75 d4             	divl   -0x2c(%ebp)
f011b0b7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011b0ba:	29 d0                	sub    %edx,%eax
f011b0bc:	89 c3                	mov    %eax,%ebx
f011b0be:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011b0c5:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011b0ca:	0f b6 d0             	movzbl %al,%edx
f011b0cd:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011b0d0:	01 d0                	add    %edx,%eax
f011b0d2:	48                   	dec    %eax
f011b0d3:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011b0d6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b0d9:	ba 00 00 00 00       	mov    $0x0,%edx
f011b0de:	f7 75 cc             	divl   -0x34(%ebp)
f011b0e1:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b0e4:	29 d0                	sub    %edx,%eax
f011b0e6:	01 c3                	add    %eax,%ebx
f011b0e8:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011b0ef:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011b0f4:	0f b6 c0             	movzbl %al,%eax
f011b0f7:	c1 e0 04             	shl    $0x4,%eax
f011b0fa:	89 c2                	mov    %eax,%edx
f011b0fc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011b0ff:	01 d0                	add    %edx,%eax
f011b101:	48                   	dec    %eax
f011b102:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011b105:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b108:	ba 00 00 00 00       	mov    $0x0,%edx
f011b10d:	f7 75 c4             	divl   -0x3c(%ebp)
f011b110:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b113:	29 d0                	sub    %edx,%eax
f011b115:	01 d8                	add    %ebx,%eax
f011b117:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011b11c:	39 c1                	cmp    %eax,%ecx
f011b11e:	74 17                	je     f011b137 <test_kmalloc_bestfit2+0x1d3>
f011b120:	83 ec 04             	sub    $0x4,%esp
f011b123:	68 74 b4 13 f0       	push   $0xf013b474
f011b128:	68 49 02 00 00       	push   $0x249
f011b12d:	68 5a b0 13 f0       	push   $0xf013b05a
f011b132:	e8 ce 50 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b137:	e8 8c 8c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b13c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b13f:	74 17                	je     f011b158 <test_kmalloc_bestfit2+0x1f4>
f011b141:	83 ec 04             	sub    $0x4,%esp
f011b144:	68 74 b0 13 f0       	push   $0xf013b074
f011b149:	68 4a 02 00 00       	push   $0x24a
f011b14e:	68 5a b0 13 f0       	push   $0xf013b05a
f011b153:	e8 ad 50 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011b158:	e8 40 1a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b15d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b160:	29 c2                	sub    %eax,%edx
f011b162:	89 d0                	mov    %edx,%eax
f011b164:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b169:	74 17                	je     f011b182 <test_kmalloc_bestfit2+0x21e>
f011b16b:	83 ec 04             	sub    $0x4,%esp
f011b16e:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011b173:	68 4b 02 00 00       	push   $0x24b
f011b178:	68 5a b0 13 f0       	push   $0xf013b05a
f011b17d:	e8 83 50 fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b182:	e8 16 1a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b187:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b18a:	e8 39 8c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b18f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011b192:	83 ec 0c             	sub    $0xc,%esp
f011b195:	68 00 fc 1f 00       	push   $0x1ffc00
f011b19a:	e8 e6 c6 fe ff       	call   f0107885 <kmalloc>
f011b19f:	83 c4 10             	add    $0x10,%esp
f011b1a2:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011b1a8:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011b1ae:	89 c1                	mov    %eax,%ecx
f011b1b0:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011b1b7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011b1ba:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b1bf:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011b1c2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b1c5:	ba 00 00 00 00       	mov    $0x0,%edx
f011b1ca:	f7 75 bc             	divl   -0x44(%ebp)
f011b1cd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b1d0:	29 d0                	sub    %edx,%eax
f011b1d2:	89 c3                	mov    %eax,%ebx
f011b1d4:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011b1db:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011b1e0:	0f b6 d0             	movzbl %al,%edx
f011b1e3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011b1e6:	01 d0                	add    %edx,%eax
f011b1e8:	48                   	dec    %eax
f011b1e9:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011b1ec:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011b1ef:	ba 00 00 00 00       	mov    $0x0,%edx
f011b1f4:	f7 75 b4             	divl   -0x4c(%ebp)
f011b1f7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011b1fa:	29 d0                	sub    %edx,%eax
f011b1fc:	01 c3                	add    %eax,%ebx
f011b1fe:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011b205:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011b20a:	0f b6 c0             	movzbl %al,%eax
f011b20d:	c1 e0 04             	shl    $0x4,%eax
f011b210:	89 c2                	mov    %eax,%edx
f011b212:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011b215:	01 d0                	add    %edx,%eax
f011b217:	48                   	dec    %eax
f011b218:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011b21b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b21e:	ba 00 00 00 00       	mov    $0x0,%edx
f011b223:	f7 75 ac             	divl   -0x54(%ebp)
f011b226:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b229:	29 d0                	sub    %edx,%eax
f011b22b:	01 d8                	add    %ebx,%eax
f011b22d:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011b232:	39 c1                	cmp    %eax,%ecx
f011b234:	74 17                	je     f011b24d <test_kmalloc_bestfit2+0x2e9>
f011b236:	83 ec 04             	sub    $0x4,%esp
f011b239:	68 74 b4 13 f0       	push   $0xf013b474
f011b23e:	68 51 02 00 00       	push   $0x251
f011b243:	68 5a b0 13 f0       	push   $0xf013b05a
f011b248:	e8 b8 4f fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b24d:	e8 76 8b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b252:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b255:	74 17                	je     f011b26e <test_kmalloc_bestfit2+0x30a>
f011b257:	83 ec 04             	sub    $0x4,%esp
f011b25a:	68 74 b0 13 f0       	push   $0xf013b074
f011b25f:	68 52 02 00 00       	push   $0x252
f011b264:	68 5a b0 13 f0       	push   $0xf013b05a
f011b269:	e8 97 4f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011b26e:	e8 2a 19 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b273:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b276:	29 c2                	sub    %eax,%edx
f011b278:	89 d0                	mov    %edx,%eax
f011b27a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b27f:	74 17                	je     f011b298 <test_kmalloc_bestfit2+0x334>
f011b281:	83 ec 04             	sub    $0x4,%esp
f011b284:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011b289:	68 53 02 00 00       	push   $0x253
f011b28e:	68 5a b0 13 f0       	push   $0xf013b05a
f011b293:	e8 6d 4f fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011b298:	e8 00 19 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b29d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b2a0:	e8 23 8b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b2a5:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011b2a8:	83 ec 0c             	sub    $0xc,%esp
f011b2ab:	68 00 08 00 00       	push   $0x800
f011b2b0:	e8 d0 c5 fe ff       	call   f0107885 <kmalloc>
f011b2b5:	83 c4 10             	add    $0x10,%esp
f011b2b8:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011b2be:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011b2c4:	89 c1                	mov    %eax,%ecx
f011b2c6:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011b2cd:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b2d0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b2d5:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011b2d8:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b2db:	ba 00 00 00 00       	mov    $0x0,%edx
f011b2e0:	f7 75 a4             	divl   -0x5c(%ebp)
f011b2e3:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b2e6:	29 d0                	sub    %edx,%eax
f011b2e8:	89 c3                	mov    %eax,%ebx
f011b2ea:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011b2f1:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011b2f6:	0f b6 d0             	movzbl %al,%edx
f011b2f9:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011b2fc:	01 d0                	add    %edx,%eax
f011b2fe:	48                   	dec    %eax
f011b2ff:	89 45 98             	mov    %eax,-0x68(%ebp)
f011b302:	8b 45 98             	mov    -0x68(%ebp),%eax
f011b305:	ba 00 00 00 00       	mov    $0x0,%edx
f011b30a:	f7 75 9c             	divl   -0x64(%ebp)
f011b30d:	8b 45 98             	mov    -0x68(%ebp),%eax
f011b310:	29 d0                	sub    %edx,%eax
f011b312:	01 c3                	add    %eax,%ebx
f011b314:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011b31b:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011b320:	0f b6 c0             	movzbl %al,%eax
f011b323:	c1 e0 04             	shl    $0x4,%eax
f011b326:	89 c2                	mov    %eax,%edx
f011b328:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011b32b:	01 d0                	add    %edx,%eax
f011b32d:	48                   	dec    %eax
f011b32e:	89 45 90             	mov    %eax,-0x70(%ebp)
f011b331:	8b 45 90             	mov    -0x70(%ebp),%eax
f011b334:	ba 00 00 00 00       	mov    $0x0,%edx
f011b339:	f7 75 94             	divl   -0x6c(%ebp)
f011b33c:	8b 45 90             	mov    -0x70(%ebp),%eax
f011b33f:	29 d0                	sub    %edx,%eax
f011b341:	01 d8                	add    %ebx,%eax
f011b343:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011b348:	39 c1                	cmp    %eax,%ecx
f011b34a:	74 17                	je     f011b363 <test_kmalloc_bestfit2+0x3ff>
f011b34c:	83 ec 04             	sub    $0x4,%esp
f011b34f:	68 74 b4 13 f0       	push   $0xf013b474
f011b354:	68 59 02 00 00       	push   $0x259
f011b359:	68 5a b0 13 f0       	push   $0xf013b05a
f011b35e:	e8 a2 4e fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b363:	e8 60 8a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b368:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b36b:	74 17                	je     f011b384 <test_kmalloc_bestfit2+0x420>
f011b36d:	83 ec 04             	sub    $0x4,%esp
f011b370:	68 74 b0 13 f0       	push   $0xf013b074
f011b375:	68 5a 02 00 00       	push   $0x25a
f011b37a:	68 5a b0 13 f0       	push   $0xf013b05a
f011b37f:	e8 81 4e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011b384:	e8 14 18 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b389:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b38c:	29 c2                	sub    %eax,%edx
f011b38e:	89 d0                	mov    %edx,%eax
f011b390:	83 f8 01             	cmp    $0x1,%eax
f011b393:	74 17                	je     f011b3ac <test_kmalloc_bestfit2+0x448>
f011b395:	83 ec 04             	sub    $0x4,%esp
f011b398:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011b39d:	68 5b 02 00 00       	push   $0x25b
f011b3a2:	68 5a b0 13 f0       	push   $0xf013b05a
f011b3a7:	e8 59 4e fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011b3ac:	e8 ec 17 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b3b1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b3b4:	e8 0f 8a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b3b9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011b3bc:	83 ec 0c             	sub    $0xc,%esp
f011b3bf:	68 00 08 00 00       	push   $0x800
f011b3c4:	e8 bc c4 fe ff       	call   f0107885 <kmalloc>
f011b3c9:	83 c4 10             	add    $0x10,%esp
f011b3cc:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011b3d2:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011b3d8:	89 c1                	mov    %eax,%ecx
f011b3da:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011b3e1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011b3e4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b3e9:	89 45 88             	mov    %eax,-0x78(%ebp)
f011b3ec:	8b 45 88             	mov    -0x78(%ebp),%eax
f011b3ef:	ba 00 00 00 00       	mov    $0x0,%edx
f011b3f4:	f7 75 8c             	divl   -0x74(%ebp)
f011b3f7:	8b 45 88             	mov    -0x78(%ebp),%eax
f011b3fa:	29 d0                	sub    %edx,%eax
f011b3fc:	89 c3                	mov    %eax,%ebx
f011b3fe:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011b405:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011b40a:	0f b6 d0             	movzbl %al,%edx
f011b40d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011b410:	01 d0                	add    %edx,%eax
f011b412:	48                   	dec    %eax
f011b413:	89 45 80             	mov    %eax,-0x80(%ebp)
f011b416:	8b 45 80             	mov    -0x80(%ebp),%eax
f011b419:	ba 00 00 00 00       	mov    $0x0,%edx
f011b41e:	f7 75 84             	divl   -0x7c(%ebp)
f011b421:	8b 45 80             	mov    -0x80(%ebp),%eax
f011b424:	29 d0                	sub    %edx,%eax
f011b426:	01 c3                	add    %eax,%ebx
f011b428:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011b42f:	10 00 00 
f011b432:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011b437:	0f b6 c0             	movzbl %al,%eax
f011b43a:	c1 e0 04             	shl    $0x4,%eax
f011b43d:	89 c2                	mov    %eax,%edx
f011b43f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011b445:	01 d0                	add    %edx,%eax
f011b447:	48                   	dec    %eax
f011b448:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011b44e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011b454:	ba 00 00 00 00       	mov    $0x0,%edx
f011b459:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011b45f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011b465:	29 d0                	sub    %edx,%eax
f011b467:	01 d8                	add    %ebx,%eax
f011b469:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011b46e:	39 c1                	cmp    %eax,%ecx
f011b470:	74 17                	je     f011b489 <test_kmalloc_bestfit2+0x525>
f011b472:	83 ec 04             	sub    $0x4,%esp
f011b475:	68 74 b4 13 f0       	push   $0xf013b474
f011b47a:	68 61 02 00 00       	push   $0x261
f011b47f:	68 5a b0 13 f0       	push   $0xf013b05a
f011b484:	e8 7c 4d fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b489:	e8 3a 89 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b48e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b491:	74 17                	je     f011b4aa <test_kmalloc_bestfit2+0x546>
f011b493:	83 ec 04             	sub    $0x4,%esp
f011b496:	68 74 b0 13 f0       	push   $0xf013b074
f011b49b:	68 62 02 00 00       	push   $0x262
f011b4a0:	68 5a b0 13 f0       	push   $0xf013b05a
f011b4a5:	e8 5b 4d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011b4aa:	e8 ee 16 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b4af:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b4b2:	29 c2                	sub    %eax,%edx
f011b4b4:	89 d0                	mov    %edx,%eax
f011b4b6:	83 f8 01             	cmp    $0x1,%eax
f011b4b9:	74 17                	je     f011b4d2 <test_kmalloc_bestfit2+0x56e>
f011b4bb:	83 ec 04             	sub    $0x4,%esp
f011b4be:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011b4c3:	68 63 02 00 00       	push   $0x263
f011b4c8:	68 5a b0 13 f0       	push   $0xf013b05a
f011b4cd:	e8 33 4d fe ff       	call   f0100205 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b4d2:	e8 c6 16 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b4d7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b4da:	e8 e9 88 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b4df:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011b4e2:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011b4e8:	83 ec 0c             	sub    $0xc,%esp
f011b4eb:	50                   	push   %eax
f011b4ec:	e8 5f c4 fe ff       	call   f0107950 <kfree>
f011b4f1:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b4f4:	e8 cf 88 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b4f9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b4fc:	74 17                	je     f011b515 <test_kmalloc_bestfit2+0x5b1>
f011b4fe:	83 ec 04             	sub    $0x4,%esp
f011b501:	68 74 b0 13 f0       	push   $0xf013b074
f011b506:	68 69 02 00 00       	push   $0x269
f011b50b:	68 5a b0 13 f0       	push   $0xf013b05a
f011b510:	e8 f0 4c fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong allocation: ");
f011b515:	e8 83 16 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b51a:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011b51d:	83 f8 01             	cmp    $0x1,%eax
f011b520:	74 17                	je     f011b539 <test_kmalloc_bestfit2+0x5d5>
f011b522:	83 ec 04             	sub    $0x4,%esp
f011b525:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011b52a:	68 6a 02 00 00       	push   $0x26a
f011b52f:	68 5a b0 13 f0       	push   $0xf013b05a
f011b534:	e8 cc 4c fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011b539:	e8 5f 16 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b53e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b541:	e8 82 88 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b546:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011b549:	83 ec 0c             	sub    $0xc,%esp
f011b54c:	68 00 1c 00 00       	push   $0x1c00
f011b551:	e8 2f c3 fe ff       	call   f0107885 <kmalloc>
f011b556:	83 c4 10             	add    $0x10,%esp
f011b559:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011b55f:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011b565:	89 c1                	mov    %eax,%ecx
f011b567:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011b56e:	10 00 00 
f011b571:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011b577:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b57c:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011b582:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011b588:	ba 00 00 00 00       	mov    $0x0,%edx
f011b58d:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011b593:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011b599:	29 d0                	sub    %edx,%eax
f011b59b:	89 c3                	mov    %eax,%ebx
f011b59d:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011b5a4:	10 00 00 
f011b5a7:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011b5ac:	0f b6 d0             	movzbl %al,%edx
f011b5af:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011b5b5:	01 d0                	add    %edx,%eax
f011b5b7:	48                   	dec    %eax
f011b5b8:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011b5be:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011b5c4:	ba 00 00 00 00       	mov    $0x0,%edx
f011b5c9:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011b5cf:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011b5d5:	29 d0                	sub    %edx,%eax
f011b5d7:	01 c3                	add    %eax,%ebx
f011b5d9:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011b5e0:	10 00 00 
f011b5e3:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011b5e8:	0f b6 c0             	movzbl %al,%eax
f011b5eb:	c1 e0 04             	shl    $0x4,%eax
f011b5ee:	89 c2                	mov    %eax,%edx
f011b5f0:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011b5f6:	01 d0                	add    %edx,%eax
f011b5f8:	48                   	dec    %eax
f011b5f9:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011b5ff:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011b605:	ba 00 00 00 00       	mov    $0x0,%edx
f011b60a:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011b610:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011b616:	29 d0                	sub    %edx,%eax
f011b618:	01 d8                	add    %ebx,%eax
f011b61a:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011b61f:	39 c1                	cmp    %eax,%ecx
f011b621:	74 17                	je     f011b63a <test_kmalloc_bestfit2+0x6d6>
f011b623:	83 ec 04             	sub    $0x4,%esp
f011b626:	68 74 b4 13 f0       	push   $0xf013b474
f011b62b:	68 70 02 00 00       	push   $0x270
f011b630:	68 5a b0 13 f0       	push   $0xf013b05a
f011b635:	e8 cb 4b fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b63a:	e8 89 87 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b63f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b642:	74 17                	je     f011b65b <test_kmalloc_bestfit2+0x6f7>
f011b644:	83 ec 04             	sub    $0x4,%esp
f011b647:	68 74 b0 13 f0       	push   $0xf013b074
f011b64c:	68 71 02 00 00       	push   $0x271
f011b651:	68 5a b0 13 f0       	push   $0xf013b05a
f011b656:	e8 aa 4b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation: ");
f011b65b:	e8 3d 15 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b660:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b663:	29 c2                	sub    %eax,%edx
f011b665:	89 d0                	mov    %edx,%eax
f011b667:	83 f8 02             	cmp    $0x2,%eax
f011b66a:	74 17                	je     f011b683 <test_kmalloc_bestfit2+0x71f>
f011b66c:	83 ec 04             	sub    $0x4,%esp
f011b66f:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011b674:	68 72 02 00 00       	push   $0x272
f011b679:	68 5a b0 13 f0       	push   $0xf013b05a
f011b67e:	e8 82 4b fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b683:	e8 15 15 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b688:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b68b:	e8 38 87 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b690:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011b693:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011b699:	83 ec 0c             	sub    $0xc,%esp
f011b69c:	50                   	push   %eax
f011b69d:	e8 ae c2 fe ff       	call   f0107950 <kfree>
f011b6a2:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b6a5:	e8 1e 87 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b6aa:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b6ad:	74 17                	je     f011b6c6 <test_kmalloc_bestfit2+0x762>
f011b6af:	83 ec 04             	sub    $0x4,%esp
f011b6b2:	68 74 b0 13 f0       	push   $0xf013b074
f011b6b7:	68 78 02 00 00       	push   $0x278
f011b6bc:	68 5a b0 13 f0       	push   $0xf013b05a
f011b6c1:	e8 3f 4b fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: Extra or less pages are removed from main memory");
f011b6c6:	e8 d2 14 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b6cb:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011b6ce:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b6d3:	74 17                	je     f011b6ec <test_kmalloc_bestfit2+0x788>
f011b6d5:	83 ec 04             	sub    $0x4,%esp
f011b6d8:	68 28 b3 13 f0       	push   $0xf013b328
f011b6dd:	68 79 02 00 00       	push   $0x279
f011b6e2:	68 5a b0 13 f0       	push   $0xf013b05a
f011b6e7:	e8 19 4b fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011b6ec:	e8 ac 14 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b6f1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b6f4:	e8 cf 86 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b6f9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011b6fc:	83 ec 0c             	sub    $0xc,%esp
f011b6ff:	68 00 fc 2f 00       	push   $0x2ffc00
f011b704:	e8 7c c1 fe ff       	call   f0107885 <kmalloc>
f011b709:	83 c4 10             	add    $0x10,%esp
f011b70c:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011b712:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011b718:	89 c1                	mov    %eax,%ecx
f011b71a:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011b721:	10 00 00 
f011b724:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011b72a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b72f:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011b735:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011b73b:	ba 00 00 00 00       	mov    $0x0,%edx
f011b740:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011b746:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011b74c:	29 d0                	sub    %edx,%eax
f011b74e:	89 c3                	mov    %eax,%ebx
f011b750:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011b757:	10 00 00 
f011b75a:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011b75f:	0f b6 d0             	movzbl %al,%edx
f011b762:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011b768:	01 d0                	add    %edx,%eax
f011b76a:	48                   	dec    %eax
f011b76b:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011b771:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011b777:	ba 00 00 00 00       	mov    $0x0,%edx
f011b77c:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011b782:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011b788:	29 d0                	sub    %edx,%eax
f011b78a:	01 c3                	add    %eax,%ebx
f011b78c:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011b793:	10 00 00 
f011b796:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011b79b:	0f b6 c0             	movzbl %al,%eax
f011b79e:	c1 e0 04             	shl    $0x4,%eax
f011b7a1:	89 c2                	mov    %eax,%edx
f011b7a3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011b7a9:	01 d0                	add    %edx,%eax
f011b7ab:	48                   	dec    %eax
f011b7ac:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011b7b2:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011b7b8:	ba 00 00 00 00       	mov    $0x0,%edx
f011b7bd:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011b7c3:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011b7c9:	29 d0                	sub    %edx,%eax
f011b7cb:	01 d8                	add    %ebx,%eax
f011b7cd:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011b7d2:	39 c1                	cmp    %eax,%ecx
f011b7d4:	74 17                	je     f011b7ed <test_kmalloc_bestfit2+0x889>
f011b7d6:	83 ec 04             	sub    $0x4,%esp
f011b7d9:	68 74 b4 13 f0       	push   $0xf013b474
f011b7de:	68 7f 02 00 00       	push   $0x27f
f011b7e3:	68 5a b0 13 f0       	push   $0xf013b05a
f011b7e8:	e8 18 4a fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b7ed:	e8 d6 85 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b7f2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b7f5:	74 17                	je     f011b80e <test_kmalloc_bestfit2+0x8aa>
f011b7f7:	83 ec 04             	sub    $0x4,%esp
f011b7fa:	68 74 b0 13 f0       	push   $0xf013b074
f011b7ff:	68 80 02 00 00       	push   $0x280
f011b804:	68 5a b0 13 f0       	push   $0xf013b05a
f011b809:	e8 f7 49 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  768) panic("Wrong allocation: ");
f011b80e:	e8 8a 13 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b813:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b816:	29 c2                	sub    %eax,%edx
f011b818:	89 d0                	mov    %edx,%eax
f011b81a:	3d 00 03 00 00       	cmp    $0x300,%eax
f011b81f:	74 17                	je     f011b838 <test_kmalloc_bestfit2+0x8d4>
f011b821:	83 ec 04             	sub    $0x4,%esp
f011b824:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011b829:	68 81 02 00 00       	push   $0x281
f011b82e:	68 5a b0 13 f0       	push   $0xf013b05a
f011b833:	e8 cd 49 fe ff       	call   f0100205 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011b838:	e8 60 13 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b83d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b840:	e8 83 85 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b845:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011b848:	83 ec 0c             	sub    $0xc,%esp
f011b84b:	68 00 18 20 00       	push   $0x201800
f011b850:	e8 30 c0 fe ff       	call   f0107885 <kmalloc>
f011b855:	83 c4 10             	add    $0x10,%esp
f011b858:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011b85e:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011b864:	89 c1                	mov    %eax,%ecx
f011b866:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011b86d:	10 00 00 
f011b870:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011b876:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b87b:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011b881:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b887:	ba 00 00 00 00       	mov    $0x0,%edx
f011b88c:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011b892:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b898:	29 d0                	sub    %edx,%eax
f011b89a:	89 c3                	mov    %eax,%ebx
f011b89c:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011b8a3:	10 00 00 
f011b8a6:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011b8ab:	0f b6 d0             	movzbl %al,%edx
f011b8ae:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011b8b4:	01 d0                	add    %edx,%eax
f011b8b6:	48                   	dec    %eax
f011b8b7:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011b8bd:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b8c3:	ba 00 00 00 00       	mov    $0x0,%edx
f011b8c8:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011b8ce:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b8d4:	29 d0                	sub    %edx,%eax
f011b8d6:	01 c3                	add    %eax,%ebx
f011b8d8:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011b8df:	10 00 00 
f011b8e2:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011b8e7:	0f b6 c0             	movzbl %al,%eax
f011b8ea:	c1 e0 04             	shl    $0x4,%eax
f011b8ed:	89 c2                	mov    %eax,%edx
f011b8ef:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011b8f5:	01 d0                	add    %edx,%eax
f011b8f7:	48                   	dec    %eax
f011b8f8:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011b8fe:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b904:	ba 00 00 00 00       	mov    $0x0,%edx
f011b909:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011b90f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b915:	29 d0                	sub    %edx,%eax
f011b917:	01 d8                	add    %ebx,%eax
f011b919:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011b91e:	39 c1                	cmp    %eax,%ecx
f011b920:	74 17                	je     f011b939 <test_kmalloc_bestfit2+0x9d5>
f011b922:	83 ec 04             	sub    $0x4,%esp
f011b925:	68 74 b4 13 f0       	push   $0xf013b474
f011b92a:	68 87 02 00 00       	push   $0x287
f011b92f:	68 5a b0 13 f0       	push   $0xf013b05a
f011b934:	e8 cc 48 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b939:	e8 8a 84 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b93e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b941:	74 17                	je     f011b95a <test_kmalloc_bestfit2+0x9f6>
f011b943:	83 ec 04             	sub    $0x4,%esp
f011b946:	68 74 b0 13 f0       	push   $0xf013b074
f011b94b:	68 88 02 00 00       	push   $0x288
f011b950:	68 5a b0 13 f0       	push   $0xf013b05a
f011b955:	e8 ab 48 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011b95a:	e8 3e 12 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b95f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b962:	29 c2                	sub    %eax,%edx
f011b964:	89 d0                	mov    %edx,%eax
f011b966:	3d 02 02 00 00       	cmp    $0x202,%eax
f011b96b:	74 17                	je     f011b984 <test_kmalloc_bestfit2+0xa20>
f011b96d:	83 ec 04             	sub    $0x4,%esp
f011b970:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011b975:	68 89 02 00 00       	push   $0x289
f011b97a:	68 5a b0 13 f0       	push   $0xf013b05a
f011b97f:	e8 81 48 fe ff       	call   f0100205 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011b984:	e8 14 12 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011b989:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b98c:	e8 37 84 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b991:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011b994:	83 ec 0c             	sub    $0xc,%esp
f011b997:	68 00 fc 4f 00       	push   $0x4ffc00
f011b99c:	e8 e4 be fe ff       	call   f0107885 <kmalloc>
f011b9a1:	83 c4 10             	add    $0x10,%esp
f011b9a4:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011b9aa:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011b9b0:	89 c1                	mov    %eax,%ecx
f011b9b2:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011b9b9:	10 00 00 
f011b9bc:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011b9c2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b9c7:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011b9cd:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b9d3:	ba 00 00 00 00       	mov    $0x0,%edx
f011b9d8:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011b9de:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b9e4:	29 d0                	sub    %edx,%eax
f011b9e6:	89 c3                	mov    %eax,%ebx
f011b9e8:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011b9ef:	10 00 00 
f011b9f2:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011b9f7:	0f b6 d0             	movzbl %al,%edx
f011b9fa:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ba00:	01 d0                	add    %edx,%eax
f011ba02:	48                   	dec    %eax
f011ba03:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011ba09:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011ba0f:	ba 00 00 00 00       	mov    $0x0,%edx
f011ba14:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011ba1a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011ba20:	29 d0                	sub    %edx,%eax
f011ba22:	01 c3                	add    %eax,%ebx
f011ba24:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011ba2b:	10 00 00 
f011ba2e:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011ba33:	0f b6 c0             	movzbl %al,%eax
f011ba36:	c1 e0 04             	shl    $0x4,%eax
f011ba39:	89 c2                	mov    %eax,%edx
f011ba3b:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011ba41:	01 d0                	add    %edx,%eax
f011ba43:	48                   	dec    %eax
f011ba44:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011ba4a:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011ba50:	ba 00 00 00 00       	mov    $0x0,%edx
f011ba55:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011ba5b:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011ba61:	29 d0                	sub    %edx,%eax
f011ba63:	01 d8                	add    %ebx,%eax
f011ba65:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011ba6a:	39 c1                	cmp    %eax,%ecx
f011ba6c:	74 17                	je     f011ba85 <test_kmalloc_bestfit2+0xb21>
f011ba6e:	83 ec 04             	sub    $0x4,%esp
f011ba71:	68 74 b4 13 f0       	push   $0xf013b474
f011ba76:	68 8f 02 00 00       	push   $0x28f
f011ba7b:	68 5a b0 13 f0       	push   $0xf013b05a
f011ba80:	e8 80 47 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ba85:	e8 3e 83 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ba8a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ba8d:	74 17                	je     f011baa6 <test_kmalloc_bestfit2+0xb42>
f011ba8f:	83 ec 04             	sub    $0x4,%esp
f011ba92:	68 74 b0 13 f0       	push   $0xf013b074
f011ba97:	68 90 02 00 00       	push   $0x290
f011ba9c:	68 5a b0 13 f0       	push   $0xf013b05a
f011baa1:	e8 5f 47 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((5*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011baa6:	e8 f2 10 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011baab:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011baae:	29 c2                	sub    %eax,%edx
f011bab0:	89 d0                	mov    %edx,%eax
f011bab2:	3d 00 05 00 00       	cmp    $0x500,%eax
f011bab7:	74 17                	je     f011bad0 <test_kmalloc_bestfit2+0xb6c>
f011bab9:	83 ec 04             	sub    $0x4,%esp
f011babc:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011bac1:	68 91 02 00 00       	push   $0x291
f011bac6:	68 5a b0 13 f0       	push   $0xf013b05a
f011bacb:	e8 35 47 fe ff       	call   f0100205 <_panic>

		//2 MB + 8 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bad0:	e8 c8 10 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011bad5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bad8:	e8 eb 82 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011badd:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f011bae0:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011bae6:	83 ec 0c             	sub    $0xc,%esp
f011bae9:	50                   	push   %eax
f011baea:	e8 61 be fe ff       	call   f0107950 <kfree>
f011baef:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011baf2:	e8 d1 82 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011baf7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bafa:	74 17                	je     f011bb13 <test_kmalloc_bestfit2+0xbaf>
f011bafc:	83 ec 04             	sub    $0x4,%esp
f011baff:	68 74 b0 13 f0       	push   $0xf013b074
f011bb04:	68 97 02 00 00       	push   $0x297
f011bb09:	68 5a b0 13 f0       	push   $0xf013b05a
f011bb0e:	e8 f2 46 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  514) panic("Wrong free: Extra or less pages are removed from main memory");
f011bb13:	e8 85 10 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011bb18:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011bb1b:	3d 02 02 00 00       	cmp    $0x202,%eax
f011bb20:	74 17                	je     f011bb39 <test_kmalloc_bestfit2+0xbd5>
f011bb22:	83 ec 04             	sub    $0x4,%esp
f011bb25:	68 28 b3 13 f0       	push   $0xf013b328
f011bb2a:	68 98 02 00 00       	push   $0x298
f011bb2f:	68 5a b0 13 f0       	push   $0xf013b05a
f011bb34:	e8 cc 46 fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bb39:	e8 5f 10 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011bb3e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bb41:	e8 82 82 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bb46:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011bb49:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011bb4f:	83 ec 0c             	sub    $0xc,%esp
f011bb52:	50                   	push   %eax
f011bb53:	e8 f8 bd fe ff       	call   f0107950 <kfree>
f011bb58:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bb5b:	e8 68 82 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bb60:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bb63:	74 17                	je     f011bb7c <test_kmalloc_bestfit2+0xc18>
f011bb65:	83 ec 04             	sub    $0x4,%esp
f011bb68:	68 74 b0 13 f0       	push   $0xf013b074
f011bb6d:	68 9e 02 00 00       	push   $0x29e
f011bb72:	68 5a b0 13 f0       	push   $0xf013b05a
f011bb77:	e8 89 46 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  512) panic("Wrong free: Extra or less pages are removed from main memory.");
f011bb7c:	e8 1c 10 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011bb81:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011bb84:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bb89:	74 17                	je     f011bba2 <test_kmalloc_bestfit2+0xc3e>
f011bb8b:	83 ec 04             	sub    $0x4,%esp
f011bb8e:	68 54 b5 13 f0       	push   $0xf013b554
f011bb93:	68 9f 02 00 00       	push   $0x29f
f011bb98:	68 5a b0 13 f0       	push   $0xf013b05a
f011bb9d:	e8 63 46 fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011bba2:	e8 f6 0f ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011bba7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bbaa:	e8 19 82 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bbaf:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(2*Mega-kilo);
f011bbb2:	83 ec 0c             	sub    $0xc,%esp
f011bbb5:	68 00 fc 1f 00       	push   $0x1ffc00
f011bbba:	e8 c6 bc fe ff       	call   f0107885 <kmalloc>
f011bbbf:	83 c4 10             	add    $0x10,%esp
f011bbc2:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011bbc8:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011bbce:	89 c1                	mov    %eax,%ecx
f011bbd0:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011bbd7:	10 00 00 
f011bbda:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011bbe0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bbe5:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011bbeb:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011bbf1:	ba 00 00 00 00       	mov    $0x0,%edx
f011bbf6:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011bbfc:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011bc02:	29 d0                	sub    %edx,%eax
f011bc04:	89 c3                	mov    %eax,%ebx
f011bc06:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011bc0d:	10 00 00 
f011bc10:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011bc15:	0f b6 d0             	movzbl %al,%edx
f011bc18:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011bc1e:	01 d0                	add    %edx,%eax
f011bc20:	48                   	dec    %eax
f011bc21:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011bc27:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011bc2d:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc32:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011bc38:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011bc3e:	29 d0                	sub    %edx,%eax
f011bc40:	01 c3                	add    %eax,%ebx
f011bc42:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011bc49:	10 00 00 
f011bc4c:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011bc51:	0f b6 c0             	movzbl %al,%eax
f011bc54:	c1 e0 04             	shl    $0x4,%eax
f011bc57:	89 c2                	mov    %eax,%edx
f011bc59:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011bc5f:	01 d0                	add    %edx,%eax
f011bc61:	48                   	dec    %eax
f011bc62:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011bc68:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011bc6e:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc73:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011bc79:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011bc7f:	29 d0                	sub    %edx,%eax
f011bc81:	01 d8                	add    %ebx,%eax
f011bc83:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011bc88:	39 c1                	cmp    %eax,%ecx
f011bc8a:	74 17                	je     f011bca3 <test_kmalloc_bestfit2+0xd3f>
f011bc8c:	83 ec 04             	sub    $0x4,%esp
f011bc8f:	68 74 b4 13 f0       	push   $0xf013b474
f011bc94:	68 a5 02 00 00       	push   $0x2a5
f011bc99:	68 5a b0 13 f0       	push   $0xf013b05a
f011bc9e:	e8 62 45 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bca3:	e8 20 81 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bca8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bcab:	74 17                	je     f011bcc4 <test_kmalloc_bestfit2+0xd60>
f011bcad:	83 ec 04             	sub    $0x4,%esp
f011bcb0:	68 74 b0 13 f0       	push   $0xf013b074
f011bcb5:	68 a6 02 00 00       	push   $0x2a6
f011bcba:	68 5a b0 13 f0       	push   $0xf013b05a
f011bcbf:	e8 41 45 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation:");
f011bcc4:	e8 d4 0e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011bcc9:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bccc:	29 c2                	sub    %eax,%edx
f011bcce:	89 d0                	mov    %edx,%eax
f011bcd0:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bcd5:	74 17                	je     f011bcee <test_kmalloc_bestfit2+0xd8a>
f011bcd7:	83 ec 04             	sub    $0x4,%esp
f011bcda:	68 92 b5 13 f0       	push   $0xf013b592
f011bcdf:	68 a7 02 00 00       	push   $0x2a7
f011bce4:	68 5a b0 13 f0       	push   $0xf013b05a
f011bce9:	e8 17 45 fe ff       	call   f0100205 <_panic>

		//6 KB
		freeFrames = sys_calculate_free_frames() ;
f011bcee:	e8 aa 0e ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011bcf3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bcf6:	e8 cd 80 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bcfb:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[9] = kmalloc(6*kilo);
f011bcfe:	83 ec 0c             	sub    $0xc,%esp
f011bd01:	68 00 18 00 00       	push   $0x1800
f011bd06:	e8 7a bb fe ff       	call   f0107885 <kmalloc>
f011bd0b:	83 c4 10             	add    $0x10,%esp
f011bd0e:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 9*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011bd14:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011bd1a:	89 c1                	mov    %eax,%ecx
f011bd1c:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011bd23:	10 00 00 
f011bd26:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011bd2c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bd31:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011bd37:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011bd3d:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd42:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011bd48:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011bd4e:	29 d0                	sub    %edx,%eax
f011bd50:	89 c3                	mov    %eax,%ebx
f011bd52:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011bd59:	10 00 00 
f011bd5c:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011bd61:	0f b6 d0             	movzbl %al,%edx
f011bd64:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011bd6a:	01 d0                	add    %edx,%eax
f011bd6c:	48                   	dec    %eax
f011bd6d:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011bd73:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011bd79:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd7e:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011bd84:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011bd8a:	29 d0                	sub    %edx,%eax
f011bd8c:	01 c3                	add    %eax,%ebx
f011bd8e:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011bd95:	10 00 00 
f011bd98:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011bd9d:	0f b6 c0             	movzbl %al,%eax
f011bda0:	c1 e0 04             	shl    $0x4,%eax
f011bda3:	89 c2                	mov    %eax,%edx
f011bda5:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011bdab:	01 d0                	add    %edx,%eax
f011bdad:	48                   	dec    %eax
f011bdae:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011bdb4:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011bdba:	ba 00 00 00 00       	mov    $0x0,%edx
f011bdbf:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011bdc5:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011bdcb:	29 d0                	sub    %edx,%eax
f011bdcd:	01 d8                	add    %ebx,%eax
f011bdcf:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f011bdd4:	39 c1                	cmp    %eax,%ecx
f011bdd6:	74 17                	je     f011bdef <test_kmalloc_bestfit2+0xe8b>
f011bdd8:	83 ec 04             	sub    $0x4,%esp
f011bddb:	68 74 b4 13 f0       	push   $0xf013b474
f011bde0:	68 ad 02 00 00       	push   $0x2ad
f011bde5:	68 5a b0 13 f0       	push   $0xf013b05a
f011bdea:	e8 16 44 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bdef:	e8 d4 7f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bdf4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bdf7:	74 17                	je     f011be10 <test_kmalloc_bestfit2+0xeac>
f011bdf9:	83 ec 04             	sub    $0x4,%esp
f011bdfc:	68 74 b0 13 f0       	push   $0xf013b074
f011be01:	68 ae 02 00 00       	push   $0x2ae
f011be06:	68 5a b0 13 f0       	push   $0xf013b05a
f011be0b:	e8 f5 43 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation:");
f011be10:	e8 88 0d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011be15:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011be18:	29 c2                	sub    %eax,%edx
f011be1a:	89 d0                	mov    %edx,%eax
f011be1c:	83 f8 02             	cmp    $0x2,%eax
f011be1f:	74 17                	je     f011be38 <test_kmalloc_bestfit2+0xed4>
f011be21:	83 ec 04             	sub    $0x4,%esp
f011be24:	68 92 b5 13 f0       	push   $0xf013b592
f011be29:	68 af 02 00 00       	push   $0x2af
f011be2e:	68 5a b0 13 f0       	push   $0xf013b05a
f011be33:	e8 cd 43 fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011be38:	e8 60 0d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011be3d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011be40:	e8 83 7f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011be45:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011be48:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011be4e:	83 ec 0c             	sub    $0xc,%esp
f011be51:	50                   	push   %eax
f011be52:	e8 f9 ba fe ff       	call   f0107950 <kfree>
f011be57:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011be5a:	e8 69 7f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011be5f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011be62:	74 17                	je     f011be7b <test_kmalloc_bestfit2+0xf17>
f011be64:	83 ec 04             	sub    $0x4,%esp
f011be67:	68 74 b0 13 f0       	push   $0xf013b074
f011be6c:	68 b5 02 00 00       	push   $0x2b5
f011be71:	68 5a b0 13 f0       	push   $0xf013b05a
f011be76:	e8 8a 43 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  768) panic("Wrong free: Extra or less pages are removed from main memory.");
f011be7b:	e8 1d 0d ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011be80:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011be83:	3d 00 03 00 00       	cmp    $0x300,%eax
f011be88:	74 17                	je     f011bea1 <test_kmalloc_bestfit2+0xf3d>
f011be8a:	83 ec 04             	sub    $0x4,%esp
f011be8d:	68 54 b5 13 f0       	push   $0xf013b554
f011be92:	68 b6 02 00 00       	push   $0x2b6
f011be97:	68 5a b0 13 f0       	push   $0xf013b05a
f011be9c:	e8 64 43 fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011bea1:	e8 f7 0c ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011bea6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bea9:	e8 1a 7f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011beae:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[10] = kmalloc(3*Mega-kilo);
f011beb1:	83 ec 0c             	sub    $0xc,%esp
f011beb4:	68 00 fc 2f 00       	push   $0x2ffc00
f011beb9:	e8 c7 b9 fe ff       	call   f0107885 <kmalloc>
f011bebe:	83 c4 10             	add    $0x10,%esp
f011bec1:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011bec7:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011becd:	89 c1                	mov    %eax,%ecx
f011becf:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011bed6:	10 00 00 
f011bed9:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011bedf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bee4:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011beea:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011bef0:	ba 00 00 00 00       	mov    $0x0,%edx
f011bef5:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011befb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011bf01:	29 d0                	sub    %edx,%eax
f011bf03:	89 c3                	mov    %eax,%ebx
f011bf05:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011bf0c:	10 00 00 
f011bf0f:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011bf14:	0f b6 d0             	movzbl %al,%edx
f011bf17:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011bf1d:	01 d0                	add    %edx,%eax
f011bf1f:	48                   	dec    %eax
f011bf20:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011bf26:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011bf2c:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf31:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011bf37:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011bf3d:	29 d0                	sub    %edx,%eax
f011bf3f:	01 c3                	add    %eax,%ebx
f011bf41:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011bf48:	10 00 00 
f011bf4b:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011bf50:	0f b6 c0             	movzbl %al,%eax
f011bf53:	c1 e0 04             	shl    $0x4,%eax
f011bf56:	89 c2                	mov    %eax,%edx
f011bf58:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011bf5e:	01 d0                	add    %edx,%eax
f011bf60:	48                   	dec    %eax
f011bf61:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011bf67:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011bf6d:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf72:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011bf78:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011bf7e:	29 d0                	sub    %edx,%eax
f011bf80:	01 d8                	add    %ebx,%eax
f011bf82:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011bf87:	39 c1                	cmp    %eax,%ecx
f011bf89:	74 17                	je     f011bfa2 <test_kmalloc_bestfit2+0x103e>
f011bf8b:	83 ec 04             	sub    $0x4,%esp
f011bf8e:	68 74 b4 13 f0       	push   $0xf013b474
f011bf93:	68 bc 02 00 00       	push   $0x2bc
f011bf98:	68 5a b0 13 f0       	push   $0xf013b05a
f011bf9d:	e8 63 42 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bfa2:	e8 21 7e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bfa7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bfaa:	74 17                	je     f011bfc3 <test_kmalloc_bestfit2+0x105f>
f011bfac:	83 ec 04             	sub    $0x4,%esp
f011bfaf:	68 74 b0 13 f0       	push   $0xf013b074
f011bfb4:	68 bd 02 00 00       	push   $0x2bd
f011bfb9:	68 5a b0 13 f0       	push   $0xf013b05a
f011bfbe:	e8 42 42 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((3*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011bfc3:	e8 d5 0b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011bfc8:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bfcb:	29 c2                	sub    %eax,%edx
f011bfcd:	89 d0                	mov    %edx,%eax
f011bfcf:	3d 00 03 00 00       	cmp    $0x300,%eax
f011bfd4:	74 17                	je     f011bfed <test_kmalloc_bestfit2+0x1089>
f011bfd6:	83 ec 04             	sub    $0x4,%esp
f011bfd9:	68 54 b5 13 f0       	push   $0xf013b554
f011bfde:	68 be 02 00 00       	push   $0x2be
f011bfe3:	68 5a b0 13 f0       	push   $0xf013b05a
f011bfe8:	e8 18 42 fe ff       	call   f0100205 <_panic>

		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f011bfed:	e8 ab 0b ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011bff2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bff5:	e8 ce 7d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bffa:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega-kilo);
f011bffd:	83 ec 0c             	sub    $0xc,%esp
f011c000:	68 00 fc 3f 00       	push   $0x3ffc00
f011c005:	e8 7b b8 fe ff       	call   f0107885 <kmalloc>
f011c00a:	83 c4 10             	add    $0x10,%esp
f011c00d:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011c013:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011c019:	89 c1                	mov    %eax,%ecx
f011c01b:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011c022:	10 00 00 
f011c025:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011c02b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c030:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011c036:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011c03c:	ba 00 00 00 00       	mov    $0x0,%edx
f011c041:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011c047:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011c04d:	29 d0                	sub    %edx,%eax
f011c04f:	89 c3                	mov    %eax,%ebx
f011c051:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011c058:	10 00 00 
f011c05b:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011c060:	0f b6 d0             	movzbl %al,%edx
f011c063:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011c069:	01 d0                	add    %edx,%eax
f011c06b:	48                   	dec    %eax
f011c06c:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011c072:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011c078:	ba 00 00 00 00       	mov    $0x0,%edx
f011c07d:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011c083:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011c089:	29 d0                	sub    %edx,%eax
f011c08b:	01 c3                	add    %eax,%ebx
f011c08d:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011c094:	10 00 00 
f011c097:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011c09c:	0f b6 c0             	movzbl %al,%eax
f011c09f:	c1 e0 04             	shl    $0x4,%eax
f011c0a2:	89 c2                	mov    %eax,%edx
f011c0a4:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011c0aa:	01 d0                	add    %edx,%eax
f011c0ac:	48                   	dec    %eax
f011c0ad:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011c0b3:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011c0b9:	ba 00 00 00 00       	mov    $0x0,%edx
f011c0be:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011c0c4:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011c0ca:	29 d0                	sub    %edx,%eax
f011c0cc:	01 d8                	add    %ebx,%eax
f011c0ce:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011c0d3:	39 c1                	cmp    %eax,%ecx
f011c0d5:	74 17                	je     f011c0ee <test_kmalloc_bestfit2+0x118a>
f011c0d7:	83 ec 04             	sub    $0x4,%esp
f011c0da:	68 74 b4 13 f0       	push   $0xf013b474
f011c0df:	68 c4 02 00 00       	push   $0x2c4
f011c0e4:	68 5a b0 13 f0       	push   $0xf013b05a
f011c0e9:	e8 17 41 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c0ee:	e8 d5 7c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c0f3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c0f6:	74 17                	je     f011c10f <test_kmalloc_bestfit2+0x11ab>
f011c0f8:	83 ec 04             	sub    $0x4,%esp
f011c0fb:	68 74 b0 13 f0       	push   $0xf013b074
f011c100:	68 c5 02 00 00       	push   $0x2c5
f011c105:	68 5a b0 13 f0       	push   $0xf013b05a
f011c10a:	e8 f6 40 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((4*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c10f:	e8 89 0a ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c114:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c117:	29 c2                	sub    %eax,%edx
f011c119:	89 d0                	mov    %edx,%eax
f011c11b:	3d 00 04 00 00       	cmp    $0x400,%eax
f011c120:	74 17                	je     f011c139 <test_kmalloc_bestfit2+0x11d5>
f011c122:	83 ec 04             	sub    $0x4,%esp
f011c125:	68 54 b5 13 f0       	push   $0xf013b554
f011c12a:	68 c6 02 00 00       	push   $0x2c6
f011c12f:	68 5a b0 13 f0       	push   $0xf013b05a
f011c134:	e8 cc 40 fe ff       	call   f0100205 <_panic>
	}

	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[12] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011c139:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011c140:	10 00 00 
f011c143:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011c149:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c14e:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011c154:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011c15a:	ba 00 00 00 00       	mov    $0x0,%edx
f011c15f:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011c165:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011c16b:	29 d0                	sub    %edx,%eax
f011c16d:	89 c1                	mov    %eax,%ecx
f011c16f:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011c176:	10 00 00 
f011c179:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011c17e:	0f b6 d0             	movzbl %al,%edx
f011c181:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011c187:	01 d0                	add    %edx,%eax
f011c189:	48                   	dec    %eax
f011c18a:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011c190:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011c196:	ba 00 00 00 00       	mov    $0x0,%edx
f011c19b:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011c1a1:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011c1a7:	29 d0                	sub    %edx,%eax
f011c1a9:	01 c1                	add    %eax,%ecx
f011c1ab:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011c1b2:	10 00 00 
f011c1b5:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011c1ba:	0f b6 c0             	movzbl %al,%eax
f011c1bd:	c1 e0 04             	shl    $0x4,%eax
f011c1c0:	89 c2                	mov    %eax,%edx
f011c1c2:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011c1c8:	01 d0                	add    %edx,%eax
f011c1ca:	48                   	dec    %eax
f011c1cb:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011c1d1:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011c1d7:	ba 00 00 00 00       	mov    $0x0,%edx
f011c1dc:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011c1e2:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011c1e8:	29 d0                	sub    %edx,%eax
f011c1ea:	01 c8                	add    %ecx,%eax
f011c1ec:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011c1f1:	29 c2                	sub    %eax,%edx
f011c1f3:	89 d0                	mov    %edx,%eax
f011c1f5:	83 ec 0c             	sub    $0xc,%esp
f011c1f8:	50                   	push   %eax
f011c1f9:	e8 87 b6 fe ff       	call   f0107885 <kmalloc>
f011c1fe:	83 c4 10             	add    $0x10,%esp
f011c201:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if (ptr_allocations[12] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011c207:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011c20d:	85 c0                	test   %eax,%eax
f011c20f:	74 17                	je     f011c228 <test_kmalloc_bestfit2+0x12c4>
f011c211:	83 ec 04             	sub    $0x4,%esp
f011c214:	68 a4 b5 13 f0       	push   $0xf013b5a4
f011c219:	68 ce 02 00 00       	push   $0x2ce
f011c21e:	68 5a b0 13 f0       	push   $0xf013b05a
f011c223:	e8 dd 3f fe ff       	call   f0100205 <_panic>

		cprintf("Congratulations!! test BEST FIT allocation (2) completed successfully.\n");
f011c228:	83 ec 0c             	sub    $0xc,%esp
f011c22b:	68 08 b6 13 f0       	push   $0xf013b608
f011c230:	e8 d9 4a fe ff       	call   f0100d0e <cprintf>
f011c235:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011c238:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011c23d:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011c240:	5b                   	pop    %ebx
f011c241:	5f                   	pop    %edi
f011c242:	5d                   	pop    %ebp
f011c243:	c3                   	ret    

f011c244 <test_kmalloc_firstfit1>:

int test_kmalloc_firstfit1()
{
f011c244:	55                   	push   %ebp
f011c245:	89 e5                	mov    %esp,%ebp
f011c247:	57                   	push   %edi
f011c248:	53                   	push   %ebx
f011c249:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011c24f:	83 ec 0c             	sub    $0xc,%esp
f011c252:	68 9c af 13 f0       	push   $0xf013af9c
f011c257:	e8 b2 4a fe ff       	call   f0100d0e <cprintf>
f011c25c:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011c25f:	83 ec 0c             	sub    $0xc,%esp
f011c262:	68 cc af 13 f0       	push   $0xf013afcc
f011c267:	e8 a2 4a fe ff       	call   f0100d0e <cprintf>
f011c26c:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011c26f:	83 ec 0c             	sub    $0xc,%esp
f011c272:	68 9c af 13 f0       	push   $0xf013af9c
f011c277:	e8 92 4a fe ff       	call   f0100d0e <cprintf>
f011c27c:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011c27f:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011c285:	b9 14 00 00 00       	mov    $0x14,%ecx
f011c28a:	b8 00 00 00 00       	mov    $0x0,%eax
f011c28f:	89 d7                	mov    %edx,%edi
f011c291:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c293:	e8 05 09 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c298:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c29b:	e8 28 7b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c2a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f011c2a3:	83 ec 0c             	sub    $0xc,%esp
f011c2a6:	68 00 fc 0f 00       	push   $0xffc00
f011c2ab:	e8 d5 b5 fe ff       	call   f0107885 <kmalloc>
f011c2b0:	83 c4 10             	add    $0x10,%esp
f011c2b3:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011c2b9:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011c2bf:	89 c1                	mov    %eax,%ecx
f011c2c1:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011c2c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011c2cb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c2d0:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011c2d3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c2d6:	ba 00 00 00 00       	mov    $0x0,%edx
f011c2db:	f7 75 ec             	divl   -0x14(%ebp)
f011c2de:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c2e1:	29 d0                	sub    %edx,%eax
f011c2e3:	89 c3                	mov    %eax,%ebx
f011c2e5:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011c2ec:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011c2f1:	0f b6 d0             	movzbl %al,%edx
f011c2f4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011c2f7:	01 d0                	add    %edx,%eax
f011c2f9:	48                   	dec    %eax
f011c2fa:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011c2fd:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c300:	ba 00 00 00 00       	mov    $0x0,%edx
f011c305:	f7 75 e4             	divl   -0x1c(%ebp)
f011c308:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c30b:	29 d0                	sub    %edx,%eax
f011c30d:	01 c3                	add    %eax,%ebx
f011c30f:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011c316:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011c31b:	0f b6 c0             	movzbl %al,%eax
f011c31e:	c1 e0 04             	shl    $0x4,%eax
f011c321:	89 c2                	mov    %eax,%edx
f011c323:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011c326:	01 d0                	add    %edx,%eax
f011c328:	48                   	dec    %eax
f011c329:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011c32c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011c32f:	ba 00 00 00 00       	mov    $0x0,%edx
f011c334:	f7 75 dc             	divl   -0x24(%ebp)
f011c337:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011c33a:	29 d0                	sub    %edx,%eax
f011c33c:	01 d8                	add    %ebx,%eax
f011c33e:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011c343:	39 c1                	cmp    %eax,%ecx
f011c345:	74 17                	je     f011c35e <test_kmalloc_firstfit1+0x11a>
f011c347:	83 ec 04             	sub    $0x4,%esp
f011c34a:	68 74 b4 13 f0       	push   $0xf013b474
f011c34f:	68 e6 02 00 00       	push   $0x2e6
f011c354:	68 5a b0 13 f0       	push   $0xf013b05a
f011c359:	e8 a7 3e fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c35e:	e8 65 7a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c363:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c366:	74 17                	je     f011c37f <test_kmalloc_firstfit1+0x13b>
f011c368:	83 ec 04             	sub    $0x4,%esp
f011c36b:	68 74 b0 13 f0       	push   $0xf013b074
f011c370:	68 e7 02 00 00       	push   $0x2e7
f011c375:	68 5a b0 13 f0       	push   $0xf013b05a
f011c37a:	e8 86 3e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c37f:	e8 19 08 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c384:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c387:	29 c2                	sub    %eax,%edx
f011c389:	89 d0                	mov    %edx,%eax
f011c38b:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c390:	74 17                	je     f011c3a9 <test_kmalloc_firstfit1+0x165>
f011c392:	83 ec 04             	sub    $0x4,%esp
f011c395:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011c39a:	68 e8 02 00 00       	push   $0x2e8
f011c39f:	68 5a b0 13 f0       	push   $0xf013b05a
f011c3a4:	e8 5c 3e fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c3a9:	e8 ef 07 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c3ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c3b1:	e8 12 7a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c3b6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f011c3b9:	83 ec 0c             	sub    $0xc,%esp
f011c3bc:	68 00 fc 0f 00       	push   $0xffc00
f011c3c1:	e8 bf b4 fe ff       	call   f0107885 <kmalloc>
f011c3c6:	83 c4 10             	add    $0x10,%esp
f011c3c9:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011c3cf:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011c3d5:	89 c1                	mov    %eax,%ecx
f011c3d7:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011c3de:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011c3e1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c3e6:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011c3e9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011c3ec:	ba 00 00 00 00       	mov    $0x0,%edx
f011c3f1:	f7 75 d4             	divl   -0x2c(%ebp)
f011c3f4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011c3f7:	29 d0                	sub    %edx,%eax
f011c3f9:	89 c3                	mov    %eax,%ebx
f011c3fb:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011c402:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011c407:	0f b6 d0             	movzbl %al,%edx
f011c40a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011c40d:	01 d0                	add    %edx,%eax
f011c40f:	48                   	dec    %eax
f011c410:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011c413:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011c416:	ba 00 00 00 00       	mov    $0x0,%edx
f011c41b:	f7 75 cc             	divl   -0x34(%ebp)
f011c41e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011c421:	29 d0                	sub    %edx,%eax
f011c423:	01 c3                	add    %eax,%ebx
f011c425:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011c42c:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011c431:	0f b6 c0             	movzbl %al,%eax
f011c434:	c1 e0 04             	shl    $0x4,%eax
f011c437:	89 c2                	mov    %eax,%edx
f011c439:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011c43c:	01 d0                	add    %edx,%eax
f011c43e:	48                   	dec    %eax
f011c43f:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011c442:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c445:	ba 00 00 00 00       	mov    $0x0,%edx
f011c44a:	f7 75 c4             	divl   -0x3c(%ebp)
f011c44d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c450:	29 d0                	sub    %edx,%eax
f011c452:	01 d8                	add    %ebx,%eax
f011c454:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011c459:	39 c1                	cmp    %eax,%ecx
f011c45b:	74 17                	je     f011c474 <test_kmalloc_firstfit1+0x230>
f011c45d:	83 ec 04             	sub    $0x4,%esp
f011c460:	68 74 b4 13 f0       	push   $0xf013b474
f011c465:	68 ee 02 00 00       	push   $0x2ee
f011c46a:	68 5a b0 13 f0       	push   $0xf013b05a
f011c46f:	e8 91 3d fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c474:	e8 4f 79 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c479:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c47c:	74 17                	je     f011c495 <test_kmalloc_firstfit1+0x251>
f011c47e:	83 ec 04             	sub    $0x4,%esp
f011c481:	68 74 b0 13 f0       	push   $0xf013b074
f011c486:	68 ef 02 00 00       	push   $0x2ef
f011c48b:	68 5a b0 13 f0       	push   $0xf013b05a
f011c490:	e8 70 3d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c495:	e8 03 07 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c49a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c49d:	29 c2                	sub    %eax,%edx
f011c49f:	89 d0                	mov    %edx,%eax
f011c4a1:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c4a6:	74 17                	je     f011c4bf <test_kmalloc_firstfit1+0x27b>
f011c4a8:	83 ec 04             	sub    $0x4,%esp
f011c4ab:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011c4b0:	68 f0 02 00 00       	push   $0x2f0
f011c4b5:	68 5a b0 13 f0       	push   $0xf013b05a
f011c4ba:	e8 46 3d fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c4bf:	e8 d9 06 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c4c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c4c7:	e8 fc 78 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c4cc:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f011c4cf:	83 ec 0c             	sub    $0xc,%esp
f011c4d2:	68 00 fc 0f 00       	push   $0xffc00
f011c4d7:	e8 a9 b3 fe ff       	call   f0107885 <kmalloc>
f011c4dc:	83 c4 10             	add    $0x10,%esp
f011c4df:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011c4e5:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011c4eb:	89 c1                	mov    %eax,%ecx
f011c4ed:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011c4f4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011c4f7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c4fc:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011c4ff:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011c502:	ba 00 00 00 00       	mov    $0x0,%edx
f011c507:	f7 75 bc             	divl   -0x44(%ebp)
f011c50a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011c50d:	29 d0                	sub    %edx,%eax
f011c50f:	89 c3                	mov    %eax,%ebx
f011c511:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011c518:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011c51d:	0f b6 d0             	movzbl %al,%edx
f011c520:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011c523:	01 d0                	add    %edx,%eax
f011c525:	48                   	dec    %eax
f011c526:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011c529:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011c52c:	ba 00 00 00 00       	mov    $0x0,%edx
f011c531:	f7 75 b4             	divl   -0x4c(%ebp)
f011c534:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011c537:	29 d0                	sub    %edx,%eax
f011c539:	01 c3                	add    %eax,%ebx
f011c53b:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011c542:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011c547:	0f b6 c0             	movzbl %al,%eax
f011c54a:	c1 e0 04             	shl    $0x4,%eax
f011c54d:	89 c2                	mov    %eax,%edx
f011c54f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011c552:	01 d0                	add    %edx,%eax
f011c554:	48                   	dec    %eax
f011c555:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011c558:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011c55b:	ba 00 00 00 00       	mov    $0x0,%edx
f011c560:	f7 75 ac             	divl   -0x54(%ebp)
f011c563:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011c566:	29 d0                	sub    %edx,%eax
f011c568:	01 d8                	add    %ebx,%eax
f011c56a:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011c56f:	39 c1                	cmp    %eax,%ecx
f011c571:	74 17                	je     f011c58a <test_kmalloc_firstfit1+0x346>
f011c573:	83 ec 04             	sub    $0x4,%esp
f011c576:	68 74 b4 13 f0       	push   $0xf013b474
f011c57b:	68 f6 02 00 00       	push   $0x2f6
f011c580:	68 5a b0 13 f0       	push   $0xf013b05a
f011c585:	e8 7b 3c fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c58a:	e8 39 78 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c58f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c592:	74 17                	je     f011c5ab <test_kmalloc_firstfit1+0x367>
f011c594:	83 ec 04             	sub    $0x4,%esp
f011c597:	68 74 b0 13 f0       	push   $0xf013b074
f011c59c:	68 f7 02 00 00       	push   $0x2f7
f011c5a1:	68 5a b0 13 f0       	push   $0xf013b05a
f011c5a6:	e8 5a 3c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c5ab:	e8 ed 05 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c5b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c5b3:	29 c2                	sub    %eax,%edx
f011c5b5:	89 d0                	mov    %edx,%eax
f011c5b7:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c5bc:	74 17                	je     f011c5d5 <test_kmalloc_firstfit1+0x391>
f011c5be:	83 ec 04             	sub    $0x4,%esp
f011c5c1:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011c5c6:	68 f8 02 00 00       	push   $0x2f8
f011c5cb:	68 5a b0 13 f0       	push   $0xf013b05a
f011c5d0:	e8 30 3c fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c5d5:	e8 c3 05 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c5da:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c5dd:	e8 e6 77 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c5e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f011c5e5:	83 ec 0c             	sub    $0xc,%esp
f011c5e8:	68 00 fc 0f 00       	push   $0xffc00
f011c5ed:	e8 93 b2 fe ff       	call   f0107885 <kmalloc>
f011c5f2:	83 c4 10             	add    $0x10,%esp
f011c5f5:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011c5fb:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011c601:	89 c1                	mov    %eax,%ecx
f011c603:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011c60a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011c60d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c612:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011c615:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011c618:	ba 00 00 00 00       	mov    $0x0,%edx
f011c61d:	f7 75 a4             	divl   -0x5c(%ebp)
f011c620:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011c623:	29 d0                	sub    %edx,%eax
f011c625:	89 c3                	mov    %eax,%ebx
f011c627:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011c62e:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011c633:	0f b6 d0             	movzbl %al,%edx
f011c636:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011c639:	01 d0                	add    %edx,%eax
f011c63b:	48                   	dec    %eax
f011c63c:	89 45 98             	mov    %eax,-0x68(%ebp)
f011c63f:	8b 45 98             	mov    -0x68(%ebp),%eax
f011c642:	ba 00 00 00 00       	mov    $0x0,%edx
f011c647:	f7 75 9c             	divl   -0x64(%ebp)
f011c64a:	8b 45 98             	mov    -0x68(%ebp),%eax
f011c64d:	29 d0                	sub    %edx,%eax
f011c64f:	01 c3                	add    %eax,%ebx
f011c651:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011c658:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011c65d:	0f b6 c0             	movzbl %al,%eax
f011c660:	c1 e0 04             	shl    $0x4,%eax
f011c663:	89 c2                	mov    %eax,%edx
f011c665:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011c668:	01 d0                	add    %edx,%eax
f011c66a:	48                   	dec    %eax
f011c66b:	89 45 90             	mov    %eax,-0x70(%ebp)
f011c66e:	8b 45 90             	mov    -0x70(%ebp),%eax
f011c671:	ba 00 00 00 00       	mov    $0x0,%edx
f011c676:	f7 75 94             	divl   -0x6c(%ebp)
f011c679:	8b 45 90             	mov    -0x70(%ebp),%eax
f011c67c:	29 d0                	sub    %edx,%eax
f011c67e:	01 d8                	add    %ebx,%eax
f011c680:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011c685:	39 c1                	cmp    %eax,%ecx
f011c687:	74 17                	je     f011c6a0 <test_kmalloc_firstfit1+0x45c>
f011c689:	83 ec 04             	sub    $0x4,%esp
f011c68c:	68 74 b4 13 f0       	push   $0xf013b474
f011c691:	68 fe 02 00 00       	push   $0x2fe
f011c696:	68 5a b0 13 f0       	push   $0xf013b05a
f011c69b:	e8 65 3b fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c6a0:	e8 23 77 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c6a5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c6a8:	74 17                	je     f011c6c1 <test_kmalloc_firstfit1+0x47d>
f011c6aa:	83 ec 04             	sub    $0x4,%esp
f011c6ad:	68 74 b0 13 f0       	push   $0xf013b074
f011c6b2:	68 ff 02 00 00       	push   $0x2ff
f011c6b7:	68 5a b0 13 f0       	push   $0xf013b05a
f011c6bc:	e8 44 3b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c6c1:	e8 d7 04 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c6c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c6c9:	29 c2                	sub    %eax,%edx
f011c6cb:	89 d0                	mov    %edx,%eax
f011c6cd:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c6d2:	74 17                	je     f011c6eb <test_kmalloc_firstfit1+0x4a7>
f011c6d4:	83 ec 04             	sub    $0x4,%esp
f011c6d7:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011c6dc:	68 00 03 00 00       	push   $0x300
f011c6e1:	68 5a b0 13 f0       	push   $0xf013b05a
f011c6e6:	e8 1a 3b fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c6eb:	e8 ad 04 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c6f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c6f3:	e8 d0 76 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c6f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f011c6fb:	83 ec 0c             	sub    $0xc,%esp
f011c6fe:	68 00 fc 1f 00       	push   $0x1ffc00
f011c703:	e8 7d b1 fe ff       	call   f0107885 <kmalloc>
f011c708:	83 c4 10             	add    $0x10,%esp
f011c70b:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011c711:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011c717:	89 c1                	mov    %eax,%ecx
f011c719:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011c720:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011c723:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c728:	89 45 88             	mov    %eax,-0x78(%ebp)
f011c72b:	8b 45 88             	mov    -0x78(%ebp),%eax
f011c72e:	ba 00 00 00 00       	mov    $0x0,%edx
f011c733:	f7 75 8c             	divl   -0x74(%ebp)
f011c736:	8b 45 88             	mov    -0x78(%ebp),%eax
f011c739:	29 d0                	sub    %edx,%eax
f011c73b:	89 c3                	mov    %eax,%ebx
f011c73d:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011c744:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011c749:	0f b6 d0             	movzbl %al,%edx
f011c74c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011c74f:	01 d0                	add    %edx,%eax
f011c751:	48                   	dec    %eax
f011c752:	89 45 80             	mov    %eax,-0x80(%ebp)
f011c755:	8b 45 80             	mov    -0x80(%ebp),%eax
f011c758:	ba 00 00 00 00       	mov    $0x0,%edx
f011c75d:	f7 75 84             	divl   -0x7c(%ebp)
f011c760:	8b 45 80             	mov    -0x80(%ebp),%eax
f011c763:	29 d0                	sub    %edx,%eax
f011c765:	01 c3                	add    %eax,%ebx
f011c767:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011c76e:	10 00 00 
f011c771:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011c776:	0f b6 c0             	movzbl %al,%eax
f011c779:	c1 e0 04             	shl    $0x4,%eax
f011c77c:	89 c2                	mov    %eax,%edx
f011c77e:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011c784:	01 d0                	add    %edx,%eax
f011c786:	48                   	dec    %eax
f011c787:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011c78d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011c793:	ba 00 00 00 00       	mov    $0x0,%edx
f011c798:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011c79e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011c7a4:	29 d0                	sub    %edx,%eax
f011c7a6:	01 d8                	add    %ebx,%eax
f011c7a8:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011c7ad:	39 c1                	cmp    %eax,%ecx
f011c7af:	74 17                	je     f011c7c8 <test_kmalloc_firstfit1+0x584>
f011c7b1:	83 ec 04             	sub    $0x4,%esp
f011c7b4:	68 74 b4 13 f0       	push   $0xf013b474
f011c7b9:	68 06 03 00 00       	push   $0x306
f011c7be:	68 5a b0 13 f0       	push   $0xf013b05a
f011c7c3:	e8 3d 3a fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c7c8:	e8 fb 75 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c7cd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c7d0:	74 17                	je     f011c7e9 <test_kmalloc_firstfit1+0x5a5>
f011c7d2:	83 ec 04             	sub    $0x4,%esp
f011c7d5:	68 74 b0 13 f0       	push   $0xf013b074
f011c7da:	68 07 03 00 00       	push   $0x307
f011c7df:	68 5a b0 13 f0       	push   $0xf013b05a
f011c7e4:	e8 1c 3a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011c7e9:	e8 af 03 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c7ee:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c7f1:	29 c2                	sub    %eax,%edx
f011c7f3:	89 d0                	mov    %edx,%eax
f011c7f5:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c7fa:	74 17                	je     f011c813 <test_kmalloc_firstfit1+0x5cf>
f011c7fc:	83 ec 04             	sub    $0x4,%esp
f011c7ff:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011c804:	68 08 03 00 00       	push   $0x308
f011c809:	68 5a b0 13 f0       	push   $0xf013b05a
f011c80e:	e8 f2 39 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c813:	e8 85 03 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c818:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c81b:	e8 a8 75 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c820:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f011c823:	83 ec 0c             	sub    $0xc,%esp
f011c826:	68 00 fc 1f 00       	push   $0x1ffc00
f011c82b:	e8 55 b0 fe ff       	call   f0107885 <kmalloc>
f011c830:	83 c4 10             	add    $0x10,%esp
f011c833:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011c839:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011c83f:	89 c1                	mov    %eax,%ecx
f011c841:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011c848:	10 00 00 
f011c84b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011c851:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c856:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011c85c:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011c862:	ba 00 00 00 00       	mov    $0x0,%edx
f011c867:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011c86d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011c873:	29 d0                	sub    %edx,%eax
f011c875:	89 c3                	mov    %eax,%ebx
f011c877:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011c87e:	10 00 00 
f011c881:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011c886:	0f b6 d0             	movzbl %al,%edx
f011c889:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011c88f:	01 d0                	add    %edx,%eax
f011c891:	48                   	dec    %eax
f011c892:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011c898:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011c89e:	ba 00 00 00 00       	mov    $0x0,%edx
f011c8a3:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011c8a9:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011c8af:	29 d0                	sub    %edx,%eax
f011c8b1:	01 c3                	add    %eax,%ebx
f011c8b3:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011c8ba:	10 00 00 
f011c8bd:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011c8c2:	0f b6 c0             	movzbl %al,%eax
f011c8c5:	c1 e0 04             	shl    $0x4,%eax
f011c8c8:	89 c2                	mov    %eax,%edx
f011c8ca:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011c8d0:	01 d0                	add    %edx,%eax
f011c8d2:	48                   	dec    %eax
f011c8d3:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011c8d9:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011c8df:	ba 00 00 00 00       	mov    $0x0,%edx
f011c8e4:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011c8ea:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011c8f0:	29 d0                	sub    %edx,%eax
f011c8f2:	01 d8                	add    %ebx,%eax
f011c8f4:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011c8f9:	39 c1                	cmp    %eax,%ecx
f011c8fb:	74 17                	je     f011c914 <test_kmalloc_firstfit1+0x6d0>
f011c8fd:	83 ec 04             	sub    $0x4,%esp
f011c900:	68 74 b4 13 f0       	push   $0xf013b474
f011c905:	68 0e 03 00 00       	push   $0x30e
f011c90a:	68 5a b0 13 f0       	push   $0xf013b05a
f011c90f:	e8 f1 38 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c914:	e8 af 74 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c919:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c91c:	74 17                	je     f011c935 <test_kmalloc_firstfit1+0x6f1>
f011c91e:	83 ec 04             	sub    $0x4,%esp
f011c921:	68 74 b0 13 f0       	push   $0xf013b074
f011c926:	68 0f 03 00 00       	push   $0x30f
f011c92b:	68 5a b0 13 f0       	push   $0xf013b05a
f011c930:	e8 d0 38 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011c935:	e8 63 02 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c93a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c93d:	29 c2                	sub    %eax,%edx
f011c93f:	89 d0                	mov    %edx,%eax
f011c941:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c946:	74 17                	je     f011c95f <test_kmalloc_firstfit1+0x71b>
f011c948:	83 ec 04             	sub    $0x4,%esp
f011c94b:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011c950:	68 10 03 00 00       	push   $0x310
f011c955:	68 5a b0 13 f0       	push   $0xf013b05a
f011c95a:	e8 a6 38 fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c95f:	e8 39 02 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011c964:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c967:	e8 5c 74 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c96c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011c96f:	83 ec 0c             	sub    $0xc,%esp
f011c972:	68 00 fc 2f 00       	push   $0x2ffc00
f011c977:	e8 09 af fe ff       	call   f0107885 <kmalloc>
f011c97c:	83 c4 10             	add    $0x10,%esp
f011c97f:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011c985:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011c98b:	89 c1                	mov    %eax,%ecx
f011c98d:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011c994:	10 00 00 
f011c997:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011c99d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c9a2:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011c9a8:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c9ae:	ba 00 00 00 00       	mov    $0x0,%edx
f011c9b3:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011c9b9:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c9bf:	29 d0                	sub    %edx,%eax
f011c9c1:	89 c3                	mov    %eax,%ebx
f011c9c3:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011c9ca:	10 00 00 
f011c9cd:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011c9d2:	0f b6 d0             	movzbl %al,%edx
f011c9d5:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011c9db:	01 d0                	add    %edx,%eax
f011c9dd:	48                   	dec    %eax
f011c9de:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011c9e4:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c9ea:	ba 00 00 00 00       	mov    $0x0,%edx
f011c9ef:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011c9f5:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c9fb:	29 d0                	sub    %edx,%eax
f011c9fd:	01 c3                	add    %eax,%ebx
f011c9ff:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011ca06:	10 00 00 
f011ca09:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011ca0e:	0f b6 c0             	movzbl %al,%eax
f011ca11:	c1 e0 04             	shl    $0x4,%eax
f011ca14:	89 c2                	mov    %eax,%edx
f011ca16:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011ca1c:	01 d0                	add    %edx,%eax
f011ca1e:	48                   	dec    %eax
f011ca1f:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011ca25:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011ca2b:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca30:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011ca36:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011ca3c:	29 d0                	sub    %edx,%eax
f011ca3e:	01 d8                	add    %ebx,%eax
f011ca40:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011ca45:	39 c1                	cmp    %eax,%ecx
f011ca47:	74 17                	je     f011ca60 <test_kmalloc_firstfit1+0x81c>
f011ca49:	83 ec 04             	sub    $0x4,%esp
f011ca4c:	68 74 b4 13 f0       	push   $0xf013b474
f011ca51:	68 16 03 00 00       	push   $0x316
f011ca56:	68 5a b0 13 f0       	push   $0xf013b05a
f011ca5b:	e8 a5 37 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ca60:	e8 63 73 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ca65:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ca68:	74 17                	je     f011ca81 <test_kmalloc_firstfit1+0x83d>
f011ca6a:	83 ec 04             	sub    $0x4,%esp
f011ca6d:	68 74 b0 13 f0       	push   $0xf013b074
f011ca72:	68 17 03 00 00       	push   $0x317
f011ca77:	68 5a b0 13 f0       	push   $0xf013b05a
f011ca7c:	e8 84 37 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011ca81:	e8 17 01 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011ca86:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ca89:	29 c2                	sub    %eax,%edx
f011ca8b:	89 d0                	mov    %edx,%eax
f011ca8d:	3d 00 03 00 00       	cmp    $0x300,%eax
f011ca92:	74 17                	je     f011caab <test_kmalloc_firstfit1+0x867>
f011ca94:	83 ec 04             	sub    $0x4,%esp
f011ca97:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011ca9c:	68 18 03 00 00       	push   $0x318
f011caa1:	68 5a b0 13 f0       	push   $0xf013b05a
f011caa6:	e8 5a 37 fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011caab:	e8 ed 00 ff ff       	call   f010cb9d <sys_calculate_free_frames>
f011cab0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cab3:	e8 10 73 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cab8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f011cabb:	83 ec 0c             	sub    $0xc,%esp
f011cabe:	68 00 fc 2f 00       	push   $0x2ffc00
f011cac3:	e8 bd ad fe ff       	call   f0107885 <kmalloc>
f011cac8:	83 c4 10             	add    $0x10,%esp
f011cacb:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011cad1:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011cad7:	89 c1                	mov    %eax,%ecx
f011cad9:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011cae0:	10 00 00 
f011cae3:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011cae9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011caee:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011caf4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011cafa:	ba 00 00 00 00       	mov    $0x0,%edx
f011caff:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011cb05:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011cb0b:	29 d0                	sub    %edx,%eax
f011cb0d:	89 c3                	mov    %eax,%ebx
f011cb0f:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011cb16:	10 00 00 
f011cb19:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011cb1e:	0f b6 d0             	movzbl %al,%edx
f011cb21:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011cb27:	01 d0                	add    %edx,%eax
f011cb29:	48                   	dec    %eax
f011cb2a:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011cb30:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011cb36:	ba 00 00 00 00       	mov    $0x0,%edx
f011cb3b:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011cb41:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011cb47:	29 d0                	sub    %edx,%eax
f011cb49:	01 c3                	add    %eax,%ebx
f011cb4b:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011cb52:	10 00 00 
f011cb55:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011cb5a:	0f b6 c0             	movzbl %al,%eax
f011cb5d:	c1 e0 04             	shl    $0x4,%eax
f011cb60:	89 c2                	mov    %eax,%edx
f011cb62:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011cb68:	01 d0                	add    %edx,%eax
f011cb6a:	48                   	dec    %eax
f011cb6b:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011cb71:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011cb77:	ba 00 00 00 00       	mov    $0x0,%edx
f011cb7c:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011cb82:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011cb88:	29 d0                	sub    %edx,%eax
f011cb8a:	01 d8                	add    %ebx,%eax
f011cb8c:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011cb91:	39 c1                	cmp    %eax,%ecx
f011cb93:	74 17                	je     f011cbac <test_kmalloc_firstfit1+0x968>
f011cb95:	83 ec 04             	sub    $0x4,%esp
f011cb98:	68 74 b4 13 f0       	push   $0xf013b474
f011cb9d:	68 1e 03 00 00       	push   $0x31e
f011cba2:	68 5a b0 13 f0       	push   $0xf013b05a
f011cba7:	e8 59 36 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cbac:	e8 17 72 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cbb1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cbb4:	74 17                	je     f011cbcd <test_kmalloc_firstfit1+0x989>
f011cbb6:	83 ec 04             	sub    $0x4,%esp
f011cbb9:	68 74 b0 13 f0       	push   $0xf013b074
f011cbbe:	68 1f 03 00 00       	push   $0x31f
f011cbc3:	68 5a b0 13 f0       	push   $0xf013b05a
f011cbc8:	e8 38 36 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011cbcd:	e8 cb ff fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011cbd2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cbd5:	29 c2                	sub    %eax,%edx
f011cbd7:	89 d0                	mov    %edx,%eax
f011cbd9:	3d 00 03 00 00       	cmp    $0x300,%eax
f011cbde:	74 17                	je     f011cbf7 <test_kmalloc_firstfit1+0x9b3>
f011cbe0:	83 ec 04             	sub    $0x4,%esp
f011cbe3:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011cbe8:	68 20 03 00 00       	push   $0x320
f011cbed:	68 5a b0 13 f0       	push   $0xf013b05a
f011cbf2:	e8 0e 36 fe ff       	call   f0100205 <_panic>
	}

	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011cbf7:	e8 a1 ff fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011cbfc:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cbff:	e8 c4 71 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cc04:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011cc07:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011cc0d:	83 ec 0c             	sub    $0xc,%esp
f011cc10:	50                   	push   %eax
f011cc11:	e8 3a ad fe ff       	call   f0107950 <kfree>
f011cc16:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cc19:	e8 aa 71 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cc1e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cc21:	74 17                	je     f011cc3a <test_kmalloc_firstfit1+0x9f6>
f011cc23:	83 ec 04             	sub    $0x4,%esp
f011cc26:	68 74 b0 13 f0       	push   $0xf013b074
f011cc2b:	68 29 03 00 00       	push   $0x329
f011cc30:	68 5a b0 13 f0       	push   $0xf013b05a
f011cc35:	e8 cb 35 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011cc3a:	e8 5e ff fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011cc3f:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011cc42:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cc47:	74 17                	je     f011cc60 <test_kmalloc_firstfit1+0xa1c>
f011cc49:	83 ec 04             	sub    $0x4,%esp
f011cc4c:	68 b7 b4 13 f0       	push   $0xf013b4b7
f011cc51:	68 2a 03 00 00       	push   $0x32a
f011cc56:	68 5a b0 13 f0       	push   $0xf013b05a
f011cc5b:	e8 a5 35 fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011cc60:	e8 38 ff fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011cc65:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cc68:	e8 5b 71 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cc6d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011cc70:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011cc76:	83 ec 0c             	sub    $0xc,%esp
f011cc79:	50                   	push   %eax
f011cc7a:	e8 d1 ac fe ff       	call   f0107950 <kfree>
f011cc7f:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cc82:	e8 41 71 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cc87:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cc8a:	74 17                	je     f011cca3 <test_kmalloc_firstfit1+0xa5f>
f011cc8c:	83 ec 04             	sub    $0x4,%esp
f011cc8f:	68 74 b0 13 f0       	push   $0xf013b074
f011cc94:	68 30 03 00 00       	push   $0x330
f011cc99:	68 5a b0 13 f0       	push   $0xf013b05a
f011cc9e:	e8 62 35 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011cca3:	e8 f5 fe fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011cca8:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011ccab:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ccb0:	74 17                	je     f011ccc9 <test_kmalloc_firstfit1+0xa85>
f011ccb2:	83 ec 04             	sub    $0x4,%esp
f011ccb5:	68 b7 b4 13 f0       	push   $0xf013b4b7
f011ccba:	68 31 03 00 00       	push   $0x331
f011ccbf:	68 5a b0 13 f0       	push   $0xf013b05a
f011ccc4:	e8 3c 35 fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011ccc9:	e8 cf fe fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011ccce:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ccd1:	e8 f2 70 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ccd6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[6]);
f011ccd9:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011ccdf:	83 ec 0c             	sub    $0xc,%esp
f011cce2:	50                   	push   %eax
f011cce3:	e8 68 ac fe ff       	call   f0107950 <kfree>
f011cce8:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cceb:	e8 d8 70 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ccf0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ccf3:	74 17                	je     f011cd0c <test_kmalloc_firstfit1+0xac8>
f011ccf5:	83 ec 04             	sub    $0x4,%esp
f011ccf8:	68 74 b0 13 f0       	push   $0xf013b074
f011ccfd:	68 37 03 00 00       	push   $0x337
f011cd02:	68 5a b0 13 f0       	push   $0xf013b05a
f011cd07:	e8 f9 34 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011cd0c:	e8 8c fe fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011cd11:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011cd14:	3d 00 03 00 00       	cmp    $0x300,%eax
f011cd19:	74 17                	je     f011cd32 <test_kmalloc_firstfit1+0xaee>
f011cd1b:	83 ec 04             	sub    $0x4,%esp
f011cd1e:	68 b7 b4 13 f0       	push   $0xf013b4b7
f011cd23:	68 38 03 00 00       	push   $0x338
f011cd28:	68 5a b0 13 f0       	push   $0xf013b05a
f011cd2d:	e8 d3 34 fe ff       	call   f0100205 <_panic>
	}

	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011cd32:	e8 66 fe fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011cd37:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cd3a:	e8 89 70 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cd3f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f011cd42:	83 ec 0c             	sub    $0xc,%esp
f011cd45:	68 00 fc 07 00       	push   $0x7fc00
f011cd4a:	e8 36 ab fe ff       	call   f0107885 <kmalloc>
f011cd4f:	83 c4 10             	add    $0x10,%esp
f011cd52:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011cd58:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011cd5e:	89 c1                	mov    %eax,%ecx
f011cd60:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011cd67:	10 00 00 
f011cd6a:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011cd70:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cd75:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011cd7b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011cd81:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd86:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011cd8c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011cd92:	29 d0                	sub    %edx,%eax
f011cd94:	89 c3                	mov    %eax,%ebx
f011cd96:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011cd9d:	10 00 00 
f011cda0:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011cda5:	0f b6 d0             	movzbl %al,%edx
f011cda8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011cdae:	01 d0                	add    %edx,%eax
f011cdb0:	48                   	dec    %eax
f011cdb1:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011cdb7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011cdbd:	ba 00 00 00 00       	mov    $0x0,%edx
f011cdc2:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011cdc8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011cdce:	29 d0                	sub    %edx,%eax
f011cdd0:	01 c3                	add    %eax,%ebx
f011cdd2:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011cdd9:	10 00 00 
f011cddc:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011cde1:	0f b6 c0             	movzbl %al,%eax
f011cde4:	c1 e0 04             	shl    $0x4,%eax
f011cde7:	89 c2                	mov    %eax,%edx
f011cde9:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011cdef:	01 d0                	add    %edx,%eax
f011cdf1:	48                   	dec    %eax
f011cdf2:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011cdf8:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011cdfe:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce03:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011ce09:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011ce0f:	29 d0                	sub    %edx,%eax
f011ce11:	01 d8                	add    %ebx,%eax
f011ce13:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011ce18:	39 c1                	cmp    %eax,%ecx
f011ce1a:	74 17                	je     f011ce33 <test_kmalloc_firstfit1+0xbef>
f011ce1c:	83 ec 04             	sub    $0x4,%esp
f011ce1f:	68 74 b4 13 f0       	push   $0xf013b474
f011ce24:	68 41 03 00 00       	push   $0x341
f011ce29:	68 5a b0 13 f0       	push   $0xf013b05a
f011ce2e:	e8 d2 33 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ce33:	e8 90 6f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ce38:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ce3b:	74 17                	je     f011ce54 <test_kmalloc_firstfit1+0xc10>
f011ce3d:	83 ec 04             	sub    $0x4,%esp
f011ce40:	68 74 b0 13 f0       	push   $0xf013b074
f011ce45:	68 42 03 00 00       	push   $0x342
f011ce4a:	68 5a b0 13 f0       	push   $0xf013b05a
f011ce4f:	e8 b1 33 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011ce54:	e8 44 fd fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011ce59:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ce5c:	29 c2                	sub    %eax,%edx
f011ce5e:	89 d0                	mov    %edx,%eax
f011ce60:	3d 80 00 00 00       	cmp    $0x80,%eax
f011ce65:	74 17                	je     f011ce7e <test_kmalloc_firstfit1+0xc3a>
f011ce67:	83 ec 04             	sub    $0x4,%esp
f011ce6a:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011ce6f:	68 43 03 00 00       	push   $0x343
f011ce74:	68 5a b0 13 f0       	push   $0xf013b05a
f011ce79:	e8 87 33 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011ce7e:	e8 1a fd fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011ce83:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ce86:	e8 3d 6f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ce8b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011ce8e:	83 ec 0c             	sub    $0xc,%esp
f011ce91:	68 00 fc 0f 00       	push   $0xffc00
f011ce96:	e8 ea a9 fe ff       	call   f0107885 <kmalloc>
f011ce9b:	83 c4 10             	add    $0x10,%esp
f011ce9e:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011cea4:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011ceaa:	89 c1                	mov    %eax,%ecx
f011ceac:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011ceb3:	10 00 00 
f011ceb6:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011cebc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cec1:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011cec7:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011cecd:	ba 00 00 00 00       	mov    $0x0,%edx
f011ced2:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011ced8:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011cede:	29 d0                	sub    %edx,%eax
f011cee0:	89 c3                	mov    %eax,%ebx
f011cee2:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011cee9:	10 00 00 
f011ceec:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011cef1:	0f b6 d0             	movzbl %al,%edx
f011cef4:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011cefa:	01 d0                	add    %edx,%eax
f011cefc:	48                   	dec    %eax
f011cefd:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011cf03:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011cf09:	ba 00 00 00 00       	mov    $0x0,%edx
f011cf0e:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011cf14:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011cf1a:	29 d0                	sub    %edx,%eax
f011cf1c:	01 c3                	add    %eax,%ebx
f011cf1e:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011cf25:	10 00 00 
f011cf28:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011cf2d:	0f b6 c0             	movzbl %al,%eax
f011cf30:	c1 e0 04             	shl    $0x4,%eax
f011cf33:	89 c2                	mov    %eax,%edx
f011cf35:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011cf3b:	01 d0                	add    %edx,%eax
f011cf3d:	48                   	dec    %eax
f011cf3e:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011cf44:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011cf4a:	ba 00 00 00 00       	mov    $0x0,%edx
f011cf4f:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011cf55:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011cf5b:	29 d0                	sub    %edx,%eax
f011cf5d:	01 d8                	add    %ebx,%eax
f011cf5f:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011cf64:	39 c1                	cmp    %eax,%ecx
f011cf66:	74 17                	je     f011cf7f <test_kmalloc_firstfit1+0xd3b>
f011cf68:	83 ec 04             	sub    $0x4,%esp
f011cf6b:	68 74 b4 13 f0       	push   $0xf013b474
f011cf70:	68 49 03 00 00       	push   $0x349
f011cf75:	68 5a b0 13 f0       	push   $0xf013b05a
f011cf7a:	e8 86 32 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cf7f:	e8 44 6e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cf84:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cf87:	74 17                	je     f011cfa0 <test_kmalloc_firstfit1+0xd5c>
f011cf89:	83 ec 04             	sub    $0x4,%esp
f011cf8c:	68 74 b0 13 f0       	push   $0xf013b074
f011cf91:	68 4a 03 00 00       	push   $0x34a
f011cf96:	68 5a b0 13 f0       	push   $0xf013b05a
f011cf9b:	e8 65 32 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011cfa0:	e8 f8 fb fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011cfa5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cfa8:	29 c2                	sub    %eax,%edx
f011cfaa:	89 d0                	mov    %edx,%eax
f011cfac:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cfb1:	74 17                	je     f011cfca <test_kmalloc_firstfit1+0xd86>
f011cfb3:	83 ec 04             	sub    $0x4,%esp
f011cfb6:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011cfbb:	68 4b 03 00 00       	push   $0x34b
f011cfc0:	68 5a b0 13 f0       	push   $0xf013b05a
f011cfc5:	e8 3b 32 fe ff       	call   f0100205 <_panic>


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011cfca:	e8 ce fb fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011cfcf:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cfd2:	e8 f1 6d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cfd7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011cfda:	83 ec 0c             	sub    $0xc,%esp
f011cfdd:	68 00 fc 03 00       	push   $0x3fc00
f011cfe2:	e8 9e a8 fe ff       	call   f0107885 <kmalloc>
f011cfe7:	83 c4 10             	add    $0x10,%esp
f011cfea:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011cff0:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011cff6:	89 c1                	mov    %eax,%ecx
f011cff8:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011cfff:	10 00 00 
f011d002:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011d008:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d00d:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011d013:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d019:	ba 00 00 00 00       	mov    $0x0,%edx
f011d01e:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011d024:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d02a:	29 d0                	sub    %edx,%eax
f011d02c:	89 c3                	mov    %eax,%ebx
f011d02e:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011d035:	10 00 00 
f011d038:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011d03d:	0f b6 d0             	movzbl %al,%edx
f011d040:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011d046:	01 d0                	add    %edx,%eax
f011d048:	48                   	dec    %eax
f011d049:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011d04f:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d055:	ba 00 00 00 00       	mov    $0x0,%edx
f011d05a:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011d060:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d066:	29 d0                	sub    %edx,%eax
f011d068:	01 c3                	add    %eax,%ebx
f011d06a:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011d071:	10 00 00 
f011d074:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011d079:	0f b6 c0             	movzbl %al,%eax
f011d07c:	c1 e0 04             	shl    $0x4,%eax
f011d07f:	89 c2                	mov    %eax,%edx
f011d081:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011d087:	01 d0                	add    %edx,%eax
f011d089:	48                   	dec    %eax
f011d08a:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011d090:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011d096:	ba 00 00 00 00       	mov    $0x0,%edx
f011d09b:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011d0a1:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011d0a7:	29 d0                	sub    %edx,%eax
f011d0a9:	01 d8                	add    %ebx,%eax
f011d0ab:	2d 00 c0 e7 09       	sub    $0x9e7c000,%eax
f011d0b0:	39 c1                	cmp    %eax,%ecx
f011d0b2:	74 17                	je     f011d0cb <test_kmalloc_firstfit1+0xe87>
f011d0b4:	83 ec 04             	sub    $0x4,%esp
f011d0b7:	68 74 b4 13 f0       	push   $0xf013b474
f011d0bc:	68 52 03 00 00       	push   $0x352
f011d0c1:	68 5a b0 13 f0       	push   $0xf013b05a
f011d0c6:	e8 3a 31 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d0cb:	e8 f8 6c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d0d0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d0d3:	74 17                	je     f011d0ec <test_kmalloc_firstfit1+0xea8>
f011d0d5:	83 ec 04             	sub    $0x4,%esp
f011d0d8:	68 74 b0 13 f0       	push   $0xf013b074
f011d0dd:	68 53 03 00 00       	push   $0x353
f011d0e2:	68 5a b0 13 f0       	push   $0xf013b05a
f011d0e7:	e8 19 31 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011d0ec:	e8 ac fa fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d0f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d0f4:	29 c2                	sub    %eax,%edx
f011d0f6:	89 d0                	mov    %edx,%eax
f011d0f8:	83 f8 40             	cmp    $0x40,%eax
f011d0fb:	74 17                	je     f011d114 <test_kmalloc_firstfit1+0xed0>
f011d0fd:	83 ec 04             	sub    $0x4,%esp
f011d100:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011d105:	68 54 03 00 00       	push   $0x354
f011d10a:	68 5a b0 13 f0       	push   $0xf013b05a
f011d10f:	e8 f1 30 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011d114:	e8 84 fa fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d119:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d11c:	e8 a7 6c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d121:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f011d124:	83 ec 0c             	sub    $0xc,%esp
f011d127:	68 00 00 20 00       	push   $0x200000
f011d12c:	e8 54 a7 fe ff       	call   f0107885 <kmalloc>
f011d131:	83 c4 10             	add    $0x10,%esp
f011d134:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011d13a:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011d140:	89 c1                	mov    %eax,%ecx
f011d142:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011d149:	10 00 00 
f011d14c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011d152:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d157:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011d15d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011d163:	ba 00 00 00 00       	mov    $0x0,%edx
f011d168:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011d16e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011d174:	29 d0                	sub    %edx,%eax
f011d176:	89 c3                	mov    %eax,%ebx
f011d178:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011d17f:	10 00 00 
f011d182:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011d187:	0f b6 d0             	movzbl %al,%edx
f011d18a:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011d190:	01 d0                	add    %edx,%eax
f011d192:	48                   	dec    %eax
f011d193:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011d199:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011d19f:	ba 00 00 00 00       	mov    $0x0,%edx
f011d1a4:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011d1aa:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011d1b0:	29 d0                	sub    %edx,%eax
f011d1b2:	01 c3                	add    %eax,%ebx
f011d1b4:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011d1bb:	10 00 00 
f011d1be:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011d1c3:	0f b6 c0             	movzbl %al,%eax
f011d1c6:	c1 e0 04             	shl    $0x4,%eax
f011d1c9:	89 c2                	mov    %eax,%edx
f011d1cb:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011d1d1:	01 d0                	add    %edx,%eax
f011d1d3:	48                   	dec    %eax
f011d1d4:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011d1da:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011d1e0:	ba 00 00 00 00       	mov    $0x0,%edx
f011d1e5:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011d1eb:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011d1f1:	29 d0                	sub    %edx,%eax
f011d1f3:	01 d8                	add    %ebx,%eax
f011d1f5:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011d1fa:	39 c1                	cmp    %eax,%ecx
f011d1fc:	74 17                	je     f011d215 <test_kmalloc_firstfit1+0xfd1>
f011d1fe:	83 ec 04             	sub    $0x4,%esp
f011d201:	68 74 b4 13 f0       	push   $0xf013b474
f011d206:	68 5a 03 00 00       	push   $0x35a
f011d20b:	68 5a b0 13 f0       	push   $0xf013b05a
f011d210:	e8 f0 2f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d215:	e8 83 f9 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d21a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d21d:	29 c2                	sub    %eax,%edx
f011d21f:	89 d0                	mov    %edx,%eax
f011d221:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d226:	74 17                	je     f011d23f <test_kmalloc_firstfit1+0xffb>
f011d228:	83 ec 04             	sub    $0x4,%esp
f011d22b:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011d230:	68 5b 03 00 00       	push   $0x35b
f011d235:	68 5a b0 13 f0       	push   $0xf013b05a
f011d23a:	e8 c6 2f fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d23f:	e8 84 6b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d244:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d247:	74 17                	je     f011d260 <test_kmalloc_firstfit1+0x101c>
f011d249:	83 ec 04             	sub    $0x4,%esp
f011d24c:	68 74 b0 13 f0       	push   $0xf013b074
f011d251:	68 5c 03 00 00       	push   $0x35c
f011d256:	68 5a b0 13 f0       	push   $0xf013b05a
f011d25b:	e8 a5 2f fe ff       	call   f0100205 <_panic>


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011d260:	e8 38 f9 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d265:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d268:	e8 5b 6b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d26d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f011d270:	83 ec 0c             	sub    $0xc,%esp
f011d273:	68 00 fc 3f 00       	push   $0x3ffc00
f011d278:	e8 08 a6 fe ff       	call   f0107885 <kmalloc>
f011d27d:	83 c4 10             	add    $0x10,%esp
f011d280:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011d286:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011d28c:	89 c1                	mov    %eax,%ecx
f011d28e:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011d295:	10 00 00 
f011d298:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011d29e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d2a3:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011d2a9:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011d2af:	ba 00 00 00 00       	mov    $0x0,%edx
f011d2b4:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011d2ba:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011d2c0:	29 d0                	sub    %edx,%eax
f011d2c2:	89 c3                	mov    %eax,%ebx
f011d2c4:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011d2cb:	10 00 00 
f011d2ce:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011d2d3:	0f b6 d0             	movzbl %al,%edx
f011d2d6:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011d2dc:	01 d0                	add    %edx,%eax
f011d2de:	48                   	dec    %eax
f011d2df:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011d2e5:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011d2eb:	ba 00 00 00 00       	mov    $0x0,%edx
f011d2f0:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011d2f6:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011d2fc:	29 d0                	sub    %edx,%eax
f011d2fe:	01 c3                	add    %eax,%ebx
f011d300:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011d307:	10 00 00 
f011d30a:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011d30f:	0f b6 c0             	movzbl %al,%eax
f011d312:	c1 e0 04             	shl    $0x4,%eax
f011d315:	89 c2                	mov    %eax,%edx
f011d317:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011d31d:	01 d0                	add    %edx,%eax
f011d31f:	48                   	dec    %eax
f011d320:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011d326:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011d32c:	ba 00 00 00 00       	mov    $0x0,%edx
f011d331:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011d337:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011d33d:	29 d0                	sub    %edx,%eax
f011d33f:	01 d8                	add    %ebx,%eax
f011d341:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011d346:	39 c1                	cmp    %eax,%ecx
f011d348:	74 17                	je     f011d361 <test_kmalloc_firstfit1+0x111d>
f011d34a:	83 ec 04             	sub    $0x4,%esp
f011d34d:	68 74 b4 13 f0       	push   $0xf013b474
f011d352:	68 63 03 00 00       	push   $0x363
f011d357:	68 5a b0 13 f0       	push   $0xf013b05a
f011d35c:	e8 a4 2e fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d361:	e8 62 6a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d366:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d369:	74 17                	je     f011d382 <test_kmalloc_firstfit1+0x113e>
f011d36b:	83 ec 04             	sub    $0x4,%esp
f011d36e:	68 74 b0 13 f0       	push   $0xf013b074
f011d373:	68 64 03 00 00       	push   $0x364
f011d378:	68 5a b0 13 f0       	push   $0xf013b05a
f011d37d:	e8 83 2e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011d382:	e8 16 f8 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d387:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d38a:	29 c2                	sub    %eax,%edx
f011d38c:	89 d0                	mov    %edx,%eax
f011d38e:	3d 00 04 00 00       	cmp    $0x400,%eax
f011d393:	74 17                	je     f011d3ac <test_kmalloc_firstfit1+0x1168>
f011d395:	83 ec 04             	sub    $0x4,%esp
f011d398:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011d39d:	68 65 03 00 00       	push   $0x365
f011d3a2:	68 5a b0 13 f0       	push   $0xf013b05a
f011d3a7:	e8 59 2e fe ff       	call   f0100205 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = sys_calculate_free_frames() ;
f011d3ac:	e8 ec f7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d3b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d3b4:	e8 0f 6a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d3b9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[2]);
f011d3bc:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011d3c2:	83 ec 0c             	sub    $0xc,%esp
f011d3c5:	50                   	push   %eax
f011d3c6:	e8 85 a5 fe ff       	call   f0107950 <kfree>
f011d3cb:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d3ce:	e8 f5 69 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d3d3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d3d6:	74 17                	je     f011d3ef <test_kmalloc_firstfit1+0x11ab>
f011d3d8:	83 ec 04             	sub    $0x4,%esp
f011d3db:	68 74 b0 13 f0       	push   $0xf013b074
f011d3e0:	68 6e 03 00 00       	push   $0x36e
f011d3e5:	68 5a b0 13 f0       	push   $0xf013b05a
f011d3ea:	e8 16 2e fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d3ef:	e8 a9 f7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d3f4:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d3f7:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d3fc:	74 17                	je     f011d415 <test_kmalloc_firstfit1+0x11d1>
f011d3fe:	83 ec 04             	sub    $0x4,%esp
f011d401:	68 b7 b4 13 f0       	push   $0xf013b4b7
f011d406:	68 6f 03 00 00       	push   $0x36f
f011d40b:	68 5a b0 13 f0       	push   $0xf013b05a
f011d410:	e8 f0 2d fe ff       	call   f0100205 <_panic>

		//Next 1 MB Hole appended also
		freeFrames = sys_calculate_free_frames() ;
f011d415:	e8 83 f7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d41a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d41d:	e8 a6 69 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d422:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011d425:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011d42b:	83 ec 0c             	sub    $0xc,%esp
f011d42e:	50                   	push   %eax
f011d42f:	e8 1c a5 fe ff       	call   f0107950 <kfree>
f011d434:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d437:	e8 8c 69 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d43c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d43f:	74 17                	je     f011d458 <test_kmalloc_firstfit1+0x1214>
f011d441:	83 ec 04             	sub    $0x4,%esp
f011d444:	68 74 b0 13 f0       	push   $0xf013b074
f011d449:	68 75 03 00 00       	push   $0x375
f011d44e:	68 5a b0 13 f0       	push   $0xf013b05a
f011d453:	e8 ad 2d fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d458:	e8 40 f7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d45d:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d460:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d465:	74 17                	je     f011d47e <test_kmalloc_firstfit1+0x123a>
f011d467:	83 ec 04             	sub    $0x4,%esp
f011d46a:	68 b7 b4 13 f0       	push   $0xf013b4b7
f011d46f:	68 76 03 00 00       	push   $0x376
f011d474:	68 5a b0 13 f0       	push   $0xf013b05a
f011d479:	e8 87 2d fe ff       	call   f0100205 <_panic>

	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = sys_calculate_free_frames() ;
f011d47e:	e8 1a f7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d483:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d486:	e8 3d 69 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d48b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f011d48e:	83 ec 0c             	sub    $0xc,%esp
f011d491:	68 00 00 10 00       	push   $0x100000
f011d496:	e8 ea a3 fe ff       	call   f0107885 <kmalloc>
f011d49b:	83 c4 10             	add    $0x10,%esp
f011d49e:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) panic("Wrong start address for the allocated space... ");
f011d4a4:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011d4aa:	89 c1                	mov    %eax,%ecx
f011d4ac:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011d4b3:	10 00 00 
f011d4b6:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011d4bc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d4c1:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011d4c7:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011d4cd:	ba 00 00 00 00       	mov    $0x0,%edx
f011d4d2:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011d4d8:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011d4de:	29 d0                	sub    %edx,%eax
f011d4e0:	89 c3                	mov    %eax,%ebx
f011d4e2:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011d4e9:	10 00 00 
f011d4ec:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011d4f1:	0f b6 d0             	movzbl %al,%edx
f011d4f4:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011d4fa:	01 d0                	add    %edx,%eax
f011d4fc:	48                   	dec    %eax
f011d4fd:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011d503:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011d509:	ba 00 00 00 00       	mov    $0x0,%edx
f011d50e:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011d514:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011d51a:	29 d0                	sub    %edx,%eax
f011d51c:	01 c3                	add    %eax,%ebx
f011d51e:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011d525:	10 00 00 
f011d528:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011d52d:	0f b6 c0             	movzbl %al,%eax
f011d530:	c1 e0 04             	shl    $0x4,%eax
f011d533:	89 c2                	mov    %eax,%edx
f011d535:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011d53b:	01 d0                	add    %edx,%eax
f011d53d:	48                   	dec    %eax
f011d53e:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011d544:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011d54a:	ba 00 00 00 00       	mov    $0x0,%edx
f011d54f:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011d555:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011d55b:	29 d0                	sub    %edx,%eax
f011d55d:	01 d8                	add    %ebx,%eax
f011d55f:	2d 00 c0 e3 09       	sub    $0x9e3c000,%eax
f011d564:	39 c1                	cmp    %eax,%ecx
f011d566:	74 17                	je     f011d57f <test_kmalloc_firstfit1+0x133b>
f011d568:	83 ec 04             	sub    $0x4,%esp
f011d56b:	68 74 b4 13 f0       	push   $0xf013b474
f011d570:	68 80 03 00 00       	push   $0x380
f011d575:	68 5a b0 13 f0       	push   $0xf013b05a
f011d57a:	e8 86 2c fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d57f:	e8 44 68 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d584:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d587:	74 17                	je     f011d5a0 <test_kmalloc_firstfit1+0x135c>
f011d589:	83 ec 04             	sub    $0x4,%esp
f011d58c:	68 74 b0 13 f0       	push   $0xf013b074
f011d591:	68 81 03 00 00       	push   $0x381
f011d596:	68 5a b0 13 f0       	push   $0xf013b05a
f011d59b:	e8 65 2c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d5a0:	e8 f8 f5 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d5a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d5a8:	29 c2                	sub    %eax,%edx
f011d5aa:	89 d0                	mov    %edx,%eax
f011d5ac:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d5b1:	74 17                	je     f011d5ca <test_kmalloc_firstfit1+0x1386>
f011d5b3:	83 ec 04             	sub    $0x4,%esp
f011d5b6:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011d5bb:	68 82 03 00 00       	push   $0x382
f011d5c0:	68 5a b0 13 f0       	push   $0xf013b05a
f011d5c5:	e8 3b 2c fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test FIRST FIT allocation (1) completed successfully.\n");
f011d5ca:	83 ec 0c             	sub    $0xc,%esp
f011d5cd:	68 50 b6 13 f0       	push   $0xf013b650
f011d5d2:	e8 37 37 fe ff       	call   f0100d0e <cprintf>
f011d5d7:	83 c4 10             	add    $0x10,%esp

	return 1;
f011d5da:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011d5df:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011d5e2:	5b                   	pop    %ebx
f011d5e3:	5f                   	pop    %edi
f011d5e4:	5d                   	pop    %ebp
f011d5e5:	c3                   	ret    

f011d5e6 <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f011d5e6:	55                   	push   %ebp
f011d5e7:	89 e5                	mov    %esp,%ebp
f011d5e9:	57                   	push   %edi
f011d5ea:	53                   	push   %ebx
f011d5eb:	81 ec 60 01 00 00    	sub    $0x160,%esp
	cprintf("==============================================\n");
f011d5f1:	83 ec 0c             	sub    $0xc,%esp
f011d5f4:	68 9c af 13 f0       	push   $0xf013af9c
f011d5f9:	e8 10 37 fe ff       	call   f0100d0e <cprintf>
f011d5fe:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011d601:	83 ec 0c             	sub    $0xc,%esp
f011d604:	68 cc af 13 f0       	push   $0xf013afcc
f011d609:	e8 00 37 fe ff       	call   f0100d0e <cprintf>
f011d60e:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011d611:	83 ec 0c             	sub    $0xc,%esp
f011d614:	68 9c af 13 f0       	push   $0xf013af9c
f011d619:	e8 f0 36 fe ff       	call   f0100d0e <cprintf>
f011d61e:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011d621:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f011d627:	b9 14 00 00 00       	mov    $0x14,%ecx
f011d62c:	b8 00 00 00 00       	mov    $0x0,%eax
f011d631:	89 d7                	mov    %edx,%edi
f011d633:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011d635:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011d63c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011d63f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d644:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011d647:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011d64a:	ba 00 00 00 00       	mov    $0x0,%edx
f011d64f:	f7 75 f4             	divl   -0xc(%ebp)
f011d652:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011d655:	29 d0                	sub    %edx,%eax
f011d657:	89 c1                	mov    %eax,%ecx
f011d659:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011d660:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011d665:	0f b6 d0             	movzbl %al,%edx
f011d668:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011d66b:	01 d0                	add    %edx,%eax
f011d66d:	48                   	dec    %eax
f011d66e:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011d671:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011d674:	ba 00 00 00 00       	mov    $0x0,%edx
f011d679:	f7 75 ec             	divl   -0x14(%ebp)
f011d67c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011d67f:	29 d0                	sub    %edx,%eax
f011d681:	01 c1                	add    %eax,%ecx
f011d683:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011d68a:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011d68f:	0f b6 c0             	movzbl %al,%eax
f011d692:	c1 e0 04             	shl    $0x4,%eax
f011d695:	89 c2                	mov    %eax,%edx
f011d697:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011d69a:	01 d0                	add    %edx,%eax
f011d69c:	48                   	dec    %eax
f011d69d:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011d6a0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011d6a3:	ba 00 00 00 00       	mov    $0x0,%edx
f011d6a8:	f7 75 e4             	divl   -0x1c(%ebp)
f011d6ab:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011d6ae:	29 d0                	sub    %edx,%eax
f011d6b0:	01 c8                	add    %ecx,%eax
f011d6b2:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011d6b7:	29 c2                	sub    %eax,%edx
f011d6b9:	89 d0                	mov    %edx,%eax
f011d6bb:	83 ec 0c             	sub    $0xc,%esp
f011d6be:	50                   	push   %eax
f011d6bf:	e8 c1 a1 fe ff       	call   f0107885 <kmalloc>
f011d6c4:	83 c4 10             	add    $0x10,%esp
f011d6c7:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if (ptr_allocations[0] != NULL) panic("kmalloc: Attempt to allocate more than heap size, should return NULL");
f011d6cd:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011d6d3:	85 c0                	test   %eax,%eax
f011d6d5:	74 17                	je     f011d6ee <test_kmalloc_firstfit2+0x108>
f011d6d7:	83 ec 04             	sub    $0x4,%esp
f011d6da:	68 9c b6 13 f0       	push   $0xf013b69c
f011d6df:	68 97 03 00 00       	push   $0x397
f011d6e4:	68 5a b0 13 f0       	push   $0xf013b05a
f011d6e9:	e8 17 2b fe ff       	call   f0100205 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d6ee:	e8 aa f4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d6f3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d6f6:	e8 cd 66 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d6fb:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011d6fe:	83 ec 0c             	sub    $0xc,%esp
f011d701:	68 00 fc 1f 00       	push   $0x1ffc00
f011d706:	e8 7a a1 fe ff       	call   f0107885 <kmalloc>
f011d70b:	83 c4 10             	add    $0x10,%esp
f011d70e:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011d714:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011d71a:	89 c1                	mov    %eax,%ecx
f011d71c:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011d723:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011d726:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d72b:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011d72e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011d731:	ba 00 00 00 00       	mov    $0x0,%edx
f011d736:	f7 75 d4             	divl   -0x2c(%ebp)
f011d739:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011d73c:	29 d0                	sub    %edx,%eax
f011d73e:	89 c3                	mov    %eax,%ebx
f011d740:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011d747:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011d74c:	0f b6 d0             	movzbl %al,%edx
f011d74f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011d752:	01 d0                	add    %edx,%eax
f011d754:	48                   	dec    %eax
f011d755:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011d758:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d75b:	ba 00 00 00 00       	mov    $0x0,%edx
f011d760:	f7 75 cc             	divl   -0x34(%ebp)
f011d763:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d766:	29 d0                	sub    %edx,%eax
f011d768:	01 c3                	add    %eax,%ebx
f011d76a:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011d771:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011d776:	0f b6 c0             	movzbl %al,%eax
f011d779:	c1 e0 04             	shl    $0x4,%eax
f011d77c:	89 c2                	mov    %eax,%edx
f011d77e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011d781:	01 d0                	add    %edx,%eax
f011d783:	48                   	dec    %eax
f011d784:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011d787:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d78a:	ba 00 00 00 00       	mov    $0x0,%edx
f011d78f:	f7 75 c4             	divl   -0x3c(%ebp)
f011d792:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d795:	29 d0                	sub    %edx,%eax
f011d797:	01 d8                	add    %ebx,%eax
f011d799:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011d79e:	39 c1                	cmp    %eax,%ecx
f011d7a0:	74 17                	je     f011d7b9 <test_kmalloc_firstfit2+0x1d3>
f011d7a2:	83 ec 04             	sub    $0x4,%esp
f011d7a5:	68 74 b4 13 f0       	push   $0xf013b474
f011d7aa:	68 a1 03 00 00       	push   $0x3a1
f011d7af:	68 5a b0 13 f0       	push   $0xf013b05a
f011d7b4:	e8 4c 2a fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d7b9:	e8 0a 66 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d7be:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d7c1:	74 17                	je     f011d7da <test_kmalloc_firstfit2+0x1f4>
f011d7c3:	83 ec 04             	sub    $0x4,%esp
f011d7c6:	68 74 b0 13 f0       	push   $0xf013b074
f011d7cb:	68 a2 03 00 00       	push   $0x3a2
f011d7d0:	68 5a b0 13 f0       	push   $0xf013b05a
f011d7d5:	e8 2b 2a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d7da:	e8 be f3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d7df:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d7e2:	29 c2                	sub    %eax,%edx
f011d7e4:	89 d0                	mov    %edx,%eax
f011d7e6:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d7eb:	74 17                	je     f011d804 <test_kmalloc_firstfit2+0x21e>
f011d7ed:	83 ec 04             	sub    $0x4,%esp
f011d7f0:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011d7f5:	68 a3 03 00 00       	push   $0x3a3
f011d7fa:	68 5a b0 13 f0       	push   $0xf013b05a
f011d7ff:	e8 01 2a fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d804:	e8 94 f3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d809:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d80c:	e8 b7 65 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d811:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011d814:	83 ec 0c             	sub    $0xc,%esp
f011d817:	68 00 fc 1f 00       	push   $0x1ffc00
f011d81c:	e8 64 a0 fe ff       	call   f0107885 <kmalloc>
f011d821:	83 c4 10             	add    $0x10,%esp
f011d824:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011d82a:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011d830:	89 c1                	mov    %eax,%ecx
f011d832:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011d839:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011d83c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d841:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011d844:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011d847:	ba 00 00 00 00       	mov    $0x0,%edx
f011d84c:	f7 75 bc             	divl   -0x44(%ebp)
f011d84f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011d852:	29 d0                	sub    %edx,%eax
f011d854:	89 c3                	mov    %eax,%ebx
f011d856:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011d85d:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011d862:	0f b6 d0             	movzbl %al,%edx
f011d865:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011d868:	01 d0                	add    %edx,%eax
f011d86a:	48                   	dec    %eax
f011d86b:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011d86e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011d871:	ba 00 00 00 00       	mov    $0x0,%edx
f011d876:	f7 75 b4             	divl   -0x4c(%ebp)
f011d879:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011d87c:	29 d0                	sub    %edx,%eax
f011d87e:	01 c3                	add    %eax,%ebx
f011d880:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011d887:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011d88c:	0f b6 c0             	movzbl %al,%eax
f011d88f:	c1 e0 04             	shl    $0x4,%eax
f011d892:	89 c2                	mov    %eax,%edx
f011d894:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011d897:	01 d0                	add    %edx,%eax
f011d899:	48                   	dec    %eax
f011d89a:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011d89d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011d8a0:	ba 00 00 00 00       	mov    $0x0,%edx
f011d8a5:	f7 75 ac             	divl   -0x54(%ebp)
f011d8a8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011d8ab:	29 d0                	sub    %edx,%eax
f011d8ad:	01 d8                	add    %ebx,%eax
f011d8af:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011d8b4:	39 c1                	cmp    %eax,%ecx
f011d8b6:	74 17                	je     f011d8cf <test_kmalloc_firstfit2+0x2e9>
f011d8b8:	83 ec 04             	sub    $0x4,%esp
f011d8bb:	68 74 b4 13 f0       	push   $0xf013b474
f011d8c0:	68 a9 03 00 00       	push   $0x3a9
f011d8c5:	68 5a b0 13 f0       	push   $0xf013b05a
f011d8ca:	e8 36 29 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d8cf:	e8 f4 64 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d8d4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d8d7:	74 17                	je     f011d8f0 <test_kmalloc_firstfit2+0x30a>
f011d8d9:	83 ec 04             	sub    $0x4,%esp
f011d8dc:	68 74 b0 13 f0       	push   $0xf013b074
f011d8e1:	68 aa 03 00 00       	push   $0x3aa
f011d8e6:	68 5a b0 13 f0       	push   $0xf013b05a
f011d8eb:	e8 15 29 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d8f0:	e8 a8 f2 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d8f5:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d8f8:	29 c2                	sub    %eax,%edx
f011d8fa:	89 d0                	mov    %edx,%eax
f011d8fc:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d901:	74 17                	je     f011d91a <test_kmalloc_firstfit2+0x334>
f011d903:	83 ec 04             	sub    $0x4,%esp
f011d906:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011d90b:	68 ab 03 00 00       	push   $0x3ab
f011d910:	68 5a b0 13 f0       	push   $0xf013b05a
f011d915:	e8 eb 28 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011d91a:	e8 7e f2 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011d91f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d922:	e8 a1 64 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d927:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011d92a:	83 ec 0c             	sub    $0xc,%esp
f011d92d:	68 00 08 00 00       	push   $0x800
f011d932:	e8 4e 9f fe ff       	call   f0107885 <kmalloc>
f011d937:	83 c4 10             	add    $0x10,%esp
f011d93a:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] < (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011d940:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011d946:	89 c1                	mov    %eax,%ecx
f011d948:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011d94f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011d952:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d957:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011d95a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d95d:	ba 00 00 00 00       	mov    $0x0,%edx
f011d962:	f7 75 a4             	divl   -0x5c(%ebp)
f011d965:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d968:	29 d0                	sub    %edx,%eax
f011d96a:	89 c3                	mov    %eax,%ebx
f011d96c:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011d973:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011d978:	0f b6 d0             	movzbl %al,%edx
f011d97b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011d97e:	01 d0                	add    %edx,%eax
f011d980:	48                   	dec    %eax
f011d981:	89 45 98             	mov    %eax,-0x68(%ebp)
f011d984:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d987:	ba 00 00 00 00       	mov    $0x0,%edx
f011d98c:	f7 75 9c             	divl   -0x64(%ebp)
f011d98f:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d992:	29 d0                	sub    %edx,%eax
f011d994:	01 c3                	add    %eax,%ebx
f011d996:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011d99d:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011d9a2:	0f b6 c0             	movzbl %al,%eax
f011d9a5:	c1 e0 04             	shl    $0x4,%eax
f011d9a8:	89 c2                	mov    %eax,%edx
f011d9aa:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011d9ad:	01 d0                	add    %edx,%eax
f011d9af:	48                   	dec    %eax
f011d9b0:	89 45 90             	mov    %eax,-0x70(%ebp)
f011d9b3:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d9b6:	ba 00 00 00 00       	mov    $0x0,%edx
f011d9bb:	f7 75 94             	divl   -0x6c(%ebp)
f011d9be:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d9c1:	29 d0                	sub    %edx,%eax
f011d9c3:	01 d8                	add    %ebx,%eax
f011d9c5:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011d9ca:	39 c1                	cmp    %eax,%ecx
f011d9cc:	73 17                	jae    f011d9e5 <test_kmalloc_firstfit2+0x3ff>
f011d9ce:	83 ec 04             	sub    $0x4,%esp
f011d9d1:	68 74 b4 13 f0       	push   $0xf013b474
f011d9d6:	68 b1 03 00 00       	push   $0x3b1
f011d9db:	68 5a b0 13 f0       	push   $0xf013b05a
f011d9e0:	e8 20 28 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d9e5:	e8 de 63 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d9ea:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d9ed:	74 17                	je     f011da06 <test_kmalloc_firstfit2+0x420>
f011d9ef:	83 ec 04             	sub    $0x4,%esp
f011d9f2:	68 74 b0 13 f0       	push   $0xf013b074
f011d9f7:	68 b2 03 00 00       	push   $0x3b2
f011d9fc:	68 5a b0 13 f0       	push   $0xf013b05a
f011da01:	e8 ff 27 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011da06:	e8 92 f1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011da0b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011da0e:	29 c2                	sub    %eax,%edx
f011da10:	89 d0                	mov    %edx,%eax
f011da12:	83 f8 01             	cmp    $0x1,%eax
f011da15:	74 17                	je     f011da2e <test_kmalloc_firstfit2+0x448>
f011da17:	83 ec 04             	sub    $0x4,%esp
f011da1a:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011da1f:	68 b3 03 00 00       	push   $0x3b3
f011da24:	68 5a b0 13 f0       	push   $0xf013b05a
f011da29:	e8 d7 27 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011da2e:	e8 6a f1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011da33:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011da36:	e8 8d 63 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011da3b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011da3e:	83 ec 0c             	sub    $0xc,%esp
f011da41:	68 00 08 00 00       	push   $0x800
f011da46:	e8 3a 9e fe ff       	call   f0107885 <kmalloc>
f011da4b:	83 c4 10             	add    $0x10,%esp
f011da4e:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011da54:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011da5a:	89 c1                	mov    %eax,%ecx
f011da5c:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011da63:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011da66:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011da6b:	89 45 88             	mov    %eax,-0x78(%ebp)
f011da6e:	8b 45 88             	mov    -0x78(%ebp),%eax
f011da71:	ba 00 00 00 00       	mov    $0x0,%edx
f011da76:	f7 75 8c             	divl   -0x74(%ebp)
f011da79:	8b 45 88             	mov    -0x78(%ebp),%eax
f011da7c:	29 d0                	sub    %edx,%eax
f011da7e:	89 c3                	mov    %eax,%ebx
f011da80:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011da87:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011da8c:	0f b6 d0             	movzbl %al,%edx
f011da8f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011da92:	01 d0                	add    %edx,%eax
f011da94:	48                   	dec    %eax
f011da95:	89 45 80             	mov    %eax,-0x80(%ebp)
f011da98:	8b 45 80             	mov    -0x80(%ebp),%eax
f011da9b:	ba 00 00 00 00       	mov    $0x0,%edx
f011daa0:	f7 75 84             	divl   -0x7c(%ebp)
f011daa3:	8b 45 80             	mov    -0x80(%ebp),%eax
f011daa6:	29 d0                	sub    %edx,%eax
f011daa8:	01 c3                	add    %eax,%ebx
f011daaa:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011dab1:	10 00 00 
f011dab4:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011dab9:	0f b6 c0             	movzbl %al,%eax
f011dabc:	c1 e0 04             	shl    $0x4,%eax
f011dabf:	89 c2                	mov    %eax,%edx
f011dac1:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011dac7:	01 d0                	add    %edx,%eax
f011dac9:	48                   	dec    %eax
f011daca:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011dad0:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011dad6:	ba 00 00 00 00       	mov    $0x0,%edx
f011dadb:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011dae1:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011dae7:	29 d0                	sub    %edx,%eax
f011dae9:	01 d8                	add    %ebx,%eax
f011daeb:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011daf0:	39 c1                	cmp    %eax,%ecx
f011daf2:	74 17                	je     f011db0b <test_kmalloc_firstfit2+0x525>
f011daf4:	83 ec 04             	sub    $0x4,%esp
f011daf7:	68 74 b4 13 f0       	push   $0xf013b474
f011dafc:	68 b9 03 00 00       	push   $0x3b9
f011db01:	68 5a b0 13 f0       	push   $0xf013b05a
f011db06:	e8 fa 26 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011db0b:	e8 b8 62 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011db10:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011db13:	74 17                	je     f011db2c <test_kmalloc_firstfit2+0x546>
f011db15:	83 ec 04             	sub    $0x4,%esp
f011db18:	68 74 b0 13 f0       	push   $0xf013b074
f011db1d:	68 ba 03 00 00       	push   $0x3ba
f011db22:	68 5a b0 13 f0       	push   $0xf013b05a
f011db27:	e8 d9 26 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011db2c:	e8 6c f0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011db31:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011db34:	29 c2                	sub    %eax,%edx
f011db36:	89 d0                	mov    %edx,%eax
f011db38:	83 f8 01             	cmp    $0x1,%eax
f011db3b:	74 17                	je     f011db54 <test_kmalloc_firstfit2+0x56e>
f011db3d:	83 ec 04             	sub    $0x4,%esp
f011db40:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011db45:	68 bb 03 00 00       	push   $0x3bb
f011db4a:	68 5a b0 13 f0       	push   $0xf013b05a
f011db4f:	e8 b1 26 fe ff       	call   f0100205 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011db54:	e8 44 f0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011db59:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011db5c:	e8 67 62 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011db61:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011db64:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011db6a:	83 ec 0c             	sub    $0xc,%esp
f011db6d:	50                   	push   %eax
f011db6e:	e8 dd 9d fe ff       	call   f0107950 <kfree>
f011db73:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011db76:	e8 4d 62 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011db7b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011db7e:	74 17                	je     f011db97 <test_kmalloc_firstfit2+0x5b1>
f011db80:	83 ec 04             	sub    $0x4,%esp
f011db83:	68 74 b0 13 f0       	push   $0xf013b074
f011db88:	68 c1 03 00 00       	push   $0x3c1
f011db8d:	68 5a b0 13 f0       	push   $0xf013b05a
f011db92:	e8 6e 26 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong free: ");
f011db97:	e8 01 f0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011db9c:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011db9f:	83 f8 01             	cmp    $0x1,%eax
f011dba2:	74 17                	je     f011dbbb <test_kmalloc_firstfit2+0x5d5>
f011dba4:	83 ec 04             	sub    $0x4,%esp
f011dba7:	68 b7 b4 13 f0       	push   $0xf013b4b7
f011dbac:	68 c2 03 00 00       	push   $0x3c2
f011dbb1:	68 5a b0 13 f0       	push   $0xf013b05a
f011dbb6:	e8 4a 26 fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011dbbb:	e8 dd ef fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011dbc0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dbc3:	e8 00 62 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dbc8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011dbcb:	83 ec 0c             	sub    $0xc,%esp
f011dbce:	68 00 1c 00 00       	push   $0x1c00
f011dbd3:	e8 ad 9c fe ff       	call   f0107885 <kmalloc>
f011dbd8:	83 c4 10             	add    $0x10,%esp
f011dbdb:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011dbe1:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011dbe7:	89 c1                	mov    %eax,%ecx
f011dbe9:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011dbf0:	10 00 00 
f011dbf3:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011dbf9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dbfe:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011dc04:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011dc0a:	ba 00 00 00 00       	mov    $0x0,%edx
f011dc0f:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011dc15:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011dc1b:	29 d0                	sub    %edx,%eax
f011dc1d:	89 c3                	mov    %eax,%ebx
f011dc1f:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011dc26:	10 00 00 
f011dc29:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011dc2e:	0f b6 d0             	movzbl %al,%edx
f011dc31:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011dc37:	01 d0                	add    %edx,%eax
f011dc39:	48                   	dec    %eax
f011dc3a:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011dc40:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011dc46:	ba 00 00 00 00       	mov    $0x0,%edx
f011dc4b:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011dc51:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011dc57:	29 d0                	sub    %edx,%eax
f011dc59:	01 c3                	add    %eax,%ebx
f011dc5b:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011dc62:	10 00 00 
f011dc65:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011dc6a:	0f b6 c0             	movzbl %al,%eax
f011dc6d:	c1 e0 04             	shl    $0x4,%eax
f011dc70:	89 c2                	mov    %eax,%edx
f011dc72:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011dc78:	01 d0                	add    %edx,%eax
f011dc7a:	48                   	dec    %eax
f011dc7b:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011dc81:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011dc87:	ba 00 00 00 00       	mov    $0x0,%edx
f011dc8c:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011dc92:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011dc98:	29 d0                	sub    %edx,%eax
f011dc9a:	01 d8                	add    %ebx,%eax
f011dc9c:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011dca1:	39 c1                	cmp    %eax,%ecx
f011dca3:	74 17                	je     f011dcbc <test_kmalloc_firstfit2+0x6d6>
f011dca5:	83 ec 04             	sub    $0x4,%esp
f011dca8:	68 74 b4 13 f0       	push   $0xf013b474
f011dcad:	68 c8 03 00 00       	push   $0x3c8
f011dcb2:	68 5a b0 13 f0       	push   $0xf013b05a
f011dcb7:	e8 49 25 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dcbc:	e8 07 61 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dcc1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011dcc4:	74 17                	je     f011dcdd <test_kmalloc_firstfit2+0x6f7>
f011dcc6:	83 ec 04             	sub    $0x4,%esp
f011dcc9:	68 74 b0 13 f0       	push   $0xf013b074
f011dcce:	68 c9 03 00 00       	push   $0x3c9
f011dcd3:	68 5a b0 13 f0       	push   $0xf013b05a
f011dcd8:	e8 28 25 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: ");
f011dcdd:	e8 bb ee fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011dce2:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011dce5:	29 c2                	sub    %eax,%edx
f011dce7:	89 d0                	mov    %edx,%eax
f011dce9:	83 f8 02             	cmp    $0x2,%eax
f011dcec:	74 17                	je     f011dd05 <test_kmalloc_firstfit2+0x71f>
f011dcee:	83 ec 04             	sub    $0x4,%esp
f011dcf1:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011dcf6:	68 ca 03 00 00       	push   $0x3ca
f011dcfb:	68 5a b0 13 f0       	push   $0xf013b05a
f011dd00:	e8 00 25 fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011dd05:	e8 93 ee fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011dd0a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dd0d:	e8 b6 60 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dd12:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011dd15:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011dd1b:	83 ec 0c             	sub    $0xc,%esp
f011dd1e:	50                   	push   %eax
f011dd1f:	e8 2c 9c fe ff       	call   f0107950 <kfree>
f011dd24:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dd27:	e8 9c 60 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dd2c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011dd2f:	74 17                	je     f011dd48 <test_kmalloc_firstfit2+0x762>
f011dd31:	83 ec 04             	sub    $0x4,%esp
f011dd34:	68 74 b0 13 f0       	push   $0xf013b074
f011dd39:	68 d0 03 00 00       	push   $0x3d0
f011dd3e:	68 5a b0 13 f0       	push   $0xf013b05a
f011dd43:	e8 bd 24 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011dd48:	e8 50 ee fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011dd4d:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011dd50:	3d 00 02 00 00       	cmp    $0x200,%eax
f011dd55:	74 17                	je     f011dd6e <test_kmalloc_firstfit2+0x788>
f011dd57:	83 ec 04             	sub    $0x4,%esp
f011dd5a:	68 b7 b4 13 f0       	push   $0xf013b4b7
f011dd5f:	68 d1 03 00 00       	push   $0x3d1
f011dd64:	68 5a b0 13 f0       	push   $0xf013b05a
f011dd69:	e8 97 24 fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011dd6e:	e8 2a ee fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011dd73:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dd76:	e8 4d 60 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dd7b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011dd7e:	83 ec 0c             	sub    $0xc,%esp
f011dd81:	68 00 fc 2f 00       	push   $0x2ffc00
f011dd86:	e8 fa 9a fe ff       	call   f0107885 <kmalloc>
f011dd8b:	83 c4 10             	add    $0x10,%esp
f011dd8e:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011dd94:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011dd9a:	89 c1                	mov    %eax,%ecx
f011dd9c:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011dda3:	10 00 00 
f011dda6:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011ddac:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ddb1:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011ddb7:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011ddbd:	ba 00 00 00 00       	mov    $0x0,%edx
f011ddc2:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011ddc8:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011ddce:	29 d0                	sub    %edx,%eax
f011ddd0:	89 c3                	mov    %eax,%ebx
f011ddd2:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011ddd9:	10 00 00 
f011dddc:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011dde1:	0f b6 d0             	movzbl %al,%edx
f011dde4:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011ddea:	01 d0                	add    %edx,%eax
f011ddec:	48                   	dec    %eax
f011dded:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011ddf3:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011ddf9:	ba 00 00 00 00       	mov    $0x0,%edx
f011ddfe:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011de04:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011de0a:	29 d0                	sub    %edx,%eax
f011de0c:	01 c3                	add    %eax,%ebx
f011de0e:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011de15:	10 00 00 
f011de18:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011de1d:	0f b6 c0             	movzbl %al,%eax
f011de20:	c1 e0 04             	shl    $0x4,%eax
f011de23:	89 c2                	mov    %eax,%edx
f011de25:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011de2b:	01 d0                	add    %edx,%eax
f011de2d:	48                   	dec    %eax
f011de2e:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011de34:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011de3a:	ba 00 00 00 00       	mov    $0x0,%edx
f011de3f:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011de45:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011de4b:	29 d0                	sub    %edx,%eax
f011de4d:	01 d8                	add    %ebx,%eax
f011de4f:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011de54:	39 c1                	cmp    %eax,%ecx
f011de56:	74 17                	je     f011de6f <test_kmalloc_firstfit2+0x889>
f011de58:	83 ec 04             	sub    $0x4,%esp
f011de5b:	68 74 b4 13 f0       	push   $0xf013b474
f011de60:	68 d7 03 00 00       	push   $0x3d7
f011de65:	68 5a b0 13 f0       	push   $0xf013b05a
f011de6a:	e8 96 23 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011de6f:	e8 54 5f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011de74:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011de77:	74 17                	je     f011de90 <test_kmalloc_firstfit2+0x8aa>
f011de79:	83 ec 04             	sub    $0x4,%esp
f011de7c:	68 74 b0 13 f0       	push   $0xf013b074
f011de81:	68 d8 03 00 00       	push   $0x3d8
f011de86:	68 5a b0 13 f0       	push   $0xf013b05a
f011de8b:	e8 75 23 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011de90:	e8 08 ed fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011de95:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011de98:	29 c2                	sub    %eax,%edx
f011de9a:	89 d0                	mov    %edx,%eax
f011de9c:	3d 00 03 00 00       	cmp    $0x300,%eax
f011dea1:	74 17                	je     f011deba <test_kmalloc_firstfit2+0x8d4>
f011dea3:	83 ec 04             	sub    $0x4,%esp
f011dea6:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011deab:	68 d9 03 00 00       	push   $0x3d9
f011deb0:	68 5a b0 13 f0       	push   $0xf013b05a
f011deb5:	e8 4b 23 fe ff       	call   f0100205 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011deba:	e8 de ec fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011debf:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dec2:	e8 01 5f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dec7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011deca:	83 ec 0c             	sub    $0xc,%esp
f011decd:	68 00 18 20 00       	push   $0x201800
f011ded2:	e8 ae 99 fe ff       	call   f0107885 <kmalloc>
f011ded7:	83 c4 10             	add    $0x10,%esp
f011deda:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011dee0:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011dee6:	89 c1                	mov    %eax,%ecx
f011dee8:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011deef:	10 00 00 
f011def2:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011def8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011defd:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011df03:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011df09:	ba 00 00 00 00       	mov    $0x0,%edx
f011df0e:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011df14:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011df1a:	29 d0                	sub    %edx,%eax
f011df1c:	89 c3                	mov    %eax,%ebx
f011df1e:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011df25:	10 00 00 
f011df28:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011df2d:	0f b6 d0             	movzbl %al,%edx
f011df30:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011df36:	01 d0                	add    %edx,%eax
f011df38:	48                   	dec    %eax
f011df39:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011df3f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011df45:	ba 00 00 00 00       	mov    $0x0,%edx
f011df4a:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011df50:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011df56:	29 d0                	sub    %edx,%eax
f011df58:	01 c3                	add    %eax,%ebx
f011df5a:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011df61:	10 00 00 
f011df64:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011df69:	0f b6 c0             	movzbl %al,%eax
f011df6c:	c1 e0 04             	shl    $0x4,%eax
f011df6f:	89 c2                	mov    %eax,%edx
f011df71:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011df77:	01 d0                	add    %edx,%eax
f011df79:	48                   	dec    %eax
f011df7a:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011df80:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011df86:	ba 00 00 00 00       	mov    $0x0,%edx
f011df8b:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011df91:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011df97:	29 d0                	sub    %edx,%eax
f011df99:	01 d8                	add    %ebx,%eax
f011df9b:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011dfa0:	39 c1                	cmp    %eax,%ecx
f011dfa2:	74 17                	je     f011dfbb <test_kmalloc_firstfit2+0x9d5>
f011dfa4:	83 ec 04             	sub    $0x4,%esp
f011dfa7:	68 74 b4 13 f0       	push   $0xf013b474
f011dfac:	68 df 03 00 00       	push   $0x3df
f011dfb1:	68 5a b0 13 f0       	push   $0xf013b05a
f011dfb6:	e8 4a 22 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dfbb:	e8 08 5e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dfc0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011dfc3:	74 17                	je     f011dfdc <test_kmalloc_firstfit2+0x9f6>
f011dfc5:	83 ec 04             	sub    $0x4,%esp
f011dfc8:	68 74 b0 13 f0       	push   $0xf013b074
f011dfcd:	68 e0 03 00 00       	push   $0x3e0
f011dfd2:	68 5a b0 13 f0       	push   $0xf013b05a
f011dfd7:	e8 29 22 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011dfdc:	e8 bc eb fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011dfe1:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011dfe4:	29 c2                	sub    %eax,%edx
f011dfe6:	89 d0                	mov    %edx,%eax
f011dfe8:	3d 02 02 00 00       	cmp    $0x202,%eax
f011dfed:	74 17                	je     f011e006 <test_kmalloc_firstfit2+0xa20>
f011dfef:	83 ec 04             	sub    $0x4,%esp
f011dff2:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011dff7:	68 e1 03 00 00       	push   $0x3e1
f011dffc:	68 5a b0 13 f0       	push   $0xf013b05a
f011e001:	e8 ff 21 fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011e006:	e8 92 eb fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e00b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e00e:	e8 b5 5d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e013:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011e016:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011e01c:	83 ec 0c             	sub    $0xc,%esp
f011e01f:	50                   	push   %eax
f011e020:	e8 2b 99 fe ff       	call   f0107950 <kfree>
f011e025:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e028:	e8 9b 5d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e02d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e030:	74 17                	je     f011e049 <test_kmalloc_firstfit2+0xa63>
f011e032:	83 ec 04             	sub    $0x4,%esp
f011e035:	68 74 b0 13 f0       	push   $0xf013b074
f011e03a:	68 e7 03 00 00       	push   $0x3e7
f011e03f:	68 5a b0 13 f0       	push   $0xf013b05a
f011e044:	e8 bc 21 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011e049:	e8 4f eb fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e04e:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011e051:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e056:	74 17                	je     f011e06f <test_kmalloc_firstfit2+0xa89>
f011e058:	83 ec 04             	sub    $0x4,%esp
f011e05b:	68 b7 b4 13 f0       	push   $0xf013b4b7
f011e060:	68 e8 03 00 00       	push   $0x3e8
f011e065:	68 5a b0 13 f0       	push   $0xf013b05a
f011e06a:	e8 96 21 fe ff       	call   f0100205 <_panic>

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB + 4 KB = 4 MB + 4 KB]
		freeFrames = sys_calculate_free_frames() ;
f011e06f:	e8 29 eb fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e074:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e077:	e8 4c 5d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e07c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011e07f:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011e085:	83 ec 0c             	sub    $0xc,%esp
f011e088:	50                   	push   %eax
f011e089:	e8 c2 98 fe ff       	call   f0107950 <kfree>
f011e08e:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011e091:	e8 07 eb fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e096:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011e099:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e09e:	74 17                	je     f011e0b7 <test_kmalloc_firstfit2+0xad1>
f011e0a0:	83 ec 04             	sub    $0x4,%esp
f011e0a3:	68 b7 b4 13 f0       	push   $0xf013b4b7
f011e0a8:	68 ee 03 00 00       	push   $0x3ee
f011e0ad:	68 5a b0 13 f0       	push   $0xf013b05a
f011e0b2:	e8 4e 21 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e0b7:	e8 0c 5d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e0bc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e0bf:	74 17                	je     f011e0d8 <test_kmalloc_firstfit2+0xaf2>
f011e0c1:	83 ec 04             	sub    $0x4,%esp
f011e0c4:	68 74 b0 13 f0       	push   $0xf013b074
f011e0c9:	68 ef 03 00 00       	push   $0x3ef
f011e0ce:	68 5a b0 13 f0       	push   $0xf013b05a
f011e0d3:	e8 2d 21 fe ff       	call   f0100205 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011e0d8:	e8 c0 ea fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e0dd:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e0e0:	e8 e3 5c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e0e5:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011e0e8:	83 ec 0c             	sub    $0xc,%esp
f011e0eb:	68 00 fc 4f 00       	push   $0x4ffc00
f011e0f0:	e8 90 97 fe ff       	call   f0107885 <kmalloc>
f011e0f5:	83 c4 10             	add    $0x10,%esp
f011e0f8:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011e0fe:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011e104:	89 c1                	mov    %eax,%ecx
f011e106:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011e10d:	10 00 00 
f011e110:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011e116:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e11b:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011e121:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011e127:	ba 00 00 00 00       	mov    $0x0,%edx
f011e12c:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011e132:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011e138:	29 d0                	sub    %edx,%eax
f011e13a:	89 c3                	mov    %eax,%ebx
f011e13c:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011e143:	10 00 00 
f011e146:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011e14b:	0f b6 d0             	movzbl %al,%edx
f011e14e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011e154:	01 d0                	add    %edx,%eax
f011e156:	48                   	dec    %eax
f011e157:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011e15d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011e163:	ba 00 00 00 00       	mov    $0x0,%edx
f011e168:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011e16e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011e174:	29 d0                	sub    %edx,%eax
f011e176:	01 c3                	add    %eax,%ebx
f011e178:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011e17f:	10 00 00 
f011e182:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011e187:	0f b6 c0             	movzbl %al,%eax
f011e18a:	c1 e0 04             	shl    $0x4,%eax
f011e18d:	89 c2                	mov    %eax,%edx
f011e18f:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011e195:	01 d0                	add    %edx,%eax
f011e197:	48                   	dec    %eax
f011e198:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011e19e:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011e1a4:	ba 00 00 00 00       	mov    $0x0,%edx
f011e1a9:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011e1af:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011e1b5:	29 d0                	sub    %edx,%eax
f011e1b7:	01 d8                	add    %ebx,%eax
f011e1b9:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011e1be:	39 c1                	cmp    %eax,%ecx
f011e1c0:	74 17                	je     f011e1d9 <test_kmalloc_firstfit2+0xbf3>
f011e1c2:	83 ec 04             	sub    $0x4,%esp
f011e1c5:	68 74 b4 13 f0       	push   $0xf013b474
f011e1ca:	68 f5 03 00 00       	push   $0x3f5
f011e1cf:	68 5a b0 13 f0       	push   $0xf013b05a
f011e1d4:	e8 2c 20 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e1d9:	e8 ea 5b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e1de:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e1e1:	74 17                	je     f011e1fa <test_kmalloc_firstfit2+0xc14>
f011e1e3:	83 ec 04             	sub    $0x4,%esp
f011e1e6:	68 74 b0 13 f0       	push   $0xf013b074
f011e1eb:	68 f6 03 00 00       	push   $0x3f6
f011e1f0:	68 5a b0 13 f0       	push   $0xf013b05a
f011e1f5:	e8 0b 20 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   5*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e1fa:	e8 9e e9 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e1ff:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e202:	29 c2                	sub    %eax,%edx
f011e204:	89 d0                	mov    %edx,%eax
f011e206:	3d 00 05 00 00       	cmp    $0x500,%eax
f011e20b:	74 17                	je     f011e224 <test_kmalloc_firstfit2+0xc3e>
f011e20d:	83 ec 04             	sub    $0x4,%esp
f011e210:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011e215:	68 f7 03 00 00       	push   $0x3f7
f011e21a:	68 5a b0 13 f0       	push   $0xf013b05a
f011e21f:	e8 e1 1f fe ff       	call   f0100205 <_panic>
//		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
//		if ((sys_calculate_free_frames() - freeFrames) != 514) panic("Wrong free: ");

		//[FIRST FIT Case]
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011e224:	e8 74 e9 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e229:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e22c:	e8 97 5b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e231:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega-kilo);
f011e234:	83 ec 0c             	sub    $0xc,%esp
f011e237:	68 00 fc 2f 00       	push   $0x2ffc00
f011e23c:	e8 44 96 fe ff       	call   f0107885 <kmalloc>
f011e241:	83 c4 10             	add    $0x10,%esp
f011e244:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011e24a:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011e250:	89 c1                	mov    %eax,%ecx
f011e252:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011e259:	10 00 00 
f011e25c:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011e262:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e267:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011e26d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011e273:	ba 00 00 00 00       	mov    $0x0,%edx
f011e278:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011e27e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011e284:	29 d0                	sub    %edx,%eax
f011e286:	89 c3                	mov    %eax,%ebx
f011e288:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011e28f:	10 00 00 
f011e292:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011e297:	0f b6 d0             	movzbl %al,%edx
f011e29a:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011e2a0:	01 d0                	add    %edx,%eax
f011e2a2:	48                   	dec    %eax
f011e2a3:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011e2a9:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011e2af:	ba 00 00 00 00       	mov    $0x0,%edx
f011e2b4:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011e2ba:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011e2c0:	29 d0                	sub    %edx,%eax
f011e2c2:	01 c3                	add    %eax,%ebx
f011e2c4:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011e2cb:	10 00 00 
f011e2ce:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011e2d3:	0f b6 c0             	movzbl %al,%eax
f011e2d6:	c1 e0 04             	shl    $0x4,%eax
f011e2d9:	89 c2                	mov    %eax,%edx
f011e2db:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011e2e1:	01 d0                	add    %edx,%eax
f011e2e3:	48                   	dec    %eax
f011e2e4:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011e2ea:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011e2f0:	ba 00 00 00 00       	mov    $0x0,%edx
f011e2f5:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011e2fb:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011e301:	29 d0                	sub    %edx,%eax
f011e303:	01 d8                	add    %ebx,%eax
f011e305:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e30a:	39 c1                	cmp    %eax,%ecx
f011e30c:	74 17                	je     f011e325 <test_kmalloc_firstfit2+0xd3f>
f011e30e:	83 ec 04             	sub    $0x4,%esp
f011e311:	68 74 b4 13 f0       	push   $0xf013b474
f011e316:	68 05 04 00 00       	push   $0x405
f011e31b:	68 5a b0 13 f0       	push   $0xf013b05a
f011e320:	e8 e0 1e fe ff       	call   f0100205 <_panic>
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e325:	e8 9e 5a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e32a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e32d:	74 17                	je     f011e346 <test_kmalloc_firstfit2+0xd60>
f011e32f:	83 ec 04             	sub    $0x4,%esp
f011e332:	68 74 b0 13 f0       	push   $0xf013b074
f011e337:	68 06 04 00 00       	push   $0x406
f011e33c:	68 5a b0 13 f0       	push   $0xf013b05a
f011e341:	e8 bf 1e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e346:	e8 52 e8 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e34b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e34e:	29 c2                	sub    %eax,%edx
f011e350:	89 d0                	mov    %edx,%eax
f011e352:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e357:	74 17                	je     f011e370 <test_kmalloc_firstfit2+0xd8a>
f011e359:	83 ec 04             	sub    $0x4,%esp
f011e35c:	68 a4 b4 13 f0       	push   $0xf013b4a4
f011e361:	68 07 04 00 00       	push   $0x407
f011e366:	68 5a b0 13 f0       	push   $0xf013b05a
f011e36b:	e8 95 1e fe ff       	call   f0100205 <_panic>
	}
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[9] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011e370:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011e377:	10 00 00 
f011e37a:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011e380:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e385:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011e38b:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011e391:	ba 00 00 00 00       	mov    $0x0,%edx
f011e396:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011e39c:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011e3a2:	29 d0                	sub    %edx,%eax
f011e3a4:	89 c1                	mov    %eax,%ecx
f011e3a6:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011e3ad:	10 00 00 
f011e3b0:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011e3b5:	0f b6 d0             	movzbl %al,%edx
f011e3b8:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011e3be:	01 d0                	add    %edx,%eax
f011e3c0:	48                   	dec    %eax
f011e3c1:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011e3c7:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011e3cd:	ba 00 00 00 00       	mov    $0x0,%edx
f011e3d2:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011e3d8:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011e3de:	29 d0                	sub    %edx,%eax
f011e3e0:	01 c1                	add    %eax,%ecx
f011e3e2:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011e3e9:	10 00 00 
f011e3ec:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011e3f1:	0f b6 c0             	movzbl %al,%eax
f011e3f4:	c1 e0 04             	shl    $0x4,%eax
f011e3f7:	89 c2                	mov    %eax,%edx
f011e3f9:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011e3ff:	01 d0                	add    %edx,%eax
f011e401:	48                   	dec    %eax
f011e402:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011e408:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011e40e:	ba 00 00 00 00       	mov    $0x0,%edx
f011e413:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011e419:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011e41f:	29 d0                	sub    %edx,%eax
f011e421:	01 c8                	add    %ecx,%eax
f011e423:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011e428:	29 c2                	sub    %eax,%edx
f011e42a:	89 d0                	mov    %edx,%eax
f011e42c:	83 ec 0c             	sub    $0xc,%esp
f011e42f:	50                   	push   %eax
f011e430:	e8 50 94 fe ff       	call   f0107885 <kmalloc>
f011e435:	83 c4 10             	add    $0x10,%esp
f011e438:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if (ptr_allocations[9] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011e43e:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011e444:	85 c0                	test   %eax,%eax
f011e446:	74 17                	je     f011e45f <test_kmalloc_firstfit2+0xe79>
f011e448:	83 ec 04             	sub    $0x4,%esp
f011e44b:	68 a4 b5 13 f0       	push   $0xf013b5a4
f011e450:	68 0d 04 00 00       	push   $0x40d
f011e455:	68 5a b0 13 f0       	push   $0xf013b05a
f011e45a:	e8 a6 1d fe ff       	call   f0100205 <_panic>

		cprintf("Congratulations!! test FIRST FIT allocation (2) completed successfully.\n");
f011e45f:	83 ec 0c             	sub    $0xc,%esp
f011e462:	68 e4 b6 13 f0       	push   $0xf013b6e4
f011e467:	e8 a2 28 fe ff       	call   f0100d0e <cprintf>
f011e46c:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011e46f:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011e474:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011e477:	5b                   	pop    %ebx
f011e478:	5f                   	pop    %edi
f011e479:	5d                   	pop    %ebp
f011e47a:	c3                   	ret    

f011e47b <test_kmalloc_worstfit>:

int test_kmalloc_worstfit()
{
f011e47b:	55                   	push   %ebp
f011e47c:	89 e5                	mov    %esp,%ebp
f011e47e:	57                   	push   %edi
f011e47f:	53                   	push   %ebx
f011e480:	81 ec 50 04 00 00    	sub    $0x450,%esp
	cprintf("==============================================\n");
f011e486:	83 ec 0c             	sub    $0xc,%esp
f011e489:	68 9c af 13 f0       	push   $0xf013af9c
f011e48e:	e8 7b 28 fe ff       	call   f0100d0e <cprintf>
f011e493:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011e496:	83 ec 0c             	sub    $0xc,%esp
f011e499:	68 cc af 13 f0       	push   $0xf013afcc
f011e49e:	e8 6b 28 fe ff       	call   f0100d0e <cprintf>
f011e4a3:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011e4a6:	83 ec 0c             	sub    $0xc,%esp
f011e4a9:	68 9c af 13 f0       	push   $0xf013af9c
f011e4ae:	e8 5b 28 fe ff       	call   f0100d0e <cprintf>
f011e4b3:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f011e4b6:	8d 95 b4 fb ff ff    	lea    -0x44c(%ebp),%edx
f011e4bc:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f011e4c1:	b8 00 00 00 00       	mov    $0x0,%eax
f011e4c6:	89 d7                	mov    %edx,%edi
f011e4c8:	f3 ab                	rep stos %eax,%es:(%edi)

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f011e4ca:	e8 ce e6 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011e4cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f011e4d2:	e8 f1 58 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e4d7:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int count = 0;
f011e4da:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int i;
	for(i = 0; i< 79 ;i++)
f011e4e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011e4e8:	eb 1f                	jmp    f011e509 <test_kmalloc_worstfit+0x8e>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f011e4ea:	83 ec 0c             	sub    $0xc,%esp
f011e4ed:	68 00 00 20 00       	push   $0x200000
f011e4f2:	e8 8e 93 fe ff       	call   f0107885 <kmalloc>
f011e4f7:	83 c4 10             	add    $0x10,%esp
f011e4fa:	89 c2                	mov    %eax,%edx
f011e4fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011e4ff:	89 94 85 b4 fb ff ff 	mov    %edx,-0x44c(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int count = 0;
	int i;
	for(i = 0; i< 79 ;i++)
f011e506:	ff 45 f4             	incl   -0xc(%ebp)
f011e509:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f011e50d:	7e db                	jle    f011e4ea <test_kmalloc_worstfit+0x6f>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
f011e50f:	83 ec 0c             	sub    $0xc,%esp
f011e512:	68 00 b0 1f 00       	push   $0x1fb000
f011e517:	e8 69 93 fe ff       	call   f0107885 <kmalloc>
f011e51c:	83 c4 10             	add    $0x10,%esp
f011e51f:	89 85 f0 fc ff ff    	mov    %eax,-0x310(%ebp)

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011e525:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011e52b:	89 c1                	mov    %eax,%ecx
f011e52d:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011e534:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011e537:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e53c:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011e53f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e542:	ba 00 00 00 00       	mov    $0x0,%edx
f011e547:	f7 75 e4             	divl   -0x1c(%ebp)
f011e54a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e54d:	29 d0                	sub    %edx,%eax
f011e54f:	89 c3                	mov    %eax,%ebx
f011e551:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011e558:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011e55d:	0f b6 d0             	movzbl %al,%edx
f011e560:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011e563:	01 d0                	add    %edx,%eax
f011e565:	48                   	dec    %eax
f011e566:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011e569:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011e56c:	ba 00 00 00 00       	mov    $0x0,%edx
f011e571:	f7 75 dc             	divl   -0x24(%ebp)
f011e574:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011e577:	29 d0                	sub    %edx,%eax
f011e579:	01 c3                	add    %eax,%ebx
f011e57b:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011e582:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011e587:	0f b6 c0             	movzbl %al,%eax
f011e58a:	c1 e0 04             	shl    $0x4,%eax
f011e58d:	89 c2                	mov    %eax,%edx
f011e58f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011e592:	01 d0                	add    %edx,%eax
f011e594:	48                   	dec    %eax
f011e595:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011e598:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e59b:	ba 00 00 00 00       	mov    $0x0,%edx
f011e5a0:	f7 75 d4             	divl   -0x2c(%ebp)
f011e5a3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e5a6:	29 d0                	sub    %edx,%eax
f011e5a8:	01 d8                	add    %ebx,%eax
f011e5aa:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e5af:	39 c1                	cmp    %eax,%ecx
f011e5b1:	0f 85 c0 04 00 00    	jne    f011ea77 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011e5b7:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011e5bd:	89 c1                	mov    %eax,%ecx
f011e5bf:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011e5c6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011e5c9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e5ce:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011e5d1:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e5d4:	ba 00 00 00 00       	mov    $0x0,%edx
f011e5d9:	f7 75 cc             	divl   -0x34(%ebp)
f011e5dc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e5df:	29 d0                	sub    %edx,%eax
f011e5e1:	89 c3                	mov    %eax,%ebx
f011e5e3:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011e5ea:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011e5ef:	0f b6 d0             	movzbl %al,%edx
f011e5f2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011e5f5:	01 d0                	add    %edx,%eax
f011e5f7:	48                   	dec    %eax
f011e5f8:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011e5fb:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e5fe:	ba 00 00 00 00       	mov    $0x0,%edx
f011e603:	f7 75 c4             	divl   -0x3c(%ebp)
f011e606:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e609:	29 d0                	sub    %edx,%eax
f011e60b:	01 c3                	add    %eax,%ebx
f011e60d:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011e614:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011e619:	0f b6 c0             	movzbl %al,%eax
f011e61c:	c1 e0 04             	shl    $0x4,%eax
f011e61f:	89 c2                	mov    %eax,%edx
f011e621:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011e624:	01 d0                	add    %edx,%eax
f011e626:	48                   	dec    %eax
f011e627:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011e62a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e62d:	ba 00 00 00 00       	mov    $0x0,%edx
f011e632:	f7 75 bc             	divl   -0x44(%ebp)
f011e635:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e638:	29 d0                	sub    %edx,%eax
f011e63a:	01 d8                	add    %ebx,%eax
f011e63c:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011e641:	39 c1                	cmp    %eax,%ecx
f011e643:	0f 85 2e 04 00 00    	jne    f011ea77 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011e649:	8b 85 d4 fb ff ff    	mov    -0x42c(%ebp),%eax
f011e64f:	89 c1                	mov    %eax,%ecx
f011e651:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011e658:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011e65b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e660:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011e663:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e666:	ba 00 00 00 00       	mov    $0x0,%edx
f011e66b:	f7 75 b4             	divl   -0x4c(%ebp)
f011e66e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e671:	29 d0                	sub    %edx,%eax
f011e673:	89 c3                	mov    %eax,%ebx
f011e675:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011e67c:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011e681:	0f b6 d0             	movzbl %al,%edx
f011e684:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011e687:	01 d0                	add    %edx,%eax
f011e689:	48                   	dec    %eax
f011e68a:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011e68d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e690:	ba 00 00 00 00       	mov    $0x0,%edx
f011e695:	f7 75 ac             	divl   -0x54(%ebp)
f011e698:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e69b:	29 d0                	sub    %edx,%eax
f011e69d:	01 c3                	add    %eax,%ebx
f011e69f:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011e6a6:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011e6ab:	0f b6 c0             	movzbl %al,%eax
f011e6ae:	c1 e0 04             	shl    $0x4,%eax
f011e6b1:	89 c2                	mov    %eax,%edx
f011e6b3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011e6b6:	01 d0                	add    %edx,%eax
f011e6b8:	48                   	dec    %eax
f011e6b9:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011e6bc:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e6bf:	ba 00 00 00 00       	mov    $0x0,%edx
f011e6c4:	f7 75 a4             	divl   -0x5c(%ebp)
f011e6c7:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e6ca:	29 d0                	sub    %edx,%eax
f011e6cc:	01 d8                	add    %ebx,%eax
f011e6ce:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011e6d3:	39 c1                	cmp    %eax,%ecx
f011e6d5:	0f 85 9c 03 00 00    	jne    f011ea77 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011e6db:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011e6e1:	89 c1                	mov    %eax,%ecx
f011e6e3:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011e6ea:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011e6ed:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e6f2:	89 45 98             	mov    %eax,-0x68(%ebp)
f011e6f5:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e6f8:	ba 00 00 00 00       	mov    $0x0,%edx
f011e6fd:	f7 75 9c             	divl   -0x64(%ebp)
f011e700:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e703:	29 d0                	sub    %edx,%eax
f011e705:	89 c3                	mov    %eax,%ebx
f011e707:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011e70e:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011e713:	0f b6 d0             	movzbl %al,%edx
f011e716:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011e719:	01 d0                	add    %edx,%eax
f011e71b:	48                   	dec    %eax
f011e71c:	89 45 90             	mov    %eax,-0x70(%ebp)
f011e71f:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e722:	ba 00 00 00 00       	mov    $0x0,%edx
f011e727:	f7 75 94             	divl   -0x6c(%ebp)
f011e72a:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e72d:	29 d0                	sub    %edx,%eax
f011e72f:	01 c3                	add    %eax,%ebx
f011e731:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011e738:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011e73d:	0f b6 c0             	movzbl %al,%eax
f011e740:	c1 e0 04             	shl    $0x4,%eax
f011e743:	89 c2                	mov    %eax,%edx
f011e745:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011e748:	01 d0                	add    %edx,%eax
f011e74a:	48                   	dec    %eax
f011e74b:	89 45 88             	mov    %eax,-0x78(%ebp)
f011e74e:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e751:	ba 00 00 00 00       	mov    $0x0,%edx
f011e756:	f7 75 8c             	divl   -0x74(%ebp)
f011e759:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e75c:	29 d0                	sub    %edx,%eax
f011e75e:	01 d8                	add    %ebx,%eax
f011e760:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011e765:	39 c1                	cmp    %eax,%ecx
f011e767:	0f 85 0a 03 00 00    	jne    f011ea77 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011e76d:	8b 85 f0 fb ff ff    	mov    -0x410(%ebp),%eax
f011e773:	89 c1                	mov    %eax,%ecx
f011e775:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011e77c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011e77f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e784:	89 45 80             	mov    %eax,-0x80(%ebp)
f011e787:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e78a:	ba 00 00 00 00       	mov    $0x0,%edx
f011e78f:	f7 75 84             	divl   -0x7c(%ebp)
f011e792:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e795:	29 d0                	sub    %edx,%eax
f011e797:	89 c3                	mov    %eax,%ebx
f011e799:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011e7a0:	10 00 00 
f011e7a3:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011e7a8:	0f b6 d0             	movzbl %al,%edx
f011e7ab:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011e7b1:	01 d0                	add    %edx,%eax
f011e7b3:	48                   	dec    %eax
f011e7b4:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011e7ba:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e7c0:	ba 00 00 00 00       	mov    $0x0,%edx
f011e7c5:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011e7cb:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e7d1:	29 d0                	sub    %edx,%eax
f011e7d3:	01 c3                	add    %eax,%ebx
f011e7d5:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011e7dc:	10 00 00 
f011e7df:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011e7e4:	0f b6 c0             	movzbl %al,%eax
f011e7e7:	c1 e0 04             	shl    $0x4,%eax
f011e7ea:	89 c2                	mov    %eax,%edx
f011e7ec:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011e7f2:	01 d0                	add    %edx,%eax
f011e7f4:	48                   	dec    %eax
f011e7f5:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011e7fb:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e801:	ba 00 00 00 00       	mov    $0x0,%edx
f011e806:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011e80c:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e812:	29 d0                	sub    %edx,%eax
f011e814:	01 d8                	add    %ebx,%eax
f011e816:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011e81b:	39 c1                	cmp    %eax,%ecx
f011e81d:	0f 85 54 02 00 00    	jne    f011ea77 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011e823:	8b 85 04 fc ff ff    	mov    -0x3fc(%ebp),%eax
f011e829:	89 c1                	mov    %eax,%ecx
f011e82b:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011e832:	10 00 00 
f011e835:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011e83b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e840:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011e846:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e84c:	ba 00 00 00 00       	mov    $0x0,%edx
f011e851:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011e857:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e85d:	29 d0                	sub    %edx,%eax
f011e85f:	89 c3                	mov    %eax,%ebx
f011e861:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011e868:	10 00 00 
f011e86b:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011e870:	0f b6 d0             	movzbl %al,%edx
f011e873:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011e879:	01 d0                	add    %edx,%eax
f011e87b:	48                   	dec    %eax
f011e87c:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011e882:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e888:	ba 00 00 00 00       	mov    $0x0,%edx
f011e88d:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011e893:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e899:	29 d0                	sub    %edx,%eax
f011e89b:	01 c3                	add    %eax,%ebx
f011e89d:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011e8a4:	10 00 00 
f011e8a7:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011e8ac:	0f b6 c0             	movzbl %al,%eax
f011e8af:	c1 e0 04             	shl    $0x4,%eax
f011e8b2:	89 c2                	mov    %eax,%edx
f011e8b4:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011e8ba:	01 d0                	add    %edx,%eax
f011e8bc:	48                   	dec    %eax
f011e8bd:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011e8c3:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e8c9:	ba 00 00 00 00       	mov    $0x0,%edx
f011e8ce:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011e8d4:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e8da:	29 d0                	sub    %edx,%eax
f011e8dc:	01 d8                	add    %ebx,%eax
f011e8de:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011e8e3:	39 c1                	cmp    %eax,%ecx
f011e8e5:	0f 85 8c 01 00 00    	jne    f011ea77 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011e8eb:	8b 85 7c fc ff ff    	mov    -0x384(%ebp),%eax
f011e8f1:	89 c1                	mov    %eax,%ecx
f011e8f3:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011e8fa:	10 00 00 
f011e8fd:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011e903:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e908:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011e90e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e914:	ba 00 00 00 00       	mov    $0x0,%edx
f011e919:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011e91f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e925:	29 d0                	sub    %edx,%eax
f011e927:	89 c3                	mov    %eax,%ebx
f011e929:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011e930:	10 00 00 
f011e933:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011e938:	0f b6 d0             	movzbl %al,%edx
f011e93b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011e941:	01 d0                	add    %edx,%eax
f011e943:	48                   	dec    %eax
f011e944:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011e94a:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e950:	ba 00 00 00 00       	mov    $0x0,%edx
f011e955:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011e95b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e961:	29 d0                	sub    %edx,%eax
f011e963:	01 c3                	add    %eax,%ebx
f011e965:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011e96c:	10 00 00 
f011e96f:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011e974:	0f b6 c0             	movzbl %al,%eax
f011e977:	c1 e0 04             	shl    $0x4,%eax
f011e97a:	89 c2                	mov    %eax,%edx
f011e97c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011e982:	01 d0                	add    %edx,%eax
f011e984:	48                   	dec    %eax
f011e985:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011e98b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e991:	ba 00 00 00 00       	mov    $0x0,%edx
f011e996:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011e99c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e9a2:	29 d0                	sub    %edx,%eax
f011e9a4:	01 d8                	add    %ebx,%eax
f011e9a6:	2d 00 c0 bf 03       	sub    $0x3bfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011e9ab:	39 c1                	cmp    %eax,%ecx
f011e9ad:	0f 85 c4 00 00 00    	jne    f011ea77 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
f011e9b3:	8b 85 f0 fc ff ff    	mov    -0x310(%ebp),%eax
f011e9b9:	89 c1                	mov    %eax,%ecx
f011e9bb:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011e9c2:	10 00 00 
f011e9c5:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011e9cb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e9d0:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011e9d6:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011e9dc:	ba 00 00 00 00       	mov    $0x0,%edx
f011e9e1:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011e9e7:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011e9ed:	29 d0                	sub    %edx,%eax
f011e9ef:	89 c3                	mov    %eax,%ebx
f011e9f1:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011e9f8:	10 00 00 
f011e9fb:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011ea00:	0f b6 d0             	movzbl %al,%edx
f011ea03:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011ea09:	01 d0                	add    %edx,%eax
f011ea0b:	48                   	dec    %eax
f011ea0c:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011ea12:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011ea18:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea1d:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011ea23:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011ea29:	29 d0                	sub    %edx,%eax
f011ea2b:	01 c3                	add    %eax,%ebx
f011ea2d:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011ea34:	10 00 00 
f011ea37:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011ea3c:	0f b6 c0             	movzbl %al,%eax
f011ea3f:	c1 e0 04             	shl    $0x4,%eax
f011ea42:	89 c2                	mov    %eax,%edx
f011ea44:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011ea4a:	01 d0                	add    %edx,%eax
f011ea4c:	48                   	dec    %eax
f011ea4d:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011ea53:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011ea59:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea5e:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011ea64:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011ea6a:	29 d0                	sub    %edx,%eax
f011ea6c:	01 d8                	add    %ebx,%eax
f011ea6e:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011ea73:	39 c1                	cmp    %eax,%ecx
f011ea75:	74 17                	je     f011ea8e <test_kmalloc_worstfit+0x613>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
		panic("Wrong allocation, Check worst fitting strategy is working correctly");
f011ea77:	83 ec 04             	sub    $0x4,%esp
f011ea7a:	68 30 b7 13 f0       	push   $0xf013b730
f011ea7f:	68 31 04 00 00       	push   $0x431
f011ea84:	68 5a b0 13 f0       	push   $0xf013b05a
f011ea89:	e8 77 17 fe ff       	call   f0100205 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ea8e:	e8 35 53 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ea93:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ea96:	74 17                	je     f011eaaf <test_kmalloc_worstfit+0x634>
f011ea98:	83 ec 04             	sub    $0x4,%esp
f011ea9b:	68 74 b0 13 f0       	push   $0xf013b074
f011eaa0:	68 33 04 00 00       	push   $0x433
f011eaa5:	68 5a b0 13 f0       	push   $0xf013b05a
f011eaaa:	e8 56 17 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE)/(PAGE_SIZE) ) panic("Wrong allocation");
f011eaaf:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011eab2:	e8 e6 e0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011eab7:	29 c3                	sub    %eax,%ebx
f011eab9:	89 d8                	mov    %ebx,%eax
f011eabb:	3d fb 9f 00 00       	cmp    $0x9ffb,%eax
f011eac0:	74 17                	je     f011ead9 <test_kmalloc_worstfit+0x65e>
f011eac2:	83 ec 04             	sub    $0x4,%esp
f011eac5:	68 17 b3 13 f0       	push   $0xf013b317
f011eaca:	68 34 04 00 00       	push   $0x434
f011eacf:	68 5a b0 13 f0       	push   $0xf013b05a
f011ead4:	e8 2c 17 fe ff       	call   f0100205 <_panic>

	//make memory holes
	freeFrames = sys_calculate_free_frames() ;
f011ead9:	e8 bf e0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011eade:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames() ;
f011eae1:	e8 e2 52 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011eae6:	89 45 ec             	mov    %eax,-0x14(%ebp)

	kfree(ptr_allocations[0]);		//Hole 1 = 2 M
f011eae9:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011eaef:	83 ec 0c             	sub    $0xc,%esp
f011eaf2:	50                   	push   %eax
f011eaf3:	e8 58 8e fe ff       	call   f0107950 <kfree>
f011eaf8:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		//Hole 2 = 4 M
f011eafb:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011eb01:	83 ec 0c             	sub    $0xc,%esp
f011eb04:	50                   	push   %eax
f011eb05:	e8 46 8e fe ff       	call   f0107950 <kfree>
f011eb0a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f011eb0d:	8b 85 c0 fb ff ff    	mov    -0x440(%ebp),%eax
f011eb13:	83 ec 0c             	sub    $0xc,%esp
f011eb16:	50                   	push   %eax
f011eb17:	e8 34 8e fe ff       	call   f0107950 <kfree>
f011eb1c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		//Hole 3 = 6 M
f011eb1f:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011eb25:	83 ec 0c             	sub    $0xc,%esp
f011eb28:	50                   	push   %eax
f011eb29:	e8 22 8e fe ff       	call   f0107950 <kfree>
f011eb2e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011eb31:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
f011eb37:	83 ec 0c             	sub    $0xc,%esp
f011eb3a:	50                   	push   %eax
f011eb3b:	e8 10 8e fe ff       	call   f0107950 <kfree>
f011eb40:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011eb43:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
f011eb49:	83 ec 0c             	sub    $0xc,%esp
f011eb4c:	50                   	push   %eax
f011eb4d:	e8 fe 8d fe ff       	call   f0107950 <kfree>
f011eb52:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[30]);		//Hole 4 = 10 M
f011eb55:	8b 85 2c fc ff ff    	mov    -0x3d4(%ebp),%eax
f011eb5b:	83 ec 0c             	sub    $0xc,%esp
f011eb5e:	50                   	push   %eax
f011eb5f:	e8 ec 8d fe ff       	call   f0107950 <kfree>
f011eb64:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[31]);
f011eb67:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f011eb6d:	83 ec 0c             	sub    $0xc,%esp
f011eb70:	50                   	push   %eax
f011eb71:	e8 da 8d fe ff       	call   f0107950 <kfree>
f011eb76:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[32]);
f011eb79:	8b 85 34 fc ff ff    	mov    -0x3cc(%ebp),%eax
f011eb7f:	83 ec 0c             	sub    $0xc,%esp
f011eb82:	50                   	push   %eax
f011eb83:	e8 c8 8d fe ff       	call   f0107950 <kfree>
f011eb88:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[33]);
f011eb8b:	8b 85 38 fc ff ff    	mov    -0x3c8(%ebp),%eax
f011eb91:	83 ec 0c             	sub    $0xc,%esp
f011eb94:	50                   	push   %eax
f011eb95:	e8 b6 8d fe ff       	call   f0107950 <kfree>
f011eb9a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[34]);
f011eb9d:	8b 85 3c fc ff ff    	mov    -0x3c4(%ebp),%eax
f011eba3:	83 ec 0c             	sub    $0xc,%esp
f011eba6:	50                   	push   %eax
f011eba7:	e8 a4 8d fe ff       	call   f0107950 <kfree>
f011ebac:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[70]); 	//Hole 5 = 8 M
f011ebaf:	8b 85 cc fc ff ff    	mov    -0x334(%ebp),%eax
f011ebb5:	83 ec 0c             	sub    $0xc,%esp
f011ebb8:	50                   	push   %eax
f011ebb9:	e8 92 8d fe ff       	call   f0107950 <kfree>
f011ebbe:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[71]);
f011ebc1:	8b 85 d0 fc ff ff    	mov    -0x330(%ebp),%eax
f011ebc7:	83 ec 0c             	sub    $0xc,%esp
f011ebca:	50                   	push   %eax
f011ebcb:	e8 80 8d fe ff       	call   f0107950 <kfree>
f011ebd0:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[72]);
f011ebd3:	8b 85 d4 fc ff ff    	mov    -0x32c(%ebp),%eax
f011ebd9:	83 ec 0c             	sub    $0xc,%esp
f011ebdc:	50                   	push   %eax
f011ebdd:	e8 6e 8d fe ff       	call   f0107950 <kfree>
f011ebe2:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[73]);
f011ebe5:	8b 85 d8 fc ff ff    	mov    -0x328(%ebp),%eax
f011ebeb:	83 ec 0c             	sub    $0xc,%esp
f011ebee:	50                   	push   %eax
f011ebef:	e8 5c 8d fe ff       	call   f0107950 <kfree>
f011ebf4:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ebf7:	e8 cc 51 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ebfc:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ebff:	74 17                	je     f011ec18 <test_kmalloc_worstfit+0x79d>
f011ec01:	83 ec 04             	sub    $0x4,%esp
f011ec04:	68 74 b0 13 f0       	push   $0xf013b074
f011ec09:	68 4a 04 00 00       	push   $0x44a
f011ec0e:	68 5a b0 13 f0       	push   $0xf013b05a
f011ec13:	e8 ed 15 fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((15*2*Mega))/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011ec18:	e8 80 df fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011ec1d:	89 c2                	mov    %eax,%edx
f011ec1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011ec22:	29 c2                	sub    %eax,%edx
f011ec24:	89 d0                	mov    %edx,%eax
f011ec26:	3d 00 1e 00 00       	cmp    $0x1e00,%eax
f011ec2b:	74 17                	je     f011ec44 <test_kmalloc_worstfit+0x7c9>
f011ec2d:	83 ec 04             	sub    $0x4,%esp
f011ec30:	68 28 b3 13 f0       	push   $0xf013b328
f011ec35:	68 4b 04 00 00       	push   $0x44b
f011ec3a:	68 5a b0 13 f0       	push   $0xf013b05a
f011ec3f:	e8 c1 15 fe ff       	call   f0100205 <_panic>

	// Test worst fit
	freeFrames = sys_calculate_free_frames() ;
f011ec44:	e8 54 df fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011ec49:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ec4c:	e8 77 51 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ec51:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* tempAddress = kmalloc(Mega);		//Use Hole 4 -> Hole 4 = 9 M
f011ec54:	83 ec 0c             	sub    $0xc,%esp
f011ec57:	68 00 00 10 00       	push   $0x100000
f011ec5c:	e8 24 8c fe ff       	call   f0107885 <kmalloc>
f011ec61:	83 c4 10             	add    $0x10,%esp
f011ec64:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03C00000)
f011ec6a:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011ec71:	10 00 00 
f011ec74:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011ec7a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ec7f:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011ec85:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011ec8b:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec90:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011ec96:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011ec9c:	29 d0                	sub    %edx,%eax
f011ec9e:	89 c1                	mov    %eax,%ecx
f011eca0:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011eca7:	10 00 00 
f011ecaa:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011ecaf:	0f b6 d0             	movzbl %al,%edx
f011ecb2:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011ecb8:	01 d0                	add    %edx,%eax
f011ecba:	48                   	dec    %eax
f011ecbb:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011ecc1:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011ecc7:	ba 00 00 00 00       	mov    $0x0,%edx
f011eccc:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011ecd2:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011ecd8:	29 d0                	sub    %edx,%eax
f011ecda:	01 c1                	add    %eax,%ecx
f011ecdc:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011ece3:	10 00 00 
f011ece6:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011eceb:	0f b6 c0             	movzbl %al,%eax
f011ecee:	c1 e0 04             	shl    $0x4,%eax
f011ecf1:	89 c2                	mov    %eax,%edx
f011ecf3:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011ecf9:	01 d0                	add    %edx,%eax
f011ecfb:	48                   	dec    %eax
f011ecfc:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011ed02:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011ed08:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed0d:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011ed13:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011ed19:	29 d0                	sub    %edx,%eax
f011ed1b:	01 c8                	add    %ecx,%eax
f011ed1d:	8d 90 00 40 c0 f9    	lea    -0x63fc000(%eax),%edx
f011ed23:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ed29:	39 c2                	cmp    %eax,%edx
f011ed2b:	74 17                	je     f011ed44 <test_kmalloc_worstfit+0x8c9>
		panic("Worst Fit not working correctly");
f011ed2d:	83 ec 04             	sub    $0x4,%esp
f011ed30:	68 74 b7 13 f0       	push   $0xf013b774
f011ed35:	68 52 04 00 00       	push   $0x452
f011ed3a:	68 5a b0 13 f0       	push   $0xf013b05a
f011ed3f:	e8 c1 14 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ed44:	e8 7f 50 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ed49:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ed4c:	74 17                	je     f011ed65 <test_kmalloc_worstfit+0x8ea>
f011ed4e:	83 ec 04             	sub    $0x4,%esp
f011ed51:	68 74 b0 13 f0       	push   $0xf013b074
f011ed56:	68 53 04 00 00       	push   $0x453
f011ed5b:	68 5a b0 13 f0       	push   $0xf013b05a
f011ed60:	e8 a0 14 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  1*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ed65:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ed68:	e8 30 de fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011ed6d:	29 c3                	sub    %eax,%ebx
f011ed6f:	89 d8                	mov    %ebx,%eax
f011ed71:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ed76:	74 17                	je     f011ed8f <test_kmalloc_worstfit+0x914>
f011ed78:	83 ec 04             	sub    $0x4,%esp
f011ed7b:	68 92 b5 13 f0       	push   $0xf013b592
f011ed80:	68 54 04 00 00       	push   $0x454
f011ed85:	68 5a b0 13 f0       	push   $0xf013b05a
f011ed8a:	e8 76 14 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ed8f:	ff 45 e8             	incl   -0x18(%ebp)
f011ed92:	83 ec 08             	sub    $0x8,%esp
f011ed95:	ff 75 e8             	pushl  -0x18(%ebp)
f011ed98:	68 94 b7 13 f0       	push   $0xf013b794
f011ed9d:	e8 6c 1f fe ff       	call   f0100d0e <cprintf>
f011eda2:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011eda5:	e8 f3 dd fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011edaa:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011edad:	e8 16 50 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011edb2:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4 * Mega);			//Use Hole 4 -> Hole 4 = 5 M
f011edb5:	83 ec 0c             	sub    $0xc,%esp
f011edb8:	68 00 00 40 00       	push   $0x400000
f011edbd:	e8 c3 8a fe ff       	call   f0107885 <kmalloc>
f011edc2:	83 c4 10             	add    $0x10,%esp
f011edc5:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03D00000)
f011edcb:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011edd2:	10 00 00 
f011edd5:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011eddb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ede0:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011ede6:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011edec:	ba 00 00 00 00       	mov    $0x0,%edx
f011edf1:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011edf7:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011edfd:	29 d0                	sub    %edx,%eax
f011edff:	89 c1                	mov    %eax,%ecx
f011ee01:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011ee08:	10 00 00 
f011ee0b:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011ee10:	0f b6 d0             	movzbl %al,%edx
f011ee13:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011ee19:	01 d0                	add    %edx,%eax
f011ee1b:	48                   	dec    %eax
f011ee1c:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011ee22:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011ee28:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee2d:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011ee33:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011ee39:	29 d0                	sub    %edx,%eax
f011ee3b:	01 c1                	add    %eax,%ecx
f011ee3d:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f011ee44:	10 00 00 
f011ee47:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011ee4c:	0f b6 c0             	movzbl %al,%eax
f011ee4f:	c1 e0 04             	shl    $0x4,%eax
f011ee52:	89 c2                	mov    %eax,%edx
f011ee54:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011ee5a:	01 d0                	add    %edx,%eax
f011ee5c:	48                   	dec    %eax
f011ee5d:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f011ee63:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011ee69:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee6e:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f011ee74:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011ee7a:	29 d0                	sub    %edx,%eax
f011ee7c:	01 c8                	add    %ecx,%eax
f011ee7e:	8d 90 00 40 d0 f9    	lea    -0x62fc000(%eax),%edx
f011ee84:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ee8a:	39 c2                	cmp    %eax,%edx
f011ee8c:	74 17                	je     f011eea5 <test_kmalloc_worstfit+0xa2a>
		panic("Worst Fit not working correctly");
f011ee8e:	83 ec 04             	sub    $0x4,%esp
f011ee91:	68 74 b7 13 f0       	push   $0xf013b774
f011ee96:	68 5b 04 00 00       	push   $0x45b
f011ee9b:	68 5a b0 13 f0       	push   $0xf013b05a
f011eea0:	e8 60 13 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011eea5:	e8 1e 4f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011eeaa:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011eead:	74 17                	je     f011eec6 <test_kmalloc_worstfit+0xa4b>
f011eeaf:	83 ec 04             	sub    $0x4,%esp
f011eeb2:	68 74 b0 13 f0       	push   $0xf013b074
f011eeb7:	68 5c 04 00 00       	push   $0x45c
f011eebc:	68 5a b0 13 f0       	push   $0xf013b05a
f011eec1:	e8 3f 13 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011eec6:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011eec9:	e8 cf dc fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011eece:	29 c3                	sub    %eax,%ebx
f011eed0:	89 d8                	mov    %ebx,%eax
f011eed2:	3d 00 04 00 00       	cmp    $0x400,%eax
f011eed7:	74 17                	je     f011eef0 <test_kmalloc_worstfit+0xa75>
f011eed9:	83 ec 04             	sub    $0x4,%esp
f011eedc:	68 92 b5 13 f0       	push   $0xf013b592
f011eee1:	68 5d 04 00 00       	push   $0x45d
f011eee6:	68 5a b0 13 f0       	push   $0xf013b05a
f011eeeb:	e8 15 13 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011eef0:	ff 45 e8             	incl   -0x18(%ebp)
f011eef3:	83 ec 08             	sub    $0x8,%esp
f011eef6:	ff 75 e8             	pushl  -0x18(%ebp)
f011eef9:	68 94 b7 13 f0       	push   $0xf013b794
f011eefe:	e8 0b 1e fe ff       	call   f0100d0e <cprintf>
f011ef03:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ef06:	e8 92 dc fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011ef0b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ef0e:	e8 b5 4e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ef13:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(6*Mega); 			   //Use Hole 5 -> Hole 5 = 2 M
f011ef16:	83 ec 0c             	sub    $0xc,%esp
f011ef19:	68 00 00 60 00       	push   $0x600000
f011ef1e:	e8 62 89 fe ff       	call   f0107885 <kmalloc>
f011ef23:	83 c4 10             	add    $0x10,%esp
f011ef26:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x08C00000)
f011ef2c:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f011ef33:	10 00 00 
f011ef36:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011ef3c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ef41:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011ef47:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011ef4d:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef52:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011ef58:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011ef5e:	29 d0                	sub    %edx,%eax
f011ef60:	89 c1                	mov    %eax,%ecx
f011ef62:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011ef69:	10 00 00 
f011ef6c:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011ef71:	0f b6 d0             	movzbl %al,%edx
f011ef74:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011ef7a:	01 d0                	add    %edx,%eax
f011ef7c:	48                   	dec    %eax
f011ef7d:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011ef83:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011ef89:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef8e:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011ef94:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011ef9a:	29 d0                	sub    %edx,%eax
f011ef9c:	01 c1                	add    %eax,%ecx
f011ef9e:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f011efa5:	10 00 00 
f011efa8:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011efad:	0f b6 c0             	movzbl %al,%eax
f011efb0:	c1 e0 04             	shl    $0x4,%eax
f011efb3:	89 c2                	mov    %eax,%edx
f011efb5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011efbb:	01 d0                	add    %edx,%eax
f011efbd:	48                   	dec    %eax
f011efbe:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f011efc4:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011efca:	ba 00 00 00 00       	mov    $0x0,%edx
f011efcf:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f011efd5:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011efdb:	29 d0                	sub    %edx,%eax
f011efdd:	01 c8                	add    %ecx,%eax
f011efdf:	8d 90 00 40 c0 fe    	lea    -0x13fc000(%eax),%edx
f011efe5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011efeb:	39 c2                	cmp    %eax,%edx
f011efed:	74 17                	je     f011f006 <test_kmalloc_worstfit+0xb8b>
		panic("Worst Fit not working correctly");
f011efef:	83 ec 04             	sub    $0x4,%esp
f011eff2:	68 74 b7 13 f0       	push   $0xf013b774
f011eff7:	68 64 04 00 00       	push   $0x464
f011effc:	68 5a b0 13 f0       	push   $0xf013b05a
f011f001:	e8 ff 11 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f006:	e8 bd 4d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f00b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f00e:	74 17                	je     f011f027 <test_kmalloc_worstfit+0xbac>
f011f010:	83 ec 04             	sub    $0x4,%esp
f011f013:	68 74 b0 13 f0       	push   $0xf013b074
f011f018:	68 65 04 00 00       	push   $0x465
f011f01d:	68 5a b0 13 f0       	push   $0xf013b05a
f011f022:	e8 de 11 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  6*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f027:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f02a:	e8 6e db fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f02f:	29 c3                	sub    %eax,%ebx
f011f031:	89 d8                	mov    %ebx,%eax
f011f033:	3d 00 06 00 00       	cmp    $0x600,%eax
f011f038:	74 17                	je     f011f051 <test_kmalloc_worstfit+0xbd6>
f011f03a:	83 ec 04             	sub    $0x4,%esp
f011f03d:	68 92 b5 13 f0       	push   $0xf013b592
f011f042:	68 66 04 00 00       	push   $0x466
f011f047:	68 5a b0 13 f0       	push   $0xf013b05a
f011f04c:	e8 b4 11 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f051:	ff 45 e8             	incl   -0x18(%ebp)
f011f054:	83 ec 08             	sub    $0x8,%esp
f011f057:	ff 75 e8             	pushl  -0x18(%ebp)
f011f05a:	68 94 b7 13 f0       	push   $0xf013b794
f011f05f:	e8 aa 1c fe ff       	call   f0100d0e <cprintf>
f011f064:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f067:	e8 31 db fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f06c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f06f:	e8 54 4d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f074:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(5*Mega); 			   //Use Hole 3 -> Hole 3 = 1 M
f011f077:	83 ec 0c             	sub    $0xc,%esp
f011f07a:	68 00 00 50 00       	push   $0x500000
f011f07f:	e8 01 88 fe ff       	call   f0107885 <kmalloc>
f011f084:	83 c4 10             	add    $0x10,%esp
f011f087:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f011f08d:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f011f094:	10 00 00 
f011f097:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011f09d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f0a2:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f011f0a8:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011f0ae:	ba 00 00 00 00       	mov    $0x0,%edx
f011f0b3:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f011f0b9:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011f0bf:	29 d0                	sub    %edx,%eax
f011f0c1:	89 c1                	mov    %eax,%ecx
f011f0c3:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f011f0ca:	10 00 00 
f011f0cd:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011f0d2:	0f b6 d0             	movzbl %al,%edx
f011f0d5:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011f0db:	01 d0                	add    %edx,%eax
f011f0dd:	48                   	dec    %eax
f011f0de:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f011f0e4:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011f0ea:	ba 00 00 00 00       	mov    $0x0,%edx
f011f0ef:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f011f0f5:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011f0fb:	29 d0                	sub    %edx,%eax
f011f0fd:	01 c1                	add    %eax,%ecx
f011f0ff:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f011f106:	10 00 00 
f011f109:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011f10e:	0f b6 c0             	movzbl %al,%eax
f011f111:	c1 e0 04             	shl    $0x4,%eax
f011f114:	89 c2                	mov    %eax,%edx
f011f116:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011f11c:	01 d0                	add    %edx,%eax
f011f11e:	48                   	dec    %eax
f011f11f:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f011f125:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011f12b:	ba 00 00 00 00       	mov    $0x0,%edx
f011f130:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f011f136:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011f13c:	29 d0                	sub    %edx,%eax
f011f13e:	01 c8                	add    %ecx,%eax
f011f140:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f011f146:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f14c:	39 c2                	cmp    %eax,%edx
f011f14e:	74 17                	je     f011f167 <test_kmalloc_worstfit+0xcec>
		panic("Worst Fit not working correctly");
f011f150:	83 ec 04             	sub    $0x4,%esp
f011f153:	68 74 b7 13 f0       	push   $0xf013b774
f011f158:	68 6d 04 00 00       	push   $0x46d
f011f15d:	68 5a b0 13 f0       	push   $0xf013b05a
f011f162:	e8 9e 10 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f167:	e8 5c 4c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f16c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f16f:	74 17                	je     f011f188 <test_kmalloc_worstfit+0xd0d>
f011f171:	83 ec 04             	sub    $0x4,%esp
f011f174:	68 74 b0 13 f0       	push   $0xf013b074
f011f179:	68 6e 04 00 00       	push   $0x46e
f011f17e:	68 5a b0 13 f0       	push   $0xf013b05a
f011f183:	e8 7d 10 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  5*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f188:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f18b:	e8 0d da fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f190:	29 c3                	sub    %eax,%ebx
f011f192:	89 d8                	mov    %ebx,%eax
f011f194:	3d 00 05 00 00       	cmp    $0x500,%eax
f011f199:	74 17                	je     f011f1b2 <test_kmalloc_worstfit+0xd37>
f011f19b:	83 ec 04             	sub    $0x4,%esp
f011f19e:	68 92 b5 13 f0       	push   $0xf013b592
f011f1a3:	68 6f 04 00 00       	push   $0x46f
f011f1a8:	68 5a b0 13 f0       	push   $0xf013b05a
f011f1ad:	e8 53 10 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f1b2:	ff 45 e8             	incl   -0x18(%ebp)
f011f1b5:	83 ec 08             	sub    $0x8,%esp
f011f1b8:	ff 75 e8             	pushl  -0x18(%ebp)
f011f1bb:	68 94 b7 13 f0       	push   $0xf013b794
f011f1c0:	e8 49 1b fe ff       	call   f0100d0e <cprintf>
f011f1c5:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f1c8:	e8 d0 d9 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f1cd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f1d0:	e8 f3 4b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f1d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f011f1d8:	83 ec 0c             	sub    $0xc,%esp
f011f1db:	68 00 00 40 00       	push   $0x400000
f011f1e0:	e8 a0 86 fe ff       	call   f0107885 <kmalloc>
f011f1e5:	83 c4 10             	add    $0x10,%esp
f011f1e8:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x04100000)
f011f1ee:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f011f1f5:	10 00 00 
f011f1f8:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011f1fe:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f203:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f011f209:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011f20f:	ba 00 00 00 00       	mov    $0x0,%edx
f011f214:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f011f21a:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011f220:	29 d0                	sub    %edx,%eax
f011f222:	89 c1                	mov    %eax,%ecx
f011f224:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f011f22b:	10 00 00 
f011f22e:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011f233:	0f b6 d0             	movzbl %al,%edx
f011f236:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011f23c:	01 d0                	add    %edx,%eax
f011f23e:	48                   	dec    %eax
f011f23f:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f011f245:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011f24b:	ba 00 00 00 00       	mov    $0x0,%edx
f011f250:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f011f256:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011f25c:	29 d0                	sub    %edx,%eax
f011f25e:	01 c1                	add    %eax,%ecx
f011f260:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f011f267:	10 00 00 
f011f26a:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011f26f:	0f b6 c0             	movzbl %al,%eax
f011f272:	c1 e0 04             	shl    $0x4,%eax
f011f275:	89 c2                	mov    %eax,%edx
f011f277:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011f27d:	01 d0                	add    %edx,%eax
f011f27f:	48                   	dec    %eax
f011f280:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f011f286:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011f28c:	ba 00 00 00 00       	mov    $0x0,%edx
f011f291:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f011f297:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011f29d:	29 d0                	sub    %edx,%eax
f011f29f:	01 c8                	add    %ecx,%eax
f011f2a1:	8d 90 00 40 10 fa    	lea    -0x5efc000(%eax),%edx
f011f2a7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f2ad:	39 c2                	cmp    %eax,%edx
f011f2af:	74 17                	je     f011f2c8 <test_kmalloc_worstfit+0xe4d>
		panic("Worst Fit not working correctly");
f011f2b1:	83 ec 04             	sub    $0x4,%esp
f011f2b4:	68 74 b7 13 f0       	push   $0xf013b774
f011f2b9:	68 76 04 00 00       	push   $0x476
f011f2be:	68 5a b0 13 f0       	push   $0xf013b05a
f011f2c3:	e8 3d 0f fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f2c8:	e8 fb 4a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f2cd:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f2d0:	74 17                	je     f011f2e9 <test_kmalloc_worstfit+0xe6e>
f011f2d2:	83 ec 04             	sub    $0x4,%esp
f011f2d5:	68 74 b0 13 f0       	push   $0xf013b074
f011f2da:	68 77 04 00 00       	push   $0x477
f011f2df:	68 5a b0 13 f0       	push   $0xf013b05a
f011f2e4:	e8 1c 0f fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f2e9:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f2ec:	e8 ac d8 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f2f1:	29 c3                	sub    %eax,%ebx
f011f2f3:	89 d8                	mov    %ebx,%eax
f011f2f5:	3d 00 04 00 00       	cmp    $0x400,%eax
f011f2fa:	74 17                	je     f011f313 <test_kmalloc_worstfit+0xe98>
f011f2fc:	83 ec 04             	sub    $0x4,%esp
f011f2ff:	68 92 b5 13 f0       	push   $0xf013b592
f011f304:	68 78 04 00 00       	push   $0x478
f011f309:	68 5a b0 13 f0       	push   $0xf013b05a
f011f30e:	e8 f2 0e fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f313:	ff 45 e8             	incl   -0x18(%ebp)
f011f316:	83 ec 08             	sub    $0x8,%esp
f011f319:	ff 75 e8             	pushl  -0x18(%ebp)
f011f31c:	68 94 b7 13 f0       	push   $0xf013b794
f011f321:	e8 e8 19 fe ff       	call   f0100d0e <cprintf>
f011f326:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f329:	e8 6f d8 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f32e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f331:	e8 92 4a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f336:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2 * Mega); 			// Use Hole 2 -> Hole 2 = 2 M
f011f339:	83 ec 0c             	sub    $0xc,%esp
f011f33c:	68 00 00 20 00       	push   $0x200000
f011f341:	e8 3f 85 fe ff       	call   f0107885 <kmalloc>
f011f346:	83 c4 10             	add    $0x10,%esp
f011f349:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011f34f:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f011f356:	10 00 00 
f011f359:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011f35f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f364:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f011f36a:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011f370:	ba 00 00 00 00       	mov    $0x0,%edx
f011f375:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f011f37b:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011f381:	29 d0                	sub    %edx,%eax
f011f383:	89 c1                	mov    %eax,%ecx
f011f385:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f011f38c:	10 00 00 
f011f38f:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011f394:	0f b6 d0             	movzbl %al,%edx
f011f397:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011f39d:	01 d0                	add    %edx,%eax
f011f39f:	48                   	dec    %eax
f011f3a0:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f011f3a6:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011f3ac:	ba 00 00 00 00       	mov    $0x0,%edx
f011f3b1:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f011f3b7:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011f3bd:	29 d0                	sub    %edx,%eax
f011f3bf:	01 c1                	add    %eax,%ecx
f011f3c1:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f011f3c8:	10 00 00 
f011f3cb:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011f3d0:	0f b6 c0             	movzbl %al,%eax
f011f3d3:	c1 e0 04             	shl    $0x4,%eax
f011f3d6:	89 c2                	mov    %eax,%edx
f011f3d8:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011f3de:	01 d0                	add    %edx,%eax
f011f3e0:	48                   	dec    %eax
f011f3e1:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f011f3e7:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011f3ed:	ba 00 00 00 00       	mov    $0x0,%edx
f011f3f2:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f011f3f8:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011f3fe:	29 d0                	sub    %edx,%eax
f011f400:	01 c8                	add    %ecx,%eax
f011f402:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011f408:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f40e:	39 c2                	cmp    %eax,%edx
f011f410:	74 17                	je     f011f429 <test_kmalloc_worstfit+0xfae>
		panic("Worst Fit not working correctly");
f011f412:	83 ec 04             	sub    $0x4,%esp
f011f415:	68 74 b7 13 f0       	push   $0xf013b774
f011f41a:	68 7f 04 00 00       	push   $0x47f
f011f41f:	68 5a b0 13 f0       	push   $0xf013b05a
f011f424:	e8 dc 0d fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f429:	e8 9a 49 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f42e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f431:	74 17                	je     f011f44a <test_kmalloc_worstfit+0xfcf>
f011f433:	83 ec 04             	sub    $0x4,%esp
f011f436:	68 74 b0 13 f0       	push   $0xf013b074
f011f43b:	68 80 04 00 00       	push   $0x480
f011f440:	68 5a b0 13 f0       	push   $0xf013b05a
f011f445:	e8 bb 0d fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  2*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f44a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f44d:	e8 4b d7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f452:	29 c3                	sub    %eax,%ebx
f011f454:	89 d8                	mov    %ebx,%eax
f011f456:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f45b:	74 17                	je     f011f474 <test_kmalloc_worstfit+0xff9>
f011f45d:	83 ec 04             	sub    $0x4,%esp
f011f460:	68 92 b5 13 f0       	push   $0xf013b592
f011f465:	68 81 04 00 00       	push   $0x481
f011f46a:	68 5a b0 13 f0       	push   $0xf013b05a
f011f46f:	e8 91 0d fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f474:	ff 45 e8             	incl   -0x18(%ebp)
f011f477:	83 ec 08             	sub    $0x8,%esp
f011f47a:	ff 75 e8             	pushl  -0x18(%ebp)
f011f47d:	68 94 b7 13 f0       	push   $0xf013b794
f011f482:	e8 87 18 fe ff       	call   f0100d0e <cprintf>
f011f487:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f48a:	e8 0e d7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f48f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f492:	e8 31 49 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f497:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(1*Mega + 512*kilo);    // Use Hole 1 -> Hole 1 = 0.5 M
f011f49a:	83 ec 0c             	sub    $0xc,%esp
f011f49d:	68 00 00 18 00       	push   $0x180000
f011f4a2:	e8 de 83 fe ff       	call   f0107885 <kmalloc>
f011f4a7:	83 c4 10             	add    $0x10,%esp
f011f4aa:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f011f4b0:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f011f4b7:	10 00 00 
f011f4ba:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011f4c0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f4c5:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f011f4cb:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011f4d1:	ba 00 00 00 00       	mov    $0x0,%edx
f011f4d6:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f011f4dc:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011f4e2:	29 d0                	sub    %edx,%eax
f011f4e4:	89 c1                	mov    %eax,%ecx
f011f4e6:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f011f4ed:	10 00 00 
f011f4f0:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011f4f5:	0f b6 d0             	movzbl %al,%edx
f011f4f8:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011f4fe:	01 d0                	add    %edx,%eax
f011f500:	48                   	dec    %eax
f011f501:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f011f507:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011f50d:	ba 00 00 00 00       	mov    $0x0,%edx
f011f512:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f011f518:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011f51e:	29 d0                	sub    %edx,%eax
f011f520:	01 c1                	add    %eax,%ecx
f011f522:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f011f529:	10 00 00 
f011f52c:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011f531:	0f b6 c0             	movzbl %al,%eax
f011f534:	c1 e0 04             	shl    $0x4,%eax
f011f537:	89 c2                	mov    %eax,%edx
f011f539:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011f53f:	01 d0                	add    %edx,%eax
f011f541:	48                   	dec    %eax
f011f542:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f011f548:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011f54e:	ba 00 00 00 00       	mov    $0x0,%edx
f011f553:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f011f559:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011f55f:	29 d0                	sub    %edx,%eax
f011f561:	01 c8                	add    %ecx,%eax
f011f563:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f011f569:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f56f:	39 c2                	cmp    %eax,%edx
f011f571:	74 17                	je     f011f58a <test_kmalloc_worstfit+0x110f>
		panic("Worst Fit not working correctly");
f011f573:	83 ec 04             	sub    $0x4,%esp
f011f576:	68 74 b7 13 f0       	push   $0xf013b774
f011f57b:	68 88 04 00 00       	push   $0x488
f011f580:	68 5a b0 13 f0       	push   $0xf013b05a
f011f585:	e8 7b 0c fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f58a:	e8 39 48 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f58f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f592:	74 17                	je     f011f5ab <test_kmalloc_worstfit+0x1130>
f011f594:	83 ec 04             	sub    $0x4,%esp
f011f597:	68 74 b0 13 f0       	push   $0xf013b074
f011f59c:	68 89 04 00 00       	push   $0x489
f011f5a1:	68 5a b0 13 f0       	push   $0xf013b05a
f011f5a6:	e8 5a 0c fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (1*Mega + 512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f5ab:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f5ae:	e8 ea d5 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f5b3:	29 c3                	sub    %eax,%ebx
f011f5b5:	89 d8                	mov    %ebx,%eax
f011f5b7:	3d 80 01 00 00       	cmp    $0x180,%eax
f011f5bc:	74 17                	je     f011f5d5 <test_kmalloc_worstfit+0x115a>
f011f5be:	83 ec 04             	sub    $0x4,%esp
f011f5c1:	68 92 b5 13 f0       	push   $0xf013b592
f011f5c6:	68 8a 04 00 00       	push   $0x48a
f011f5cb:	68 5a b0 13 f0       	push   $0xf013b05a
f011f5d0:	e8 30 0c fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f5d5:	ff 45 e8             	incl   -0x18(%ebp)
f011f5d8:	83 ec 08             	sub    $0x8,%esp
f011f5db:	ff 75 e8             	pushl  -0x18(%ebp)
f011f5de:	68 94 b7 13 f0       	push   $0xf013b794
f011f5e3:	e8 26 17 fe ff       	call   f0100d0e <cprintf>
f011f5e8:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f5eb:	e8 ad d5 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f5f0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f5f3:	e8 d0 47 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f5f8:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 2 -> Hole 2 = 1.5 M
f011f5fb:	83 ec 0c             	sub    $0xc,%esp
f011f5fe:	68 00 00 08 00       	push   $0x80000
f011f603:	e8 7d 82 fe ff       	call   f0107885 <kmalloc>
f011f608:	83 c4 10             	add    $0x10,%esp
f011f60b:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00600000)
f011f611:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f011f618:	10 00 00 
f011f61b:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011f621:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f626:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f011f62c:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011f632:	ba 00 00 00 00       	mov    $0x0,%edx
f011f637:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f011f63d:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011f643:	29 d0                	sub    %edx,%eax
f011f645:	89 c1                	mov    %eax,%ecx
f011f647:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f011f64e:	10 00 00 
f011f651:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011f656:	0f b6 d0             	movzbl %al,%edx
f011f659:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011f65f:	01 d0                	add    %edx,%eax
f011f661:	48                   	dec    %eax
f011f662:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f011f668:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011f66e:	ba 00 00 00 00       	mov    $0x0,%edx
f011f673:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f011f679:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011f67f:	29 d0                	sub    %edx,%eax
f011f681:	01 c1                	add    %eax,%ecx
f011f683:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f011f68a:	10 00 00 
f011f68d:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011f692:	0f b6 c0             	movzbl %al,%eax
f011f695:	c1 e0 04             	shl    $0x4,%eax
f011f698:	89 c2                	mov    %eax,%edx
f011f69a:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011f6a0:	01 d0                	add    %edx,%eax
f011f6a2:	48                   	dec    %eax
f011f6a3:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f011f6a9:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011f6af:	ba 00 00 00 00       	mov    $0x0,%edx
f011f6b4:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f011f6ba:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011f6c0:	29 d0                	sub    %edx,%eax
f011f6c2:	01 c8                	add    %ecx,%eax
f011f6c4:	8d 90 00 40 60 f6    	lea    -0x99fc000(%eax),%edx
f011f6ca:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f6d0:	39 c2                	cmp    %eax,%edx
f011f6d2:	74 17                	je     f011f6eb <test_kmalloc_worstfit+0x1270>
		panic("Worst Fit not working correctly");
f011f6d4:	83 ec 04             	sub    $0x4,%esp
f011f6d7:	68 74 b7 13 f0       	push   $0xf013b774
f011f6dc:	68 91 04 00 00       	push   $0x491
f011f6e1:	68 5a b0 13 f0       	push   $0xf013b05a
f011f6e6:	e8 1a 0b fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f6eb:	e8 d8 46 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f6f0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f6f3:	74 17                	je     f011f70c <test_kmalloc_worstfit+0x1291>
f011f6f5:	83 ec 04             	sub    $0x4,%esp
f011f6f8:	68 74 b0 13 f0       	push   $0xf013b074
f011f6fd:	68 92 04 00 00       	push   $0x492
f011f702:	68 5a b0 13 f0       	push   $0xf013b05a
f011f707:	e8 f9 0a fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f70c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f70f:	e8 89 d4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f714:	29 c3                	sub    %eax,%ebx
f011f716:	89 d8                	mov    %ebx,%eax
f011f718:	3d 80 00 00 00       	cmp    $0x80,%eax
f011f71d:	74 17                	je     f011f736 <test_kmalloc_worstfit+0x12bb>
f011f71f:	83 ec 04             	sub    $0x4,%esp
f011f722:	68 92 b5 13 f0       	push   $0xf013b592
f011f727:	68 93 04 00 00       	push   $0x493
f011f72c:	68 5a b0 13 f0       	push   $0xf013b05a
f011f731:	e8 cf 0a fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f736:	ff 45 e8             	incl   -0x18(%ebp)
f011f739:	83 ec 08             	sub    $0x8,%esp
f011f73c:	ff 75 e8             	pushl  -0x18(%ebp)
f011f73f:	68 94 b7 13 f0       	push   $0xf013b794
f011f744:	e8 c5 15 fe ff       	call   f0100d0e <cprintf>
f011f749:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f74c:	e8 4c d4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f751:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f754:	e8 6f 46 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f759:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use Hole 5 -> Hole 5 = 2 M - K
f011f75c:	83 ec 0c             	sub    $0xc,%esp
f011f75f:	68 00 04 00 00       	push   $0x400
f011f764:	e8 1c 81 fe ff       	call   f0107885 <kmalloc>
f011f769:	83 c4 10             	add    $0x10,%esp
f011f76c:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09200000)
f011f772:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f011f779:	10 00 00 
f011f77c:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011f782:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f787:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f011f78d:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011f793:	ba 00 00 00 00       	mov    $0x0,%edx
f011f798:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f011f79e:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011f7a4:	29 d0                	sub    %edx,%eax
f011f7a6:	89 c1                	mov    %eax,%ecx
f011f7a8:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f011f7af:	10 00 00 
f011f7b2:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011f7b7:	0f b6 d0             	movzbl %al,%edx
f011f7ba:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011f7c0:	01 d0                	add    %edx,%eax
f011f7c2:	48                   	dec    %eax
f011f7c3:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f011f7c9:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011f7cf:	ba 00 00 00 00       	mov    $0x0,%edx
f011f7d4:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f011f7da:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011f7e0:	29 d0                	sub    %edx,%eax
f011f7e2:	01 c1                	add    %eax,%ecx
f011f7e4:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f011f7eb:	10 00 00 
f011f7ee:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011f7f3:	0f b6 c0             	movzbl %al,%eax
f011f7f6:	c1 e0 04             	shl    $0x4,%eax
f011f7f9:	89 c2                	mov    %eax,%edx
f011f7fb:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011f801:	01 d0                	add    %edx,%eax
f011f803:	48                   	dec    %eax
f011f804:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f011f80a:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011f810:	ba 00 00 00 00       	mov    $0x0,%edx
f011f815:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f011f81b:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011f821:	29 d0                	sub    %edx,%eax
f011f823:	01 c8                	add    %ecx,%eax
f011f825:	8d 90 00 40 20 ff    	lea    -0xdfc000(%eax),%edx
f011f82b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f831:	39 c2                	cmp    %eax,%edx
f011f833:	74 17                	je     f011f84c <test_kmalloc_worstfit+0x13d1>
		panic("Worst Fit not working correctly");
f011f835:	83 ec 04             	sub    $0x4,%esp
f011f838:	68 74 b7 13 f0       	push   $0xf013b774
f011f83d:	68 9a 04 00 00       	push   $0x49a
f011f842:	68 5a b0 13 f0       	push   $0xf013b05a
f011f847:	e8 b9 09 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f84c:	e8 77 45 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f851:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f854:	74 17                	je     f011f86d <test_kmalloc_worstfit+0x13f2>
f011f856:	83 ec 04             	sub    $0x4,%esp
f011f859:	68 74 b0 13 f0       	push   $0xf013b074
f011f85e:	68 9b 04 00 00       	push   $0x49b
f011f863:	68 5a b0 13 f0       	push   $0xf013b05a
f011f868:	e8 98 09 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f86d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f870:	e8 28 d3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f875:	29 c3                	sub    %eax,%ebx
f011f877:	89 d8                	mov    %ebx,%eax
f011f879:	83 f8 01             	cmp    $0x1,%eax
f011f87c:	74 17                	je     f011f895 <test_kmalloc_worstfit+0x141a>
f011f87e:	83 ec 04             	sub    $0x4,%esp
f011f881:	68 92 b5 13 f0       	push   $0xf013b592
f011f886:	68 9c 04 00 00       	push   $0x49c
f011f88b:	68 5a b0 13 f0       	push   $0xf013b05a
f011f890:	e8 70 09 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f895:	ff 45 e8             	incl   -0x18(%ebp)
f011f898:	83 ec 08             	sub    $0x8,%esp
f011f89b:	ff 75 e8             	pushl  -0x18(%ebp)
f011f89e:	68 94 b7 13 f0       	push   $0xf013b794
f011f8a3:	e8 66 14 fe ff       	call   f0100d0e <cprintf>
f011f8a8:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f8ab:	e8 ed d2 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f8b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f8b3:	e8 10 45 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f8b8:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2*Mega - 4*kilo); 		// Use Hole 5 -> Hole 5 = 0
f011f8bb:	83 ec 0c             	sub    $0xc,%esp
f011f8be:	68 00 f0 1f 00       	push   $0x1ff000
f011f8c3:	e8 bd 7f fe ff       	call   f0107885 <kmalloc>
f011f8c8:	83 c4 10             	add    $0x10,%esp
f011f8cb:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09201000)
f011f8d1:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f011f8d8:	10 00 00 
f011f8db:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011f8e1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f8e6:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f011f8ec:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011f8f2:	ba 00 00 00 00       	mov    $0x0,%edx
f011f8f7:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f011f8fd:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011f903:	29 d0                	sub    %edx,%eax
f011f905:	89 c1                	mov    %eax,%ecx
f011f907:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f011f90e:	10 00 00 
f011f911:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011f916:	0f b6 d0             	movzbl %al,%edx
f011f919:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011f91f:	01 d0                	add    %edx,%eax
f011f921:	48                   	dec    %eax
f011f922:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f011f928:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011f92e:	ba 00 00 00 00       	mov    $0x0,%edx
f011f933:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f011f939:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011f93f:	29 d0                	sub    %edx,%eax
f011f941:	01 c1                	add    %eax,%ecx
f011f943:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f011f94a:	10 00 00 
f011f94d:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011f952:	0f b6 c0             	movzbl %al,%eax
f011f955:	c1 e0 04             	shl    $0x4,%eax
f011f958:	89 c2                	mov    %eax,%edx
f011f95a:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011f960:	01 d0                	add    %edx,%eax
f011f962:	48                   	dec    %eax
f011f963:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f011f969:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011f96f:	ba 00 00 00 00       	mov    $0x0,%edx
f011f974:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f011f97a:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011f980:	29 d0                	sub    %edx,%eax
f011f982:	01 c8                	add    %ecx,%eax
f011f984:	8d 90 00 50 20 ff    	lea    -0xdfb000(%eax),%edx
f011f98a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f990:	39 c2                	cmp    %eax,%edx
f011f992:	74 17                	je     f011f9ab <test_kmalloc_worstfit+0x1530>
		panic("Worst Fit not working correctly");
f011f994:	83 ec 04             	sub    $0x4,%esp
f011f997:	68 74 b7 13 f0       	push   $0xf013b774
f011f99c:	68 a3 04 00 00       	push   $0x4a3
f011f9a1:	68 5a b0 13 f0       	push   $0xf013b05a
f011f9a6:	e8 5a 08 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f9ab:	e8 18 44 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f9b0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f9b3:	74 17                	je     f011f9cc <test_kmalloc_worstfit+0x1551>
f011f9b5:	83 ec 04             	sub    $0x4,%esp
f011f9b8:	68 74 b0 13 f0       	push   $0xf013b074
f011f9bd:	68 a4 04 00 00       	push   $0x4a4
f011f9c2:	68 5a b0 13 f0       	push   $0xf013b05a
f011f9c7:	e8 39 08 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (2*Mega - 4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f9cc:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f9cf:	e8 c9 d1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011f9d4:	29 c3                	sub    %eax,%ebx
f011f9d6:	89 d8                	mov    %ebx,%eax
f011f9d8:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011f9dd:	74 17                	je     f011f9f6 <test_kmalloc_worstfit+0x157b>
f011f9df:	83 ec 04             	sub    $0x4,%esp
f011f9e2:	68 92 b5 13 f0       	push   $0xf013b592
f011f9e7:	68 a5 04 00 00       	push   $0x4a5
f011f9ec:	68 5a b0 13 f0       	push   $0xf013b05a
f011f9f1:	e8 0f 08 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f9f6:	ff 45 e8             	incl   -0x18(%ebp)
f011f9f9:	83 ec 08             	sub    $0x8,%esp
f011f9fc:	ff 75 e8             	pushl  -0x18(%ebp)
f011f9ff:	68 94 b7 13 f0       	push   $0xf013b794
f011fa04:	e8 05 13 fe ff       	call   f0100d0e <cprintf>
f011fa09:	83 c4 10             	add    $0x10,%esp

	// Check that worst fit returns null in case all holes are not free
	freeFrames = sys_calculate_free_frames() ;
f011fa0c:	e8 8c d1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011fa11:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fa14:	e8 af 43 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fa19:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 		//No Suitable hole
f011fa1c:	83 ec 0c             	sub    $0xc,%esp
f011fa1f:	68 00 00 40 00       	push   $0x400000
f011fa24:	e8 5c 7e fe ff       	call   f0107885 <kmalloc>
f011fa29:	83 c4 10             	add    $0x10,%esp
f011fa2c:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != 0x0)
f011fa32:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fa38:	85 c0                	test   %eax,%eax
f011fa3a:	74 17                	je     f011fa53 <test_kmalloc_worstfit+0x15d8>
		panic("Worst Fit not working correctly");
f011fa3c:	83 ec 04             	sub    $0x4,%esp
f011fa3f:	68 74 b7 13 f0       	push   $0xf013b774
f011fa44:	68 ad 04 00 00       	push   $0x4ad
f011fa49:	68 5a b0 13 f0       	push   $0xf013b05a
f011fa4e:	e8 b2 07 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fa53:	e8 70 43 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fa58:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fa5b:	74 17                	je     f011fa74 <test_kmalloc_worstfit+0x15f9>
f011fa5d:	83 ec 04             	sub    $0x4,%esp
f011fa60:	68 74 b0 13 f0       	push   $0xf013b074
f011fa65:	68 ae 04 00 00       	push   $0x4ae
f011fa6a:	68 5a b0 13 f0       	push   $0xf013b05a
f011fa6f:	e8 91 07 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  0) panic("Wrong allocation:");
f011fa74:	e8 24 d1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011fa79:	89 c2                	mov    %eax,%edx
f011fa7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011fa7e:	39 c2                	cmp    %eax,%edx
f011fa80:	74 17                	je     f011fa99 <test_kmalloc_worstfit+0x161e>
f011fa82:	83 ec 04             	sub    $0x4,%esp
f011fa85:	68 92 b5 13 f0       	push   $0xf013b592
f011fa8a:	68 af 04 00 00       	push   $0x4af
f011fa8f:	68 5a b0 13 f0       	push   $0xf013b05a
f011fa94:	e8 6c 07 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fa99:	ff 45 e8             	incl   -0x18(%ebp)
f011fa9c:	83 ec 08             	sub    $0x8,%esp
f011fa9f:	ff 75 e8             	pushl  -0x18(%ebp)
f011faa2:	68 94 b7 13 f0       	push   $0xf013b794
f011faa7:	e8 62 12 fe ff       	call   f0100d0e <cprintf>
f011faac:	83 c4 10             	add    $0x10,%esp

	cprintf("Congratulations!! test Worst Fit completed successfully.\n");
f011faaf:	83 ec 0c             	sub    $0xc,%esp
f011fab2:	68 a8 b7 13 f0       	push   $0xf013b7a8
f011fab7:	e8 52 12 fe ff       	call   f0100d0e <cprintf>
f011fabc:	83 c4 10             	add    $0x10,%esp


	return 1;
f011fabf:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011fac4:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011fac7:	5b                   	pop    %ebx
f011fac8:	5f                   	pop    %edi
f011fac9:	5d                   	pop    %ebp
f011faca:	c3                   	ret    

f011facb <test_kfree>:

int test_kfree()
{
f011facb:	55                   	push   %ebp
f011facc:	89 e5                	mov    %esp,%ebp
f011face:	57                   	push   %edi
f011facf:	53                   	push   %ebx
f011fad0:	81 ec c0 02 00 00    	sub    $0x2c0,%esp
	cprintf("==============================================\n");
f011fad6:	83 ec 0c             	sub    $0xc,%esp
f011fad9:	68 9c af 13 f0       	push   $0xf013af9c
f011fade:	e8 2b 12 fe ff       	call   f0100d0e <cprintf>
f011fae3:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011fae6:	83 ec 0c             	sub    $0xc,%esp
f011fae9:	68 cc af 13 f0       	push   $0xf013afcc
f011faee:	e8 1b 12 fe ff       	call   f0100d0e <cprintf>
f011faf3:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011faf6:	83 ec 0c             	sub    $0xc,%esp
f011faf9:	68 9c af 13 f0       	push   $0xf013af9c
f011fafe:	e8 0b 12 fe ff       	call   f0100d0e <cprintf>
f011fb03:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011fb06:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f011fb0a:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f011fb0e:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f011fb14:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f011fb1a:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f011fb21:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011fb28:	e8 70 d0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011fb2d:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011fb30:	8d 95 e8 fd ff ff    	lea    -0x218(%ebp),%edx
f011fb36:	b9 14 00 00 00       	mov    $0x14,%ecx
f011fb3b:	b8 00 00 00 00       	mov    $0x0,%eax
f011fb40:	89 d7                	mov    %edx,%edi
f011fb42:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011fb44:	8d 95 98 fd ff ff    	lea    -0x268(%ebp),%edx
f011fb4a:	b9 14 00 00 00       	mov    $0x14,%ecx
f011fb4f:	b8 00 00 00 00       	mov    $0x0,%eax
f011fb54:	89 d7                	mov    %edx,%edi
f011fb56:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f011fb58:	8d 95 48 fd ff ff    	lea    -0x2b8(%ebp),%edx
f011fb5e:	b9 14 00 00 00       	mov    $0x14,%ecx
f011fb63:	b8 00 00 00 00       	mov    $0x0,%eax
f011fb68:	89 d7                	mov    %edx,%edi
f011fb6a:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011fb6c:	e8 2c d0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011fb71:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fb74:	e8 4f 42 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fb79:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011fb7c:	83 ec 0c             	sub    $0xc,%esp
f011fb7f:	68 00 fc 1f 00       	push   $0x1ffc00
f011fb84:	e8 fc 7c fe ff       	call   f0107885 <kmalloc>
f011fb89:	83 c4 10             	add    $0x10,%esp
f011fb8c:	89 85 48 fd ff ff    	mov    %eax,-0x2b8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fb92:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f011fb98:	89 c1                	mov    %eax,%ecx
f011fb9a:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f011fba1:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011fba4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fba9:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f011fbac:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011fbaf:	ba 00 00 00 00       	mov    $0x0,%edx
f011fbb4:	f7 75 c8             	divl   -0x38(%ebp)
f011fbb7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011fbba:	29 d0                	sub    %edx,%eax
f011fbbc:	89 c3                	mov    %eax,%ebx
f011fbbe:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f011fbc5:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011fbca:	0f b6 d0             	movzbl %al,%edx
f011fbcd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011fbd0:	01 d0                	add    %edx,%eax
f011fbd2:	48                   	dec    %eax
f011fbd3:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011fbd6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011fbd9:	ba 00 00 00 00       	mov    $0x0,%edx
f011fbde:	f7 75 c0             	divl   -0x40(%ebp)
f011fbe1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011fbe4:	29 d0                	sub    %edx,%eax
f011fbe6:	01 c3                	add    %eax,%ebx
f011fbe8:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f011fbef:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011fbf4:	0f b6 c0             	movzbl %al,%eax
f011fbf7:	c1 e0 04             	shl    $0x4,%eax
f011fbfa:	89 c2                	mov    %eax,%edx
f011fbfc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011fbff:	01 d0                	add    %edx,%eax
f011fc01:	48                   	dec    %eax
f011fc02:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f011fc05:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011fc08:	ba 00 00 00 00       	mov    $0x0,%edx
f011fc0d:	f7 75 b8             	divl   -0x48(%ebp)
f011fc10:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011fc13:	29 d0                	sub    %edx,%eax
f011fc15:	01 d8                	add    %ebx,%eax
f011fc17:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011fc1c:	39 c1                	cmp    %eax,%ecx
f011fc1e:	74 17                	je     f011fc37 <test_kfree+0x16c>
f011fc20:	83 ec 04             	sub    $0x4,%esp
f011fc23:	68 40 b1 13 f0       	push   $0xf013b140
f011fc28:	68 d7 04 00 00       	push   $0x4d7
f011fc2d:	68 5a b0 13 f0       	push   $0xf013b05a
f011fc32:	e8 ce 05 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fc37:	e8 8c 41 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fc3c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fc3f:	74 17                	je     f011fc58 <test_kfree+0x18d>
f011fc41:	83 ec 04             	sub    $0x4,%esp
f011fc44:	68 74 b0 13 f0       	push   $0xf013b074
f011fc49:	68 d8 04 00 00       	push   $0x4d8
f011fc4e:	68 5a b0 13 f0       	push   $0xf013b05a
f011fc53:	e8 ad 05 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fc58:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fc5b:	e8 3d cf fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011fc60:	29 c3                	sub    %eax,%ebx
f011fc62:	89 d8                	mov    %ebx,%eax
f011fc64:	3d 00 02 00 00       	cmp    $0x200,%eax
f011fc69:	74 17                	je     f011fc82 <test_kfree+0x1b7>
f011fc6b:	83 ec 04             	sub    $0x4,%esp
f011fc6e:	68 dc b0 13 f0       	push   $0xf013b0dc
f011fc73:	68 d9 04 00 00       	push   $0x4d9
f011fc78:	68 5a b0 13 f0       	push   $0xf013b05a
f011fc7d:	e8 83 05 fe ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f011fc82:	c7 85 e8 fd ff ff ff 	movl   $0x1ffbff,-0x218(%ebp)
f011fc89:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011fc8c:	e8 0c cf fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011fc91:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fc94:	e8 2f 41 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fc99:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011fc9c:	83 ec 0c             	sub    $0xc,%esp
f011fc9f:	68 00 fc 1f 00       	push   $0x1ffc00
f011fca4:	e8 dc 7b fe ff       	call   f0107885 <kmalloc>
f011fca9:	83 c4 10             	add    $0x10,%esp
f011fcac:	89 85 4c fd ff ff    	mov    %eax,-0x2b4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fcb2:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f011fcb8:	89 c1                	mov    %eax,%ecx
f011fcba:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f011fcc1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011fcc4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fcc9:	89 45 ac             	mov    %eax,-0x54(%ebp)
f011fccc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011fccf:	ba 00 00 00 00       	mov    $0x0,%edx
f011fcd4:	f7 75 b0             	divl   -0x50(%ebp)
f011fcd7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011fcda:	29 d0                	sub    %edx,%eax
f011fcdc:	89 c3                	mov    %eax,%ebx
f011fcde:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f011fce5:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011fcea:	0f b6 d0             	movzbl %al,%edx
f011fced:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011fcf0:	01 d0                	add    %edx,%eax
f011fcf2:	48                   	dec    %eax
f011fcf3:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f011fcf6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011fcf9:	ba 00 00 00 00       	mov    $0x0,%edx
f011fcfe:	f7 75 a8             	divl   -0x58(%ebp)
f011fd01:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011fd04:	29 d0                	sub    %edx,%eax
f011fd06:	01 c3                	add    %eax,%ebx
f011fd08:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f011fd0f:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011fd14:	0f b6 c0             	movzbl %al,%eax
f011fd17:	c1 e0 04             	shl    $0x4,%eax
f011fd1a:	89 c2                	mov    %eax,%edx
f011fd1c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011fd1f:	01 d0                	add    %edx,%eax
f011fd21:	48                   	dec    %eax
f011fd22:	89 45 9c             	mov    %eax,-0x64(%ebp)
f011fd25:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011fd28:	ba 00 00 00 00       	mov    $0x0,%edx
f011fd2d:	f7 75 a0             	divl   -0x60(%ebp)
f011fd30:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011fd33:	29 d0                	sub    %edx,%eax
f011fd35:	01 d8                	add    %ebx,%eax
f011fd37:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011fd3c:	39 c1                	cmp    %eax,%ecx
f011fd3e:	74 17                	je     f011fd57 <test_kfree+0x28c>
f011fd40:	83 ec 04             	sub    $0x4,%esp
f011fd43:	68 40 b1 13 f0       	push   $0xf013b140
f011fd48:	68 e0 04 00 00       	push   $0x4e0
f011fd4d:	68 5a b0 13 f0       	push   $0xf013b05a
f011fd52:	e8 ae 04 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fd57:	e8 6c 40 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fd5c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fd5f:	74 17                	je     f011fd78 <test_kfree+0x2ad>
f011fd61:	83 ec 04             	sub    $0x4,%esp
f011fd64:	68 74 b0 13 f0       	push   $0xf013b074
f011fd69:	68 e1 04 00 00       	push   $0x4e1
f011fd6e:	68 5a b0 13 f0       	push   $0xf013b05a
f011fd73:	e8 8d 04 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fd78:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fd7b:	e8 1d ce fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011fd80:	29 c3                	sub    %eax,%ebx
f011fd82:	89 d8                	mov    %ebx,%eax
f011fd84:	3d 00 02 00 00       	cmp    $0x200,%eax
f011fd89:	74 17                	je     f011fda2 <test_kfree+0x2d7>
f011fd8b:	83 ec 04             	sub    $0x4,%esp
f011fd8e:	68 dc b0 13 f0       	push   $0xf013b0dc
f011fd93:	68 e2 04 00 00       	push   $0x4e2
f011fd98:	68 5a b0 13 f0       	push   $0xf013b05a
f011fd9d:	e8 63 04 fe ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f011fda2:	c7 85 ec fd ff ff ff 	movl   $0x1ffbff,-0x214(%ebp)
f011fda9:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011fdac:	e8 ec cd fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011fdb1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fdb4:	e8 0f 40 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fdb9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011fdbc:	83 ec 0c             	sub    $0xc,%esp
f011fdbf:	68 00 08 00 00       	push   $0x800
f011fdc4:	e8 bc 7a fe ff       	call   f0107885 <kmalloc>
f011fdc9:	83 c4 10             	add    $0x10,%esp
f011fdcc:	89 85 50 fd ff ff    	mov    %eax,-0x2b0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fdd2:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f011fdd8:	89 c1                	mov    %eax,%ecx
f011fdda:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f011fde1:	8b 45 98             	mov    -0x68(%ebp),%eax
f011fde4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fde9:	89 45 94             	mov    %eax,-0x6c(%ebp)
f011fdec:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011fdef:	ba 00 00 00 00       	mov    $0x0,%edx
f011fdf4:	f7 75 98             	divl   -0x68(%ebp)
f011fdf7:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011fdfa:	29 d0                	sub    %edx,%eax
f011fdfc:	89 c3                	mov    %eax,%ebx
f011fdfe:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f011fe05:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011fe0a:	0f b6 d0             	movzbl %al,%edx
f011fe0d:	8b 45 90             	mov    -0x70(%ebp),%eax
f011fe10:	01 d0                	add    %edx,%eax
f011fe12:	48                   	dec    %eax
f011fe13:	89 45 8c             	mov    %eax,-0x74(%ebp)
f011fe16:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011fe19:	ba 00 00 00 00       	mov    $0x0,%edx
f011fe1e:	f7 75 90             	divl   -0x70(%ebp)
f011fe21:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011fe24:	29 d0                	sub    %edx,%eax
f011fe26:	01 c3                	add    %eax,%ebx
f011fe28:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f011fe2f:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011fe34:	0f b6 c0             	movzbl %al,%eax
f011fe37:	c1 e0 04             	shl    $0x4,%eax
f011fe3a:	89 c2                	mov    %eax,%edx
f011fe3c:	8b 45 88             	mov    -0x78(%ebp),%eax
f011fe3f:	01 d0                	add    %edx,%eax
f011fe41:	48                   	dec    %eax
f011fe42:	89 45 84             	mov    %eax,-0x7c(%ebp)
f011fe45:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011fe48:	ba 00 00 00 00       	mov    $0x0,%edx
f011fe4d:	f7 75 88             	divl   -0x78(%ebp)
f011fe50:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011fe53:	29 d0                	sub    %edx,%eax
f011fe55:	01 d8                	add    %ebx,%eax
f011fe57:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011fe5c:	39 c1                	cmp    %eax,%ecx
f011fe5e:	74 17                	je     f011fe77 <test_kfree+0x3ac>
f011fe60:	83 ec 04             	sub    $0x4,%esp
f011fe63:	68 40 b1 13 f0       	push   $0xf013b140
f011fe68:	68 e9 04 00 00       	push   $0x4e9
f011fe6d:	68 5a b0 13 f0       	push   $0xf013b05a
f011fe72:	e8 8e 03 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fe77:	e8 4c 3f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fe7c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fe7f:	74 17                	je     f011fe98 <test_kfree+0x3cd>
f011fe81:	83 ec 04             	sub    $0x4,%esp
f011fe84:	68 74 b0 13 f0       	push   $0xf013b074
f011fe89:	68 ea 04 00 00       	push   $0x4ea
f011fe8e:	68 5a b0 13 f0       	push   $0xf013b05a
f011fe93:	e8 6d 03 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fe98:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fe9b:	e8 fd cc fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011fea0:	29 c3                	sub    %eax,%ebx
f011fea2:	89 d8                	mov    %ebx,%eax
f011fea4:	83 f8 01             	cmp    $0x1,%eax
f011fea7:	74 17                	je     f011fec0 <test_kfree+0x3f5>
f011fea9:	83 ec 04             	sub    $0x4,%esp
f011feac:	68 dc b0 13 f0       	push   $0xf013b0dc
f011feb1:	68 eb 04 00 00       	push   $0x4eb
f011feb6:	68 5a b0 13 f0       	push   $0xf013b05a
f011febb:	e8 45 03 fe ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f011fec0:	c7 85 f0 fd ff ff ff 	movl   $0x7ff,-0x210(%ebp)
f011fec7:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f011feca:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f011fed0:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f011fed3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011feda:	eb 0e                	jmp    f011feea <test_kfree+0x41f>
		{
			ptr[i] = 2 ;
f011fedc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011fedf:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fee2:	01 d0                	add    %edx,%eax
f011fee4:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f011fee7:	ff 45 f4             	incl   -0xc(%ebp)
f011feea:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f011fef0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fef3:	7f e7                	jg     f011fedc <test_kfree+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011fef5:	e8 a3 cc fe ff       	call   f010cb9d <sys_calculate_free_frames>
f011fefa:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fefd:	e8 c6 3e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ff02:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011ff05:	83 ec 0c             	sub    $0xc,%esp
f011ff08:	68 00 08 00 00       	push   $0x800
f011ff0d:	e8 73 79 fe ff       	call   f0107885 <kmalloc>
f011ff12:	83 c4 10             	add    $0x10,%esp
f011ff15:	89 85 54 fd ff ff    	mov    %eax,-0x2ac(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011ff1b:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f011ff21:	89 c1                	mov    %eax,%ecx
f011ff23:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011ff2a:	10 00 00 
f011ff2d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011ff33:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ff38:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011ff3e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ff44:	ba 00 00 00 00       	mov    $0x0,%edx
f011ff49:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011ff4f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ff55:	29 d0                	sub    %edx,%eax
f011ff57:	89 c3                	mov    %eax,%ebx
f011ff59:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011ff60:	10 00 00 
f011ff63:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011ff68:	0f b6 d0             	movzbl %al,%edx
f011ff6b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011ff71:	01 d0                	add    %edx,%eax
f011ff73:	48                   	dec    %eax
f011ff74:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011ff7a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ff80:	ba 00 00 00 00       	mov    $0x0,%edx
f011ff85:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011ff8b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ff91:	29 d0                	sub    %edx,%eax
f011ff93:	01 c3                	add    %eax,%ebx
f011ff95:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011ff9c:	10 00 00 
f011ff9f:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f011ffa4:	0f b6 c0             	movzbl %al,%eax
f011ffa7:	c1 e0 04             	shl    $0x4,%eax
f011ffaa:	89 c2                	mov    %eax,%edx
f011ffac:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011ffb2:	01 d0                	add    %edx,%eax
f011ffb4:	48                   	dec    %eax
f011ffb5:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011ffbb:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011ffc1:	ba 00 00 00 00       	mov    $0x0,%edx
f011ffc6:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011ffcc:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011ffd2:	29 d0                	sub    %edx,%eax
f011ffd4:	01 d8                	add    %ebx,%eax
f011ffd6:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011ffdb:	39 c1                	cmp    %eax,%ecx
f011ffdd:	74 17                	je     f011fff6 <test_kfree+0x52b>
f011ffdf:	83 ec 04             	sub    $0x4,%esp
f011ffe2:	68 40 b1 13 f0       	push   $0xf013b140
f011ffe7:	68 f7 04 00 00       	push   $0x4f7
f011ffec:	68 5a b0 13 f0       	push   $0xf013b05a
f011fff1:	e8 0f 02 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fff6:	e8 cd 3d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fffb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fffe:	74 17                	je     f0120017 <test_kfree+0x54c>
f0120000:	83 ec 04             	sub    $0x4,%esp
f0120003:	68 74 b0 13 f0       	push   $0xf013b074
f0120008:	68 f8 04 00 00       	push   $0x4f8
f012000d:	68 5a b0 13 f0       	push   $0xf013b05a
f0120012:	e8 ee 01 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120017:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012001a:	e8 7e cb fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012001f:	29 c3                	sub    %eax,%ebx
f0120021:	89 d8                	mov    %ebx,%eax
f0120023:	83 f8 01             	cmp    $0x1,%eax
f0120026:	74 17                	je     f012003f <test_kfree+0x574>
f0120028:	83 ec 04             	sub    $0x4,%esp
f012002b:	68 dc b0 13 f0       	push   $0xf013b0dc
f0120030:	68 f9 04 00 00       	push   $0x4f9
f0120035:	68 5a b0 13 f0       	push   $0xf013b05a
f012003a:	e8 c6 01 fe ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012003f:	c7 85 f4 fd ff ff ff 	movl   $0x7ff,-0x20c(%ebp)
f0120046:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0120049:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f012004f:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0120052:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120059:	eb 0e                	jmp    f0120069 <test_kfree+0x59e>
		{
			ptr[i] = 3 ;
f012005b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012005e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120061:	01 d0                	add    %edx,%eax
f0120063:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0120066:	ff 45 f4             	incl   -0xc(%ebp)
f0120069:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012006f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120072:	7f e7                	jg     f012005b <test_kfree+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0120074:	e8 24 cb fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120079:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012007c:	e8 47 3d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120081:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0120084:	83 ec 0c             	sub    $0xc,%esp
f0120087:	68 00 1c 00 00       	push   $0x1c00
f012008c:	e8 f4 77 fe ff       	call   f0107885 <kmalloc>
f0120091:	83 c4 10             	add    $0x10,%esp
f0120094:	89 85 58 fd ff ff    	mov    %eax,-0x2a8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012009a:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f01200a0:	89 c1                	mov    %eax,%ecx
f01200a2:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01200a9:	10 00 00 
f01200ac:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01200b2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01200b7:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01200bd:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01200c3:	ba 00 00 00 00       	mov    $0x0,%edx
f01200c8:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01200ce:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01200d4:	29 d0                	sub    %edx,%eax
f01200d6:	89 c3                	mov    %eax,%ebx
f01200d8:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f01200df:	10 00 00 
f01200e2:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01200e7:	0f b6 d0             	movzbl %al,%edx
f01200ea:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01200f0:	01 d0                	add    %edx,%eax
f01200f2:	48                   	dec    %eax
f01200f3:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f01200f9:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01200ff:	ba 00 00 00 00       	mov    $0x0,%edx
f0120104:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012010a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0120110:	29 d0                	sub    %edx,%eax
f0120112:	01 c3                	add    %eax,%ebx
f0120114:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012011b:	10 00 00 
f012011e:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0120123:	0f b6 c0             	movzbl %al,%eax
f0120126:	c1 e0 04             	shl    $0x4,%eax
f0120129:	89 c2                	mov    %eax,%edx
f012012b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0120131:	01 d0                	add    %edx,%eax
f0120133:	48                   	dec    %eax
f0120134:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012013a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0120140:	ba 00 00 00 00       	mov    $0x0,%edx
f0120145:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012014b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0120151:	29 d0                	sub    %edx,%eax
f0120153:	01 d8                	add    %ebx,%eax
f0120155:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012015a:	39 c1                	cmp    %eax,%ecx
f012015c:	74 17                	je     f0120175 <test_kfree+0x6aa>
f012015e:	83 ec 04             	sub    $0x4,%esp
f0120161:	68 40 b1 13 f0       	push   $0xf013b140
f0120166:	68 05 05 00 00       	push   $0x505
f012016b:	68 5a b0 13 f0       	push   $0xf013b05a
f0120170:	e8 90 00 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120175:	e8 4e 3c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012017a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012017d:	74 17                	je     f0120196 <test_kfree+0x6cb>
f012017f:	83 ec 04             	sub    $0x4,%esp
f0120182:	68 74 b0 13 f0       	push   $0xf013b074
f0120187:	68 06 05 00 00       	push   $0x506
f012018c:	68 5a b0 13 f0       	push   $0xf013b05a
f0120191:	e8 6f 00 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120196:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120199:	e8 ff c9 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012019e:	29 c3                	sub    %eax,%ebx
f01201a0:	89 d8                	mov    %ebx,%eax
f01201a2:	83 f8 02             	cmp    $0x2,%eax
f01201a5:	74 17                	je     f01201be <test_kfree+0x6f3>
f01201a7:	83 ec 04             	sub    $0x4,%esp
f01201aa:	68 dc b0 13 f0       	push   $0xf013b0dc
f01201af:	68 07 05 00 00       	push   $0x507
f01201b4:	68 5a b0 13 f0       	push   $0xf013b05a
f01201b9:	e8 47 00 fe ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01201be:	c7 85 f8 fd ff ff ff 	movl   $0x1bff,-0x208(%ebp)
f01201c5:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01201c8:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f01201ce:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01201d1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01201d8:	eb 0e                	jmp    f01201e8 <test_kfree+0x71d>
		{
			ptr[i] = 4 ;
f01201da:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01201dd:	8b 45 80             	mov    -0x80(%ebp),%eax
f01201e0:	01 d0                	add    %edx,%eax
f01201e2:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01201e5:	ff 45 f4             	incl   -0xc(%ebp)
f01201e8:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f01201ee:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01201f1:	7f e7                	jg     f01201da <test_kfree+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01201f3:	e8 a5 c9 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01201f8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01201fb:	e8 c8 3b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120200:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0120203:	83 ec 0c             	sub    $0xc,%esp
f0120206:	68 00 fc 2f 00       	push   $0x2ffc00
f012020b:	e8 75 76 fe ff       	call   f0107885 <kmalloc>
f0120210:	83 c4 10             	add    $0x10,%esp
f0120213:	89 85 5c fd ff ff    	mov    %eax,-0x2a4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120219:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f012021f:	89 c1                	mov    %eax,%ecx
f0120221:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0120228:	10 00 00 
f012022b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0120231:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120236:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012023c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0120242:	ba 00 00 00 00       	mov    $0x0,%edx
f0120247:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012024d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0120253:	29 d0                	sub    %edx,%eax
f0120255:	89 c3                	mov    %eax,%ebx
f0120257:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012025e:	10 00 00 
f0120261:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0120266:	0f b6 d0             	movzbl %al,%edx
f0120269:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012026f:	01 d0                	add    %edx,%eax
f0120271:	48                   	dec    %eax
f0120272:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0120278:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012027e:	ba 00 00 00 00       	mov    $0x0,%edx
f0120283:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0120289:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012028f:	29 d0                	sub    %edx,%eax
f0120291:	01 c3                	add    %eax,%ebx
f0120293:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012029a:	10 00 00 
f012029d:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01202a2:	0f b6 c0             	movzbl %al,%eax
f01202a5:	c1 e0 04             	shl    $0x4,%eax
f01202a8:	89 c2                	mov    %eax,%edx
f01202aa:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01202b0:	01 d0                	add    %edx,%eax
f01202b2:	48                   	dec    %eax
f01202b3:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01202b9:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01202bf:	ba 00 00 00 00       	mov    $0x0,%edx
f01202c4:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01202ca:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01202d0:	29 d0                	sub    %edx,%eax
f01202d2:	01 d8                	add    %ebx,%eax
f01202d4:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01202d9:	39 c1                	cmp    %eax,%ecx
f01202db:	74 17                	je     f01202f4 <test_kfree+0x829>
f01202dd:	83 ec 04             	sub    $0x4,%esp
f01202e0:	68 40 b1 13 f0       	push   $0xf013b140
f01202e5:	68 13 05 00 00       	push   $0x513
f01202ea:	68 5a b0 13 f0       	push   $0xf013b05a
f01202ef:	e8 11 ff fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01202f4:	e8 cf 3a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01202f9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01202fc:	74 17                	je     f0120315 <test_kfree+0x84a>
f01202fe:	83 ec 04             	sub    $0x4,%esp
f0120301:	68 74 b0 13 f0       	push   $0xf013b074
f0120306:	68 14 05 00 00       	push   $0x514
f012030b:	68 5a b0 13 f0       	push   $0xf013b05a
f0120310:	e8 f0 fe fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120315:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120318:	e8 80 c8 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012031d:	29 c3                	sub    %eax,%ebx
f012031f:	89 d8                	mov    %ebx,%eax
f0120321:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120326:	74 17                	je     f012033f <test_kfree+0x874>
f0120328:	83 ec 04             	sub    $0x4,%esp
f012032b:	68 dc b0 13 f0       	push   $0xf013b0dc
f0120330:	68 15 05 00 00       	push   $0x515
f0120335:	68 5a b0 13 f0       	push   $0xf013b05a
f012033a:	e8 c6 fe fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012033f:	c7 85 fc fd ff ff ff 	movl   $0x2ffbff,-0x204(%ebp)
f0120346:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0120349:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f012034f:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0120352:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120359:	eb 0e                	jmp    f0120369 <test_kfree+0x89e>
		{
			ptr[i] = 5 ;
f012035b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012035e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120361:	01 d0                	add    %edx,%eax
f0120363:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0120366:	ff 45 f4             	incl   -0xc(%ebp)
f0120369:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012036f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120372:	7f e7                	jg     f012035b <test_kfree+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0120374:	e8 24 c8 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120379:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012037c:	e8 47 3a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120381:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0120384:	83 ec 0c             	sub    $0xc,%esp
f0120387:	68 00 fc 5f 00       	push   $0x5ffc00
f012038c:	e8 f4 74 fe ff       	call   f0107885 <kmalloc>
f0120391:	83 c4 10             	add    $0x10,%esp
f0120394:	89 85 60 fd ff ff    	mov    %eax,-0x2a0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012039a:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f01203a0:	89 c1                	mov    %eax,%ecx
f01203a2:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01203a9:	10 00 00 
f01203ac:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01203b2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01203b7:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01203bd:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01203c3:	ba 00 00 00 00       	mov    $0x0,%edx
f01203c8:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01203ce:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01203d4:	29 d0                	sub    %edx,%eax
f01203d6:	89 c3                	mov    %eax,%ebx
f01203d8:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01203df:	10 00 00 
f01203e2:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01203e7:	0f b6 d0             	movzbl %al,%edx
f01203ea:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01203f0:	01 d0                	add    %edx,%eax
f01203f2:	48                   	dec    %eax
f01203f3:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f01203f9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01203ff:	ba 00 00 00 00       	mov    $0x0,%edx
f0120404:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012040a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0120410:	29 d0                	sub    %edx,%eax
f0120412:	01 c3                	add    %eax,%ebx
f0120414:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012041b:	10 00 00 
f012041e:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0120423:	0f b6 c0             	movzbl %al,%eax
f0120426:	c1 e0 04             	shl    $0x4,%eax
f0120429:	89 c2                	mov    %eax,%edx
f012042b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0120431:	01 d0                	add    %edx,%eax
f0120433:	48                   	dec    %eax
f0120434:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012043a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120440:	ba 00 00 00 00       	mov    $0x0,%edx
f0120445:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012044b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120451:	29 d0                	sub    %edx,%eax
f0120453:	01 d8                	add    %ebx,%eax
f0120455:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012045a:	39 c1                	cmp    %eax,%ecx
f012045c:	74 17                	je     f0120475 <test_kfree+0x9aa>
f012045e:	83 ec 04             	sub    $0x4,%esp
f0120461:	68 40 b1 13 f0       	push   $0xf013b140
f0120466:	68 21 05 00 00       	push   $0x521
f012046b:	68 5a b0 13 f0       	push   $0xf013b05a
f0120470:	e8 90 fd fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120475:	e8 4e 39 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012047a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012047d:	74 17                	je     f0120496 <test_kfree+0x9cb>
f012047f:	83 ec 04             	sub    $0x4,%esp
f0120482:	68 74 b0 13 f0       	push   $0xf013b074
f0120487:	68 22 05 00 00       	push   $0x522
f012048c:	68 5a b0 13 f0       	push   $0xf013b05a
f0120491:	e8 6f fd fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120496:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120499:	e8 ff c6 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012049e:	29 c3                	sub    %eax,%ebx
f01204a0:	89 d8                	mov    %ebx,%eax
f01204a2:	3d 00 06 00 00       	cmp    $0x600,%eax
f01204a7:	74 17                	je     f01204c0 <test_kfree+0x9f5>
f01204a9:	83 ec 04             	sub    $0x4,%esp
f01204ac:	68 dc b0 13 f0       	push   $0xf013b0dc
f01204b1:	68 23 05 00 00       	push   $0x523
f01204b6:	68 5a b0 13 f0       	push   $0xf013b05a
f01204bb:	e8 45 fd fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f01204c0:	c7 85 00 fe ff ff ff 	movl   $0x5ffbff,-0x200(%ebp)
f01204c7:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01204ca:	e8 ce c6 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01204cf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01204d2:	e8 f1 38 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01204d7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01204da:	83 ec 0c             	sub    $0xc,%esp
f01204dd:	68 00 38 00 00       	push   $0x3800
f01204e2:	e8 9e 73 fe ff       	call   f0107885 <kmalloc>
f01204e7:	83 c4 10             	add    $0x10,%esp
f01204ea:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01204f0:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f01204f6:	89 c1                	mov    %eax,%ecx
f01204f8:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f01204ff:	10 00 00 
f0120502:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0120508:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012050d:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0120513:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0120519:	ba 00 00 00 00       	mov    $0x0,%edx
f012051e:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0120524:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012052a:	29 d0                	sub    %edx,%eax
f012052c:	89 c3                	mov    %eax,%ebx
f012052e:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0120535:	10 00 00 
f0120538:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012053d:	0f b6 d0             	movzbl %al,%edx
f0120540:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0120546:	01 d0                	add    %edx,%eax
f0120548:	48                   	dec    %eax
f0120549:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012054f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0120555:	ba 00 00 00 00       	mov    $0x0,%edx
f012055a:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0120560:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0120566:	29 d0                	sub    %edx,%eax
f0120568:	01 c3                	add    %eax,%ebx
f012056a:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0120571:	10 00 00 
f0120574:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0120579:	0f b6 c0             	movzbl %al,%eax
f012057c:	c1 e0 04             	shl    $0x4,%eax
f012057f:	89 c2                	mov    %eax,%edx
f0120581:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0120587:	01 d0                	add    %edx,%eax
f0120589:	48                   	dec    %eax
f012058a:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0120590:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0120596:	ba 00 00 00 00       	mov    $0x0,%edx
f012059b:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f01205a1:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01205a7:	29 d0                	sub    %edx,%eax
f01205a9:	01 d8                	add    %ebx,%eax
f01205ab:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01205b0:	39 c1                	cmp    %eax,%ecx
f01205b2:	74 17                	je     f01205cb <test_kfree+0xb00>
f01205b4:	83 ec 04             	sub    $0x4,%esp
f01205b7:	68 40 b1 13 f0       	push   $0xf013b140
f01205bc:	68 2a 05 00 00       	push   $0x52a
f01205c1:	68 5a b0 13 f0       	push   $0xf013b05a
f01205c6:	e8 3a fc fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01205cb:	e8 f8 37 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01205d0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01205d3:	74 17                	je     f01205ec <test_kfree+0xb21>
f01205d5:	83 ec 04             	sub    $0x4,%esp
f01205d8:	68 74 b0 13 f0       	push   $0xf013b074
f01205dd:	68 2b 05 00 00       	push   $0x52b
f01205e2:	68 5a b0 13 f0       	push   $0xf013b05a
f01205e7:	e8 19 fc fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01205ec:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01205ef:	e8 a9 c5 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01205f4:	29 c3                	sub    %eax,%ebx
f01205f6:	89 d8                	mov    %ebx,%eax
f01205f8:	83 f8 04             	cmp    $0x4,%eax
f01205fb:	74 17                	je     f0120614 <test_kfree+0xb49>
f01205fd:	83 ec 04             	sub    $0x4,%esp
f0120600:	68 dc b0 13 f0       	push   $0xf013b0dc
f0120605:	68 2c 05 00 00       	push   $0x52c
f012060a:	68 5a b0 13 f0       	push   $0xf013b05a
f012060f:	e8 f1 fb fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0120614:	c7 85 04 fe ff ff ff 	movl   $0x37ff,-0x1fc(%ebp)
f012061b:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f012061e:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0120624:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0120627:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012062e:	eb 0e                	jmp    f012063e <test_kfree+0xb73>
		{
			ptr[i] = 7 ;
f0120630:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120633:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120636:	01 d0                	add    %edx,%eax
f0120638:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012063b:	ff 45 f4             	incl   -0xc(%ebp)
f012063e:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0120644:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120647:	7f e7                	jg     f0120630 <test_kfree+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0120649:	e8 4f c5 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012064e:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0120654:	e8 6f 37 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120659:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f012065f:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f0120665:	83 ec 0c             	sub    $0xc,%esp
f0120668:	50                   	push   %eax
f0120669:	e8 e2 72 fe ff       	call   f0107950 <kfree>
f012066e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120671:	e8 52 37 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120676:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f012067c:	74 17                	je     f0120695 <test_kfree+0xbca>
f012067e:	83 ec 04             	sub    $0x4,%esp
f0120681:	68 74 b0 13 f0       	push   $0xf013b074
f0120686:	68 3b 05 00 00       	push   $0x53b
f012068b:	68 5a b0 13 f0       	push   $0xf013b05a
f0120690:	e8 70 fb fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0120695:	e8 03 c5 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012069a:	89 c2                	mov    %eax,%edx
f012069c:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01206a2:	29 c2                	sub    %eax,%edx
f01206a4:	89 d0                	mov    %edx,%eax
f01206a6:	3d 00 02 00 00       	cmp    $0x200,%eax
f01206ab:	74 17                	je     f01206c4 <test_kfree+0xbf9>
f01206ad:	83 ec 04             	sub    $0x4,%esp
f01206b0:	68 e4 b7 13 f0       	push   $0xf013b7e4
f01206b5:	68 3c 05 00 00       	push   $0x53c
f01206ba:	68 5a b0 13 f0       	push   $0xf013b05a
f01206bf:	e8 41 fb fd ff       	call   f0100205 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01206c4:	e8 d4 c4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01206c9:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01206cf:	e8 f4 36 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01206d4:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f01206da:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f01206e0:	83 ec 0c             	sub    $0xc,%esp
f01206e3:	50                   	push   %eax
f01206e4:	e8 67 72 fe ff       	call   f0107950 <kfree>
f01206e9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01206ec:	e8 d7 36 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01206f1:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01206f7:	74 17                	je     f0120710 <test_kfree+0xc45>
f01206f9:	83 ec 04             	sub    $0x4,%esp
f01206fc:	68 74 b0 13 f0       	push   $0xf013b074
f0120701:	68 42 05 00 00       	push   $0x542
f0120706:	68 5a b0 13 f0       	push   $0xf013b05a
f012070b:	e8 f5 fa fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0120710:	e8 88 c4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120715:	89 c2                	mov    %eax,%edx
f0120717:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012071d:	29 c2                	sub    %eax,%edx
f012071f:	89 d0                	mov    %edx,%eax
f0120721:	83 f8 01             	cmp    $0x1,%eax
f0120724:	74 17                	je     f012073d <test_kfree+0xc72>
f0120726:	83 ec 04             	sub    $0x4,%esp
f0120729:	68 e4 b7 13 f0       	push   $0xf013b7e4
f012072e:	68 43 05 00 00       	push   $0x543
f0120733:	68 5a b0 13 f0       	push   $0xf013b05a
f0120738:	e8 c8 fa fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012073d:	e8 5b c4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120742:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120748:	e8 7b 36 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012074d:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f0120753:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f0120759:	83 ec 0c             	sub    $0xc,%esp
f012075c:	50                   	push   %eax
f012075d:	e8 ee 71 fe ff       	call   f0107950 <kfree>
f0120762:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120765:	e8 5e 36 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012076a:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120770:	74 17                	je     f0120789 <test_kfree+0xcbe>
f0120772:	83 ec 04             	sub    $0x4,%esp
f0120775:	68 74 b0 13 f0       	push   $0xf013b074
f012077a:	68 49 05 00 00       	push   $0x549
f012077f:	68 5a b0 13 f0       	push   $0xf013b05a
f0120784:	e8 7c fa fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0120789:	e8 0f c4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012078e:	89 c2                	mov    %eax,%edx
f0120790:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120796:	29 c2                	sub    %eax,%edx
f0120798:	89 d0                	mov    %edx,%eax
f012079a:	3d 00 02 00 00       	cmp    $0x200,%eax
f012079f:	74 17                	je     f01207b8 <test_kfree+0xced>
f01207a1:	83 ec 04             	sub    $0x4,%esp
f01207a4:	68 e4 b7 13 f0       	push   $0xf013b7e4
f01207a9:	68 4a 05 00 00       	push   $0x54a
f01207ae:	68 5a b0 13 f0       	push   $0xf013b05a
f01207b3:	e8 4d fa fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01207b8:	e8 e0 c3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01207bd:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01207c3:	e8 00 36 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01207c8:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f01207ce:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f01207d4:	83 ec 0c             	sub    $0xc,%esp
f01207d7:	50                   	push   %eax
f01207d8:	e8 73 71 fe ff       	call   f0107950 <kfree>
f01207dd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01207e0:	e8 e3 35 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01207e5:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01207eb:	74 17                	je     f0120804 <test_kfree+0xd39>
f01207ed:	83 ec 04             	sub    $0x4,%esp
f01207f0:	68 74 b0 13 f0       	push   $0xf013b074
f01207f5:	68 50 05 00 00       	push   $0x550
f01207fa:	68 5a b0 13 f0       	push   $0xf013b05a
f01207ff:	e8 01 fa fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120804:	e8 94 c3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120809:	89 c2                	mov    %eax,%edx
f012080b:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120811:	29 c2                	sub    %eax,%edx
f0120813:	89 d0                	mov    %edx,%eax
f0120815:	3d 00 06 00 00       	cmp    $0x600,%eax
f012081a:	74 17                	je     f0120833 <test_kfree+0xd68>
f012081c:	83 ec 04             	sub    $0x4,%esp
f012081f:	68 e4 b7 13 f0       	push   $0xf013b7e4
f0120824:	68 51 05 00 00       	push   $0x551
f0120829:	68 5a b0 13 f0       	push   $0xf013b05a
f012082e:	e8 d2 f9 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0120833:	83 ec 0c             	sub    $0xc,%esp
f0120836:	68 1c b8 13 f0       	push   $0xf013b81c
f012083b:	e8 ce 04 fe ff       	call   f0100d0e <cprintf>
f0120840:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f0120843:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0120849:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012084c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120853:	eb 1e                	jmp    f0120873 <test_kfree+0xda8>
		{
			sums[3] += ptr[i] ;
f0120855:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012085b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012085e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120861:	01 c8                	add    %ecx,%eax
f0120863:	8a 00                	mov    (%eax),%al
f0120865:	0f be c0             	movsbl %al,%eax
f0120868:	01 d0                	add    %edx,%eax
f012086a:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0120870:	ff 45 f4             	incl   -0xc(%ebp)
f0120873:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120879:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012087c:	7f d7                	jg     f0120855 <test_kfree+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f012087e:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f0120884:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012088a:	89 c1                	mov    %eax,%ecx
f012088c:	01 c9                	add    %ecx,%ecx
f012088e:	01 c8                	add    %ecx,%eax
f0120890:	39 c2                	cmp    %eax,%edx
f0120892:	74 17                	je     f01208ab <test_kfree+0xde0>
f0120894:	83 ec 04             	sub    $0x4,%esp
f0120897:	68 40 b8 13 f0       	push   $0xf013b840
f012089c:	68 5e 05 00 00       	push   $0x55e
f01208a1:	68 5a b0 13 f0       	push   $0xf013b05a
f01208a6:	e8 5a f9 fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f01208ab:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f01208b1:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01208b4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01208bb:	eb 1e                	jmp    f01208db <test_kfree+0xe10>
		{
			sums[4] += ptr[i] ;
f01208bd:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f01208c3:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01208c6:	8b 45 80             	mov    -0x80(%ebp),%eax
f01208c9:	01 c8                	add    %ecx,%eax
f01208cb:	8a 00                	mov    (%eax),%al
f01208cd:	0f be c0             	movsbl %al,%eax
f01208d0:	01 d0                	add    %edx,%eax
f01208d2:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01208d8:	ff 45 f4             	incl   -0xc(%ebp)
f01208db:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f01208e1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01208e4:	7f d7                	jg     f01208bd <test_kfree+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f01208e6:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f01208ec:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f01208f2:	c1 e2 02             	shl    $0x2,%edx
f01208f5:	39 d0                	cmp    %edx,%eax
f01208f7:	74 17                	je     f0120910 <test_kfree+0xe45>
f01208f9:	83 ec 04             	sub    $0x4,%esp
f01208fc:	68 40 b8 13 f0       	push   $0xf013b840
f0120901:	68 66 05 00 00       	push   $0x566
f0120906:	68 5a b0 13 f0       	push   $0xf013b05a
f012090b:	e8 f5 f8 fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0120910:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0120916:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0120919:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120920:	eb 1e                	jmp    f0120940 <test_kfree+0xe75>
		{
			sums[5] += ptr[i] ;
f0120922:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f0120928:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012092b:	8b 45 80             	mov    -0x80(%ebp),%eax
f012092e:	01 c8                	add    %ecx,%eax
f0120930:	8a 00                	mov    (%eax),%al
f0120932:	0f be c0             	movsbl %al,%eax
f0120935:	01 d0                	add    %edx,%eax
f0120937:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012093d:	ff 45 f4             	incl   -0xc(%ebp)
f0120940:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0120946:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120949:	7f d7                	jg     f0120922 <test_kfree+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f012094b:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f0120951:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f0120957:	89 d0                	mov    %edx,%eax
f0120959:	c1 e0 02             	shl    $0x2,%eax
f012095c:	01 d0                	add    %edx,%eax
f012095e:	39 c1                	cmp    %eax,%ecx
f0120960:	74 17                	je     f0120979 <test_kfree+0xeae>
f0120962:	83 ec 04             	sub    $0x4,%esp
f0120965:	68 40 b8 13 f0       	push   $0xf013b840
f012096a:	68 6e 05 00 00       	push   $0x56e
f012096f:	68 5a b0 13 f0       	push   $0xf013b05a
f0120974:	e8 8c f8 fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0120979:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f012097f:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0120982:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120989:	eb 1e                	jmp    f01209a9 <test_kfree+0xede>
		{
			sums[7] += ptr[i] ;
f012098b:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f0120991:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120994:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120997:	01 c8                	add    %ecx,%eax
f0120999:	8a 00                	mov    (%eax),%al
f012099b:	0f be c0             	movsbl %al,%eax
f012099e:	01 d0                	add    %edx,%eax
f01209a0:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01209a6:	ff 45 f4             	incl   -0xc(%ebp)
f01209a9:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f01209af:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01209b2:	7f d7                	jg     f012098b <test_kfree+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f01209b4:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f01209ba:	8b 95 04 fe ff ff    	mov    -0x1fc(%ebp),%edx
f01209c0:	89 d0                	mov    %edx,%eax
f01209c2:	01 c0                	add    %eax,%eax
f01209c4:	01 d0                	add    %edx,%eax
f01209c6:	01 c0                	add    %eax,%eax
f01209c8:	01 d0                	add    %edx,%eax
f01209ca:	39 c1                	cmp    %eax,%ecx
f01209cc:	74 17                	je     f01209e5 <test_kfree+0xf1a>
f01209ce:	83 ec 04             	sub    $0x4,%esp
f01209d1:	68 40 b8 13 f0       	push   $0xf013b840
f01209d6:	68 76 05 00 00       	push   $0x576
f01209db:	68 5a b0 13 f0       	push   $0xf013b05a
f01209e0:	e8 20 f8 fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b30%");
f01209e5:	83 ec 0c             	sub    $0xc,%esp
f01209e8:	68 73 b8 13 f0       	push   $0xf013b873
f01209ed:	e8 1c 03 fe ff       	call   f0100d0e <cprintf>
f01209f2:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f01209f5:	e8 a3 c1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01209fa:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01209fd:	e8 c6 33 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120a02:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0120a05:	83 ec 0c             	sub    $0xc,%esp
f0120a08:	68 00 50 00 00       	push   $0x5000
f0120a0d:	e8 73 6e fe ff       	call   f0107885 <kmalloc>
f0120a12:	83 c4 10             	add    $0x10,%esp
f0120a15:	89 85 68 fd ff ff    	mov    %eax,-0x298(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120a1b:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0120a21:	89 c1                	mov    %eax,%ecx
f0120a23:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0120a2a:	10 00 00 
f0120a2d:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0120a33:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120a38:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0120a3e:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0120a44:	ba 00 00 00 00       	mov    $0x0,%edx
f0120a49:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0120a4f:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0120a55:	29 d0                	sub    %edx,%eax
f0120a57:	89 c3                	mov    %eax,%ebx
f0120a59:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0120a60:	10 00 00 
f0120a63:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0120a68:	0f b6 d0             	movzbl %al,%edx
f0120a6b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0120a71:	01 d0                	add    %edx,%eax
f0120a73:	48                   	dec    %eax
f0120a74:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0120a7a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0120a80:	ba 00 00 00 00       	mov    $0x0,%edx
f0120a85:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0120a8b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0120a91:	29 d0                	sub    %edx,%eax
f0120a93:	01 c3                	add    %eax,%ebx
f0120a95:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0120a9c:	10 00 00 
f0120a9f:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0120aa4:	0f b6 c0             	movzbl %al,%eax
f0120aa7:	c1 e0 04             	shl    $0x4,%eax
f0120aaa:	89 c2                	mov    %eax,%edx
f0120aac:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0120ab2:	01 d0                	add    %edx,%eax
f0120ab4:	48                   	dec    %eax
f0120ab5:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0120abb:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0120ac1:	ba 00 00 00 00       	mov    $0x0,%edx
f0120ac6:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0120acc:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0120ad2:	29 d0                	sub    %edx,%eax
f0120ad4:	01 d8                	add    %ebx,%eax
f0120ad6:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0120adb:	39 c1                	cmp    %eax,%ecx
f0120add:	74 17                	je     f0120af6 <test_kfree+0x102b>
f0120adf:	83 ec 04             	sub    $0x4,%esp
f0120ae2:	68 40 b1 13 f0       	push   $0xf013b140
f0120ae7:	68 80 05 00 00       	push   $0x580
f0120aec:	68 5a b0 13 f0       	push   $0xf013b05a
f0120af1:	e8 0f f7 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120af6:	e8 cd 32 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120afb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120afe:	74 17                	je     f0120b17 <test_kfree+0x104c>
f0120b00:	83 ec 04             	sub    $0x4,%esp
f0120b03:	68 74 b0 13 f0       	push   $0xf013b074
f0120b08:	68 81 05 00 00       	push   $0x581
f0120b0d:	68 5a b0 13 f0       	push   $0xf013b05a
f0120b12:	e8 ee f6 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120b17:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120b1a:	e8 7e c0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120b1f:	29 c3                	sub    %eax,%ebx
f0120b21:	89 d8                	mov    %ebx,%eax
f0120b23:	83 f8 05             	cmp    $0x5,%eax
f0120b26:	74 17                	je     f0120b3f <test_kfree+0x1074>
f0120b28:	83 ec 04             	sub    $0x4,%esp
f0120b2b:	68 dc b0 13 f0       	push   $0xf013b0dc
f0120b30:	68 82 05 00 00       	push   $0x582
f0120b35:	68 5a b0 13 f0       	push   $0xf013b05a
f0120b3a:	e8 c6 f6 fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0120b3f:	c7 85 08 fe ff ff ff 	movl   $0x4fff,-0x1f8(%ebp)
f0120b46:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0120b49:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0120b4f:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0120b52:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120b59:	eb 0e                	jmp    f0120b69 <test_kfree+0x109e>
		{
			ptr[i] = 8 ;
f0120b5b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120b5e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120b61:	01 d0                	add    %edx,%eax
f0120b63:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0120b66:	ff 45 f4             	incl   -0xc(%ebp)
f0120b69:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0120b6f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120b72:	7f e7                	jg     f0120b5b <test_kfree+0x1090>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0120b74:	e8 24 c0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120b79:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120b7c:	e8 47 32 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120b81:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0120b84:	83 ec 0c             	sub    $0xc,%esp
f0120b87:	68 00 00 10 00       	push   $0x100000
f0120b8c:	e8 f4 6c fe ff       	call   f0107885 <kmalloc>
f0120b91:	83 c4 10             	add    $0x10,%esp
f0120b94:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120b9a:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0120ba0:	89 c1                	mov    %eax,%ecx
f0120ba2:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0120ba9:	10 00 00 
f0120bac:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0120bb2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120bb7:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0120bbd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0120bc3:	ba 00 00 00 00       	mov    $0x0,%edx
f0120bc8:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0120bce:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0120bd4:	29 d0                	sub    %edx,%eax
f0120bd6:	89 c3                	mov    %eax,%ebx
f0120bd8:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0120bdf:	10 00 00 
f0120be2:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0120be7:	0f b6 d0             	movzbl %al,%edx
f0120bea:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0120bf0:	01 d0                	add    %edx,%eax
f0120bf2:	48                   	dec    %eax
f0120bf3:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0120bf9:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0120bff:	ba 00 00 00 00       	mov    $0x0,%edx
f0120c04:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0120c0a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0120c10:	29 d0                	sub    %edx,%eax
f0120c12:	01 c3                	add    %eax,%ebx
f0120c14:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0120c1b:	10 00 00 
f0120c1e:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0120c23:	0f b6 c0             	movzbl %al,%eax
f0120c26:	c1 e0 04             	shl    $0x4,%eax
f0120c29:	89 c2                	mov    %eax,%edx
f0120c2b:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0120c31:	01 d0                	add    %edx,%eax
f0120c33:	48                   	dec    %eax
f0120c34:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0120c3a:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0120c40:	ba 00 00 00 00       	mov    $0x0,%edx
f0120c45:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0120c4b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0120c51:	29 d0                	sub    %edx,%eax
f0120c53:	01 d8                	add    %ebx,%eax
f0120c55:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0120c5a:	39 c1                	cmp    %eax,%ecx
f0120c5c:	74 17                	je     f0120c75 <test_kfree+0x11aa>
f0120c5e:	83 ec 04             	sub    $0x4,%esp
f0120c61:	68 40 b1 13 f0       	push   $0xf013b140
f0120c66:	68 8e 05 00 00       	push   $0x58e
f0120c6b:	68 5a b0 13 f0       	push   $0xf013b05a
f0120c70:	e8 90 f5 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120c75:	e8 4e 31 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120c7a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120c7d:	74 17                	je     f0120c96 <test_kfree+0x11cb>
f0120c7f:	83 ec 04             	sub    $0x4,%esp
f0120c82:	68 74 b0 13 f0       	push   $0xf013b074
f0120c87:	68 8f 05 00 00       	push   $0x58f
f0120c8c:	68 5a b0 13 f0       	push   $0xf013b05a
f0120c91:	e8 6f f5 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120c96:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120c99:	e8 ff be fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120c9e:	29 c3                	sub    %eax,%ebx
f0120ca0:	89 d8                	mov    %ebx,%eax
f0120ca2:	3d 00 01 00 00       	cmp    $0x100,%eax
f0120ca7:	74 17                	je     f0120cc0 <test_kfree+0x11f5>
f0120ca9:	83 ec 04             	sub    $0x4,%esp
f0120cac:	68 dc b0 13 f0       	push   $0xf013b0dc
f0120cb1:	68 90 05 00 00       	push   $0x590
f0120cb6:	68 5a b0 13 f0       	push   $0xf013b05a
f0120cbb:	e8 45 f5 fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0120cc0:	c7 85 0c fe ff ff ff 	movl   $0xfffff,-0x1f4(%ebp)
f0120cc7:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0120cca:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0120cd0:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0120cd3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120cda:	eb 0e                	jmp    f0120cea <test_kfree+0x121f>
		{
			ptr[i] = 9 ;
f0120cdc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120cdf:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120ce2:	01 d0                	add    %edx,%eax
f0120ce4:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0120ce7:	ff 45 f4             	incl   -0xc(%ebp)
f0120cea:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0120cf0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120cf3:	7f e7                	jg     f0120cdc <test_kfree+0x1211>
		{
			ptr[i] = 9 ;
		}

		if (isKHeapPlacementStrategyNEXTFIT())
f0120cf5:	e8 ac 66 ff ff       	call   f01173a6 <isKHeapPlacementStrategyNEXTFIT>
f0120cfa:	84 c0                	test   %al,%al
f0120cfc:	0f 84 ac 06 00 00    	je     f01213ae <test_kfree+0x18e3>
		{
			//Allocate Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0120d02:	e8 96 be fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120d07:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120d0a:	e8 b9 30 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120d0f:	89 45 cc             	mov    %eax,-0x34(%ebp)
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f0120d12:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0120d19:	10 00 00 
f0120d1c:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0120d22:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120d27:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0120d2d:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0120d33:	ba 00 00 00 00       	mov    $0x0,%edx
f0120d38:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0120d3e:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0120d44:	29 d0                	sub    %edx,%eax
f0120d46:	89 c1                	mov    %eax,%ecx
f0120d48:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0120d4f:	10 00 00 
f0120d52:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0120d57:	0f b6 d0             	movzbl %al,%edx
f0120d5a:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0120d60:	01 d0                	add    %edx,%eax
f0120d62:	48                   	dec    %eax
f0120d63:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0120d69:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0120d6f:	ba 00 00 00 00       	mov    $0x0,%edx
f0120d74:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0120d7a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0120d80:	29 d0                	sub    %edx,%eax
f0120d82:	01 c1                	add    %eax,%ecx
f0120d84:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0120d8b:	10 00 00 
f0120d8e:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0120d93:	0f b6 c0             	movzbl %al,%eax
f0120d96:	c1 e0 04             	shl    $0x4,%eax
f0120d99:	89 c2                	mov    %eax,%edx
f0120d9b:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0120da1:	01 d0                	add    %edx,%eax
f0120da3:	48                   	dec    %eax
f0120da4:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0120daa:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0120db0:	ba 00 00 00 00       	mov    $0x0,%edx
f0120db5:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0120dbb:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0120dc1:	29 d0                	sub    %edx,%eax
f0120dc3:	01 c8                	add    %ecx,%eax
f0120dc5:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0120dca:	29 c2                	sub    %eax,%edx
f0120dcc:	89 d0                	mov    %edx,%eax
f0120dce:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			ptr_allocations[10] = kmalloc(reqAllocatedSpace);
f0120dd4:	83 ec 0c             	sub    $0xc,%esp
f0120dd7:	ff b5 b4 fe ff ff    	pushl  -0x14c(%ebp)
f0120ddd:	e8 a3 6a fe ff       	call   f0107885 <kmalloc>
f0120de2:	83 c4 10             	add    $0x10,%esp
f0120de5:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
			if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120deb:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0120df1:	89 c1                	mov    %eax,%ecx
f0120df3:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f0120dfa:	10 00 00 
f0120dfd:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0120e03:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120e08:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f0120e0e:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0120e14:	ba 00 00 00 00       	mov    $0x0,%edx
f0120e19:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f0120e1f:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0120e25:	29 d0                	sub    %edx,%eax
f0120e27:	89 c3                	mov    %eax,%ebx
f0120e29:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0120e30:	10 00 00 
f0120e33:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0120e38:	0f b6 d0             	movzbl %al,%edx
f0120e3b:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0120e41:	01 d0                	add    %edx,%eax
f0120e43:	48                   	dec    %eax
f0120e44:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0120e4a:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0120e50:	ba 00 00 00 00       	mov    $0x0,%edx
f0120e55:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0120e5b:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0120e61:	29 d0                	sub    %edx,%eax
f0120e63:	01 c3                	add    %eax,%ebx
f0120e65:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0120e6c:	10 00 00 
f0120e6f:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0120e74:	0f b6 c0             	movzbl %al,%eax
f0120e77:	c1 e0 04             	shl    $0x4,%eax
f0120e7a:	89 c2                	mov    %eax,%edx
f0120e7c:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0120e82:	01 d0                	add    %edx,%eax
f0120e84:	48                   	dec    %eax
f0120e85:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0120e8b:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0120e91:	ba 00 00 00 00       	mov    $0x0,%edx
f0120e96:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0120e9c:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0120ea2:	29 d0                	sub    %edx,%eax
f0120ea4:	01 d8                	add    %ebx,%eax
f0120ea6:	2d 00 f0 1e 09       	sub    $0x91ef000,%eax
f0120eab:	39 c1                	cmp    %eax,%ecx
f0120ead:	74 17                	je     f0120ec6 <test_kfree+0x13fb>
f0120eaf:	83 ec 04             	sub    $0x4,%esp
f0120eb2:	68 40 b1 13 f0       	push   $0xf013b140
f0120eb7:	68 9f 05 00 00       	push   $0x59f
f0120ebc:	68 5a b0 13 f0       	push   $0xf013b05a
f0120ec1:	e8 3f f3 fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120ec6:	e8 fd 2e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120ecb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120ece:	74 17                	je     f0120ee7 <test_kfree+0x141c>
f0120ed0:	83 ec 04             	sub    $0x4,%esp
f0120ed3:	68 74 b0 13 f0       	push   $0xf013b074
f0120ed8:	68 a0 05 00 00       	push   $0x5a0
f0120edd:	68 5a b0 13 f0       	push   $0xf013b05a
f0120ee2:	e8 1e f3 fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120ee7:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120eea:	e8 ae bc fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120eef:	29 c3                	sub    %eax,%ebx
f0120ef1:	89 da                	mov    %ebx,%edx
f0120ef3:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0120ef9:	c1 e8 0c             	shr    $0xc,%eax
f0120efc:	39 c2                	cmp    %eax,%edx
f0120efe:	74 17                	je     f0120f17 <test_kfree+0x144c>
f0120f00:	83 ec 04             	sub    $0x4,%esp
f0120f03:	68 dc b0 13 f0       	push   $0xf013b0dc
f0120f08:	68 a1 05 00 00       	push   $0x5a1
f0120f0d:	68 5a b0 13 f0       	push   $0xf013b05a
f0120f12:	e8 ee f2 fd ff       	call   f0100205 <_panic>
			lastIndices[10] = (reqAllocatedSpace)/sizeof(char) - 1;
f0120f17:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0120f1d:	48                   	dec    %eax
f0120f1e:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
			ptr = (char*)ptr_allocations[10];
f0120f24:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0120f2a:	89 45 80             	mov    %eax,-0x80(%ebp)
//				ptr[i] = 10;
//			}

			//Allocate in merged freed space FROM the beginning
			//3 MB
			freeFrames = sys_calculate_free_frames() ;
f0120f2d:	e8 6b bc fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0120f32:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120f35:	e8 8e 2e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120f3a:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[11] = kmalloc(3*Mega);
f0120f3d:	83 ec 0c             	sub    $0xc,%esp
f0120f40:	68 00 00 30 00       	push   $0x300000
f0120f45:	e8 3b 69 fe ff       	call   f0107885 <kmalloc>
f0120f4a:	83 c4 10             	add    $0x10,%esp
f0120f4d:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120f53:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0120f59:	89 c1                	mov    %eax,%ecx
f0120f5b:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0120f62:	10 00 00 
f0120f65:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0120f6b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120f70:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0120f76:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0120f7c:	ba 00 00 00 00       	mov    $0x0,%edx
f0120f81:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0120f87:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0120f8d:	29 d0                	sub    %edx,%eax
f0120f8f:	89 c3                	mov    %eax,%ebx
f0120f91:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f0120f98:	10 00 00 
f0120f9b:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0120fa0:	0f b6 d0             	movzbl %al,%edx
f0120fa3:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0120fa9:	01 d0                	add    %edx,%eax
f0120fab:	48                   	dec    %eax
f0120fac:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f0120fb2:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0120fb8:	ba 00 00 00 00       	mov    $0x0,%edx
f0120fbd:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f0120fc3:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0120fc9:	29 d0                	sub    %edx,%eax
f0120fcb:	01 c3                	add    %eax,%ebx
f0120fcd:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f0120fd4:	10 00 00 
f0120fd7:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0120fdc:	0f b6 c0             	movzbl %al,%eax
f0120fdf:	c1 e0 04             	shl    $0x4,%eax
f0120fe2:	89 c2                	mov    %eax,%edx
f0120fe4:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0120fea:	01 d0                	add    %edx,%eax
f0120fec:	48                   	dec    %eax
f0120fed:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f0120ff3:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0120ff9:	ba 00 00 00 00       	mov    $0x0,%edx
f0120ffe:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f0121004:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012100a:	29 d0                	sub    %edx,%eax
f012100c:	01 d8                	add    %ebx,%eax
f012100e:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0121013:	39 c1                	cmp    %eax,%ecx
f0121015:	74 17                	je     f012102e <test_kfree+0x1563>
f0121017:	83 ec 04             	sub    $0x4,%esp
f012101a:	68 40 b1 13 f0       	push   $0xf013b140
f012101f:	68 ae 05 00 00       	push   $0x5ae
f0121024:	68 5a b0 13 f0       	push   $0xf013b05a
f0121029:	e8 d7 f1 fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012102e:	e8 95 2d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121033:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121036:	74 17                	je     f012104f <test_kfree+0x1584>
f0121038:	83 ec 04             	sub    $0x4,%esp
f012103b:	68 74 b0 13 f0       	push   $0xf013b074
f0121040:	68 af 05 00 00       	push   $0x5af
f0121045:	68 5a b0 13 f0       	push   $0xf013b05a
f012104a:	e8 b6 f1 fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012104f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121052:	e8 46 bb fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121057:	29 c3                	sub    %eax,%ebx
f0121059:	89 d8                	mov    %ebx,%eax
f012105b:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121060:	74 17                	je     f0121079 <test_kfree+0x15ae>
f0121062:	83 ec 04             	sub    $0x4,%esp
f0121065:	68 dc b0 13 f0       	push   $0xf013b0dc
f012106a:	68 b0 05 00 00       	push   $0x5b0
f012106f:	68 5a b0 13 f0       	push   $0xf013b05a
f0121074:	e8 8c f1 fd ff       	call   f0100205 <_panic>
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
f0121079:	c7 85 14 fe ff ff ff 	movl   $0x2fffff,-0x1ec(%ebp)
f0121080:	ff 2f 00 
			ptr = (char*)ptr_allocations[11];
f0121083:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0121089:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[11]; ++i)
f012108c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121093:	eb 0e                	jmp    f01210a3 <test_kfree+0x15d8>
			{
				ptr[i] = 8 ;
f0121095:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121098:	8b 45 80             	mov    -0x80(%ebp),%eax
f012109b:	01 d0                	add    %edx,%eax
f012109d:	c6 00 08             	movb   $0x8,(%eax)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[11];
			for (i = 0; i < lastIndices[11]; ++i)
f01210a0:	ff 45 f4             	incl   -0xc(%ebp)
f01210a3:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f01210a9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01210ac:	7f e7                	jg     f0121095 <test_kfree+0x15ca>
			{
				ptr[i] = 8 ;
			}

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f01210ae:	e8 ea ba fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01210b3:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01210b6:	e8 0d 2d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01210bb:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[12] = kmalloc(2*kilo);
f01210be:	83 ec 0c             	sub    $0xc,%esp
f01210c1:	68 00 08 00 00       	push   $0x800
f01210c6:	e8 ba 67 fe ff       	call   f0107885 <kmalloc>
f01210cb:	83 c4 10             	add    $0x10,%esp
f01210ce:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01210d4:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f01210da:	89 c1                	mov    %eax,%ecx
f01210dc:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f01210e3:	10 00 00 
f01210e6:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01210ec:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01210f1:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f01210f7:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01210fd:	ba 00 00 00 00       	mov    $0x0,%edx
f0121102:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f0121108:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012110e:	29 d0                	sub    %edx,%eax
f0121110:	89 c3                	mov    %eax,%ebx
f0121112:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0121119:	10 00 00 
f012111c:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0121121:	0f b6 d0             	movzbl %al,%edx
f0121124:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012112a:	01 d0                	add    %edx,%eax
f012112c:	48                   	dec    %eax
f012112d:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0121133:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0121139:	ba 00 00 00 00       	mov    $0x0,%edx
f012113e:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0121144:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012114a:	29 d0                	sub    %edx,%eax
f012114c:	01 c3                	add    %eax,%ebx
f012114e:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f0121155:	10 00 00 
f0121158:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012115d:	0f b6 c0             	movzbl %al,%eax
f0121160:	c1 e0 04             	shl    $0x4,%eax
f0121163:	89 c2                	mov    %eax,%edx
f0121165:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012116b:	01 d0                	add    %edx,%eax
f012116d:	48                   	dec    %eax
f012116e:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f0121174:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012117a:	ba 00 00 00 00       	mov    $0x0,%edx
f012117f:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f0121185:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012118b:	29 d0                	sub    %edx,%eax
f012118d:	01 d8                	add    %ebx,%eax
f012118f:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0121194:	39 c1                	cmp    %eax,%ecx
f0121196:	74 17                	je     f01211af <test_kfree+0x16e4>
f0121198:	83 ec 04             	sub    $0x4,%esp
f012119b:	68 40 b1 13 f0       	push   $0xf013b140
f01211a0:	68 bc 05 00 00       	push   $0x5bc
f01211a5:	68 5a b0 13 f0       	push   $0xf013b05a
f01211aa:	e8 56 f0 fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01211af:	e8 14 2c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01211b4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01211b7:	74 17                	je     f01211d0 <test_kfree+0x1705>
f01211b9:	83 ec 04             	sub    $0x4,%esp
f01211bc:	68 74 b0 13 f0       	push   $0xf013b074
f01211c1:	68 bd 05 00 00       	push   $0x5bd
f01211c6:	68 5a b0 13 f0       	push   $0xf013b05a
f01211cb:	e8 35 f0 fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01211d0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01211d3:	e8 c5 b9 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01211d8:	29 c3                	sub    %eax,%ebx
f01211da:	89 d8                	mov    %ebx,%eax
f01211dc:	83 f8 01             	cmp    $0x1,%eax
f01211df:	74 17                	je     f01211f8 <test_kfree+0x172d>
f01211e1:	83 ec 04             	sub    $0x4,%esp
f01211e4:	68 dc b0 13 f0       	push   $0xf013b0dc
f01211e9:	68 be 05 00 00       	push   $0x5be
f01211ee:	68 5a b0 13 f0       	push   $0xf013b05a
f01211f3:	e8 0d f0 fd ff       	call   f0100205 <_panic>
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
f01211f8:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f01211ff:	07 00 00 
			ptr = (char*)ptr_allocations[12];
f0121202:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0121208:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[12]; ++i)
f012120b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121212:	eb 0e                	jmp    f0121222 <test_kfree+0x1757>
			{
				ptr[i] = 9 ;
f0121214:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121217:	8b 45 80             	mov    -0x80(%ebp),%eax
f012121a:	01 d0                	add    %edx,%eax
f012121c:	c6 00 09             	movb   $0x9,(%eax)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[12];
			for (i = 0; i < lastIndices[12]; ++i)
f012121f:	ff 45 f4             	incl   -0xc(%ebp)
f0121222:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0121228:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012122b:	7f e7                	jg     f0121214 <test_kfree+0x1749>
			{
				ptr[i] = 9 ;
			}

			//1 MB
			freeFrames = sys_calculate_free_frames() ;
f012122d:	e8 6b b9 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121232:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121235:	e8 8e 2b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012123a:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[13] = kmalloc(1*Mega);
f012123d:	83 ec 0c             	sub    $0xc,%esp
f0121240:	68 00 00 10 00       	push   $0x100000
f0121245:	e8 3b 66 fe ff       	call   f0107885 <kmalloc>
f012124a:	83 c4 10             	add    $0x10,%esp
f012124d:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121253:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0121259:	89 c1                	mov    %eax,%ecx
f012125b:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f0121262:	10 00 00 
f0121265:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012126b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121270:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f0121276:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012127c:	ba 00 00 00 00       	mov    $0x0,%edx
f0121281:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f0121287:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012128d:	29 d0                	sub    %edx,%eax
f012128f:	89 c3                	mov    %eax,%ebx
f0121291:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f0121298:	10 00 00 
f012129b:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01212a0:	0f b6 d0             	movzbl %al,%edx
f01212a3:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01212a9:	01 d0                	add    %edx,%eax
f01212ab:	48                   	dec    %eax
f01212ac:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f01212b2:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01212b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01212bd:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f01212c3:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01212c9:	29 d0                	sub    %edx,%eax
f01212cb:	01 c3                	add    %eax,%ebx
f01212cd:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f01212d4:	10 00 00 
f01212d7:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01212dc:	0f b6 c0             	movzbl %al,%eax
f01212df:	c1 e0 04             	shl    $0x4,%eax
f01212e2:	89 c2                	mov    %eax,%edx
f01212e4:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01212ea:	01 d0                	add    %edx,%eax
f01212ec:	48                   	dec    %eax
f01212ed:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f01212f3:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01212f9:	ba 00 00 00 00       	mov    $0x0,%edx
f01212fe:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f0121304:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012130a:	29 d0                	sub    %edx,%eax
f012130c:	01 d8                	add    %ebx,%eax
f012130e:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0121313:	39 c1                	cmp    %eax,%ecx
f0121315:	74 17                	je     f012132e <test_kfree+0x1863>
f0121317:	83 ec 04             	sub    $0x4,%esp
f012131a:	68 40 b1 13 f0       	push   $0xf013b140
f012131f:	68 ca 05 00 00       	push   $0x5ca
f0121324:	68 5a b0 13 f0       	push   $0xf013b05a
f0121329:	e8 d7 ee fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012132e:	e8 95 2a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121333:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121336:	74 17                	je     f012134f <test_kfree+0x1884>
f0121338:	83 ec 04             	sub    $0x4,%esp
f012133b:	68 74 b0 13 f0       	push   $0xf013b074
f0121340:	68 cb 05 00 00       	push   $0x5cb
f0121345:	68 5a b0 13 f0       	push   $0xf013b05a
f012134a:	e8 b6 ee fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012134f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121352:	e8 46 b8 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121357:	29 c3                	sub    %eax,%ebx
f0121359:	89 d8                	mov    %ebx,%eax
f012135b:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121360:	74 17                	je     f0121379 <test_kfree+0x18ae>
f0121362:	83 ec 04             	sub    $0x4,%esp
f0121365:	68 dc b0 13 f0       	push   $0xf013b0dc
f012136a:	68 cc 05 00 00       	push   $0x5cc
f012136f:	68 5a b0 13 f0       	push   $0xf013b05a
f0121374:	e8 8c ee fd ff       	call   f0100205 <_panic>
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
f0121379:	c7 85 1c fe ff ff ff 	movl   $0xfffff,-0x1e4(%ebp)
f0121380:	ff 0f 00 
			ptr = (char*)ptr_allocations[13];
f0121383:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0121389:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[13]; ++i)
f012138c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121393:	eb 0e                	jmp    f01213a3 <test_kfree+0x18d8>
			{
				ptr[i] = 10 ;
f0121395:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121398:	8b 45 80             	mov    -0x80(%ebp),%eax
f012139b:	01 d0                	add    %edx,%eax
f012139d:	c6 00 0a             	movb   $0xa,(%eax)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[13];
			for (i = 0; i < lastIndices[13]; ++i)
f01213a0:	ff 45 f4             	incl   -0xc(%ebp)
f01213a3:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01213a9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01213ac:	7f e7                	jg     f0121395 <test_kfree+0x18ca>
			{
				ptr[i] = 10 ;
			}
		}
	}
	cprintf("\b\b\b45%");
f01213ae:	83 ec 0c             	sub    $0xc,%esp
f01213b1:	68 7a b8 13 f0       	push   $0xf013b87a
f01213b6:	e8 53 f9 fd ff       	call   f0100d0e <cprintf>
f01213bb:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f01213be:	e8 da b7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01213c3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01213c6:	e8 fd 29 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01213cb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f01213ce:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f01213d4:	83 ec 0c             	sub    $0xc,%esp
f01213d7:	50                   	push   %eax
f01213d8:	e8 73 65 fe ff       	call   f0107950 <kfree>
f01213dd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01213e0:	e8 e3 29 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01213e5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01213e8:	74 17                	je     f0121401 <test_kfree+0x1936>
f01213ea:	83 ec 04             	sub    $0x4,%esp
f01213ed:	68 74 b0 13 f0       	push   $0xf013b074
f01213f2:	68 dd 05 00 00       	push   $0x5dd
f01213f7:	68 5a b0 13 f0       	push   $0xf013b05a
f01213fc:	e8 04 ee fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0121401:	e8 97 b7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121406:	89 c2                	mov    %eax,%edx
f0121408:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012140b:	29 c2                	sub    %eax,%edx
f012140d:	89 d0                	mov    %edx,%eax
f012140f:	83 f8 02             	cmp    $0x2,%eax
f0121412:	74 17                	je     f012142b <test_kfree+0x1960>
f0121414:	83 ec 04             	sub    $0x4,%esp
f0121417:	68 e4 b7 13 f0       	push   $0xf013b7e4
f012141c:	68 de 05 00 00       	push   $0x5de
f0121421:	68 5a b0 13 f0       	push   $0xf013b05a
f0121426:	e8 da ed fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012142b:	e8 6d b7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121430:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121433:	e8 90 29 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121438:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f012143b:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0121441:	83 ec 0c             	sub    $0xc,%esp
f0121444:	50                   	push   %eax
f0121445:	e8 06 65 fe ff       	call   f0107950 <kfree>
f012144a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012144d:	e8 76 29 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121452:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121455:	74 17                	je     f012146e <test_kfree+0x19a3>
f0121457:	83 ec 04             	sub    $0x4,%esp
f012145a:	68 74 b0 13 f0       	push   $0xf013b074
f012145f:	68 e4 05 00 00       	push   $0x5e4
f0121464:	68 5a b0 13 f0       	push   $0xf013b05a
f0121469:	e8 97 ed fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012146e:	e8 2a b7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121473:	89 c2                	mov    %eax,%edx
f0121475:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121478:	29 c2                	sub    %eax,%edx
f012147a:	89 d0                	mov    %edx,%eax
f012147c:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121481:	74 17                	je     f012149a <test_kfree+0x19cf>
f0121483:	83 ec 04             	sub    $0x4,%esp
f0121486:	68 e4 b7 13 f0       	push   $0xf013b7e4
f012148b:	68 e5 05 00 00       	push   $0x5e5
f0121490:	68 5a b0 13 f0       	push   $0xf013b05a
f0121495:	e8 6b ed fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012149a:	e8 fe b6 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012149f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01214a2:	e8 21 29 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01214a7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f01214aa:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f01214b0:	83 ec 0c             	sub    $0xc,%esp
f01214b3:	50                   	push   %eax
f01214b4:	e8 97 64 fe ff       	call   f0107950 <kfree>
f01214b9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01214bc:	e8 07 29 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01214c1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01214c4:	74 17                	je     f01214dd <test_kfree+0x1a12>
f01214c6:	83 ec 04             	sub    $0x4,%esp
f01214c9:	68 74 b0 13 f0       	push   $0xf013b074
f01214ce:	68 eb 05 00 00       	push   $0x5eb
f01214d3:	68 5a b0 13 f0       	push   $0xf013b05a
f01214d8:	e8 28 ed fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f01214dd:	e8 bb b6 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01214e2:	89 c2                	mov    %eax,%edx
f01214e4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01214e7:	29 c2                	sub    %eax,%edx
f01214e9:	89 d0                	mov    %edx,%eax
f01214eb:	83 f8 01             	cmp    $0x1,%eax
f01214ee:	74 17                	je     f0121507 <test_kfree+0x1a3c>
f01214f0:	83 ec 04             	sub    $0x4,%esp
f01214f3:	68 e4 b7 13 f0       	push   $0xf013b7e4
f01214f8:	68 ec 05 00 00       	push   $0x5ec
f01214fd:	68 5a b0 13 f0       	push   $0xf013b05a
f0121502:	e8 fe ec fd ff       	call   f0100205 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0121507:	e8 91 b6 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012150c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012150f:	e8 b4 28 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121514:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0121517:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f012151d:	83 ec 0c             	sub    $0xc,%esp
f0121520:	50                   	push   %eax
f0121521:	e8 2a 64 fe ff       	call   f0107950 <kfree>
f0121526:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121529:	e8 9a 28 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012152e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121531:	74 17                	je     f012154a <test_kfree+0x1a7f>
f0121533:	83 ec 04             	sub    $0x4,%esp
f0121536:	68 74 b0 13 f0       	push   $0xf013b074
f012153b:	68 f2 05 00 00       	push   $0x5f2
f0121540:	68 5a b0 13 f0       	push   $0xf013b05a
f0121545:	e8 bb ec fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f012154a:	e8 4e b6 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012154f:	89 c2                	mov    %eax,%edx
f0121551:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121554:	29 c2                	sub    %eax,%edx
f0121556:	89 d0                	mov    %edx,%eax
f0121558:	83 f8 04             	cmp    $0x4,%eax
f012155b:	74 17                	je     f0121574 <test_kfree+0x1aa9>
f012155d:	83 ec 04             	sub    $0x4,%esp
f0121560:	68 e4 b7 13 f0       	push   $0xf013b7e4
f0121565:	68 f3 05 00 00       	push   $0x5f3
f012156a:	68 5a b0 13 f0       	push   $0xf013b05a
f012156f:	e8 91 ec fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0121574:	e8 24 b6 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121579:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012157c:	e8 47 28 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121581:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0121584:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f012158a:	83 ec 0c             	sub    $0xc,%esp
f012158d:	50                   	push   %eax
f012158e:	e8 bd 63 fe ff       	call   f0107950 <kfree>
f0121593:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121596:	e8 2d 28 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012159b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012159e:	74 17                	je     f01215b7 <test_kfree+0x1aec>
f01215a0:	83 ec 04             	sub    $0x4,%esp
f01215a3:	68 74 b0 13 f0       	push   $0xf013b074
f01215a8:	68 f9 05 00 00       	push   $0x5f9
f01215ad:	68 5a b0 13 f0       	push   $0xf013b05a
f01215b2:	e8 4e ec fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f01215b7:	e8 e1 b5 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01215bc:	89 c2                	mov    %eax,%edx
f01215be:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01215c1:	29 c2                	sub    %eax,%edx
f01215c3:	89 d0                	mov    %edx,%eax
f01215c5:	83 f8 05             	cmp    $0x5,%eax
f01215c8:	74 17                	je     f01215e1 <test_kfree+0x1b16>
f01215ca:	83 ec 04             	sub    $0x4,%esp
f01215cd:	68 e4 b7 13 f0       	push   $0xf013b7e4
f01215d2:	68 fa 05 00 00       	push   $0x5fa
f01215d7:	68 5a b0 13 f0       	push   $0xf013b05a
f01215dc:	e8 24 ec fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01215e1:	e8 b7 b5 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01215e6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01215e9:	e8 da 27 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01215ee:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01215f1:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f01215f7:	83 ec 0c             	sub    $0xc,%esp
f01215fa:	50                   	push   %eax
f01215fb:	e8 50 63 fe ff       	call   f0107950 <kfree>
f0121600:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121603:	e8 c0 27 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121608:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012160b:	74 17                	je     f0121624 <test_kfree+0x1b59>
f012160d:	83 ec 04             	sub    $0x4,%esp
f0121610:	68 74 b0 13 f0       	push   $0xf013b074
f0121615:	68 00 06 00 00       	push   $0x600
f012161a:	68 5a b0 13 f0       	push   $0xf013b05a
f012161f:	e8 e1 eb fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0121624:	e8 74 b5 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121629:	89 c2                	mov    %eax,%edx
f012162b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012162e:	29 c2                	sub    %eax,%edx
f0121630:	89 d0                	mov    %edx,%eax
f0121632:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121637:	74 17                	je     f0121650 <test_kfree+0x1b85>
f0121639:	83 ec 04             	sub    $0x4,%esp
f012163c:	68 e4 b7 13 f0       	push   $0xf013b7e4
f0121641:	68 01 06 00 00       	push   $0x601
f0121646:	68 5a b0 13 f0       	push   $0xf013b05a
f012164b:	e8 b5 eb fd ff       	call   f0100205 <_panic>

		if (isKHeapPlacementStrategyNEXTFIT())
f0121650:	e8 51 5d ff ff       	call   f01173a6 <isKHeapPlacementStrategyNEXTFIT>
f0121655:	84 c0                	test   %al,%al
f0121657:	0f 84 80 02 00 00    	je     f01218dd <test_kfree+0x1e12>
		{
			//cprintf("FREE in NEXT FIT\n");
			//kfree Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f012165d:	e8 3b b5 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121662:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121665:	e8 5e 27 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012166a:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[10]);
f012166d:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0121673:	83 ec 0c             	sub    $0xc,%esp
f0121676:	50                   	push   %eax
f0121677:	e8 d4 62 fe ff       	call   f0107950 <kfree>
f012167c:	83 c4 10             	add    $0x10,%esp
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f012167f:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f0121686:	10 00 00 
f0121689:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012168f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121694:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f012169a:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01216a0:	ba 00 00 00 00       	mov    $0x0,%edx
f01216a5:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f01216ab:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01216b1:	29 d0                	sub    %edx,%eax
f01216b3:	89 c1                	mov    %eax,%ecx
f01216b5:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f01216bc:	10 00 00 
f01216bf:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01216c4:	0f b6 d0             	movzbl %al,%edx
f01216c7:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01216cd:	01 d0                	add    %edx,%eax
f01216cf:	48                   	dec    %eax
f01216d0:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f01216d6:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01216dc:	ba 00 00 00 00       	mov    $0x0,%edx
f01216e1:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f01216e7:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01216ed:	29 d0                	sub    %edx,%eax
f01216ef:	01 c1                	add    %eax,%ecx
f01216f1:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f01216f8:	10 00 00 
f01216fb:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0121700:	0f b6 c0             	movzbl %al,%eax
f0121703:	c1 e0 04             	shl    $0x4,%eax
f0121706:	89 c2                	mov    %eax,%edx
f0121708:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012170e:	01 d0                	add    %edx,%eax
f0121710:	48                   	dec    %eax
f0121711:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f0121717:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012171d:	ba 00 00 00 00       	mov    $0x0,%edx
f0121722:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f0121728:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012172e:	29 d0                	sub    %edx,%eax
f0121730:	01 c8                	add    %ecx,%eax
f0121732:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0121737:	29 c2                	sub    %eax,%edx
f0121739:	89 d0                	mov    %edx,%eax
f012173b:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121741:	e8 82 26 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121746:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121749:	74 17                	je     f0121762 <test_kfree+0x1c97>
f012174b:	83 ec 04             	sub    $0x4,%esp
f012174e:	68 74 b0 13 f0       	push   $0xf013b074
f0121753:	68 0b 06 00 00       	push   $0x60b
f0121758:	68 5a b0 13 f0       	push   $0xf013b05a
f012175d:	e8 a3 ea fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong kfree: pages in memory are not freed correctly");
f0121762:	e8 36 b4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121767:	89 c2                	mov    %eax,%edx
f0121769:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012176c:	29 c2                	sub    %eax,%edx
f012176e:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0121774:	c1 e8 0c             	shr    $0xc,%eax
f0121777:	39 c2                	cmp    %eax,%edx
f0121779:	74 17                	je     f0121792 <test_kfree+0x1cc7>
f012177b:	83 ec 04             	sub    $0x4,%esp
f012177e:	68 e4 b7 13 f0       	push   $0xf013b7e4
f0121783:	68 0c 06 00 00       	push   $0x60c
f0121788:	68 5a b0 13 f0       	push   $0xf013b05a
f012178d:	e8 73 ea fd ff       	call   f0100205 <_panic>

			//kfree 3 MB
			freeFrames = sys_calculate_free_frames() ;
f0121792:	e8 06 b4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121797:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f012179a:	e8 29 26 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012179f:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[11]);
f01217a2:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f01217a8:	83 ec 0c             	sub    $0xc,%esp
f01217ab:	50                   	push   %eax
f01217ac:	e8 9f 61 fe ff       	call   f0107950 <kfree>
f01217b1:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01217b4:	e8 0f 26 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01217b9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01217bc:	74 17                	je     f01217d5 <test_kfree+0x1d0a>
f01217be:	83 ec 04             	sub    $0x4,%esp
f01217c1:	68 74 b0 13 f0       	push   $0xf013b074
f01217c6:	68 12 06 00 00       	push   $0x612
f01217cb:	68 5a b0 13 f0       	push   $0xf013b05a
f01217d0:	e8 30 ea fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01217d5:	e8 c3 b3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01217da:	89 c2                	mov    %eax,%edx
f01217dc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01217df:	29 c2                	sub    %eax,%edx
f01217e1:	89 d0                	mov    %edx,%eax
f01217e3:	3d 00 03 00 00       	cmp    $0x300,%eax
f01217e8:	74 17                	je     f0121801 <test_kfree+0x1d36>
f01217ea:	83 ec 04             	sub    $0x4,%esp
f01217ed:	68 e4 b7 13 f0       	push   $0xf013b7e4
f01217f2:	68 13 06 00 00       	push   $0x613
f01217f7:	68 5a b0 13 f0       	push   $0xf013b05a
f01217fc:	e8 04 ea fd ff       	call   f0100205 <_panic>

			//kfree 2 KB
			freeFrames = sys_calculate_free_frames() ;
f0121801:	e8 97 b3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121806:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121809:	e8 ba 25 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012180e:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[12]);
f0121811:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0121817:	83 ec 0c             	sub    $0xc,%esp
f012181a:	50                   	push   %eax
f012181b:	e8 30 61 fe ff       	call   f0107950 <kfree>
f0121820:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121823:	e8 a0 25 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121828:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012182b:	74 17                	je     f0121844 <test_kfree+0x1d79>
f012182d:	83 ec 04             	sub    $0x4,%esp
f0121830:	68 74 b0 13 f0       	push   $0xf013b074
f0121835:	68 19 06 00 00       	push   $0x619
f012183a:	68 5a b0 13 f0       	push   $0xf013b05a
f012183f:	e8 c1 e9 fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0121844:	e8 54 b3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121849:	89 c2                	mov    %eax,%edx
f012184b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012184e:	29 c2                	sub    %eax,%edx
f0121850:	89 d0                	mov    %edx,%eax
f0121852:	83 f8 01             	cmp    $0x1,%eax
f0121855:	74 17                	je     f012186e <test_kfree+0x1da3>
f0121857:	83 ec 04             	sub    $0x4,%esp
f012185a:	68 e4 b7 13 f0       	push   $0xf013b7e4
f012185f:	68 1a 06 00 00       	push   $0x61a
f0121864:	68 5a b0 13 f0       	push   $0xf013b05a
f0121869:	e8 97 e9 fd ff       	call   f0100205 <_panic>

			//kfree 1 MB
			freeFrames = sys_calculate_free_frames() ;
f012186e:	e8 2a b3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121873:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121876:	e8 4d 25 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012187b:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[13]);
f012187e:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0121884:	83 ec 0c             	sub    $0xc,%esp
f0121887:	50                   	push   %eax
f0121888:	e8 c3 60 fe ff       	call   f0107950 <kfree>
f012188d:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121890:	e8 33 25 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121895:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121898:	74 17                	je     f01218b1 <test_kfree+0x1de6>
f012189a:	83 ec 04             	sub    $0x4,%esp
f012189d:	68 74 b0 13 f0       	push   $0xf013b074
f01218a2:	68 20 06 00 00       	push   $0x620
f01218a7:	68 5a b0 13 f0       	push   $0xf013b05a
f01218ac:	e8 54 e9 fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01218b1:	e8 e7 b2 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01218b6:	89 c2                	mov    %eax,%edx
f01218b8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01218bb:	29 c2                	sub    %eax,%edx
f01218bd:	89 d0                	mov    %edx,%eax
f01218bf:	3d 00 01 00 00       	cmp    $0x100,%eax
f01218c4:	74 17                	je     f01218dd <test_kfree+0x1e12>
f01218c6:	83 ec 04             	sub    $0x4,%esp
f01218c9:	68 e4 b7 13 f0       	push   $0xf013b7e4
f01218ce:	68 21 06 00 00       	push   $0x621
f01218d3:	68 5a b0 13 f0       	push   $0xf013b05a
f01218d8:	e8 28 e9 fd ff       	call   f0100205 <_panic>

		}
		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f01218dd:	e8 bb b2 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01218e2:	89 c2                	mov    %eax,%edx
f01218e4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01218e7:	39 c2                	cmp    %eax,%edx
f01218e9:	74 17                	je     f0121902 <test_kfree+0x1e37>
f01218eb:	83 ec 04             	sub    $0x4,%esp
f01218ee:	68 84 b8 13 f0       	push   $0xf013b884
f01218f3:	68 24 06 00 00       	push   $0x624
f01218f8:	68 5a b0 13 f0       	push   $0xf013b05a
f01218fd:	e8 03 e9 fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b60%");
f0121902:	83 ec 0c             	sub    $0xc,%esp
f0121905:	68 b8 b8 13 f0       	push   $0xf013b8b8
f012190a:	e8 ff f3 fd ff       	call   f0100d0e <cprintf>
f012190f:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0121912:	83 ec 0c             	sub    $0xc,%esp
f0121915:	6a 03                	push   $0x3
f0121917:	e8 21 b7 fe ff       	call   f010d03d <sys_bypassPageFault>
f012191c:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f012191f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121926:	e9 82 00 00 00       	jmp    f01219ad <test_kfree+0x1ee2>
		{
			ptr = (char *) ptr_allocations[i];
f012192b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012192e:	8b 84 85 48 fd ff ff 	mov    -0x2b8(%ebp,%eax,4),%eax
f0121935:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0121938:	8b 45 80             	mov    -0x80(%ebp),%eax
f012193b:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f012193e:	e8 e8 b6 fe ff       	call   f010d02b <sys_rcr2>
f0121943:	89 c2                	mov    %eax,%edx
f0121945:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121948:	39 c2                	cmp    %eax,%edx
f012194a:	74 17                	je     f0121963 <test_kfree+0x1e98>
f012194c:	83 ec 04             	sub    $0x4,%esp
f012194f:	68 c0 b8 13 f0       	push   $0xf013b8c0
f0121954:	68 33 06 00 00       	push   $0x633
f0121959:	68 5a b0 13 f0       	push   $0xf013b05a
f012195e:	e8 a2 e8 fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f0121963:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121966:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f012196d:	89 c2                	mov    %eax,%edx
f012196f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121972:	01 d0                	add    %edx,%eax
f0121974:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0121977:	e8 af b6 fe ff       	call   f010d02b <sys_rcr2>
f012197c:	89 c2                	mov    %eax,%edx
f012197e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121981:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f0121988:	89 c1                	mov    %eax,%ecx
f012198a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012198d:	01 c8                	add    %ecx,%eax
f012198f:	39 c2                	cmp    %eax,%edx
f0121991:	74 17                	je     f01219aa <test_kfree+0x1edf>
f0121993:	83 ec 04             	sub    $0x4,%esp
f0121996:	68 c0 b8 13 f0       	push   $0xf013b8c0
f012199b:	68 35 06 00 00       	push   $0x635
f01219a0:	68 5a b0 13 f0       	push   $0xf013b05a
f01219a5:	e8 5b e8 fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f01219aa:	ff 45 f4             	incl   -0xc(%ebp)
f01219ad:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f01219b1:	0f 8e 74 ff ff ff    	jle    f012192b <test_kfree+0x1e60>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01219b7:	83 ec 0c             	sub    $0xc,%esp
f01219ba:	6a 00                	push   $0x0
f01219bc:	e8 7c b6 fe ff       	call   f010d03d <sys_bypassPageFault>
f01219c1:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f01219c4:	83 ec 0c             	sub    $0xc,%esp
f01219c7:	68 05 b9 13 f0       	push   $0xf013b905
f01219cc:	e8 3d f3 fd ff       	call   f0100d0e <cprintf>
f01219d1:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01219d4:	e8 c4 b1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01219d9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01219dc:	e8 e7 23 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01219e1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f01219e4:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f01219ea:	83 ec 0c             	sub    $0xc,%esp
f01219ed:	50                   	push   %eax
f01219ee:	e8 5d 5f fe ff       	call   f0107950 <kfree>
f01219f3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01219f6:	e8 cd 23 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01219fb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01219fe:	74 17                	je     f0121a17 <test_kfree+0x1f4c>
f0121a00:	83 ec 04             	sub    $0x4,%esp
f0121a03:	68 74 b0 13 f0       	push   $0xf013b074
f0121a08:	68 43 06 00 00       	push   $0x643
f0121a0d:	68 5a b0 13 f0       	push   $0xf013b05a
f0121a12:	e8 ee e7 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0121a17:	e8 81 b1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121a1c:	89 c2                	mov    %eax,%edx
f0121a1e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121a21:	39 c2                	cmp    %eax,%edx
f0121a23:	74 17                	je     f0121a3c <test_kfree+0x1f71>
f0121a25:	83 ec 04             	sub    $0x4,%esp
f0121a28:	68 0c b9 13 f0       	push   $0xf013b90c
f0121a2d:	68 44 06 00 00       	push   $0x644
f0121a32:	68 5a b0 13 f0       	push   $0xf013b05a
f0121a37:	e8 c9 e7 fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121a3c:	e8 5c b1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121a41:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121a44:	e8 7f 23 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121a49:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0121a4c:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f0121a52:	83 ec 0c             	sub    $0xc,%esp
f0121a55:	50                   	push   %eax
f0121a56:	e8 f5 5e fe ff       	call   f0107950 <kfree>
f0121a5b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121a5e:	e8 65 23 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121a63:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121a66:	74 17                	je     f0121a7f <test_kfree+0x1fb4>
f0121a68:	83 ec 04             	sub    $0x4,%esp
f0121a6b:	68 74 b0 13 f0       	push   $0xf013b074
f0121a70:	68 4a 06 00 00       	push   $0x64a
f0121a75:	68 5a b0 13 f0       	push   $0xf013b05a
f0121a7a:	e8 86 e7 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0121a7f:	e8 19 b1 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121a84:	89 c2                	mov    %eax,%edx
f0121a86:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121a89:	39 c2                	cmp    %eax,%edx
f0121a8b:	74 17                	je     f0121aa4 <test_kfree+0x1fd9>
f0121a8d:	83 ec 04             	sub    $0x4,%esp
f0121a90:	68 0c b9 13 f0       	push   $0xf013b90c
f0121a95:	68 4b 06 00 00       	push   $0x64b
f0121a9a:	68 5a b0 13 f0       	push   $0xf013b05a
f0121a9f:	e8 61 e7 fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0121aa4:	e8 f4 b0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121aa9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121aac:	e8 17 23 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121ab1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0121ab4:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0121aba:	83 ec 0c             	sub    $0xc,%esp
f0121abd:	50                   	push   %eax
f0121abe:	e8 8d 5e fe ff       	call   f0107950 <kfree>
f0121ac3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121ac6:	e8 fd 22 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121acb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121ace:	74 17                	je     f0121ae7 <test_kfree+0x201c>
f0121ad0:	83 ec 04             	sub    $0x4,%esp
f0121ad3:	68 74 b0 13 f0       	push   $0xf013b074
f0121ad8:	68 51 06 00 00       	push   $0x651
f0121add:	68 5a b0 13 f0       	push   $0xf013b05a
f0121ae2:	e8 1e e7 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0121ae7:	e8 b1 b0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121aec:	89 c2                	mov    %eax,%edx
f0121aee:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121af1:	39 c2                	cmp    %eax,%edx
f0121af3:	74 17                	je     f0121b0c <test_kfree+0x2041>
f0121af5:	83 ec 04             	sub    $0x4,%esp
f0121af8:	68 0c b9 13 f0       	push   $0xf013b90c
f0121afd:	68 52 06 00 00       	push   $0x652
f0121b02:	68 5a b0 13 f0       	push   $0xf013b05a
f0121b07:	e8 f9 e6 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0121b0c:	e8 8c b0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121b11:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121b14:	e8 af 22 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121b19:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0121b1c:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0121b22:	83 ec 0c             	sub    $0xc,%esp
f0121b25:	50                   	push   %eax
f0121b26:	e8 25 5e fe ff       	call   f0107950 <kfree>
f0121b2b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121b2e:	e8 95 22 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121b33:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121b36:	74 17                	je     f0121b4f <test_kfree+0x2084>
f0121b38:	83 ec 04             	sub    $0x4,%esp
f0121b3b:	68 74 b0 13 f0       	push   $0xf013b074
f0121b40:	68 58 06 00 00       	push   $0x658
f0121b45:	68 5a b0 13 f0       	push   $0xf013b05a
f0121b4a:	e8 b6 e6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0121b4f:	e8 49 b0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121b54:	89 c2                	mov    %eax,%edx
f0121b56:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121b59:	39 c2                	cmp    %eax,%edx
f0121b5b:	74 17                	je     f0121b74 <test_kfree+0x20a9>
f0121b5d:	83 ec 04             	sub    $0x4,%esp
f0121b60:	68 0c b9 13 f0       	push   $0xf013b90c
f0121b65:	68 59 06 00 00       	push   $0x659
f0121b6a:	68 5a b0 13 f0       	push   $0xf013b05a
f0121b6f:	e8 91 e6 fd ff       	call   f0100205 <_panic>

	}
	cprintf("\b\b\b85%");
f0121b74:	83 ec 0c             	sub    $0xc,%esp
f0121b77:	68 53 b9 13 f0       	push   $0xf013b953
f0121b7c:	e8 8d f1 fd ff       	call   f0100d0e <cprintf>
f0121b81:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0121b84:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0121b8b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0121b92:	eb 48                	jmp    f0121bdc <test_kfree+0x2111>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0121b94:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0121b97:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0121b9c:	83 ec 04             	sub    $0x4,%esp
f0121b9f:	8d 8d 44 fd ff ff    	lea    -0x2bc(%ebp),%ecx
f0121ba5:	51                   	push   %ecx
f0121ba6:	52                   	push   %edx
f0121ba7:	50                   	push   %eax
f0121ba8:	e8 04 4f fe ff       	call   f0106ab1 <get_page_table>
f0121bad:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0121bb0:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f0121bb6:	85 c0                	test   %eax,%eax
f0121bb8:	75 17                	jne    f0121bd1 <test_kfree+0x2106>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0121bba:	83 ec 04             	sub    $0x4,%esp
f0121bbd:	68 5c b9 13 f0       	push   $0xf013b95c
f0121bc2:	68 67 06 00 00       	push   $0x667
f0121bc7:	68 5a b0 13 f0       	push   $0xf013b05a
f0121bcc:	e8 34 e6 fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0121bd1:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0121bd8:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0121bdc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0121be0:	78 b2                	js     f0121b94 <test_kfree+0x20c9>
f0121be2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0121be6:	7f 09                	jg     f0121bf1 <test_kfree+0x2126>
f0121be8:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0121bef:	76 a3                	jbe    f0121b94 <test_kfree+0x20c9>
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0121bf1:	83 ec 0c             	sub    $0xc,%esp
f0121bf4:	68 3e b2 13 f0       	push   $0xf013b23e
f0121bf9:	e8 10 f1 fd ff       	call   f0100d0e <cprintf>
f0121bfe:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0121c01:	83 ec 0c             	sub    $0xc,%esp
f0121c04:	68 c4 b9 13 f0       	push   $0xf013b9c4
f0121c09:	e8 00 f1 fd ff       	call   f0100d0e <cprintf>
f0121c0e:	83 c4 10             	add    $0x10,%esp

	return 1;
f0121c11:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0121c16:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0121c19:	5b                   	pop    %ebx
f0121c1a:	5f                   	pop    %edi
f0121c1b:	5d                   	pop    %ebp
f0121c1c:	c3                   	ret    

f0121c1d <test_kfree_bestfirstfit>:

int test_kfree_bestfirstfit()
{
f0121c1d:	55                   	push   %ebp
f0121c1e:	89 e5                	mov    %esp,%ebp
f0121c20:	57                   	push   %edi
f0121c21:	53                   	push   %ebx
f0121c22:	81 ec 40 02 00 00    	sub    $0x240,%esp
	cprintf("==============================================\n");
f0121c28:	83 ec 0c             	sub    $0xc,%esp
f0121c2b:	68 9c af 13 f0       	push   $0xf013af9c
f0121c30:	e8 d9 f0 fd ff       	call   f0100d0e <cprintf>
f0121c35:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0121c38:	83 ec 0c             	sub    $0xc,%esp
f0121c3b:	68 cc af 13 f0       	push   $0xf013afcc
f0121c40:	e8 c9 f0 fd ff       	call   f0100d0e <cprintf>
f0121c45:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0121c48:	83 ec 0c             	sub    $0xc,%esp
f0121c4b:	68 9c af 13 f0       	push   $0xf013af9c
f0121c50:	e8 b9 f0 fd ff       	call   f0100d0e <cprintf>
f0121c55:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0121c58:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0121c5c:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0121c60:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0121c66:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0121c6c:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0121c73:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0121c7a:	e8 1e af fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121c7f:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0121c82:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f0121c88:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121c8d:	b8 00 00 00 00       	mov    $0x0,%eax
f0121c92:	89 d7                	mov    %edx,%edi
f0121c94:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0121c96:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f0121c9c:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121ca1:	b8 00 00 00 00       	mov    $0x0,%eax
f0121ca6:	89 d7                	mov    %edx,%edi
f0121ca8:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0121caa:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0121cb0:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121cb5:	b8 00 00 00 00       	mov    $0x0,%eax
f0121cba:	89 d7                	mov    %edx,%edi
f0121cbc:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121cbe:	e8 da ae fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121cc3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121cc6:	e8 fd 20 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121ccb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0121cce:	83 ec 0c             	sub    $0xc,%esp
f0121cd1:	68 00 fc 1f 00       	push   $0x1ffc00
f0121cd6:	e8 aa 5b fe ff       	call   f0107885 <kmalloc>
f0121cdb:	83 c4 10             	add    $0x10,%esp
f0121cde:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121ce4:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0121cea:	89 c1                	mov    %eax,%ecx
f0121cec:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0121cf3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0121cf6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121cfb:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0121cfe:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0121d01:	ba 00 00 00 00       	mov    $0x0,%edx
f0121d06:	f7 75 c8             	divl   -0x38(%ebp)
f0121d09:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0121d0c:	29 d0                	sub    %edx,%eax
f0121d0e:	89 c3                	mov    %eax,%ebx
f0121d10:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0121d17:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0121d1c:	0f b6 d0             	movzbl %al,%edx
f0121d1f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0121d22:	01 d0                	add    %edx,%eax
f0121d24:	48                   	dec    %eax
f0121d25:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0121d28:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0121d2b:	ba 00 00 00 00       	mov    $0x0,%edx
f0121d30:	f7 75 c0             	divl   -0x40(%ebp)
f0121d33:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0121d36:	29 d0                	sub    %edx,%eax
f0121d38:	01 c3                	add    %eax,%ebx
f0121d3a:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0121d41:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0121d46:	0f b6 c0             	movzbl %al,%eax
f0121d49:	c1 e0 04             	shl    $0x4,%eax
f0121d4c:	89 c2                	mov    %eax,%edx
f0121d4e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0121d51:	01 d0                	add    %edx,%eax
f0121d53:	48                   	dec    %eax
f0121d54:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0121d57:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0121d5a:	ba 00 00 00 00       	mov    $0x0,%edx
f0121d5f:	f7 75 b8             	divl   -0x48(%ebp)
f0121d62:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0121d65:	29 d0                	sub    %edx,%eax
f0121d67:	01 d8                	add    %ebx,%eax
f0121d69:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0121d6e:	39 c1                	cmp    %eax,%ecx
f0121d70:	74 17                	je     f0121d89 <test_kfree_bestfirstfit+0x16c>
f0121d72:	83 ec 04             	sub    $0x4,%esp
f0121d75:	68 40 b1 13 f0       	push   $0xf013b140
f0121d7a:	68 95 06 00 00       	push   $0x695
f0121d7f:	68 5a b0 13 f0       	push   $0xf013b05a
f0121d84:	e8 7c e4 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121d89:	e8 3a 20 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121d8e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121d91:	74 17                	je     f0121daa <test_kfree_bestfirstfit+0x18d>
f0121d93:	83 ec 04             	sub    $0x4,%esp
f0121d96:	68 74 b0 13 f0       	push   $0xf013b074
f0121d9b:	68 96 06 00 00       	push   $0x696
f0121da0:	68 5a b0 13 f0       	push   $0xf013b05a
f0121da5:	e8 5b e4 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121daa:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121dad:	e8 eb ad fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121db2:	29 c3                	sub    %eax,%ebx
f0121db4:	89 d8                	mov    %ebx,%eax
f0121db6:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121dbb:	74 17                	je     f0121dd4 <test_kfree_bestfirstfit+0x1b7>
f0121dbd:	83 ec 04             	sub    $0x4,%esp
f0121dc0:	68 dc b0 13 f0       	push   $0xf013b0dc
f0121dc5:	68 97 06 00 00       	push   $0x697
f0121dca:	68 5a b0 13 f0       	push   $0xf013b05a
f0121dcf:	e8 31 e4 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0121dd4:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f0121ddb:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121dde:	e8 ba ad fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121de3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121de6:	e8 dd 1f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121deb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0121dee:	83 ec 0c             	sub    $0xc,%esp
f0121df1:	68 00 fc 1f 00       	push   $0x1ffc00
f0121df6:	e8 8a 5a fe ff       	call   f0107885 <kmalloc>
f0121dfb:	83 c4 10             	add    $0x10,%esp
f0121dfe:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121e04:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0121e0a:	89 c1                	mov    %eax,%ecx
f0121e0c:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0121e13:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0121e16:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121e1b:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0121e1e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0121e21:	ba 00 00 00 00       	mov    $0x0,%edx
f0121e26:	f7 75 b0             	divl   -0x50(%ebp)
f0121e29:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0121e2c:	29 d0                	sub    %edx,%eax
f0121e2e:	89 c3                	mov    %eax,%ebx
f0121e30:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0121e37:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0121e3c:	0f b6 d0             	movzbl %al,%edx
f0121e3f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0121e42:	01 d0                	add    %edx,%eax
f0121e44:	48                   	dec    %eax
f0121e45:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0121e48:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0121e4b:	ba 00 00 00 00       	mov    $0x0,%edx
f0121e50:	f7 75 a8             	divl   -0x58(%ebp)
f0121e53:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0121e56:	29 d0                	sub    %edx,%eax
f0121e58:	01 c3                	add    %eax,%ebx
f0121e5a:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0121e61:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0121e66:	0f b6 c0             	movzbl %al,%eax
f0121e69:	c1 e0 04             	shl    $0x4,%eax
f0121e6c:	89 c2                	mov    %eax,%edx
f0121e6e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0121e71:	01 d0                	add    %edx,%eax
f0121e73:	48                   	dec    %eax
f0121e74:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0121e77:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0121e7a:	ba 00 00 00 00       	mov    $0x0,%edx
f0121e7f:	f7 75 a0             	divl   -0x60(%ebp)
f0121e82:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0121e85:	29 d0                	sub    %edx,%eax
f0121e87:	01 d8                	add    %ebx,%eax
f0121e89:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0121e8e:	39 c1                	cmp    %eax,%ecx
f0121e90:	74 17                	je     f0121ea9 <test_kfree_bestfirstfit+0x28c>
f0121e92:	83 ec 04             	sub    $0x4,%esp
f0121e95:	68 40 b1 13 f0       	push   $0xf013b140
f0121e9a:	68 9e 06 00 00       	push   $0x69e
f0121e9f:	68 5a b0 13 f0       	push   $0xf013b05a
f0121ea4:	e8 5c e3 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121ea9:	e8 1a 1f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121eae:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121eb1:	74 17                	je     f0121eca <test_kfree_bestfirstfit+0x2ad>
f0121eb3:	83 ec 04             	sub    $0x4,%esp
f0121eb6:	68 74 b0 13 f0       	push   $0xf013b074
f0121ebb:	68 9f 06 00 00       	push   $0x69f
f0121ec0:	68 5a b0 13 f0       	push   $0xf013b05a
f0121ec5:	e8 3b e3 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121eca:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121ecd:	e8 cb ac fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121ed2:	29 c3                	sub    %eax,%ebx
f0121ed4:	89 d8                	mov    %ebx,%eax
f0121ed6:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121edb:	74 17                	je     f0121ef4 <test_kfree_bestfirstfit+0x2d7>
f0121edd:	83 ec 04             	sub    $0x4,%esp
f0121ee0:	68 dc b0 13 f0       	push   $0xf013b0dc
f0121ee5:	68 a0 06 00 00       	push   $0x6a0
f0121eea:	68 5a b0 13 f0       	push   $0xf013b05a
f0121eef:	e8 11 e3 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0121ef4:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f0121efb:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121efe:	e8 9a ac fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121f03:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121f06:	e8 bd 1e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121f0b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0121f0e:	83 ec 0c             	sub    $0xc,%esp
f0121f11:	68 00 08 00 00       	push   $0x800
f0121f16:	e8 6a 59 fe ff       	call   f0107885 <kmalloc>
f0121f1b:	83 c4 10             	add    $0x10,%esp
f0121f1e:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121f24:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0121f2a:	89 c1                	mov    %eax,%ecx
f0121f2c:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0121f33:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121f36:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121f3b:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0121f3e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0121f41:	ba 00 00 00 00       	mov    $0x0,%edx
f0121f46:	f7 75 98             	divl   -0x68(%ebp)
f0121f49:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0121f4c:	29 d0                	sub    %edx,%eax
f0121f4e:	89 c3                	mov    %eax,%ebx
f0121f50:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0121f57:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0121f5c:	0f b6 d0             	movzbl %al,%edx
f0121f5f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0121f62:	01 d0                	add    %edx,%eax
f0121f64:	48                   	dec    %eax
f0121f65:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0121f68:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0121f6b:	ba 00 00 00 00       	mov    $0x0,%edx
f0121f70:	f7 75 90             	divl   -0x70(%ebp)
f0121f73:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0121f76:	29 d0                	sub    %edx,%eax
f0121f78:	01 c3                	add    %eax,%ebx
f0121f7a:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0121f81:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0121f86:	0f b6 c0             	movzbl %al,%eax
f0121f89:	c1 e0 04             	shl    $0x4,%eax
f0121f8c:	89 c2                	mov    %eax,%edx
f0121f8e:	8b 45 88             	mov    -0x78(%ebp),%eax
f0121f91:	01 d0                	add    %edx,%eax
f0121f93:	48                   	dec    %eax
f0121f94:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0121f97:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0121f9a:	ba 00 00 00 00       	mov    $0x0,%edx
f0121f9f:	f7 75 88             	divl   -0x78(%ebp)
f0121fa2:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0121fa5:	29 d0                	sub    %edx,%eax
f0121fa7:	01 d8                	add    %ebx,%eax
f0121fa9:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0121fae:	39 c1                	cmp    %eax,%ecx
f0121fb0:	74 17                	je     f0121fc9 <test_kfree_bestfirstfit+0x3ac>
f0121fb2:	83 ec 04             	sub    $0x4,%esp
f0121fb5:	68 40 b1 13 f0       	push   $0xf013b140
f0121fba:	68 a7 06 00 00       	push   $0x6a7
f0121fbf:	68 5a b0 13 f0       	push   $0xf013b05a
f0121fc4:	e8 3c e2 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121fc9:	e8 fa 1d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121fce:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121fd1:	74 17                	je     f0121fea <test_kfree_bestfirstfit+0x3cd>
f0121fd3:	83 ec 04             	sub    $0x4,%esp
f0121fd6:	68 74 b0 13 f0       	push   $0xf013b074
f0121fdb:	68 a8 06 00 00       	push   $0x6a8
f0121fe0:	68 5a b0 13 f0       	push   $0xf013b05a
f0121fe5:	e8 1b e2 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121fea:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121fed:	e8 ab ab fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0121ff2:	29 c3                	sub    %eax,%ebx
f0121ff4:	89 d8                	mov    %ebx,%eax
f0121ff6:	83 f8 01             	cmp    $0x1,%eax
f0121ff9:	74 17                	je     f0122012 <test_kfree_bestfirstfit+0x3f5>
f0121ffb:	83 ec 04             	sub    $0x4,%esp
f0121ffe:	68 dc b0 13 f0       	push   $0xf013b0dc
f0122003:	68 a9 06 00 00       	push   $0x6a9
f0122008:	68 5a b0 13 f0       	push   $0xf013b05a
f012200d:	e8 f3 e1 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0122012:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f0122019:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f012201c:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0122022:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0122025:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012202c:	eb 0e                	jmp    f012203c <test_kfree_bestfirstfit+0x41f>
		{
			ptr[i] = 2 ;
f012202e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122031:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122034:	01 d0                	add    %edx,%eax
f0122036:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0122039:	ff 45 f4             	incl   -0xc(%ebp)
f012203c:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0122042:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122045:	7f e7                	jg     f012202e <test_kfree_bestfirstfit+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122047:	e8 51 ab fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012204c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012204f:	e8 74 1d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122054:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0122057:	83 ec 0c             	sub    $0xc,%esp
f012205a:	68 00 08 00 00       	push   $0x800
f012205f:	e8 21 58 fe ff       	call   f0107885 <kmalloc>
f0122064:	83 c4 10             	add    $0x10,%esp
f0122067:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012206d:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0122073:	89 c1                	mov    %eax,%ecx
f0122075:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012207c:	10 00 00 
f012207f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0122085:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012208a:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0122090:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0122096:	ba 00 00 00 00       	mov    $0x0,%edx
f012209b:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f01220a1:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01220a7:	29 d0                	sub    %edx,%eax
f01220a9:	89 c3                	mov    %eax,%ebx
f01220ab:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f01220b2:	10 00 00 
f01220b5:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01220ba:	0f b6 d0             	movzbl %al,%edx
f01220bd:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01220c3:	01 d0                	add    %edx,%eax
f01220c5:	48                   	dec    %eax
f01220c6:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01220cc:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01220d2:	ba 00 00 00 00       	mov    $0x0,%edx
f01220d7:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01220dd:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01220e3:	29 d0                	sub    %edx,%eax
f01220e5:	01 c3                	add    %eax,%ebx
f01220e7:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01220ee:	10 00 00 
f01220f1:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01220f6:	0f b6 c0             	movzbl %al,%eax
f01220f9:	c1 e0 04             	shl    $0x4,%eax
f01220fc:	89 c2                	mov    %eax,%edx
f01220fe:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0122104:	01 d0                	add    %edx,%eax
f0122106:	48                   	dec    %eax
f0122107:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012210d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0122113:	ba 00 00 00 00       	mov    $0x0,%edx
f0122118:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012211e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0122124:	29 d0                	sub    %edx,%eax
f0122126:	01 d8                	add    %ebx,%eax
f0122128:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012212d:	39 c1                	cmp    %eax,%ecx
f012212f:	74 17                	je     f0122148 <test_kfree_bestfirstfit+0x52b>
f0122131:	83 ec 04             	sub    $0x4,%esp
f0122134:	68 40 b1 13 f0       	push   $0xf013b140
f0122139:	68 b5 06 00 00       	push   $0x6b5
f012213e:	68 5a b0 13 f0       	push   $0xf013b05a
f0122143:	e8 bd e0 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122148:	e8 7b 1c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012214d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122150:	74 17                	je     f0122169 <test_kfree_bestfirstfit+0x54c>
f0122152:	83 ec 04             	sub    $0x4,%esp
f0122155:	68 74 b0 13 f0       	push   $0xf013b074
f012215a:	68 b6 06 00 00       	push   $0x6b6
f012215f:	68 5a b0 13 f0       	push   $0xf013b05a
f0122164:	e8 9c e0 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122169:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012216c:	e8 2c aa fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122171:	29 c3                	sub    %eax,%ebx
f0122173:	89 d8                	mov    %ebx,%eax
f0122175:	83 f8 01             	cmp    $0x1,%eax
f0122178:	74 17                	je     f0122191 <test_kfree_bestfirstfit+0x574>
f012217a:	83 ec 04             	sub    $0x4,%esp
f012217d:	68 dc b0 13 f0       	push   $0xf013b0dc
f0122182:	68 b7 06 00 00       	push   $0x6b7
f0122187:	68 5a b0 13 f0       	push   $0xf013b05a
f012218c:	e8 74 e0 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0122191:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f0122198:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012219b:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01221a1:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01221a4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01221ab:	eb 0e                	jmp    f01221bb <test_kfree_bestfirstfit+0x59e>
		{
			ptr[i] = 3 ;
f01221ad:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01221b0:	8b 45 80             	mov    -0x80(%ebp),%eax
f01221b3:	01 d0                	add    %edx,%eax
f01221b5:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01221b8:	ff 45 f4             	incl   -0xc(%ebp)
f01221bb:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01221c1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01221c4:	7f e7                	jg     f01221ad <test_kfree_bestfirstfit+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01221c6:	e8 d2 a9 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01221cb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01221ce:	e8 f5 1b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01221d3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01221d6:	83 ec 0c             	sub    $0xc,%esp
f01221d9:	68 00 1c 00 00       	push   $0x1c00
f01221de:	e8 a2 56 fe ff       	call   f0107885 <kmalloc>
f01221e3:	83 c4 10             	add    $0x10,%esp
f01221e6:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01221ec:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01221f2:	89 c1                	mov    %eax,%ecx
f01221f4:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01221fb:	10 00 00 
f01221fe:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0122204:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122209:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012220f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0122215:	ba 00 00 00 00       	mov    $0x0,%edx
f012221a:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0122220:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0122226:	29 d0                	sub    %edx,%eax
f0122228:	89 c3                	mov    %eax,%ebx
f012222a:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0122231:	10 00 00 
f0122234:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0122239:	0f b6 d0             	movzbl %al,%edx
f012223c:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0122242:	01 d0                	add    %edx,%eax
f0122244:	48                   	dec    %eax
f0122245:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012224b:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0122251:	ba 00 00 00 00       	mov    $0x0,%edx
f0122256:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012225c:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0122262:	29 d0                	sub    %edx,%eax
f0122264:	01 c3                	add    %eax,%ebx
f0122266:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012226d:	10 00 00 
f0122270:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0122275:	0f b6 c0             	movzbl %al,%eax
f0122278:	c1 e0 04             	shl    $0x4,%eax
f012227b:	89 c2                	mov    %eax,%edx
f012227d:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0122283:	01 d0                	add    %edx,%eax
f0122285:	48                   	dec    %eax
f0122286:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012228c:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0122292:	ba 00 00 00 00       	mov    $0x0,%edx
f0122297:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012229d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01222a3:	29 d0                	sub    %edx,%eax
f01222a5:	01 d8                	add    %ebx,%eax
f01222a7:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01222ac:	39 c1                	cmp    %eax,%ecx
f01222ae:	74 17                	je     f01222c7 <test_kfree_bestfirstfit+0x6aa>
f01222b0:	83 ec 04             	sub    $0x4,%esp
f01222b3:	68 40 b1 13 f0       	push   $0xf013b140
f01222b8:	68 c3 06 00 00       	push   $0x6c3
f01222bd:	68 5a b0 13 f0       	push   $0xf013b05a
f01222c2:	e8 3e df fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01222c7:	e8 fc 1a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01222cc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01222cf:	74 17                	je     f01222e8 <test_kfree_bestfirstfit+0x6cb>
f01222d1:	83 ec 04             	sub    $0x4,%esp
f01222d4:	68 74 b0 13 f0       	push   $0xf013b074
f01222d9:	68 c4 06 00 00       	push   $0x6c4
f01222de:	68 5a b0 13 f0       	push   $0xf013b05a
f01222e3:	e8 1d df fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01222e8:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01222eb:	e8 ad a8 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01222f0:	29 c3                	sub    %eax,%ebx
f01222f2:	89 d8                	mov    %ebx,%eax
f01222f4:	83 f8 02             	cmp    $0x2,%eax
f01222f7:	74 17                	je     f0122310 <test_kfree_bestfirstfit+0x6f3>
f01222f9:	83 ec 04             	sub    $0x4,%esp
f01222fc:	68 dc b0 13 f0       	push   $0xf013b0dc
f0122301:	68 c5 06 00 00       	push   $0x6c5
f0122306:	68 5a b0 13 f0       	push   $0xf013b05a
f012230b:	e8 f5 de fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0122310:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f0122317:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f012231a:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0122320:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0122323:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012232a:	eb 0e                	jmp    f012233a <test_kfree_bestfirstfit+0x71d>
		{
			ptr[i] = 4 ;
f012232c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012232f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122332:	01 d0                	add    %edx,%eax
f0122334:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0122337:	ff 45 f4             	incl   -0xc(%ebp)
f012233a:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0122340:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122343:	7f e7                	jg     f012232c <test_kfree_bestfirstfit+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122345:	e8 53 a8 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012234a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012234d:	e8 76 1a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122352:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0122355:	83 ec 0c             	sub    $0xc,%esp
f0122358:	68 00 fc 2f 00       	push   $0x2ffc00
f012235d:	e8 23 55 fe ff       	call   f0107885 <kmalloc>
f0122362:	83 c4 10             	add    $0x10,%esp
f0122365:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012236b:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0122371:	89 c1                	mov    %eax,%ecx
f0122373:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012237a:	10 00 00 
f012237d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0122383:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122388:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012238e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0122394:	ba 00 00 00 00       	mov    $0x0,%edx
f0122399:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012239f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01223a5:	29 d0                	sub    %edx,%eax
f01223a7:	89 c3                	mov    %eax,%ebx
f01223a9:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f01223b0:	10 00 00 
f01223b3:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01223b8:	0f b6 d0             	movzbl %al,%edx
f01223bb:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01223c1:	01 d0                	add    %edx,%eax
f01223c3:	48                   	dec    %eax
f01223c4:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f01223ca:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01223d0:	ba 00 00 00 00       	mov    $0x0,%edx
f01223d5:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f01223db:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01223e1:	29 d0                	sub    %edx,%eax
f01223e3:	01 c3                	add    %eax,%ebx
f01223e5:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f01223ec:	10 00 00 
f01223ef:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01223f4:	0f b6 c0             	movzbl %al,%eax
f01223f7:	c1 e0 04             	shl    $0x4,%eax
f01223fa:	89 c2                	mov    %eax,%edx
f01223fc:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0122402:	01 d0                	add    %edx,%eax
f0122404:	48                   	dec    %eax
f0122405:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012240b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0122411:	ba 00 00 00 00       	mov    $0x0,%edx
f0122416:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012241c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0122422:	29 d0                	sub    %edx,%eax
f0122424:	01 d8                	add    %ebx,%eax
f0122426:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012242b:	39 c1                	cmp    %eax,%ecx
f012242d:	74 17                	je     f0122446 <test_kfree_bestfirstfit+0x829>
f012242f:	83 ec 04             	sub    $0x4,%esp
f0122432:	68 40 b1 13 f0       	push   $0xf013b140
f0122437:	68 d1 06 00 00       	push   $0x6d1
f012243c:	68 5a b0 13 f0       	push   $0xf013b05a
f0122441:	e8 bf dd fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122446:	e8 7d 19 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012244b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012244e:	74 17                	je     f0122467 <test_kfree_bestfirstfit+0x84a>
f0122450:	83 ec 04             	sub    $0x4,%esp
f0122453:	68 74 b0 13 f0       	push   $0xf013b074
f0122458:	68 d2 06 00 00       	push   $0x6d2
f012245d:	68 5a b0 13 f0       	push   $0xf013b05a
f0122462:	e8 9e dd fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122467:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012246a:	e8 2e a7 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012246f:	29 c3                	sub    %eax,%ebx
f0122471:	89 d8                	mov    %ebx,%eax
f0122473:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122478:	74 17                	je     f0122491 <test_kfree_bestfirstfit+0x874>
f012247a:	83 ec 04             	sub    $0x4,%esp
f012247d:	68 dc b0 13 f0       	push   $0xf013b0dc
f0122482:	68 d3 06 00 00       	push   $0x6d3
f0122487:	68 5a b0 13 f0       	push   $0xf013b05a
f012248c:	e8 74 dd fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0122491:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f0122498:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f012249b:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01224a1:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01224a4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01224ab:	eb 0e                	jmp    f01224bb <test_kfree_bestfirstfit+0x89e>
		{
			ptr[i] = 5 ;
f01224ad:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01224b0:	8b 45 80             	mov    -0x80(%ebp),%eax
f01224b3:	01 d0                	add    %edx,%eax
f01224b5:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01224b8:	ff 45 f4             	incl   -0xc(%ebp)
f01224bb:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01224c1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01224c4:	7f e7                	jg     f01224ad <test_kfree_bestfirstfit+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01224c6:	e8 d2 a6 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01224cb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01224ce:	e8 f5 18 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01224d3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01224d6:	83 ec 0c             	sub    $0xc,%esp
f01224d9:	68 00 fc 5f 00       	push   $0x5ffc00
f01224de:	e8 a2 53 fe ff       	call   f0107885 <kmalloc>
f01224e3:	83 c4 10             	add    $0x10,%esp
f01224e6:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01224ec:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f01224f2:	89 c1                	mov    %eax,%ecx
f01224f4:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01224fb:	10 00 00 
f01224fe:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0122504:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122509:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012250f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0122515:	ba 00 00 00 00       	mov    $0x0,%edx
f012251a:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0122520:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0122526:	29 d0                	sub    %edx,%eax
f0122528:	89 c3                	mov    %eax,%ebx
f012252a:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0122531:	10 00 00 
f0122534:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0122539:	0f b6 d0             	movzbl %al,%edx
f012253c:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0122542:	01 d0                	add    %edx,%eax
f0122544:	48                   	dec    %eax
f0122545:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012254b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0122551:	ba 00 00 00 00       	mov    $0x0,%edx
f0122556:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012255c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0122562:	29 d0                	sub    %edx,%eax
f0122564:	01 c3                	add    %eax,%ebx
f0122566:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012256d:	10 00 00 
f0122570:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0122575:	0f b6 c0             	movzbl %al,%eax
f0122578:	c1 e0 04             	shl    $0x4,%eax
f012257b:	89 c2                	mov    %eax,%edx
f012257d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0122583:	01 d0                	add    %edx,%eax
f0122585:	48                   	dec    %eax
f0122586:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012258c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0122592:	ba 00 00 00 00       	mov    $0x0,%edx
f0122597:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012259d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01225a3:	29 d0                	sub    %edx,%eax
f01225a5:	01 d8                	add    %ebx,%eax
f01225a7:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01225ac:	39 c1                	cmp    %eax,%ecx
f01225ae:	74 17                	je     f01225c7 <test_kfree_bestfirstfit+0x9aa>
f01225b0:	83 ec 04             	sub    $0x4,%esp
f01225b3:	68 40 b1 13 f0       	push   $0xf013b140
f01225b8:	68 df 06 00 00       	push   $0x6df
f01225bd:	68 5a b0 13 f0       	push   $0xf013b05a
f01225c2:	e8 3e dc fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01225c7:	e8 fc 17 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01225cc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01225cf:	74 17                	je     f01225e8 <test_kfree_bestfirstfit+0x9cb>
f01225d1:	83 ec 04             	sub    $0x4,%esp
f01225d4:	68 74 b0 13 f0       	push   $0xf013b074
f01225d9:	68 e0 06 00 00       	push   $0x6e0
f01225de:	68 5a b0 13 f0       	push   $0xf013b05a
f01225e3:	e8 1d dc fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01225e8:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01225eb:	e8 ad a5 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01225f0:	29 c3                	sub    %eax,%ebx
f01225f2:	89 d8                	mov    %ebx,%eax
f01225f4:	3d 00 06 00 00       	cmp    $0x600,%eax
f01225f9:	74 17                	je     f0122612 <test_kfree_bestfirstfit+0x9f5>
f01225fb:	83 ec 04             	sub    $0x4,%esp
f01225fe:	68 dc b0 13 f0       	push   $0xf013b0dc
f0122603:	68 e1 06 00 00       	push   $0x6e1
f0122608:	68 5a b0 13 f0       	push   $0xf013b05a
f012260d:	e8 f3 db fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0122612:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f0122619:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012261c:	e8 7c a5 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122621:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122624:	e8 9f 17 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122629:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012262c:	83 ec 0c             	sub    $0xc,%esp
f012262f:	68 00 38 00 00       	push   $0x3800
f0122634:	e8 4c 52 fe ff       	call   f0107885 <kmalloc>
f0122639:	83 c4 10             	add    $0x10,%esp
f012263c:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122642:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0122648:	89 c1                	mov    %eax,%ecx
f012264a:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0122651:	10 00 00 
f0122654:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012265a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012265f:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0122665:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012266b:	ba 00 00 00 00       	mov    $0x0,%edx
f0122670:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0122676:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012267c:	29 d0                	sub    %edx,%eax
f012267e:	89 c3                	mov    %eax,%ebx
f0122680:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0122687:	10 00 00 
f012268a:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012268f:	0f b6 d0             	movzbl %al,%edx
f0122692:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0122698:	01 d0                	add    %edx,%eax
f012269a:	48                   	dec    %eax
f012269b:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f01226a1:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01226a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01226ac:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f01226b2:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01226b8:	29 d0                	sub    %edx,%eax
f01226ba:	01 c3                	add    %eax,%ebx
f01226bc:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f01226c3:	10 00 00 
f01226c6:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01226cb:	0f b6 c0             	movzbl %al,%eax
f01226ce:	c1 e0 04             	shl    $0x4,%eax
f01226d1:	89 c2                	mov    %eax,%edx
f01226d3:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01226d9:	01 d0                	add    %edx,%eax
f01226db:	48                   	dec    %eax
f01226dc:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f01226e2:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01226e8:	ba 00 00 00 00       	mov    $0x0,%edx
f01226ed:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f01226f3:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01226f9:	29 d0                	sub    %edx,%eax
f01226fb:	01 d8                	add    %ebx,%eax
f01226fd:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0122702:	39 c1                	cmp    %eax,%ecx
f0122704:	74 17                	je     f012271d <test_kfree_bestfirstfit+0xb00>
f0122706:	83 ec 04             	sub    $0x4,%esp
f0122709:	68 40 b1 13 f0       	push   $0xf013b140
f012270e:	68 e8 06 00 00       	push   $0x6e8
f0122713:	68 5a b0 13 f0       	push   $0xf013b05a
f0122718:	e8 e8 da fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012271d:	e8 a6 16 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122722:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122725:	74 17                	je     f012273e <test_kfree_bestfirstfit+0xb21>
f0122727:	83 ec 04             	sub    $0x4,%esp
f012272a:	68 74 b0 13 f0       	push   $0xf013b074
f012272f:	68 e9 06 00 00       	push   $0x6e9
f0122734:	68 5a b0 13 f0       	push   $0xf013b05a
f0122739:	e8 c7 da fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012273e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122741:	e8 57 a4 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122746:	29 c3                	sub    %eax,%ebx
f0122748:	89 d8                	mov    %ebx,%eax
f012274a:	83 f8 04             	cmp    $0x4,%eax
f012274d:	74 17                	je     f0122766 <test_kfree_bestfirstfit+0xb49>
f012274f:	83 ec 04             	sub    $0x4,%esp
f0122752:	68 dc b0 13 f0       	push   $0xf013b0dc
f0122757:	68 ea 06 00 00       	push   $0x6ea
f012275c:	68 5a b0 13 f0       	push   $0xf013b05a
f0122761:	e8 9f da fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0122766:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f012276d:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0122770:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0122776:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0122779:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122780:	eb 0e                	jmp    f0122790 <test_kfree_bestfirstfit+0xb73>
		{
			ptr[i] = 7 ;
f0122782:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122785:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122788:	01 d0                	add    %edx,%eax
f012278a:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012278d:	ff 45 f4             	incl   -0xc(%ebp)
f0122790:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0122796:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122799:	7f e7                	jg     f0122782 <test_kfree_bestfirstfit+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f012279b:	e8 fd a3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01227a0:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01227a6:	e8 1d 16 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01227ab:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f01227b1:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f01227b7:	83 ec 0c             	sub    $0xc,%esp
f01227ba:	50                   	push   %eax
f01227bb:	e8 90 51 fe ff       	call   f0107950 <kfree>
f01227c0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01227c3:	e8 00 16 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01227c8:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01227ce:	74 17                	je     f01227e7 <test_kfree_bestfirstfit+0xbca>
f01227d0:	83 ec 04             	sub    $0x4,%esp
f01227d3:	68 74 b0 13 f0       	push   $0xf013b074
f01227d8:	68 f9 06 00 00       	push   $0x6f9
f01227dd:	68 5a b0 13 f0       	push   $0xf013b05a
f01227e2:	e8 1e da fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01227e7:	e8 b1 a3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01227ec:	89 c2                	mov    %eax,%edx
f01227ee:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01227f4:	29 c2                	sub    %eax,%edx
f01227f6:	89 d0                	mov    %edx,%eax
f01227f8:	3d 00 02 00 00       	cmp    $0x200,%eax
f01227fd:	74 17                	je     f0122816 <test_kfree_bestfirstfit+0xbf9>
f01227ff:	83 ec 04             	sub    $0x4,%esp
f0122802:	68 e4 b7 13 f0       	push   $0xf013b7e4
f0122807:	68 fa 06 00 00       	push   $0x6fa
f012280c:	68 5a b0 13 f0       	push   $0xf013b05a
f0122811:	e8 ef d9 fd ff       	call   f0100205 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122816:	e8 82 a3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012281b:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122821:	e8 a2 15 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122826:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f012282c:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0122832:	83 ec 0c             	sub    $0xc,%esp
f0122835:	50                   	push   %eax
f0122836:	e8 15 51 fe ff       	call   f0107950 <kfree>
f012283b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012283e:	e8 85 15 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122843:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0122849:	74 17                	je     f0122862 <test_kfree_bestfirstfit+0xc45>
f012284b:	83 ec 04             	sub    $0x4,%esp
f012284e:	68 74 b0 13 f0       	push   $0xf013b074
f0122853:	68 00 07 00 00       	push   $0x700
f0122858:	68 5a b0 13 f0       	push   $0xf013b05a
f012285d:	e8 a3 d9 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0122862:	e8 36 a3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122867:	89 c2                	mov    %eax,%edx
f0122869:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012286f:	29 c2                	sub    %eax,%edx
f0122871:	89 d0                	mov    %edx,%eax
f0122873:	83 f8 01             	cmp    $0x1,%eax
f0122876:	74 17                	je     f012288f <test_kfree_bestfirstfit+0xc72>
f0122878:	83 ec 04             	sub    $0x4,%esp
f012287b:	68 e4 b7 13 f0       	push   $0xf013b7e4
f0122880:	68 01 07 00 00       	push   $0x701
f0122885:	68 5a b0 13 f0       	push   $0xf013b05a
f012288a:	e8 76 d9 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012288f:	e8 09 a3 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122894:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012289a:	e8 29 15 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012289f:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f01228a5:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f01228ab:	83 ec 0c             	sub    $0xc,%esp
f01228ae:	50                   	push   %eax
f01228af:	e8 9c 50 fe ff       	call   f0107950 <kfree>
f01228b4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01228b7:	e8 0c 15 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01228bc:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01228c2:	74 17                	je     f01228db <test_kfree_bestfirstfit+0xcbe>
f01228c4:	83 ec 04             	sub    $0x4,%esp
f01228c7:	68 74 b0 13 f0       	push   $0xf013b074
f01228cc:	68 07 07 00 00       	push   $0x707
f01228d1:	68 5a b0 13 f0       	push   $0xf013b05a
f01228d6:	e8 2a d9 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01228db:	e8 bd a2 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01228e0:	89 c2                	mov    %eax,%edx
f01228e2:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01228e8:	29 c2                	sub    %eax,%edx
f01228ea:	89 d0                	mov    %edx,%eax
f01228ec:	3d 00 02 00 00       	cmp    $0x200,%eax
f01228f1:	74 17                	je     f012290a <test_kfree_bestfirstfit+0xced>
f01228f3:	83 ec 04             	sub    $0x4,%esp
f01228f6:	68 e4 b7 13 f0       	push   $0xf013b7e4
f01228fb:	68 08 07 00 00       	push   $0x708
f0122900:	68 5a b0 13 f0       	push   $0xf013b05a
f0122905:	e8 fb d8 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012290a:	e8 8e a2 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012290f:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122915:	e8 ae 14 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012291a:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0122920:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0122926:	83 ec 0c             	sub    $0xc,%esp
f0122929:	50                   	push   %eax
f012292a:	e8 21 50 fe ff       	call   f0107950 <kfree>
f012292f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122932:	e8 91 14 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122937:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f012293d:	74 17                	je     f0122956 <test_kfree_bestfirstfit+0xd39>
f012293f:	83 ec 04             	sub    $0x4,%esp
f0122942:	68 74 b0 13 f0       	push   $0xf013b074
f0122947:	68 0e 07 00 00       	push   $0x70e
f012294c:	68 5a b0 13 f0       	push   $0xf013b05a
f0122951:	e8 af d8 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122956:	e8 42 a2 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012295b:	89 c2                	mov    %eax,%edx
f012295d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0122963:	29 c2                	sub    %eax,%edx
f0122965:	89 d0                	mov    %edx,%eax
f0122967:	3d 00 06 00 00       	cmp    $0x600,%eax
f012296c:	74 17                	je     f0122985 <test_kfree_bestfirstfit+0xd68>
f012296e:	83 ec 04             	sub    $0x4,%esp
f0122971:	68 e4 b7 13 f0       	push   $0xf013b7e4
f0122976:	68 0f 07 00 00       	push   $0x70f
f012297b:	68 5a b0 13 f0       	push   $0xf013b05a
f0122980:	e8 80 d8 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0122985:	83 ec 0c             	sub    $0xc,%esp
f0122988:	68 1c b8 13 f0       	push   $0xf013b81c
f012298d:	e8 7c e3 fd ff       	call   f0100d0e <cprintf>
f0122992:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f0122995:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f012299b:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012299e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01229a5:	eb 1e                	jmp    f01229c5 <test_kfree_bestfirstfit+0xda8>
		{
			sums[3] += ptr[i] ;
f01229a7:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f01229ad:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01229b0:	8b 45 80             	mov    -0x80(%ebp),%eax
f01229b3:	01 c8                	add    %ecx,%eax
f01229b5:	8a 00                	mov    (%eax),%al
f01229b7:	0f be c0             	movsbl %al,%eax
f01229ba:	01 d0                	add    %edx,%eax
f01229bc:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01229c2:	ff 45 f4             	incl   -0xc(%ebp)
f01229c5:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01229cb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01229ce:	7f d7                	jg     f01229a7 <test_kfree_bestfirstfit+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f01229d0:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f01229d6:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01229dc:	89 c1                	mov    %eax,%ecx
f01229de:	01 c9                	add    %ecx,%ecx
f01229e0:	01 c8                	add    %ecx,%eax
f01229e2:	39 c2                	cmp    %eax,%edx
f01229e4:	74 17                	je     f01229fd <test_kfree_bestfirstfit+0xde0>
f01229e6:	83 ec 04             	sub    $0x4,%esp
f01229e9:	68 40 b8 13 f0       	push   $0xf013b840
f01229ee:	68 1c 07 00 00       	push   $0x71c
f01229f3:	68 5a b0 13 f0       	push   $0xf013b05a
f01229f8:	e8 08 d8 fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f01229fd:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0122a03:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0122a06:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122a0d:	eb 1e                	jmp    f0122a2d <test_kfree_bestfirstfit+0xe10>
		{
			sums[4] += ptr[i] ;
f0122a0f:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f0122a15:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122a18:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122a1b:	01 c8                	add    %ecx,%eax
f0122a1d:	8a 00                	mov    (%eax),%al
f0122a1f:	0f be c0             	movsbl %al,%eax
f0122a22:	01 d0                	add    %edx,%eax
f0122a24:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0122a2a:	ff 45 f4             	incl   -0xc(%ebp)
f0122a2d:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0122a33:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122a36:	7f d7                	jg     f0122a0f <test_kfree_bestfirstfit+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0122a38:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0122a3e:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0122a44:	c1 e2 02             	shl    $0x2,%edx
f0122a47:	39 d0                	cmp    %edx,%eax
f0122a49:	74 17                	je     f0122a62 <test_kfree_bestfirstfit+0xe45>
f0122a4b:	83 ec 04             	sub    $0x4,%esp
f0122a4e:	68 40 b8 13 f0       	push   $0xf013b840
f0122a53:	68 24 07 00 00       	push   $0x724
f0122a58:	68 5a b0 13 f0       	push   $0xf013b05a
f0122a5d:	e8 a3 d7 fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0122a62:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0122a68:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0122a6b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122a72:	eb 1e                	jmp    f0122a92 <test_kfree_bestfirstfit+0xe75>
		{
			sums[5] += ptr[i] ;
f0122a74:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f0122a7a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122a7d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122a80:	01 c8                	add    %ecx,%eax
f0122a82:	8a 00                	mov    (%eax),%al
f0122a84:	0f be c0             	movsbl %al,%eax
f0122a87:	01 d0                	add    %edx,%eax
f0122a89:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0122a8f:	ff 45 f4             	incl   -0xc(%ebp)
f0122a92:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0122a98:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122a9b:	7f d7                	jg     f0122a74 <test_kfree_bestfirstfit+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0122a9d:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f0122aa3:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0122aa9:	89 d0                	mov    %edx,%eax
f0122aab:	c1 e0 02             	shl    $0x2,%eax
f0122aae:	01 d0                	add    %edx,%eax
f0122ab0:	39 c1                	cmp    %eax,%ecx
f0122ab2:	74 17                	je     f0122acb <test_kfree_bestfirstfit+0xeae>
f0122ab4:	83 ec 04             	sub    $0x4,%esp
f0122ab7:	68 40 b8 13 f0       	push   $0xf013b840
f0122abc:	68 2c 07 00 00       	push   $0x72c
f0122ac1:	68 5a b0 13 f0       	push   $0xf013b05a
f0122ac6:	e8 3a d7 fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0122acb:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0122ad1:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0122ad4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122adb:	eb 1e                	jmp    f0122afb <test_kfree_bestfirstfit+0xede>
		{
			sums[7] += ptr[i] ;
f0122add:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f0122ae3:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122ae6:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122ae9:	01 c8                	add    %ecx,%eax
f0122aeb:	8a 00                	mov    (%eax),%al
f0122aed:	0f be c0             	movsbl %al,%eax
f0122af0:	01 d0                	add    %edx,%eax
f0122af2:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0122af8:	ff 45 f4             	incl   -0xc(%ebp)
f0122afb:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0122b01:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122b04:	7f d7                	jg     f0122add <test_kfree_bestfirstfit+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0122b06:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f0122b0c:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0122b12:	89 d0                	mov    %edx,%eax
f0122b14:	01 c0                	add    %eax,%eax
f0122b16:	01 d0                	add    %edx,%eax
f0122b18:	01 c0                	add    %eax,%eax
f0122b1a:	01 d0                	add    %edx,%eax
f0122b1c:	39 c1                	cmp    %eax,%ecx
f0122b1e:	74 17                	je     f0122b37 <test_kfree_bestfirstfit+0xf1a>
f0122b20:	83 ec 04             	sub    $0x4,%esp
f0122b23:	68 40 b8 13 f0       	push   $0xf013b840
f0122b28:	68 34 07 00 00       	push   $0x734
f0122b2d:	68 5a b0 13 f0       	push   $0xf013b05a
f0122b32:	e8 ce d6 fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b30%");
f0122b37:	83 ec 0c             	sub    $0xc,%esp
f0122b3a:	68 73 b8 13 f0       	push   $0xf013b873
f0122b3f:	e8 ca e1 fd ff       	call   f0100d0e <cprintf>
f0122b44:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//Allocate in merged freed space
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122b47:	e8 51 a0 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122b4c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122b4f:	e8 74 12 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122b54:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega);
f0122b57:	83 ec 0c             	sub    $0xc,%esp
f0122b5a:	68 00 00 30 00       	push   $0x300000
f0122b5f:	e8 21 4d fe ff       	call   f0107885 <kmalloc>
f0122b64:	83 c4 10             	add    $0x10,%esp
f0122b67:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122b6d:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0122b73:	89 c1                	mov    %eax,%ecx
f0122b75:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0122b7c:	10 00 00 
f0122b7f:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0122b85:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122b8a:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0122b90:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0122b96:	ba 00 00 00 00       	mov    $0x0,%edx
f0122b9b:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0122ba1:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0122ba7:	29 d0                	sub    %edx,%eax
f0122ba9:	89 c3                	mov    %eax,%ebx
f0122bab:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0122bb2:	10 00 00 
f0122bb5:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0122bba:	0f b6 d0             	movzbl %al,%edx
f0122bbd:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0122bc3:	01 d0                	add    %edx,%eax
f0122bc5:	48                   	dec    %eax
f0122bc6:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0122bcc:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0122bd2:	ba 00 00 00 00       	mov    $0x0,%edx
f0122bd7:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0122bdd:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0122be3:	29 d0                	sub    %edx,%eax
f0122be5:	01 c3                	add    %eax,%ebx
f0122be7:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0122bee:	10 00 00 
f0122bf1:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0122bf6:	0f b6 c0             	movzbl %al,%eax
f0122bf9:	c1 e0 04             	shl    $0x4,%eax
f0122bfc:	89 c2                	mov    %eax,%edx
f0122bfe:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0122c04:	01 d0                	add    %edx,%eax
f0122c06:	48                   	dec    %eax
f0122c07:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0122c0d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0122c13:	ba 00 00 00 00       	mov    $0x0,%edx
f0122c18:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0122c1e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0122c24:	29 d0                	sub    %edx,%eax
f0122c26:	01 d8                	add    %ebx,%eax
f0122c28:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0122c2d:	39 c1                	cmp    %eax,%ecx
f0122c2f:	74 17                	je     f0122c48 <test_kfree_bestfirstfit+0x102b>
f0122c31:	83 ec 04             	sub    $0x4,%esp
f0122c34:	68 40 b1 13 f0       	push   $0xf013b140
f0122c39:	68 3f 07 00 00       	push   $0x73f
f0122c3e:	68 5a b0 13 f0       	push   $0xf013b05a
f0122c43:	e8 bd d5 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122c48:	e8 7b 11 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122c4d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122c50:	74 17                	je     f0122c69 <test_kfree_bestfirstfit+0x104c>
f0122c52:	83 ec 04             	sub    $0x4,%esp
f0122c55:	68 74 b0 13 f0       	push   $0xf013b074
f0122c5a:	68 40 07 00 00       	push   $0x740
f0122c5f:	68 5a b0 13 f0       	push   $0xf013b05a
f0122c64:	e8 9c d5 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122c69:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122c6c:	e8 2c 9f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122c71:	29 c3                	sub    %eax,%ebx
f0122c73:	89 d8                	mov    %ebx,%eax
f0122c75:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122c7a:	74 17                	je     f0122c93 <test_kfree_bestfirstfit+0x1076>
f0122c7c:	83 ec 04             	sub    $0x4,%esp
f0122c7f:	68 dc b0 13 f0       	push   $0xf013b0dc
f0122c84:	68 41 07 00 00       	push   $0x741
f0122c89:	68 5a b0 13 f0       	push   $0xf013b05a
f0122c8e:	e8 72 d5 fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
f0122c93:	c7 85 88 fe ff ff ff 	movl   $0x2fffff,-0x178(%ebp)
f0122c9a:	ff 2f 00 
		ptr = (char*)ptr_allocations[8];
f0122c9d:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0122ca3:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0122ca6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122cad:	eb 0e                	jmp    f0122cbd <test_kfree_bestfirstfit+0x10a0>
		{
			ptr[i] = 8 ;
f0122caf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122cb2:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122cb5:	01 d0                	add    %edx,%eax
f0122cb7:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0122cba:	ff 45 f4             	incl   -0xc(%ebp)
f0122cbd:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0122cc3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122cc6:	7f e7                	jg     f0122caf <test_kfree_bestfirstfit+0x1092>
		{
			ptr[i] = 8 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122cc8:	e8 d0 9e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122ccd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122cd0:	e8 f3 10 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122cd5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(2*kilo);
f0122cd8:	83 ec 0c             	sub    $0xc,%esp
f0122cdb:	68 00 08 00 00       	push   $0x800
f0122ce0:	e8 a0 4b fe ff       	call   f0107885 <kmalloc>
f0122ce5:	83 c4 10             	add    $0x10,%esp
f0122ce8:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122cee:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0122cf4:	89 c1                	mov    %eax,%ecx
f0122cf6:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0122cfd:	10 00 00 
f0122d00:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0122d06:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122d0b:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0122d11:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0122d17:	ba 00 00 00 00       	mov    $0x0,%edx
f0122d1c:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0122d22:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0122d28:	29 d0                	sub    %edx,%eax
f0122d2a:	89 c3                	mov    %eax,%ebx
f0122d2c:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0122d33:	10 00 00 
f0122d36:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0122d3b:	0f b6 d0             	movzbl %al,%edx
f0122d3e:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0122d44:	01 d0                	add    %edx,%eax
f0122d46:	48                   	dec    %eax
f0122d47:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0122d4d:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0122d53:	ba 00 00 00 00       	mov    $0x0,%edx
f0122d58:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0122d5e:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0122d64:	29 d0                	sub    %edx,%eax
f0122d66:	01 c3                	add    %eax,%ebx
f0122d68:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0122d6f:	10 00 00 
f0122d72:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0122d77:	0f b6 c0             	movzbl %al,%eax
f0122d7a:	c1 e0 04             	shl    $0x4,%eax
f0122d7d:	89 c2                	mov    %eax,%edx
f0122d7f:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0122d85:	01 d0                	add    %edx,%eax
f0122d87:	48                   	dec    %eax
f0122d88:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0122d8e:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0122d94:	ba 00 00 00 00       	mov    $0x0,%edx
f0122d99:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0122d9f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0122da5:	29 d0                	sub    %edx,%eax
f0122da7:	01 d8                	add    %ebx,%eax
f0122da9:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0122dae:	39 c1                	cmp    %eax,%ecx
f0122db0:	74 17                	je     f0122dc9 <test_kfree_bestfirstfit+0x11ac>
f0122db2:	83 ec 04             	sub    $0x4,%esp
f0122db5:	68 40 b1 13 f0       	push   $0xf013b140
f0122dba:	68 4d 07 00 00       	push   $0x74d
f0122dbf:	68 5a b0 13 f0       	push   $0xf013b05a
f0122dc4:	e8 3c d4 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122dc9:	e8 fa 0f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122dce:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122dd1:	74 17                	je     f0122dea <test_kfree_bestfirstfit+0x11cd>
f0122dd3:	83 ec 04             	sub    $0x4,%esp
f0122dd6:	68 74 b0 13 f0       	push   $0xf013b074
f0122ddb:	68 4e 07 00 00       	push   $0x74e
f0122de0:	68 5a b0 13 f0       	push   $0xf013b05a
f0122de5:	e8 1b d4 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122dea:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122ded:	e8 ab 9d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122df2:	29 c3                	sub    %eax,%ebx
f0122df4:	89 d8                	mov    %ebx,%eax
f0122df6:	83 f8 01             	cmp    $0x1,%eax
f0122df9:	74 17                	je     f0122e12 <test_kfree_bestfirstfit+0x11f5>
f0122dfb:	83 ec 04             	sub    $0x4,%esp
f0122dfe:	68 dc b0 13 f0       	push   $0xf013b0dc
f0122e03:	68 4f 07 00 00       	push   $0x74f
f0122e08:	68 5a b0 13 f0       	push   $0xf013b05a
f0122e0d:	e8 f3 d3 fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
f0122e12:	c7 85 8c fe ff ff ff 	movl   $0x7ff,-0x174(%ebp)
f0122e19:	07 00 00 
		ptr = (char*)ptr_allocations[9];
f0122e1c:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0122e22:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0122e25:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122e2c:	eb 0e                	jmp    f0122e3c <test_kfree_bestfirstfit+0x121f>
		{
			ptr[i] = 9 ;
f0122e2e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122e31:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122e34:	01 d0                	add    %edx,%eax
f0122e36:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0122e39:	ff 45 f4             	incl   -0xc(%ebp)
f0122e3c:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0122e42:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122e45:	7f e7                	jg     f0122e2e <test_kfree_bestfirstfit+0x1211>
		{
			ptr[i] = 9 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0122e47:	e8 51 9d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122e4c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122e4f:	e8 74 0f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122e54:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(1*Mega);
f0122e57:	83 ec 0c             	sub    $0xc,%esp
f0122e5a:	68 00 00 10 00       	push   $0x100000
f0122e5f:	e8 21 4a fe ff       	call   f0107885 <kmalloc>
f0122e64:	83 c4 10             	add    $0x10,%esp
f0122e67:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122e6d:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0122e73:	89 c1                	mov    %eax,%ecx
f0122e75:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0122e7c:	10 00 00 
f0122e7f:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0122e85:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122e8a:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0122e90:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0122e96:	ba 00 00 00 00       	mov    $0x0,%edx
f0122e9b:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0122ea1:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0122ea7:	29 d0                	sub    %edx,%eax
f0122ea9:	89 c3                	mov    %eax,%ebx
f0122eab:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0122eb2:	10 00 00 
f0122eb5:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0122eba:	0f b6 d0             	movzbl %al,%edx
f0122ebd:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0122ec3:	01 d0                	add    %edx,%eax
f0122ec5:	48                   	dec    %eax
f0122ec6:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0122ecc:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0122ed2:	ba 00 00 00 00       	mov    $0x0,%edx
f0122ed7:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0122edd:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0122ee3:	29 d0                	sub    %edx,%eax
f0122ee5:	01 c3                	add    %eax,%ebx
f0122ee7:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0122eee:	10 00 00 
f0122ef1:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0122ef6:	0f b6 c0             	movzbl %al,%eax
f0122ef9:	c1 e0 04             	shl    $0x4,%eax
f0122efc:	89 c2                	mov    %eax,%edx
f0122efe:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0122f04:	01 d0                	add    %edx,%eax
f0122f06:	48                   	dec    %eax
f0122f07:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0122f0d:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0122f13:	ba 00 00 00 00       	mov    $0x0,%edx
f0122f18:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0122f1e:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0122f24:	29 d0                	sub    %edx,%eax
f0122f26:	01 d8                	add    %ebx,%eax
f0122f28:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0122f2d:	39 c1                	cmp    %eax,%ecx
f0122f2f:	74 17                	je     f0122f48 <test_kfree_bestfirstfit+0x132b>
f0122f31:	83 ec 04             	sub    $0x4,%esp
f0122f34:	68 40 b1 13 f0       	push   $0xf013b140
f0122f39:	68 5b 07 00 00       	push   $0x75b
f0122f3e:	68 5a b0 13 f0       	push   $0xf013b05a
f0122f43:	e8 bd d2 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122f48:	e8 7b 0e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122f4d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122f50:	74 17                	je     f0122f69 <test_kfree_bestfirstfit+0x134c>
f0122f52:	83 ec 04             	sub    $0x4,%esp
f0122f55:	68 74 b0 13 f0       	push   $0xf013b074
f0122f5a:	68 5c 07 00 00       	push   $0x75c
f0122f5f:	68 5a b0 13 f0       	push   $0xf013b05a
f0122f64:	e8 9c d2 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122f69:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122f6c:	e8 2c 9c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122f71:	29 c3                	sub    %eax,%ebx
f0122f73:	89 d8                	mov    %ebx,%eax
f0122f75:	3d 00 01 00 00       	cmp    $0x100,%eax
f0122f7a:	74 17                	je     f0122f93 <test_kfree_bestfirstfit+0x1376>
f0122f7c:	83 ec 04             	sub    $0x4,%esp
f0122f7f:	68 dc b0 13 f0       	push   $0xf013b0dc
f0122f84:	68 5d 07 00 00       	push   $0x75d
f0122f89:	68 5a b0 13 f0       	push   $0xf013b05a
f0122f8e:	e8 72 d2 fd ff       	call   f0100205 <_panic>
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
f0122f93:	c7 85 90 fe ff ff ff 	movl   $0xfffff,-0x170(%ebp)
f0122f9a:	ff 0f 00 
		ptr = (char*)ptr_allocations[10];
f0122f9d:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0122fa3:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f0122fa6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122fad:	eb 0e                	jmp    f0122fbd <test_kfree_bestfirstfit+0x13a0>
		{
			ptr[i] = 10 ;
f0122faf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122fb2:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122fb5:	01 d0                	add    %edx,%eax
f0122fb7:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f0122fba:	ff 45 f4             	incl   -0xc(%ebp)
f0122fbd:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0122fc3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122fc6:	7f e7                	jg     f0122faf <test_kfree_bestfirstfit+0x1392>
		{
			ptr[i] = 10 ;
		}
	}
	cprintf("\b\b\b45%");
f0122fc8:	83 ec 0c             	sub    $0xc,%esp
f0122fcb:	68 7a b8 13 f0       	push   $0xf013b87a
f0122fd0:	e8 39 dd fd ff       	call   f0100d0e <cprintf>
f0122fd5:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0122fd8:	e8 c0 9b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0122fdd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122fe0:	e8 e3 0d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122fe5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0122fe8:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0122fee:	83 ec 0c             	sub    $0xc,%esp
f0122ff1:	50                   	push   %eax
f0122ff2:	e8 59 49 fe ff       	call   f0107950 <kfree>
f0122ff7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122ffa:	e8 c9 0d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122fff:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123002:	74 17                	je     f012301b <test_kfree_bestfirstfit+0x13fe>
f0123004:	83 ec 04             	sub    $0x4,%esp
f0123007:	68 74 b0 13 f0       	push   $0xf013b074
f012300c:	68 6d 07 00 00       	push   $0x76d
f0123011:	68 5a b0 13 f0       	push   $0xf013b05a
f0123016:	e8 ea d1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f012301b:	e8 7d 9b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123020:	89 c2                	mov    %eax,%edx
f0123022:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123025:	29 c2                	sub    %eax,%edx
f0123027:	89 d0                	mov    %edx,%eax
f0123029:	83 f8 02             	cmp    $0x2,%eax
f012302c:	74 17                	je     f0123045 <test_kfree_bestfirstfit+0x1428>
f012302e:	83 ec 04             	sub    $0x4,%esp
f0123031:	68 e4 b7 13 f0       	push   $0xf013b7e4
f0123036:	68 6e 07 00 00       	push   $0x76e
f012303b:	68 5a b0 13 f0       	push   $0xf013b05a
f0123040:	e8 c0 d1 fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123045:	e8 53 9b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012304a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012304d:	e8 76 0d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123052:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0123055:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f012305b:	83 ec 0c             	sub    $0xc,%esp
f012305e:	50                   	push   %eax
f012305f:	e8 ec 48 fe ff       	call   f0107950 <kfree>
f0123064:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123067:	e8 5c 0d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012306c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012306f:	74 17                	je     f0123088 <test_kfree_bestfirstfit+0x146b>
f0123071:	83 ec 04             	sub    $0x4,%esp
f0123074:	68 74 b0 13 f0       	push   $0xf013b074
f0123079:	68 74 07 00 00       	push   $0x774
f012307e:	68 5a b0 13 f0       	push   $0xf013b05a
f0123083:	e8 7d d1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0123088:	e8 10 9b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012308d:	89 c2                	mov    %eax,%edx
f012308f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123092:	29 c2                	sub    %eax,%edx
f0123094:	89 d0                	mov    %edx,%eax
f0123096:	3d 00 03 00 00       	cmp    $0x300,%eax
f012309b:	74 17                	je     f01230b4 <test_kfree_bestfirstfit+0x1497>
f012309d:	83 ec 04             	sub    $0x4,%esp
f01230a0:	68 e4 b7 13 f0       	push   $0xf013b7e4
f01230a5:	68 75 07 00 00       	push   $0x775
f01230aa:	68 5a b0 13 f0       	push   $0xf013b05a
f01230af:	e8 51 d1 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01230b4:	e8 e4 9a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01230b9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01230bc:	e8 07 0d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01230c1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f01230c4:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01230ca:	83 ec 0c             	sub    $0xc,%esp
f01230cd:	50                   	push   %eax
f01230ce:	e8 7d 48 fe ff       	call   f0107950 <kfree>
f01230d3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01230d6:	e8 ed 0c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01230db:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01230de:	74 17                	je     f01230f7 <test_kfree_bestfirstfit+0x14da>
f01230e0:	83 ec 04             	sub    $0x4,%esp
f01230e3:	68 74 b0 13 f0       	push   $0xf013b074
f01230e8:	68 7b 07 00 00       	push   $0x77b
f01230ed:	68 5a b0 13 f0       	push   $0xf013b05a
f01230f2:	e8 0e d1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f01230f7:	e8 a1 9a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01230fc:	89 c2                	mov    %eax,%edx
f01230fe:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123101:	29 c2                	sub    %eax,%edx
f0123103:	89 d0                	mov    %edx,%eax
f0123105:	83 f8 01             	cmp    $0x1,%eax
f0123108:	74 17                	je     f0123121 <test_kfree_bestfirstfit+0x1504>
f012310a:	83 ec 04             	sub    $0x4,%esp
f012310d:	68 e4 b7 13 f0       	push   $0xf013b7e4
f0123112:	68 7c 07 00 00       	push   $0x77c
f0123117:	68 5a b0 13 f0       	push   $0xf013b05a
f012311c:	e8 e4 d0 fd ff       	call   f0100205 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0123121:	e8 77 9a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123126:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123129:	e8 9a 0c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012312e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0123131:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0123137:	83 ec 0c             	sub    $0xc,%esp
f012313a:	50                   	push   %eax
f012313b:	e8 10 48 fe ff       	call   f0107950 <kfree>
f0123140:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123143:	e8 80 0c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123148:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012314b:	74 17                	je     f0123164 <test_kfree_bestfirstfit+0x1547>
f012314d:	83 ec 04             	sub    $0x4,%esp
f0123150:	68 74 b0 13 f0       	push   $0xf013b074
f0123155:	68 82 07 00 00       	push   $0x782
f012315a:	68 5a b0 13 f0       	push   $0xf013b05a
f012315f:	e8 a1 d0 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0123164:	e8 34 9a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123169:	89 c2                	mov    %eax,%edx
f012316b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012316e:	29 c2                	sub    %eax,%edx
f0123170:	89 d0                	mov    %edx,%eax
f0123172:	83 f8 04             	cmp    $0x4,%eax
f0123175:	74 17                	je     f012318e <test_kfree_bestfirstfit+0x1571>
f0123177:	83 ec 04             	sub    $0x4,%esp
f012317a:	68 e4 b7 13 f0       	push   $0xf013b7e4
f012317f:	68 83 07 00 00       	push   $0x783
f0123184:	68 5a b0 13 f0       	push   $0xf013b05a
f0123189:	e8 77 d0 fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012318e:	e8 0a 9a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123193:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123196:	e8 2d 0c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012319b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f012319e:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01231a4:	83 ec 0c             	sub    $0xc,%esp
f01231a7:	50                   	push   %eax
f01231a8:	e8 a3 47 fe ff       	call   f0107950 <kfree>
f01231ad:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01231b0:	e8 13 0c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01231b5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01231b8:	74 17                	je     f01231d1 <test_kfree_bestfirstfit+0x15b4>
f01231ba:	83 ec 04             	sub    $0x4,%esp
f01231bd:	68 74 b0 13 f0       	push   $0xf013b074
f01231c2:	68 89 07 00 00       	push   $0x789
f01231c7:	68 5a b0 13 f0       	push   $0xf013b05a
f01231cc:	e8 34 d0 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01231d1:	e8 c7 99 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01231d6:	89 c2                	mov    %eax,%edx
f01231d8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01231db:	29 c2                	sub    %eax,%edx
f01231dd:	89 d0                	mov    %edx,%eax
f01231df:	3d 00 03 00 00       	cmp    $0x300,%eax
f01231e4:	74 17                	je     f01231fd <test_kfree_bestfirstfit+0x15e0>
f01231e6:	83 ec 04             	sub    $0x4,%esp
f01231e9:	68 e4 b7 13 f0       	push   $0xf013b7e4
f01231ee:	68 8a 07 00 00       	push   $0x78a
f01231f3:	68 5a b0 13 f0       	push   $0xf013b05a
f01231f8:	e8 08 d0 fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01231fd:	e8 9b 99 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123202:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123205:	e8 be 0b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012320a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f012320d:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0123213:	83 ec 0c             	sub    $0xc,%esp
f0123216:	50                   	push   %eax
f0123217:	e8 34 47 fe ff       	call   f0107950 <kfree>
f012321c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012321f:	e8 a4 0b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123224:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123227:	74 17                	je     f0123240 <test_kfree_bestfirstfit+0x1623>
f0123229:	83 ec 04             	sub    $0x4,%esp
f012322c:	68 74 b0 13 f0       	push   $0xf013b074
f0123231:	68 90 07 00 00       	push   $0x790
f0123236:	68 5a b0 13 f0       	push   $0xf013b05a
f012323b:	e8 c5 cf fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0123240:	e8 58 99 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123245:	89 c2                	mov    %eax,%edx
f0123247:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012324a:	29 c2                	sub    %eax,%edx
f012324c:	89 d0                	mov    %edx,%eax
f012324e:	83 f8 01             	cmp    $0x1,%eax
f0123251:	74 17                	je     f012326a <test_kfree_bestfirstfit+0x164d>
f0123253:	83 ec 04             	sub    $0x4,%esp
f0123256:	68 e4 b7 13 f0       	push   $0xf013b7e4
f012325b:	68 91 07 00 00       	push   $0x791
f0123260:	68 5a b0 13 f0       	push   $0xf013b05a
f0123265:	e8 9b cf fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012326a:	e8 2e 99 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012326f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123272:	e8 51 0b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123277:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[10]);
f012327a:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0123280:	83 ec 0c             	sub    $0xc,%esp
f0123283:	50                   	push   %eax
f0123284:	e8 c7 46 fe ff       	call   f0107950 <kfree>
f0123289:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012328c:	e8 37 0b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123291:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123294:	74 17                	je     f01232ad <test_kfree_bestfirstfit+0x1690>
f0123296:	83 ec 04             	sub    $0x4,%esp
f0123299:	68 74 b0 13 f0       	push   $0xf013b074
f012329e:	68 97 07 00 00       	push   $0x797
f01232a3:	68 5a b0 13 f0       	push   $0xf013b05a
f01232a8:	e8 58 cf fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01232ad:	e8 eb 98 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01232b2:	89 c2                	mov    %eax,%edx
f01232b4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01232b7:	29 c2                	sub    %eax,%edx
f01232b9:	89 d0                	mov    %edx,%eax
f01232bb:	3d 00 01 00 00       	cmp    $0x100,%eax
f01232c0:	74 17                	je     f01232d9 <test_kfree_bestfirstfit+0x16bc>
f01232c2:	83 ec 04             	sub    $0x4,%esp
f01232c5:	68 e4 b7 13 f0       	push   $0xf013b7e4
f01232ca:	68 98 07 00 00       	push   $0x798
f01232cf:	68 5a b0 13 f0       	push   $0xf013b05a
f01232d4:	e8 2c cf fd ff       	call   f0100205 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f01232d9:	e8 bf 98 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01232de:	89 c2                	mov    %eax,%edx
f01232e0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01232e3:	39 c2                	cmp    %eax,%edx
f01232e5:	74 17                	je     f01232fe <test_kfree_bestfirstfit+0x16e1>
f01232e7:	83 ec 04             	sub    $0x4,%esp
f01232ea:	68 84 b8 13 f0       	push   $0xf013b884
f01232ef:	68 9a 07 00 00       	push   $0x79a
f01232f4:	68 5a b0 13 f0       	push   $0xf013b05a
f01232f9:	e8 07 cf fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b60%");
f01232fe:	83 ec 0c             	sub    $0xc,%esp
f0123301:	68 b8 b8 13 f0       	push   $0xf013b8b8
f0123306:	e8 03 da fd ff       	call   f0100d0e <cprintf>
f012330b:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012330e:	83 ec 0c             	sub    $0xc,%esp
f0123311:	6a 03                	push   $0x3
f0123313:	e8 25 9d fe ff       	call   f010d03d <sys_bypassPageFault>
f0123318:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f012331b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123322:	e9 82 00 00 00       	jmp    f01233a9 <test_kfree_bestfirstfit+0x178c>
		{
			ptr = (char *) ptr_allocations[i];
f0123327:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012332a:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f0123331:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0123334:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123337:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f012333a:	e8 ec 9c fe ff       	call   f010d02b <sys_rcr2>
f012333f:	89 c2                	mov    %eax,%edx
f0123341:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123344:	39 c2                	cmp    %eax,%edx
f0123346:	74 17                	je     f012335f <test_kfree_bestfirstfit+0x1742>
f0123348:	83 ec 04             	sub    $0x4,%esp
f012334b:	68 c0 b8 13 f0       	push   $0xf013b8c0
f0123350:	68 a9 07 00 00       	push   $0x7a9
f0123355:	68 5a b0 13 f0       	push   $0xf013b05a
f012335a:	e8 a6 ce fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f012335f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123362:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0123369:	89 c2                	mov    %eax,%edx
f012336b:	8b 45 80             	mov    -0x80(%ebp),%eax
f012336e:	01 d0                	add    %edx,%eax
f0123370:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0123373:	e8 b3 9c fe ff       	call   f010d02b <sys_rcr2>
f0123378:	89 c2                	mov    %eax,%edx
f012337a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012337d:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0123384:	89 c1                	mov    %eax,%ecx
f0123386:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123389:	01 c8                	add    %ecx,%eax
f012338b:	39 c2                	cmp    %eax,%edx
f012338d:	74 17                	je     f01233a6 <test_kfree_bestfirstfit+0x1789>
f012338f:	83 ec 04             	sub    $0x4,%esp
f0123392:	68 c0 b8 13 f0       	push   $0xf013b8c0
f0123397:	68 ab 07 00 00       	push   $0x7ab
f012339c:	68 5a b0 13 f0       	push   $0xf013b05a
f01233a1:	e8 5f ce fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f01233a6:	ff 45 f4             	incl   -0xc(%ebp)
f01233a9:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f01233ad:	0f 8e 74 ff ff ff    	jle    f0123327 <test_kfree_bestfirstfit+0x170a>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01233b3:	83 ec 0c             	sub    $0xc,%esp
f01233b6:	6a 00                	push   $0x0
f01233b8:	e8 80 9c fe ff       	call   f010d03d <sys_bypassPageFault>
f01233bd:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f01233c0:	83 ec 0c             	sub    $0xc,%esp
f01233c3:	68 05 b9 13 f0       	push   $0xf013b905
f01233c8:	e8 41 d9 fd ff       	call   f0100d0e <cprintf>
f01233cd:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01233d0:	e8 c8 97 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01233d5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01233d8:	e8 eb 09 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01233dd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f01233e0:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f01233e6:	83 ec 0c             	sub    $0xc,%esp
f01233e9:	50                   	push   %eax
f01233ea:	e8 61 45 fe ff       	call   f0107950 <kfree>
f01233ef:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01233f2:	e8 d1 09 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01233f7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01233fa:	74 17                	je     f0123413 <test_kfree_bestfirstfit+0x17f6>
f01233fc:	83 ec 04             	sub    $0x4,%esp
f01233ff:	68 74 b0 13 f0       	push   $0xf013b074
f0123404:	68 b9 07 00 00       	push   $0x7b9
f0123409:	68 5a b0 13 f0       	push   $0xf013b05a
f012340e:	e8 f2 cd fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123413:	e8 85 97 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123418:	89 c2                	mov    %eax,%edx
f012341a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012341d:	39 c2                	cmp    %eax,%edx
f012341f:	74 17                	je     f0123438 <test_kfree_bestfirstfit+0x181b>
f0123421:	83 ec 04             	sub    $0x4,%esp
f0123424:	68 0c b9 13 f0       	push   $0xf013b90c
f0123429:	68 ba 07 00 00       	push   $0x7ba
f012342e:	68 5a b0 13 f0       	push   $0xf013b05a
f0123433:	e8 cd cd fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123438:	e8 60 97 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012343d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123440:	e8 83 09 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123445:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0123448:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f012344e:	83 ec 0c             	sub    $0xc,%esp
f0123451:	50                   	push   %eax
f0123452:	e8 f9 44 fe ff       	call   f0107950 <kfree>
f0123457:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012345a:	e8 69 09 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012345f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123462:	74 17                	je     f012347b <test_kfree_bestfirstfit+0x185e>
f0123464:	83 ec 04             	sub    $0x4,%esp
f0123467:	68 74 b0 13 f0       	push   $0xf013b074
f012346c:	68 c0 07 00 00       	push   $0x7c0
f0123471:	68 5a b0 13 f0       	push   $0xf013b05a
f0123476:	e8 8a cd fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012347b:	e8 1d 97 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123480:	89 c2                	mov    %eax,%edx
f0123482:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123485:	39 c2                	cmp    %eax,%edx
f0123487:	74 17                	je     f01234a0 <test_kfree_bestfirstfit+0x1883>
f0123489:	83 ec 04             	sub    $0x4,%esp
f012348c:	68 0c b9 13 f0       	push   $0xf013b90c
f0123491:	68 c1 07 00 00       	push   $0x7c1
f0123496:	68 5a b0 13 f0       	push   $0xf013b05a
f012349b:	e8 65 cd fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01234a0:	e8 f8 96 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01234a5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01234a8:	e8 1b 09 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01234ad:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01234b0:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01234b6:	83 ec 0c             	sub    $0xc,%esp
f01234b9:	50                   	push   %eax
f01234ba:	e8 91 44 fe ff       	call   f0107950 <kfree>
f01234bf:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01234c2:	e8 01 09 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01234c7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01234ca:	74 17                	je     f01234e3 <test_kfree_bestfirstfit+0x18c6>
f01234cc:	83 ec 04             	sub    $0x4,%esp
f01234cf:	68 74 b0 13 f0       	push   $0xf013b074
f01234d4:	68 c7 07 00 00       	push   $0x7c7
f01234d9:	68 5a b0 13 f0       	push   $0xf013b05a
f01234de:	e8 22 cd fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01234e3:	e8 b5 96 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01234e8:	89 c2                	mov    %eax,%edx
f01234ea:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01234ed:	39 c2                	cmp    %eax,%edx
f01234ef:	74 17                	je     f0123508 <test_kfree_bestfirstfit+0x18eb>
f01234f1:	83 ec 04             	sub    $0x4,%esp
f01234f4:	68 0c b9 13 f0       	push   $0xf013b90c
f01234f9:	68 c8 07 00 00       	push   $0x7c8
f01234fe:	68 5a b0 13 f0       	push   $0xf013b05a
f0123503:	e8 fd cc fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0123508:	e8 90 96 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012350d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123510:	e8 b3 08 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123515:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0123518:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f012351e:	83 ec 0c             	sub    $0xc,%esp
f0123521:	50                   	push   %eax
f0123522:	e8 29 44 fe ff       	call   f0107950 <kfree>
f0123527:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012352a:	e8 99 08 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012352f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123532:	74 17                	je     f012354b <test_kfree_bestfirstfit+0x192e>
f0123534:	83 ec 04             	sub    $0x4,%esp
f0123537:	68 74 b0 13 f0       	push   $0xf013b074
f012353c:	68 ce 07 00 00       	push   $0x7ce
f0123541:	68 5a b0 13 f0       	push   $0xf013b05a
f0123546:	e8 ba cc fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012354b:	e8 4d 96 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123550:	89 c2                	mov    %eax,%edx
f0123552:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123555:	39 c2                	cmp    %eax,%edx
f0123557:	74 17                	je     f0123570 <test_kfree_bestfirstfit+0x1953>
f0123559:	83 ec 04             	sub    $0x4,%esp
f012355c:	68 0c b9 13 f0       	push   $0xf013b90c
f0123561:	68 cf 07 00 00       	push   $0x7cf
f0123566:	68 5a b0 13 f0       	push   $0xf013b05a
f012356b:	e8 95 cc fd ff       	call   f0100205 <_panic>

	}
	cprintf("\b\b\b85%");
f0123570:	83 ec 0c             	sub    $0xc,%esp
f0123573:	68 53 b9 13 f0       	push   $0xf013b953
f0123578:	e8 91 d7 fd ff       	call   f0100d0e <cprintf>
f012357d:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0123580:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0123587:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012358e:	eb 48                	jmp    f01235d8 <test_kfree_bestfirstfit+0x19bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0123590:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0123593:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0123598:	83 ec 04             	sub    $0x4,%esp
f012359b:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f01235a1:	51                   	push   %ecx
f01235a2:	52                   	push   %edx
f01235a3:	50                   	push   %eax
f01235a4:	e8 08 35 fe ff       	call   f0106ab1 <get_page_table>
f01235a9:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01235ac:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f01235b2:	85 c0                	test   %eax,%eax
f01235b4:	75 17                	jne    f01235cd <test_kfree_bestfirstfit+0x19b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f01235b6:	83 ec 04             	sub    $0x4,%esp
f01235b9:	68 5c b9 13 f0       	push   $0xf013b95c
f01235be:	68 dd 07 00 00       	push   $0x7dd
f01235c3:	68 5a b0 13 f0       	push   $0xf013b05a
f01235c8:	e8 38 cc fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01235cd:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f01235d4:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f01235d8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01235dc:	78 b2                	js     f0123590 <test_kfree_bestfirstfit+0x1973>
f01235de:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01235e2:	7f 09                	jg     f01235ed <test_kfree_bestfirstfit+0x19d0>
f01235e4:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f01235eb:	76 a3                	jbe    f0123590 <test_kfree_bestfirstfit+0x1973>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f01235ed:	83 ec 0c             	sub    $0xc,%esp
f01235f0:	68 3e b2 13 f0       	push   $0xf013b23e
f01235f5:	e8 14 d7 fd ff       	call   f0100d0e <cprintf>
f01235fa:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f01235fd:	83 ec 0c             	sub    $0xc,%esp
f0123600:	68 c4 b9 13 f0       	push   $0xf013b9c4
f0123605:	e8 04 d7 fd ff       	call   f0100d0e <cprintf>
f012360a:	83 c4 10             	add    $0x10,%esp

	return 1;
f012360d:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0123612:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0123615:	5b                   	pop    %ebx
f0123616:	5f                   	pop    %edi
f0123617:	5d                   	pop    %ebp
f0123618:	c3                   	ret    

f0123619 <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f0123619:	55                   	push   %ebp
f012361a:	89 e5                	mov    %esp,%ebp
f012361c:	57                   	push   %edi
f012361d:	56                   	push   %esi
f012361e:	53                   	push   %ebx
f012361f:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
	cprintf("==============================================\n");
f0123625:	83 ec 0c             	sub    $0xc,%esp
f0123628:	68 9c af 13 f0       	push   $0xf013af9c
f012362d:	e8 dc d6 fd ff       	call   f0100d0e <cprintf>
f0123632:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0123635:	83 ec 0c             	sub    $0xc,%esp
f0123638:	68 cc af 13 f0       	push   $0xf013afcc
f012363d:	e8 cc d6 fd ff       	call   f0100d0e <cprintf>
f0123642:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0123645:	83 ec 0c             	sub    $0xc,%esp
f0123648:	68 9c af 13 f0       	push   $0xf013af9c
f012364d:	e8 bc d6 fd ff       	call   f0100d0e <cprintf>
f0123652:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0123655:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f0123659:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f012365d:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f0123663:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f0123669:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f0123670:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0123677:	e8 21 95 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012367c:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012367f:	8d 95 c4 fd ff ff    	lea    -0x23c(%ebp),%edx
f0123685:	b9 14 00 00 00       	mov    $0x14,%ecx
f012368a:	b8 00 00 00 00       	mov    $0x0,%eax
f012368f:	89 d7                	mov    %edx,%edi
f0123691:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0123693:	8d 95 74 fd ff ff    	lea    -0x28c(%ebp),%edx
f0123699:	b9 14 00 00 00       	mov    $0x14,%ecx
f012369e:	b8 00 00 00 00       	mov    $0x0,%eax
f01236a3:	89 d7                	mov    %edx,%edi
f01236a5:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01236a7:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f01236ad:	b9 14 00 00 00       	mov    $0x14,%ecx
f01236b2:	b8 00 00 00 00       	mov    $0x0,%eax
f01236b7:	89 d7                	mov    %edx,%edi
f01236b9:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01236bb:	e8 dd 94 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01236c0:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01236c3:	e8 00 07 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01236c8:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01236cb:	83 ec 0c             	sub    $0xc,%esp
f01236ce:	68 00 fc 1f 00       	push   $0x1ffc00
f01236d3:	e8 ad 41 fe ff       	call   f0107885 <kmalloc>
f01236d8:	83 c4 10             	add    $0x10,%esp
f01236db:	89 85 24 fd ff ff    	mov    %eax,-0x2dc(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01236e1:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f01236e7:	89 c1                	mov    %eax,%ecx
f01236e9:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01236f0:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01236f3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01236f8:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01236fb:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01236fe:	ba 00 00 00 00       	mov    $0x0,%edx
f0123703:	f7 75 a0             	divl   -0x60(%ebp)
f0123706:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0123709:	29 d0                	sub    %edx,%eax
f012370b:	89 c3                	mov    %eax,%ebx
f012370d:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0123714:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0123719:	0f b6 d0             	movzbl %al,%edx
f012371c:	8b 45 98             	mov    -0x68(%ebp),%eax
f012371f:	01 d0                	add    %edx,%eax
f0123721:	48                   	dec    %eax
f0123722:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0123725:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0123728:	ba 00 00 00 00       	mov    $0x0,%edx
f012372d:	f7 75 98             	divl   -0x68(%ebp)
f0123730:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0123733:	29 d0                	sub    %edx,%eax
f0123735:	01 c3                	add    %eax,%ebx
f0123737:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f012373e:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0123743:	0f b6 c0             	movzbl %al,%eax
f0123746:	c1 e0 04             	shl    $0x4,%eax
f0123749:	89 c2                	mov    %eax,%edx
f012374b:	8b 45 90             	mov    -0x70(%ebp),%eax
f012374e:	01 d0                	add    %edx,%eax
f0123750:	48                   	dec    %eax
f0123751:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0123754:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0123757:	ba 00 00 00 00       	mov    $0x0,%edx
f012375c:	f7 75 90             	divl   -0x70(%ebp)
f012375f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0123762:	29 d0                	sub    %edx,%eax
f0123764:	01 d8                	add    %ebx,%eax
f0123766:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012376b:	39 c1                	cmp    %eax,%ecx
f012376d:	74 17                	je     f0123786 <test_kheap_phys_addr+0x16d>
f012376f:	83 ec 04             	sub    $0x4,%esp
f0123772:	68 40 b1 13 f0       	push   $0xf013b140
f0123777:	68 0a 08 00 00       	push   $0x80a
f012377c:	68 5a b0 13 f0       	push   $0xf013b05a
f0123781:	e8 7f ca fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123786:	e8 3d 06 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012378b:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f012378e:	74 17                	je     f01237a7 <test_kheap_phys_addr+0x18e>
f0123790:	83 ec 04             	sub    $0x4,%esp
f0123793:	68 74 b0 13 f0       	push   $0xf013b074
f0123798:	68 0b 08 00 00       	push   $0x80b
f012379d:	68 5a b0 13 f0       	push   $0xf013b05a
f01237a2:	e8 5e ca fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01237a7:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01237aa:	e8 ee 93 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01237af:	29 c3                	sub    %eax,%ebx
f01237b1:	89 d8                	mov    %ebx,%eax
f01237b3:	3d 00 02 00 00       	cmp    $0x200,%eax
f01237b8:	74 17                	je     f01237d1 <test_kheap_phys_addr+0x1b8>
f01237ba:	83 ec 04             	sub    $0x4,%esp
f01237bd:	68 dc b0 13 f0       	push   $0xf013b0dc
f01237c2:	68 0c 08 00 00       	push   $0x80c
f01237c7:	68 5a b0 13 f0       	push   $0xf013b05a
f01237cc:	e8 34 ca fd ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01237d1:	e8 c7 93 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01237d6:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01237d9:	e8 ea 05 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01237de:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01237e1:	83 ec 0c             	sub    $0xc,%esp
f01237e4:	68 00 fc 1f 00       	push   $0x1ffc00
f01237e9:	e8 97 40 fe ff       	call   f0107885 <kmalloc>
f01237ee:	83 c4 10             	add    $0x10,%esp
f01237f1:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01237f7:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f01237fd:	89 c1                	mov    %eax,%ecx
f01237ff:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0123806:	8b 45 88             	mov    -0x78(%ebp),%eax
f0123809:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012380e:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0123811:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0123814:	ba 00 00 00 00       	mov    $0x0,%edx
f0123819:	f7 75 88             	divl   -0x78(%ebp)
f012381c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012381f:	29 d0                	sub    %edx,%eax
f0123821:	89 c3                	mov    %eax,%ebx
f0123823:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f012382a:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012382f:	0f b6 d0             	movzbl %al,%edx
f0123832:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123835:	01 d0                	add    %edx,%eax
f0123837:	48                   	dec    %eax
f0123838:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f012383e:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0123844:	ba 00 00 00 00       	mov    $0x0,%edx
f0123849:	f7 75 80             	divl   -0x80(%ebp)
f012384c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0123852:	29 d0                	sub    %edx,%eax
f0123854:	01 c3                	add    %eax,%ebx
f0123856:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f012385d:	10 00 00 
f0123860:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0123865:	0f b6 c0             	movzbl %al,%eax
f0123868:	c1 e0 04             	shl    $0x4,%eax
f012386b:	89 c2                	mov    %eax,%edx
f012386d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0123873:	01 d0                	add    %edx,%eax
f0123875:	48                   	dec    %eax
f0123876:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f012387c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0123882:	ba 00 00 00 00       	mov    $0x0,%edx
f0123887:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f012388d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0123893:	29 d0                	sub    %edx,%eax
f0123895:	01 d8                	add    %ebx,%eax
f0123897:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012389c:	39 c1                	cmp    %eax,%ecx
f012389e:	74 17                	je     f01238b7 <test_kheap_phys_addr+0x29e>
f01238a0:	83 ec 04             	sub    $0x4,%esp
f01238a3:	68 40 b1 13 f0       	push   $0xf013b140
f01238a8:	68 12 08 00 00       	push   $0x812
f01238ad:	68 5a b0 13 f0       	push   $0xf013b05a
f01238b2:	e8 4e c9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01238b7:	e8 0c 05 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01238bc:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01238bf:	74 17                	je     f01238d8 <test_kheap_phys_addr+0x2bf>
f01238c1:	83 ec 04             	sub    $0x4,%esp
f01238c4:	68 74 b0 13 f0       	push   $0xf013b074
f01238c9:	68 13 08 00 00       	push   $0x813
f01238ce:	68 5a b0 13 f0       	push   $0xf013b05a
f01238d3:	e8 2d c9 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01238d8:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01238db:	e8 bd 92 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01238e0:	29 c3                	sub    %eax,%ebx
f01238e2:	89 d8                	mov    %ebx,%eax
f01238e4:	3d 00 02 00 00       	cmp    $0x200,%eax
f01238e9:	74 17                	je     f0123902 <test_kheap_phys_addr+0x2e9>
f01238eb:	83 ec 04             	sub    $0x4,%esp
f01238ee:	68 dc b0 13 f0       	push   $0xf013b0dc
f01238f3:	68 14 08 00 00       	push   $0x814
f01238f8:	68 5a b0 13 f0       	push   $0xf013b05a
f01238fd:	e8 03 c9 fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123902:	e8 96 92 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123907:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012390a:	e8 b9 04 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012390f:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0123912:	83 ec 0c             	sub    $0xc,%esp
f0123915:	68 00 08 00 00       	push   $0x800
f012391a:	e8 66 3f fe ff       	call   f0107885 <kmalloc>
f012391f:	83 c4 10             	add    $0x10,%esp
f0123922:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123928:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f012392e:	89 c1                	mov    %eax,%ecx
f0123930:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0123937:	10 00 00 
f012393a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0123940:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123945:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f012394b:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0123951:	ba 00 00 00 00       	mov    $0x0,%edx
f0123956:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f012395c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0123962:	29 d0                	sub    %edx,%eax
f0123964:	89 c3                	mov    %eax,%ebx
f0123966:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f012396d:	10 00 00 
f0123970:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0123975:	0f b6 d0             	movzbl %al,%edx
f0123978:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012397e:	01 d0                	add    %edx,%eax
f0123980:	48                   	dec    %eax
f0123981:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0123987:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012398d:	ba 00 00 00 00       	mov    $0x0,%edx
f0123992:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0123998:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012399e:	29 d0                	sub    %edx,%eax
f01239a0:	01 c3                	add    %eax,%ebx
f01239a2:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01239a9:	10 00 00 
f01239ac:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01239b1:	0f b6 c0             	movzbl %al,%eax
f01239b4:	c1 e0 04             	shl    $0x4,%eax
f01239b7:	89 c2                	mov    %eax,%edx
f01239b9:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01239bf:	01 d0                	add    %edx,%eax
f01239c1:	48                   	dec    %eax
f01239c2:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01239c8:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01239ce:	ba 00 00 00 00       	mov    $0x0,%edx
f01239d3:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01239d9:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01239df:	29 d0                	sub    %edx,%eax
f01239e1:	01 d8                	add    %ebx,%eax
f01239e3:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01239e8:	39 c1                	cmp    %eax,%ecx
f01239ea:	74 17                	je     f0123a03 <test_kheap_phys_addr+0x3ea>
f01239ec:	83 ec 04             	sub    $0x4,%esp
f01239ef:	68 40 b1 13 f0       	push   $0xf013b140
f01239f4:	68 1a 08 00 00       	push   $0x81a
f01239f9:	68 5a b0 13 f0       	push   $0xf013b05a
f01239fe:	e8 02 c8 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123a03:	e8 c0 03 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123a08:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123a0b:	74 17                	je     f0123a24 <test_kheap_phys_addr+0x40b>
f0123a0d:	83 ec 04             	sub    $0x4,%esp
f0123a10:	68 74 b0 13 f0       	push   $0xf013b074
f0123a15:	68 1b 08 00 00       	push   $0x81b
f0123a1a:	68 5a b0 13 f0       	push   $0xf013b05a
f0123a1f:	e8 e1 c7 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123a24:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123a27:	e8 71 91 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123a2c:	29 c3                	sub    %eax,%ebx
f0123a2e:	89 d8                	mov    %ebx,%eax
f0123a30:	83 f8 01             	cmp    $0x1,%eax
f0123a33:	74 17                	je     f0123a4c <test_kheap_phys_addr+0x433>
f0123a35:	83 ec 04             	sub    $0x4,%esp
f0123a38:	68 dc b0 13 f0       	push   $0xf013b0dc
f0123a3d:	68 1c 08 00 00       	push   $0x81c
f0123a42:	68 5a b0 13 f0       	push   $0xf013b05a
f0123a47:	e8 b9 c7 fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123a4c:	e8 4c 91 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123a51:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123a54:	e8 6f 03 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123a59:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0123a5c:	83 ec 0c             	sub    $0xc,%esp
f0123a5f:	68 00 08 00 00       	push   $0x800
f0123a64:	e8 1c 3e fe ff       	call   f0107885 <kmalloc>
f0123a69:	83 c4 10             	add    $0x10,%esp
f0123a6c:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123a72:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f0123a78:	89 c1                	mov    %eax,%ecx
f0123a7a:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0123a81:	10 00 00 
f0123a84:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0123a8a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123a8f:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0123a95:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0123a9b:	ba 00 00 00 00       	mov    $0x0,%edx
f0123aa0:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0123aa6:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0123aac:	29 d0                	sub    %edx,%eax
f0123aae:	89 c3                	mov    %eax,%ebx
f0123ab0:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0123ab7:	10 00 00 
f0123aba:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0123abf:	0f b6 d0             	movzbl %al,%edx
f0123ac2:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0123ac8:	01 d0                	add    %edx,%eax
f0123aca:	48                   	dec    %eax
f0123acb:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0123ad1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0123ad7:	ba 00 00 00 00       	mov    $0x0,%edx
f0123adc:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0123ae2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0123ae8:	29 d0                	sub    %edx,%eax
f0123aea:	01 c3                	add    %eax,%ebx
f0123aec:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0123af3:	10 00 00 
f0123af6:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0123afb:	0f b6 c0             	movzbl %al,%eax
f0123afe:	c1 e0 04             	shl    $0x4,%eax
f0123b01:	89 c2                	mov    %eax,%edx
f0123b03:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0123b09:	01 d0                	add    %edx,%eax
f0123b0b:	48                   	dec    %eax
f0123b0c:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0123b12:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0123b18:	ba 00 00 00 00       	mov    $0x0,%edx
f0123b1d:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0123b23:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0123b29:	29 d0                	sub    %edx,%eax
f0123b2b:	01 d8                	add    %ebx,%eax
f0123b2d:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0123b32:	39 c1                	cmp    %eax,%ecx
f0123b34:	74 17                	je     f0123b4d <test_kheap_phys_addr+0x534>
f0123b36:	83 ec 04             	sub    $0x4,%esp
f0123b39:	68 40 b1 13 f0       	push   $0xf013b140
f0123b3e:	68 22 08 00 00       	push   $0x822
f0123b43:	68 5a b0 13 f0       	push   $0xf013b05a
f0123b48:	e8 b8 c6 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123b4d:	e8 76 02 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123b52:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123b55:	74 17                	je     f0123b6e <test_kheap_phys_addr+0x555>
f0123b57:	83 ec 04             	sub    $0x4,%esp
f0123b5a:	68 74 b0 13 f0       	push   $0xf013b074
f0123b5f:	68 23 08 00 00       	push   $0x823
f0123b64:	68 5a b0 13 f0       	push   $0xf013b05a
f0123b69:	e8 97 c6 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123b6e:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123b71:	e8 27 90 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123b76:	29 c3                	sub    %eax,%ebx
f0123b78:	89 d8                	mov    %ebx,%eax
f0123b7a:	83 f8 01             	cmp    $0x1,%eax
f0123b7d:	74 17                	je     f0123b96 <test_kheap_phys_addr+0x57d>
f0123b7f:	83 ec 04             	sub    $0x4,%esp
f0123b82:	68 dc b0 13 f0       	push   $0xf013b0dc
f0123b87:	68 24 08 00 00       	push   $0x824
f0123b8c:	68 5a b0 13 f0       	push   $0xf013b05a
f0123b91:	e8 6f c6 fd ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0123b96:	e8 02 90 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123b9b:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123b9e:	e8 25 02 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123ba3:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0123ba6:	83 ec 0c             	sub    $0xc,%esp
f0123ba9:	68 00 1c 00 00       	push   $0x1c00
f0123bae:	e8 d2 3c fe ff       	call   f0107885 <kmalloc>
f0123bb3:	83 c4 10             	add    $0x10,%esp
f0123bb6:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123bbc:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f0123bc2:	89 c1                	mov    %eax,%ecx
f0123bc4:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0123bcb:	10 00 00 
f0123bce:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0123bd4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123bd9:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0123bdf:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0123be5:	ba 00 00 00 00       	mov    $0x0,%edx
f0123bea:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0123bf0:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0123bf6:	29 d0                	sub    %edx,%eax
f0123bf8:	89 c3                	mov    %eax,%ebx
f0123bfa:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0123c01:	10 00 00 
f0123c04:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0123c09:	0f b6 d0             	movzbl %al,%edx
f0123c0c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0123c12:	01 d0                	add    %edx,%eax
f0123c14:	48                   	dec    %eax
f0123c15:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0123c1b:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0123c21:	ba 00 00 00 00       	mov    $0x0,%edx
f0123c26:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0123c2c:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0123c32:	29 d0                	sub    %edx,%eax
f0123c34:	01 c3                	add    %eax,%ebx
f0123c36:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0123c3d:	10 00 00 
f0123c40:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0123c45:	0f b6 c0             	movzbl %al,%eax
f0123c48:	c1 e0 04             	shl    $0x4,%eax
f0123c4b:	89 c2                	mov    %eax,%edx
f0123c4d:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0123c53:	01 d0                	add    %edx,%eax
f0123c55:	48                   	dec    %eax
f0123c56:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0123c5c:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0123c62:	ba 00 00 00 00       	mov    $0x0,%edx
f0123c67:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0123c6d:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0123c73:	29 d0                	sub    %edx,%eax
f0123c75:	01 d8                	add    %ebx,%eax
f0123c77:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0123c7c:	39 c1                	cmp    %eax,%ecx
f0123c7e:	74 17                	je     f0123c97 <test_kheap_phys_addr+0x67e>
f0123c80:	83 ec 04             	sub    $0x4,%esp
f0123c83:	68 40 b1 13 f0       	push   $0xf013b140
f0123c88:	68 2a 08 00 00       	push   $0x82a
f0123c8d:	68 5a b0 13 f0       	push   $0xf013b05a
f0123c92:	e8 6e c5 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123c97:	e8 2c 01 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123c9c:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123c9f:	74 17                	je     f0123cb8 <test_kheap_phys_addr+0x69f>
f0123ca1:	83 ec 04             	sub    $0x4,%esp
f0123ca4:	68 74 b0 13 f0       	push   $0xf013b074
f0123ca9:	68 2b 08 00 00       	push   $0x82b
f0123cae:	68 5a b0 13 f0       	push   $0xf013b05a
f0123cb3:	e8 4d c5 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123cb8:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123cbb:	e8 dd 8e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123cc0:	29 c3                	sub    %eax,%ebx
f0123cc2:	89 d8                	mov    %ebx,%eax
f0123cc4:	83 f8 02             	cmp    $0x2,%eax
f0123cc7:	74 17                	je     f0123ce0 <test_kheap_phys_addr+0x6c7>
f0123cc9:	83 ec 04             	sub    $0x4,%esp
f0123ccc:	68 dc b0 13 f0       	push   $0xf013b0dc
f0123cd1:	68 2c 08 00 00       	push   $0x82c
f0123cd6:	68 5a b0 13 f0       	push   $0xf013b05a
f0123cdb:	e8 25 c5 fd ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123ce0:	e8 b8 8e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123ce5:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123ce8:	e8 db 00 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123ced:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0123cf0:	83 ec 0c             	sub    $0xc,%esp
f0123cf3:	68 00 fc 2f 00       	push   $0x2ffc00
f0123cf8:	e8 88 3b fe ff       	call   f0107885 <kmalloc>
f0123cfd:	83 c4 10             	add    $0x10,%esp
f0123d00:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123d06:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f0123d0c:	89 c1                	mov    %eax,%ecx
f0123d0e:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0123d15:	10 00 00 
f0123d18:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0123d1e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123d23:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0123d29:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0123d2f:	ba 00 00 00 00       	mov    $0x0,%edx
f0123d34:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0123d3a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0123d40:	29 d0                	sub    %edx,%eax
f0123d42:	89 c3                	mov    %eax,%ebx
f0123d44:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0123d4b:	10 00 00 
f0123d4e:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0123d53:	0f b6 d0             	movzbl %al,%edx
f0123d56:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0123d5c:	01 d0                	add    %edx,%eax
f0123d5e:	48                   	dec    %eax
f0123d5f:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0123d65:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0123d6b:	ba 00 00 00 00       	mov    $0x0,%edx
f0123d70:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0123d76:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0123d7c:	29 d0                	sub    %edx,%eax
f0123d7e:	01 c3                	add    %eax,%ebx
f0123d80:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0123d87:	10 00 00 
f0123d8a:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0123d8f:	0f b6 c0             	movzbl %al,%eax
f0123d92:	c1 e0 04             	shl    $0x4,%eax
f0123d95:	89 c2                	mov    %eax,%edx
f0123d97:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0123d9d:	01 d0                	add    %edx,%eax
f0123d9f:	48                   	dec    %eax
f0123da0:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0123da6:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0123dac:	ba 00 00 00 00       	mov    $0x0,%edx
f0123db1:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0123db7:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0123dbd:	29 d0                	sub    %edx,%eax
f0123dbf:	01 d8                	add    %ebx,%eax
f0123dc1:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0123dc6:	39 c1                	cmp    %eax,%ecx
f0123dc8:	74 17                	je     f0123de1 <test_kheap_phys_addr+0x7c8>
f0123dca:	83 ec 04             	sub    $0x4,%esp
f0123dcd:	68 40 b1 13 f0       	push   $0xf013b140
f0123dd2:	68 32 08 00 00       	push   $0x832
f0123dd7:	68 5a b0 13 f0       	push   $0xf013b05a
f0123ddc:	e8 24 c4 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123de1:	e8 e2 ff fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123de6:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123de9:	74 17                	je     f0123e02 <test_kheap_phys_addr+0x7e9>
f0123deb:	83 ec 04             	sub    $0x4,%esp
f0123dee:	68 74 b0 13 f0       	push   $0xf013b074
f0123df3:	68 33 08 00 00       	push   $0x833
f0123df8:	68 5a b0 13 f0       	push   $0xf013b05a
f0123dfd:	e8 03 c4 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123e02:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123e05:	e8 93 8d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123e0a:	29 c3                	sub    %eax,%ebx
f0123e0c:	89 d8                	mov    %ebx,%eax
f0123e0e:	3d 00 03 00 00       	cmp    $0x300,%eax
f0123e13:	74 17                	je     f0123e2c <test_kheap_phys_addr+0x813>
f0123e15:	83 ec 04             	sub    $0x4,%esp
f0123e18:	68 dc b0 13 f0       	push   $0xf013b0dc
f0123e1d:	68 34 08 00 00       	push   $0x834
f0123e22:	68 5a b0 13 f0       	push   $0xf013b05a
f0123e27:	e8 d9 c3 fd ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0123e2c:	e8 6c 8d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123e31:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123e34:	e8 8f ff fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123e39:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0123e3c:	83 ec 0c             	sub    $0xc,%esp
f0123e3f:	68 00 fc 5f 00       	push   $0x5ffc00
f0123e44:	e8 3c 3a fe ff       	call   f0107885 <kmalloc>
f0123e49:	83 c4 10             	add    $0x10,%esp
f0123e4c:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123e52:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0123e58:	89 c1                	mov    %eax,%ecx
f0123e5a:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0123e61:	10 00 00 
f0123e64:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0123e6a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123e6f:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0123e75:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0123e7b:	ba 00 00 00 00       	mov    $0x0,%edx
f0123e80:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0123e86:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0123e8c:	29 d0                	sub    %edx,%eax
f0123e8e:	89 c3                	mov    %eax,%ebx
f0123e90:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0123e97:	10 00 00 
f0123e9a:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0123e9f:	0f b6 d0             	movzbl %al,%edx
f0123ea2:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0123ea8:	01 d0                	add    %edx,%eax
f0123eaa:	48                   	dec    %eax
f0123eab:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0123eb1:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0123eb7:	ba 00 00 00 00       	mov    $0x0,%edx
f0123ebc:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0123ec2:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0123ec8:	29 d0                	sub    %edx,%eax
f0123eca:	01 c3                	add    %eax,%ebx
f0123ecc:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0123ed3:	10 00 00 
f0123ed6:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0123edb:	0f b6 c0             	movzbl %al,%eax
f0123ede:	c1 e0 04             	shl    $0x4,%eax
f0123ee1:	89 c2                	mov    %eax,%edx
f0123ee3:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0123ee9:	01 d0                	add    %edx,%eax
f0123eeb:	48                   	dec    %eax
f0123eec:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0123ef2:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0123ef8:	ba 00 00 00 00       	mov    $0x0,%edx
f0123efd:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0123f03:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0123f09:	29 d0                	sub    %edx,%eax
f0123f0b:	01 d8                	add    %ebx,%eax
f0123f0d:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0123f12:	39 c1                	cmp    %eax,%ecx
f0123f14:	74 17                	je     f0123f2d <test_kheap_phys_addr+0x914>
f0123f16:	83 ec 04             	sub    $0x4,%esp
f0123f19:	68 40 b1 13 f0       	push   $0xf013b140
f0123f1e:	68 3a 08 00 00       	push   $0x83a
f0123f23:	68 5a b0 13 f0       	push   $0xf013b05a
f0123f28:	e8 d8 c2 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123f2d:	e8 96 fe fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123f32:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123f35:	74 17                	je     f0123f4e <test_kheap_phys_addr+0x935>
f0123f37:	83 ec 04             	sub    $0x4,%esp
f0123f3a:	68 74 b0 13 f0       	push   $0xf013b074
f0123f3f:	68 3b 08 00 00       	push   $0x83b
f0123f44:	68 5a b0 13 f0       	push   $0xf013b05a
f0123f49:	e8 b7 c2 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123f4e:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123f51:	e8 47 8c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123f56:	29 c3                	sub    %eax,%ebx
f0123f58:	89 d8                	mov    %ebx,%eax
f0123f5a:	3d 00 06 00 00       	cmp    $0x600,%eax
f0123f5f:	74 17                	je     f0123f78 <test_kheap_phys_addr+0x95f>
f0123f61:	83 ec 04             	sub    $0x4,%esp
f0123f64:	68 dc b0 13 f0       	push   $0xf013b0dc
f0123f69:	68 3c 08 00 00       	push   $0x83c
f0123f6e:	68 5a b0 13 f0       	push   $0xf013b05a
f0123f73:	e8 8d c2 fd ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0123f78:	e8 20 8c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0123f7d:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123f80:	e8 43 fe fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123f85:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0123f88:	83 ec 0c             	sub    $0xc,%esp
f0123f8b:	68 00 38 00 00       	push   $0x3800
f0123f90:	e8 f0 38 fe ff       	call   f0107885 <kmalloc>
f0123f95:	83 c4 10             	add    $0x10,%esp
f0123f98:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123f9e:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0123fa4:	89 c1                	mov    %eax,%ecx
f0123fa6:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0123fad:	10 00 00 
f0123fb0:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0123fb6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123fbb:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0123fc1:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0123fc7:	ba 00 00 00 00       	mov    $0x0,%edx
f0123fcc:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0123fd2:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0123fd8:	29 d0                	sub    %edx,%eax
f0123fda:	89 c3                	mov    %eax,%ebx
f0123fdc:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0123fe3:	10 00 00 
f0123fe6:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0123feb:	0f b6 d0             	movzbl %al,%edx
f0123fee:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0123ff4:	01 d0                	add    %edx,%eax
f0123ff6:	48                   	dec    %eax
f0123ff7:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0123ffd:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0124003:	ba 00 00 00 00       	mov    $0x0,%edx
f0124008:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f012400e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0124014:	29 d0                	sub    %edx,%eax
f0124016:	01 c3                	add    %eax,%ebx
f0124018:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f012401f:	10 00 00 
f0124022:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0124027:	0f b6 c0             	movzbl %al,%eax
f012402a:	c1 e0 04             	shl    $0x4,%eax
f012402d:	89 c2                	mov    %eax,%edx
f012402f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0124035:	01 d0                	add    %edx,%eax
f0124037:	48                   	dec    %eax
f0124038:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f012403e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124044:	ba 00 00 00 00       	mov    $0x0,%edx
f0124049:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f012404f:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124055:	29 d0                	sub    %edx,%eax
f0124057:	01 d8                	add    %ebx,%eax
f0124059:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012405e:	39 c1                	cmp    %eax,%ecx
f0124060:	74 17                	je     f0124079 <test_kheap_phys_addr+0xa60>
f0124062:	83 ec 04             	sub    $0x4,%esp
f0124065:	68 40 b1 13 f0       	push   $0xf013b140
f012406a:	68 42 08 00 00       	push   $0x842
f012406f:	68 5a b0 13 f0       	push   $0xf013b05a
f0124074:	e8 8c c1 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124079:	e8 4a fd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012407e:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0124081:	74 17                	je     f012409a <test_kheap_phys_addr+0xa81>
f0124083:	83 ec 04             	sub    $0x4,%esp
f0124086:	68 74 b0 13 f0       	push   $0xf013b074
f012408b:	68 43 08 00 00       	push   $0x843
f0124090:	68 5a b0 13 f0       	push   $0xf013b05a
f0124095:	e8 6b c1 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012409a:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012409d:	e8 fb 8a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01240a2:	29 c3                	sub    %eax,%ebx
f01240a4:	89 d8                	mov    %ebx,%eax
f01240a6:	83 f8 04             	cmp    $0x4,%eax
f01240a9:	74 17                	je     f01240c2 <test_kheap_phys_addr+0xaa9>
f01240ab:	83 ec 04             	sub    $0x4,%esp
f01240ae:	68 dc b0 13 f0       	push   $0xf013b0dc
f01240b3:	68 44 08 00 00       	push   $0x844
f01240b8:	68 5a b0 13 f0       	push   $0xf013b05a
f01240bd:	e8 43 c1 fd ff       	call   f0100205 <_panic>
	}

	//test kheap_physical_address after kmalloc only [40%]
	{
f01240c2:	89 e0                	mov    %esp,%eax
f01240c4:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f01240c6:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f01240cd:	10 00 00 
f01240d0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01240d6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01240db:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f01240e1:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01240e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01240ec:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f01240f2:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01240f8:	29 d0                	sub    %edx,%eax
f01240fa:	89 c1                	mov    %eax,%ecx
f01240fc:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f0124103:	10 00 00 
f0124106:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012410b:	0f b6 d0             	movzbl %al,%edx
f012410e:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0124114:	01 d0                	add    %edx,%eax
f0124116:	48                   	dec    %eax
f0124117:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f012411d:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0124123:	ba 00 00 00 00       	mov    $0x0,%edx
f0124128:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f012412e:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0124134:	29 d0                	sub    %edx,%eax
f0124136:	01 c1                	add    %eax,%ecx
f0124138:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f012413f:	10 00 00 
f0124142:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0124147:	0f b6 c0             	movzbl %al,%eax
f012414a:	c1 e0 04             	shl    $0x4,%eax
f012414d:	89 c2                	mov    %eax,%edx
f012414f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0124155:	01 d0                	add    %edx,%eax
f0124157:	48                   	dec    %eax
f0124158:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f012415e:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0124164:	ba 00 00 00 00       	mov    $0x0,%edx
f0124169:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f012416f:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0124175:	29 d0                	sub    %edx,%eax
f0124177:	01 c8                	add    %ecx,%eax
f0124179:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012417e:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0124184:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012418b:	10 00 00 
f012418e:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124194:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124199:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012419f:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01241a5:	ba 00 00 00 00       	mov    $0x0,%edx
f01241aa:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f01241b0:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01241b6:	29 d0                	sub    %edx,%eax
f01241b8:	89 c1                	mov    %eax,%ecx
f01241ba:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f01241c1:	10 00 00 
f01241c4:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01241c9:	0f b6 d0             	movzbl %al,%edx
f01241cc:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01241d2:	01 d0                	add    %edx,%eax
f01241d4:	48                   	dec    %eax
f01241d5:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f01241db:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01241e1:	ba 00 00 00 00       	mov    $0x0,%edx
f01241e6:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f01241ec:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01241f2:	29 d0                	sub    %edx,%eax
f01241f4:	01 c1                	add    %eax,%ecx
f01241f6:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f01241fd:	10 00 00 
f0124200:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0124205:	0f b6 c0             	movzbl %al,%eax
f0124208:	c1 e0 04             	shl    $0x4,%eax
f012420b:	89 c2                	mov    %eax,%edx
f012420d:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0124213:	01 d0                	add    %edx,%eax
f0124215:	48                   	dec    %eax
f0124216:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012421c:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0124222:	ba 00 00 00 00       	mov    $0x0,%edx
f0124227:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012422d:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0124233:	29 d0                	sub    %edx,%eax
f0124235:	01 c8                	add    %ecx,%eax
f0124237:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f012423c:	c1 e8 0c             	shr    $0xc,%eax
f012423f:	89 c2                	mov    %eax,%edx
f0124241:	4a                   	dec    %edx
f0124242:	89 95 ac fe ff ff    	mov    %edx,-0x154(%ebp)
f0124248:	c1 e0 02             	shl    $0x2,%eax
f012424b:	8d 50 03             	lea    0x3(%eax),%edx
f012424e:	b8 10 00 00 00       	mov    $0x10,%eax
f0124253:	48                   	dec    %eax
f0124254:	01 d0                	add    %edx,%eax
f0124256:	bf 10 00 00 00       	mov    $0x10,%edi
f012425b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124260:	f7 f7                	div    %edi
f0124262:	6b c0 10             	imul   $0x10,%eax,%eax
f0124265:	29 c4                	sub    %eax,%esp
f0124267:	89 e0                	mov    %esp,%eax
f0124269:	83 c0 03             	add    $0x3,%eax
f012426c:	c1 e8 02             	shr    $0x2,%eax
f012426f:	c1 e0 02             	shl    $0x2,%eax
f0124272:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		i = 0;
f0124278:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f012427f:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f0124286:	10 00 00 
f0124289:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012428f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124294:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f012429a:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01242a0:	ba 00 00 00 00       	mov    $0x0,%edx
f01242a5:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f01242ab:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01242b1:	29 d0                	sub    %edx,%eax
f01242b3:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01242b8:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01242bb:	eb 29                	jmp    f01242e6 <test_kheap_phys_addr+0xccd>
		{
			allPAs[i++] = kheap_physical_address(va);
f01242bd:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f01242c0:	8d 43 01             	lea    0x1(%ebx),%eax
f01242c3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01242c6:	83 ec 0c             	sub    $0xc,%esp
f01242c9:	ff 75 e0             	pushl  -0x20(%ebp)
f01242cc:	e8 d2 37 fe ff       	call   f0107aa3 <kheap_physical_address>
f01242d1:	83 c4 10             	add    $0x10,%esp
f01242d4:	89 c2                	mov    %eax,%edx
f01242d6:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01242dc:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f01242df:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f01242e6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01242e9:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f01242ef:	72 cc                	jb     f01242bd <test_kheap_phys_addr+0xca4>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f01242f1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01242f4:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		i = 0;
f01242fa:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124301:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0124308:	10 00 00 
f012430b:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0124311:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124316:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f012431c:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0124322:	ba 00 00 00 00       	mov    $0x0,%edx
f0124327:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f012432d:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0124333:	29 d0                	sub    %edx,%eax
f0124335:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f012433a:	89 45 e0             	mov    %eax,-0x20(%ebp)
f012433d:	e9 ab 00 00 00       	jmp    f01243ed <test_kheap_phys_addr+0xdd4>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0124342:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0124347:	83 ec 04             	sub    $0x4,%esp
f012434a:	8d 95 20 fd ff ff    	lea    -0x2e0(%ebp),%edx
f0124350:	52                   	push   %edx
f0124351:	ff 75 e0             	pushl  -0x20(%ebp)
f0124354:	50                   	push   %eax
f0124355:	e8 57 27 fe ff       	call   f0106ab1 <get_page_table>
f012435a:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f012435d:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f0124363:	85 c0                	test   %eax,%eax
f0124365:	75 17                	jne    f012437e <test_kheap_phys_addr+0xd65>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0124367:	83 ec 04             	sub    $0x4,%esp
f012436a:	68 fc b9 13 f0       	push   $0xf013b9fc
f012436f:	68 59 08 00 00       	push   $0x859
f0124374:	68 5a b0 13 f0       	push   $0xf013b05a
f0124379:	e8 87 be fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f012437e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124381:	c1 e8 0c             	shr    $0xc,%eax
f0124384:	25 ff 03 00 00       	and    $0x3ff,%eax
f0124389:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012438c:	eb 4b                	jmp    f01243d9 <test_kheap_phys_addr+0xdc0>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f012438e:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f0124394:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0124397:	c1 e2 02             	shl    $0x2,%edx
f012439a:	01 d0                	add    %edx,%eax
f012439c:	8b 00                	mov    (%eax),%eax
f012439e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01243a3:	89 c1                	mov    %eax,%ecx
f01243a5:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01243ab:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01243ae:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01243b1:	39 c1                	cmp    %eax,%ecx
f01243b3:	74 17                	je     f01243cc <test_kheap_phys_addr+0xdb3>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f01243b5:	83 ec 04             	sub    $0x4,%esp
f01243b8:	68 55 ba 13 f0       	push   $0xf013ba55
f01243bd:	68 60 08 00 00       	push   $0x860
f01243c2:	68 5a b0 13 f0       	push   $0xf013b05a
f01243c7:	e8 39 be fd ff       	call   f0100205 <_panic>
				}
				va+=PAGE_SIZE;
f01243cc:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f01243d3:	ff 45 dc             	incl   -0x24(%ebp)
f01243d6:	ff 45 e4             	incl   -0x1c(%ebp)
f01243d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01243dc:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f01243e2:	7d 09                	jge    f01243ed <test_kheap_phys_addr+0xdd4>
f01243e4:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f01243eb:	7e a1                	jle    f012438e <test_kheap_phys_addr+0xd75>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01243ed:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01243f0:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f01243f6:	0f 82 46 ff ff ff    	jb     f0124342 <test_kheap_phys_addr+0xd29>
f01243fc:	89 f4                	mov    %esi,%esp
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_physical_address: current evaluation = 40%");
f01243fe:	83 ec 0c             	sub    $0xc,%esp
f0124401:	68 74 ba 13 f0       	push   $0xf013ba74
f0124406:	e8 03 c9 fd ff       	call   f0100d0e <cprintf>
f012440b:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f012440e:	e8 8a 87 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0124413:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0124419:	e8 aa f9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012441e:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[0]);
f0124424:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f012442a:	83 ec 0c             	sub    $0xc,%esp
f012442d:	50                   	push   %eax
f012442e:	e8 1d 35 fe ff       	call   f0107950 <kfree>
f0124433:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124436:	e8 8d f9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012443b:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0124441:	74 17                	je     f012445a <test_kheap_phys_addr+0xe41>
f0124443:	83 ec 04             	sub    $0x4,%esp
f0124446:	68 74 b0 13 f0       	push   $0xf013b074
f012444b:	68 6e 08 00 00       	push   $0x86e
f0124450:	68 5a b0 13 f0       	push   $0xf013b05a
f0124455:	e8 ab bd fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012445a:	e8 3e 87 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012445f:	89 c2                	mov    %eax,%edx
f0124461:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0124467:	29 c2                	sub    %eax,%edx
f0124469:	89 d0                	mov    %edx,%eax
f012446b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124470:	74 17                	je     f0124489 <test_kheap_phys_addr+0xe70>
f0124472:	83 ec 04             	sub    $0x4,%esp
f0124475:	68 e4 b7 13 f0       	push   $0xf013b7e4
f012447a:	68 6f 08 00 00       	push   $0x86f
f012447f:	68 5a b0 13 f0       	push   $0xf013b05a
f0124484:	e8 7c bd fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124489:	e8 0f 87 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012448e:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124494:	e8 2f f9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124499:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[1]);
f012449f:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f01244a5:	83 ec 0c             	sub    $0xc,%esp
f01244a8:	50                   	push   %eax
f01244a9:	e8 a2 34 fe ff       	call   f0107950 <kfree>
f01244ae:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01244b1:	e8 12 f9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01244b6:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f01244bc:	74 17                	je     f01244d5 <test_kheap_phys_addr+0xebc>
f01244be:	83 ec 04             	sub    $0x4,%esp
f01244c1:	68 74 b0 13 f0       	push   $0xf013b074
f01244c6:	68 75 08 00 00       	push   $0x875
f01244cb:	68 5a b0 13 f0       	push   $0xf013b05a
f01244d0:	e8 30 bd fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01244d5:	e8 c3 86 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01244da:	89 c2                	mov    %eax,%edx
f01244dc:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01244e2:	29 c2                	sub    %eax,%edx
f01244e4:	89 d0                	mov    %edx,%eax
f01244e6:	3d 00 02 00 00       	cmp    $0x200,%eax
f01244eb:	74 17                	je     f0124504 <test_kheap_phys_addr+0xeeb>
f01244ed:	83 ec 04             	sub    $0x4,%esp
f01244f0:	68 e4 b7 13 f0       	push   $0xf013b7e4
f01244f5:	68 76 08 00 00       	push   $0x876
f01244fa:	68 5a b0 13 f0       	push   $0xf013b05a
f01244ff:	e8 01 bd fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0124504:	e8 94 86 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0124509:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012450f:	e8 b4 f8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124514:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[6]);
f012451a:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0124520:	83 ec 0c             	sub    $0xc,%esp
f0124523:	50                   	push   %eax
f0124524:	e8 27 34 fe ff       	call   f0107950 <kfree>
f0124529:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012452c:	e8 97 f8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124531:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0124537:	74 17                	je     f0124550 <test_kheap_phys_addr+0xf37>
f0124539:	83 ec 04             	sub    $0x4,%esp
f012453c:	68 74 b0 13 f0       	push   $0xf013b074
f0124541:	68 7c 08 00 00       	push   $0x87c
f0124546:	68 5a b0 13 f0       	push   $0xf013b05a
f012454b:	e8 b5 bc fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0124550:	e8 48 86 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0124555:	89 c2                	mov    %eax,%edx
f0124557:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012455d:	29 c2                	sub    %eax,%edx
f012455f:	89 d0                	mov    %edx,%eax
f0124561:	3d 00 06 00 00       	cmp    $0x600,%eax
f0124566:	74 17                	je     f012457f <test_kheap_phys_addr+0xf66>
f0124568:	83 ec 04             	sub    $0x4,%esp
f012456b:	68 e4 b7 13 f0       	push   $0xf013b7e4
f0124570:	68 7d 08 00 00       	push   $0x87d
f0124575:	68 5a b0 13 f0       	push   $0xf013b05a
f012457a:	e8 86 bc fd ff       	call   f0100205 <_panic>
	}


	//test kheap_physical_address after kmalloc and kfree [40%]
	{
f012457f:	89 e0                	mov    %esp,%eax
f0124581:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0124583:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f012458a:	10 00 00 
f012458d:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0124593:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124598:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f012459e:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01245a4:	ba 00 00 00 00       	mov    $0x0,%edx
f01245a9:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f01245af:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01245b5:	29 d0                	sub    %edx,%eax
f01245b7:	89 c1                	mov    %eax,%ecx
f01245b9:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f01245c0:	10 00 00 
f01245c3:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01245c8:	0f b6 d0             	movzbl %al,%edx
f01245cb:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01245d1:	01 d0                	add    %edx,%eax
f01245d3:	48                   	dec    %eax
f01245d4:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f01245da:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01245e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01245e5:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f01245eb:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01245f1:	29 d0                	sub    %edx,%eax
f01245f3:	01 c1                	add    %eax,%ecx
f01245f5:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f01245fc:	10 00 00 
f01245ff:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0124604:	0f b6 c0             	movzbl %al,%eax
f0124607:	c1 e0 04             	shl    $0x4,%eax
f012460a:	89 c2                	mov    %eax,%edx
f012460c:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0124612:	01 d0                	add    %edx,%eax
f0124614:	48                   	dec    %eax
f0124615:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f012461b:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0124621:	ba 00 00 00 00       	mov    $0x0,%edx
f0124626:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f012462c:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0124632:	29 d0                	sub    %edx,%eax
f0124634:	01 c8                	add    %ecx,%eax
f0124636:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012463b:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0124641:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f0124648:	10 00 00 
f012464b:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0124651:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124656:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f012465c:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0124662:	ba 00 00 00 00       	mov    $0x0,%edx
f0124667:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f012466d:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0124673:	29 d0                	sub    %edx,%eax
f0124675:	89 c1                	mov    %eax,%ecx
f0124677:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f012467e:	10 00 00 
f0124681:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0124686:	0f b6 d0             	movzbl %al,%edx
f0124689:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012468f:	01 d0                	add    %edx,%eax
f0124691:	48                   	dec    %eax
f0124692:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f0124698:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012469e:	ba 00 00 00 00       	mov    $0x0,%edx
f01246a3:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f01246a9:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01246af:	29 d0                	sub    %edx,%eax
f01246b1:	01 c1                	add    %eax,%ecx
f01246b3:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f01246ba:	10 00 00 
f01246bd:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01246c2:	0f b6 c0             	movzbl %al,%eax
f01246c5:	c1 e0 04             	shl    $0x4,%eax
f01246c8:	89 c2                	mov    %eax,%edx
f01246ca:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01246d0:	01 d0                	add    %edx,%eax
f01246d2:	48                   	dec    %eax
f01246d3:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f01246d9:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01246df:	ba 00 00 00 00       	mov    $0x0,%edx
f01246e4:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f01246ea:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01246f0:	29 d0                	sub    %edx,%eax
f01246f2:	01 c8                	add    %ecx,%eax
f01246f4:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f01246f9:	c1 e8 0c             	shr    $0xc,%eax
f01246fc:	89 c2                	mov    %eax,%edx
f01246fe:	4a                   	dec    %edx
f01246ff:	89 95 54 fe ff ff    	mov    %edx,-0x1ac(%ebp)
f0124705:	c1 e0 02             	shl    $0x2,%eax
f0124708:	8d 50 03             	lea    0x3(%eax),%edx
f012470b:	b8 10 00 00 00       	mov    $0x10,%eax
f0124710:	48                   	dec    %eax
f0124711:	01 d0                	add    %edx,%eax
f0124713:	bf 10 00 00 00       	mov    $0x10,%edi
f0124718:	ba 00 00 00 00       	mov    $0x0,%edx
f012471d:	f7 f7                	div    %edi
f012471f:	6b c0 10             	imul   $0x10,%eax,%eax
f0124722:	29 c4                	sub    %eax,%esp
f0124724:	89 e0                	mov    %esp,%eax
f0124726:	83 c0 03             	add    $0x3,%eax
f0124729:	c1 e8 02             	shr    $0x2,%eax
f012472c:	c1 e0 02             	shl    $0x2,%eax
f012472f:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		i = 0;
f0124735:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f012473c:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0124743:	10 00 00 
f0124746:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012474c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124751:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0124757:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012475d:	ba 00 00 00 00       	mov    $0x0,%edx
f0124762:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0124768:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012476e:	29 d0                	sub    %edx,%eax
f0124770:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124775:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124778:	eb 29                	jmp    f01247a3 <test_kheap_phys_addr+0x118a>
		{
			allPAs[i++] = kheap_physical_address(va);
f012477a:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f012477d:	8d 43 01             	lea    0x1(%ebx),%eax
f0124780:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0124783:	83 ec 0c             	sub    $0xc,%esp
f0124786:	ff 75 d8             	pushl  -0x28(%ebp)
f0124789:	e8 15 33 fe ff       	call   f0107aa3 <kheap_physical_address>
f012478e:	83 c4 10             	add    $0x10,%esp
f0124791:	89 c2                	mov    %eax,%edx
f0124793:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0124799:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f012479c:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f01247a3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01247a6:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f01247ac:	72 cc                	jb     f012477a <test_kheap_phys_addr+0x1161>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f01247ae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01247b1:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		i = 0;
f01247b7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01247be:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f01247c5:	10 00 00 
f01247c8:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01247ce:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01247d3:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f01247d9:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01247df:	ba 00 00 00 00       	mov    $0x0,%edx
f01247e4:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f01247ea:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01247f0:	29 d0                	sub    %edx,%eax
f01247f2:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01247f7:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01247fa:	e9 ab 00 00 00       	jmp    f01248aa <test_kheap_phys_addr+0x1291>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f01247ff:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0124804:	83 ec 04             	sub    $0x4,%esp
f0124807:	8d 95 1c fd ff ff    	lea    -0x2e4(%ebp),%edx
f012480d:	52                   	push   %edx
f012480e:	ff 75 d8             	pushl  -0x28(%ebp)
f0124811:	50                   	push   %eax
f0124812:	e8 9a 22 fe ff       	call   f0106ab1 <get_page_table>
f0124817:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f012481a:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f0124820:	85 c0                	test   %eax,%eax
f0124822:	75 17                	jne    f012483b <test_kheap_phys_addr+0x1222>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0124824:	83 ec 04             	sub    $0x4,%esp
f0124827:	68 fc b9 13 f0       	push   $0xf013b9fc
f012482c:	68 93 08 00 00       	push   $0x893
f0124831:	68 5a b0 13 f0       	push   $0xf013b05a
f0124836:	e8 ca b9 fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f012483b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012483e:	c1 e8 0c             	shr    $0xc,%eax
f0124841:	25 ff 03 00 00       	and    $0x3ff,%eax
f0124846:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0124849:	eb 4b                	jmp    f0124896 <test_kheap_phys_addr+0x127d>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f012484b:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f0124851:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0124854:	c1 e2 02             	shl    $0x2,%edx
f0124857:	01 d0                	add    %edx,%eax
f0124859:	8b 00                	mov    (%eax),%eax
f012485b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0124860:	89 c1                	mov    %eax,%ecx
f0124862:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0124868:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f012486b:	8b 04 90             	mov    (%eax,%edx,4),%eax
f012486e:	39 c1                	cmp    %eax,%ecx
f0124870:	74 17                	je     f0124889 <test_kheap_phys_addr+0x1270>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0124872:	83 ec 04             	sub    $0x4,%esp
f0124875:	68 55 ba 13 f0       	push   $0xf013ba55
f012487a:	68 9a 08 00 00       	push   $0x89a
f012487f:	68 5a b0 13 f0       	push   $0xf013b05a
f0124884:	e8 7c b9 fd ff       	call   f0100205 <_panic>
				}
				va += PAGE_SIZE;
f0124889:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124890:	ff 45 d4             	incl   -0x2c(%ebp)
f0124893:	ff 45 e4             	incl   -0x1c(%ebp)
f0124896:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124899:	3b 85 44 fe ff ff    	cmp    -0x1bc(%ebp),%eax
f012489f:	7d 09                	jge    f01248aa <test_kheap_phys_addr+0x1291>
f01248a1:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f01248a8:	7e a1                	jle    f012484b <test_kheap_phys_addr+0x1232>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01248aa:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01248ad:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f01248b3:	0f 82 46 ff ff ff    	jb     f01247ff <test_kheap_phys_addr+0x11e6>
f01248b9:	89 f4                	mov    %esi,%esp
				va += PAGE_SIZE;
			}
		}
	}

	cprintf("\b\b\b80%");
f01248bb:	83 ec 0c             	sub    $0xc,%esp
f01248be:	68 e5 b1 13 f0       	push   $0xf013b1e5
f01248c3:	e8 46 c4 fd ff       	call   f0100d0e <cprintf>
f01248c8:	83 c4 10             	add    $0x10,%esp

	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f01248cb:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f01248d2:	10 00 00 
f01248d5:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01248db:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01248e0:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f01248e6:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f01248ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01248f1:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f01248f7:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f01248fd:	29 d0                	sub    %edx,%eax
f01248ff:	89 c1                	mov    %eax,%ecx
f0124901:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f0124908:	10 00 00 
f012490b:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0124910:	0f b6 d0             	movzbl %al,%edx
f0124913:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0124919:	01 d0                	add    %edx,%eax
f012491b:	48                   	dec    %eax
f012491c:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f0124922:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0124928:	ba 00 00 00 00       	mov    $0x0,%edx
f012492d:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f0124933:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0124939:	29 d0                	sub    %edx,%eax
f012493b:	01 c1                	add    %eax,%ecx
f012493d:	c7 85 28 fe ff ff 00 	movl   $0x1000,-0x1d8(%ebp)
f0124944:	10 00 00 
f0124947:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012494c:	0f b6 c0             	movzbl %al,%eax
f012494f:	c1 e0 04             	shl    $0x4,%eax
f0124952:	89 c2                	mov    %eax,%edx
f0124954:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012495a:	01 d0                	add    %edx,%eax
f012495c:	48                   	dec    %eax
f012495d:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
f0124963:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0124969:	ba 00 00 00 00       	mov    $0x0,%edx
f012496e:	f7 b5 28 fe ff ff    	divl   -0x1d8(%ebp)
f0124974:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012497a:	29 d0                	sub    %edx,%eax
f012497c:	01 c8                	add    %ecx,%eax
f012497e:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
f0124983:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		i = 0;
f0124989:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0124990:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0124996:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0124999:	eb 0a                	jmp    f01249a5 <test_kheap_phys_addr+0x138c>
		{
			i++;
f012499b:	ff 45 e4             	incl   -0x1c(%ebp)
	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f012499e:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f01249a5:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f01249ac:	76 ed                	jbe    f012499b <test_kheap_phys_addr+0x1382>
		{
			i++;
		}
		int ii = i ;
f01249ae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01249b1:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
		i = 0;
f01249b7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f01249be:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01249c4:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01249c7:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f01249ce:	e9 cc 00 00 00       	jmp    f0124a9f <test_kheap_phys_addr+0x1486>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
f01249d3:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01249d6:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f01249db:	83 ec 04             	sub    $0x4,%esp
f01249de:	8d 8d 18 fd ff ff    	lea    -0x2e8(%ebp),%ecx
f01249e4:	51                   	push   %ecx
f01249e5:	52                   	push   %edx
f01249e6:	50                   	push   %eax
f01249e7:	e8 c5 20 fe ff       	call   f0106ab1 <get_page_table>
f01249ec:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01249ef:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f01249f5:	85 c0                	test   %eax,%eax
f01249f7:	75 17                	jne    f0124a10 <test_kheap_phys_addr+0x13f7>
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f01249f9:	83 ec 04             	sub    $0x4,%esp
f01249fc:	68 fc b9 13 f0       	push   $0xf013b9fc
f0124a01:	68 b6 08 00 00       	push   $0x8b6
f0124a06:	68 5a b0 13 f0       	push   $0xf013b05a
f0124a0b:	e8 f5 b7 fd ff       	call   f0100205 <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0124a10:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0124a17:	eb 67                	jmp    f0124a80 <test_kheap_phys_addr+0x1467>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f0124a19:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124a1c:	c1 e0 0c             	shl    $0xc,%eax
f0124a1f:	89 c2                	mov    %eax,%edx
f0124a21:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0124a27:	01 d0                	add    %edx,%eax
f0124a29:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f0124a2f:	83 ec 0c             	sub    $0xc,%esp
f0124a32:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f0124a38:	e8 66 30 fe ff       	call   f0107aa3 <kheap_physical_address>
f0124a3d:	83 c4 10             	add    $0x10,%esp
f0124a40:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
				if ((ptr_table[j] & 0xFFFFF000) != supposed_kheap_phys_add)
f0124a46:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f0124a4c:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0124a4f:	c1 e2 02             	shl    $0x2,%edx
f0124a52:	01 d0                	add    %edx,%eax
f0124a54:	8b 00                	mov    (%eax),%eax
f0124a56:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0124a5b:	3b 85 14 fe ff ff    	cmp    -0x1ec(%ebp),%eax
f0124a61:	74 17                	je     f0124a7a <test_kheap_phys_addr+0x1461>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0124a63:	83 ec 04             	sub    $0x4,%esp
f0124a66:	68 55 ba 13 f0       	push   $0xf013ba55
f0124a6b:	68 c0 08 00 00       	push   $0x8c0
f0124a70:	68 5a b0 13 f0       	push   $0xf013b05a
f0124a75:	e8 8b b7 fd ff       	call   f0100205 <_panic>
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
			if (ptr_table == NULL)
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0124a7a:	ff 45 cc             	incl   -0x34(%ebp)
f0124a7d:	ff 45 e4             	incl   -0x1c(%ebp)
f0124a80:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124a83:	3b 85 1c fe ff ff    	cmp    -0x1e4(%ebp),%eax
f0124a89:	7d 09                	jge    f0124a94 <test_kheap_phys_addr+0x147b>
f0124a8b:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f0124a92:	7e 85                	jle    f0124a19 <test_kheap_phys_addr+0x1400>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0124a94:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f0124a9b:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f0124a9f:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0124aa3:	0f 88 2a ff ff ff    	js     f01249d3 <test_kheap_phys_addr+0x13ba>
f0124aa9:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0124aad:	7f 0d                	jg     f0124abc <test_kheap_phys_addr+0x14a3>
f0124aaf:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f0124ab6:	0f 86 17 ff ff ff    	jbe    f01249d3 <test_kheap_phys_addr+0x13ba>
				}
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0124abc:	83 ec 0c             	sub    $0xc,%esp
f0124abf:	68 3e b2 13 f0       	push   $0xf013b23e
f0124ac4:	e8 45 c2 fd ff       	call   f0100d0e <cprintf>
f0124ac9:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_physical_address completed successfully.\n");
f0124acc:	83 ec 0c             	sub    $0xc,%esp
f0124acf:	68 a8 ba 13 f0       	push   $0xf013baa8
f0124ad4:	e8 35 c2 fd ff       	call   f0100d0e <cprintf>
f0124ad9:	83 c4 10             	add    $0x10,%esp

	return 1;
f0124adc:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0124ae1:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0124ae4:	5b                   	pop    %ebx
f0124ae5:	5e                   	pop    %esi
f0124ae6:	5f                   	pop    %edi
f0124ae7:	5d                   	pop    %ebp
f0124ae8:	c3                   	ret    

f0124ae9 <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f0124ae9:	55                   	push   %ebp
f0124aea:	89 e5                	mov    %esp,%ebp
f0124aec:	57                   	push   %edi
f0124aed:	56                   	push   %esi
f0124aee:	53                   	push   %ebx
f0124aef:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
f0124af5:	89 e0                	mov    %esp,%eax
f0124af7:	89 c6                	mov    %eax,%esi
	cprintf("==============================================\n");
f0124af9:	83 ec 0c             	sub    $0xc,%esp
f0124afc:	68 9c af 13 f0       	push   $0xf013af9c
f0124b01:	e8 08 c2 fd ff       	call   f0100d0e <cprintf>
f0124b06:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0124b09:	83 ec 0c             	sub    $0xc,%esp
f0124b0c:	68 cc af 13 f0       	push   $0xf013afcc
f0124b11:	e8 f8 c1 fd ff       	call   f0100d0e <cprintf>
f0124b16:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0124b19:	83 ec 0c             	sub    $0xc,%esp
f0124b1c:	68 9c af 13 f0       	push   $0xf013af9c
f0124b21:	e8 e8 c1 fd ff       	call   f0100d0e <cprintf>
f0124b26:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0124b29:	c6 45 d3 80          	movb   $0x80,-0x2d(%ebp)
	char maxByte = 0x7F;
f0124b2d:	c6 45 d2 7f          	movb   $0x7f,-0x2e(%ebp)
	short minShort = 1<<15 ;
f0124b31:	66 c7 45 d0 00 80    	movw   $0x8000,-0x30(%ebp)
	short maxShort = 0x7FFF;
f0124b37:	66 c7 45 ce ff 7f    	movw   $0x7fff,-0x32(%ebp)
	int minInt = 1<<31 ;
f0124b3d:	c7 45 c8 00 00 00 80 	movl   $0x80000000,-0x38(%ebp)
	int maxInt = 0x7FFFFFFF;
f0124b44:	c7 45 c4 ff ff ff 7f 	movl   $0x7fffffff,-0x3c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0124b4b:	e8 4d 80 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0124b50:	89 45 c0             	mov    %eax,-0x40(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0124b53:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0124b59:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124b5e:	b8 00 00 00 00       	mov    $0x0,%eax
f0124b63:	89 d7                	mov    %edx,%edi
f0124b65:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0124b67:	8d 95 78 fd ff ff    	lea    -0x288(%ebp),%edx
f0124b6d:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124b72:	b8 00 00 00 00       	mov    $0x0,%eax
f0124b77:	89 d7                	mov    %edx,%edi
f0124b79:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0124b7b:	8d 95 28 fd ff ff    	lea    -0x2d8(%ebp),%edx
f0124b81:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124b86:	b8 00 00 00 00       	mov    $0x0,%eax
f0124b8b:	89 d7                	mov    %edx,%edi
f0124b8d:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124b8f:	e8 09 80 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0124b94:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124b97:	e8 2c f2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124b9c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0124b9f:	83 ec 0c             	sub    $0xc,%esp
f0124ba2:	68 00 fc 1f 00       	push   $0x1ffc00
f0124ba7:	e8 d9 2c fe ff       	call   f0107885 <kmalloc>
f0124bac:	83 c4 10             	add    $0x10,%esp
f0124baf:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124bb5:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0124bbb:	89 c1                	mov    %eax,%ecx
f0124bbd:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0124bc4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0124bc7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124bcc:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0124bcf:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0124bd2:	ba 00 00 00 00       	mov    $0x0,%edx
f0124bd7:	f7 75 b4             	divl   -0x4c(%ebp)
f0124bda:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0124bdd:	29 d0                	sub    %edx,%eax
f0124bdf:	89 c3                	mov    %eax,%ebx
f0124be1:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0124be8:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0124bed:	0f b6 d0             	movzbl %al,%edx
f0124bf0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0124bf3:	01 d0                	add    %edx,%eax
f0124bf5:	48                   	dec    %eax
f0124bf6:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0124bf9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0124bfc:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c01:	f7 75 ac             	divl   -0x54(%ebp)
f0124c04:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0124c07:	29 d0                	sub    %edx,%eax
f0124c09:	01 c3                	add    %eax,%ebx
f0124c0b:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0124c12:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0124c17:	0f b6 c0             	movzbl %al,%eax
f0124c1a:	c1 e0 04             	shl    $0x4,%eax
f0124c1d:	89 c2                	mov    %eax,%edx
f0124c1f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0124c22:	01 d0                	add    %edx,%eax
f0124c24:	48                   	dec    %eax
f0124c25:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0124c28:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0124c2b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c30:	f7 75 a4             	divl   -0x5c(%ebp)
f0124c33:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0124c36:	29 d0                	sub    %edx,%eax
f0124c38:	01 d8                	add    %ebx,%eax
f0124c3a:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0124c3f:	39 c1                	cmp    %eax,%ecx
f0124c41:	74 17                	je     f0124c5a <test_kheap_virt_addr+0x171>
f0124c43:	83 ec 04             	sub    $0x4,%esp
f0124c46:	68 40 b1 13 f0       	push   $0xf013b140
f0124c4b:	68 ed 08 00 00       	push   $0x8ed
f0124c50:	68 5a b0 13 f0       	push   $0xf013b05a
f0124c55:	e8 ab b5 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124c5a:	e8 69 f1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124c5f:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124c62:	74 17                	je     f0124c7b <test_kheap_virt_addr+0x192>
f0124c64:	83 ec 04             	sub    $0x4,%esp
f0124c67:	68 74 b0 13 f0       	push   $0xf013b074
f0124c6c:	68 ee 08 00 00       	push   $0x8ee
f0124c71:	68 5a b0 13 f0       	push   $0xf013b05a
f0124c76:	e8 8a b5 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124c7b:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124c7e:	e8 1a 7f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0124c83:	29 c3                	sub    %eax,%ebx
f0124c85:	89 d8                	mov    %ebx,%eax
f0124c87:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124c8c:	74 17                	je     f0124ca5 <test_kheap_virt_addr+0x1bc>
f0124c8e:	83 ec 04             	sub    $0x4,%esp
f0124c91:	68 dc b0 13 f0       	push   $0xf013b0dc
f0124c96:	68 ef 08 00 00       	push   $0x8ef
f0124c9b:	68 5a b0 13 f0       	push   $0xf013b05a
f0124ca0:	e8 60 b5 fd ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124ca5:	e8 f3 7e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0124caa:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124cad:	e8 16 f1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124cb2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0124cb5:	83 ec 0c             	sub    $0xc,%esp
f0124cb8:	68 00 fc 1f 00       	push   $0x1ffc00
f0124cbd:	e8 c3 2b fe ff       	call   f0107885 <kmalloc>
f0124cc2:	83 c4 10             	add    $0x10,%esp
f0124cc5:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124ccb:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f0124cd1:	89 c1                	mov    %eax,%ecx
f0124cd3:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0124cda:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0124cdd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124ce2:	89 45 98             	mov    %eax,-0x68(%ebp)
f0124ce5:	8b 45 98             	mov    -0x68(%ebp),%eax
f0124ce8:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ced:	f7 75 9c             	divl   -0x64(%ebp)
f0124cf0:	8b 45 98             	mov    -0x68(%ebp),%eax
f0124cf3:	29 d0                	sub    %edx,%eax
f0124cf5:	89 c3                	mov    %eax,%ebx
f0124cf7:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0124cfe:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0124d03:	0f b6 d0             	movzbl %al,%edx
f0124d06:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0124d09:	01 d0                	add    %edx,%eax
f0124d0b:	48                   	dec    %eax
f0124d0c:	89 45 90             	mov    %eax,-0x70(%ebp)
f0124d0f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0124d12:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d17:	f7 75 94             	divl   -0x6c(%ebp)
f0124d1a:	8b 45 90             	mov    -0x70(%ebp),%eax
f0124d1d:	29 d0                	sub    %edx,%eax
f0124d1f:	01 c3                	add    %eax,%ebx
f0124d21:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0124d28:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0124d2d:	0f b6 c0             	movzbl %al,%eax
f0124d30:	c1 e0 04             	shl    $0x4,%eax
f0124d33:	89 c2                	mov    %eax,%edx
f0124d35:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0124d38:	01 d0                	add    %edx,%eax
f0124d3a:	48                   	dec    %eax
f0124d3b:	89 45 88             	mov    %eax,-0x78(%ebp)
f0124d3e:	8b 45 88             	mov    -0x78(%ebp),%eax
f0124d41:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d46:	f7 75 8c             	divl   -0x74(%ebp)
f0124d49:	8b 45 88             	mov    -0x78(%ebp),%eax
f0124d4c:	29 d0                	sub    %edx,%eax
f0124d4e:	01 d8                	add    %ebx,%eax
f0124d50:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0124d55:	39 c1                	cmp    %eax,%ecx
f0124d57:	74 17                	je     f0124d70 <test_kheap_virt_addr+0x287>
f0124d59:	83 ec 04             	sub    $0x4,%esp
f0124d5c:	68 40 b1 13 f0       	push   $0xf013b140
f0124d61:	68 f5 08 00 00       	push   $0x8f5
f0124d66:	68 5a b0 13 f0       	push   $0xf013b05a
f0124d6b:	e8 95 b4 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124d70:	e8 53 f0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124d75:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124d78:	74 17                	je     f0124d91 <test_kheap_virt_addr+0x2a8>
f0124d7a:	83 ec 04             	sub    $0x4,%esp
f0124d7d:	68 74 b0 13 f0       	push   $0xf013b074
f0124d82:	68 f6 08 00 00       	push   $0x8f6
f0124d87:	68 5a b0 13 f0       	push   $0xf013b05a
f0124d8c:	e8 74 b4 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124d91:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124d94:	e8 04 7e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0124d99:	29 c3                	sub    %eax,%ebx
f0124d9b:	89 d8                	mov    %ebx,%eax
f0124d9d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124da2:	74 17                	je     f0124dbb <test_kheap_virt_addr+0x2d2>
f0124da4:	83 ec 04             	sub    $0x4,%esp
f0124da7:	68 dc b0 13 f0       	push   $0xf013b0dc
f0124dac:	68 f7 08 00 00       	push   $0x8f7
f0124db1:	68 5a b0 13 f0       	push   $0xf013b05a
f0124db6:	e8 4a b4 fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0124dbb:	e8 dd 7d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0124dc0:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124dc3:	e8 00 f0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124dc8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0124dcb:	83 ec 0c             	sub    $0xc,%esp
f0124dce:	68 00 08 00 00       	push   $0x800
f0124dd3:	e8 ad 2a fe ff       	call   f0107885 <kmalloc>
f0124dd8:	83 c4 10             	add    $0x10,%esp
f0124ddb:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124de1:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f0124de7:	89 c1                	mov    %eax,%ecx
f0124de9:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0124df0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0124df3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124df8:	89 45 80             	mov    %eax,-0x80(%ebp)
f0124dfb:	8b 45 80             	mov    -0x80(%ebp),%eax
f0124dfe:	ba 00 00 00 00       	mov    $0x0,%edx
f0124e03:	f7 75 84             	divl   -0x7c(%ebp)
f0124e06:	8b 45 80             	mov    -0x80(%ebp),%eax
f0124e09:	29 d0                	sub    %edx,%eax
f0124e0b:	89 c3                	mov    %eax,%ebx
f0124e0d:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0124e14:	10 00 00 
f0124e17:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0124e1c:	0f b6 d0             	movzbl %al,%edx
f0124e1f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0124e25:	01 d0                	add    %edx,%eax
f0124e27:	48                   	dec    %eax
f0124e28:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0124e2e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0124e34:	ba 00 00 00 00       	mov    $0x0,%edx
f0124e39:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0124e3f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0124e45:	29 d0                	sub    %edx,%eax
f0124e47:	01 c3                	add    %eax,%ebx
f0124e49:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0124e50:	10 00 00 
f0124e53:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0124e58:	0f b6 c0             	movzbl %al,%eax
f0124e5b:	c1 e0 04             	shl    $0x4,%eax
f0124e5e:	89 c2                	mov    %eax,%edx
f0124e60:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0124e66:	01 d0                	add    %edx,%eax
f0124e68:	48                   	dec    %eax
f0124e69:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0124e6f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0124e75:	ba 00 00 00 00       	mov    $0x0,%edx
f0124e7a:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0124e80:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0124e86:	29 d0                	sub    %edx,%eax
f0124e88:	01 d8                	add    %ebx,%eax
f0124e8a:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0124e8f:	39 c1                	cmp    %eax,%ecx
f0124e91:	74 17                	je     f0124eaa <test_kheap_virt_addr+0x3c1>
f0124e93:	83 ec 04             	sub    $0x4,%esp
f0124e96:	68 40 b1 13 f0       	push   $0xf013b140
f0124e9b:	68 fd 08 00 00       	push   $0x8fd
f0124ea0:	68 5a b0 13 f0       	push   $0xf013b05a
f0124ea5:	e8 5b b3 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124eaa:	e8 19 ef fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124eaf:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124eb2:	74 17                	je     f0124ecb <test_kheap_virt_addr+0x3e2>
f0124eb4:	83 ec 04             	sub    $0x4,%esp
f0124eb7:	68 74 b0 13 f0       	push   $0xf013b074
f0124ebc:	68 fe 08 00 00       	push   $0x8fe
f0124ec1:	68 5a b0 13 f0       	push   $0xf013b05a
f0124ec6:	e8 3a b3 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124ecb:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124ece:	e8 ca 7c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0124ed3:	29 c3                	sub    %eax,%ebx
f0124ed5:	89 d8                	mov    %ebx,%eax
f0124ed7:	83 f8 01             	cmp    $0x1,%eax
f0124eda:	74 17                	je     f0124ef3 <test_kheap_virt_addr+0x40a>
f0124edc:	83 ec 04             	sub    $0x4,%esp
f0124edf:	68 dc b0 13 f0       	push   $0xf013b0dc
f0124ee4:	68 ff 08 00 00       	push   $0x8ff
f0124ee9:	68 5a b0 13 f0       	push   $0xf013b05a
f0124eee:	e8 12 b3 fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0124ef3:	e8 a5 7c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0124ef8:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124efb:	e8 c8 ee fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124f00:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0124f03:	83 ec 0c             	sub    $0xc,%esp
f0124f06:	68 00 08 00 00       	push   $0x800
f0124f0b:	e8 75 29 fe ff       	call   f0107885 <kmalloc>
f0124f10:	83 c4 10             	add    $0x10,%esp
f0124f13:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124f19:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f0124f1f:	89 c1                	mov    %eax,%ecx
f0124f21:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0124f28:	10 00 00 
f0124f2b:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0124f31:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124f36:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0124f3c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0124f42:	ba 00 00 00 00       	mov    $0x0,%edx
f0124f47:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0124f4d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0124f53:	29 d0                	sub    %edx,%eax
f0124f55:	89 c3                	mov    %eax,%ebx
f0124f57:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0124f5e:	10 00 00 
f0124f61:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0124f66:	0f b6 d0             	movzbl %al,%edx
f0124f69:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0124f6f:	01 d0                	add    %edx,%eax
f0124f71:	48                   	dec    %eax
f0124f72:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0124f78:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0124f7e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124f83:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0124f89:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0124f8f:	29 d0                	sub    %edx,%eax
f0124f91:	01 c3                	add    %eax,%ebx
f0124f93:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0124f9a:	10 00 00 
f0124f9d:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0124fa2:	0f b6 c0             	movzbl %al,%eax
f0124fa5:	c1 e0 04             	shl    $0x4,%eax
f0124fa8:	89 c2                	mov    %eax,%edx
f0124faa:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0124fb0:	01 d0                	add    %edx,%eax
f0124fb2:	48                   	dec    %eax
f0124fb3:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0124fb9:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0124fbf:	ba 00 00 00 00       	mov    $0x0,%edx
f0124fc4:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0124fca:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0124fd0:	29 d0                	sub    %edx,%eax
f0124fd2:	01 d8                	add    %ebx,%eax
f0124fd4:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0124fd9:	39 c1                	cmp    %eax,%ecx
f0124fdb:	74 17                	je     f0124ff4 <test_kheap_virt_addr+0x50b>
f0124fdd:	83 ec 04             	sub    $0x4,%esp
f0124fe0:	68 40 b1 13 f0       	push   $0xf013b140
f0124fe5:	68 05 09 00 00       	push   $0x905
f0124fea:	68 5a b0 13 f0       	push   $0xf013b05a
f0124fef:	e8 11 b2 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124ff4:	e8 cf ed fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124ff9:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124ffc:	74 17                	je     f0125015 <test_kheap_virt_addr+0x52c>
f0124ffe:	83 ec 04             	sub    $0x4,%esp
f0125001:	68 74 b0 13 f0       	push   $0xf013b074
f0125006:	68 06 09 00 00       	push   $0x906
f012500b:	68 5a b0 13 f0       	push   $0xf013b05a
f0125010:	e8 f0 b1 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125015:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125018:	e8 80 7b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012501d:	29 c3                	sub    %eax,%ebx
f012501f:	89 d8                	mov    %ebx,%eax
f0125021:	83 f8 01             	cmp    $0x1,%eax
f0125024:	74 17                	je     f012503d <test_kheap_virt_addr+0x554>
f0125026:	83 ec 04             	sub    $0x4,%esp
f0125029:	68 dc b0 13 f0       	push   $0xf013b0dc
f012502e:	68 07 09 00 00       	push   $0x907
f0125033:	68 5a b0 13 f0       	push   $0xf013b05a
f0125038:	e8 c8 b1 fd ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012503d:	e8 5b 7b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125042:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125045:	e8 7e ed fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012504a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012504d:	83 ec 0c             	sub    $0xc,%esp
f0125050:	68 00 1c 00 00       	push   $0x1c00
f0125055:	e8 2b 28 fe ff       	call   f0107885 <kmalloc>
f012505a:	83 c4 10             	add    $0x10,%esp
f012505d:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125063:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f0125069:	89 c1                	mov    %eax,%ecx
f012506b:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0125072:	10 00 00 
f0125075:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012507b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125080:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0125086:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012508c:	ba 00 00 00 00       	mov    $0x0,%edx
f0125091:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0125097:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012509d:	29 d0                	sub    %edx,%eax
f012509f:	89 c3                	mov    %eax,%ebx
f01250a1:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f01250a8:	10 00 00 
f01250ab:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01250b0:	0f b6 d0             	movzbl %al,%edx
f01250b3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01250b9:	01 d0                	add    %edx,%eax
f01250bb:	48                   	dec    %eax
f01250bc:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f01250c2:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01250c8:	ba 00 00 00 00       	mov    $0x0,%edx
f01250cd:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f01250d3:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01250d9:	29 d0                	sub    %edx,%eax
f01250db:	01 c3                	add    %eax,%ebx
f01250dd:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f01250e4:	10 00 00 
f01250e7:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01250ec:	0f b6 c0             	movzbl %al,%eax
f01250ef:	c1 e0 04             	shl    $0x4,%eax
f01250f2:	89 c2                	mov    %eax,%edx
f01250f4:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01250fa:	01 d0                	add    %edx,%eax
f01250fc:	48                   	dec    %eax
f01250fd:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0125103:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0125109:	ba 00 00 00 00       	mov    $0x0,%edx
f012510e:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0125114:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012511a:	29 d0                	sub    %edx,%eax
f012511c:	01 d8                	add    %ebx,%eax
f012511e:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0125123:	39 c1                	cmp    %eax,%ecx
f0125125:	74 17                	je     f012513e <test_kheap_virt_addr+0x655>
f0125127:	83 ec 04             	sub    $0x4,%esp
f012512a:	68 40 b1 13 f0       	push   $0xf013b140
f012512f:	68 0d 09 00 00       	push   $0x90d
f0125134:	68 5a b0 13 f0       	push   $0xf013b05a
f0125139:	e8 c7 b0 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012513e:	e8 85 ec fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125143:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125146:	74 17                	je     f012515f <test_kheap_virt_addr+0x676>
f0125148:	83 ec 04             	sub    $0x4,%esp
f012514b:	68 74 b0 13 f0       	push   $0xf013b074
f0125150:	68 0e 09 00 00       	push   $0x90e
f0125155:	68 5a b0 13 f0       	push   $0xf013b05a
f012515a:	e8 a6 b0 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012515f:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125162:	e8 36 7a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125167:	29 c3                	sub    %eax,%ebx
f0125169:	89 d8                	mov    %ebx,%eax
f012516b:	83 f8 02             	cmp    $0x2,%eax
f012516e:	74 17                	je     f0125187 <test_kheap_virt_addr+0x69e>
f0125170:	83 ec 04             	sub    $0x4,%esp
f0125173:	68 dc b0 13 f0       	push   $0xf013b0dc
f0125178:	68 0f 09 00 00       	push   $0x90f
f012517d:	68 5a b0 13 f0       	push   $0xf013b05a
f0125182:	e8 7e b0 fd ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0125187:	e8 11 7a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012518c:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012518f:	e8 34 ec fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125194:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0125197:	83 ec 0c             	sub    $0xc,%esp
f012519a:	68 00 fc 2f 00       	push   $0x2ffc00
f012519f:	e8 e1 26 fe ff       	call   f0107885 <kmalloc>
f01251a4:	83 c4 10             	add    $0x10,%esp
f01251a7:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01251ad:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f01251b3:	89 c1                	mov    %eax,%ecx
f01251b5:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f01251bc:	10 00 00 
f01251bf:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01251c5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01251ca:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01251d0:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01251d6:	ba 00 00 00 00       	mov    $0x0,%edx
f01251db:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01251e1:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01251e7:	29 d0                	sub    %edx,%eax
f01251e9:	89 c3                	mov    %eax,%ebx
f01251eb:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01251f2:	10 00 00 
f01251f5:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01251fa:	0f b6 d0             	movzbl %al,%edx
f01251fd:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0125203:	01 d0                	add    %edx,%eax
f0125205:	48                   	dec    %eax
f0125206:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012520c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0125212:	ba 00 00 00 00       	mov    $0x0,%edx
f0125217:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012521d:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0125223:	29 d0                	sub    %edx,%eax
f0125225:	01 c3                	add    %eax,%ebx
f0125227:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012522e:	10 00 00 
f0125231:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0125236:	0f b6 c0             	movzbl %al,%eax
f0125239:	c1 e0 04             	shl    $0x4,%eax
f012523c:	89 c2                	mov    %eax,%edx
f012523e:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0125244:	01 d0                	add    %edx,%eax
f0125246:	48                   	dec    %eax
f0125247:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012524d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125253:	ba 00 00 00 00       	mov    $0x0,%edx
f0125258:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012525e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125264:	29 d0                	sub    %edx,%eax
f0125266:	01 d8                	add    %ebx,%eax
f0125268:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012526d:	39 c1                	cmp    %eax,%ecx
f012526f:	74 17                	je     f0125288 <test_kheap_virt_addr+0x79f>
f0125271:	83 ec 04             	sub    $0x4,%esp
f0125274:	68 40 b1 13 f0       	push   $0xf013b140
f0125279:	68 15 09 00 00       	push   $0x915
f012527e:	68 5a b0 13 f0       	push   $0xf013b05a
f0125283:	e8 7d af fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125288:	e8 3b eb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012528d:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125290:	74 17                	je     f01252a9 <test_kheap_virt_addr+0x7c0>
f0125292:	83 ec 04             	sub    $0x4,%esp
f0125295:	68 74 b0 13 f0       	push   $0xf013b074
f012529a:	68 16 09 00 00       	push   $0x916
f012529f:	68 5a b0 13 f0       	push   $0xf013b05a
f01252a4:	e8 5c af fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01252a9:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01252ac:	e8 ec 78 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01252b1:	29 c3                	sub    %eax,%ebx
f01252b3:	89 d8                	mov    %ebx,%eax
f01252b5:	3d 00 03 00 00       	cmp    $0x300,%eax
f01252ba:	74 17                	je     f01252d3 <test_kheap_virt_addr+0x7ea>
f01252bc:	83 ec 04             	sub    $0x4,%esp
f01252bf:	68 dc b0 13 f0       	push   $0xf013b0dc
f01252c4:	68 17 09 00 00       	push   $0x917
f01252c9:	68 5a b0 13 f0       	push   $0xf013b05a
f01252ce:	e8 32 af fd ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01252d3:	e8 c5 78 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01252d8:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01252db:	e8 e8 ea fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01252e0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01252e3:	83 ec 0c             	sub    $0xc,%esp
f01252e6:	68 00 fc 5f 00       	push   $0x5ffc00
f01252eb:	e8 95 25 fe ff       	call   f0107885 <kmalloc>
f01252f0:	83 c4 10             	add    $0x10,%esp
f01252f3:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01252f9:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f01252ff:	89 c1                	mov    %eax,%ecx
f0125301:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0125308:	10 00 00 
f012530b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0125311:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125316:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012531c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125322:	ba 00 00 00 00       	mov    $0x0,%edx
f0125327:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012532d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125333:	29 d0                	sub    %edx,%eax
f0125335:	89 c3                	mov    %eax,%ebx
f0125337:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012533e:	10 00 00 
f0125341:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0125346:	0f b6 d0             	movzbl %al,%edx
f0125349:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012534f:	01 d0                	add    %edx,%eax
f0125351:	48                   	dec    %eax
f0125352:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0125358:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012535e:	ba 00 00 00 00       	mov    $0x0,%edx
f0125363:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0125369:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012536f:	29 d0                	sub    %edx,%eax
f0125371:	01 c3                	add    %eax,%ebx
f0125373:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012537a:	10 00 00 
f012537d:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0125382:	0f b6 c0             	movzbl %al,%eax
f0125385:	c1 e0 04             	shl    $0x4,%eax
f0125388:	89 c2                	mov    %eax,%edx
f012538a:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0125390:	01 d0                	add    %edx,%eax
f0125392:	48                   	dec    %eax
f0125393:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0125399:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012539f:	ba 00 00 00 00       	mov    $0x0,%edx
f01253a4:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f01253aa:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01253b0:	29 d0                	sub    %edx,%eax
f01253b2:	01 d8                	add    %ebx,%eax
f01253b4:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01253b9:	39 c1                	cmp    %eax,%ecx
f01253bb:	74 17                	je     f01253d4 <test_kheap_virt_addr+0x8eb>
f01253bd:	83 ec 04             	sub    $0x4,%esp
f01253c0:	68 40 b1 13 f0       	push   $0xf013b140
f01253c5:	68 1d 09 00 00       	push   $0x91d
f01253ca:	68 5a b0 13 f0       	push   $0xf013b05a
f01253cf:	e8 31 ae fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01253d4:	e8 ef e9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01253d9:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01253dc:	74 17                	je     f01253f5 <test_kheap_virt_addr+0x90c>
f01253de:	83 ec 04             	sub    $0x4,%esp
f01253e1:	68 74 b0 13 f0       	push   $0xf013b074
f01253e6:	68 1e 09 00 00       	push   $0x91e
f01253eb:	68 5a b0 13 f0       	push   $0xf013b05a
f01253f0:	e8 10 ae fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01253f5:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01253f8:	e8 a0 77 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01253fd:	29 c3                	sub    %eax,%ebx
f01253ff:	89 d8                	mov    %ebx,%eax
f0125401:	3d 00 06 00 00       	cmp    $0x600,%eax
f0125406:	74 17                	je     f012541f <test_kheap_virt_addr+0x936>
f0125408:	83 ec 04             	sub    $0x4,%esp
f012540b:	68 dc b0 13 f0       	push   $0xf013b0dc
f0125410:	68 1f 09 00 00       	push   $0x91f
f0125415:	68 5a b0 13 f0       	push   $0xf013b05a
f012541a:	e8 e6 ad fd ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012541f:	e8 79 77 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125424:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125427:	e8 9c e9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012542c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012542f:	83 ec 0c             	sub    $0xc,%esp
f0125432:	68 00 38 00 00       	push   $0x3800
f0125437:	e8 49 24 fe ff       	call   f0107885 <kmalloc>
f012543c:	83 c4 10             	add    $0x10,%esp
f012543f:	89 85 44 fd ff ff    	mov    %eax,-0x2bc(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125445:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f012544b:	89 c1                	mov    %eax,%ecx
f012544d:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0125454:	10 00 00 
f0125457:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012545d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125462:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0125468:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012546e:	ba 00 00 00 00       	mov    $0x0,%edx
f0125473:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0125479:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012547f:	29 d0                	sub    %edx,%eax
f0125481:	89 c3                	mov    %eax,%ebx
f0125483:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012548a:	10 00 00 
f012548d:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0125492:	0f b6 d0             	movzbl %al,%edx
f0125495:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012549b:	01 d0                	add    %edx,%eax
f012549d:	48                   	dec    %eax
f012549e:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f01254a4:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01254aa:	ba 00 00 00 00       	mov    $0x0,%edx
f01254af:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f01254b5:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01254bb:	29 d0                	sub    %edx,%eax
f01254bd:	01 c3                	add    %eax,%ebx
f01254bf:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f01254c6:	10 00 00 
f01254c9:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01254ce:	0f b6 c0             	movzbl %al,%eax
f01254d1:	c1 e0 04             	shl    $0x4,%eax
f01254d4:	89 c2                	mov    %eax,%edx
f01254d6:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01254dc:	01 d0                	add    %edx,%eax
f01254de:	48                   	dec    %eax
f01254df:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f01254e5:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01254eb:	ba 00 00 00 00       	mov    $0x0,%edx
f01254f0:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f01254f6:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01254fc:	29 d0                	sub    %edx,%eax
f01254fe:	01 d8                	add    %ebx,%eax
f0125500:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0125505:	39 c1                	cmp    %eax,%ecx
f0125507:	74 17                	je     f0125520 <test_kheap_virt_addr+0xa37>
f0125509:	83 ec 04             	sub    $0x4,%esp
f012550c:	68 40 b1 13 f0       	push   $0xf013b140
f0125511:	68 25 09 00 00       	push   $0x925
f0125516:	68 5a b0 13 f0       	push   $0xf013b05a
f012551b:	e8 e5 ac fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125520:	e8 a3 e8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125525:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125528:	74 17                	je     f0125541 <test_kheap_virt_addr+0xa58>
f012552a:	83 ec 04             	sub    $0x4,%esp
f012552d:	68 74 b0 13 f0       	push   $0xf013b074
f0125532:	68 26 09 00 00       	push   $0x926
f0125537:	68 5a b0 13 f0       	push   $0xf013b05a
f012553c:	e8 c4 ac fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125541:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125544:	e8 54 76 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125549:	29 c3                	sub    %eax,%ebx
f012554b:	89 d8                	mov    %ebx,%eax
f012554d:	83 f8 04             	cmp    $0x4,%eax
f0125550:	74 17                	je     f0125569 <test_kheap_virt_addr+0xa80>
f0125552:	83 ec 04             	sub    $0x4,%esp
f0125555:	68 dc b0 13 f0       	push   $0xf013b0dc
f012555a:	68 27 09 00 00       	push   $0x927
f012555f:	68 5a b0 13 f0       	push   $0xf013b05a
f0125564:	e8 9c ac fd ff       	call   f0100205 <_panic>
	}

	uint32 allPAs[(13*Mega + 32*kilo+ (INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE] ;
f0125569:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0125570:	10 00 00 
f0125573:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0125579:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012557e:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0125584:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012558a:	ba 00 00 00 00       	mov    $0x0,%edx
f012558f:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0125595:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012559b:	29 d0                	sub    %edx,%eax
f012559d:	89 c1                	mov    %eax,%ecx
f012559f:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f01255a6:	10 00 00 
f01255a9:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01255ae:	0f b6 d0             	movzbl %al,%edx
f01255b1:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01255b7:	01 d0                	add    %edx,%eax
f01255b9:	48                   	dec    %eax
f01255ba:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f01255c0:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01255c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01255cb:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f01255d1:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01255d7:	29 d0                	sub    %edx,%eax
f01255d9:	01 c1                	add    %eax,%ecx
f01255db:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f01255e2:	10 00 00 
f01255e5:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01255ea:	0f b6 c0             	movzbl %al,%eax
f01255ed:	c1 e0 04             	shl    $0x4,%eax
f01255f0:	89 c2                	mov    %eax,%edx
f01255f2:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01255f8:	01 d0                	add    %edx,%eax
f01255fa:	48                   	dec    %eax
f01255fb:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0125601:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0125607:	ba 00 00 00 00       	mov    $0x0,%edx
f012560c:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0125612:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0125618:	29 d0                	sub    %edx,%eax
f012561a:	01 c1                	add    %eax,%ecx
f012561c:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0125623:	10 00 00 
f0125626:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012562c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125631:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0125637:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012563d:	ba 00 00 00 00       	mov    $0x0,%edx
f0125642:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0125648:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012564e:	29 d0                	sub    %edx,%eax
f0125650:	29 c1                	sub    %eax,%ecx
f0125652:	89 c8                	mov    %ecx,%eax
f0125654:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0125659:	c1 e8 0c             	shr    $0xc,%eax
f012565c:	89 c2                	mov    %eax,%edx
f012565e:	4a                   	dec    %edx
f012565f:	89 95 d4 fe ff ff    	mov    %edx,-0x12c(%ebp)
f0125665:	c1 e0 02             	shl    $0x2,%eax
f0125668:	8d 50 03             	lea    0x3(%eax),%edx
f012566b:	b8 10 00 00 00       	mov    $0x10,%eax
f0125670:	48                   	dec    %eax
f0125671:	01 d0                	add    %edx,%eax
f0125673:	bf 10 00 00 00       	mov    $0x10,%edi
f0125678:	ba 00 00 00 00       	mov    $0x0,%edx
f012567d:	f7 f7                	div    %edi
f012567f:	6b c0 10             	imul   $0x10,%eax,%eax
f0125682:	29 c4                	sub    %eax,%esp
f0125684:	89 e0                	mov    %esp,%eax
f0125686:	83 c0 03             	add    $0x3,%eax
f0125689:	c1 e8 02             	shr    $0x2,%eax
f012568c:	c1 e0 02             	shl    $0x2,%eax
f012568f:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
	int numOfFrames = (13*Mega + 32*kilo+(INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE ;
f0125695:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012569c:	10 00 00 
f012569f:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01256a5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01256aa:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f01256b0:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01256b6:	ba 00 00 00 00       	mov    $0x0,%edx
f01256bb:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f01256c1:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01256c7:	29 d0                	sub    %edx,%eax
f01256c9:	89 c1                	mov    %eax,%ecx
f01256cb:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f01256d2:	10 00 00 
f01256d5:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01256da:	0f b6 d0             	movzbl %al,%edx
f01256dd:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01256e3:	01 d0                	add    %edx,%eax
f01256e5:	48                   	dec    %eax
f01256e6:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f01256ec:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01256f2:	ba 00 00 00 00       	mov    $0x0,%edx
f01256f7:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f01256fd:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0125703:	29 d0                	sub    %edx,%eax
f0125705:	01 c1                	add    %eax,%ecx
f0125707:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012570e:	10 00 00 
f0125711:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0125716:	0f b6 c0             	movzbl %al,%eax
f0125719:	c1 e0 04             	shl    $0x4,%eax
f012571c:	89 c2                	mov    %eax,%edx
f012571e:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0125724:	01 d0                	add    %edx,%eax
f0125726:	48                   	dec    %eax
f0125727:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012572d:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0125733:	ba 00 00 00 00       	mov    $0x0,%edx
f0125738:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012573e:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0125744:	29 d0                	sub    %edx,%eax
f0125746:	01 c1                	add    %eax,%ecx
f0125748:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012574f:	10 00 00 
f0125752:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0125758:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012575d:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0125763:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0125769:	ba 00 00 00 00       	mov    $0x0,%edx
f012576e:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0125774:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012577a:	29 d0                	sub    %edx,%eax
f012577c:	29 c1                	sub    %eax,%ecx
f012577e:	89 c8                	mov    %ecx,%eax
f0125780:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0125785:	c1 e8 0c             	shr    $0xc,%eax
f0125788:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)

	//test kheap_virtual_address after kmalloc only [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f012578e:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0125795:	10 00 00 
f0125798:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012579e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01257a3:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f01257a9:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01257af:	ba 00 00 00 00       	mov    $0x0,%edx
f01257b4:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f01257ba:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01257c0:	29 d0                	sub    %edx,%eax
f01257c2:	89 c1                	mov    %eax,%ecx
f01257c4:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f01257cb:	10 00 00 
f01257ce:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01257d3:	0f b6 d0             	movzbl %al,%edx
f01257d6:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01257dc:	01 d0                	add    %edx,%eax
f01257de:	48                   	dec    %eax
f01257df:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f01257e5:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01257eb:	ba 00 00 00 00       	mov    $0x0,%edx
f01257f0:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f01257f6:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01257fc:	29 d0                	sub    %edx,%eax
f01257fe:	01 c1                	add    %eax,%ecx
f0125800:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0125807:	10 00 00 
f012580a:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012580f:	0f b6 c0             	movzbl %al,%eax
f0125812:	c1 e0 04             	shl    $0x4,%eax
f0125815:	89 c2                	mov    %eax,%edx
f0125817:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012581d:	01 d0                	add    %edx,%eax
f012581f:	48                   	dec    %eax
f0125820:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0125826:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012582c:	ba 00 00 00 00       	mov    $0x0,%edx
f0125831:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0125837:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012583d:	29 d0                	sub    %edx,%eax
f012583f:	01 c8                	add    %ecx,%eax
f0125841:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0125846:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int i = 0;
f012584c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0125853:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f012585a:	10 00 00 
f012585d:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0125863:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125868:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f012586e:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0125874:	ba 00 00 00 00       	mov    $0x0,%edx
f0125879:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f012587f:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0125885:	29 d0                	sub    %edx,%eax
f0125887:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f012588c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012588f:	e9 21 01 00 00       	jmp    f01259b5 <test_kheap_virt_addr+0xecc>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0125894:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0125899:	83 ec 04             	sub    $0x4,%esp
f012589c:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f01258a2:	52                   	push   %edx
f01258a3:	ff 75 e4             	pushl  -0x1c(%ebp)
f01258a6:	50                   	push   %eax
f01258a7:	e8 05 12 fe ff       	call   f0106ab1 <get_page_table>
f01258ac:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01258af:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f01258b5:	85 c0                	test   %eax,%eax
f01258b7:	75 17                	jne    f01258d0 <test_kheap_virt_addr+0xde7>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f01258b9:	83 ec 04             	sub    $0x4,%esp
f01258bc:	68 fc b9 13 f0       	push   $0xf013b9fc
f01258c1:	68 38 09 00 00       	push   $0x938
f01258c6:	68 5a b0 13 f0       	push   $0xf013b05a
f01258cb:	e8 35 a9 fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f01258d0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01258d3:	c1 e8 0c             	shr    $0xc,%eax
f01258d6:	25 ff 03 00 00       	and    $0x3ff,%eax
f01258db:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01258de:	e9 ba 00 00 00       	jmp    f012599d <test_kheap_virt_addr+0xeb4>
			{
				allPAs[i] = (ptr_table[j] & 0xFFFFF000);
f01258e3:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f01258e9:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01258ec:	c1 e2 02             	shl    $0x2,%edx
f01258ef:	01 d0                	add    %edx,%eax
f01258f1:	8b 00                	mov    (%eax),%eax
f01258f3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01258f8:	89 c1                	mov    %eax,%ecx
f01258fa:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125900:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0125903:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0125906:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012590c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012590f:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125912:	83 ec 0c             	sub    $0xc,%esp
f0125915:	50                   	push   %eax
f0125916:	e8 5c 21 fe ff       	call   f0107a77 <kheap_virtual_address>
f012591b:	83 c4 10             	add    $0x10,%esp
f012591e:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
				//cprintf("va to check = %x\n", va);
				if (retrievedVA != (va))
f0125924:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012592a:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f012592d:	74 61                	je     f0125990 <test_kheap_virt_addr+0xea7>
				{
					cprintf("\nretrievedVA = %x, Actual VA = %x, table entry = %x, khep_pa = %x\n",retrievedVA, va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
f012592f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125935:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0125938:	8b 04 90             	mov    (%eax,%edx,4),%eax
f012593b:	8b 95 24 fd ff ff    	mov    -0x2dc(%ebp),%edx
f0125941:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f0125944:	c1 e1 02             	shl    $0x2,%ecx
f0125947:	01 ca                	add    %ecx,%edx
f0125949:	8b 12                	mov    (%edx),%edx
f012594b:	89 d1                	mov    %edx,%ecx
f012594d:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
f0125953:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0125956:	c1 e2 0c             	shl    $0xc,%edx
f0125959:	89 d3                	mov    %edx,%ebx
f012595b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f012595e:	01 da                	add    %ebx,%edx
f0125960:	83 ec 0c             	sub    $0xc,%esp
f0125963:	50                   	push   %eax
f0125964:	51                   	push   %ecx
f0125965:	52                   	push   %edx
f0125966:	ff b5 84 fe ff ff    	pushl  -0x17c(%ebp)
f012596c:	68 f0 ba 13 f0       	push   $0xf013baf0
f0125971:	e8 98 b3 fd ff       	call   f0100d0e <cprintf>
f0125976:	83 c4 20             	add    $0x20,%esp
					panic("Wrong kheap_virtual_address");
f0125979:	83 ec 04             	sub    $0x4,%esp
f012597c:	68 33 bb 13 f0       	push   $0xf013bb33
f0125981:	68 42 09 00 00       	push   $0x942
f0125986:	68 5a b0 13 f0       	push   $0xf013b05a
f012598b:	e8 75 a8 fd ff       	call   f0100205 <_panic>
				}
				va+=PAGE_SIZE;
f0125990:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f0125997:	ff 45 dc             	incl   -0x24(%ebp)
f012599a:	ff 45 e0             	incl   -0x20(%ebp)
f012599d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01259a0:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f01259a6:	7d 0d                	jge    f01259b5 <test_kheap_virt_addr+0xecc>
f01259a8:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f01259af:	0f 8e 2e ff ff ff    	jle    f01258e3 <test_kheap_virt_addr+0xdfa>
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01259b5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01259b8:	3b 85 90 fe ff ff    	cmp    -0x170(%ebp),%eax
f01259be:	0f 82 d0 fe ff ff    	jb     f0125894 <test_kheap_virt_addr+0xdab>
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_virtual_address: current evaluation = 40%");
f01259c4:	83 ec 0c             	sub    $0xc,%esp
f01259c7:	68 50 bb 13 f0       	push   $0xf013bb50
f01259cc:	e8 3d b3 fd ff       	call   f0100d0e <cprintf>
f01259d1:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01259d4:	e8 c4 71 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01259d9:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01259df:	e8 e4 e3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01259e4:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[0]);
f01259ea:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f01259f0:	83 ec 0c             	sub    $0xc,%esp
f01259f3:	50                   	push   %eax
f01259f4:	e8 57 1f fe ff       	call   f0107950 <kfree>
f01259f9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01259fc:	e8 c7 e3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125a01:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0125a07:	74 17                	je     f0125a20 <test_kheap_virt_addr+0xf37>
f0125a09:	83 ec 04             	sub    $0x4,%esp
f0125a0c:	68 74 b0 13 f0       	push   $0xf013b074
f0125a11:	68 50 09 00 00       	push   $0x950
f0125a16:	68 5a b0 13 f0       	push   $0xf013b05a
f0125a1b:	e8 e5 a7 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0125a20:	e8 78 71 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125a25:	89 c2                	mov    %eax,%edx
f0125a27:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0125a2d:	29 c2                	sub    %eax,%edx
f0125a2f:	89 d0                	mov    %edx,%eax
f0125a31:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125a36:	74 17                	je     f0125a4f <test_kheap_virt_addr+0xf66>
f0125a38:	83 ec 04             	sub    $0x4,%esp
f0125a3b:	68 e4 b7 13 f0       	push   $0xf013b7e4
f0125a40:	68 51 09 00 00       	push   $0x951
f0125a45:	68 5a b0 13 f0       	push   $0xf013b05a
f0125a4a:	e8 b6 a7 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0125a4f:	e8 49 71 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125a54:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125a5a:	e8 69 e3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125a5f:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[1]);
f0125a65:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f0125a6b:	83 ec 0c             	sub    $0xc,%esp
f0125a6e:	50                   	push   %eax
f0125a6f:	e8 dc 1e fe ff       	call   f0107950 <kfree>
f0125a74:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125a77:	e8 4c e3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125a7c:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0125a82:	74 17                	je     f0125a9b <test_kheap_virt_addr+0xfb2>
f0125a84:	83 ec 04             	sub    $0x4,%esp
f0125a87:	68 74 b0 13 f0       	push   $0xf013b074
f0125a8c:	68 57 09 00 00       	push   $0x957
f0125a91:	68 5a b0 13 f0       	push   $0xf013b05a
f0125a96:	e8 6a a7 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0125a9b:	e8 fd 70 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125aa0:	89 c2                	mov    %eax,%edx
f0125aa2:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0125aa8:	29 c2                	sub    %eax,%edx
f0125aaa:	89 d0                	mov    %edx,%eax
f0125aac:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125ab1:	74 17                	je     f0125aca <test_kheap_virt_addr+0xfe1>
f0125ab3:	83 ec 04             	sub    $0x4,%esp
f0125ab6:	68 e4 b7 13 f0       	push   $0xf013b7e4
f0125abb:	68 58 09 00 00       	push   $0x958
f0125ac0:	68 5a b0 13 f0       	push   $0xf013b05a
f0125ac5:	e8 3b a7 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0125aca:	e8 ce 70 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125acf:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125ad5:	e8 ee e2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125ada:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[6]);
f0125ae0:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0125ae6:	83 ec 0c             	sub    $0xc,%esp
f0125ae9:	50                   	push   %eax
f0125aea:	e8 61 1e fe ff       	call   f0107950 <kfree>
f0125aef:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125af2:	e8 d1 e2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125af7:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0125afd:	74 17                	je     f0125b16 <test_kheap_virt_addr+0x102d>
f0125aff:	83 ec 04             	sub    $0x4,%esp
f0125b02:	68 74 b0 13 f0       	push   $0xf013b074
f0125b07:	68 5e 09 00 00       	push   $0x95e
f0125b0c:	68 5a b0 13 f0       	push   $0xf013b05a
f0125b11:	e8 ef a6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0125b16:	e8 82 70 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125b1b:	89 c2                	mov    %eax,%edx
f0125b1d:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0125b23:	29 c2                	sub    %eax,%edx
f0125b25:	89 d0                	mov    %edx,%eax
f0125b27:	3d 00 06 00 00       	cmp    $0x600,%eax
f0125b2c:	74 17                	je     f0125b45 <test_kheap_virt_addr+0x105c>
f0125b2e:	83 ec 04             	sub    $0x4,%esp
f0125b31:	68 e4 b7 13 f0       	push   $0xf013b7e4
f0125b36:	68 5f 09 00 00       	push   $0x95f
f0125b3b:	68 5a b0 13 f0       	push   $0xf013b05a
f0125b40:	e8 c0 a6 fd ff       	call   f0100205 <_panic>


	//test kheap_virtual_address after kmalloc and kfree [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0125b45:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0125b4c:	10 00 00 
f0125b4f:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0125b55:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125b5a:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0125b60:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0125b66:	ba 00 00 00 00       	mov    $0x0,%edx
f0125b6b:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0125b71:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0125b77:	29 d0                	sub    %edx,%eax
f0125b79:	89 c1                	mov    %eax,%ecx
f0125b7b:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f0125b82:	10 00 00 
f0125b85:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0125b8a:	0f b6 d0             	movzbl %al,%edx
f0125b8d:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0125b93:	01 d0                	add    %edx,%eax
f0125b95:	48                   	dec    %eax
f0125b96:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f0125b9c:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0125ba2:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ba7:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f0125bad:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0125bb3:	29 d0                	sub    %edx,%eax
f0125bb5:	01 c1                	add    %eax,%ecx
f0125bb7:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f0125bbe:	10 00 00 
f0125bc1:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0125bc6:	0f b6 c0             	movzbl %al,%eax
f0125bc9:	c1 e0 04             	shl    $0x4,%eax
f0125bcc:	89 c2                	mov    %eax,%edx
f0125bce:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0125bd4:	01 d0                	add    %edx,%eax
f0125bd6:	48                   	dec    %eax
f0125bd7:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f0125bdd:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0125be3:	ba 00 00 00 00       	mov    $0x0,%edx
f0125be8:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f0125bee:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0125bf4:	29 d0                	sub    %edx,%eax
f0125bf6:	01 c8                	add    %ecx,%eax
f0125bf8:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0125bfd:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		int i = 0;
f0125c03:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
f0125c0a:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f0125c11:	10 00 00 
f0125c14:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0125c1a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125c1f:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0125c25:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0125c2b:	ba 00 00 00 00       	mov    $0x0,%edx
f0125c30:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0125c36:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0125c3c:	29 d0                	sub    %edx,%eax
f0125c3e:	89 c1                	mov    %eax,%ecx
f0125c40:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f0125c47:	10 00 00 
f0125c4a:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0125c4f:	0f b6 d0             	movzbl %al,%edx
f0125c52:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0125c58:	01 d0                	add    %edx,%eax
f0125c5a:	48                   	dec    %eax
f0125c5b:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f0125c61:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0125c67:	ba 00 00 00 00       	mov    $0x0,%edx
f0125c6c:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f0125c72:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0125c78:	29 d0                	sub    %edx,%eax
f0125c7a:	01 c1                	add    %eax,%ecx
f0125c7c:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0125c83:	10 00 00 
f0125c86:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0125c8b:	0f b6 c0             	movzbl %al,%eax
f0125c8e:	c1 e0 04             	shl    $0x4,%eax
f0125c91:	89 c2                	mov    %eax,%edx
f0125c93:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0125c99:	01 d0                	add    %edx,%eax
f0125c9b:	48                   	dec    %eax
f0125c9c:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0125ca2:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0125ca8:	ba 00 00 00 00       	mov    $0x0,%edx
f0125cad:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0125cb3:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0125cb9:	29 d0                	sub    %edx,%eax
f0125cbb:	01 c1                	add    %eax,%ecx
f0125cbd:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f0125cc4:	10 00 00 
f0125cc7:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0125ccd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125cd2:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f0125cd8:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0125cde:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ce3:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f0125ce9:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0125cef:	29 d0                	sub    %edx,%eax
f0125cf1:	29 c1                	sub    %eax,%ecx
f0125cf3:	89 c8                	mov    %ecx,%eax
f0125cf5:	05 00 40 00 00       	add    $0x4000,%eax
f0125cfa:	c1 e8 0c             	shr    $0xc,%eax
f0125cfd:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0125d03:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125d09:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0125d0c:	eb 41                	jmp    f0125d4f <test_kheap_virt_addr+0x1266>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0125d0e:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125d14:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0125d17:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125d1a:	83 ec 0c             	sub    $0xc,%esp
f0125d1d:	50                   	push   %eax
f0125d1e:	e8 54 1d fe ff       	call   f0107a77 <kheap_virtual_address>
f0125d23:	83 c4 10             	add    $0x10,%esp
f0125d26:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if (retrievedVA != 0)
f0125d2c:	83 bd 38 fe ff ff 00 	cmpl   $0x0,-0x1c8(%ebp)
f0125d33:	74 17                	je     f0125d4c <test_kheap_virt_addr+0x1263>
			{
				panic("Wrong kheap_virtual_address");
f0125d35:	83 ec 04             	sub    $0x4,%esp
f0125d38:	68 33 bb 13 f0       	push   $0xf013bb33
f0125d3d:	68 70 09 00 00       	push   $0x970
f0125d42:	68 5a b0 13 f0       	push   $0xf013b05a
f0125d47:	e8 b9 a4 fd ff       	call   f0100205 <_panic>
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0125d4c:	ff 45 d8             	incl   -0x28(%ebp)
f0125d4f:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125d55:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f0125d5b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125d5e:	39 c2                	cmp    %eax,%edx
f0125d60:	77 ac                	ja     f0125d0e <test_kheap_virt_addr+0x1225>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0125d62:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125d68:	05 00 04 00 00       	add    $0x400,%eax
f0125d6d:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0125d70:	e9 83 00 00 00       	jmp    f0125df8 <test_kheap_virt_addr+0x130f>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0125d75:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125d7b:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0125d7e:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125d81:	83 ec 0c             	sub    $0xc,%esp
f0125d84:	50                   	push   %eax
f0125d85:	e8 ed 1c fe ff       	call   f0107a77 <kheap_virtual_address>
f0125d8a:	83 c4 10             	add    $0x10,%esp
f0125d8d:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0125d93:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f0125d9a:	10 00 00 
f0125d9d:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0125da3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125da8:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f0125dae:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0125db4:	ba 00 00 00 00       	mov    $0x0,%edx
f0125db9:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f0125dbf:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0125dc5:	29 d0                	sub    %edx,%eax
f0125dc7:	89 c2                	mov    %eax,%edx
f0125dc9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125dcc:	c1 e0 0c             	shl    $0xc,%eax
f0125dcf:	01 d0                	add    %edx,%eax
f0125dd1:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0125dd6:	3b 85 34 fe ff ff    	cmp    -0x1cc(%ebp),%eax
f0125ddc:	74 17                	je     f0125df5 <test_kheap_virt_addr+0x130c>
			{
				panic("Wrong kheap_virtual_address");
f0125dde:	83 ec 04             	sub    $0x4,%esp
f0125de1:	68 33 bb 13 f0       	push   $0xf013bb33
f0125de6:	68 7a 09 00 00       	push   $0x97a
f0125deb:	68 5a b0 13 f0       	push   $0xf013b05a
f0125df0:	e8 10 a4 fd ff       	call   f0100205 <_panic>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0125df5:	ff 45 d8             	incl   -0x28(%ebp)
f0125df8:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125dfe:	8d 90 04 07 00 00    	lea    0x704(%eax),%edx
f0125e04:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125e07:	39 c2                	cmp    %eax,%edx
f0125e09:	0f 87 66 ff ff ff    	ja     f0125d75 <test_kheap_virt_addr+0x128c>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0125e0f:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125e15:	05 04 07 00 00       	add    $0x704,%eax
f0125e1a:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0125e1d:	eb 41                	jmp    f0125e60 <test_kheap_virt_addr+0x1377>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0125e1f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125e25:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0125e28:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125e2b:	83 ec 0c             	sub    $0xc,%esp
f0125e2e:	50                   	push   %eax
f0125e2f:	e8 43 1c fe ff       	call   f0107a77 <kheap_virtual_address>
f0125e34:	83 c4 10             	add    $0x10,%esp
f0125e37:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
			if (retrievedVA != 0)
f0125e3d:	83 bd 28 fe ff ff 00 	cmpl   $0x0,-0x1d8(%ebp)
f0125e44:	74 17                	je     f0125e5d <test_kheap_virt_addr+0x1374>
			{
				panic("Wrong kheap_virtual_address");
f0125e46:	83 ec 04             	sub    $0x4,%esp
f0125e49:	68 33 bb 13 f0       	push   $0xf013bb33
f0125e4e:	68 83 09 00 00       	push   $0x983
f0125e53:	68 5a b0 13 f0       	push   $0xf013b05a
f0125e58:	e8 a8 a3 fd ff       	call   f0100205 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0125e5d:	ff 45 d8             	incl   -0x28(%ebp)
f0125e60:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125e66:	8d 90 04 0d 00 00    	lea    0xd04(%eax),%edx
f0125e6c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125e6f:	39 c2                	cmp    %eax,%edx
f0125e71:	77 ac                	ja     f0125e1f <test_kheap_virt_addr+0x1336>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0125e73:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125e79:	05 04 0d 00 00       	add    $0xd04,%eax
f0125e7e:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0125e81:	e9 83 00 00 00       	jmp    f0125f09 <test_kheap_virt_addr+0x1420>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0125e86:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125e8c:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0125e8f:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125e92:	83 ec 0c             	sub    $0xc,%esp
f0125e95:	50                   	push   %eax
f0125e96:	e8 dc 1b fe ff       	call   f0107a77 <kheap_virtual_address>
f0125e9b:	83 c4 10             	add    $0x10,%esp
f0125e9e:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0125ea4:	c7 85 20 fe ff ff 00 	movl   $0x1000,-0x1e0(%ebp)
f0125eab:	10 00 00 
f0125eae:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0125eb4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125eb9:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
f0125ebf:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0125ec5:	ba 00 00 00 00       	mov    $0x0,%edx
f0125eca:	f7 b5 20 fe ff ff    	divl   -0x1e0(%ebp)
f0125ed0:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0125ed6:	29 d0                	sub    %edx,%eax
f0125ed8:	89 c2                	mov    %eax,%edx
f0125eda:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125edd:	c1 e0 0c             	shl    $0xc,%eax
f0125ee0:	01 d0                	add    %edx,%eax
f0125ee2:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0125ee7:	3b 85 24 fe ff ff    	cmp    -0x1dc(%ebp),%eax
f0125eed:	74 17                	je     f0125f06 <test_kheap_virt_addr+0x141d>
			{
				panic("Wrong kheap_virtual_address");
f0125eef:	83 ec 04             	sub    $0x4,%esp
f0125ef2:	68 33 bb 13 f0       	push   $0xf013bb33
f0125ef7:	68 8c 09 00 00       	push   $0x98c
f0125efc:	68 5a b0 13 f0       	push   $0xf013b05a
f0125f01:	e8 ff a2 fd ff       	call   f0100205 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0125f06:	ff 45 d8             	incl   -0x28(%ebp)
f0125f09:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125f0f:	8d 90 08 0d 00 00    	lea    0xd08(%eax),%edx
f0125f15:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125f18:	39 c2                	cmp    %eax,%edx
f0125f1a:	0f 87 66 ff ff ff    	ja     f0125e86 <test_kheap_virt_addr+0x139d>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b80%");
f0125f20:	83 ec 0c             	sub    $0xc,%esp
f0125f23:	68 e5 b1 13 f0       	push   $0xf013b1e5
f0125f28:	e8 e1 ad fd ff       	call   f0100d0e <cprintf>
f0125f2d:	83 c4 10             	add    $0x10,%esp

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0125f30:	c7 45 d4 00 00 10 00 	movl   $0x100000,-0x2c(%ebp)
f0125f37:	eb 54                	jmp    f0125f8d <test_kheap_virt_addr+0x14a4>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f0125f39:	83 ec 0c             	sub    $0xc,%esp
f0125f3c:	ff 75 d4             	pushl  -0x2c(%ebp)
f0125f3f:	e8 33 1b fe ff       	call   f0107a77 <kheap_virtual_address>
f0125f44:	83 c4 10             	add    $0x10,%esp
f0125f47:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
			if (retrievedVA != 0)
f0125f4d:	83 bd 18 fe ff ff 00 	cmpl   $0x0,-0x1e8(%ebp)
f0125f54:	74 30                	je     f0125f86 <test_kheap_virt_addr+0x149d>
			{
				cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f0125f56:	83 ec 04             	sub    $0x4,%esp
f0125f59:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f0125f5f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0125f62:	68 81 bb 13 f0       	push   $0xf013bb81
f0125f67:	e8 a2 ad fd ff       	call   f0100d0e <cprintf>
f0125f6c:	83 c4 10             	add    $0x10,%esp
				panic("Wrong kheap_virtual_address");
f0125f6f:	83 ec 04             	sub    $0x4,%esp
f0125f72:	68 33 bb 13 f0       	push   $0xf013bb33
f0125f77:	68 9c 09 00 00       	push   $0x99c
f0125f7c:	68 5a b0 13 f0       	push   $0xf013b05a
f0125f81:	e8 7f a2 fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b80%");

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0125f86:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0125f8d:	b8 bc 5e 87 00       	mov    $0x875ebc,%eax
f0125f92:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f0125f95:	72 a2                	jb     f0125f39 <test_kheap_virt_addr+0x1450>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0125f97:	83 ec 0c             	sub    $0xc,%esp
f0125f9a:	68 3e b2 13 f0       	push   $0xf013b23e
f0125f9f:	e8 6a ad fd ff       	call   f0100d0e <cprintf>
f0125fa4:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_virtual_address completed successfully.\n");
f0125fa7:	83 ec 0c             	sub    $0xc,%esp
f0125faa:	68 a0 bb 13 f0       	push   $0xf013bba0
f0125faf:	e8 5a ad fd ff       	call   f0100d0e <cprintf>
f0125fb4:	83 c4 10             	add    $0x10,%esp

	return 1;
f0125fb7:	b8 01 00 00 00       	mov    $0x1,%eax
f0125fbc:	89 f4                	mov    %esi,%esp

}
f0125fbe:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0125fc1:	5b                   	pop    %ebx
f0125fc2:	5e                   	pop    %esi
f0125fc3:	5f                   	pop    %edi
f0125fc4:	5d                   	pop    %ebp
f0125fc5:	c3                   	ret    

f0125fc6 <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f0125fc6:	55                   	push   %ebp
f0125fc7:	89 e5                	mov    %esp,%ebp
f0125fc9:	57                   	push   %edi
f0125fca:	56                   	push   %esi
f0125fcb:	53                   	push   %ebx
f0125fcc:	81 ec ac 00 00 00    	sub    $0xac,%esp
	if (firstCall)
f0125fd2:	a0 23 2d 19 f0       	mov    0xf0192d23,%al
f0125fd7:	84 c0                	test   %al,%al
f0125fd9:	74 56                	je     f0126031 <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f0125fdb:	c6 05 23 2d 19 f0 00 	movb   $0x0,0xf0192d23
		initFreeFrames = sys_calculate_free_frames() ;
f0125fe2:	e8 b6 6b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0125fe7:	a3 b8 5e 87 f0       	mov    %eax,0xf0875eb8
		initFreeDiskFrames = pf_calculate_free_frames() ;
f0125fec:	e8 d7 dd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125ff1:	a3 b4 5e 87 f0       	mov    %eax,0xf0875eb4
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f0125ff6:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0125ffc:	bb fd bc 13 f0       	mov    $0xf013bcfd,%ebx
f0126001:	ba 11 00 00 00       	mov    $0x11,%edx
f0126006:	89 c7                	mov    %eax,%edi
f0126008:	89 de                	mov    %ebx,%esi
f012600a:	89 d1                	mov    %edx,%ecx
f012600c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f012600e:	8d 95 65 ff ff ff    	lea    -0x9b(%ebp),%edx
f0126014:	b9 53 00 00 00       	mov    $0x53,%ecx
f0126019:	b0 00                	mov    $0x0,%al
f012601b:	89 d7                	mov    %edx,%edi
f012601d:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f012601f:	83 ec 0c             	sub    $0xc,%esp
f0126022:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0126028:	50                   	push   %eax
f0126029:	e8 42 ad fd ff       	call   f0100d70 <execute_command>
f012602e:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f0126031:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f0126038:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f012603f:	a1 f4 5c 87 f0       	mov    0xf0875cf4,%eax
f0126044:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0126047:	eb 2d                	jmp    f0126076 <test_three_creation_functions+0xb0>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f0126049:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012604c:	05 5c 05 00 00       	add    $0x55c,%eax
f0126051:	83 ec 08             	sub    $0x8,%esp
f0126054:	68 e7 bb 13 f0       	push   $0xf013bbe7
f0126059:	50                   	push   %eax
f012605a:	e8 79 af 00 00       	call   f0130fd8 <strcmp>
f012605f:	83 c4 10             	add    $0x10,%esp
f0126062:	85 c0                	test   %eax,%eax
f0126064:	75 08                	jne    f012606e <test_three_creation_functions+0xa8>
			{
				e = ptr_env ;
f0126066:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0126069:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f012606c:	eb 2f                	jmp    f012609d <test_three_creation_functions+0xd7>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f012606e:	a1 fc 5c 87 f0       	mov    0xf0875cfc,%eax
f0126073:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0126076:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012607a:	74 08                	je     f0126084 <test_three_creation_functions+0xbe>
f012607c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012607f:	8b 40 44             	mov    0x44(%eax),%eax
f0126082:	eb 05                	jmp    f0126089 <test_three_creation_functions+0xc3>
f0126084:	b8 00 00 00 00       	mov    $0x0,%eax
f0126089:	a3 fc 5c 87 f0       	mov    %eax,0xf0875cfc
f012608e:	a1 fc 5c 87 f0       	mov    0xf0875cfc,%eax
f0126093:	85 c0                	test   %eax,%eax
f0126095:	75 b2                	jne    f0126049 <test_three_creation_functions+0x83>
f0126097:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012609b:	75 ac                	jne    f0126049 <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f012609d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01260a0:	8b 80 34 05 00 00    	mov    0x534(%eax),%eax
f01260a6:	85 c0                	test   %eax,%eax
f01260a8:	74 17                	je     f01260c1 <test_three_creation_functions+0xfb>
			panic("Page fault is occur while not expected to. Review the three creation functions");
f01260aa:	83 ec 04             	sub    $0x4,%esp
f01260ad:	68 f0 bb 13 f0       	push   $0xf013bbf0
f01260b2:	68 c6 09 00 00       	push   $0x9c6
f01260b7:	68 5a b0 13 f0       	push   $0xf013b05a
f01260bc:	e8 44 a1 fd ff       	call   f0100205 <_panic>

		int pagesInWS = env_page_ws_get_size(e);
f01260c1:	83 ec 0c             	sub    $0xc,%esp
f01260c4:	ff 75 e4             	pushl  -0x1c(%ebp)
f01260c7:	e8 4a 1d fe ff       	call   f0107e16 <env_page_ws_get_size>
f01260cc:	83 c4 10             	add    $0x10,%esp
f01260cf:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int curFreeFrames = sys_calculate_free_frames() ;
f01260d2:	e8 c6 6a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01260d7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f01260da:	e8 e9 dc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01260df:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01260e2:	a1 b4 5e 87 f0       	mov    0xf0875eb4,%eax
f01260e7:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f01260ea:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01260ed:	74 17                	je     f0126106 <test_three_creation_functions+0x140>
f01260ef:	83 ec 04             	sub    $0x4,%esp
f01260f2:	68 74 b0 13 f0       	push   $0xf013b074
f01260f7:	68 cc 09 00 00       	push   $0x9cc
f01260fc:	68 5a b0 13 f0       	push   $0xf013b05a
f0126101:	e8 ff a0 fd ff       	call   f0100205 <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126106:	a1 b8 5e 87 f0       	mov    0xf0875eb8,%eax
f012610b:	2b 45 d8             	sub    -0x28(%ebp),%eax
f012610e:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0126111:	83 c2 15             	add    $0x15,%edx
f0126114:	39 d0                	cmp    %edx,%eax
f0126116:	74 17                	je     f012612f <test_three_creation_functions+0x169>
f0126118:	83 ec 04             	sub    $0x4,%esp
f012611b:	68 dc b0 13 f0       	push   $0xf013b0dc
f0126120:	68 ce 09 00 00       	push   $0x9ce
f0126125:	68 5a b0 13 f0       	push   $0xf013b05a
f012612a:	e8 d6 a0 fd ff       	call   f0100205 <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f012612f:	83 ec 0c             	sub    $0xc,%esp
f0126132:	68 00 10 00 00       	push   $0x1000
f0126137:	e8 49 17 fe ff       	call   f0107885 <kmalloc>
f012613c:	83 c4 10             	add    $0x10,%esp
f012613f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f0126142:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0126149:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012614c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126151:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0126154:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126157:	ba 00 00 00 00       	mov    $0x0,%edx
f012615c:	f7 75 cc             	divl   -0x34(%ebp)
f012615f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126162:	29 d0                	sub    %edx,%eax
f0126164:	89 c1                	mov    %eax,%ecx
f0126166:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f012616d:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0126172:	0f b6 d0             	movzbl %al,%edx
f0126175:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0126178:	01 d0                	add    %edx,%eax
f012617a:	48                   	dec    %eax
f012617b:	89 45 c0             	mov    %eax,-0x40(%ebp)
f012617e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126181:	ba 00 00 00 00       	mov    $0x0,%edx
f0126186:	f7 75 c4             	divl   -0x3c(%ebp)
f0126189:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012618c:	29 d0                	sub    %edx,%eax
f012618e:	01 c1                	add    %eax,%ecx
f0126190:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0126197:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012619c:	0f b6 c0             	movzbl %al,%eax
f012619f:	c1 e0 04             	shl    $0x4,%eax
f01261a2:	89 c2                	mov    %eax,%edx
f01261a4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01261a7:	01 d0                	add    %edx,%eax
f01261a9:	48                   	dec    %eax
f01261aa:	89 45 b8             	mov    %eax,-0x48(%ebp)
f01261ad:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01261b0:	ba 00 00 00 00       	mov    $0x0,%edx
f01261b5:	f7 75 bc             	divl   -0x44(%ebp)
f01261b8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01261bb:	29 d0                	sub    %edx,%eax
f01261bd:	01 c8                	add    %ecx,%eax
f01261bf:	8d 90 00 90 01 f6    	lea    -0x9fe7000(%eax),%edx
f01261c5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01261c8:	39 c2                	cmp    %eax,%edx
f01261ca:	74 17                	je     f01261e3 <test_three_creation_functions+0x21d>
f01261cc:	83 ec 04             	sub    $0x4,%esp
f01261cf:	68 40 bc 13 f0       	push   $0xf013bc40
f01261d4:	68 d2 09 00 00       	push   $0x9d2
f01261d9:	68 5a b0 13 f0       	push   $0xf013b05a
f01261de:	e8 22 a0 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");
f01261e3:	83 ec 0c             	sub    $0xc,%esp
f01261e6:	68 b0 bc 13 f0       	push   $0xf013bcb0
f01261eb:	e8 1e ab fd ff       	call   f0100d0e <cprintf>
f01261f0:	83 c4 10             	add    $0x10,%esp

	return 1;
f01261f3:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01261f8:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01261fb:	5b                   	pop    %ebx
f01261fc:	5e                   	pop    %esi
f01261fd:	5f                   	pop    %edi
f01261fe:	5d                   	pop    %ebp
f01261ff:	c3                   	ret    

f0126200 <test_kfreeall>:


extern void kfreeall() ;

int test_kfreeall()
{
f0126200:	55                   	push   %ebp
f0126201:	89 e5                	mov    %esp,%ebp
f0126203:	57                   	push   %edi
f0126204:	53                   	push   %ebx
f0126205:	81 ec 40 02 00 00    	sub    $0x240,%esp
	char minByte = 1<<7;
f012620b:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f012620f:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0126213:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0126219:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f012621f:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0126226:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f012622d:	e8 6b 69 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126232:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0126235:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f012623b:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126240:	b8 00 00 00 00       	mov    $0x0,%eax
f0126245:	89 d7                	mov    %edx,%edi
f0126247:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0126249:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f012624f:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126254:	b8 00 00 00 00       	mov    $0x0,%eax
f0126259:	89 d7                	mov    %edx,%edi
f012625b:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f012625d:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0126263:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126268:	b8 00 00 00 00       	mov    $0x0,%eax
f012626d:	89 d7                	mov    %edx,%edi
f012626f:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126271:	e8 27 69 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126276:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126279:	e8 4a db fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012627e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0126281:	83 ec 0c             	sub    $0xc,%esp
f0126284:	68 00 fc 1f 00       	push   $0x1ffc00
f0126289:	e8 f7 15 fe ff       	call   f0107885 <kmalloc>
f012628e:	83 c4 10             	add    $0x10,%esp
f0126291:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126297:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f012629d:	89 c1                	mov    %eax,%ecx
f012629f:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f01262a6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01262a9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01262ae:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f01262b1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01262b4:	ba 00 00 00 00       	mov    $0x0,%edx
f01262b9:	f7 75 c8             	divl   -0x38(%ebp)
f01262bc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01262bf:	29 d0                	sub    %edx,%eax
f01262c1:	89 c3                	mov    %eax,%ebx
f01262c3:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01262ca:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01262cf:	0f b6 d0             	movzbl %al,%edx
f01262d2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01262d5:	01 d0                	add    %edx,%eax
f01262d7:	48                   	dec    %eax
f01262d8:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01262db:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01262de:	ba 00 00 00 00       	mov    $0x0,%edx
f01262e3:	f7 75 c0             	divl   -0x40(%ebp)
f01262e6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01262e9:	29 d0                	sub    %edx,%eax
f01262eb:	01 c3                	add    %eax,%ebx
f01262ed:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01262f4:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01262f9:	0f b6 c0             	movzbl %al,%eax
f01262fc:	c1 e0 04             	shl    $0x4,%eax
f01262ff:	89 c2                	mov    %eax,%edx
f0126301:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126304:	01 d0                	add    %edx,%eax
f0126306:	48                   	dec    %eax
f0126307:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f012630a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012630d:	ba 00 00 00 00       	mov    $0x0,%edx
f0126312:	f7 75 b8             	divl   -0x48(%ebp)
f0126315:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0126318:	29 d0                	sub    %edx,%eax
f012631a:	01 d8                	add    %ebx,%eax
f012631c:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0126321:	39 c1                	cmp    %eax,%ecx
f0126323:	74 17                	je     f012633c <test_kfreeall+0x13c>
f0126325:	83 ec 04             	sub    $0x4,%esp
f0126328:	68 40 b1 13 f0       	push   $0xf013b140
f012632d:	68 f9 09 00 00       	push   $0x9f9
f0126332:	68 5a b0 13 f0       	push   $0xf013b05a
f0126337:	e8 c9 9e fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012633c:	e8 87 da fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126341:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126344:	74 17                	je     f012635d <test_kfreeall+0x15d>
f0126346:	83 ec 04             	sub    $0x4,%esp
f0126349:	68 74 b0 13 f0       	push   $0xf013b074
f012634e:	68 fa 09 00 00       	push   $0x9fa
f0126353:	68 5a b0 13 f0       	push   $0xf013b05a
f0126358:	e8 a8 9e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012635d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126360:	e8 38 68 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126365:	29 c3                	sub    %eax,%ebx
f0126367:	89 d8                	mov    %ebx,%eax
f0126369:	3d 00 02 00 00       	cmp    $0x200,%eax
f012636e:	74 17                	je     f0126387 <test_kfreeall+0x187>
f0126370:	83 ec 04             	sub    $0x4,%esp
f0126373:	68 dc b0 13 f0       	push   $0xf013b0dc
f0126378:	68 fb 09 00 00       	push   $0x9fb
f012637d:	68 5a b0 13 f0       	push   $0xf013b05a
f0126382:	e8 7e 9e fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0126387:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f012638e:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126391:	e8 07 68 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126396:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126399:	e8 2a da fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012639e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01263a1:	83 ec 0c             	sub    $0xc,%esp
f01263a4:	68 00 fc 1f 00       	push   $0x1ffc00
f01263a9:	e8 d7 14 fe ff       	call   f0107885 <kmalloc>
f01263ae:	83 c4 10             	add    $0x10,%esp
f01263b1:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01263b7:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f01263bd:	89 c1                	mov    %eax,%ecx
f01263bf:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01263c6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01263c9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01263ce:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01263d1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01263d4:	ba 00 00 00 00       	mov    $0x0,%edx
f01263d9:	f7 75 b0             	divl   -0x50(%ebp)
f01263dc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01263df:	29 d0                	sub    %edx,%eax
f01263e1:	89 c3                	mov    %eax,%ebx
f01263e3:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01263ea:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01263ef:	0f b6 d0             	movzbl %al,%edx
f01263f2:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01263f5:	01 d0                	add    %edx,%eax
f01263f7:	48                   	dec    %eax
f01263f8:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01263fb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01263fe:	ba 00 00 00 00       	mov    $0x0,%edx
f0126403:	f7 75 a8             	divl   -0x58(%ebp)
f0126406:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126409:	29 d0                	sub    %edx,%eax
f012640b:	01 c3                	add    %eax,%ebx
f012640d:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0126414:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0126419:	0f b6 c0             	movzbl %al,%eax
f012641c:	c1 e0 04             	shl    $0x4,%eax
f012641f:	89 c2                	mov    %eax,%edx
f0126421:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0126424:	01 d0                	add    %edx,%eax
f0126426:	48                   	dec    %eax
f0126427:	89 45 9c             	mov    %eax,-0x64(%ebp)
f012642a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012642d:	ba 00 00 00 00       	mov    $0x0,%edx
f0126432:	f7 75 a0             	divl   -0x60(%ebp)
f0126435:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0126438:	29 d0                	sub    %edx,%eax
f012643a:	01 d8                	add    %ebx,%eax
f012643c:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0126441:	39 c1                	cmp    %eax,%ecx
f0126443:	74 17                	je     f012645c <test_kfreeall+0x25c>
f0126445:	83 ec 04             	sub    $0x4,%esp
f0126448:	68 40 b1 13 f0       	push   $0xf013b140
f012644d:	68 02 0a 00 00       	push   $0xa02
f0126452:	68 5a b0 13 f0       	push   $0xf013b05a
f0126457:	e8 a9 9d fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012645c:	e8 67 d9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126461:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126464:	74 17                	je     f012647d <test_kfreeall+0x27d>
f0126466:	83 ec 04             	sub    $0x4,%esp
f0126469:	68 74 b0 13 f0       	push   $0xf013b074
f012646e:	68 03 0a 00 00       	push   $0xa03
f0126473:	68 5a b0 13 f0       	push   $0xf013b05a
f0126478:	e8 88 9d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012647d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126480:	e8 18 67 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126485:	29 c3                	sub    %eax,%ebx
f0126487:	89 d8                	mov    %ebx,%eax
f0126489:	3d 00 02 00 00       	cmp    $0x200,%eax
f012648e:	74 17                	je     f01264a7 <test_kfreeall+0x2a7>
f0126490:	83 ec 04             	sub    $0x4,%esp
f0126493:	68 dc b0 13 f0       	push   $0xf013b0dc
f0126498:	68 04 0a 00 00       	push   $0xa04
f012649d:	68 5a b0 13 f0       	push   $0xf013b05a
f01264a2:	e8 5e 9d fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01264a7:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f01264ae:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01264b1:	e8 e7 66 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01264b6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01264b9:	e8 0a d9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01264be:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01264c1:	83 ec 0c             	sub    $0xc,%esp
f01264c4:	68 00 08 00 00       	push   $0x800
f01264c9:	e8 b7 13 fe ff       	call   f0107885 <kmalloc>
f01264ce:	83 c4 10             	add    $0x10,%esp
f01264d1:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01264d7:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01264dd:	89 c1                	mov    %eax,%ecx
f01264df:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01264e6:	8b 45 98             	mov    -0x68(%ebp),%eax
f01264e9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01264ee:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01264f1:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01264f4:	ba 00 00 00 00       	mov    $0x0,%edx
f01264f9:	f7 75 98             	divl   -0x68(%ebp)
f01264fc:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01264ff:	29 d0                	sub    %edx,%eax
f0126501:	89 c3                	mov    %eax,%ebx
f0126503:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f012650a:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012650f:	0f b6 d0             	movzbl %al,%edx
f0126512:	8b 45 90             	mov    -0x70(%ebp),%eax
f0126515:	01 d0                	add    %edx,%eax
f0126517:	48                   	dec    %eax
f0126518:	89 45 8c             	mov    %eax,-0x74(%ebp)
f012651b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012651e:	ba 00 00 00 00       	mov    $0x0,%edx
f0126523:	f7 75 90             	divl   -0x70(%ebp)
f0126526:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0126529:	29 d0                	sub    %edx,%eax
f012652b:	01 c3                	add    %eax,%ebx
f012652d:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0126534:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0126539:	0f b6 c0             	movzbl %al,%eax
f012653c:	c1 e0 04             	shl    $0x4,%eax
f012653f:	89 c2                	mov    %eax,%edx
f0126541:	8b 45 88             	mov    -0x78(%ebp),%eax
f0126544:	01 d0                	add    %edx,%eax
f0126546:	48                   	dec    %eax
f0126547:	89 45 84             	mov    %eax,-0x7c(%ebp)
f012654a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012654d:	ba 00 00 00 00       	mov    $0x0,%edx
f0126552:	f7 75 88             	divl   -0x78(%ebp)
f0126555:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0126558:	29 d0                	sub    %edx,%eax
f012655a:	01 d8                	add    %ebx,%eax
f012655c:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0126561:	39 c1                	cmp    %eax,%ecx
f0126563:	74 17                	je     f012657c <test_kfreeall+0x37c>
f0126565:	83 ec 04             	sub    $0x4,%esp
f0126568:	68 40 b1 13 f0       	push   $0xf013b140
f012656d:	68 0b 0a 00 00       	push   $0xa0b
f0126572:	68 5a b0 13 f0       	push   $0xf013b05a
f0126577:	e8 89 9c fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012657c:	e8 47 d8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126581:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126584:	74 17                	je     f012659d <test_kfreeall+0x39d>
f0126586:	83 ec 04             	sub    $0x4,%esp
f0126589:	68 74 b0 13 f0       	push   $0xf013b074
f012658e:	68 0c 0a 00 00       	push   $0xa0c
f0126593:	68 5a b0 13 f0       	push   $0xf013b05a
f0126598:	e8 68 9c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012659d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01265a0:	e8 f8 65 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01265a5:	29 c3                	sub    %eax,%ebx
f01265a7:	89 d8                	mov    %ebx,%eax
f01265a9:	83 f8 01             	cmp    $0x1,%eax
f01265ac:	74 17                	je     f01265c5 <test_kfreeall+0x3c5>
f01265ae:	83 ec 04             	sub    $0x4,%esp
f01265b1:	68 dc b0 13 f0       	push   $0xf013b0dc
f01265b6:	68 0d 0a 00 00       	push   $0xa0d
f01265bb:	68 5a b0 13 f0       	push   $0xf013b05a
f01265c0:	e8 40 9c fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01265c5:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f01265cc:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01265cf:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01265d5:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01265d8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01265df:	eb 0e                	jmp    f01265ef <test_kfreeall+0x3ef>
		{
			ptr[i] = 2 ;
f01265e1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01265e4:	8b 45 80             	mov    -0x80(%ebp),%eax
f01265e7:	01 d0                	add    %edx,%eax
f01265e9:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01265ec:	ff 45 f4             	incl   -0xc(%ebp)
f01265ef:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01265f5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01265f8:	7f e7                	jg     f01265e1 <test_kfreeall+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01265fa:	e8 9e 65 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01265ff:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126602:	e8 c1 d7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126607:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012660a:	83 ec 0c             	sub    $0xc,%esp
f012660d:	68 00 08 00 00       	push   $0x800
f0126612:	e8 6e 12 fe ff       	call   f0107885 <kmalloc>
f0126617:	83 c4 10             	add    $0x10,%esp
f012661a:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126620:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0126626:	89 c1                	mov    %eax,%ecx
f0126628:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012662f:	10 00 00 
f0126632:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0126638:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012663d:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0126643:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0126649:	ba 00 00 00 00       	mov    $0x0,%edx
f012664e:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0126654:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012665a:	29 d0                	sub    %edx,%eax
f012665c:	89 c3                	mov    %eax,%ebx
f012665e:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0126665:	10 00 00 
f0126668:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012666d:	0f b6 d0             	movzbl %al,%edx
f0126670:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0126676:	01 d0                	add    %edx,%eax
f0126678:	48                   	dec    %eax
f0126679:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012667f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0126685:	ba 00 00 00 00       	mov    $0x0,%edx
f012668a:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0126690:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0126696:	29 d0                	sub    %edx,%eax
f0126698:	01 c3                	add    %eax,%ebx
f012669a:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01266a1:	10 00 00 
f01266a4:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01266a9:	0f b6 c0             	movzbl %al,%eax
f01266ac:	c1 e0 04             	shl    $0x4,%eax
f01266af:	89 c2                	mov    %eax,%edx
f01266b1:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01266b7:	01 d0                	add    %edx,%eax
f01266b9:	48                   	dec    %eax
f01266ba:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01266c0:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01266c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01266cb:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f01266d1:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01266d7:	29 d0                	sub    %edx,%eax
f01266d9:	01 d8                	add    %ebx,%eax
f01266db:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01266e0:	39 c1                	cmp    %eax,%ecx
f01266e2:	74 17                	je     f01266fb <test_kfreeall+0x4fb>
f01266e4:	83 ec 04             	sub    $0x4,%esp
f01266e7:	68 40 b1 13 f0       	push   $0xf013b140
f01266ec:	68 19 0a 00 00       	push   $0xa19
f01266f1:	68 5a b0 13 f0       	push   $0xf013b05a
f01266f6:	e8 0a 9b fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01266fb:	e8 c8 d6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126700:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126703:	74 17                	je     f012671c <test_kfreeall+0x51c>
f0126705:	83 ec 04             	sub    $0x4,%esp
f0126708:	68 74 b0 13 f0       	push   $0xf013b074
f012670d:	68 1a 0a 00 00       	push   $0xa1a
f0126712:	68 5a b0 13 f0       	push   $0xf013b05a
f0126717:	e8 e9 9a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012671c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012671f:	e8 79 64 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126724:	29 c3                	sub    %eax,%ebx
f0126726:	89 d8                	mov    %ebx,%eax
f0126728:	83 f8 01             	cmp    $0x1,%eax
f012672b:	74 17                	je     f0126744 <test_kfreeall+0x544>
f012672d:	83 ec 04             	sub    $0x4,%esp
f0126730:	68 dc b0 13 f0       	push   $0xf013b0dc
f0126735:	68 1b 0a 00 00       	push   $0xa1b
f012673a:	68 5a b0 13 f0       	push   $0xf013b05a
f012673f:	e8 c1 9a fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0126744:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f012674b:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012674e:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0126754:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0126757:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012675e:	eb 0e                	jmp    f012676e <test_kfreeall+0x56e>
		{
			ptr[i] = 3 ;
f0126760:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126763:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126766:	01 d0                	add    %edx,%eax
f0126768:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012676b:	ff 45 f4             	incl   -0xc(%ebp)
f012676e:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0126774:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126777:	7f e7                	jg     f0126760 <test_kfreeall+0x560>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0126779:	e8 1f 64 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012677e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126781:	e8 42 d6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126786:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0126789:	83 ec 0c             	sub    $0xc,%esp
f012678c:	68 00 1c 00 00       	push   $0x1c00
f0126791:	e8 ef 10 fe ff       	call   f0107885 <kmalloc>
f0126796:	83 c4 10             	add    $0x10,%esp
f0126799:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012679f:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01267a5:	89 c1                	mov    %eax,%ecx
f01267a7:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01267ae:	10 00 00 
f01267b1:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01267b7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01267bc:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01267c2:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01267c8:	ba 00 00 00 00       	mov    $0x0,%edx
f01267cd:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01267d3:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01267d9:	29 d0                	sub    %edx,%eax
f01267db:	89 c3                	mov    %eax,%ebx
f01267dd:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f01267e4:	10 00 00 
f01267e7:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01267ec:	0f b6 d0             	movzbl %al,%edx
f01267ef:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01267f5:	01 d0                	add    %edx,%eax
f01267f7:	48                   	dec    %eax
f01267f8:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f01267fe:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0126804:	ba 00 00 00 00       	mov    $0x0,%edx
f0126809:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012680f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0126815:	29 d0                	sub    %edx,%eax
f0126817:	01 c3                	add    %eax,%ebx
f0126819:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0126820:	10 00 00 
f0126823:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0126828:	0f b6 c0             	movzbl %al,%eax
f012682b:	c1 e0 04             	shl    $0x4,%eax
f012682e:	89 c2                	mov    %eax,%edx
f0126830:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0126836:	01 d0                	add    %edx,%eax
f0126838:	48                   	dec    %eax
f0126839:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012683f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0126845:	ba 00 00 00 00       	mov    $0x0,%edx
f012684a:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0126850:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0126856:	29 d0                	sub    %edx,%eax
f0126858:	01 d8                	add    %ebx,%eax
f012685a:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012685f:	39 c1                	cmp    %eax,%ecx
f0126861:	74 17                	je     f012687a <test_kfreeall+0x67a>
f0126863:	83 ec 04             	sub    $0x4,%esp
f0126866:	68 40 b1 13 f0       	push   $0xf013b140
f012686b:	68 27 0a 00 00       	push   $0xa27
f0126870:	68 5a b0 13 f0       	push   $0xf013b05a
f0126875:	e8 8b 99 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012687a:	e8 49 d5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012687f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126882:	74 17                	je     f012689b <test_kfreeall+0x69b>
f0126884:	83 ec 04             	sub    $0x4,%esp
f0126887:	68 74 b0 13 f0       	push   $0xf013b074
f012688c:	68 28 0a 00 00       	push   $0xa28
f0126891:	68 5a b0 13 f0       	push   $0xf013b05a
f0126896:	e8 6a 99 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012689b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012689e:	e8 fa 62 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01268a3:	29 c3                	sub    %eax,%ebx
f01268a5:	89 d8                	mov    %ebx,%eax
f01268a7:	83 f8 02             	cmp    $0x2,%eax
f01268aa:	74 17                	je     f01268c3 <test_kfreeall+0x6c3>
f01268ac:	83 ec 04             	sub    $0x4,%esp
f01268af:	68 dc b0 13 f0       	push   $0xf013b0dc
f01268b4:	68 29 0a 00 00       	push   $0xa29
f01268b9:	68 5a b0 13 f0       	push   $0xf013b05a
f01268be:	e8 42 99 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01268c3:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f01268ca:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01268cd:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01268d3:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01268d6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01268dd:	eb 0e                	jmp    f01268ed <test_kfreeall+0x6ed>
		{
			ptr[i] = 4 ;
f01268df:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01268e2:	8b 45 80             	mov    -0x80(%ebp),%eax
f01268e5:	01 d0                	add    %edx,%eax
f01268e7:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01268ea:	ff 45 f4             	incl   -0xc(%ebp)
f01268ed:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01268f3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01268f6:	7f e7                	jg     f01268df <test_kfreeall+0x6df>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01268f8:	e8 a0 62 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01268fd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126900:	e8 c3 d4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126905:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0126908:	83 ec 0c             	sub    $0xc,%esp
f012690b:	68 00 fc 2f 00       	push   $0x2ffc00
f0126910:	e8 70 0f fe ff       	call   f0107885 <kmalloc>
f0126915:	83 c4 10             	add    $0x10,%esp
f0126918:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012691e:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0126924:	89 c1                	mov    %eax,%ecx
f0126926:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012692d:	10 00 00 
f0126930:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0126936:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012693b:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0126941:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0126947:	ba 00 00 00 00       	mov    $0x0,%edx
f012694c:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0126952:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0126958:	29 d0                	sub    %edx,%eax
f012695a:	89 c3                	mov    %eax,%ebx
f012695c:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0126963:	10 00 00 
f0126966:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012696b:	0f b6 d0             	movzbl %al,%edx
f012696e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0126974:	01 d0                	add    %edx,%eax
f0126976:	48                   	dec    %eax
f0126977:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012697d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0126983:	ba 00 00 00 00       	mov    $0x0,%edx
f0126988:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012698e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0126994:	29 d0                	sub    %edx,%eax
f0126996:	01 c3                	add    %eax,%ebx
f0126998:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012699f:	10 00 00 
f01269a2:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01269a7:	0f b6 c0             	movzbl %al,%eax
f01269aa:	c1 e0 04             	shl    $0x4,%eax
f01269ad:	89 c2                	mov    %eax,%edx
f01269af:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01269b5:	01 d0                	add    %edx,%eax
f01269b7:	48                   	dec    %eax
f01269b8:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01269be:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01269c4:	ba 00 00 00 00       	mov    $0x0,%edx
f01269c9:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01269cf:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01269d5:	29 d0                	sub    %edx,%eax
f01269d7:	01 d8                	add    %ebx,%eax
f01269d9:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01269de:	39 c1                	cmp    %eax,%ecx
f01269e0:	74 17                	je     f01269f9 <test_kfreeall+0x7f9>
f01269e2:	83 ec 04             	sub    $0x4,%esp
f01269e5:	68 40 b1 13 f0       	push   $0xf013b140
f01269ea:	68 35 0a 00 00       	push   $0xa35
f01269ef:	68 5a b0 13 f0       	push   $0xf013b05a
f01269f4:	e8 0c 98 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01269f9:	e8 ca d3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01269fe:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126a01:	74 17                	je     f0126a1a <test_kfreeall+0x81a>
f0126a03:	83 ec 04             	sub    $0x4,%esp
f0126a06:	68 74 b0 13 f0       	push   $0xf013b074
f0126a0b:	68 36 0a 00 00       	push   $0xa36
f0126a10:	68 5a b0 13 f0       	push   $0xf013b05a
f0126a15:	e8 eb 97 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126a1a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126a1d:	e8 7b 61 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126a22:	29 c3                	sub    %eax,%ebx
f0126a24:	89 d8                	mov    %ebx,%eax
f0126a26:	3d 00 03 00 00       	cmp    $0x300,%eax
f0126a2b:	74 17                	je     f0126a44 <test_kfreeall+0x844>
f0126a2d:	83 ec 04             	sub    $0x4,%esp
f0126a30:	68 dc b0 13 f0       	push   $0xf013b0dc
f0126a35:	68 37 0a 00 00       	push   $0xa37
f0126a3a:	68 5a b0 13 f0       	push   $0xf013b05a
f0126a3f:	e8 c1 97 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0126a44:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f0126a4b:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0126a4e:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0126a54:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0126a57:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126a5e:	eb 0e                	jmp    f0126a6e <test_kfreeall+0x86e>
		{
			ptr[i] = 5 ;
f0126a60:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126a63:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126a66:	01 d0                	add    %edx,%eax
f0126a68:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0126a6b:	ff 45 f4             	incl   -0xc(%ebp)
f0126a6e:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0126a74:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126a77:	7f e7                	jg     f0126a60 <test_kfreeall+0x860>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0126a79:	e8 1f 61 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126a7e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126a81:	e8 42 d3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126a86:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0126a89:	83 ec 0c             	sub    $0xc,%esp
f0126a8c:	68 00 fc 5f 00       	push   $0x5ffc00
f0126a91:	e8 ef 0d fe ff       	call   f0107885 <kmalloc>
f0126a96:	83 c4 10             	add    $0x10,%esp
f0126a99:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126a9f:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0126aa5:	89 c1                	mov    %eax,%ecx
f0126aa7:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0126aae:	10 00 00 
f0126ab1:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0126ab7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126abc:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0126ac2:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0126ac8:	ba 00 00 00 00       	mov    $0x0,%edx
f0126acd:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0126ad3:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0126ad9:	29 d0                	sub    %edx,%eax
f0126adb:	89 c3                	mov    %eax,%ebx
f0126add:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0126ae4:	10 00 00 
f0126ae7:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0126aec:	0f b6 d0             	movzbl %al,%edx
f0126aef:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0126af5:	01 d0                	add    %edx,%eax
f0126af7:	48                   	dec    %eax
f0126af8:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0126afe:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0126b04:	ba 00 00 00 00       	mov    $0x0,%edx
f0126b09:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0126b0f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0126b15:	29 d0                	sub    %edx,%eax
f0126b17:	01 c3                	add    %eax,%ebx
f0126b19:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0126b20:	10 00 00 
f0126b23:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0126b28:	0f b6 c0             	movzbl %al,%eax
f0126b2b:	c1 e0 04             	shl    $0x4,%eax
f0126b2e:	89 c2                	mov    %eax,%edx
f0126b30:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0126b36:	01 d0                	add    %edx,%eax
f0126b38:	48                   	dec    %eax
f0126b39:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0126b3f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0126b45:	ba 00 00 00 00       	mov    $0x0,%edx
f0126b4a:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0126b50:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0126b56:	29 d0                	sub    %edx,%eax
f0126b58:	01 d8                	add    %ebx,%eax
f0126b5a:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0126b5f:	39 c1                	cmp    %eax,%ecx
f0126b61:	74 17                	je     f0126b7a <test_kfreeall+0x97a>
f0126b63:	83 ec 04             	sub    $0x4,%esp
f0126b66:	68 40 b1 13 f0       	push   $0xf013b140
f0126b6b:	68 43 0a 00 00       	push   $0xa43
f0126b70:	68 5a b0 13 f0       	push   $0xf013b05a
f0126b75:	e8 8b 96 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126b7a:	e8 49 d2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126b7f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126b82:	74 17                	je     f0126b9b <test_kfreeall+0x99b>
f0126b84:	83 ec 04             	sub    $0x4,%esp
f0126b87:	68 74 b0 13 f0       	push   $0xf013b074
f0126b8c:	68 44 0a 00 00       	push   $0xa44
f0126b91:	68 5a b0 13 f0       	push   $0xf013b05a
f0126b96:	e8 6a 96 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126b9b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126b9e:	e8 fa 5f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126ba3:	29 c3                	sub    %eax,%ebx
f0126ba5:	89 d8                	mov    %ebx,%eax
f0126ba7:	3d 00 06 00 00       	cmp    $0x600,%eax
f0126bac:	74 17                	je     f0126bc5 <test_kfreeall+0x9c5>
f0126bae:	83 ec 04             	sub    $0x4,%esp
f0126bb1:	68 dc b0 13 f0       	push   $0xf013b0dc
f0126bb6:	68 45 0a 00 00       	push   $0xa45
f0126bbb:	68 5a b0 13 f0       	push   $0xf013b05a
f0126bc0:	e8 40 96 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0126bc5:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f0126bcc:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0126bcf:	e8 c9 5f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126bd4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126bd7:	e8 ec d1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126bdc:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0126bdf:	83 ec 0c             	sub    $0xc,%esp
f0126be2:	68 00 38 00 00       	push   $0x3800
f0126be7:	e8 99 0c fe ff       	call   f0107885 <kmalloc>
f0126bec:	83 c4 10             	add    $0x10,%esp
f0126bef:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126bf5:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0126bfb:	89 c1                	mov    %eax,%ecx
f0126bfd:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0126c04:	10 00 00 
f0126c07:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0126c0d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126c12:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0126c18:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0126c1e:	ba 00 00 00 00       	mov    $0x0,%edx
f0126c23:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0126c29:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0126c2f:	29 d0                	sub    %edx,%eax
f0126c31:	89 c3                	mov    %eax,%ebx
f0126c33:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0126c3a:	10 00 00 
f0126c3d:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0126c42:	0f b6 d0             	movzbl %al,%edx
f0126c45:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0126c4b:	01 d0                	add    %edx,%eax
f0126c4d:	48                   	dec    %eax
f0126c4e:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0126c54:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0126c5a:	ba 00 00 00 00       	mov    $0x0,%edx
f0126c5f:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0126c65:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0126c6b:	29 d0                	sub    %edx,%eax
f0126c6d:	01 c3                	add    %eax,%ebx
f0126c6f:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0126c76:	10 00 00 
f0126c79:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0126c7e:	0f b6 c0             	movzbl %al,%eax
f0126c81:	c1 e0 04             	shl    $0x4,%eax
f0126c84:	89 c2                	mov    %eax,%edx
f0126c86:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0126c8c:	01 d0                	add    %edx,%eax
f0126c8e:	48                   	dec    %eax
f0126c8f:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0126c95:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0126c9b:	ba 00 00 00 00       	mov    $0x0,%edx
f0126ca0:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0126ca6:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0126cac:	29 d0                	sub    %edx,%eax
f0126cae:	01 d8                	add    %ebx,%eax
f0126cb0:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0126cb5:	39 c1                	cmp    %eax,%ecx
f0126cb7:	74 17                	je     f0126cd0 <test_kfreeall+0xad0>
f0126cb9:	83 ec 04             	sub    $0x4,%esp
f0126cbc:	68 40 b1 13 f0       	push   $0xf013b140
f0126cc1:	68 4c 0a 00 00       	push   $0xa4c
f0126cc6:	68 5a b0 13 f0       	push   $0xf013b05a
f0126ccb:	e8 35 95 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126cd0:	e8 f3 d0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126cd5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126cd8:	74 17                	je     f0126cf1 <test_kfreeall+0xaf1>
f0126cda:	83 ec 04             	sub    $0x4,%esp
f0126cdd:	68 74 b0 13 f0       	push   $0xf013b074
f0126ce2:	68 4d 0a 00 00       	push   $0xa4d
f0126ce7:	68 5a b0 13 f0       	push   $0xf013b05a
f0126cec:	e8 14 95 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126cf1:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126cf4:	e8 a4 5e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126cf9:	29 c3                	sub    %eax,%ebx
f0126cfb:	89 d8                	mov    %ebx,%eax
f0126cfd:	83 f8 04             	cmp    $0x4,%eax
f0126d00:	74 17                	je     f0126d19 <test_kfreeall+0xb19>
f0126d02:	83 ec 04             	sub    $0x4,%esp
f0126d05:	68 dc b0 13 f0       	push   $0xf013b0dc
f0126d0a:	68 4e 0a 00 00       	push   $0xa4e
f0126d0f:	68 5a b0 13 f0       	push   $0xf013b05a
f0126d14:	e8 ec 94 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0126d19:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f0126d20:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0126d23:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0126d29:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0126d2c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126d33:	eb 0e                	jmp    f0126d43 <test_kfreeall+0xb43>
		{
			ptr[i] = 7 ;
f0126d35:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126d38:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126d3b:	01 d0                	add    %edx,%eax
f0126d3d:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0126d40:	ff 45 f4             	incl   -0xc(%ebp)
f0126d43:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0126d49:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126d4c:	7f e7                	jg     f0126d35 <test_kfreeall+0xb35>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0126d4e:	e8 4a 5e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126d53:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0126d59:	e8 6a d0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126d5e:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f0126d64:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0126d6a:	83 ec 0c             	sub    $0xc,%esp
f0126d6d:	50                   	push   %eax
f0126d6e:	e8 dd 0b fe ff       	call   f0107950 <kfree>
f0126d73:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126d76:	e8 4d d0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126d7b:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0126d81:	74 17                	je     f0126d9a <test_kfreeall+0xb9a>
f0126d83:	83 ec 04             	sub    $0x4,%esp
f0126d86:	68 74 b0 13 f0       	push   $0xf013b074
f0126d8b:	68 5d 0a 00 00       	push   $0xa5d
f0126d90:	68 5a b0 13 f0       	push   $0xf013b05a
f0126d95:	e8 6b 94 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0126d9a:	e8 fe 5d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126d9f:	89 c2                	mov    %eax,%edx
f0126da1:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0126da7:	29 c2                	sub    %eax,%edx
f0126da9:	89 d0                	mov    %edx,%eax
f0126dab:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126db0:	74 17                	je     f0126dc9 <test_kfreeall+0xbc9>
f0126db2:	83 ec 04             	sub    $0x4,%esp
f0126db5:	68 e4 b7 13 f0       	push   $0xf013b7e4
f0126dba:	68 5e 0a 00 00       	push   $0xa5e
f0126dbf:	68 5a b0 13 f0       	push   $0xf013b05a
f0126dc4:	e8 3c 94 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126dc9:	e8 cf 5d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126dce:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126dd4:	e8 ef cf fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126dd9:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f0126ddf:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0126de5:	83 ec 0c             	sub    $0xc,%esp
f0126de8:	50                   	push   %eax
f0126de9:	e8 62 0b fe ff       	call   f0107950 <kfree>
f0126dee:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126df1:	e8 d2 cf fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126df6:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0126dfc:	74 17                	je     f0126e15 <test_kfreeall+0xc15>
f0126dfe:	83 ec 04             	sub    $0x4,%esp
f0126e01:	68 74 b0 13 f0       	push   $0xf013b074
f0126e06:	68 64 0a 00 00       	push   $0xa64
f0126e0b:	68 5a b0 13 f0       	push   $0xf013b05a
f0126e10:	e8 f0 93 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0126e15:	e8 83 5d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126e1a:	89 c2                	mov    %eax,%edx
f0126e1c:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0126e22:	29 c2                	sub    %eax,%edx
f0126e24:	89 d0                	mov    %edx,%eax
f0126e26:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126e2b:	74 17                	je     f0126e44 <test_kfreeall+0xc44>
f0126e2d:	83 ec 04             	sub    $0x4,%esp
f0126e30:	68 e4 b7 13 f0       	push   $0xf013b7e4
f0126e35:	68 65 0a 00 00       	push   $0xa65
f0126e3a:	68 5a b0 13 f0       	push   $0xf013b05a
f0126e3f:	e8 c1 93 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0126e44:	e8 54 5d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126e49:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126e4f:	e8 74 cf fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126e54:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0126e5a:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0126e60:	83 ec 0c             	sub    $0xc,%esp
f0126e63:	50                   	push   %eax
f0126e64:	e8 e7 0a fe ff       	call   f0107950 <kfree>
f0126e69:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126e6c:	e8 57 cf fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126e71:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0126e77:	74 17                	je     f0126e90 <test_kfreeall+0xc90>
f0126e79:	83 ec 04             	sub    $0x4,%esp
f0126e7c:	68 74 b0 13 f0       	push   $0xf013b074
f0126e81:	68 6b 0a 00 00       	push   $0xa6b
f0126e86:	68 5a b0 13 f0       	push   $0xf013b05a
f0126e8b:	e8 75 93 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0126e90:	e8 08 5d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0126e95:	89 c2                	mov    %eax,%edx
f0126e97:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0126e9d:	29 c2                	sub    %eax,%edx
f0126e9f:	89 d0                	mov    %edx,%eax
f0126ea1:	3d 00 06 00 00       	cmp    $0x600,%eax
f0126ea6:	74 17                	je     f0126ebf <test_kfreeall+0xcbf>
f0126ea8:	83 ec 04             	sub    $0x4,%esp
f0126eab:	68 e4 b7 13 f0       	push   $0xf013b7e4
f0126eb0:	68 6c 0a 00 00       	push   $0xa6c
f0126eb5:	68 5a b0 13 f0       	push   $0xf013b05a
f0126eba:	e8 46 93 fd ff       	call   f0100205 <_panic>


	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0126ebf:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0126ec5:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0126ec8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126ecf:	eb 1e                	jmp    f0126eef <test_kfreeall+0xcef>
		{
			sums[2] += ptr[i] ;
f0126ed1:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f0126ed7:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0126eda:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126edd:	01 c8                	add    %ecx,%eax
f0126edf:	8a 00                	mov    (%eax),%al
f0126ee1:	0f be c0             	movsbl %al,%eax
f0126ee4:	01 d0                	add    %edx,%eax
f0126ee6:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0126eec:	ff 45 f4             	incl   -0xc(%ebp)
f0126eef:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0126ef5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126ef8:	7f d7                	jg     f0126ed1 <test_kfreeall+0xcd1>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0126efa:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f0126f00:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0126f06:	01 c0                	add    %eax,%eax
f0126f08:	39 c2                	cmp    %eax,%edx
f0126f0a:	74 17                	je     f0126f23 <test_kfreeall+0xd23>
f0126f0c:	83 ec 04             	sub    $0x4,%esp
f0126f0f:	68 40 b8 13 f0       	push   $0xf013b840
f0126f14:	68 78 0a 00 00       	push   $0xa78
f0126f19:	68 5a b0 13 f0       	push   $0xf013b05a
f0126f1e:	e8 e2 92 fd ff       	call   f0100205 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0126f23:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0126f29:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0126f2c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126f33:	eb 1e                	jmp    f0126f53 <test_kfreeall+0xd53>
		{
			sums[3] += ptr[i] ;
f0126f35:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0126f3b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0126f3e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126f41:	01 c8                	add    %ecx,%eax
f0126f43:	8a 00                	mov    (%eax),%al
f0126f45:	0f be c0             	movsbl %al,%eax
f0126f48:	01 d0                	add    %edx,%eax
f0126f4a:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0126f50:	ff 45 f4             	incl   -0xc(%ebp)
f0126f53:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0126f59:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126f5c:	7f d7                	jg     f0126f35 <test_kfreeall+0xd35>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0126f5e:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0126f64:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0126f6a:	89 c1                	mov    %eax,%ecx
f0126f6c:	01 c9                	add    %ecx,%ecx
f0126f6e:	01 c8                	add    %ecx,%eax
f0126f70:	39 c2                	cmp    %eax,%edx
f0126f72:	74 17                	je     f0126f8b <test_kfreeall+0xd8b>
f0126f74:	83 ec 04             	sub    $0x4,%esp
f0126f77:	68 40 b8 13 f0       	push   $0xf013b840
f0126f7c:	68 80 0a 00 00       	push   $0xa80
f0126f81:	68 5a b0 13 f0       	push   $0xf013b05a
f0126f86:	e8 7a 92 fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0126f8b:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0126f91:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0126f94:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126f9b:	eb 1e                	jmp    f0126fbb <test_kfreeall+0xdbb>
		{
			sums[4] += ptr[i] ;
f0126f9d:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f0126fa3:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0126fa6:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126fa9:	01 c8                	add    %ecx,%eax
f0126fab:	8a 00                	mov    (%eax),%al
f0126fad:	0f be c0             	movsbl %al,%eax
f0126fb0:	01 d0                	add    %edx,%eax
f0126fb2:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0126fb8:	ff 45 f4             	incl   -0xc(%ebp)
f0126fbb:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0126fc1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126fc4:	7f d7                	jg     f0126f9d <test_kfreeall+0xd9d>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0126fc6:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0126fcc:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0126fd2:	c1 e2 02             	shl    $0x2,%edx
f0126fd5:	39 d0                	cmp    %edx,%eax
f0126fd7:	74 17                	je     f0126ff0 <test_kfreeall+0xdf0>
f0126fd9:	83 ec 04             	sub    $0x4,%esp
f0126fdc:	68 40 b8 13 f0       	push   $0xf013b840
f0126fe1:	68 88 0a 00 00       	push   $0xa88
f0126fe6:	68 5a b0 13 f0       	push   $0xf013b05a
f0126feb:	e8 15 92 fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0126ff0:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0126ff6:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0126ff9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127000:	eb 1e                	jmp    f0127020 <test_kfreeall+0xe20>
		{
			sums[5] += ptr[i] ;
f0127002:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f0127008:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012700b:	8b 45 80             	mov    -0x80(%ebp),%eax
f012700e:	01 c8                	add    %ecx,%eax
f0127010:	8a 00                	mov    (%eax),%al
f0127012:	0f be c0             	movsbl %al,%eax
f0127015:	01 d0                	add    %edx,%eax
f0127017:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012701d:	ff 45 f4             	incl   -0xc(%ebp)
f0127020:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0127026:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127029:	7f d7                	jg     f0127002 <test_kfreeall+0xe02>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f012702b:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f0127031:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0127037:	89 d0                	mov    %edx,%eax
f0127039:	c1 e0 02             	shl    $0x2,%eax
f012703c:	01 d0                	add    %edx,%eax
f012703e:	39 c1                	cmp    %eax,%ecx
f0127040:	74 17                	je     f0127059 <test_kfreeall+0xe59>
f0127042:	83 ec 04             	sub    $0x4,%esp
f0127045:	68 40 b8 13 f0       	push   $0xf013b840
f012704a:	68 90 0a 00 00       	push   $0xa90
f012704f:	68 5a b0 13 f0       	push   $0xf013b05a
f0127054:	e8 ac 91 fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0127059:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f012705f:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0127062:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127069:	eb 1e                	jmp    f0127089 <test_kfreeall+0xe89>
		{
			sums[7] += ptr[i] ;
f012706b:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f0127071:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0127074:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127077:	01 c8                	add    %ecx,%eax
f0127079:	8a 00                	mov    (%eax),%al
f012707b:	0f be c0             	movsbl %al,%eax
f012707e:	01 d0                	add    %edx,%eax
f0127080:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0127086:	ff 45 f4             	incl   -0xc(%ebp)
f0127089:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012708f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127092:	7f d7                	jg     f012706b <test_kfreeall+0xe6b>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0127094:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f012709a:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f01270a0:	89 d0                	mov    %edx,%eax
f01270a2:	01 c0                	add    %eax,%eax
f01270a4:	01 d0                	add    %edx,%eax
f01270a6:	01 c0                	add    %eax,%eax
f01270a8:	01 d0                	add    %edx,%eax
f01270aa:	39 c1                	cmp    %eax,%ecx
f01270ac:	74 17                	je     f01270c5 <test_kfreeall+0xec5>
f01270ae:	83 ec 04             	sub    $0x4,%esp
f01270b1:	68 40 b8 13 f0       	push   $0xf013b840
f01270b6:	68 98 0a 00 00       	push   $0xa98
f01270bb:	68 5a b0 13 f0       	push   $0xf013b05a
f01270c0:	e8 40 91 fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f01270c5:	e8 d3 5a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01270ca:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01270cd:	e8 f6 cc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01270d2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f01270d5:	83 ec 0c             	sub    $0xc,%esp
f01270d8:	68 00 50 00 00       	push   $0x5000
f01270dd:	e8 a3 07 fe ff       	call   f0107885 <kmalloc>
f01270e2:	83 c4 10             	add    $0x10,%esp
f01270e5:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01270eb:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01270f1:	89 c1                	mov    %eax,%ecx
f01270f3:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f01270fa:	10 00 00 
f01270fd:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0127103:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127108:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012710e:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0127114:	ba 00 00 00 00       	mov    $0x0,%edx
f0127119:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012711f:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0127125:	29 d0                	sub    %edx,%eax
f0127127:	89 c3                	mov    %eax,%ebx
f0127129:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0127130:	10 00 00 
f0127133:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0127138:	0f b6 d0             	movzbl %al,%edx
f012713b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0127141:	01 d0                	add    %edx,%eax
f0127143:	48                   	dec    %eax
f0127144:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f012714a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0127150:	ba 00 00 00 00       	mov    $0x0,%edx
f0127155:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f012715b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0127161:	29 d0                	sub    %edx,%eax
f0127163:	01 c3                	add    %eax,%ebx
f0127165:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f012716c:	10 00 00 
f012716f:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0127174:	0f b6 c0             	movzbl %al,%eax
f0127177:	c1 e0 04             	shl    $0x4,%eax
f012717a:	89 c2                	mov    %eax,%edx
f012717c:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0127182:	01 d0                	add    %edx,%eax
f0127184:	48                   	dec    %eax
f0127185:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f012718b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0127191:	ba 00 00 00 00       	mov    $0x0,%edx
f0127196:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f012719c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01271a2:	29 d0                	sub    %edx,%eax
f01271a4:	01 d8                	add    %ebx,%eax
f01271a6:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01271ab:	39 c1                	cmp    %eax,%ecx
f01271ad:	74 17                	je     f01271c6 <test_kfreeall+0xfc6>
f01271af:	83 ec 04             	sub    $0x4,%esp
f01271b2:	68 40 b1 13 f0       	push   $0xf013b140
f01271b7:	68 a1 0a 00 00       	push   $0xaa1
f01271bc:	68 5a b0 13 f0       	push   $0xf013b05a
f01271c1:	e8 3f 90 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01271c6:	e8 fd cb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01271cb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01271ce:	74 17                	je     f01271e7 <test_kfreeall+0xfe7>
f01271d0:	83 ec 04             	sub    $0x4,%esp
f01271d3:	68 74 b0 13 f0       	push   $0xf013b074
f01271d8:	68 a2 0a 00 00       	push   $0xaa2
f01271dd:	68 5a b0 13 f0       	push   $0xf013b05a
f01271e2:	e8 1e 90 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f01271e7:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01271ea:	e8 ae 59 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01271ef:	29 c3                	sub    %eax,%ebx
f01271f1:	89 d8                	mov    %ebx,%eax
f01271f3:	83 f8 05             	cmp    $0x5,%eax
f01271f6:	74 17                	je     f012720f <test_kfreeall+0x100f>
f01271f8:	83 ec 04             	sub    $0x4,%esp
f01271fb:	68 dc b0 13 f0       	push   $0xf013b0dc
f0127200:	68 a3 0a 00 00       	push   $0xaa3
f0127205:	68 5a b0 13 f0       	push   $0xf013b05a
f012720a:	e8 f6 8f fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f012720f:	c7 85 88 fe ff ff ff 	movl   $0x4fff,-0x178(%ebp)
f0127216:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0127219:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f012721f:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0127222:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127229:	eb 0e                	jmp    f0127239 <test_kfreeall+0x1039>
		{
			ptr[i] = 8 ;
f012722b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012722e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127231:	01 d0                	add    %edx,%eax
f0127233:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0127236:	ff 45 f4             	incl   -0xc(%ebp)
f0127239:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012723f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127242:	7f e7                	jg     f012722b <test_kfreeall+0x102b>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0127244:	e8 54 59 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127249:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012724c:	e8 77 cb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127251:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0127254:	83 ec 0c             	sub    $0xc,%esp
f0127257:	68 00 00 10 00       	push   $0x100000
f012725c:	e8 24 06 fe ff       	call   f0107885 <kmalloc>
f0127261:	83 c4 10             	add    $0x10,%esp
f0127264:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012726a:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127270:	89 c1                	mov    %eax,%ecx
f0127272:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0127279:	10 00 00 
f012727c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0127282:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127287:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f012728d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0127293:	ba 00 00 00 00       	mov    $0x0,%edx
f0127298:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f012729e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01272a4:	29 d0                	sub    %edx,%eax
f01272a6:	89 c3                	mov    %eax,%ebx
f01272a8:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f01272af:	10 00 00 
f01272b2:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01272b7:	0f b6 d0             	movzbl %al,%edx
f01272ba:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01272c0:	01 d0                	add    %edx,%eax
f01272c2:	48                   	dec    %eax
f01272c3:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f01272c9:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01272cf:	ba 00 00 00 00       	mov    $0x0,%edx
f01272d4:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f01272da:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01272e0:	29 d0                	sub    %edx,%eax
f01272e2:	01 c3                	add    %eax,%ebx
f01272e4:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f01272eb:	10 00 00 
f01272ee:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01272f3:	0f b6 c0             	movzbl %al,%eax
f01272f6:	c1 e0 04             	shl    $0x4,%eax
f01272f9:	89 c2                	mov    %eax,%edx
f01272fb:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0127301:	01 d0                	add    %edx,%eax
f0127303:	48                   	dec    %eax
f0127304:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012730a:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0127310:	ba 00 00 00 00       	mov    $0x0,%edx
f0127315:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012731b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0127321:	29 d0                	sub    %edx,%eax
f0127323:	01 d8                	add    %ebx,%eax
f0127325:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012732a:	39 c1                	cmp    %eax,%ecx
f012732c:	74 17                	je     f0127345 <test_kfreeall+0x1145>
f012732e:	83 ec 04             	sub    $0x4,%esp
f0127331:	68 40 b1 13 f0       	push   $0xf013b140
f0127336:	68 af 0a 00 00       	push   $0xaaf
f012733b:	68 5a b0 13 f0       	push   $0xf013b05a
f0127340:	e8 c0 8e fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127345:	e8 7e ca fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012734a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012734d:	74 17                	je     f0127366 <test_kfreeall+0x1166>
f012734f:	83 ec 04             	sub    $0x4,%esp
f0127352:	68 74 b0 13 f0       	push   $0xf013b074
f0127357:	68 b0 0a 00 00       	push   $0xab0
f012735c:	68 5a b0 13 f0       	push   $0xf013b05a
f0127361:	e8 9f 8e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127366:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127369:	e8 2f 58 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012736e:	29 c3                	sub    %eax,%ebx
f0127370:	89 d8                	mov    %ebx,%eax
f0127372:	3d 00 01 00 00       	cmp    $0x100,%eax
f0127377:	74 17                	je     f0127390 <test_kfreeall+0x1190>
f0127379:	83 ec 04             	sub    $0x4,%esp
f012737c:	68 dc b0 13 f0       	push   $0xf013b0dc
f0127381:	68 b1 0a 00 00       	push   $0xab1
f0127386:	68 5a b0 13 f0       	push   $0xf013b05a
f012738b:	e8 75 8e fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0127390:	c7 85 8c fe ff ff ff 	movl   $0xfffff,-0x174(%ebp)
f0127397:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f012739a:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01273a0:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f01273a3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01273aa:	eb 0e                	jmp    f01273ba <test_kfreeall+0x11ba>
		{
			ptr[i] = 9 ;
f01273ac:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01273af:	8b 45 80             	mov    -0x80(%ebp),%eax
f01273b2:	01 d0                	add    %edx,%eax
f01273b4:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f01273b7:	ff 45 f4             	incl   -0xc(%ebp)
f01273ba:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f01273c0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01273c3:	7f e7                	jg     f01273ac <test_kfreeall+0x11ac>
		}
	}

	//kfree entire kernel heap
	{
		freeFrames = sys_calculate_free_frames() ;
f01273c5:	e8 d3 57 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01273ca:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01273cd:	e8 f6 c9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01273d2:	89 45 cc             	mov    %eax,-0x34(%ebp)

		kfreeall();
f01273d5:	e8 14 07 fe ff       	call   f0107aee <kfreeall>

		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01273da:	e8 e9 c9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01273df:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01273e2:	74 17                	je     f01273fb <test_kfreeall+0x11fb>
f01273e4:	83 ec 04             	sub    $0x4,%esp
f01273e7:	68 74 b0 13 f0       	push   $0xf013b074
f01273ec:	68 c1 0a 00 00       	push   $0xac1
f01273f1:	68 5a b0 13 f0       	push   $0xf013b05a
f01273f6:	e8 0a 8e fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE+ 2 + 3*Mega/4096 + 1 + 1 + 4 + 5 + 256) panic("Wrong kfree: pages in memory are not freed correctly");
f01273fb:	e8 9d 57 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127400:	89 c2                	mov    %eax,%edx
f0127402:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127405:	89 d1                	mov    %edx,%ecx
f0127407:	29 c1                	sub    %eax,%ecx
f0127409:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0127410:	10 00 00 
f0127413:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0127419:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012741e:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0127424:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012742a:	ba 00 00 00 00       	mov    $0x0,%edx
f012742f:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0127435:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012743b:	29 d0                	sub    %edx,%eax
f012743d:	89 c3                	mov    %eax,%ebx
f012743f:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0127446:	10 00 00 
f0127449:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012744e:	0f b6 d0             	movzbl %al,%edx
f0127451:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0127457:	01 d0                	add    %edx,%eax
f0127459:	48                   	dec    %eax
f012745a:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0127460:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0127466:	ba 00 00 00 00       	mov    $0x0,%edx
f012746b:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0127471:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0127477:	29 d0                	sub    %edx,%eax
f0127479:	01 c3                	add    %eax,%ebx
f012747b:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0127482:	10 00 00 
f0127485:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012748a:	0f b6 c0             	movzbl %al,%eax
f012748d:	c1 e0 04             	shl    $0x4,%eax
f0127490:	89 c2                	mov    %eax,%edx
f0127492:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0127498:	01 d0                	add    %edx,%eax
f012749a:	48                   	dec    %eax
f012749b:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f01274a1:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01274a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01274ac:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f01274b2:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01274b8:	29 d0                	sub    %edx,%eax
f01274ba:	01 d8                	add    %ebx,%eax
f01274bc:	05 00 40 00 00       	add    $0x4000,%eax
f01274c1:	c1 e8 0c             	shr    $0xc,%eax
f01274c4:	05 0d 04 00 00       	add    $0x40d,%eax
f01274c9:	39 c1                	cmp    %eax,%ecx
f01274cb:	74 17                	je     f01274e4 <test_kfreeall+0x12e4>
f01274cd:	83 ec 04             	sub    $0x4,%esp
f01274d0:	68 e4 b7 13 f0       	push   $0xf013b7e4
f01274d5:	68 c2 0a 00 00       	push   $0xac2
f01274da:	68 5a b0 13 f0       	push   $0xf013b05a
f01274df:	e8 21 8d fd ff       	call   f0100205 <_panic>

	//Check memory access after kfreeall
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01274e4:	83 ec 0c             	sub    $0xc,%esp
f01274e7:	6a 03                	push   $0x3
f01274e9:	e8 4f 5b fe ff       	call   f010d03d <sys_bypassPageFault>
f01274ee:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f01274f1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01274f8:	e9 82 00 00 00       	jmp    f012757f <test_kfreeall+0x137f>
		{
			ptr = (char *) ptr_allocations[i];
f01274fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127500:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f0127507:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f012750a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012750d:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0127510:	e8 16 5b fe ff       	call   f010d02b <sys_rcr2>
f0127515:	89 c2                	mov    %eax,%edx
f0127517:	8b 45 80             	mov    -0x80(%ebp),%eax
f012751a:	39 c2                	cmp    %eax,%edx
f012751c:	74 17                	je     f0127535 <test_kfreeall+0x1335>
f012751e:	83 ec 04             	sub    $0x4,%esp
f0127521:	68 c0 b8 13 f0       	push   $0xf013b8c0
f0127526:	68 d0 0a 00 00       	push   $0xad0
f012752b:	68 5a b0 13 f0       	push   $0xf013b05a
f0127530:	e8 d0 8c fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f0127535:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127538:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f012753f:	89 c2                	mov    %eax,%edx
f0127541:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127544:	01 d0                	add    %edx,%eax
f0127546:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0127549:	e8 dd 5a fe ff       	call   f010d02b <sys_rcr2>
f012754e:	89 c2                	mov    %eax,%edx
f0127550:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127553:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f012755a:	89 c1                	mov    %eax,%ecx
f012755c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012755f:	01 c8                	add    %ecx,%eax
f0127561:	39 c2                	cmp    %eax,%edx
f0127563:	74 17                	je     f012757c <test_kfreeall+0x137c>
f0127565:	83 ec 04             	sub    $0x4,%esp
f0127568:	68 c0 b8 13 f0       	push   $0xf013b8c0
f012756d:	68 d2 0a 00 00       	push   $0xad2
f0127572:	68 5a b0 13 f0       	push   $0xf013b05a
f0127577:	e8 89 8c fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f012757c:	ff 45 f4             	incl   -0xc(%ebp)
f012757f:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0127583:	0f 8e 74 ff ff ff    	jle    f01274fd <test_kfreeall+0x12fd>
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}
		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0127589:	83 ec 0c             	sub    $0xc,%esp
f012758c:	6a 00                	push   $0x0
f012758e:	e8 aa 5a fe ff       	call   f010d03d <sys_bypassPageFault>
f0127593:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfreeall
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0127596:	e8 02 56 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012759b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012759e:	e8 25 c8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01275a3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(4*Mega);
f01275a6:	83 ec 0c             	sub    $0xc,%esp
f01275a9:	68 00 00 40 00       	push   $0x400000
f01275ae:	e8 d2 02 fe ff       	call   f0107885 <kmalloc>
f01275b3:	83 c4 10             	add    $0x10,%esp
f01275b6:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (KERNEL_HEAP_START)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f01275bc:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01275c2:	3d 00 00 00 f6       	cmp    $0xf6000000,%eax
f01275c7:	74 17                	je     f01275e0 <test_kfreeall+0x13e0>
f01275c9:	83 ec 04             	sub    $0x4,%esp
f01275cc:	68 64 bd 13 f0       	push   $0xf013bd64
f01275d1:	68 de 0a 00 00       	push   $0xade
f01275d6:	68 5a b0 13 f0       	push   $0xf013b05a
f01275db:	e8 25 8c fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01275e0:	e8 e3 c7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01275e5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01275e8:	74 17                	je     f0127601 <test_kfreeall+0x1401>
f01275ea:	83 ec 04             	sub    $0x4,%esp
f01275ed:	68 74 b0 13 f0       	push   $0xf013b074
f01275f2:	68 df 0a 00 00       	push   $0xadf
f01275f7:	68 5a b0 13 f0       	push   $0xf013b05a
f01275fc:	e8 04 8c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127601:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127604:	e8 94 55 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127609:	29 c3                	sub    %eax,%ebx
f012760b:	89 d8                	mov    %ebx,%eax
f012760d:	3d 00 04 00 00       	cmp    $0x400,%eax
f0127612:	74 17                	je     f012762b <test_kfreeall+0x142b>
f0127614:	83 ec 04             	sub    $0x4,%esp
f0127617:	68 dc b0 13 f0       	push   $0xf013b0dc
f012761c:	68 e0 0a 00 00       	push   $0xae0
f0127621:	68 5a b0 13 f0       	push   $0xf013b05a
f0127626:	e8 da 8b fd ff       	call   f0100205 <_panic>

		//12 KB
		freeFrames = sys_calculate_free_frames() ;
f012762b:	e8 6d 55 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127630:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127633:	e8 90 c7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127638:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[11] = kmalloc(12*kilo);
f012763b:	83 ec 0c             	sub    $0xc,%esp
f012763e:	68 00 30 00 00       	push   $0x3000
f0127643:	e8 3d 02 fe ff       	call   f0107885 <kmalloc>
f0127648:	83 c4 10             	add    $0x10,%esp
f012764b:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		if ((uint32) ptr_allocations[11] != (KERNEL_HEAP_START + 4*Mega)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f0127651:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0127657:	3d 00 00 40 f6       	cmp    $0xf6400000,%eax
f012765c:	74 17                	je     f0127675 <test_kfreeall+0x1475>
f012765e:	83 ec 04             	sub    $0x4,%esp
f0127661:	68 64 bd 13 f0       	push   $0xf013bd64
f0127666:	68 e6 0a 00 00       	push   $0xae6
f012766b:	68 5a b0 13 f0       	push   $0xf013b05a
f0127670:	e8 90 8b fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127675:	e8 4e c7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012767a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012767d:	74 17                	je     f0127696 <test_kfreeall+0x1496>
f012767f:	83 ec 04             	sub    $0x4,%esp
f0127682:	68 74 b0 13 f0       	push   $0xf013b074
f0127687:	68 e7 0a 00 00       	push   $0xae7
f012768c:	68 5a b0 13 f0       	push   $0xf013b05a
f0127691:	e8 6f 8b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 3) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127696:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127699:	e8 ff 54 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012769e:	29 c3                	sub    %eax,%ebx
f01276a0:	89 d8                	mov    %ebx,%eax
f01276a2:	83 f8 03             	cmp    $0x3,%eax
f01276a5:	74 17                	je     f01276be <test_kfreeall+0x14be>
f01276a7:	83 ec 04             	sub    $0x4,%esp
f01276aa:	68 dc b0 13 f0       	push   $0xf013b0dc
f01276af:	68 e8 0a 00 00       	push   $0xae8
f01276b4:	68 5a b0 13 f0       	push   $0xf013b05a
f01276b9:	e8 47 8b fd ff       	call   f0100205 <_panic>
	}

	//kfree one of the newly allocated space
	{
		//kfree 12 KB
		freeFrames = sys_calculate_free_frames() ;
f01276be:	e8 da 54 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01276c3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01276c6:	e8 fd c6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01276cb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[11]);
f01276ce:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01276d4:	83 ec 0c             	sub    $0xc,%esp
f01276d7:	50                   	push   %eax
f01276d8:	e8 73 02 fe ff       	call   f0107950 <kfree>
f01276dd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01276e0:	e8 e3 c6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01276e5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01276e8:	74 17                	je     f0127701 <test_kfreeall+0x1501>
f01276ea:	83 ec 04             	sub    $0x4,%esp
f01276ed:	68 74 b0 13 f0       	push   $0xf013b074
f01276f2:	68 f2 0a 00 00       	push   $0xaf2
f01276f7:	68 5a b0 13 f0       	push   $0xf013b05a
f01276fc:	e8 04 8b fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127701:	e8 97 54 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127706:	89 c2                	mov    %eax,%edx
f0127708:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012770b:	29 c2                	sub    %eax,%edx
f012770d:	89 d0                	mov    %edx,%eax
f012770f:	83 f8 03             	cmp    $0x3,%eax
f0127712:	74 17                	je     f012772b <test_kfreeall+0x152b>
f0127714:	83 ec 04             	sub    $0x4,%esp
f0127717:	68 0c b9 13 f0       	push   $0xf013b90c
f012771c:	68 f3 0a 00 00       	push   $0xaf3
f0127721:	68 5a b0 13 f0       	push   $0xf013b05a
f0127726:	e8 da 8a fd ff       	call   f0100205 <_panic>
	}

	//kfree non-exist item
	{
		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012772b:	e8 6d 54 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127730:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127733:	e8 90 c6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127738:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f012773b:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0127741:	83 ec 0c             	sub    $0xc,%esp
f0127744:	50                   	push   %eax
f0127745:	e8 06 02 fe ff       	call   f0107950 <kfree>
f012774a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012774d:	e8 76 c6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127752:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127755:	74 17                	je     f012776e <test_kfreeall+0x156e>
f0127757:	83 ec 04             	sub    $0x4,%esp
f012775a:	68 74 b0 13 f0       	push   $0xf013b074
f012775f:	68 fc 0a 00 00       	push   $0xafc
f0127764:	68 5a b0 13 f0       	push   $0xf013b05a
f0127769:	e8 97 8a fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012776e:	e8 2a 54 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127773:	89 c2                	mov    %eax,%edx
f0127775:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127778:	39 c2                	cmp    %eax,%edx
f012777a:	74 17                	je     f0127793 <test_kfreeall+0x1593>
f012777c:	83 ec 04             	sub    $0x4,%esp
f012777f:	68 0c b9 13 f0       	push   $0xf013b90c
f0127784:	68 fd 0a 00 00       	push   $0xafd
f0127789:	68 5a b0 13 f0       	push   $0xf013b05a
f012778e:	e8 72 8a fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0127793:	e8 05 54 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127798:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012779b:	e8 28 c6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01277a0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01277a3:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01277a9:	83 ec 0c             	sub    $0xc,%esp
f01277ac:	50                   	push   %eax
f01277ad:	e8 9e 01 fe ff       	call   f0107950 <kfree>
f01277b2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01277b5:	e8 0e c6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01277ba:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01277bd:	74 17                	je     f01277d6 <test_kfreeall+0x15d6>
f01277bf:	83 ec 04             	sub    $0x4,%esp
f01277c2:	68 74 b0 13 f0       	push   $0xf013b074
f01277c7:	68 03 0b 00 00       	push   $0xb03
f01277cc:	68 5a b0 13 f0       	push   $0xf013b05a
f01277d1:	e8 2f 8a fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01277d6:	e8 c2 53 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01277db:	89 c2                	mov    %eax,%edx
f01277dd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01277e0:	39 c2                	cmp    %eax,%edx
f01277e2:	74 17                	je     f01277fb <test_kfreeall+0x15fb>
f01277e4:	83 ec 04             	sub    $0x4,%esp
f01277e7:	68 0c b9 13 f0       	push   $0xf013b90c
f01277ec:	68 04 0b 00 00       	push   $0xb04
f01277f1:	68 5a b0 13 f0       	push   $0xf013b05a
f01277f6:	e8 0a 8a fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01277fb:	e8 9d 53 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127800:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127803:	e8 c0 c5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127808:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f012780b:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127811:	83 ec 0c             	sub    $0xc,%esp
f0127814:	50                   	push   %eax
f0127815:	e8 36 01 fe ff       	call   f0107950 <kfree>
f012781a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012781d:	e8 a6 c5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127822:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127825:	74 17                	je     f012783e <test_kfreeall+0x163e>
f0127827:	83 ec 04             	sub    $0x4,%esp
f012782a:	68 74 b0 13 f0       	push   $0xf013b074
f012782f:	68 0a 0b 00 00       	push   $0xb0a
f0127834:	68 5a b0 13 f0       	push   $0xf013b05a
f0127839:	e8 c7 89 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012783e:	e8 5a 53 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127843:	89 c2                	mov    %eax,%edx
f0127845:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127848:	39 c2                	cmp    %eax,%edx
f012784a:	74 17                	je     f0127863 <test_kfreeall+0x1663>
f012784c:	83 ec 04             	sub    $0x4,%esp
f012784f:	68 0c b9 13 f0       	push   $0xf013b90c
f0127854:	68 0b 0b 00 00       	push   $0xb0b
f0127859:	68 5a b0 13 f0       	push   $0xf013b05a
f012785e:	e8 a2 89 fd ff       	call   f0100205 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0127863:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f012786a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0127871:	eb 48                	jmp    f01278bb <test_kfreeall+0x16bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0127873:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0127876:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f012787b:	83 ec 04             	sub    $0x4,%esp
f012787e:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f0127884:	51                   	push   %ecx
f0127885:	52                   	push   %edx
f0127886:	50                   	push   %eax
f0127887:	e8 25 f2 fd ff       	call   f0106ab1 <get_page_table>
f012788c:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f012788f:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0127895:	85 c0                	test   %eax,%eax
f0127897:	75 17                	jne    f01278b0 <test_kfreeall+0x16b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0127899:	83 ec 04             	sub    $0x4,%esp
f012789c:	68 5c b9 13 f0       	push   $0xf013b95c
f01278a1:	68 18 0b 00 00       	push   $0xb18
f01278a6:	68 5a b0 13 f0       	push   $0xf013b05a
f01278ab:	e8 55 89 fd ff       	call   f0100205 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01278b0:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f01278b7:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f01278bb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01278bf:	78 b2                	js     f0127873 <test_kfreeall+0x1673>
f01278c1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01278c5:	7f 09                	jg     f01278d0 <test_kfreeall+0x16d0>
f01278c7:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f01278ce:	76 a3                	jbe    f0127873 <test_kfreeall+0x1673>
			}
		}
	}


	cprintf("\nCongratulations!! your modification is run successfully.\n");
f01278d0:	83 ec 0c             	sub    $0xc,%esp
f01278d3:	68 b8 bd 13 f0       	push   $0xf013bdb8
f01278d8:	e8 31 94 fd ff       	call   f0100d0e <cprintf>
f01278dd:	83 c4 10             	add    $0x10,%esp

	return 1;
f01278e0:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01278e5:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01278e8:	5b                   	pop    %ebx
f01278e9:	5f                   	pop    %edi
f01278ea:	5d                   	pop    %ebp
f01278eb:	c3                   	ret    

f01278ec <test_kexpand>:


extern void kexpand(uint32 newSize) ;

int test_kexpand()
{
f01278ec:	55                   	push   %ebp
f01278ed:	89 e5                	mov    %esp,%ebp
f01278ef:	57                   	push   %edi
f01278f0:	53                   	push   %ebx
f01278f1:	81 ec 90 01 00 00    	sub    $0x190,%esp
	char minByte = 1<<7;
f01278f7:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f01278fb:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f01278ff:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0127905:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f012790b:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0127912:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0127919:	e8 7f 52 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012791e:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0127921:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f0127927:	b9 14 00 00 00       	mov    $0x14,%ecx
f012792c:	b8 00 00 00 00       	mov    $0x0,%eax
f0127931:	89 d7                	mov    %edx,%edi
f0127933:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f0127935:	8d 95 6c fe ff ff    	lea    -0x194(%ebp),%edx
f012793b:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127940:	b8 00 00 00 00       	mov    $0x0,%eax
f0127945:	89 d7                	mov    %edx,%edi
f0127947:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127949:	e8 4f 52 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012794e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127951:	e8 72 c4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127956:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0127959:	83 ec 0c             	sub    $0xc,%esp
f012795c:	68 00 fc 1f 00       	push   $0x1ffc00
f0127961:	e8 1f ff fd ff       	call   f0107885 <kmalloc>
f0127966:	83 c4 10             	add    $0x10,%esp
f0127969:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012796f:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0127975:	89 c1                	mov    %eax,%ecx
f0127977:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f012797e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0127981:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127986:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0127989:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012798c:	ba 00 00 00 00       	mov    $0x0,%edx
f0127991:	f7 75 d4             	divl   -0x2c(%ebp)
f0127994:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127997:	29 d0                	sub    %edx,%eax
f0127999:	89 c3                	mov    %eax,%ebx
f012799b:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f01279a2:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01279a7:	0f b6 d0             	movzbl %al,%edx
f01279aa:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01279ad:	01 d0                	add    %edx,%eax
f01279af:	48                   	dec    %eax
f01279b0:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01279b3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01279b6:	ba 00 00 00 00       	mov    $0x0,%edx
f01279bb:	f7 75 cc             	divl   -0x34(%ebp)
f01279be:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01279c1:	29 d0                	sub    %edx,%eax
f01279c3:	01 c3                	add    %eax,%ebx
f01279c5:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01279cc:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01279d1:	0f b6 c0             	movzbl %al,%eax
f01279d4:	c1 e0 04             	shl    $0x4,%eax
f01279d7:	89 c2                	mov    %eax,%edx
f01279d9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01279dc:	01 d0                	add    %edx,%eax
f01279de:	48                   	dec    %eax
f01279df:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01279e2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01279e5:	ba 00 00 00 00       	mov    $0x0,%edx
f01279ea:	f7 75 c4             	divl   -0x3c(%ebp)
f01279ed:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01279f0:	29 d0                	sub    %edx,%eax
f01279f2:	01 d8                	add    %ebx,%eax
f01279f4:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01279f9:	39 c1                	cmp    %eax,%ecx
f01279fb:	74 17                	je     f0127a14 <test_kexpand+0x128>
f01279fd:	83 ec 04             	sub    $0x4,%esp
f0127a00:	68 40 b1 13 f0       	push   $0xf013b140
f0127a05:	68 43 0b 00 00       	push   $0xb43
f0127a0a:	68 5a b0 13 f0       	push   $0xf013b05a
f0127a0f:	e8 f1 87 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127a14:	e8 af c3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127a19:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127a1c:	74 17                	je     f0127a35 <test_kexpand+0x149>
f0127a1e:	83 ec 04             	sub    $0x4,%esp
f0127a21:	68 74 b0 13 f0       	push   $0xf013b074
f0127a26:	68 44 0b 00 00       	push   $0xb44
f0127a2b:	68 5a b0 13 f0       	push   $0xf013b05a
f0127a30:	e8 d0 87 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127a35:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127a38:	e8 60 51 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127a3d:	29 c3                	sub    %eax,%ebx
f0127a3f:	89 d8                	mov    %ebx,%eax
f0127a41:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127a46:	74 17                	je     f0127a5f <test_kexpand+0x173>
f0127a48:	83 ec 04             	sub    $0x4,%esp
f0127a4b:	68 dc b0 13 f0       	push   $0xf013b0dc
f0127a50:	68 45 0b 00 00       	push   $0xb45
f0127a55:	68 5a b0 13 f0       	push   $0xf013b05a
f0127a5a:	e8 a6 87 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0127a5f:	c7 85 bc fe ff ff ff 	movl   $0x1ffbff,-0x144(%ebp)
f0127a66:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127a69:	e8 2f 51 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127a6e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127a71:	e8 52 c3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127a76:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0127a79:	83 ec 0c             	sub    $0xc,%esp
f0127a7c:	68 00 fc 1f 00       	push   $0x1ffc00
f0127a81:	e8 ff fd fd ff       	call   f0107885 <kmalloc>
f0127a86:	83 c4 10             	add    $0x10,%esp
f0127a89:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127a8f:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0127a95:	89 c1                	mov    %eax,%ecx
f0127a97:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0127a9e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0127aa1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127aa6:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0127aa9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127aac:	ba 00 00 00 00       	mov    $0x0,%edx
f0127ab1:	f7 75 bc             	divl   -0x44(%ebp)
f0127ab4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127ab7:	29 d0                	sub    %edx,%eax
f0127ab9:	89 c3                	mov    %eax,%ebx
f0127abb:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0127ac2:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0127ac7:	0f b6 d0             	movzbl %al,%edx
f0127aca:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0127acd:	01 d0                	add    %edx,%eax
f0127acf:	48                   	dec    %eax
f0127ad0:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0127ad3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127ad6:	ba 00 00 00 00       	mov    $0x0,%edx
f0127adb:	f7 75 b4             	divl   -0x4c(%ebp)
f0127ade:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127ae1:	29 d0                	sub    %edx,%eax
f0127ae3:	01 c3                	add    %eax,%ebx
f0127ae5:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0127aec:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0127af1:	0f b6 c0             	movzbl %al,%eax
f0127af4:	c1 e0 04             	shl    $0x4,%eax
f0127af7:	89 c2                	mov    %eax,%edx
f0127af9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0127afc:	01 d0                	add    %edx,%eax
f0127afe:	48                   	dec    %eax
f0127aff:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0127b02:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0127b05:	ba 00 00 00 00       	mov    $0x0,%edx
f0127b0a:	f7 75 ac             	divl   -0x54(%ebp)
f0127b0d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0127b10:	29 d0                	sub    %edx,%eax
f0127b12:	01 d8                	add    %ebx,%eax
f0127b14:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0127b19:	39 c1                	cmp    %eax,%ecx
f0127b1b:	74 17                	je     f0127b34 <test_kexpand+0x248>
f0127b1d:	83 ec 04             	sub    $0x4,%esp
f0127b20:	68 40 b1 13 f0       	push   $0xf013b140
f0127b25:	68 4c 0b 00 00       	push   $0xb4c
f0127b2a:	68 5a b0 13 f0       	push   $0xf013b05a
f0127b2f:	e8 d1 86 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127b34:	e8 8f c2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127b39:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127b3c:	74 17                	je     f0127b55 <test_kexpand+0x269>
f0127b3e:	83 ec 04             	sub    $0x4,%esp
f0127b41:	68 74 b0 13 f0       	push   $0xf013b074
f0127b46:	68 4d 0b 00 00       	push   $0xb4d
f0127b4b:	68 5a b0 13 f0       	push   $0xf013b05a
f0127b50:	e8 b0 86 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127b55:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127b58:	e8 40 50 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127b5d:	29 c3                	sub    %eax,%ebx
f0127b5f:	89 d8                	mov    %ebx,%eax
f0127b61:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127b66:	74 17                	je     f0127b7f <test_kexpand+0x293>
f0127b68:	83 ec 04             	sub    $0x4,%esp
f0127b6b:	68 dc b0 13 f0       	push   $0xf013b0dc
f0127b70:	68 4e 0b 00 00       	push   $0xb4e
f0127b75:	68 5a b0 13 f0       	push   $0xf013b05a
f0127b7a:	e8 86 86 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0127b7f:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f0127b86:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127b89:	e8 0f 50 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127b8e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127b91:	e8 32 c2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127b96:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0127b99:	83 ec 0c             	sub    $0xc,%esp
f0127b9c:	68 00 08 00 00       	push   $0x800
f0127ba1:	e8 df fc fd ff       	call   f0107885 <kmalloc>
f0127ba6:	83 c4 10             	add    $0x10,%esp
f0127ba9:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127baf:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0127bb5:	89 c1                	mov    %eax,%ecx
f0127bb7:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0127bbe:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127bc1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127bc6:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0127bc9:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0127bcc:	ba 00 00 00 00       	mov    $0x0,%edx
f0127bd1:	f7 75 a4             	divl   -0x5c(%ebp)
f0127bd4:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0127bd7:	29 d0                	sub    %edx,%eax
f0127bd9:	89 c3                	mov    %eax,%ebx
f0127bdb:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0127be2:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0127be7:	0f b6 d0             	movzbl %al,%edx
f0127bea:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0127bed:	01 d0                	add    %edx,%eax
f0127bef:	48                   	dec    %eax
f0127bf0:	89 45 98             	mov    %eax,-0x68(%ebp)
f0127bf3:	8b 45 98             	mov    -0x68(%ebp),%eax
f0127bf6:	ba 00 00 00 00       	mov    $0x0,%edx
f0127bfb:	f7 75 9c             	divl   -0x64(%ebp)
f0127bfe:	8b 45 98             	mov    -0x68(%ebp),%eax
f0127c01:	29 d0                	sub    %edx,%eax
f0127c03:	01 c3                	add    %eax,%ebx
f0127c05:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0127c0c:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0127c11:	0f b6 c0             	movzbl %al,%eax
f0127c14:	c1 e0 04             	shl    $0x4,%eax
f0127c17:	89 c2                	mov    %eax,%edx
f0127c19:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0127c1c:	01 d0                	add    %edx,%eax
f0127c1e:	48                   	dec    %eax
f0127c1f:	89 45 90             	mov    %eax,-0x70(%ebp)
f0127c22:	8b 45 90             	mov    -0x70(%ebp),%eax
f0127c25:	ba 00 00 00 00       	mov    $0x0,%edx
f0127c2a:	f7 75 94             	divl   -0x6c(%ebp)
f0127c2d:	8b 45 90             	mov    -0x70(%ebp),%eax
f0127c30:	29 d0                	sub    %edx,%eax
f0127c32:	01 d8                	add    %ebx,%eax
f0127c34:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0127c39:	39 c1                	cmp    %eax,%ecx
f0127c3b:	74 17                	je     f0127c54 <test_kexpand+0x368>
f0127c3d:	83 ec 04             	sub    $0x4,%esp
f0127c40:	68 40 b1 13 f0       	push   $0xf013b140
f0127c45:	68 55 0b 00 00       	push   $0xb55
f0127c4a:	68 5a b0 13 f0       	push   $0xf013b05a
f0127c4f:	e8 b1 85 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127c54:	e8 6f c1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127c59:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127c5c:	74 17                	je     f0127c75 <test_kexpand+0x389>
f0127c5e:	83 ec 04             	sub    $0x4,%esp
f0127c61:	68 74 b0 13 f0       	push   $0xf013b074
f0127c66:	68 56 0b 00 00       	push   $0xb56
f0127c6b:	68 5a b0 13 f0       	push   $0xf013b05a
f0127c70:	e8 90 85 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127c75:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127c78:	e8 20 4f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127c7d:	29 c3                	sub    %eax,%ebx
f0127c7f:	89 d8                	mov    %ebx,%eax
f0127c81:	83 f8 01             	cmp    $0x1,%eax
f0127c84:	74 17                	je     f0127c9d <test_kexpand+0x3b1>
f0127c86:	83 ec 04             	sub    $0x4,%esp
f0127c89:	68 dc b0 13 f0       	push   $0xf013b0dc
f0127c8e:	68 57 0b 00 00       	push   $0xb57
f0127c93:	68 5a b0 13 f0       	push   $0xf013b05a
f0127c98:	e8 68 85 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0127c9d:	c7 85 c4 fe ff ff ff 	movl   $0x7ff,-0x13c(%ebp)
f0127ca4:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0127ca7:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0127cad:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0127cb0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127cb7:	eb 0e                	jmp    f0127cc7 <test_kexpand+0x3db>
		{
			ptr[i] = 2 ;
f0127cb9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127cbc:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127cbf:	01 d0                	add    %edx,%eax
f0127cc1:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0127cc4:	ff 45 f4             	incl   -0xc(%ebp)
f0127cc7:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0127ccd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127cd0:	7f e7                	jg     f0127cb9 <test_kexpand+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127cd2:	e8 c6 4e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127cd7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127cda:	e8 e9 c0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127cdf:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0127ce2:	83 ec 0c             	sub    $0xc,%esp
f0127ce5:	68 00 08 00 00       	push   $0x800
f0127cea:	e8 96 fb fd ff       	call   f0107885 <kmalloc>
f0127cef:	83 c4 10             	add    $0x10,%esp
f0127cf2:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127cf8:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0127cfe:	89 c1                	mov    %eax,%ecx
f0127d00:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0127d07:	8b 45 88             	mov    -0x78(%ebp),%eax
f0127d0a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127d0f:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0127d12:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0127d15:	ba 00 00 00 00       	mov    $0x0,%edx
f0127d1a:	f7 75 88             	divl   -0x78(%ebp)
f0127d1d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0127d20:	29 d0                	sub    %edx,%eax
f0127d22:	89 c3                	mov    %eax,%ebx
f0127d24:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0127d2b:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0127d30:	0f b6 d0             	movzbl %al,%edx
f0127d33:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127d36:	01 d0                	add    %edx,%eax
f0127d38:	48                   	dec    %eax
f0127d39:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0127d3f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0127d45:	ba 00 00 00 00       	mov    $0x0,%edx
f0127d4a:	f7 75 80             	divl   -0x80(%ebp)
f0127d4d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0127d53:	29 d0                	sub    %edx,%eax
f0127d55:	01 c3                	add    %eax,%ebx
f0127d57:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0127d5e:	10 00 00 
f0127d61:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0127d66:	0f b6 c0             	movzbl %al,%eax
f0127d69:	c1 e0 04             	shl    $0x4,%eax
f0127d6c:	89 c2                	mov    %eax,%edx
f0127d6e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0127d74:	01 d0                	add    %edx,%eax
f0127d76:	48                   	dec    %eax
f0127d77:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0127d7d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0127d83:	ba 00 00 00 00       	mov    $0x0,%edx
f0127d88:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0127d8e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0127d94:	29 d0                	sub    %edx,%eax
f0127d96:	01 d8                	add    %ebx,%eax
f0127d98:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0127d9d:	39 c1                	cmp    %eax,%ecx
f0127d9f:	74 17                	je     f0127db8 <test_kexpand+0x4cc>
f0127da1:	83 ec 04             	sub    $0x4,%esp
f0127da4:	68 40 b1 13 f0       	push   $0xf013b140
f0127da9:	68 63 0b 00 00       	push   $0xb63
f0127dae:	68 5a b0 13 f0       	push   $0xf013b05a
f0127db3:	e8 4d 84 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127db8:	e8 0b c0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127dbd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127dc0:	74 17                	je     f0127dd9 <test_kexpand+0x4ed>
f0127dc2:	83 ec 04             	sub    $0x4,%esp
f0127dc5:	68 74 b0 13 f0       	push   $0xf013b074
f0127dca:	68 64 0b 00 00       	push   $0xb64
f0127dcf:	68 5a b0 13 f0       	push   $0xf013b05a
f0127dd4:	e8 2c 84 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127dd9:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127ddc:	e8 bc 4d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127de1:	29 c3                	sub    %eax,%ebx
f0127de3:	89 d8                	mov    %ebx,%eax
f0127de5:	83 f8 01             	cmp    $0x1,%eax
f0127de8:	74 17                	je     f0127e01 <test_kexpand+0x515>
f0127dea:	83 ec 04             	sub    $0x4,%esp
f0127ded:	68 dc b0 13 f0       	push   $0xf013b0dc
f0127df2:	68 65 0b 00 00       	push   $0xb65
f0127df7:	68 5a b0 13 f0       	push   $0xf013b05a
f0127dfc:	e8 04 84 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0127e01:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f0127e08:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0127e0b:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0127e11:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0127e14:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127e1b:	eb 0e                	jmp    f0127e2b <test_kexpand+0x53f>
		{
			ptr[i] = 3 ;
f0127e1d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127e20:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127e23:	01 d0                	add    %edx,%eax
f0127e25:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0127e28:	ff 45 f4             	incl   -0xc(%ebp)
f0127e2b:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0127e31:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127e34:	7f e7                	jg     f0127e1d <test_kexpand+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0127e36:	e8 62 4d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127e3b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127e3e:	e8 85 bf fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127e43:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0127e46:	83 ec 0c             	sub    $0xc,%esp
f0127e49:	68 00 1c 00 00       	push   $0x1c00
f0127e4e:	e8 32 fa fd ff       	call   f0107885 <kmalloc>
f0127e53:	83 c4 10             	add    $0x10,%esp
f0127e56:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127e5c:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0127e62:	89 c1                	mov    %eax,%ecx
f0127e64:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0127e6b:	10 00 00 
f0127e6e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0127e74:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127e79:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0127e7f:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0127e85:	ba 00 00 00 00       	mov    $0x0,%edx
f0127e8a:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0127e90:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0127e96:	29 d0                	sub    %edx,%eax
f0127e98:	89 c3                	mov    %eax,%ebx
f0127e9a:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0127ea1:	10 00 00 
f0127ea4:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0127ea9:	0f b6 d0             	movzbl %al,%edx
f0127eac:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0127eb2:	01 d0                	add    %edx,%eax
f0127eb4:	48                   	dec    %eax
f0127eb5:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0127ebb:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0127ec1:	ba 00 00 00 00       	mov    $0x0,%edx
f0127ec6:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0127ecc:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0127ed2:	29 d0                	sub    %edx,%eax
f0127ed4:	01 c3                	add    %eax,%ebx
f0127ed6:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0127edd:	10 00 00 
f0127ee0:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0127ee5:	0f b6 c0             	movzbl %al,%eax
f0127ee8:	c1 e0 04             	shl    $0x4,%eax
f0127eeb:	89 c2                	mov    %eax,%edx
f0127eed:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0127ef3:	01 d0                	add    %edx,%eax
f0127ef5:	48                   	dec    %eax
f0127ef6:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0127efc:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0127f02:	ba 00 00 00 00       	mov    $0x0,%edx
f0127f07:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0127f0d:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0127f13:	29 d0                	sub    %edx,%eax
f0127f15:	01 d8                	add    %ebx,%eax
f0127f17:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0127f1c:	39 c1                	cmp    %eax,%ecx
f0127f1e:	74 17                	je     f0127f37 <test_kexpand+0x64b>
f0127f20:	83 ec 04             	sub    $0x4,%esp
f0127f23:	68 40 b1 13 f0       	push   $0xf013b140
f0127f28:	68 71 0b 00 00       	push   $0xb71
f0127f2d:	68 5a b0 13 f0       	push   $0xf013b05a
f0127f32:	e8 ce 82 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127f37:	e8 8c be fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127f3c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127f3f:	74 17                	je     f0127f58 <test_kexpand+0x66c>
f0127f41:	83 ec 04             	sub    $0x4,%esp
f0127f44:	68 74 b0 13 f0       	push   $0xf013b074
f0127f49:	68 72 0b 00 00       	push   $0xb72
f0127f4e:	68 5a b0 13 f0       	push   $0xf013b05a
f0127f53:	e8 ad 82 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127f58:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127f5b:	e8 3d 4c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127f60:	29 c3                	sub    %eax,%ebx
f0127f62:	89 d8                	mov    %ebx,%eax
f0127f64:	83 f8 02             	cmp    $0x2,%eax
f0127f67:	74 17                	je     f0127f80 <test_kexpand+0x694>
f0127f69:	83 ec 04             	sub    $0x4,%esp
f0127f6c:	68 dc b0 13 f0       	push   $0xf013b0dc
f0127f71:	68 73 0b 00 00       	push   $0xb73
f0127f76:	68 5a b0 13 f0       	push   $0xf013b05a
f0127f7b:	e8 85 82 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0127f80:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f0127f87:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0127f8a:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0127f90:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0127f93:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127f9a:	eb 0e                	jmp    f0127faa <test_kexpand+0x6be>
		{
			ptr[i] = 4 ;
f0127f9c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127f9f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127fa2:	01 d0                	add    %edx,%eax
f0127fa4:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0127fa7:	ff 45 f4             	incl   -0xc(%ebp)
f0127faa:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0127fb0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127fb3:	7f e7                	jg     f0127f9c <test_kexpand+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0127fb5:	e8 e3 4b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0127fba:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127fbd:	e8 06 be fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127fc2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0127fc5:	83 ec 0c             	sub    $0xc,%esp
f0127fc8:	68 00 fc 2f 00       	push   $0x2ffc00
f0127fcd:	e8 b3 f8 fd ff       	call   f0107885 <kmalloc>
f0127fd2:	83 c4 10             	add    $0x10,%esp
f0127fd5:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127fdb:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0127fe1:	89 c1                	mov    %eax,%ecx
f0127fe3:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0127fea:	10 00 00 
f0127fed:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0127ff3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127ff8:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0127ffe:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128004:	ba 00 00 00 00       	mov    $0x0,%edx
f0128009:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f012800f:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128015:	29 d0                	sub    %edx,%eax
f0128017:	89 c3                	mov    %eax,%ebx
f0128019:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0128020:	10 00 00 
f0128023:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0128028:	0f b6 d0             	movzbl %al,%edx
f012802b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0128031:	01 d0                	add    %edx,%eax
f0128033:	48                   	dec    %eax
f0128034:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f012803a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128040:	ba 00 00 00 00       	mov    $0x0,%edx
f0128045:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f012804b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128051:	29 d0                	sub    %edx,%eax
f0128053:	01 c3                	add    %eax,%ebx
f0128055:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f012805c:	10 00 00 
f012805f:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0128064:	0f b6 c0             	movzbl %al,%eax
f0128067:	c1 e0 04             	shl    $0x4,%eax
f012806a:	89 c2                	mov    %eax,%edx
f012806c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0128072:	01 d0                	add    %edx,%eax
f0128074:	48                   	dec    %eax
f0128075:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f012807b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0128081:	ba 00 00 00 00       	mov    $0x0,%edx
f0128086:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f012808c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0128092:	29 d0                	sub    %edx,%eax
f0128094:	01 d8                	add    %ebx,%eax
f0128096:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012809b:	39 c1                	cmp    %eax,%ecx
f012809d:	74 17                	je     f01280b6 <test_kexpand+0x7ca>
f012809f:	83 ec 04             	sub    $0x4,%esp
f01280a2:	68 40 b1 13 f0       	push   $0xf013b140
f01280a7:	68 7f 0b 00 00       	push   $0xb7f
f01280ac:	68 5a b0 13 f0       	push   $0xf013b05a
f01280b1:	e8 4f 81 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01280b6:	e8 0d bd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01280bb:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01280be:	74 17                	je     f01280d7 <test_kexpand+0x7eb>
f01280c0:	83 ec 04             	sub    $0x4,%esp
f01280c3:	68 74 b0 13 f0       	push   $0xf013b074
f01280c8:	68 80 0b 00 00       	push   $0xb80
f01280cd:	68 5a b0 13 f0       	push   $0xf013b05a
f01280d2:	e8 2e 81 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01280d7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01280da:	e8 be 4a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01280df:	29 c3                	sub    %eax,%ebx
f01280e1:	89 d8                	mov    %ebx,%eax
f01280e3:	3d 00 03 00 00       	cmp    $0x300,%eax
f01280e8:	74 17                	je     f0128101 <test_kexpand+0x815>
f01280ea:	83 ec 04             	sub    $0x4,%esp
f01280ed:	68 dc b0 13 f0       	push   $0xf013b0dc
f01280f2:	68 81 0b 00 00       	push   $0xb81
f01280f7:	68 5a b0 13 f0       	push   $0xf013b05a
f01280fc:	e8 04 81 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0128101:	c7 85 d0 fe ff ff ff 	movl   $0x2ffbff,-0x130(%ebp)
f0128108:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f012810b:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0128111:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0128114:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012811b:	eb 0e                	jmp    f012812b <test_kexpand+0x83f>
		{
			ptr[i] = 5 ;
f012811d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128120:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128123:	01 d0                	add    %edx,%eax
f0128125:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0128128:	ff 45 f4             	incl   -0xc(%ebp)
f012812b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0128131:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128134:	7f e7                	jg     f012811d <test_kexpand+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0128136:	e8 62 4a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012813b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012813e:	e8 85 bc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128143:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0128146:	83 ec 0c             	sub    $0xc,%esp
f0128149:	68 00 00 60 00       	push   $0x600000
f012814e:	e8 32 f7 fd ff       	call   f0107885 <kmalloc>
f0128153:	83 c4 10             	add    $0x10,%esp
f0128156:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012815c:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0128162:	89 c1                	mov    %eax,%ecx
f0128164:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f012816b:	10 00 00 
f012816e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0128174:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128179:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f012817f:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128185:	ba 00 00 00 00       	mov    $0x0,%edx
f012818a:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0128190:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128196:	29 d0                	sub    %edx,%eax
f0128198:	89 c3                	mov    %eax,%ebx
f012819a:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f01281a1:	10 00 00 
f01281a4:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01281a9:	0f b6 d0             	movzbl %al,%edx
f01281ac:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01281b2:	01 d0                	add    %edx,%eax
f01281b4:	48                   	dec    %eax
f01281b5:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01281bb:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01281c1:	ba 00 00 00 00       	mov    $0x0,%edx
f01281c6:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01281cc:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01281d2:	29 d0                	sub    %edx,%eax
f01281d4:	01 c3                	add    %eax,%ebx
f01281d6:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01281dd:	10 00 00 
f01281e0:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01281e5:	0f b6 c0             	movzbl %al,%eax
f01281e8:	c1 e0 04             	shl    $0x4,%eax
f01281eb:	89 c2                	mov    %eax,%edx
f01281ed:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01281f3:	01 d0                	add    %edx,%eax
f01281f5:	48                   	dec    %eax
f01281f6:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01281fc:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128202:	ba 00 00 00 00       	mov    $0x0,%edx
f0128207:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f012820d:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128213:	29 d0                	sub    %edx,%eax
f0128215:	01 d8                	add    %ebx,%eax
f0128217:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012821c:	39 c1                	cmp    %eax,%ecx
f012821e:	74 17                	je     f0128237 <test_kexpand+0x94b>
f0128220:	83 ec 04             	sub    $0x4,%esp
f0128223:	68 40 b1 13 f0       	push   $0xf013b140
f0128228:	68 8d 0b 00 00       	push   $0xb8d
f012822d:	68 5a b0 13 f0       	push   $0xf013b05a
f0128232:	e8 ce 7f fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128237:	e8 8c bb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012823c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012823f:	74 17                	je     f0128258 <test_kexpand+0x96c>
f0128241:	83 ec 04             	sub    $0x4,%esp
f0128244:	68 74 b0 13 f0       	push   $0xf013b074
f0128249:	68 8e 0b 00 00       	push   $0xb8e
f012824e:	68 5a b0 13 f0       	push   $0xf013b05a
f0128253:	e8 ad 7f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128258:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012825b:	e8 3d 49 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128260:	29 c3                	sub    %eax,%ebx
f0128262:	89 d8                	mov    %ebx,%eax
f0128264:	3d 00 06 00 00       	cmp    $0x600,%eax
f0128269:	74 17                	je     f0128282 <test_kexpand+0x996>
f012826b:	83 ec 04             	sub    $0x4,%esp
f012826e:	68 dc b0 13 f0       	push   $0xf013b0dc
f0128273:	68 8f 0b 00 00       	push   $0xb8f
f0128278:	68 5a b0 13 f0       	push   $0xf013b05a
f012827d:	e8 83 7f fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0128282:	c7 85 d4 fe ff ff ff 	movl   $0x17ffff,-0x12c(%ebp)
f0128289:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f012828c:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0128292:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0128298:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012829f:	eb 1a                	jmp    f01282bb <test_kexpand+0x9cf>
		{
			arr[i] = i ;
f01282a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01282a4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01282ab:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01282b1:	01 c2                	add    %eax,%edx
f01282b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01282b6:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f01282b8:	ff 45 f4             	incl   -0xc(%ebp)
f01282bb:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01282c1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01282c4:	7d db                	jge    f01282a1 <test_kexpand+0x9b5>
			arr[i] = i ;
		}
	}

	//Expand last allocated variable to 7 MB instead of 6 MB
	int newLastIndex = (7*Mega)/sizeof(uint32) - 1;
f01282c6:	c7 85 24 ff ff ff ff 	movl   $0x1bffff,-0xdc(%ebp)
f01282cd:	ff 1b 00 
	{
		freeFrames = sys_calculate_free_frames() ;
f01282d0:	e8 c8 48 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01282d5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01282d8:	e8 eb ba fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01282dd:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(7*Mega) ;
f01282e0:	83 ec 0c             	sub    $0xc,%esp
f01282e3:	68 00 00 70 00       	push   $0x700000
f01282e8:	e8 3b f8 fd ff       	call   f0107b28 <kexpand>
f01282ed:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01282f0:	e8 d3 ba fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01282f5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01282f8:	74 19                	je     f0128313 <test_kexpand+0xa27>
f01282fa:	68 f4 bd 13 f0       	push   $0xf013bdf4
f01282ff:	68 25 be 13 f0       	push   $0xf013be25
f0128304:	68 a0 0b 00 00       	push   $0xba0
f0128309:	68 5a b0 13 f0       	push   $0xf013b05a
f012830e:	e8 f2 7e fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 256) ;
f0128313:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128316:	e8 82 48 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012831b:	29 c3                	sub    %eax,%ebx
f012831d:	89 d8                	mov    %ebx,%eax
f012831f:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128324:	74 19                	je     f012833f <test_kexpand+0xa53>
f0128326:	68 3c be 13 f0       	push   $0xf013be3c
f012832b:	68 25 be 13 f0       	push   $0xf013be25
f0128330:	68 a1 0b 00 00       	push   $0xba1
f0128335:	68 5a b0 13 f0       	push   $0xf013b05a
f012833a:	e8 c6 7e fd ff       	call   f0100205 <_panic>

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f012833f:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0128345:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0128348:	eb 1a                	jmp    f0128364 <test_kexpand+0xa78>
		{
			arr[i] = i ;
f012834a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012834d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128354:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012835a:	01 c2                	add    %eax,%edx
f012835c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012835f:	89 02                	mov    %eax,(%edx)
		kexpand(7*Mega) ;

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
		assert(freeFrames - sys_calculate_free_frames() == 256) ;

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0128361:	ff 45 f4             	incl   -0xc(%ebp)
f0128364:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128367:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f012836d:	7c db                	jl     f012834a <test_kexpand+0xa5e>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f012836f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128376:	eb 37                	jmp    f01283af <test_kexpand+0xac3>
		{
			assert(arr[i] ==i);
f0128378:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012837b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128382:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128388:	01 d0                	add    %edx,%eax
f012838a:	8b 10                	mov    (%eax),%edx
f012838c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012838f:	39 c2                	cmp    %eax,%edx
f0128391:	74 19                	je     f01283ac <test_kexpand+0xac0>
f0128393:	68 6c be 13 f0       	push   $0xf013be6c
f0128398:	68 25 be 13 f0       	push   $0xf013be25
f012839d:	68 ad 0b 00 00       	push   $0xbad
f01283a2:	68 5a b0 13 f0       	push   $0xf013b05a
f01283a7:	e8 59 7e fd ff       	call   f0100205 <_panic>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f01283ac:	ff 45 f4             	incl   -0xc(%ebp)
f01283af:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01283b2:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f01283b8:	7c be                	jl     f0128378 <test_kexpand+0xa8c>
		}
	}

	//Expand it again to 10 MB instead of 7 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f01283ba:	e8 de 47 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01283bf:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01283c2:	e8 01 ba fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01283c7:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(10*Mega) ;
f01283ca:	83 ec 0c             	sub    $0xc,%esp
f01283cd:	68 00 00 a0 00       	push   $0xa00000
f01283d2:	e8 51 f7 fd ff       	call   f0107b28 <kexpand>
f01283d7:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01283da:	e8 e9 b9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01283df:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01283e2:	74 19                	je     f01283fd <test_kexpand+0xb11>
f01283e4:	68 f4 bd 13 f0       	push   $0xf013bdf4
f01283e9:	68 25 be 13 f0       	push   $0xf013be25
f01283ee:	68 b8 0b 00 00       	push   $0xbb8
f01283f3:	68 5a b0 13 f0       	push   $0xf013b05a
f01283f8:	e8 08 7e fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 768) ;
f01283fd:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128400:	e8 98 47 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128405:	29 c3                	sub    %eax,%ebx
f0128407:	89 d8                	mov    %ebx,%eax
f0128409:	3d 00 03 00 00       	cmp    $0x300,%eax
f012840e:	74 19                	je     f0128429 <test_kexpand+0xb3d>
f0128410:	68 78 be 13 f0       	push   $0xf013be78
f0128415:	68 25 be 13 f0       	push   $0xf013be25
f012841a:	68 b9 0b 00 00       	push   $0xbb9
f012841f:	68 5a b0 13 f0       	push   $0xf013b05a
f0128424:	e8 dc 7d fd ff       	call   f0100205 <_panic>


	//Allocate after expanding last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0128429:	e8 6f 47 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012842e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128431:	e8 92 b9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128436:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0128439:	83 ec 0c             	sub    $0xc,%esp
f012843c:	68 00 00 40 00       	push   $0x400000
f0128441:	e8 3f f4 fd ff       	call   f0107885 <kmalloc>
f0128446:	83 c4 10             	add    $0x10,%esp
f0128449:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)

		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 10*Mega)) panic("Wrong start address after kexpand()... ");
f012844f:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0128455:	89 c1                	mov    %eax,%ecx
f0128457:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f012845e:	10 00 00 
f0128461:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0128467:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012846c:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0128472:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128478:	ba 00 00 00 00       	mov    $0x0,%edx
f012847d:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0128483:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128489:	29 d0                	sub    %edx,%eax
f012848b:	89 c3                	mov    %eax,%ebx
f012848d:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0128494:	10 00 00 
f0128497:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012849c:	0f b6 d0             	movzbl %al,%edx
f012849f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01284a5:	01 d0                	add    %edx,%eax
f01284a7:	48                   	dec    %eax
f01284a8:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f01284ae:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01284b4:	ba 00 00 00 00       	mov    $0x0,%edx
f01284b9:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f01284bf:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01284c5:	29 d0                	sub    %edx,%eax
f01284c7:	01 c3                	add    %eax,%ebx
f01284c9:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01284d0:	10 00 00 
f01284d3:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01284d8:	0f b6 c0             	movzbl %al,%eax
f01284db:	c1 e0 04             	shl    $0x4,%eax
f01284de:	89 c2                	mov    %eax,%edx
f01284e0:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01284e6:	01 d0                	add    %edx,%eax
f01284e8:	48                   	dec    %eax
f01284e9:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01284ef:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01284f5:	ba 00 00 00 00       	mov    $0x0,%edx
f01284fa:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0128500:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128506:	29 d0                	sub    %edx,%eax
f0128508:	01 d8                	add    %ebx,%eax
f012850a:	2d 00 80 ef 08       	sub    $0x8ef8000,%eax
f012850f:	39 c1                	cmp    %eax,%ecx
f0128511:	74 17                	je     f012852a <test_kexpand+0xc3e>
f0128513:	83 ec 04             	sub    $0x4,%esp
f0128516:	68 a8 be 13 f0       	push   $0xf013bea8
f012851b:	68 c4 0b 00 00       	push   $0xbc4
f0128520:	68 5a b0 13 f0       	push   $0xf013b05a
f0128525:	e8 db 7c fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012852a:	e8 99 b8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012852f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128532:	74 17                	je     f012854b <test_kexpand+0xc5f>
f0128534:	83 ec 04             	sub    $0x4,%esp
f0128537:	68 74 b0 13 f0       	push   $0xf013b074
f012853c:	68 c5 0b 00 00       	push   $0xbc5
f0128541:	68 5a b0 13 f0       	push   $0xf013b05a
f0128546:	e8 ba 7c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f012854b:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012854e:	e8 4a 46 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128553:	29 c3                	sub    %eax,%ebx
f0128555:	89 d8                	mov    %ebx,%eax
f0128557:	3d 00 04 00 00       	cmp    $0x400,%eax
f012855c:	74 17                	je     f0128575 <test_kexpand+0xc89>
f012855e:	83 ec 04             	sub    $0x4,%esp
f0128561:	68 dc b0 13 f0       	push   $0xf013b0dc
f0128566:	68 c6 0b 00 00       	push   $0xbc6
f012856b:	68 5a b0 13 f0       	push   $0xf013b05a
f0128570:	e8 90 7c fd ff       	call   f0100205 <_panic>
	}

	//kfree the expanded variable
	{
		//kfree 10 MB (expanded)
		freeFrames = sys_calculate_free_frames() ;
f0128575:	e8 23 46 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012857a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012857d:	e8 46 b8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128582:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0128585:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012858b:	83 ec 0c             	sub    $0xc,%esp
f012858e:	50                   	push   %eax
f012858f:	e8 bc f3 fd ff       	call   f0107950 <kfree>
f0128594:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128597:	e8 2c b8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012859c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012859f:	74 17                	je     f01285b8 <test_kexpand+0xccc>
f01285a1:	83 ec 04             	sub    $0x4,%esp
f01285a4:	68 74 b0 13 f0       	push   $0xf013b074
f01285a9:	68 cf 0b 00 00       	push   $0xbcf
f01285ae:	68 5a b0 13 f0       	push   $0xf013b05a
f01285b3:	e8 4d 7c fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 10*Mega/PAGE_SIZE) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01285b8:	e8 e0 45 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01285bd:	89 c2                	mov    %eax,%edx
f01285bf:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01285c2:	29 c2                	sub    %eax,%edx
f01285c4:	89 d0                	mov    %edx,%eax
f01285c6:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f01285cb:	74 17                	je     f01285e4 <test_kexpand+0xcf8>
f01285cd:	83 ec 04             	sub    $0x4,%esp
f01285d0:	68 0c b9 13 f0       	push   $0xf013b90c
f01285d5:	68 d0 0b 00 00       	push   $0xbd0
f01285da:	68 5a b0 13 f0       	push   $0xf013b05a
f01285df:	e8 21 7c fd ff       	call   f0100205 <_panic>
	}

	//Expand last allocated variable to 4 MB + 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f01285e4:	e8 b4 45 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01285e9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01285ec:	e8 d7 b7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01285f1:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(4*Mega + 20*kilo) ;
f01285f4:	83 ec 0c             	sub    $0xc,%esp
f01285f7:	68 00 50 40 00       	push   $0x405000
f01285fc:	e8 27 f5 fd ff       	call   f0107b28 <kexpand>
f0128601:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128604:	e8 bf b7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128609:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012860c:	74 19                	je     f0128627 <test_kexpand+0xd3b>
f012860e:	68 f4 bd 13 f0       	push   $0xf013bdf4
f0128613:	68 25 be 13 f0       	push   $0xf013be25
f0128618:	68 da 0b 00 00       	push   $0xbda
f012861d:	68 5a b0 13 f0       	push   $0xf013b05a
f0128622:	e8 de 7b fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames()  == 5) ;
f0128627:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012862a:	e8 6e 45 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012862f:	29 c3                	sub    %eax,%ebx
f0128631:	89 d8                	mov    %ebx,%eax
f0128633:	83 f8 05             	cmp    $0x5,%eax
f0128636:	74 19                	je     f0128651 <test_kexpand+0xd65>
f0128638:	68 d0 be 13 f0       	push   $0xf013bed0
f012863d:	68 25 be 13 f0       	push   $0xf013be25
f0128642:	68 db 0b 00 00       	push   $0xbdb
f0128647:	68 5a b0 13 f0       	push   $0xf013b05a
f012864c:	e8 b4 7b fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0128651:	83 ec 0c             	sub    $0xc,%esp
f0128654:	68 b8 bd 13 f0       	push   $0xf013bdb8
f0128659:	e8 b0 86 fd ff       	call   f0100d0e <cprintf>
f012865e:	83 c4 10             	add    $0x10,%esp

	return 1;
f0128661:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0128666:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0128669:	5b                   	pop    %ebx
f012866a:	5f                   	pop    %edi
f012866b:	5d                   	pop    %ebp
f012866c:	c3                   	ret    

f012866d <test_kshrink>:

extern void kshrink(uint32 newSize) ;

int test_kshrink()
{
f012866d:	55                   	push   %ebp
f012866e:	89 e5                	mov    %esp,%ebp
f0128670:	57                   	push   %edi
f0128671:	53                   	push   %ebx
f0128672:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	char minByte = 1<<7;
f0128678:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f012867c:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0128680:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0128686:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f012868c:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0128693:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f012869a:	e8 fe 44 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012869f:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01286a2:	8d 95 a4 fe ff ff    	lea    -0x15c(%ebp),%edx
f01286a8:	b9 14 00 00 00       	mov    $0x14,%ecx
f01286ad:	b8 00 00 00 00       	mov    $0x0,%eax
f01286b2:	89 d7                	mov    %edx,%edi
f01286b4:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f01286b6:	8d 95 54 fe ff ff    	lea    -0x1ac(%ebp),%edx
f01286bc:	b9 14 00 00 00       	mov    $0x14,%ecx
f01286c1:	b8 00 00 00 00       	mov    $0x0,%eax
f01286c6:	89 d7                	mov    %edx,%edi
f01286c8:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01286ca:	e8 ce 44 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01286cf:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01286d2:	e8 f1 b6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01286d7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01286da:	83 ec 0c             	sub    $0xc,%esp
f01286dd:	68 00 fc 1f 00       	push   $0x1ffc00
f01286e2:	e8 9e f1 fd ff       	call   f0107885 <kmalloc>
f01286e7:	83 c4 10             	add    $0x10,%esp
f01286ea:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01286f0:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01286f6:	89 c1                	mov    %eax,%ecx
f01286f8:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f01286ff:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0128702:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128707:	89 45 d0             	mov    %eax,-0x30(%ebp)
f012870a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012870d:	ba 00 00 00 00       	mov    $0x0,%edx
f0128712:	f7 75 d4             	divl   -0x2c(%ebp)
f0128715:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0128718:	29 d0                	sub    %edx,%eax
f012871a:	89 c3                	mov    %eax,%ebx
f012871c:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0128723:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0128728:	0f b6 d0             	movzbl %al,%edx
f012872b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012872e:	01 d0                	add    %edx,%eax
f0128730:	48                   	dec    %eax
f0128731:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0128734:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0128737:	ba 00 00 00 00       	mov    $0x0,%edx
f012873c:	f7 75 cc             	divl   -0x34(%ebp)
f012873f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0128742:	29 d0                	sub    %edx,%eax
f0128744:	01 c3                	add    %eax,%ebx
f0128746:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f012874d:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0128752:	0f b6 c0             	movzbl %al,%eax
f0128755:	c1 e0 04             	shl    $0x4,%eax
f0128758:	89 c2                	mov    %eax,%edx
f012875a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012875d:	01 d0                	add    %edx,%eax
f012875f:	48                   	dec    %eax
f0128760:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0128763:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0128766:	ba 00 00 00 00       	mov    $0x0,%edx
f012876b:	f7 75 c4             	divl   -0x3c(%ebp)
f012876e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0128771:	29 d0                	sub    %edx,%eax
f0128773:	01 d8                	add    %ebx,%eax
f0128775:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012877a:	39 c1                	cmp    %eax,%ecx
f012877c:	74 17                	je     f0128795 <test_kshrink+0x128>
f012877e:	83 ec 04             	sub    $0x4,%esp
f0128781:	68 40 b1 13 f0       	push   $0xf013b140
f0128786:	68 01 0c 00 00       	push   $0xc01
f012878b:	68 5a b0 13 f0       	push   $0xf013b05a
f0128790:	e8 70 7a fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128795:	e8 2e b6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012879a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012879d:	74 17                	je     f01287b6 <test_kshrink+0x149>
f012879f:	83 ec 04             	sub    $0x4,%esp
f01287a2:	68 74 b0 13 f0       	push   $0xf013b074
f01287a7:	68 02 0c 00 00       	push   $0xc02
f01287ac:	68 5a b0 13 f0       	push   $0xf013b05a
f01287b1:	e8 4f 7a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01287b6:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01287b9:	e8 df 43 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01287be:	29 c3                	sub    %eax,%ebx
f01287c0:	89 d8                	mov    %ebx,%eax
f01287c2:	3d 00 02 00 00       	cmp    $0x200,%eax
f01287c7:	74 17                	je     f01287e0 <test_kshrink+0x173>
f01287c9:	83 ec 04             	sub    $0x4,%esp
f01287cc:	68 dc b0 13 f0       	push   $0xf013b0dc
f01287d1:	68 03 0c 00 00       	push   $0xc03
f01287d6:	68 5a b0 13 f0       	push   $0xf013b05a
f01287db:	e8 25 7a fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f01287e0:	c7 85 a4 fe ff ff ff 	movl   $0x1ffbff,-0x15c(%ebp)
f01287e7:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01287ea:	e8 ae 43 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01287ef:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01287f2:	e8 d1 b5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01287f7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01287fa:	83 ec 0c             	sub    $0xc,%esp
f01287fd:	68 00 fc 1f 00       	push   $0x1ffc00
f0128802:	e8 7e f0 fd ff       	call   f0107885 <kmalloc>
f0128807:	83 c4 10             	add    $0x10,%esp
f012880a:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128810:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0128816:	89 c1                	mov    %eax,%ecx
f0128818:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f012881f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0128822:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128827:	89 45 b8             	mov    %eax,-0x48(%ebp)
f012882a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012882d:	ba 00 00 00 00       	mov    $0x0,%edx
f0128832:	f7 75 bc             	divl   -0x44(%ebp)
f0128835:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0128838:	29 d0                	sub    %edx,%eax
f012883a:	89 c3                	mov    %eax,%ebx
f012883c:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0128843:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0128848:	0f b6 d0             	movzbl %al,%edx
f012884b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012884e:	01 d0                	add    %edx,%eax
f0128850:	48                   	dec    %eax
f0128851:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0128854:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0128857:	ba 00 00 00 00       	mov    $0x0,%edx
f012885c:	f7 75 b4             	divl   -0x4c(%ebp)
f012885f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0128862:	29 d0                	sub    %edx,%eax
f0128864:	01 c3                	add    %eax,%ebx
f0128866:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012886d:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0128872:	0f b6 c0             	movzbl %al,%eax
f0128875:	c1 e0 04             	shl    $0x4,%eax
f0128878:	89 c2                	mov    %eax,%edx
f012887a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012887d:	01 d0                	add    %edx,%eax
f012887f:	48                   	dec    %eax
f0128880:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0128883:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0128886:	ba 00 00 00 00       	mov    $0x0,%edx
f012888b:	f7 75 ac             	divl   -0x54(%ebp)
f012888e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0128891:	29 d0                	sub    %edx,%eax
f0128893:	01 d8                	add    %ebx,%eax
f0128895:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012889a:	39 c1                	cmp    %eax,%ecx
f012889c:	74 17                	je     f01288b5 <test_kshrink+0x248>
f012889e:	83 ec 04             	sub    $0x4,%esp
f01288a1:	68 40 b1 13 f0       	push   $0xf013b140
f01288a6:	68 0a 0c 00 00       	push   $0xc0a
f01288ab:	68 5a b0 13 f0       	push   $0xf013b05a
f01288b0:	e8 50 79 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01288b5:	e8 0e b5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01288ba:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01288bd:	74 17                	je     f01288d6 <test_kshrink+0x269>
f01288bf:	83 ec 04             	sub    $0x4,%esp
f01288c2:	68 74 b0 13 f0       	push   $0xf013b074
f01288c7:	68 0b 0c 00 00       	push   $0xc0b
f01288cc:	68 5a b0 13 f0       	push   $0xf013b05a
f01288d1:	e8 2f 79 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01288d6:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01288d9:	e8 bf 42 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01288de:	29 c3                	sub    %eax,%ebx
f01288e0:	89 d8                	mov    %ebx,%eax
f01288e2:	3d 00 02 00 00       	cmp    $0x200,%eax
f01288e7:	74 17                	je     f0128900 <test_kshrink+0x293>
f01288e9:	83 ec 04             	sub    $0x4,%esp
f01288ec:	68 dc b0 13 f0       	push   $0xf013b0dc
f01288f1:	68 0c 0c 00 00       	push   $0xc0c
f01288f6:	68 5a b0 13 f0       	push   $0xf013b05a
f01288fb:	e8 05 79 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0128900:	c7 85 a8 fe ff ff ff 	movl   $0x1ffbff,-0x158(%ebp)
f0128907:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012890a:	e8 8e 42 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012890f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128912:	e8 b1 b4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128917:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012891a:	83 ec 0c             	sub    $0xc,%esp
f012891d:	68 00 08 00 00       	push   $0x800
f0128922:	e8 5e ef fd ff       	call   f0107885 <kmalloc>
f0128927:	83 c4 10             	add    $0x10,%esp
f012892a:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128930:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0128936:	89 c1                	mov    %eax,%ecx
f0128938:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012893f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0128942:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128947:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012894a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012894d:	ba 00 00 00 00       	mov    $0x0,%edx
f0128952:	f7 75 a4             	divl   -0x5c(%ebp)
f0128955:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0128958:	29 d0                	sub    %edx,%eax
f012895a:	89 c3                	mov    %eax,%ebx
f012895c:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0128963:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0128968:	0f b6 d0             	movzbl %al,%edx
f012896b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012896e:	01 d0                	add    %edx,%eax
f0128970:	48                   	dec    %eax
f0128971:	89 45 98             	mov    %eax,-0x68(%ebp)
f0128974:	8b 45 98             	mov    -0x68(%ebp),%eax
f0128977:	ba 00 00 00 00       	mov    $0x0,%edx
f012897c:	f7 75 9c             	divl   -0x64(%ebp)
f012897f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0128982:	29 d0                	sub    %edx,%eax
f0128984:	01 c3                	add    %eax,%ebx
f0128986:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012898d:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0128992:	0f b6 c0             	movzbl %al,%eax
f0128995:	c1 e0 04             	shl    $0x4,%eax
f0128998:	89 c2                	mov    %eax,%edx
f012899a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012899d:	01 d0                	add    %edx,%eax
f012899f:	48                   	dec    %eax
f01289a0:	89 45 90             	mov    %eax,-0x70(%ebp)
f01289a3:	8b 45 90             	mov    -0x70(%ebp),%eax
f01289a6:	ba 00 00 00 00       	mov    $0x0,%edx
f01289ab:	f7 75 94             	divl   -0x6c(%ebp)
f01289ae:	8b 45 90             	mov    -0x70(%ebp),%eax
f01289b1:	29 d0                	sub    %edx,%eax
f01289b3:	01 d8                	add    %ebx,%eax
f01289b5:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01289ba:	39 c1                	cmp    %eax,%ecx
f01289bc:	74 17                	je     f01289d5 <test_kshrink+0x368>
f01289be:	83 ec 04             	sub    $0x4,%esp
f01289c1:	68 40 b1 13 f0       	push   $0xf013b140
f01289c6:	68 13 0c 00 00       	push   $0xc13
f01289cb:	68 5a b0 13 f0       	push   $0xf013b05a
f01289d0:	e8 30 78 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01289d5:	e8 ee b3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01289da:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01289dd:	74 17                	je     f01289f6 <test_kshrink+0x389>
f01289df:	83 ec 04             	sub    $0x4,%esp
f01289e2:	68 74 b0 13 f0       	push   $0xf013b074
f01289e7:	68 14 0c 00 00       	push   $0xc14
f01289ec:	68 5a b0 13 f0       	push   $0xf013b05a
f01289f1:	e8 0f 78 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01289f6:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01289f9:	e8 9f 41 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01289fe:	29 c3                	sub    %eax,%ebx
f0128a00:	89 d8                	mov    %ebx,%eax
f0128a02:	83 f8 01             	cmp    $0x1,%eax
f0128a05:	74 17                	je     f0128a1e <test_kshrink+0x3b1>
f0128a07:	83 ec 04             	sub    $0x4,%esp
f0128a0a:	68 dc b0 13 f0       	push   $0xf013b0dc
f0128a0f:	68 15 0c 00 00       	push   $0xc15
f0128a14:	68 5a b0 13 f0       	push   $0xf013b05a
f0128a19:	e8 e7 77 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0128a1e:	c7 85 ac fe ff ff ff 	movl   $0x7ff,-0x154(%ebp)
f0128a25:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0128a28:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0128a2e:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0128a31:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128a38:	eb 0e                	jmp    f0128a48 <test_kshrink+0x3db>
		{
			ptr[i] = 2 ;
f0128a3a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128a3d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128a40:	01 d0                	add    %edx,%eax
f0128a42:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0128a45:	ff 45 f4             	incl   -0xc(%ebp)
f0128a48:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0128a4e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128a51:	7f e7                	jg     f0128a3a <test_kshrink+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0128a53:	e8 45 41 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128a58:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128a5b:	e8 68 b3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128a60:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0128a63:	83 ec 0c             	sub    $0xc,%esp
f0128a66:	68 00 08 00 00       	push   $0x800
f0128a6b:	e8 15 ee fd ff       	call   f0107885 <kmalloc>
f0128a70:	83 c4 10             	add    $0x10,%esp
f0128a73:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128a79:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0128a7f:	89 c1                	mov    %eax,%ecx
f0128a81:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0128a88:	8b 45 88             	mov    -0x78(%ebp),%eax
f0128a8b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128a90:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0128a93:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0128a96:	ba 00 00 00 00       	mov    $0x0,%edx
f0128a9b:	f7 75 88             	divl   -0x78(%ebp)
f0128a9e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0128aa1:	29 d0                	sub    %edx,%eax
f0128aa3:	89 c3                	mov    %eax,%ebx
f0128aa5:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0128aac:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0128ab1:	0f b6 d0             	movzbl %al,%edx
f0128ab4:	8b 45 80             	mov    -0x80(%ebp),%eax
f0128ab7:	01 d0                	add    %edx,%eax
f0128ab9:	48                   	dec    %eax
f0128aba:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0128ac0:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0128ac6:	ba 00 00 00 00       	mov    $0x0,%edx
f0128acb:	f7 75 80             	divl   -0x80(%ebp)
f0128ace:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0128ad4:	29 d0                	sub    %edx,%eax
f0128ad6:	01 c3                	add    %eax,%ebx
f0128ad8:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0128adf:	10 00 00 
f0128ae2:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0128ae7:	0f b6 c0             	movzbl %al,%eax
f0128aea:	c1 e0 04             	shl    $0x4,%eax
f0128aed:	89 c2                	mov    %eax,%edx
f0128aef:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0128af5:	01 d0                	add    %edx,%eax
f0128af7:	48                   	dec    %eax
f0128af8:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0128afe:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0128b04:	ba 00 00 00 00       	mov    $0x0,%edx
f0128b09:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0128b0f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0128b15:	29 d0                	sub    %edx,%eax
f0128b17:	01 d8                	add    %ebx,%eax
f0128b19:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0128b1e:	39 c1                	cmp    %eax,%ecx
f0128b20:	74 17                	je     f0128b39 <test_kshrink+0x4cc>
f0128b22:	83 ec 04             	sub    $0x4,%esp
f0128b25:	68 40 b1 13 f0       	push   $0xf013b140
f0128b2a:	68 21 0c 00 00       	push   $0xc21
f0128b2f:	68 5a b0 13 f0       	push   $0xf013b05a
f0128b34:	e8 cc 76 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128b39:	e8 8a b2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128b3e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128b41:	74 17                	je     f0128b5a <test_kshrink+0x4ed>
f0128b43:	83 ec 04             	sub    $0x4,%esp
f0128b46:	68 74 b0 13 f0       	push   $0xf013b074
f0128b4b:	68 22 0c 00 00       	push   $0xc22
f0128b50:	68 5a b0 13 f0       	push   $0xf013b05a
f0128b55:	e8 ab 76 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128b5a:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128b5d:	e8 3b 40 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128b62:	29 c3                	sub    %eax,%ebx
f0128b64:	89 d8                	mov    %ebx,%eax
f0128b66:	83 f8 01             	cmp    $0x1,%eax
f0128b69:	74 17                	je     f0128b82 <test_kshrink+0x515>
f0128b6b:	83 ec 04             	sub    $0x4,%esp
f0128b6e:	68 dc b0 13 f0       	push   $0xf013b0dc
f0128b73:	68 23 0c 00 00       	push   $0xc23
f0128b78:	68 5a b0 13 f0       	push   $0xf013b05a
f0128b7d:	e8 83 76 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0128b82:	c7 85 b0 fe ff ff ff 	movl   $0x7ff,-0x150(%ebp)
f0128b89:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0128b8c:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0128b92:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0128b95:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128b9c:	eb 0e                	jmp    f0128bac <test_kshrink+0x53f>
		{
			ptr[i] = 3 ;
f0128b9e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128ba1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128ba4:	01 d0                	add    %edx,%eax
f0128ba6:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0128ba9:	ff 45 f4             	incl   -0xc(%ebp)
f0128bac:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0128bb2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128bb5:	7f e7                	jg     f0128b9e <test_kshrink+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0128bb7:	e8 e1 3f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128bbc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128bbf:	e8 04 b2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128bc4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0128bc7:	83 ec 0c             	sub    $0xc,%esp
f0128bca:	68 00 1c 00 00       	push   $0x1c00
f0128bcf:	e8 b1 ec fd ff       	call   f0107885 <kmalloc>
f0128bd4:	83 c4 10             	add    $0x10,%esp
f0128bd7:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128bdd:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0128be3:	89 c1                	mov    %eax,%ecx
f0128be5:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0128bec:	10 00 00 
f0128bef:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0128bf5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128bfa:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0128c00:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128c06:	ba 00 00 00 00       	mov    $0x0,%edx
f0128c0b:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0128c11:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128c17:	29 d0                	sub    %edx,%eax
f0128c19:	89 c3                	mov    %eax,%ebx
f0128c1b:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0128c22:	10 00 00 
f0128c25:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0128c2a:	0f b6 d0             	movzbl %al,%edx
f0128c2d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0128c33:	01 d0                	add    %edx,%eax
f0128c35:	48                   	dec    %eax
f0128c36:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0128c3c:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0128c42:	ba 00 00 00 00       	mov    $0x0,%edx
f0128c47:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0128c4d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0128c53:	29 d0                	sub    %edx,%eax
f0128c55:	01 c3                	add    %eax,%ebx
f0128c57:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0128c5e:	10 00 00 
f0128c61:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0128c66:	0f b6 c0             	movzbl %al,%eax
f0128c69:	c1 e0 04             	shl    $0x4,%eax
f0128c6c:	89 c2                	mov    %eax,%edx
f0128c6e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0128c74:	01 d0                	add    %edx,%eax
f0128c76:	48                   	dec    %eax
f0128c77:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0128c7d:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0128c83:	ba 00 00 00 00       	mov    $0x0,%edx
f0128c88:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0128c8e:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0128c94:	29 d0                	sub    %edx,%eax
f0128c96:	01 d8                	add    %ebx,%eax
f0128c98:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0128c9d:	39 c1                	cmp    %eax,%ecx
f0128c9f:	74 17                	je     f0128cb8 <test_kshrink+0x64b>
f0128ca1:	83 ec 04             	sub    $0x4,%esp
f0128ca4:	68 40 b1 13 f0       	push   $0xf013b140
f0128ca9:	68 2f 0c 00 00       	push   $0xc2f
f0128cae:	68 5a b0 13 f0       	push   $0xf013b05a
f0128cb3:	e8 4d 75 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128cb8:	e8 0b b1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128cbd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128cc0:	74 17                	je     f0128cd9 <test_kshrink+0x66c>
f0128cc2:	83 ec 04             	sub    $0x4,%esp
f0128cc5:	68 74 b0 13 f0       	push   $0xf013b074
f0128cca:	68 30 0c 00 00       	push   $0xc30
f0128ccf:	68 5a b0 13 f0       	push   $0xf013b05a
f0128cd4:	e8 2c 75 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128cd9:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128cdc:	e8 bc 3e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128ce1:	29 c3                	sub    %eax,%ebx
f0128ce3:	89 d8                	mov    %ebx,%eax
f0128ce5:	83 f8 02             	cmp    $0x2,%eax
f0128ce8:	74 17                	je     f0128d01 <test_kshrink+0x694>
f0128cea:	83 ec 04             	sub    $0x4,%esp
f0128ced:	68 dc b0 13 f0       	push   $0xf013b0dc
f0128cf2:	68 31 0c 00 00       	push   $0xc31
f0128cf7:	68 5a b0 13 f0       	push   $0xf013b05a
f0128cfc:	e8 04 75 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0128d01:	c7 85 b4 fe ff ff ff 	movl   $0x1bff,-0x14c(%ebp)
f0128d08:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0128d0b:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0128d11:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0128d14:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128d1b:	eb 0e                	jmp    f0128d2b <test_kshrink+0x6be>
		{
			ptr[i] = 4 ;
f0128d1d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128d20:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128d23:	01 d0                	add    %edx,%eax
f0128d25:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0128d28:	ff 45 f4             	incl   -0xc(%ebp)
f0128d2b:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0128d31:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128d34:	7f e7                	jg     f0128d1d <test_kshrink+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0128d36:	e8 62 3e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128d3b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128d3e:	e8 85 b0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128d43:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0128d46:	83 ec 0c             	sub    $0xc,%esp
f0128d49:	68 00 fc 2f 00       	push   $0x2ffc00
f0128d4e:	e8 32 eb fd ff       	call   f0107885 <kmalloc>
f0128d53:	83 c4 10             	add    $0x10,%esp
f0128d56:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128d5c:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0128d62:	89 c1                	mov    %eax,%ecx
f0128d64:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0128d6b:	10 00 00 
f0128d6e:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0128d74:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128d79:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0128d7f:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128d85:	ba 00 00 00 00       	mov    $0x0,%edx
f0128d8a:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0128d90:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128d96:	29 d0                	sub    %edx,%eax
f0128d98:	89 c3                	mov    %eax,%ebx
f0128d9a:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0128da1:	10 00 00 
f0128da4:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0128da9:	0f b6 d0             	movzbl %al,%edx
f0128dac:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0128db2:	01 d0                	add    %edx,%eax
f0128db4:	48                   	dec    %eax
f0128db5:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0128dbb:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128dc1:	ba 00 00 00 00       	mov    $0x0,%edx
f0128dc6:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0128dcc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128dd2:	29 d0                	sub    %edx,%eax
f0128dd4:	01 c3                	add    %eax,%ebx
f0128dd6:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0128ddd:	10 00 00 
f0128de0:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0128de5:	0f b6 c0             	movzbl %al,%eax
f0128de8:	c1 e0 04             	shl    $0x4,%eax
f0128deb:	89 c2                	mov    %eax,%edx
f0128ded:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0128df3:	01 d0                	add    %edx,%eax
f0128df5:	48                   	dec    %eax
f0128df6:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0128dfc:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0128e02:	ba 00 00 00 00       	mov    $0x0,%edx
f0128e07:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0128e0d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0128e13:	29 d0                	sub    %edx,%eax
f0128e15:	01 d8                	add    %ebx,%eax
f0128e17:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0128e1c:	39 c1                	cmp    %eax,%ecx
f0128e1e:	74 17                	je     f0128e37 <test_kshrink+0x7ca>
f0128e20:	83 ec 04             	sub    $0x4,%esp
f0128e23:	68 40 b1 13 f0       	push   $0xf013b140
f0128e28:	68 3d 0c 00 00       	push   $0xc3d
f0128e2d:	68 5a b0 13 f0       	push   $0xf013b05a
f0128e32:	e8 ce 73 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128e37:	e8 8c af fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128e3c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128e3f:	74 17                	je     f0128e58 <test_kshrink+0x7eb>
f0128e41:	83 ec 04             	sub    $0x4,%esp
f0128e44:	68 74 b0 13 f0       	push   $0xf013b074
f0128e49:	68 3e 0c 00 00       	push   $0xc3e
f0128e4e:	68 5a b0 13 f0       	push   $0xf013b05a
f0128e53:	e8 ad 73 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128e58:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128e5b:	e8 3d 3d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128e60:	29 c3                	sub    %eax,%ebx
f0128e62:	89 d8                	mov    %ebx,%eax
f0128e64:	3d 00 03 00 00       	cmp    $0x300,%eax
f0128e69:	74 17                	je     f0128e82 <test_kshrink+0x815>
f0128e6b:	83 ec 04             	sub    $0x4,%esp
f0128e6e:	68 dc b0 13 f0       	push   $0xf013b0dc
f0128e73:	68 3f 0c 00 00       	push   $0xc3f
f0128e78:	68 5a b0 13 f0       	push   $0xf013b05a
f0128e7d:	e8 83 73 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0128e82:	c7 85 b8 fe ff ff ff 	movl   $0x2ffbff,-0x148(%ebp)
f0128e89:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0128e8c:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0128e92:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0128e95:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128e9c:	eb 0e                	jmp    f0128eac <test_kshrink+0x83f>
		{
			ptr[i] = 5 ;
f0128e9e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128ea1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128ea4:	01 d0                	add    %edx,%eax
f0128ea6:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0128ea9:	ff 45 f4             	incl   -0xc(%ebp)
f0128eac:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0128eb2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128eb5:	7f e7                	jg     f0128e9e <test_kshrink+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0128eb7:	e8 e1 3c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128ebc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128ebf:	e8 04 af fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128ec4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0128ec7:	83 ec 0c             	sub    $0xc,%esp
f0128eca:	68 00 00 60 00       	push   $0x600000
f0128ecf:	e8 b1 e9 fd ff       	call   f0107885 <kmalloc>
f0128ed4:	83 c4 10             	add    $0x10,%esp
f0128ed7:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128edd:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0128ee3:	89 c1                	mov    %eax,%ecx
f0128ee5:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0128eec:	10 00 00 
f0128eef:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0128ef5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128efa:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0128f00:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128f06:	ba 00 00 00 00       	mov    $0x0,%edx
f0128f0b:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0128f11:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128f17:	29 d0                	sub    %edx,%eax
f0128f19:	89 c3                	mov    %eax,%ebx
f0128f1b:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0128f22:	10 00 00 
f0128f25:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0128f2a:	0f b6 d0             	movzbl %al,%edx
f0128f2d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0128f33:	01 d0                	add    %edx,%eax
f0128f35:	48                   	dec    %eax
f0128f36:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0128f3c:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128f42:	ba 00 00 00 00       	mov    $0x0,%edx
f0128f47:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0128f4d:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128f53:	29 d0                	sub    %edx,%eax
f0128f55:	01 c3                	add    %eax,%ebx
f0128f57:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0128f5e:	10 00 00 
f0128f61:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0128f66:	0f b6 c0             	movzbl %al,%eax
f0128f69:	c1 e0 04             	shl    $0x4,%eax
f0128f6c:	89 c2                	mov    %eax,%edx
f0128f6e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0128f74:	01 d0                	add    %edx,%eax
f0128f76:	48                   	dec    %eax
f0128f77:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0128f7d:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128f83:	ba 00 00 00 00       	mov    $0x0,%edx
f0128f88:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0128f8e:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128f94:	29 d0                	sub    %edx,%eax
f0128f96:	01 d8                	add    %ebx,%eax
f0128f98:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0128f9d:	39 c1                	cmp    %eax,%ecx
f0128f9f:	74 17                	je     f0128fb8 <test_kshrink+0x94b>
f0128fa1:	83 ec 04             	sub    $0x4,%esp
f0128fa4:	68 40 b1 13 f0       	push   $0xf013b140
f0128fa9:	68 4b 0c 00 00       	push   $0xc4b
f0128fae:	68 5a b0 13 f0       	push   $0xf013b05a
f0128fb3:	e8 4d 72 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128fb8:	e8 0b ae fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128fbd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128fc0:	74 17                	je     f0128fd9 <test_kshrink+0x96c>
f0128fc2:	83 ec 04             	sub    $0x4,%esp
f0128fc5:	68 74 b0 13 f0       	push   $0xf013b074
f0128fca:	68 4c 0c 00 00       	push   $0xc4c
f0128fcf:	68 5a b0 13 f0       	push   $0xf013b05a
f0128fd4:	e8 2c 72 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128fd9:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128fdc:	e8 bc 3b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0128fe1:	29 c3                	sub    %eax,%ebx
f0128fe3:	89 d8                	mov    %ebx,%eax
f0128fe5:	3d 00 06 00 00       	cmp    $0x600,%eax
f0128fea:	74 17                	je     f0129003 <test_kshrink+0x996>
f0128fec:	83 ec 04             	sub    $0x4,%esp
f0128fef:	68 dc b0 13 f0       	push   $0xf013b0dc
f0128ff4:	68 4d 0c 00 00       	push   $0xc4d
f0128ff9:	68 5a b0 13 f0       	push   $0xf013b05a
f0128ffe:	e8 02 72 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0129003:	c7 85 bc fe ff ff ff 	movl   $0x17ffff,-0x144(%ebp)
f012900a:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f012900d:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0129013:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0129019:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129020:	eb 1a                	jmp    f012903c <test_kshrink+0x9cf>
		{
			arr[i] = i ;
f0129022:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129025:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012902c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0129032:	01 c2                	add    %eax,%edx
f0129034:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129037:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0129039:	ff 45 f4             	incl   -0xc(%ebp)
f012903c:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0129042:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129045:	7d db                	jge    f0129022 <test_kshrink+0x9b5>
		}
	}

	//Shrink last allocated variable to 5 MB instead of 6 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0129047:	e8 51 3b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012904c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012904f:	e8 74 ad fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129054:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(5*Mega) ;
f0129057:	83 ec 0c             	sub    $0xc,%esp
f012905a:	68 00 00 50 00       	push   $0x500000
f012905f:	e8 a7 ea fd ff       	call   f0107b0b <kshrink>
f0129064:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0129067:	e8 5c ad fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012906c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012906f:	74 19                	je     f012908a <test_kshrink+0xa1d>
f0129071:	68 f4 bd 13 f0       	push   $0xf013bdf4
f0129076:	68 25 be 13 f0       	push   $0xf013be25
f012907b:	68 5d 0c 00 00       	push   $0xc5d
f0129080:	68 5a b0 13 f0       	push   $0xf013b05a
f0129085:	e8 7b 71 fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 256) ;
f012908a:	e8 0e 3b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012908f:	89 c2                	mov    %eax,%edx
f0129091:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0129094:	29 c2                	sub    %eax,%edx
f0129096:	89 d0                	mov    %edx,%eax
f0129098:	3d 00 01 00 00       	cmp    $0x100,%eax
f012909d:	74 19                	je     f01290b8 <test_kshrink+0xa4b>
f012909f:	68 00 bf 13 f0       	push   $0xf013bf00
f01290a4:	68 25 be 13 f0       	push   $0xf013be25
f01290a9:	68 5e 0c 00 00       	push   $0xc5e
f01290ae:	68 5a b0 13 f0       	push   $0xf013b05a
f01290b3:	e8 4d 71 fd ff       	call   f0100205 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
f01290b8:	c7 85 24 ff ff ff ff 	movl   $0x13ffff,-0xdc(%ebp)
f01290bf:	ff 13 00 
	{
		for (i = 0; i <= newLastIndex ; ++i)
f01290c2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01290c9:	eb 37                	jmp    f0129102 <test_kshrink+0xa95>
		{
			assert(arr[i] == i);
f01290cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01290ce:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01290d5:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01290db:	01 d0                	add    %edx,%eax
f01290dd:	8b 10                	mov    (%eax),%edx
f01290df:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01290e2:	39 c2                	cmp    %eax,%edx
f01290e4:	74 19                	je     f01290ff <test_kshrink+0xa92>
f01290e6:	68 30 bf 13 f0       	push   $0xf013bf30
f01290eb:	68 25 be 13 f0       	push   $0xf013be25
f01290f0:	68 66 0c 00 00       	push   $0xc66
f01290f5:	68 5a b0 13 f0       	push   $0xf013b05a
f01290fa:	e8 06 71 fd ff       	call   f0100205 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
	{
		for (i = 0; i <= newLastIndex ; ++i)
f01290ff:	ff 45 f4             	incl   -0xc(%ebp)
f0129102:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129105:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f012910b:	7e be                	jle    f01290cb <test_kshrink+0xa5e>
			assert(arr[i] == i);
		}

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012910d:	83 ec 0c             	sub    $0xc,%esp
f0129110:	6a 03                	push   $0x3
f0129112:	e8 26 3f fe ff       	call   f010d03d <sys_bypassPageFault>
f0129117:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[6];
f012911a:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0129120:	89 45 8c             	mov    %eax,-0x74(%ebp)
		ptr[5*Mega] = 10;
f0129123:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129126:	05 00 00 50 00       	add    $0x500000,%eax
f012912b:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega])) ;
f012912e:	e8 f8 3e fe ff       	call   f010d02b <sys_rcr2>
f0129133:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0129136:	81 c2 00 00 50 00    	add    $0x500000,%edx
f012913c:	39 d0                	cmp    %edx,%eax
f012913e:	74 19                	je     f0129159 <test_kshrink+0xaec>
f0129140:	68 3c bf 13 f0       	push   $0xf013bf3c
f0129145:	68 25 be 13 f0       	push   $0xf013be25
f012914a:	68 6f 0c 00 00       	push   $0xc6f
f012914f:	68 5a b0 13 f0       	push   $0xf013b05a
f0129154:	e8 ac 70 fd ff       	call   f0100205 <_panic>

		ptr[5*Mega+4*kilo] = 10;
f0129159:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012915c:	05 00 10 50 00       	add    $0x501000,%eax
f0129161:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega+4*kilo])) ;
f0129164:	e8 c2 3e fe ff       	call   f010d02b <sys_rcr2>
f0129169:	8b 55 8c             	mov    -0x74(%ebp),%edx
f012916c:	81 c2 00 10 50 00    	add    $0x501000,%edx
f0129172:	39 d0                	cmp    %edx,%eax
f0129174:	74 19                	je     f012918f <test_kshrink+0xb22>
f0129176:	68 64 bf 13 f0       	push   $0xf013bf64
f012917b:	68 25 be 13 f0       	push   $0xf013be25
f0129180:	68 72 0c 00 00       	push   $0xc72
f0129185:	68 5a b0 13 f0       	push   $0xf013b05a
f012918a:	e8 76 70 fd ff       	call   f0100205 <_panic>

		ptr[6*Mega - kilo] = 10;
f012918f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129192:	05 00 fc 5f 00       	add    $0x5ffc00,%eax
f0129197:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[6*Mega - kilo])) ;
f012919a:	e8 8c 3e fe ff       	call   f010d02b <sys_rcr2>
f012919f:	8b 55 8c             	mov    -0x74(%ebp),%edx
f01291a2:	81 c2 00 fc 5f 00    	add    $0x5ffc00,%edx
f01291a8:	39 d0                	cmp    %edx,%eax
f01291aa:	74 19                	je     f01291c5 <test_kshrink+0xb58>
f01291ac:	68 90 bf 13 f0       	push   $0xf013bf90
f01291b1:	68 25 be 13 f0       	push   $0xf013be25
f01291b6:	68 75 0c 00 00       	push   $0xc75
f01291bb:	68 5a b0 13 f0       	push   $0xf013b05a
f01291c0:	e8 40 70 fd ff       	call   f0100205 <_panic>

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01291c5:	83 ec 0c             	sub    $0xc,%esp
f01291c8:	6a 00                	push   $0x0
f01291ca:	e8 6e 3e fe ff       	call   f010d03d <sys_bypassPageFault>
f01291cf:	83 c4 10             	add    $0x10,%esp
	}

	//Shrink it again to 2 MB instead of 5 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f01291d2:	e8 c6 39 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01291d7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01291da:	e8 e9 ab fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01291df:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(2*Mega) ;
f01291e2:	83 ec 0c             	sub    $0xc,%esp
f01291e5:	68 00 00 20 00       	push   $0x200000
f01291ea:	e8 1c e9 fd ff       	call   f0107b0b <kshrink>
f01291ef:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01291f2:	e8 d1 ab fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01291f7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01291fa:	74 19                	je     f0129215 <test_kshrink+0xba8>
f01291fc:	68 f4 bd 13 f0       	push   $0xf013bdf4
f0129201:	68 25 be 13 f0       	push   $0xf013be25
f0129206:	68 82 0c 00 00       	push   $0xc82
f012920b:	68 5a b0 13 f0       	push   $0xf013b05a
f0129210:	e8 f0 6f fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 768) ;
f0129215:	e8 83 39 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012921a:	89 c2                	mov    %eax,%edx
f012921c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012921f:	29 c2                	sub    %eax,%edx
f0129221:	89 d0                	mov    %edx,%eax
f0129223:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129228:	74 19                	je     f0129243 <test_kshrink+0xbd6>
f012922a:	68 bc bf 13 f0       	push   $0xf013bfbc
f012922f:	68 25 be 13 f0       	push   $0xf013be25
f0129234:	68 83 0c 00 00       	push   $0xc83
f0129239:	68 5a b0 13 f0       	push   $0xf013b05a
f012923e:	e8 c2 6f fd ff       	call   f0100205 <_panic>


	//Allocate after shrinking last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0129243:	e8 55 39 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129248:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012924b:	e8 78 ab fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129250:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0129253:	83 ec 0c             	sub    $0xc,%esp
f0129256:	68 00 00 40 00       	push   $0x400000
f012925b:	e8 25 e6 fd ff       	call   f0107885 <kmalloc>
f0129260:	83 c4 10             	add    $0x10,%esp
f0129263:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		cprintf("ACTUAL = %x, DESIRED = %x\n", (uint32) ptr_allocations[7] ,(ACTUAL_START + 7*Mega + 16*kilo + 2*Mega));
f0129269:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0129270:	10 00 00 
f0129273:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0129279:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012927e:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0129284:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012928a:	ba 00 00 00 00       	mov    $0x0,%edx
f012928f:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0129295:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012929b:	29 d0                	sub    %edx,%eax
f012929d:	89 c1                	mov    %eax,%ecx
f012929f:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f01292a6:	10 00 00 
f01292a9:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01292ae:	0f b6 d0             	movzbl %al,%edx
f01292b1:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01292b7:	01 d0                	add    %edx,%eax
f01292b9:	48                   	dec    %eax
f01292ba:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f01292c0:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01292c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01292cb:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f01292d1:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01292d7:	29 d0                	sub    %edx,%eax
f01292d9:	01 c1                	add    %eax,%ecx
f01292db:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01292e2:	10 00 00 
f01292e5:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01292ea:	0f b6 c0             	movzbl %al,%eax
f01292ed:	c1 e0 04             	shl    $0x4,%eax
f01292f0:	89 c2                	mov    %eax,%edx
f01292f2:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01292f8:	01 d0                	add    %edx,%eax
f01292fa:	48                   	dec    %eax
f01292fb:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0129301:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0129307:	ba 00 00 00 00       	mov    $0x0,%edx
f012930c:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0129312:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0129318:	29 d0                	sub    %edx,%eax
f012931a:	01 c8                	add    %ecx,%eax
f012931c:	8d 90 00 80 90 f6    	lea    -0x96f8000(%eax),%edx
f0129322:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0129328:	83 ec 04             	sub    $0x4,%esp
f012932b:	52                   	push   %edx
f012932c:	50                   	push   %eax
f012932d:	68 ec bf 13 f0       	push   $0xf013bfec
f0129332:	e8 d7 79 fd ff       	call   f0100d0e <cprintf>
f0129337:	83 c4 10             	add    $0x10,%esp
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 2*Mega)) panic("Wrong start address after kshrink()... check the updating of your data structures");
f012933a:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0129340:	89 c1                	mov    %eax,%ecx
f0129342:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0129349:	10 00 00 
f012934c:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0129352:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129357:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f012935d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0129363:	ba 00 00 00 00       	mov    $0x0,%edx
f0129368:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f012936e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0129374:	29 d0                	sub    %edx,%eax
f0129376:	89 c3                	mov    %eax,%ebx
f0129378:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f012937f:	10 00 00 
f0129382:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0129387:	0f b6 d0             	movzbl %al,%edx
f012938a:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0129390:	01 d0                	add    %edx,%eax
f0129392:	48                   	dec    %eax
f0129393:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0129399:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012939f:	ba 00 00 00 00       	mov    $0x0,%edx
f01293a4:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f01293aa:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01293b0:	29 d0                	sub    %edx,%eax
f01293b2:	01 c3                	add    %eax,%ebx
f01293b4:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f01293bb:	10 00 00 
f01293be:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01293c3:	0f b6 c0             	movzbl %al,%eax
f01293c6:	c1 e0 04             	shl    $0x4,%eax
f01293c9:	89 c2                	mov    %eax,%edx
f01293cb:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01293d1:	01 d0                	add    %edx,%eax
f01293d3:	48                   	dec    %eax
f01293d4:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f01293da:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01293e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01293e5:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f01293eb:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01293f1:	29 d0                	sub    %edx,%eax
f01293f3:	01 d8                	add    %ebx,%eax
f01293f5:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f01293fa:	39 c1                	cmp    %eax,%ecx
f01293fc:	74 17                	je     f0129415 <test_kshrink+0xda8>
f01293fe:	83 ec 04             	sub    $0x4,%esp
f0129401:	68 08 c0 13 f0       	push   $0xf013c008
f0129406:	68 8e 0c 00 00       	push   $0xc8e
f012940b:	68 5a b0 13 f0       	push   $0xf013b05a
f0129410:	e8 f0 6d fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129415:	e8 ae a9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012941a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012941d:	74 17                	je     f0129436 <test_kshrink+0xdc9>
f012941f:	83 ec 04             	sub    $0x4,%esp
f0129422:	68 74 b0 13 f0       	push   $0xf013b074
f0129427:	68 8f 0c 00 00       	push   $0xc8f
f012942c:	68 5a b0 13 f0       	push   $0xf013b05a
f0129431:	e8 cf 6d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129436:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129439:	e8 5f 37 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012943e:	29 c3                	sub    %eax,%ebx
f0129440:	89 d8                	mov    %ebx,%eax
f0129442:	3d 00 04 00 00       	cmp    $0x400,%eax
f0129447:	74 17                	je     f0129460 <test_kshrink+0xdf3>
f0129449:	83 ec 04             	sub    $0x4,%esp
f012944c:	68 dc b0 13 f0       	push   $0xf013b0dc
f0129451:	68 90 0c 00 00       	push   $0xc90
f0129456:	68 5a b0 13 f0       	push   $0xf013b05a
f012945b:	e8 a5 6d fd ff       	call   f0100205 <_panic>


	//kfree the shrunk variable
	{
		//kfree 2 MB (shrunk)
		freeFrames = sys_calculate_free_frames() ;
f0129460:	e8 38 37 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129465:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129468:	e8 5b a9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012946d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0129470:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0129476:	83 ec 0c             	sub    $0xc,%esp
f0129479:	50                   	push   %eax
f012947a:	e8 d1 e4 fd ff       	call   f0107950 <kfree>
f012947f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129482:	e8 41 a9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129487:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012948a:	74 17                	je     f01294a3 <test_kshrink+0xe36>
f012948c:	83 ec 04             	sub    $0x4,%esp
f012948f:	68 74 b0 13 f0       	push   $0xf013b074
f0129494:	68 9a 0c 00 00       	push   $0xc9a
f0129499:	68 5a b0 13 f0       	push   $0xf013b05a
f012949e:	e8 62 6d fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01294a3:	e8 f5 36 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01294a8:	89 c2                	mov    %eax,%edx
f01294aa:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01294ad:	29 c2                	sub    %eax,%edx
f01294af:	89 d0                	mov    %edx,%eax
f01294b1:	3d 00 02 00 00       	cmp    $0x200,%eax
f01294b6:	74 17                	je     f01294cf <test_kshrink+0xe62>
f01294b8:	83 ec 04             	sub    $0x4,%esp
f01294bb:	68 0c b9 13 f0       	push   $0xf013b90c
f01294c0:	68 9b 0c 00 00       	push   $0xc9b
f01294c5:	68 5a b0 13 f0       	push   $0xf013b05a
f01294ca:	e8 36 6d fd ff       	call   f0100205 <_panic>
	}

	//Shrink last allocated variable to 4 MB - 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f01294cf:	e8 c9 36 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01294d4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01294d7:	e8 ec a8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01294dc:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(4*Mega - 20*kilo) ;
f01294df:	83 ec 0c             	sub    $0xc,%esp
f01294e2:	68 00 b0 3f 00       	push   $0x3fb000
f01294e7:	e8 1f e6 fd ff       	call   f0107b0b <kshrink>
f01294ec:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01294ef:	e8 d4 a8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01294f4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01294f7:	74 19                	je     f0129512 <test_kshrink+0xea5>
f01294f9:	68 f4 bd 13 f0       	push   $0xf013bdf4
f01294fe:	68 25 be 13 f0       	push   $0xf013be25
f0129503:	68 a5 0c 00 00       	push   $0xca5
f0129508:	68 5a b0 13 f0       	push   $0xf013b05a
f012950d:	e8 f3 6c fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 5) ;
f0129512:	e8 86 36 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129517:	89 c2                	mov    %eax,%edx
f0129519:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012951c:	29 c2                	sub    %eax,%edx
f012951e:	89 d0                	mov    %edx,%eax
f0129520:	83 f8 05             	cmp    $0x5,%eax
f0129523:	74 19                	je     f012953e <test_kshrink+0xed1>
f0129525:	68 5c c0 13 f0       	push   $0xf013c05c
f012952a:	68 25 be 13 f0       	push   $0xf013be25
f012952f:	68 a6 0c 00 00       	push   $0xca6
f0129534:	68 5a b0 13 f0       	push   $0xf013b05a
f0129539:	e8 c7 6c fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f012953e:	83 ec 0c             	sub    $0xc,%esp
f0129541:	68 b8 bd 13 f0       	push   $0xf013bdb8
f0129546:	e8 c3 77 fd ff       	call   f0100d0e <cprintf>
f012954b:	83 c4 10             	add    $0x10,%esp

	return 1;
f012954e:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0129553:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0129556:	5b                   	pop    %ebx
f0129557:	5f                   	pop    %edi
f0129558:	5d                   	pop    %ebp
f0129559:	c3                   	ret    

f012955a <test_kfreelast>:


int test_kfreelast()
{
f012955a:	55                   	push   %ebp
f012955b:	89 e5                	mov    %esp,%ebp
f012955d:	57                   	push   %edi
f012955e:	53                   	push   %ebx
f012955f:	81 ec 90 02 00 00    	sub    $0x290,%esp
	char minByte = 1<<7;
f0129565:	c6 45 eb 80          	movb   $0x80,-0x15(%ebp)
	char maxByte = 0x7F;
f0129569:	c6 45 ea 7f          	movb   $0x7f,-0x16(%ebp)
	short minShort = 1<<15 ;
f012956d:	66 c7 45 e8 00 80    	movw   $0x8000,-0x18(%ebp)
	short maxShort = 0x7FFF;
f0129573:	66 c7 45 e6 ff 7f    	movw   $0x7fff,-0x1a(%ebp)
	int minInt = 1<<31 ;
f0129579:	c7 45 e0 00 00 00 80 	movl   $0x80000000,-0x20(%ebp)
	int maxInt = 0x7FFFFFFF;
f0129580:	c7 45 dc ff ff ff 7f 	movl   $0x7fffffff,-0x24(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0129587:	e8 11 36 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012958c:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//malloc some spaces
	int i, ce, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012958f:	8d 95 0c fe ff ff    	lea    -0x1f4(%ebp),%edx
f0129595:	b9 14 00 00 00       	mov    $0x14,%ecx
f012959a:	b8 00 00 00 00       	mov    $0x0,%eax
f012959f:	89 d7                	mov    %edx,%edi
f01295a1:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01295a3:	8d 95 bc fd ff ff    	lea    -0x244(%ebp),%edx
f01295a9:	b9 14 00 00 00       	mov    $0x14,%ecx
f01295ae:	b8 00 00 00 00       	mov    $0x0,%eax
f01295b3:	89 d7                	mov    %edx,%edi
f01295b5:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01295b7:	8d 95 6c fd ff ff    	lea    -0x294(%ebp),%edx
f01295bd:	b9 14 00 00 00       	mov    $0x14,%ecx
f01295c2:	b8 00 00 00 00       	mov    $0x0,%eax
f01295c7:	89 d7                	mov    %edx,%edi
f01295c9:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01295cb:	e8 cd 35 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01295d0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01295d3:	e8 f0 a7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01295d8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01295db:	83 ec 0c             	sub    $0xc,%esp
f01295de:	68 00 fc 1f 00       	push   $0x1ffc00
f01295e3:	e8 9d e2 fd ff       	call   f0107885 <kmalloc>
f01295e8:	83 c4 10             	add    $0x10,%esp
f01295eb:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01295f1:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f01295f7:	89 c1                	mov    %eax,%ecx
f01295f9:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0129600:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0129603:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129608:	89 45 c8             	mov    %eax,-0x38(%ebp)
f012960b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012960e:	ba 00 00 00 00       	mov    $0x0,%edx
f0129613:	f7 75 cc             	divl   -0x34(%ebp)
f0129616:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0129619:	29 d0                	sub    %edx,%eax
f012961b:	89 c3                	mov    %eax,%ebx
f012961d:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0129624:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0129629:	0f b6 d0             	movzbl %al,%edx
f012962c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012962f:	01 d0                	add    %edx,%eax
f0129631:	48                   	dec    %eax
f0129632:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0129635:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0129638:	ba 00 00 00 00       	mov    $0x0,%edx
f012963d:	f7 75 c4             	divl   -0x3c(%ebp)
f0129640:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0129643:	29 d0                	sub    %edx,%eax
f0129645:	01 c3                	add    %eax,%ebx
f0129647:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f012964e:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0129653:	0f b6 c0             	movzbl %al,%eax
f0129656:	c1 e0 04             	shl    $0x4,%eax
f0129659:	89 c2                	mov    %eax,%edx
f012965b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012965e:	01 d0                	add    %edx,%eax
f0129660:	48                   	dec    %eax
f0129661:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0129664:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0129667:	ba 00 00 00 00       	mov    $0x0,%edx
f012966c:	f7 75 bc             	divl   -0x44(%ebp)
f012966f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0129672:	29 d0                	sub    %edx,%eax
f0129674:	01 d8                	add    %ebx,%eax
f0129676:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012967b:	39 c1                	cmp    %eax,%ecx
f012967d:	74 17                	je     f0129696 <test_kfreelast+0x13c>
f012967f:	83 ec 04             	sub    $0x4,%esp
f0129682:	68 40 b1 13 f0       	push   $0xf013b140
f0129687:	68 ca 0c 00 00       	push   $0xcca
f012968c:	68 5a b0 13 f0       	push   $0xf013b05a
f0129691:	e8 6f 6b fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129696:	e8 2d a7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012969b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012969e:	74 17                	je     f01296b7 <test_kfreelast+0x15d>
f01296a0:	83 ec 04             	sub    $0x4,%esp
f01296a3:	68 74 b0 13 f0       	push   $0xf013b074
f01296a8:	68 cb 0c 00 00       	push   $0xccb
f01296ad:	68 5a b0 13 f0       	push   $0xf013b05a
f01296b2:	e8 4e 6b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01296b7:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01296ba:	e8 de 34 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01296bf:	29 c3                	sub    %eax,%ebx
f01296c1:	89 d8                	mov    %ebx,%eax
f01296c3:	3d 00 02 00 00       	cmp    $0x200,%eax
f01296c8:	74 17                	je     f01296e1 <test_kfreelast+0x187>
f01296ca:	83 ec 04             	sub    $0x4,%esp
f01296cd:	68 dc b0 13 f0       	push   $0xf013b0dc
f01296d2:	68 cc 0c 00 00       	push   $0xccc
f01296d7:	68 5a b0 13 f0       	push   $0xf013b05a
f01296dc:	e8 24 6b fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f01296e1:	c7 85 0c fe ff ff ff 	movl   $0x1ffbff,-0x1f4(%ebp)
f01296e8:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01296eb:	e8 ad 34 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01296f0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01296f3:	e8 d0 a6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01296f8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01296fb:	83 ec 0c             	sub    $0xc,%esp
f01296fe:	68 00 fc 1f 00       	push   $0x1ffc00
f0129703:	e8 7d e1 fd ff       	call   f0107885 <kmalloc>
f0129708:	83 c4 10             	add    $0x10,%esp
f012970b:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129711:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0129717:	89 c1                	mov    %eax,%ecx
f0129719:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0129720:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0129723:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129728:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012972b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012972e:	ba 00 00 00 00       	mov    $0x0,%edx
f0129733:	f7 75 b4             	divl   -0x4c(%ebp)
f0129736:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0129739:	29 d0                	sub    %edx,%eax
f012973b:	89 c3                	mov    %eax,%ebx
f012973d:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0129744:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0129749:	0f b6 d0             	movzbl %al,%edx
f012974c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012974f:	01 d0                	add    %edx,%eax
f0129751:	48                   	dec    %eax
f0129752:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0129755:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0129758:	ba 00 00 00 00       	mov    $0x0,%edx
f012975d:	f7 75 ac             	divl   -0x54(%ebp)
f0129760:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0129763:	29 d0                	sub    %edx,%eax
f0129765:	01 c3                	add    %eax,%ebx
f0129767:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012976e:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0129773:	0f b6 c0             	movzbl %al,%eax
f0129776:	c1 e0 04             	shl    $0x4,%eax
f0129779:	89 c2                	mov    %eax,%edx
f012977b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012977e:	01 d0                	add    %edx,%eax
f0129780:	48                   	dec    %eax
f0129781:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0129784:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0129787:	ba 00 00 00 00       	mov    $0x0,%edx
f012978c:	f7 75 a4             	divl   -0x5c(%ebp)
f012978f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0129792:	29 d0                	sub    %edx,%eax
f0129794:	01 d8                	add    %ebx,%eax
f0129796:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012979b:	39 c1                	cmp    %eax,%ecx
f012979d:	74 17                	je     f01297b6 <test_kfreelast+0x25c>
f012979f:	83 ec 04             	sub    $0x4,%esp
f01297a2:	68 40 b1 13 f0       	push   $0xf013b140
f01297a7:	68 d3 0c 00 00       	push   $0xcd3
f01297ac:	68 5a b0 13 f0       	push   $0xf013b05a
f01297b1:	e8 4f 6a fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01297b6:	e8 0d a6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01297bb:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01297be:	74 17                	je     f01297d7 <test_kfreelast+0x27d>
f01297c0:	83 ec 04             	sub    $0x4,%esp
f01297c3:	68 74 b0 13 f0       	push   $0xf013b074
f01297c8:	68 d4 0c 00 00       	push   $0xcd4
f01297cd:	68 5a b0 13 f0       	push   $0xf013b05a
f01297d2:	e8 2e 6a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01297d7:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01297da:	e8 be 33 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01297df:	29 c3                	sub    %eax,%ebx
f01297e1:	89 d8                	mov    %ebx,%eax
f01297e3:	3d 00 02 00 00       	cmp    $0x200,%eax
f01297e8:	74 17                	je     f0129801 <test_kfreelast+0x2a7>
f01297ea:	83 ec 04             	sub    $0x4,%esp
f01297ed:	68 dc b0 13 f0       	push   $0xf013b0dc
f01297f2:	68 d5 0c 00 00       	push   $0xcd5
f01297f7:	68 5a b0 13 f0       	push   $0xf013b05a
f01297fc:	e8 04 6a fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0129801:	c7 85 10 fe ff ff ff 	movl   $0x1ffbff,-0x1f0(%ebp)
f0129808:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012980b:	e8 8d 33 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129810:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129813:	e8 b0 a5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129818:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012981b:	83 ec 0c             	sub    $0xc,%esp
f012981e:	68 00 08 00 00       	push   $0x800
f0129823:	e8 5d e0 fd ff       	call   f0107885 <kmalloc>
f0129828:	83 c4 10             	add    $0x10,%esp
f012982b:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129831:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0129837:	89 c1                	mov    %eax,%ecx
f0129839:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0129840:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129843:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129848:	89 45 98             	mov    %eax,-0x68(%ebp)
f012984b:	8b 45 98             	mov    -0x68(%ebp),%eax
f012984e:	ba 00 00 00 00       	mov    $0x0,%edx
f0129853:	f7 75 9c             	divl   -0x64(%ebp)
f0129856:	8b 45 98             	mov    -0x68(%ebp),%eax
f0129859:	29 d0                	sub    %edx,%eax
f012985b:	89 c3                	mov    %eax,%ebx
f012985d:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0129864:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0129869:	0f b6 d0             	movzbl %al,%edx
f012986c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012986f:	01 d0                	add    %edx,%eax
f0129871:	48                   	dec    %eax
f0129872:	89 45 90             	mov    %eax,-0x70(%ebp)
f0129875:	8b 45 90             	mov    -0x70(%ebp),%eax
f0129878:	ba 00 00 00 00       	mov    $0x0,%edx
f012987d:	f7 75 94             	divl   -0x6c(%ebp)
f0129880:	8b 45 90             	mov    -0x70(%ebp),%eax
f0129883:	29 d0                	sub    %edx,%eax
f0129885:	01 c3                	add    %eax,%ebx
f0129887:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012988e:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0129893:	0f b6 c0             	movzbl %al,%eax
f0129896:	c1 e0 04             	shl    $0x4,%eax
f0129899:	89 c2                	mov    %eax,%edx
f012989b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012989e:	01 d0                	add    %edx,%eax
f01298a0:	48                   	dec    %eax
f01298a1:	89 45 88             	mov    %eax,-0x78(%ebp)
f01298a4:	8b 45 88             	mov    -0x78(%ebp),%eax
f01298a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01298ac:	f7 75 8c             	divl   -0x74(%ebp)
f01298af:	8b 45 88             	mov    -0x78(%ebp),%eax
f01298b2:	29 d0                	sub    %edx,%eax
f01298b4:	01 d8                	add    %ebx,%eax
f01298b6:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01298bb:	39 c1                	cmp    %eax,%ecx
f01298bd:	74 17                	je     f01298d6 <test_kfreelast+0x37c>
f01298bf:	83 ec 04             	sub    $0x4,%esp
f01298c2:	68 40 b1 13 f0       	push   $0xf013b140
f01298c7:	68 dc 0c 00 00       	push   $0xcdc
f01298cc:	68 5a b0 13 f0       	push   $0xf013b05a
f01298d1:	e8 2f 69 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01298d6:	e8 ed a4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01298db:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01298de:	74 17                	je     f01298f7 <test_kfreelast+0x39d>
f01298e0:	83 ec 04             	sub    $0x4,%esp
f01298e3:	68 74 b0 13 f0       	push   $0xf013b074
f01298e8:	68 dd 0c 00 00       	push   $0xcdd
f01298ed:	68 5a b0 13 f0       	push   $0xf013b05a
f01298f2:	e8 0e 69 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01298f7:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01298fa:	e8 9e 32 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f01298ff:	29 c3                	sub    %eax,%ebx
f0129901:	89 d8                	mov    %ebx,%eax
f0129903:	83 f8 01             	cmp    $0x1,%eax
f0129906:	74 17                	je     f012991f <test_kfreelast+0x3c5>
f0129908:	83 ec 04             	sub    $0x4,%esp
f012990b:	68 dc b0 13 f0       	push   $0xf013b0dc
f0129910:	68 de 0c 00 00       	push   $0xcde
f0129915:	68 5a b0 13 f0       	push   $0xf013b05a
f012991a:	e8 e6 68 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f012991f:	c7 85 14 fe ff ff ff 	movl   $0x7ff,-0x1ec(%ebp)
f0129926:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0129929:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012992f:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0129932:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129939:	eb 0e                	jmp    f0129949 <test_kfreelast+0x3ef>
		{
			ptr[i] = 2 ;
f012993b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012993e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129941:	01 d0                	add    %edx,%eax
f0129943:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0129946:	ff 45 f4             	incl   -0xc(%ebp)
f0129949:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012994f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129952:	7f e7                	jg     f012993b <test_kfreelast+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129954:	e8 44 32 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129959:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012995c:	e8 67 a4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129961:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0129964:	83 ec 0c             	sub    $0xc,%esp
f0129967:	68 00 08 00 00       	push   $0x800
f012996c:	e8 14 df fd ff       	call   f0107885 <kmalloc>
f0129971:	83 c4 10             	add    $0x10,%esp
f0129974:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012997a:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0129980:	89 c1                	mov    %eax,%ecx
f0129982:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0129989:	8b 45 80             	mov    -0x80(%ebp),%eax
f012998c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129991:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0129997:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012999d:	ba 00 00 00 00       	mov    $0x0,%edx
f01299a2:	f7 75 80             	divl   -0x80(%ebp)
f01299a5:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01299ab:	29 d0                	sub    %edx,%eax
f01299ad:	89 c3                	mov    %eax,%ebx
f01299af:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f01299b6:	10 00 00 
f01299b9:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01299be:	0f b6 d0             	movzbl %al,%edx
f01299c1:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01299c7:	01 d0                	add    %edx,%eax
f01299c9:	48                   	dec    %eax
f01299ca:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01299d0:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01299d6:	ba 00 00 00 00       	mov    $0x0,%edx
f01299db:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01299e1:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01299e7:	29 d0                	sub    %edx,%eax
f01299e9:	01 c3                	add    %eax,%ebx
f01299eb:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01299f2:	10 00 00 
f01299f5:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01299fa:	0f b6 c0             	movzbl %al,%eax
f01299fd:	c1 e0 04             	shl    $0x4,%eax
f0129a00:	89 c2                	mov    %eax,%edx
f0129a02:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0129a08:	01 d0                	add    %edx,%eax
f0129a0a:	48                   	dec    %eax
f0129a0b:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0129a11:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0129a17:	ba 00 00 00 00       	mov    $0x0,%edx
f0129a1c:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0129a22:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0129a28:	29 d0                	sub    %edx,%eax
f0129a2a:	01 d8                	add    %ebx,%eax
f0129a2c:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0129a31:	39 c1                	cmp    %eax,%ecx
f0129a33:	74 17                	je     f0129a4c <test_kfreelast+0x4f2>
f0129a35:	83 ec 04             	sub    $0x4,%esp
f0129a38:	68 40 b1 13 f0       	push   $0xf013b140
f0129a3d:	68 ea 0c 00 00       	push   $0xcea
f0129a42:	68 5a b0 13 f0       	push   $0xf013b05a
f0129a47:	e8 b9 67 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129a4c:	e8 77 a3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129a51:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129a54:	74 17                	je     f0129a6d <test_kfreelast+0x513>
f0129a56:	83 ec 04             	sub    $0x4,%esp
f0129a59:	68 74 b0 13 f0       	push   $0xf013b074
f0129a5e:	68 eb 0c 00 00       	push   $0xceb
f0129a63:	68 5a b0 13 f0       	push   $0xf013b05a
f0129a68:	e8 98 67 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129a6d:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129a70:	e8 28 31 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129a75:	29 c3                	sub    %eax,%ebx
f0129a77:	89 d8                	mov    %ebx,%eax
f0129a79:	83 f8 01             	cmp    $0x1,%eax
f0129a7c:	74 17                	je     f0129a95 <test_kfreelast+0x53b>
f0129a7e:	83 ec 04             	sub    $0x4,%esp
f0129a81:	68 dc b0 13 f0       	push   $0xf013b0dc
f0129a86:	68 ec 0c 00 00       	push   $0xcec
f0129a8b:	68 5a b0 13 f0       	push   $0xf013b05a
f0129a90:	e8 70 67 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0129a95:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f0129a9c:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0129a9f:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0129aa5:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0129aa8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129aaf:	eb 0e                	jmp    f0129abf <test_kfreelast+0x565>
		{
			ptr[i] = 3 ;
f0129ab1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129ab4:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129ab7:	01 d0                	add    %edx,%eax
f0129ab9:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0129abc:	ff 45 f4             	incl   -0xc(%ebp)
f0129abf:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129ac5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129ac8:	7f e7                	jg     f0129ab1 <test_kfreelast+0x557>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0129aca:	e8 ce 30 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129acf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129ad2:	e8 f1 a2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129ad7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0129ada:	83 ec 0c             	sub    $0xc,%esp
f0129add:	68 00 1c 00 00       	push   $0x1c00
f0129ae2:	e8 9e dd fd ff       	call   f0107885 <kmalloc>
f0129ae7:	83 c4 10             	add    $0x10,%esp
f0129aea:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129af0:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0129af6:	89 c1                	mov    %eax,%ecx
f0129af8:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0129aff:	10 00 00 
f0129b02:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0129b08:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129b0d:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0129b13:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0129b19:	ba 00 00 00 00       	mov    $0x0,%edx
f0129b1e:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0129b24:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0129b2a:	29 d0                	sub    %edx,%eax
f0129b2c:	89 c3                	mov    %eax,%ebx
f0129b2e:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0129b35:	10 00 00 
f0129b38:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0129b3d:	0f b6 d0             	movzbl %al,%edx
f0129b40:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0129b46:	01 d0                	add    %edx,%eax
f0129b48:	48                   	dec    %eax
f0129b49:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0129b4f:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0129b55:	ba 00 00 00 00       	mov    $0x0,%edx
f0129b5a:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0129b60:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0129b66:	29 d0                	sub    %edx,%eax
f0129b68:	01 c3                	add    %eax,%ebx
f0129b6a:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0129b71:	10 00 00 
f0129b74:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0129b79:	0f b6 c0             	movzbl %al,%eax
f0129b7c:	c1 e0 04             	shl    $0x4,%eax
f0129b7f:	89 c2                	mov    %eax,%edx
f0129b81:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0129b87:	01 d0                	add    %edx,%eax
f0129b89:	48                   	dec    %eax
f0129b8a:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0129b90:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0129b96:	ba 00 00 00 00       	mov    $0x0,%edx
f0129b9b:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0129ba1:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0129ba7:	29 d0                	sub    %edx,%eax
f0129ba9:	01 d8                	add    %ebx,%eax
f0129bab:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0129bb0:	39 c1                	cmp    %eax,%ecx
f0129bb2:	74 17                	je     f0129bcb <test_kfreelast+0x671>
f0129bb4:	83 ec 04             	sub    $0x4,%esp
f0129bb7:	68 40 b1 13 f0       	push   $0xf013b140
f0129bbc:	68 f8 0c 00 00       	push   $0xcf8
f0129bc1:	68 5a b0 13 f0       	push   $0xf013b05a
f0129bc6:	e8 3a 66 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129bcb:	e8 f8 a1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129bd0:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129bd3:	74 17                	je     f0129bec <test_kfreelast+0x692>
f0129bd5:	83 ec 04             	sub    $0x4,%esp
f0129bd8:	68 74 b0 13 f0       	push   $0xf013b074
f0129bdd:	68 f9 0c 00 00       	push   $0xcf9
f0129be2:	68 5a b0 13 f0       	push   $0xf013b05a
f0129be7:	e8 19 66 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129bec:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129bef:	e8 a9 2f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129bf4:	29 c3                	sub    %eax,%ebx
f0129bf6:	89 d8                	mov    %ebx,%eax
f0129bf8:	83 f8 02             	cmp    $0x2,%eax
f0129bfb:	74 17                	je     f0129c14 <test_kfreelast+0x6ba>
f0129bfd:	83 ec 04             	sub    $0x4,%esp
f0129c00:	68 dc b0 13 f0       	push   $0xf013b0dc
f0129c05:	68 fa 0c 00 00       	push   $0xcfa
f0129c0a:	68 5a b0 13 f0       	push   $0xf013b05a
f0129c0f:	e8 f1 65 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0129c14:	c7 85 1c fe ff ff ff 	movl   $0x1bff,-0x1e4(%ebp)
f0129c1b:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0129c1e:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0129c24:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0129c27:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129c2e:	eb 0e                	jmp    f0129c3e <test_kfreelast+0x6e4>
		{
			ptr[i] = 4 ;
f0129c30:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129c33:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129c36:	01 d0                	add    %edx,%eax
f0129c38:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0129c3b:	ff 45 f4             	incl   -0xc(%ebp)
f0129c3e:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0129c44:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129c47:	7f e7                	jg     f0129c30 <test_kfreelast+0x6d6>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0129c49:	e8 4f 2f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129c4e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129c51:	e8 72 a1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129c56:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0129c59:	83 ec 0c             	sub    $0xc,%esp
f0129c5c:	68 00 fc 2f 00       	push   $0x2ffc00
f0129c61:	e8 1f dc fd ff       	call   f0107885 <kmalloc>
f0129c66:	83 c4 10             	add    $0x10,%esp
f0129c69:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129c6f:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f0129c75:	89 c1                	mov    %eax,%ecx
f0129c77:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0129c7e:	10 00 00 
f0129c81:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0129c87:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129c8c:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0129c92:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0129c98:	ba 00 00 00 00       	mov    $0x0,%edx
f0129c9d:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0129ca3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0129ca9:	29 d0                	sub    %edx,%eax
f0129cab:	89 c3                	mov    %eax,%ebx
f0129cad:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0129cb4:	10 00 00 
f0129cb7:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0129cbc:	0f b6 d0             	movzbl %al,%edx
f0129cbf:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0129cc5:	01 d0                	add    %edx,%eax
f0129cc7:	48                   	dec    %eax
f0129cc8:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0129cce:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0129cd4:	ba 00 00 00 00       	mov    $0x0,%edx
f0129cd9:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0129cdf:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0129ce5:	29 d0                	sub    %edx,%eax
f0129ce7:	01 c3                	add    %eax,%ebx
f0129ce9:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0129cf0:	10 00 00 
f0129cf3:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0129cf8:	0f b6 c0             	movzbl %al,%eax
f0129cfb:	c1 e0 04             	shl    $0x4,%eax
f0129cfe:	89 c2                	mov    %eax,%edx
f0129d00:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0129d06:	01 d0                	add    %edx,%eax
f0129d08:	48                   	dec    %eax
f0129d09:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0129d0f:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0129d15:	ba 00 00 00 00       	mov    $0x0,%edx
f0129d1a:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0129d20:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0129d26:	29 d0                	sub    %edx,%eax
f0129d28:	01 d8                	add    %ebx,%eax
f0129d2a:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0129d2f:	39 c1                	cmp    %eax,%ecx
f0129d31:	74 17                	je     f0129d4a <test_kfreelast+0x7f0>
f0129d33:	83 ec 04             	sub    $0x4,%esp
f0129d36:	68 40 b1 13 f0       	push   $0xf013b140
f0129d3b:	68 06 0d 00 00       	push   $0xd06
f0129d40:	68 5a b0 13 f0       	push   $0xf013b05a
f0129d45:	e8 bb 64 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129d4a:	e8 79 a0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129d4f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129d52:	74 17                	je     f0129d6b <test_kfreelast+0x811>
f0129d54:	83 ec 04             	sub    $0x4,%esp
f0129d57:	68 74 b0 13 f0       	push   $0xf013b074
f0129d5c:	68 07 0d 00 00       	push   $0xd07
f0129d61:	68 5a b0 13 f0       	push   $0xf013b05a
f0129d66:	e8 9a 64 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129d6b:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129d6e:	e8 2a 2e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129d73:	29 c3                	sub    %eax,%ebx
f0129d75:	89 d8                	mov    %ebx,%eax
f0129d77:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129d7c:	74 17                	je     f0129d95 <test_kfreelast+0x83b>
f0129d7e:	83 ec 04             	sub    $0x4,%esp
f0129d81:	68 dc b0 13 f0       	push   $0xf013b0dc
f0129d86:	68 08 0d 00 00       	push   $0xd08
f0129d8b:	68 5a b0 13 f0       	push   $0xf013b05a
f0129d90:	e8 70 64 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0129d95:	c7 85 20 fe ff ff ff 	movl   $0x2ffbff,-0x1e0(%ebp)
f0129d9c:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0129d9f:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f0129da5:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0129da8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129daf:	eb 0e                	jmp    f0129dbf <test_kfreelast+0x865>
		{
			ptr[i] = 5 ;
f0129db1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129db4:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129db7:	01 d0                	add    %edx,%eax
f0129db9:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0129dbc:	ff 45 f4             	incl   -0xc(%ebp)
f0129dbf:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0129dc5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129dc8:	7f e7                	jg     f0129db1 <test_kfreelast+0x857>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0129dca:	e8 ce 2d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129dcf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129dd2:	e8 f1 9f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129dd7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0129dda:	83 ec 0c             	sub    $0xc,%esp
f0129ddd:	68 00 fc 5f 00       	push   $0x5ffc00
f0129de2:	e8 9e da fd ff       	call   f0107885 <kmalloc>
f0129de7:	83 c4 10             	add    $0x10,%esp
f0129dea:	89 85 84 fd ff ff    	mov    %eax,-0x27c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129df0:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f0129df6:	89 c1                	mov    %eax,%ecx
f0129df8:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0129dff:	10 00 00 
f0129e02:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0129e08:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129e0d:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0129e13:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0129e19:	ba 00 00 00 00       	mov    $0x0,%edx
f0129e1e:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0129e24:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0129e2a:	29 d0                	sub    %edx,%eax
f0129e2c:	89 c3                	mov    %eax,%ebx
f0129e2e:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0129e35:	10 00 00 
f0129e38:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0129e3d:	0f b6 d0             	movzbl %al,%edx
f0129e40:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0129e46:	01 d0                	add    %edx,%eax
f0129e48:	48                   	dec    %eax
f0129e49:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0129e4f:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0129e55:	ba 00 00 00 00       	mov    $0x0,%edx
f0129e5a:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0129e60:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0129e66:	29 d0                	sub    %edx,%eax
f0129e68:	01 c3                	add    %eax,%ebx
f0129e6a:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0129e71:	10 00 00 
f0129e74:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0129e79:	0f b6 c0             	movzbl %al,%eax
f0129e7c:	c1 e0 04             	shl    $0x4,%eax
f0129e7f:	89 c2                	mov    %eax,%edx
f0129e81:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0129e87:	01 d0                	add    %edx,%eax
f0129e89:	48                   	dec    %eax
f0129e8a:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0129e90:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0129e96:	ba 00 00 00 00       	mov    $0x0,%edx
f0129e9b:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0129ea1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0129ea7:	29 d0                	sub    %edx,%eax
f0129ea9:	01 d8                	add    %ebx,%eax
f0129eab:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0129eb0:	39 c1                	cmp    %eax,%ecx
f0129eb2:	74 17                	je     f0129ecb <test_kfreelast+0x971>
f0129eb4:	83 ec 04             	sub    $0x4,%esp
f0129eb7:	68 40 b1 13 f0       	push   $0xf013b140
f0129ebc:	68 14 0d 00 00       	push   $0xd14
f0129ec1:	68 5a b0 13 f0       	push   $0xf013b05a
f0129ec6:	e8 3a 63 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129ecb:	e8 f8 9e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129ed0:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129ed3:	74 17                	je     f0129eec <test_kfreelast+0x992>
f0129ed5:	83 ec 04             	sub    $0x4,%esp
f0129ed8:	68 74 b0 13 f0       	push   $0xf013b074
f0129edd:	68 15 0d 00 00       	push   $0xd15
f0129ee2:	68 5a b0 13 f0       	push   $0xf013b05a
f0129ee7:	e8 19 63 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129eec:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129eef:	e8 a9 2c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129ef4:	29 c3                	sub    %eax,%ebx
f0129ef6:	89 d8                	mov    %ebx,%eax
f0129ef8:	3d 00 06 00 00       	cmp    $0x600,%eax
f0129efd:	74 17                	je     f0129f16 <test_kfreelast+0x9bc>
f0129eff:	83 ec 04             	sub    $0x4,%esp
f0129f02:	68 dc b0 13 f0       	push   $0xf013b0dc
f0129f07:	68 16 0d 00 00       	push   $0xd16
f0129f0c:	68 5a b0 13 f0       	push   $0xf013b05a
f0129f11:	e8 ef 62 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0129f16:	c7 85 24 fe ff ff ff 	movl   $0x5ffbff,-0x1dc(%ebp)
f0129f1d:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0129f20:	e8 78 2c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f0129f25:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129f28:	e8 9b 9e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129f2d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0129f30:	83 ec 0c             	sub    $0xc,%esp
f0129f33:	68 00 38 00 00       	push   $0x3800
f0129f38:	e8 48 d9 fd ff       	call   f0107885 <kmalloc>
f0129f3d:	83 c4 10             	add    $0x10,%esp
f0129f40:	89 85 88 fd ff ff    	mov    %eax,-0x278(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129f46:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f0129f4c:	89 c1                	mov    %eax,%ecx
f0129f4e:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0129f55:	10 00 00 
f0129f58:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0129f5e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129f63:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0129f69:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0129f6f:	ba 00 00 00 00       	mov    $0x0,%edx
f0129f74:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0129f7a:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0129f80:	29 d0                	sub    %edx,%eax
f0129f82:	89 c3                	mov    %eax,%ebx
f0129f84:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0129f8b:	10 00 00 
f0129f8e:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0129f93:	0f b6 d0             	movzbl %al,%edx
f0129f96:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0129f9c:	01 d0                	add    %edx,%eax
f0129f9e:	48                   	dec    %eax
f0129f9f:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0129fa5:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129fab:	ba 00 00 00 00       	mov    $0x0,%edx
f0129fb0:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0129fb6:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129fbc:	29 d0                	sub    %edx,%eax
f0129fbe:	01 c3                	add    %eax,%ebx
f0129fc0:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0129fc7:	10 00 00 
f0129fca:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0129fcf:	0f b6 c0             	movzbl %al,%eax
f0129fd2:	c1 e0 04             	shl    $0x4,%eax
f0129fd5:	89 c2                	mov    %eax,%edx
f0129fd7:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0129fdd:	01 d0                	add    %edx,%eax
f0129fdf:	48                   	dec    %eax
f0129fe0:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0129fe6:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0129fec:	ba 00 00 00 00       	mov    $0x0,%edx
f0129ff1:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0129ff7:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0129ffd:	29 d0                	sub    %edx,%eax
f0129fff:	01 d8                	add    %ebx,%eax
f012a001:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012a006:	39 c1                	cmp    %eax,%ecx
f012a008:	74 17                	je     f012a021 <test_kfreelast+0xac7>
f012a00a:	83 ec 04             	sub    $0x4,%esp
f012a00d:	68 40 b1 13 f0       	push   $0xf013b140
f012a012:	68 1d 0d 00 00       	push   $0xd1d
f012a017:	68 5a b0 13 f0       	push   $0xf013b05a
f012a01c:	e8 e4 61 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a021:	e8 a2 9d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a026:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a029:	74 17                	je     f012a042 <test_kfreelast+0xae8>
f012a02b:	83 ec 04             	sub    $0x4,%esp
f012a02e:	68 74 b0 13 f0       	push   $0xf013b074
f012a033:	68 1e 0d 00 00       	push   $0xd1e
f012a038:	68 5a b0 13 f0       	push   $0xf013b05a
f012a03d:	e8 c3 61 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a042:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a045:	e8 53 2b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a04a:	29 c3                	sub    %eax,%ebx
f012a04c:	89 d8                	mov    %ebx,%eax
f012a04e:	83 f8 04             	cmp    $0x4,%eax
f012a051:	74 17                	je     f012a06a <test_kfreelast+0xb10>
f012a053:	83 ec 04             	sub    $0x4,%esp
f012a056:	68 dc b0 13 f0       	push   $0xf013b0dc
f012a05b:	68 1f 0d 00 00       	push   $0xd1f
f012a060:	68 5a b0 13 f0       	push   $0xf013b05a
f012a065:	e8 9b 61 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f012a06a:	c7 85 28 fe ff ff ff 	movl   $0x37ff,-0x1d8(%ebp)
f012a071:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f012a074:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012a07a:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012a07d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a084:	eb 0e                	jmp    f012a094 <test_kfreelast+0xb3a>
		{
			ptr[i] = 7 ;
f012a086:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a089:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a08c:	01 d0                	add    %edx,%eax
f012a08e:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012a091:	ff 45 f4             	incl   -0xc(%ebp)
f012a094:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012a09a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a09d:	7f e7                	jg     f012a086 <test_kfreelast+0xb2c>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f012a09f:	e8 f9 2a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a0a4:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012a0aa:	e8 19 9d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a0af:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[0]);
f012a0b5:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012a0bb:	83 ec 0c             	sub    $0xc,%esp
f012a0be:	50                   	push   %eax
f012a0bf:	e8 8c d8 fd ff       	call   f0107950 <kfree>
f012a0c4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a0c7:	e8 fc 9c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a0cc:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012a0d2:	74 17                	je     f012a0eb <test_kfreelast+0xb91>
f012a0d4:	83 ec 04             	sub    $0x4,%esp
f012a0d7:	68 74 b0 13 f0       	push   $0xf013b074
f012a0dc:	68 2e 0d 00 00       	push   $0xd2e
f012a0e1:	68 5a b0 13 f0       	push   $0xf013b05a
f012a0e6:	e8 1a 61 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012a0eb:	e8 ad 2a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a0f0:	89 c2                	mov    %eax,%edx
f012a0f2:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012a0f8:	29 c2                	sub    %eax,%edx
f012a0fa:	89 d0                	mov    %edx,%eax
f012a0fc:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a101:	74 17                	je     f012a11a <test_kfreelast+0xbc0>
f012a103:	83 ec 04             	sub    $0x4,%esp
f012a106:	68 e4 b7 13 f0       	push   $0xf013b7e4
f012a10b:	68 2f 0d 00 00       	push   $0xd2f
f012a110:	68 5a b0 13 f0       	push   $0xf013b05a
f012a115:	e8 eb 60 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012a11a:	e8 7e 2a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a11f:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a125:	e8 9e 9c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a12a:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[1]);
f012a130:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f012a136:	83 ec 0c             	sub    $0xc,%esp
f012a139:	50                   	push   %eax
f012a13a:	e8 11 d8 fd ff       	call   f0107950 <kfree>
f012a13f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a142:	e8 81 9c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a147:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012a14d:	74 17                	je     f012a166 <test_kfreelast+0xc0c>
f012a14f:	83 ec 04             	sub    $0x4,%esp
f012a152:	68 74 b0 13 f0       	push   $0xf013b074
f012a157:	68 35 0d 00 00       	push   $0xd35
f012a15c:	68 5a b0 13 f0       	push   $0xf013b05a
f012a161:	e8 9f 60 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012a166:	e8 32 2a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a16b:	89 c2                	mov    %eax,%edx
f012a16d:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012a173:	29 c2                	sub    %eax,%edx
f012a175:	89 d0                	mov    %edx,%eax
f012a177:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a17c:	74 17                	je     f012a195 <test_kfreelast+0xc3b>
f012a17e:	83 ec 04             	sub    $0x4,%esp
f012a181:	68 e4 b7 13 f0       	push   $0xf013b7e4
f012a186:	68 36 0d 00 00       	push   $0xd36
f012a18b:	68 5a b0 13 f0       	push   $0xf013b05a
f012a190:	e8 70 60 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012a195:	e8 03 2a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a19a:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a1a0:	e8 23 9c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a1a5:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[6]);
f012a1ab:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f012a1b1:	83 ec 0c             	sub    $0xc,%esp
f012a1b4:	50                   	push   %eax
f012a1b5:	e8 96 d7 fd ff       	call   f0107950 <kfree>
f012a1ba:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a1bd:	e8 06 9c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a1c2:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012a1c8:	74 17                	je     f012a1e1 <test_kfreelast+0xc87>
f012a1ca:	83 ec 04             	sub    $0x4,%esp
f012a1cd:	68 74 b0 13 f0       	push   $0xf013b074
f012a1d2:	68 3c 0d 00 00       	push   $0xd3c
f012a1d7:	68 5a b0 13 f0       	push   $0xf013b05a
f012a1dc:	e8 24 60 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012a1e1:	e8 b7 29 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a1e6:	89 c2                	mov    %eax,%edx
f012a1e8:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012a1ee:	29 c2                	sub    %eax,%edx
f012a1f0:	89 d0                	mov    %edx,%eax
f012a1f2:	3d 00 06 00 00       	cmp    $0x600,%eax
f012a1f7:	74 17                	je     f012a210 <test_kfreelast+0xcb6>
f012a1f9:	83 ec 04             	sub    $0x4,%esp
f012a1fc:	68 e4 b7 13 f0       	push   $0xf013b7e4
f012a201:	68 3d 0d 00 00       	push   $0xd3d
f012a206:	68 5a b0 13 f0       	push   $0xf013b05a
f012a20b:	e8 f5 5f fd ff       	call   f0100205 <_panic>
	}

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f012a210:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012a216:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012a219:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a220:	eb 1e                	jmp    f012a240 <test_kfreelast+0xce6>
		{
			sums[2] += ptr[i] ;
f012a222:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012a228:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a22b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a22e:	01 c8                	add    %ecx,%eax
f012a230:	8a 00                	mov    (%eax),%al
f012a232:	0f be c0             	movsbl %al,%eax
f012a235:	01 d0                	add    %edx,%eax
f012a237:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012a23d:	ff 45 f4             	incl   -0xc(%ebp)
f012a240:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012a246:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a249:	7f d7                	jg     f012a222 <test_kfreelast+0xcc8>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f012a24b:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012a251:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012a257:	01 c0                	add    %eax,%eax
f012a259:	39 c2                	cmp    %eax,%edx
f012a25b:	74 17                	je     f012a274 <test_kfreelast+0xd1a>
f012a25d:	83 ec 04             	sub    $0x4,%esp
f012a260:	68 40 b8 13 f0       	push   $0xf013b840
f012a265:	68 48 0d 00 00       	push   $0xd48
f012a26a:	68 5a b0 13 f0       	push   $0xf013b05a
f012a26f:	e8 91 5f fd ff       	call   f0100205 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f012a274:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012a27a:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012a27d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a284:	eb 1e                	jmp    f012a2a4 <test_kfreelast+0xd4a>
		{
			sums[3] += ptr[i] ;
f012a286:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012a28c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a28f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a292:	01 c8                	add    %ecx,%eax
f012a294:	8a 00                	mov    (%eax),%al
f012a296:	0f be c0             	movsbl %al,%eax
f012a299:	01 d0                	add    %edx,%eax
f012a29b:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012a2a1:	ff 45 f4             	incl   -0xc(%ebp)
f012a2a4:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012a2aa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a2ad:	7f d7                	jg     f012a286 <test_kfreelast+0xd2c>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f012a2af:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012a2b5:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012a2bb:	89 c1                	mov    %eax,%ecx
f012a2bd:	01 c9                	add    %ecx,%ecx
f012a2bf:	01 c8                	add    %ecx,%eax
f012a2c1:	39 c2                	cmp    %eax,%edx
f012a2c3:	74 17                	je     f012a2dc <test_kfreelast+0xd82>
f012a2c5:	83 ec 04             	sub    $0x4,%esp
f012a2c8:	68 40 b8 13 f0       	push   $0xf013b840
f012a2cd:	68 50 0d 00 00       	push   $0xd50
f012a2d2:	68 5a b0 13 f0       	push   $0xf013b05a
f012a2d7:	e8 29 5f fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f012a2dc:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012a2e2:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012a2e5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a2ec:	eb 1e                	jmp    f012a30c <test_kfreelast+0xdb2>
		{
			sums[4] += ptr[i] ;
f012a2ee:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012a2f4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a2f7:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a2fa:	01 c8                	add    %ecx,%eax
f012a2fc:	8a 00                	mov    (%eax),%al
f012a2fe:	0f be c0             	movsbl %al,%eax
f012a301:	01 d0                	add    %edx,%eax
f012a303:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012a309:	ff 45 f4             	incl   -0xc(%ebp)
f012a30c:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012a312:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a315:	7f d7                	jg     f012a2ee <test_kfreelast+0xd94>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f012a317:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f012a31d:	8b 95 1c fe ff ff    	mov    -0x1e4(%ebp),%edx
f012a323:	c1 e2 02             	shl    $0x2,%edx
f012a326:	39 d0                	cmp    %edx,%eax
f012a328:	74 17                	je     f012a341 <test_kfreelast+0xde7>
f012a32a:	83 ec 04             	sub    $0x4,%esp
f012a32d:	68 40 b8 13 f0       	push   $0xf013b840
f012a332:	68 58 0d 00 00       	push   $0xd58
f012a337:	68 5a b0 13 f0       	push   $0xf013b05a
f012a33c:	e8 c4 5e fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f012a341:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012a347:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012a34a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a351:	eb 1e                	jmp    f012a371 <test_kfreelast+0xe17>
		{
			sums[5] += ptr[i] ;
f012a353:	8b 95 d0 fd ff ff    	mov    -0x230(%ebp),%edx
f012a359:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a35c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a35f:	01 c8                	add    %ecx,%eax
f012a361:	8a 00                	mov    (%eax),%al
f012a363:	0f be c0             	movsbl %al,%eax
f012a366:	01 d0                	add    %edx,%eax
f012a368:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012a36e:	ff 45 f4             	incl   -0xc(%ebp)
f012a371:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012a377:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a37a:	7f d7                	jg     f012a353 <test_kfreelast+0xdf9>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f012a37c:	8b 8d d0 fd ff ff    	mov    -0x230(%ebp),%ecx
f012a382:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f012a388:	89 d0                	mov    %edx,%eax
f012a38a:	c1 e0 02             	shl    $0x2,%eax
f012a38d:	01 d0                	add    %edx,%eax
f012a38f:	39 c1                	cmp    %eax,%ecx
f012a391:	74 17                	je     f012a3aa <test_kfreelast+0xe50>
f012a393:	83 ec 04             	sub    $0x4,%esp
f012a396:	68 40 b8 13 f0       	push   $0xf013b840
f012a39b:	68 60 0d 00 00       	push   $0xd60
f012a3a0:	68 5a b0 13 f0       	push   $0xf013b05a
f012a3a5:	e8 5b 5e fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f012a3aa:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012a3b0:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012a3b3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a3ba:	eb 1e                	jmp    f012a3da <test_kfreelast+0xe80>
		{
			sums[7] += ptr[i] ;
f012a3bc:	8b 95 d8 fd ff ff    	mov    -0x228(%ebp),%edx
f012a3c2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a3c5:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a3c8:	01 c8                	add    %ecx,%eax
f012a3ca:	8a 00                	mov    (%eax),%al
f012a3cc:	0f be c0             	movsbl %al,%eax
f012a3cf:	01 d0                	add    %edx,%eax
f012a3d1:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012a3d7:	ff 45 f4             	incl   -0xc(%ebp)
f012a3da:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012a3e0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a3e3:	7f d7                	jg     f012a3bc <test_kfreelast+0xe62>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f012a3e5:	8b 8d d8 fd ff ff    	mov    -0x228(%ebp),%ecx
f012a3eb:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f012a3f1:	89 d0                	mov    %edx,%eax
f012a3f3:	01 c0                	add    %eax,%eax
f012a3f5:	01 d0                	add    %edx,%eax
f012a3f7:	01 c0                	add    %eax,%eax
f012a3f9:	01 d0                	add    %edx,%eax
f012a3fb:	39 c1                	cmp    %eax,%ecx
f012a3fd:	74 17                	je     f012a416 <test_kfreelast+0xebc>
f012a3ff:	83 ec 04             	sub    $0x4,%esp
f012a402:	68 40 b8 13 f0       	push   $0xf013b840
f012a407:	68 68 0d 00 00       	push   $0xd68
f012a40c:	68 5a b0 13 f0       	push   $0xf013b05a
f012a411:	e8 ef 5d fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f012a416:	e8 82 27 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a41b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a41e:	e8 a5 99 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a423:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f012a426:	83 ec 0c             	sub    $0xc,%esp
f012a429:	68 00 50 00 00       	push   $0x5000
f012a42e:	e8 52 d4 fd ff       	call   f0107885 <kmalloc>
f012a433:	83 c4 10             	add    $0x10,%esp
f012a436:	89 85 8c fd ff ff    	mov    %eax,-0x274(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a43c:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012a442:	89 c1                	mov    %eax,%ecx
f012a444:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f012a44b:	10 00 00 
f012a44e:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012a454:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a459:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f012a45f:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012a465:	ba 00 00 00 00       	mov    $0x0,%edx
f012a46a:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f012a470:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012a476:	29 d0                	sub    %edx,%eax
f012a478:	89 c3                	mov    %eax,%ebx
f012a47a:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f012a481:	10 00 00 
f012a484:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012a489:	0f b6 d0             	movzbl %al,%edx
f012a48c:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012a492:	01 d0                	add    %edx,%eax
f012a494:	48                   	dec    %eax
f012a495:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f012a49b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012a4a1:	ba 00 00 00 00       	mov    $0x0,%edx
f012a4a6:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f012a4ac:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012a4b2:	29 d0                	sub    %edx,%eax
f012a4b4:	01 c3                	add    %eax,%ebx
f012a4b6:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f012a4bd:	10 00 00 
f012a4c0:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012a4c5:	0f b6 c0             	movzbl %al,%eax
f012a4c8:	c1 e0 04             	shl    $0x4,%eax
f012a4cb:	89 c2                	mov    %eax,%edx
f012a4cd:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012a4d3:	01 d0                	add    %edx,%eax
f012a4d5:	48                   	dec    %eax
f012a4d6:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f012a4dc:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012a4e2:	ba 00 00 00 00       	mov    $0x0,%edx
f012a4e7:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f012a4ed:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012a4f3:	29 d0                	sub    %edx,%eax
f012a4f5:	01 d8                	add    %ebx,%eax
f012a4f7:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012a4fc:	39 c1                	cmp    %eax,%ecx
f012a4fe:	74 17                	je     f012a517 <test_kfreelast+0xfbd>
f012a500:	83 ec 04             	sub    $0x4,%esp
f012a503:	68 40 b1 13 f0       	push   $0xf013b140
f012a508:	68 71 0d 00 00       	push   $0xd71
f012a50d:	68 5a b0 13 f0       	push   $0xf013b05a
f012a512:	e8 ee 5c fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a517:	e8 ac 98 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a51c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a51f:	74 17                	je     f012a538 <test_kfreelast+0xfde>
f012a521:	83 ec 04             	sub    $0x4,%esp
f012a524:	68 74 b0 13 f0       	push   $0xf013b074
f012a529:	68 72 0d 00 00       	push   $0xd72
f012a52e:	68 5a b0 13 f0       	push   $0xf013b05a
f012a533:	e8 cd 5c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a538:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a53b:	e8 5d 26 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a540:	29 c3                	sub    %eax,%ebx
f012a542:	89 d8                	mov    %ebx,%eax
f012a544:	83 f8 05             	cmp    $0x5,%eax
f012a547:	74 17                	je     f012a560 <test_kfreelast+0x1006>
f012a549:	83 ec 04             	sub    $0x4,%esp
f012a54c:	68 dc b0 13 f0       	push   $0xf013b0dc
f012a551:	68 73 0d 00 00       	push   $0xd73
f012a556:	68 5a b0 13 f0       	push   $0xf013b05a
f012a55b:	e8 a5 5c fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f012a560:	c7 85 2c fe ff ff ff 	movl   $0x4fff,-0x1d4(%ebp)
f012a567:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f012a56a:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012a570:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f012a573:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a57a:	eb 0e                	jmp    f012a58a <test_kfreelast+0x1030>
		{
			ptr[i] = 8 ;
f012a57c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a57f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a582:	01 d0                	add    %edx,%eax
f012a584:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f012a587:	ff 45 f4             	incl   -0xc(%ebp)
f012a58a:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012a590:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a593:	7f e7                	jg     f012a57c <test_kfreelast+0x1022>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012a595:	e8 03 26 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a59a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a59d:	e8 26 98 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a5a2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f012a5a5:	83 ec 0c             	sub    $0xc,%esp
f012a5a8:	68 00 00 10 00       	push   $0x100000
f012a5ad:	e8 d3 d2 fd ff       	call   f0107885 <kmalloc>
f012a5b2:	83 c4 10             	add    $0x10,%esp
f012a5b5:	89 85 90 fd ff ff    	mov    %eax,-0x270(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a5bb:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012a5c1:	89 c1                	mov    %eax,%ecx
f012a5c3:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f012a5ca:	10 00 00 
f012a5cd:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012a5d3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a5d8:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f012a5de:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012a5e4:	ba 00 00 00 00       	mov    $0x0,%edx
f012a5e9:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f012a5ef:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012a5f5:	29 d0                	sub    %edx,%eax
f012a5f7:	89 c3                	mov    %eax,%ebx
f012a5f9:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f012a600:	10 00 00 
f012a603:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012a608:	0f b6 d0             	movzbl %al,%edx
f012a60b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012a611:	01 d0                	add    %edx,%eax
f012a613:	48                   	dec    %eax
f012a614:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f012a61a:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012a620:	ba 00 00 00 00       	mov    $0x0,%edx
f012a625:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f012a62b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012a631:	29 d0                	sub    %edx,%eax
f012a633:	01 c3                	add    %eax,%ebx
f012a635:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f012a63c:	10 00 00 
f012a63f:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012a644:	0f b6 c0             	movzbl %al,%eax
f012a647:	c1 e0 04             	shl    $0x4,%eax
f012a64a:	89 c2                	mov    %eax,%edx
f012a64c:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012a652:	01 d0                	add    %edx,%eax
f012a654:	48                   	dec    %eax
f012a655:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f012a65b:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012a661:	ba 00 00 00 00       	mov    $0x0,%edx
f012a666:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f012a66c:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012a672:	29 d0                	sub    %edx,%eax
f012a674:	01 d8                	add    %ebx,%eax
f012a676:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012a67b:	39 c1                	cmp    %eax,%ecx
f012a67d:	74 17                	je     f012a696 <test_kfreelast+0x113c>
f012a67f:	83 ec 04             	sub    $0x4,%esp
f012a682:	68 40 b1 13 f0       	push   $0xf013b140
f012a687:	68 7f 0d 00 00       	push   $0xd7f
f012a68c:	68 5a b0 13 f0       	push   $0xf013b05a
f012a691:	e8 6f 5b fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a696:	e8 2d 97 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a69b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a69e:	74 17                	je     f012a6b7 <test_kfreelast+0x115d>
f012a6a0:	83 ec 04             	sub    $0x4,%esp
f012a6a3:	68 74 b0 13 f0       	push   $0xf013b074
f012a6a8:	68 80 0d 00 00       	push   $0xd80
f012a6ad:	68 5a b0 13 f0       	push   $0xf013b05a
f012a6b2:	e8 4e 5b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a6b7:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a6ba:	e8 de 24 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a6bf:	29 c3                	sub    %eax,%ebx
f012a6c1:	89 d8                	mov    %ebx,%eax
f012a6c3:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a6c8:	74 17                	je     f012a6e1 <test_kfreelast+0x1187>
f012a6ca:	83 ec 04             	sub    $0x4,%esp
f012a6cd:	68 dc b0 13 f0       	push   $0xf013b0dc
f012a6d2:	68 81 0d 00 00       	push   $0xd81
f012a6d7:	68 5a b0 13 f0       	push   $0xf013b05a
f012a6dc:	e8 24 5b fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f012a6e1:	c7 85 30 fe ff ff ff 	movl   $0xfffff,-0x1d0(%ebp)
f012a6e8:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f012a6eb:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012a6f1:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f012a6f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a6fb:	eb 0e                	jmp    f012a70b <test_kfreelast+0x11b1>
		{
			ptr[i] = 9 ;
f012a6fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a700:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a703:	01 d0                	add    %edx,%eax
f012a705:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f012a708:	ff 45 f4             	incl   -0xc(%ebp)
f012a70b:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012a711:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a714:	7f e7                	jg     f012a6fd <test_kfreelast+0x11a3>
		{
			ptr[i] = 9 ;
		}
	}

	ce = 0;
f012a716:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kfree last allocated space
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012a71d:	e8 7b 24 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a722:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a725:	e8 9e 96 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a72a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012a72d:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012a733:	83 ec 0c             	sub    $0xc,%esp
f012a736:	50                   	push   %eax
f012a737:	e8 14 d2 fd ff       	call   f0107950 <kfree>
f012a73c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a73f:	e8 84 96 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a744:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a747:	74 17                	je     f012a760 <test_kfreelast+0x1206>
f012a749:	83 ec 04             	sub    $0x4,%esp
f012a74c:	68 74 b0 13 f0       	push   $0xf013b074
f012a751:	68 91 0d 00 00       	push   $0xd91
f012a756:	68 5a b0 13 f0       	push   $0xf013b05a
f012a75b:	e8 a5 5a fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f012a760:	e8 38 24 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a765:	89 c2                	mov    %eax,%edx
f012a767:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a76a:	29 c2                	sub    %eax,%edx
f012a76c:	89 d0                	mov    %edx,%eax
f012a76e:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a773:	74 17                	je     f012a78c <test_kfreelast+0x1232>
f012a775:	83 ec 04             	sub    $0x4,%esp
f012a778:	68 e4 b7 13 f0       	push   $0xf013b7e4
f012a77d:	68 92 0d 00 00       	push   $0xd92
f012a782:	68 5a b0 13 f0       	push   $0xf013b05a
f012a787:	e8 79 5a fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree last [25%]
	{
		//30 KB
		freeFrames = sys_calculate_free_frames() ;
f012a78c:	e8 0c 24 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a791:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a794:	e8 2f 96 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a799:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[10] = kmalloc(30*kilo);
f012a79c:	83 ec 0c             	sub    $0xc,%esp
f012a79f:	68 00 78 00 00       	push   $0x7800
f012a7a4:	e8 dc d0 fd ff       	call   f0107885 <kmalloc>
f012a7a9:	83 c4 10             	add    $0x10,%esp
f012a7ac:	89 85 94 fd ff ff    	mov    %eax,-0x26c(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a7b2:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012a7b8:	89 c1                	mov    %eax,%ecx
f012a7ba:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f012a7c1:	10 00 00 
f012a7c4:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012a7ca:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a7cf:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f012a7d5:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012a7db:	ba 00 00 00 00       	mov    $0x0,%edx
f012a7e0:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f012a7e6:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012a7ec:	29 d0                	sub    %edx,%eax
f012a7ee:	89 c3                	mov    %eax,%ebx
f012a7f0:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f012a7f7:	10 00 00 
f012a7fa:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012a7ff:	0f b6 d0             	movzbl %al,%edx
f012a802:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012a808:	01 d0                	add    %edx,%eax
f012a80a:	48                   	dec    %eax
f012a80b:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f012a811:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012a817:	ba 00 00 00 00       	mov    $0x0,%edx
f012a81c:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f012a822:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012a828:	29 d0                	sub    %edx,%eax
f012a82a:	01 c3                	add    %eax,%ebx
f012a82c:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f012a833:	10 00 00 
f012a836:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012a83b:	0f b6 c0             	movzbl %al,%eax
f012a83e:	c1 e0 04             	shl    $0x4,%eax
f012a841:	89 c2                	mov    %eax,%edx
f012a843:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012a849:	01 d0                	add    %edx,%eax
f012a84b:	48                   	dec    %eax
f012a84c:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f012a852:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012a858:	ba 00 00 00 00       	mov    $0x0,%edx
f012a85d:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f012a863:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012a869:	29 d0                	sub    %edx,%eax
f012a86b:	01 d8                	add    %ebx,%eax
f012a86d:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012a872:	39 c1                	cmp    %eax,%ecx
f012a874:	74 17                	je     f012a88d <test_kfreelast+0x1333>
f012a876:	83 ec 04             	sub    $0x4,%esp
f012a879:	68 40 b1 13 f0       	push   $0xf013b140
f012a87e:	68 9b 0d 00 00       	push   $0xd9b
f012a883:	68 5a b0 13 f0       	push   $0xf013b05a
f012a888:	e8 78 59 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a88d:	e8 36 95 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a892:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a895:	74 17                	je     f012a8ae <test_kfreelast+0x1354>
f012a897:	83 ec 04             	sub    $0x4,%esp
f012a89a:	68 74 b0 13 f0       	push   $0xf013b074
f012a89f:	68 9c 0d 00 00       	push   $0xd9c
f012a8a4:	68 5a b0 13 f0       	push   $0xf013b05a
f012a8a9:	e8 57 59 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a8ae:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a8b1:	e8 e7 22 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a8b6:	29 c3                	sub    %eax,%ebx
f012a8b8:	89 d8                	mov    %ebx,%eax
f012a8ba:	83 f8 08             	cmp    $0x8,%eax
f012a8bd:	74 17                	je     f012a8d6 <test_kfreelast+0x137c>
f012a8bf:	83 ec 04             	sub    $0x4,%esp
f012a8c2:	68 dc b0 13 f0       	push   $0xf013b0dc
f012a8c7:	68 9d 0d 00 00       	push   $0xd9d
f012a8cc:	68 5a b0 13 f0       	push   $0xf013b05a
f012a8d1:	e8 2f 59 fd ff       	call   f0100205 <_panic>
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
f012a8d6:	c7 85 34 fe ff ff ff 	movl   $0x77ff,-0x1cc(%ebp)
f012a8dd:	77 00 00 
		ptr = (char*)ptr_allocations[10];
f012a8e0:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012a8e6:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f012a8e9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a8f0:	eb 0e                	jmp    f012a900 <test_kfreelast+0x13a6>
		{
			ptr[i] = 10 ;
f012a8f2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a8f5:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a8f8:	01 d0                	add    %edx,%eax
f012a8fa:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f012a8fd:	ff 45 f4             	incl   -0xc(%ebp)
f012a900:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f012a906:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a909:	7f e7                	jg     f012a8f2 <test_kfreelast+0x1398>
		{
			ptr[i] = 10 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012a90b:	e8 8d 22 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012a910:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a913:	e8 b0 94 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a918:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[11] = kmalloc(1*Mega);
f012a91b:	83 ec 0c             	sub    $0xc,%esp
f012a91e:	68 00 00 10 00       	push   $0x100000
f012a923:	e8 5d cf fd ff       	call   f0107885 <kmalloc>
f012a928:	83 c4 10             	add    $0x10,%esp
f012a92b:	89 85 98 fd ff ff    	mov    %eax,-0x268(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a931:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012a937:	89 c1                	mov    %eax,%ecx
f012a939:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f012a940:	10 00 00 
f012a943:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012a949:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a94e:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f012a954:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012a95a:	ba 00 00 00 00       	mov    $0x0,%edx
f012a95f:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f012a965:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012a96b:	29 d0                	sub    %edx,%eax
f012a96d:	89 c3                	mov    %eax,%ebx
f012a96f:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f012a976:	10 00 00 
f012a979:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012a97e:	0f b6 d0             	movzbl %al,%edx
f012a981:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012a987:	01 d0                	add    %edx,%eax
f012a989:	48                   	dec    %eax
f012a98a:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f012a990:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a996:	ba 00 00 00 00       	mov    $0x0,%edx
f012a99b:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f012a9a1:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a9a7:	29 d0                	sub    %edx,%eax
f012a9a9:	01 c3                	add    %eax,%ebx
f012a9ab:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f012a9b2:	10 00 00 
f012a9b5:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012a9ba:	0f b6 c0             	movzbl %al,%eax
f012a9bd:	c1 e0 04             	shl    $0x4,%eax
f012a9c0:	89 c2                	mov    %eax,%edx
f012a9c2:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012a9c8:	01 d0                	add    %edx,%eax
f012a9ca:	48                   	dec    %eax
f012a9cb:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f012a9d1:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012a9d7:	ba 00 00 00 00       	mov    $0x0,%edx
f012a9dc:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f012a9e2:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012a9e8:	29 d0                	sub    %edx,%eax
f012a9ea:	01 d8                	add    %ebx,%eax
f012a9ec:	2d 00 70 2e 09       	sub    $0x92e7000,%eax
f012a9f1:	39 c1                	cmp    %eax,%ecx
f012a9f3:	74 17                	je     f012aa0c <test_kfreelast+0x14b2>
f012a9f5:	83 ec 04             	sub    $0x4,%esp
f012a9f8:	68 40 b1 13 f0       	push   $0xf013b140
f012a9fd:	68 a9 0d 00 00       	push   $0xda9
f012aa02:	68 5a b0 13 f0       	push   $0xf013b05a
f012aa07:	e8 f9 57 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012aa0c:	e8 b7 93 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012aa11:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012aa14:	74 17                	je     f012aa2d <test_kfreelast+0x14d3>
f012aa16:	83 ec 04             	sub    $0x4,%esp
f012aa19:	68 74 b0 13 f0       	push   $0xf013b074
f012aa1e:	68 aa 0d 00 00       	push   $0xdaa
f012aa23:	68 5a b0 13 f0       	push   $0xf013b05a
f012aa28:	e8 d8 57 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012aa2d:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012aa30:	e8 68 21 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012aa35:	29 c3                	sub    %eax,%ebx
f012aa37:	89 d8                	mov    %ebx,%eax
f012aa39:	3d 00 01 00 00       	cmp    $0x100,%eax
f012aa3e:	74 17                	je     f012aa57 <test_kfreelast+0x14fd>
f012aa40:	83 ec 04             	sub    $0x4,%esp
f012aa43:	68 dc b0 13 f0       	push   $0xf013b0dc
f012aa48:	68 ab 0d 00 00       	push   $0xdab
f012aa4d:	68 5a b0 13 f0       	push   $0xf013b05a
f012aa52:	e8 ae 57 fd ff       	call   f0100205 <_panic>
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
f012aa57:	c7 85 38 fe ff ff ff 	movl   $0xfffff,-0x1c8(%ebp)
f012aa5e:	ff 0f 00 
		ptr = (char*)ptr_allocations[11];
f012aa61:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012aa67:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f012aa6a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012aa71:	eb 0e                	jmp    f012aa81 <test_kfreelast+0x1527>
		{
			ptr[i] = 11 ;
f012aa73:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012aa76:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012aa79:	01 d0                	add    %edx,%eax
f012aa7b:	c6 00 0b             	movb   $0xb,(%eax)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f012aa7e:	ff 45 f4             	incl   -0xc(%ebp)
f012aa81:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f012aa87:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012aa8a:	7f e7                	jg     f012aa73 <test_kfreelast+0x1519>
		{
			ptr[i] = 11 ;
		}
	}
	ce += 25;
f012aa8c:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
	cprintf("\nkfreelast: current evaluation = %d%\n", ce);
f012aa90:	83 ec 08             	sub    $0x8,%esp
f012aa93:	ff 75 f0             	pushl  -0x10(%ebp)
f012aa96:	68 8c c0 13 f0       	push   $0xf013c08c
f012aa9b:	e8 6e 62 fd ff       	call   f0100d0e <cprintf>
f012aaa0:	83 c4 10             	add    $0x10,%esp

	int f = 0;
f012aaa3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	//kfree last allocated two spaces
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012aaaa:	e8 ee 20 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012aaaf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012aab2:	e8 11 93 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012aab7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[11]);
f012aaba:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012aac0:	83 ec 0c             	sub    $0xc,%esp
f012aac3:	50                   	push   %eax
f012aac4:	e8 87 ce fd ff       	call   f0107950 <kfree>
f012aac9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012aacc:	e8 f7 92 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012aad1:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012aad4:	74 1d                	je     f012aaf3 <test_kfreelast+0x1599>
f012aad6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aada:	75 17                	jne    f012aaf3 <test_kfreelast+0x1599>
f012aadc:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aae3:	83 ec 0c             	sub    $0xc,%esp
f012aae6:	68 b4 c0 13 f0       	push   $0xf013c0b4
f012aaeb:	e8 1e 62 fd ff       	call   f0100d0e <cprintf>
f012aaf0:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 256) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012aaf3:	e8 a5 20 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012aaf8:	89 c2                	mov    %eax,%edx
f012aafa:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012aafd:	29 c2                	sub    %eax,%edx
f012aaff:	89 d0                	mov    %edx,%eax
f012ab01:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ab06:	74 1d                	je     f012ab25 <test_kfreelast+0x15cb>
f012ab08:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ab0c:	75 17                	jne    f012ab25 <test_kfreelast+0x15cb>
f012ab0e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ab15:	83 ec 0c             	sub    $0xc,%esp
f012ab18:	68 20 c1 13 f0       	push   $0xf013c120
f012ab1d:	e8 ec 61 fd ff       	call   f0100d0e <cprintf>
f012ab22:	83 c4 10             	add    $0x10,%esp

		//kfree 30 KB
		freeFrames = sys_calculate_free_frames() ;
f012ab25:	e8 73 20 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012ab2a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ab2d:	e8 96 92 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ab32:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[10]);
f012ab35:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012ab3b:	83 ec 0c             	sub    $0xc,%esp
f012ab3e:	50                   	push   %eax
f012ab3f:	e8 0c ce fd ff       	call   f0107950 <kfree>
f012ab44:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ab47:	e8 7c 92 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ab4c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ab4f:	74 1d                	je     f012ab6e <test_kfreelast+0x1614>
f012ab51:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ab55:	75 17                	jne    f012ab6e <test_kfreelast+0x1614>
f012ab57:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ab5e:	83 ec 0c             	sub    $0xc,%esp
f012ab61:	68 b4 c0 13 f0       	push   $0xf013c0b4
f012ab66:	e8 a3 61 fd ff       	call   f0100d0e <cprintf>
f012ab6b:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 8) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012ab6e:	e8 2a 20 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012ab73:	89 c2                	mov    %eax,%edx
f012ab75:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012ab78:	29 c2                	sub    %eax,%edx
f012ab7a:	89 d0                	mov    %edx,%eax
f012ab7c:	83 f8 08             	cmp    $0x8,%eax
f012ab7f:	74 1d                	je     f012ab9e <test_kfreelast+0x1644>
f012ab81:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ab85:	75 17                	jne    f012ab9e <test_kfreelast+0x1644>
f012ab87:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ab8e:	83 ec 0c             	sub    $0xc,%esp
f012ab91:	68 20 c1 13 f0       	push   $0xf013c120
f012ab96:	e8 73 61 fd ff       	call   f0100d0e <cprintf>
f012ab9b:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfree last allocated two spaces (in order) [10%]
	{
		//10 KB
		freeFrames = sys_calculate_free_frames() ;
f012ab9e:	e8 fa 1f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012aba3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012aba6:	e8 1d 92 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012abab:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[12] = kmalloc(10*kilo);
f012abae:	83 ec 0c             	sub    $0xc,%esp
f012abb1:	68 00 28 00 00       	push   $0x2800
f012abb6:	e8 ca cc fd ff       	call   f0107885 <kmalloc>
f012abbb:	83 c4 10             	add    $0x10,%esp
f012abbe:	89 85 9c fd ff ff    	mov    %eax,-0x264(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012abc4:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012abca:	89 c1                	mov    %eax,%ecx
f012abcc:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f012abd3:	10 00 00 
f012abd6:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012abdc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012abe1:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f012abe7:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012abed:	ba 00 00 00 00       	mov    $0x0,%edx
f012abf2:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f012abf8:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012abfe:	29 d0                	sub    %edx,%eax
f012ac00:	89 c3                	mov    %eax,%ebx
f012ac02:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f012ac09:	10 00 00 
f012ac0c:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012ac11:	0f b6 d0             	movzbl %al,%edx
f012ac14:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012ac1a:	01 d0                	add    %edx,%eax
f012ac1c:	48                   	dec    %eax
f012ac1d:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f012ac23:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012ac29:	ba 00 00 00 00       	mov    $0x0,%edx
f012ac2e:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f012ac34:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012ac3a:	29 d0                	sub    %edx,%eax
f012ac3c:	01 c3                	add    %eax,%ebx
f012ac3e:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f012ac45:	10 00 00 
f012ac48:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012ac4d:	0f b6 c0             	movzbl %al,%eax
f012ac50:	c1 e0 04             	shl    $0x4,%eax
f012ac53:	89 c2                	mov    %eax,%edx
f012ac55:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012ac5b:	01 d0                	add    %edx,%eax
f012ac5d:	48                   	dec    %eax
f012ac5e:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f012ac64:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012ac6a:	ba 00 00 00 00       	mov    $0x0,%edx
f012ac6f:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f012ac75:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012ac7b:	29 d0                	sub    %edx,%eax
f012ac7d:	01 d8                	add    %ebx,%eax
f012ac7f:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012ac84:	39 c1                	cmp    %eax,%ecx
f012ac86:	74 1d                	je     f012aca5 <test_kfreelast+0x174b>
f012ac88:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ac8c:	75 17                	jne    f012aca5 <test_kfreelast+0x174b>
f012ac8e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ac95:	83 ec 0c             	sub    $0xc,%esp
f012ac98:	68 58 c1 13 f0       	push   $0xf013c158
f012ac9d:	e8 6c 60 fd ff       	call   f0100d0e <cprintf>
f012aca2:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012aca5:	e8 1e 91 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012acaa:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012acad:	74 1d                	je     f012accc <test_kfreelast+0x1772>
f012acaf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012acb3:	75 17                	jne    f012accc <test_kfreelast+0x1772>
f012acb5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012acbc:	83 ec 0c             	sub    $0xc,%esp
f012acbf:	68 b4 c0 13 f0       	push   $0xf013c0b4
f012acc4:	e8 45 60 fd ff       	call   f0100d0e <cprintf>
f012acc9:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012accc:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012accf:	e8 c9 1e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012acd4:	29 c3                	sub    %eax,%ebx
f012acd6:	89 d8                	mov    %ebx,%eax
f012acd8:	83 f8 03             	cmp    $0x3,%eax
f012acdb:	74 1d                	je     f012acfa <test_kfreelast+0x17a0>
f012acdd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ace1:	75 17                	jne    f012acfa <test_kfreelast+0x17a0>
f012ace3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012acea:	83 ec 0c             	sub    $0xc,%esp
f012aced:	68 c0 c1 13 f0       	push   $0xf013c1c0
f012acf2:	e8 17 60 fd ff       	call   f0100d0e <cprintf>
f012acf7:	83 c4 10             	add    $0x10,%esp
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
f012acfa:	c7 85 3c fe ff ff ff 	movl   $0x27ff,-0x1c4(%ebp)
f012ad01:	27 00 00 
		ptr = (char*)ptr_allocations[12];
f012ad04:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012ad0a:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012ad0d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ad14:	eb 0e                	jmp    f012ad24 <test_kfreelast+0x17ca>
		{
			ptr[i] = 12 ;
f012ad16:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ad19:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ad1c:	01 d0                	add    %edx,%eax
f012ad1e:	c6 00 0c             	movb   $0xc,(%eax)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012ad21:	ff 45 f4             	incl   -0xc(%ebp)
f012ad24:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012ad2a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ad2d:	7f e7                	jg     f012ad16 <test_kfreelast+0x17bc>
		{
			ptr[i] = 12 ;
		}
	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012ad2f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ad33:	75 17                	jne    f012ad4c <test_kfreelast+0x17f2>
f012ad35:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012ad39:	83 ec 08             	sub    $0x8,%esp
f012ad3c:	ff 75 f0             	pushl  -0x10(%ebp)
f012ad3f:	68 8c c0 13 f0       	push   $0xf013c08c
f012ad44:	e8 c5 5f fd ff       	call   f0100d0e <cprintf>
f012ad49:	83 c4 10             	add    $0x10,%esp
f012ad4c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
f012ad53:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012ad59:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012ad5c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ad63:	eb 1e                	jmp    f012ad83 <test_kfreelast+0x1829>
		{
			sums[12] += ptr[i] ;
f012ad65:	8b 95 ec fd ff ff    	mov    -0x214(%ebp),%edx
f012ad6b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012ad6e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ad71:	01 c8                	add    %ecx,%eax
f012ad73:	8a 00                	mov    (%eax),%al
f012ad75:	0f be c0             	movsbl %al,%eax
f012ad78:	01 d0                	add    %edx,%eax
f012ad7a:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012ad80:	ff 45 f4             	incl   -0xc(%ebp)
f012ad83:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012ad89:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ad8c:	7f d7                	jg     f012ad65 <test_kfreelast+0x180b>
		{
			sums[12] += ptr[i] ;
		}
		if (sums[12] != 12*lastIndices[12])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012ad8e:	8b 8d ec fd ff ff    	mov    -0x214(%ebp),%ecx
f012ad94:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f012ad9a:	89 d0                	mov    %edx,%eax
f012ad9c:	01 c0                	add    %eax,%eax
f012ad9e:	01 d0                	add    %edx,%eax
f012ada0:	c1 e0 02             	shl    $0x2,%eax
f012ada3:	39 c1                	cmp    %eax,%ecx
f012ada5:	74 1d                	je     f012adc4 <test_kfreelast+0x186a>
f012ada7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012adab:	75 17                	jne    f012adc4 <test_kfreelast+0x186a>
f012adad:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012adb4:	83 ec 0c             	sub    $0xc,%esp
f012adb7:	68 04 c2 13 f0       	push   $0xf013c204
f012adbc:	e8 4d 5f fd ff       	call   f0100d0e <cprintf>
f012adc1:	83 c4 10             	add    $0x10,%esp


		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012adc4:	83 ec 0c             	sub    $0xc,%esp
f012adc7:	6a 03                	push   $0x3
f012adc9:	e8 6f 22 fe ff       	call   f010d03d <sys_bypassPageFault>
f012adce:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[12] + 12*kilo;
f012add1:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012add7:	05 00 30 00 00       	add    $0x3000,%eax
f012addc:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 30*kilo; ++i)
f012addf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ade6:	eb 3c                	jmp    f012ae24 <test_kfreelast+0x18ca>
		{
			ptr[i] = 10;
f012ade8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012adeb:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012adee:	01 d0                	add    %edx,%eax
f012adf0:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012adf3:	e8 33 22 fe ff       	call   f010d02b <sys_rcr2>
f012adf8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012adfb:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012adfe:	01 ca                	add    %ecx,%edx
f012ae00:	39 d0                	cmp    %edx,%eax
f012ae02:	74 1d                	je     f012ae21 <test_kfreelast+0x18c7>
f012ae04:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ae08:	75 17                	jne    f012ae21 <test_kfreelast+0x18c7>
f012ae0a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ae11:	83 ec 0c             	sub    $0xc,%esp
f012ae14:	68 38 c2 13 f0       	push   $0xf013c238
f012ae19:	e8 f0 5e fd ff       	call   f0100d0e <cprintf>
f012ae1e:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[12] + 12*kilo;

		for (i = 0; i < 30*kilo; ++i)
f012ae21:	ff 45 f4             	incl   -0xc(%ebp)
f012ae24:	81 7d f4 ff 77 00 00 	cmpl   $0x77ff,-0xc(%ebp)
f012ae2b:	7e bb                	jle    f012ade8 <test_kfreelast+0x188e>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012ae2d:	83 ec 0c             	sub    $0xc,%esp
f012ae30:	6a 00                	push   $0x0
f012ae32:	e8 06 22 fe ff       	call   f010d03d <sys_bypassPageFault>
f012ae37:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012ae3a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ae3e:	75 17                	jne    f012ae57 <test_kfreelast+0x18fd>
f012ae40:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012ae44:	83 ec 08             	sub    $0x8,%esp
f012ae47:	ff 75 f0             	pushl  -0x10(%ebp)
f012ae4a:	68 8c c0 13 f0       	push   $0xf013c08c
f012ae4f:	e8 ba 5e fd ff       	call   f0100d0e <cprintf>
f012ae54:	83 c4 10             	add    $0x10,%esp
f012ae57:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree last allocated three spaces [but with different order]
	{
		//kfree 10 KB
		freeFrames = sys_calculate_free_frames() ;
f012ae5e:	e8 3a 1d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012ae63:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ae66:	e8 5d 8f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ae6b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[12]);
f012ae6e:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012ae74:	83 ec 0c             	sub    $0xc,%esp
f012ae77:	50                   	push   %eax
f012ae78:	e8 d3 ca fd ff       	call   f0107950 <kfree>
f012ae7d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ae80:	e8 43 8f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ae85:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ae88:	74 1d                	je     f012aea7 <test_kfreelast+0x194d>
f012ae8a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ae8e:	75 17                	jne    f012aea7 <test_kfreelast+0x194d>
f012ae90:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ae97:	83 ec 0c             	sub    $0xc,%esp
f012ae9a:	68 b4 c0 13 f0       	push   $0xf013c0b4
f012ae9f:	e8 6a 5e fd ff       	call   f0100d0e <cprintf>
f012aea4:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012aea7:	e8 f1 1c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012aeac:	89 c2                	mov    %eax,%edx
f012aeae:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012aeb1:	29 c2                	sub    %eax,%edx
f012aeb3:	89 d0                	mov    %edx,%eax
f012aeb5:	83 f8 03             	cmp    $0x3,%eax
f012aeb8:	74 1d                	je     f012aed7 <test_kfreelast+0x197d>
f012aeba:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aebe:	75 17                	jne    f012aed7 <test_kfreelast+0x197d>
f012aec0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aec7:	83 ec 0c             	sub    $0xc,%esp
f012aeca:	68 20 c1 13 f0       	push   $0xf013c120
f012aecf:	e8 3a 5e fd ff       	call   f0100d0e <cprintf>
f012aed4:	83 c4 10             	add    $0x10,%esp

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f012aed7:	e8 c1 1c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012aedc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012aedf:	e8 e4 8e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012aee4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[7]);
f012aee7:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012aeed:	83 ec 0c             	sub    $0xc,%esp
f012aef0:	50                   	push   %eax
f012aef1:	e8 5a ca fd ff       	call   f0107950 <kfree>
f012aef6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012aef9:	e8 ca 8e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012aefe:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012af01:	74 1d                	je     f012af20 <test_kfreelast+0x19c6>
f012af03:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012af07:	75 17                	jne    f012af20 <test_kfreelast+0x19c6>
f012af09:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012af10:	83 ec 0c             	sub    $0xc,%esp
f012af13:	68 b4 c0 13 f0       	push   $0xf013c0b4
f012af18:	e8 f1 5d fd ff       	call   f0100d0e <cprintf>
f012af1d:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 4) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012af20:	e8 78 1c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012af25:	89 c2                	mov    %eax,%edx
f012af27:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012af2a:	29 c2                	sub    %eax,%edx
f012af2c:	89 d0                	mov    %edx,%eax
f012af2e:	83 f8 04             	cmp    $0x4,%eax
f012af31:	74 1d                	je     f012af50 <test_kfreelast+0x19f6>
f012af33:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012af37:	75 17                	jne    f012af50 <test_kfreelast+0x19f6>
f012af39:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012af40:	83 ec 0c             	sub    $0xc,%esp
f012af43:	68 20 c1 13 f0       	push   $0xf013c120
f012af48:	e8 c1 5d fd ff       	call   f0100d0e <cprintf>
f012af4d:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012af50:	e8 48 1c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012af55:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012af58:	e8 6b 8e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012af5d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012af60:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012af66:	83 ec 0c             	sub    $0xc,%esp
f012af69:	50                   	push   %eax
f012af6a:	e8 e1 c9 fd ff       	call   f0107950 <kfree>
f012af6f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012af72:	e8 51 8e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012af77:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012af7a:	74 1d                	je     f012af99 <test_kfreelast+0x1a3f>
f012af7c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012af80:	75 17                	jne    f012af99 <test_kfreelast+0x1a3f>
f012af82:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012af89:	83 ec 0c             	sub    $0xc,%esp
f012af8c:	68 b4 c0 13 f0       	push   $0xf013c0b4
f012af91:	e8 78 5d fd ff       	call   f0100d0e <cprintf>
f012af96:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 5) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012af99:	e8 ff 1b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012af9e:	89 c2                	mov    %eax,%edx
f012afa0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012afa3:	29 c2                	sub    %eax,%edx
f012afa5:	89 d0                	mov    %edx,%eax
f012afa7:	83 f8 05             	cmp    $0x5,%eax
f012afaa:	74 1d                	je     f012afc9 <test_kfreelast+0x1a6f>
f012afac:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012afb0:	75 17                	jne    f012afc9 <test_kfreelast+0x1a6f>
f012afb2:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012afb9:	83 ec 0c             	sub    $0xc,%esp
f012afbc:	68 20 c1 13 f0       	push   $0xf013c120
f012afc1:	e8 48 5d fd ff       	call   f0100d0e <cprintf>
f012afc6:	83 c4 10             	add    $0x10,%esp


	//Allocate after kfree last allocated 3 spaces with different order [25%]
	{
		//50 KB
		freeFrames = sys_calculate_free_frames() ;
f012afc9:	e8 cf 1b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012afce:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012afd1:	e8 f2 8d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012afd6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[13] = kmalloc(50*kilo);
f012afd9:	83 ec 0c             	sub    $0xc,%esp
f012afdc:	68 00 c8 00 00       	push   $0xc800
f012afe1:	e8 9f c8 fd ff       	call   f0107885 <kmalloc>
f012afe6:	83 c4 10             	add    $0x10,%esp
f012afe9:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012afef:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012aff5:	89 c1                	mov    %eax,%ecx
f012aff7:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f012affe:	10 00 00 
f012b001:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012b007:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b00c:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f012b012:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012b018:	ba 00 00 00 00       	mov    $0x0,%edx
f012b01d:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f012b023:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012b029:	29 d0                	sub    %edx,%eax
f012b02b:	89 c3                	mov    %eax,%ebx
f012b02d:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f012b034:	10 00 00 
f012b037:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012b03c:	0f b6 d0             	movzbl %al,%edx
f012b03f:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012b045:	01 d0                	add    %edx,%eax
f012b047:	48                   	dec    %eax
f012b048:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f012b04e:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012b054:	ba 00 00 00 00       	mov    $0x0,%edx
f012b059:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f012b05f:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012b065:	29 d0                	sub    %edx,%eax
f012b067:	01 c3                	add    %eax,%ebx
f012b069:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f012b070:	10 00 00 
f012b073:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012b078:	0f b6 c0             	movzbl %al,%eax
f012b07b:	c1 e0 04             	shl    $0x4,%eax
f012b07e:	89 c2                	mov    %eax,%edx
f012b080:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012b086:	01 d0                	add    %edx,%eax
f012b088:	48                   	dec    %eax
f012b089:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f012b08f:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012b095:	ba 00 00 00 00       	mov    $0x0,%edx
f012b09a:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f012b0a0:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012b0a6:	29 d0                	sub    %edx,%eax
f012b0a8:	01 d8                	add    %ebx,%eax
f012b0aa:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012b0af:	39 c1                	cmp    %eax,%ecx
f012b0b1:	74 1d                	je     f012b0d0 <test_kfreelast+0x1b76>
f012b0b3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b0b7:	75 17                	jne    f012b0d0 <test_kfreelast+0x1b76>
f012b0b9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b0c0:	83 ec 0c             	sub    $0xc,%esp
f012b0c3:	68 58 c1 13 f0       	push   $0xf013c158
f012b0c8:	e8 41 5c fd ff       	call   f0100d0e <cprintf>
f012b0cd:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b0d0:	e8 f3 8c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b0d5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b0d8:	74 1d                	je     f012b0f7 <test_kfreelast+0x1b9d>
f012b0da:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b0de:	75 17                	jne    f012b0f7 <test_kfreelast+0x1b9d>
f012b0e0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b0e7:	83 ec 0c             	sub    $0xc,%esp
f012b0ea:	68 b4 c0 13 f0       	push   $0xf013c0b4
f012b0ef:	e8 1a 5c fd ff       	call   f0100d0e <cprintf>
f012b0f4:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012b0f7:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b0fa:	e8 9e 1a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b0ff:	29 c3                	sub    %eax,%ebx
f012b101:	89 d8                	mov    %ebx,%eax
f012b103:	83 f8 0d             	cmp    $0xd,%eax
f012b106:	74 1d                	je     f012b125 <test_kfreelast+0x1bcb>
f012b108:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b10c:	75 17                	jne    f012b125 <test_kfreelast+0x1bcb>
f012b10e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b115:	83 ec 0c             	sub    $0xc,%esp
f012b118:	68 c0 c1 13 f0       	push   $0xf013c1c0
f012b11d:	e8 ec 5b fd ff       	call   f0100d0e <cprintf>
f012b122:	83 c4 10             	add    $0x10,%esp
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
f012b125:	c7 85 40 fe ff ff ff 	movl   $0xc7ff,-0x1c0(%ebp)
f012b12c:	c7 00 00 
		ptr = (char*)ptr_allocations[13];
f012b12f:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012b135:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f012b138:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b13f:	eb 0e                	jmp    f012b14f <test_kfreelast+0x1bf5>
		{
			ptr[i] = 13 ;
f012b141:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b144:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b147:	01 d0                	add    %edx,%eax
f012b149:	c6 00 0d             	movb   $0xd,(%eax)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f012b14c:	ff 45 f4             	incl   -0xc(%ebp)
f012b14f:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012b155:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b158:	7f e7                	jg     f012b141 <test_kfreelast+0x1be7>
		{
			ptr[i] = 13 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012b15a:	e8 3e 1a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b15f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b162:	e8 61 8c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b167:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[14] = kmalloc(3*Mega-kilo);
f012b16a:	83 ec 0c             	sub    $0xc,%esp
f012b16d:	68 00 fc 2f 00       	push   $0x2ffc00
f012b172:	e8 0e c7 fd ff       	call   f0107885 <kmalloc>
f012b177:	83 c4 10             	add    $0x10,%esp
f012b17a:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012b180:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012b186:	89 c1                	mov    %eax,%ecx
f012b188:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f012b18f:	10 00 00 
f012b192:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b198:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b19d:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f012b1a3:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012b1a9:	ba 00 00 00 00       	mov    $0x0,%edx
f012b1ae:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f012b1b4:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012b1ba:	29 d0                	sub    %edx,%eax
f012b1bc:	89 c3                	mov    %eax,%ebx
f012b1be:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f012b1c5:	10 00 00 
f012b1c8:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012b1cd:	0f b6 d0             	movzbl %al,%edx
f012b1d0:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b1d6:	01 d0                	add    %edx,%eax
f012b1d8:	48                   	dec    %eax
f012b1d9:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f012b1df:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b1e5:	ba 00 00 00 00       	mov    $0x0,%edx
f012b1ea:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f012b1f0:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b1f6:	29 d0                	sub    %edx,%eax
f012b1f8:	01 c3                	add    %eax,%ebx
f012b1fa:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f012b201:	10 00 00 
f012b204:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012b209:	0f b6 c0             	movzbl %al,%eax
f012b20c:	c1 e0 04             	shl    $0x4,%eax
f012b20f:	89 c2                	mov    %eax,%edx
f012b211:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012b217:	01 d0                	add    %edx,%eax
f012b219:	48                   	dec    %eax
f012b21a:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f012b220:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b226:	ba 00 00 00 00       	mov    $0x0,%edx
f012b22b:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f012b231:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b237:	29 d0                	sub    %edx,%eax
f012b239:	01 d8                	add    %ebx,%eax
f012b23b:	2d 00 b0 8e 09       	sub    $0x98eb000,%eax
f012b240:	39 c1                	cmp    %eax,%ecx
f012b242:	74 1d                	je     f012b261 <test_kfreelast+0x1d07>
f012b244:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b248:	75 17                	jne    f012b261 <test_kfreelast+0x1d07>
f012b24a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b251:	83 ec 0c             	sub    $0xc,%esp
f012b254:	68 58 c1 13 f0       	push   $0xf013c158
f012b259:	e8 b0 5a fd ff       	call   f0100d0e <cprintf>
f012b25e:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b261:	e8 62 8b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b266:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b269:	74 1d                	je     f012b288 <test_kfreelast+0x1d2e>
f012b26b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b26f:	75 17                	jne    f012b288 <test_kfreelast+0x1d2e>
f012b271:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b278:	83 ec 0c             	sub    $0xc,%esp
f012b27b:	68 b4 c0 13 f0       	push   $0xf013c0b4
f012b280:	e8 89 5a fd ff       	call   f0100d0e <cprintf>
f012b285:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012b288:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b28b:	e8 0d 19 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b290:	29 c3                	sub    %eax,%ebx
f012b292:	89 d8                	mov    %ebx,%eax
f012b294:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b299:	74 1d                	je     f012b2b8 <test_kfreelast+0x1d5e>
f012b29b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b29f:	75 17                	jne    f012b2b8 <test_kfreelast+0x1d5e>
f012b2a1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b2a8:	83 ec 0c             	sub    $0xc,%esp
f012b2ab:	68 c0 c1 13 f0       	push   $0xf013c1c0
f012b2b0:	e8 59 5a fd ff       	call   f0100d0e <cprintf>
f012b2b5:	83 c4 10             	add    $0x10,%esp
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
f012b2b8:	c7 85 44 fe ff ff ff 	movl   $0x2ffbff,-0x1bc(%ebp)
f012b2bf:	fb 2f 00 
		ptr = (char*)ptr_allocations[14];
f012b2c2:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012b2c8:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012b2cb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b2d2:	eb 0e                	jmp    f012b2e2 <test_kfreelast+0x1d88>
		{
			ptr[i] = 14 ;
f012b2d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b2d7:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b2da:	01 d0                	add    %edx,%eax
f012b2dc:	c6 00 0e             	movb   $0xe,(%eax)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012b2df:	ff 45 f4             	incl   -0xc(%ebp)
f012b2e2:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012b2e8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b2eb:	7f e7                	jg     f012b2d4 <test_kfreelast+0x1d7a>
		{
			ptr[i] = 14 ;
		}
	}

	if (!f) {ce += 25;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b2ed:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b2f1:	75 17                	jne    f012b30a <test_kfreelast+0x1db0>
f012b2f3:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
f012b2f7:	83 ec 08             	sub    $0x8,%esp
f012b2fa:	ff 75 f0             	pushl  -0x10(%ebp)
f012b2fd:	68 8c c0 13 f0       	push   $0xf013c08c
f012b302:	e8 07 5a fd ff       	call   f0100d0e <cprintf>
f012b307:	83 c4 10             	add    $0x10,%esp
f012b30a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree one of the newly allocated space that override a previously allocated one
	{
		//kfree 50 KB
		freeFrames = sys_calculate_free_frames() ;
f012b311:	e8 87 18 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b316:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b319:	e8 aa 8a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b31e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[13]);
f012b321:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012b327:	83 ec 0c             	sub    $0xc,%esp
f012b32a:	50                   	push   %eax
f012b32b:	e8 20 c6 fd ff       	call   f0107950 <kfree>
f012b330:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b333:	e8 90 8a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b338:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b33b:	74 1d                	je     f012b35a <test_kfreelast+0x1e00>
f012b33d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b341:	75 17                	jne    f012b35a <test_kfreelast+0x1e00>
f012b343:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b34a:	83 ec 0c             	sub    $0xc,%esp
f012b34d:	68 b4 c0 13 f0       	push   $0xf013c0b4
f012b352:	e8 b7 59 fd ff       	call   f0100d0e <cprintf>
f012b357:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 13) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b35a:	e8 3e 18 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b35f:	89 c2                	mov    %eax,%edx
f012b361:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b364:	29 c2                	sub    %eax,%edx
f012b366:	89 d0                	mov    %edx,%eax
f012b368:	83 f8 0d             	cmp    $0xd,%eax
f012b36b:	74 1d                	je     f012b38a <test_kfreelast+0x1e30>
f012b36d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b371:	75 17                	jne    f012b38a <test_kfreelast+0x1e30>
f012b373:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b37a:	83 ec 0c             	sub    $0xc,%esp
f012b37d:	68 20 c1 13 f0       	push   $0xf013c120
f012b382:	e8 87 59 fd ff       	call   f0100d0e <cprintf>
f012b387:	83 c4 10             	add    $0x10,%esp
	{
		//50 KB

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012b38a:	83 ec 0c             	sub    $0xc,%esp
f012b38d:	6a 03                	push   $0x3
f012b38f:	e8 a9 1c fe ff       	call   f010d03d <sys_bypassPageFault>
f012b394:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[13];
f012b397:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012b39d:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 50*kilo; ++i)
f012b3a0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b3a7:	eb 3c                	jmp    f012b3e5 <test_kfreelast+0x1e8b>
		{
			ptr[i] = 10;
f012b3a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b3ac:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b3af:	01 d0                	add    %edx,%eax
f012b3b1:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012b3b4:	e8 72 1c fe ff       	call   f010d02b <sys_rcr2>
f012b3b9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b3bc:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012b3bf:	01 ca                	add    %ecx,%edx
f012b3c1:	39 d0                	cmp    %edx,%eax
f012b3c3:	74 1d                	je     f012b3e2 <test_kfreelast+0x1e88>
f012b3c5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b3c9:	75 17                	jne    f012b3e2 <test_kfreelast+0x1e88>
f012b3cb:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b3d2:	83 ec 0c             	sub    $0xc,%esp
f012b3d5:	68 38 c2 13 f0       	push   $0xf013c238
f012b3da:	e8 2f 59 fd ff       	call   f0100d0e <cprintf>
f012b3df:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[13];

		for (i = 0; i < 50*kilo; ++i)
f012b3e2:	ff 45 f4             	incl   -0xc(%ebp)
f012b3e5:	81 7d f4 ff c7 00 00 	cmpl   $0xc7ff,-0xc(%ebp)
f012b3ec:	7e bb                	jle    f012b3a9 <test_kfreelast+0x1e4f>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012b3ee:	83 ec 0c             	sub    $0xc,%esp
f012b3f1:	6a 00                	push   $0x0
f012b3f3:	e8 45 1c fe ff       	call   f010d03d <sys_bypassPageFault>
f012b3f8:	83 c4 10             	add    $0x10,%esp


		//3 MB
		ptr = (char*)ptr_allocations[14];
f012b3fb:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012b401:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012b404:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b40b:	eb 1e                	jmp    f012b42b <test_kfreelast+0x1ed1>
		{
			sums[14] += ptr[i] ;
f012b40d:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012b413:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b416:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b419:	01 c8                	add    %ecx,%eax
f012b41b:	8a 00                	mov    (%eax),%al
f012b41d:	0f be c0             	movsbl %al,%eax
f012b420:	01 d0                	add    %edx,%eax
f012b422:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		sys_bypassPageFault(0);


		//3 MB
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012b428:	ff 45 f4             	incl   -0xc(%ebp)
f012b42b:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012b431:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b434:	7f d7                	jg     f012b40d <test_kfreelast+0x1eb3>
		{
			sums[14] += ptr[i] ;
		}
		if (sums[14] != 14*lastIndices[14])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012b436:	8b 8d f4 fd ff ff    	mov    -0x20c(%ebp),%ecx
f012b43c:	8b 95 44 fe ff ff    	mov    -0x1bc(%ebp),%edx
f012b442:	89 d0                	mov    %edx,%eax
f012b444:	01 c0                	add    %eax,%eax
f012b446:	01 d0                	add    %edx,%eax
f012b448:	01 c0                	add    %eax,%eax
f012b44a:	01 d0                	add    %edx,%eax
f012b44c:	01 c0                	add    %eax,%eax
f012b44e:	39 c1                	cmp    %eax,%ecx
f012b450:	74 1d                	je     f012b46f <test_kfreelast+0x1f15>
f012b452:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b456:	75 17                	jne    f012b46f <test_kfreelast+0x1f15>
f012b458:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b45f:	83 ec 0c             	sub    $0xc,%esp
f012b462:	68 04 c2 13 f0       	push   $0xf013c204
f012b467:	e8 a2 58 fd ff       	call   f0100d0e <cprintf>
f012b46c:	83 c4 10             	add    $0x10,%esp
	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b46f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b473:	75 17                	jne    f012b48c <test_kfreelast+0x1f32>
f012b475:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012b479:	83 ec 08             	sub    $0x8,%esp
f012b47c:	ff 75 f0             	pushl  -0x10(%ebp)
f012b47f:	68 8c c0 13 f0       	push   $0xf013c08c
f012b484:	e8 85 58 fd ff       	call   f0100d0e <cprintf>
f012b489:	83 c4 10             	add    $0x10,%esp
f012b48c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree all remaining allocations
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f012b493:	e8 05 17 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b498:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b49b:	e8 28 89 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b4a0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[4]);
f012b4a3:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012b4a9:	83 ec 0c             	sub    $0xc,%esp
f012b4ac:	50                   	push   %eax
f012b4ad:	e8 9e c4 fd ff       	call   f0107950 <kfree>
f012b4b2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b4b5:	e8 0e 89 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b4ba:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b4bd:	74 1d                	je     f012b4dc <test_kfreelast+0x1f82>
f012b4bf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b4c3:	75 17                	jne    f012b4dc <test_kfreelast+0x1f82>
f012b4c5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b4cc:	83 ec 0c             	sub    $0xc,%esp
f012b4cf:	68 b4 c0 13 f0       	push   $0xf013c0b4
f012b4d4:	e8 35 58 fd ff       	call   f0100d0e <cprintf>
f012b4d9:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 2) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b4dc:	e8 bc 16 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b4e1:	89 c2                	mov    %eax,%edx
f012b4e3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b4e6:	29 c2                	sub    %eax,%edx
f012b4e8:	89 d0                	mov    %edx,%eax
f012b4ea:	83 f8 02             	cmp    $0x2,%eax
f012b4ed:	74 1d                	je     f012b50c <test_kfreelast+0x1fb2>
f012b4ef:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b4f3:	75 17                	jne    f012b50c <test_kfreelast+0x1fb2>
f012b4f5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b4fc:	83 ec 0c             	sub    $0xc,%esp
f012b4ff:	68 20 c1 13 f0       	push   $0xf013c120
f012b504:	e8 05 58 fd ff       	call   f0100d0e <cprintf>
f012b509:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012b50c:	e8 8c 16 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b511:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b514:	e8 af 88 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b519:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[14]);
f012b51c:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012b522:	83 ec 0c             	sub    $0xc,%esp
f012b525:	50                   	push   %eax
f012b526:	e8 25 c4 fd ff       	call   f0107950 <kfree>
f012b52b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b52e:	e8 95 88 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b533:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b536:	74 1d                	je     f012b555 <test_kfreelast+0x1ffb>
f012b538:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b53c:	75 17                	jne    f012b555 <test_kfreelast+0x1ffb>
f012b53e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b545:	83 ec 0c             	sub    $0xc,%esp
f012b548:	68 b4 c0 13 f0       	push   $0xf013c0b4
f012b54d:	e8 bc 57 fd ff       	call   f0100d0e <cprintf>
f012b552:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b555:	e8 43 16 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b55a:	89 c2                	mov    %eax,%edx
f012b55c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b55f:	29 c2                	sub    %eax,%edx
f012b561:	89 d0                	mov    %edx,%eax
f012b563:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b568:	74 1d                	je     f012b587 <test_kfreelast+0x202d>
f012b56a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b56e:	75 17                	jne    f012b587 <test_kfreelast+0x202d>
f012b570:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b577:	83 ec 0c             	sub    $0xc,%esp
f012b57a:	68 20 c1 13 f0       	push   $0xf013c120
f012b57f:	e8 8a 57 fd ff       	call   f0100d0e <cprintf>
f012b584:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012b587:	e8 11 16 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b58c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b58f:	e8 34 88 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b594:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[5]);
f012b597:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012b59d:	83 ec 0c             	sub    $0xc,%esp
f012b5a0:	50                   	push   %eax
f012b5a1:	e8 aa c3 fd ff       	call   f0107950 <kfree>
f012b5a6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b5a9:	e8 1a 88 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b5ae:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b5b1:	74 1d                	je     f012b5d0 <test_kfreelast+0x2076>
f012b5b3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b5b7:	75 17                	jne    f012b5d0 <test_kfreelast+0x2076>
f012b5b9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b5c0:	83 ec 0c             	sub    $0xc,%esp
f012b5c3:	68 b4 c0 13 f0       	push   $0xf013c0b4
f012b5c8:	e8 41 57 fd ff       	call   f0100d0e <cprintf>
f012b5cd:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b5d0:	e8 c8 15 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b5d5:	89 c2                	mov    %eax,%edx
f012b5d7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b5da:	29 c2                	sub    %eax,%edx
f012b5dc:	89 d0                	mov    %edx,%eax
f012b5de:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b5e3:	74 1d                	je     f012b602 <test_kfreelast+0x20a8>
f012b5e5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b5e9:	75 17                	jne    f012b602 <test_kfreelast+0x20a8>
f012b5eb:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b5f2:	83 ec 0c             	sub    $0xc,%esp
f012b5f5:	68 20 c1 13 f0       	push   $0xf013c120
f012b5fa:	e8 0f 57 fd ff       	call   f0100d0e <cprintf>
f012b5ff:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012b602:	e8 96 15 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b607:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b60a:	e8 b9 87 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b60f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012b612:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012b618:	83 ec 0c             	sub    $0xc,%esp
f012b61b:	50                   	push   %eax
f012b61c:	e8 2f c3 fd ff       	call   f0107950 <kfree>
f012b621:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b624:	e8 9f 87 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b629:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b62c:	74 1d                	je     f012b64b <test_kfreelast+0x20f1>
f012b62e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b632:	75 17                	jne    f012b64b <test_kfreelast+0x20f1>
f012b634:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b63b:	83 ec 0c             	sub    $0xc,%esp
f012b63e:	68 b4 c0 13 f0       	push   $0xf013c0b4
f012b643:	e8 c6 56 fd ff       	call   f0100d0e <cprintf>
f012b648:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b64b:	e8 4d 15 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b650:	89 c2                	mov    %eax,%edx
f012b652:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b655:	29 c2                	sub    %eax,%edx
f012b657:	89 d0                	mov    %edx,%eax
f012b659:	83 f8 01             	cmp    $0x1,%eax
f012b65c:	74 1d                	je     f012b67b <test_kfreelast+0x2121>
f012b65e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b662:	75 17                	jne    f012b67b <test_kfreelast+0x2121>
f012b664:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b66b:	83 ec 0c             	sub    $0xc,%esp
f012b66e:	68 20 c1 13 f0       	push   $0xf013c120
f012b673:	e8 96 56 fd ff       	call   f0100d0e <cprintf>
f012b678:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012b67b:	e8 1d 15 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b680:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b683:	e8 40 87 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b688:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[3]);
f012b68b:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012b691:	83 ec 0c             	sub    $0xc,%esp
f012b694:	50                   	push   %eax
f012b695:	e8 b6 c2 fd ff       	call   f0107950 <kfree>
f012b69a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b69d:	e8 26 87 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b6a2:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b6a5:	74 1d                	je     f012b6c4 <test_kfreelast+0x216a>
f012b6a7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b6ab:	75 17                	jne    f012b6c4 <test_kfreelast+0x216a>
f012b6ad:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b6b4:	83 ec 0c             	sub    $0xc,%esp
f012b6b7:	68 b4 c0 13 f0       	push   $0xf013c0b4
f012b6bc:	e8 4d 56 fd ff       	call   f0100d0e <cprintf>
f012b6c1:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b6c4:	e8 d4 14 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b6c9:	89 c2                	mov    %eax,%edx
f012b6cb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b6ce:	29 c2                	sub    %eax,%edx
f012b6d0:	89 d0                	mov    %edx,%eax
f012b6d2:	83 f8 01             	cmp    $0x1,%eax
f012b6d5:	74 1d                	je     f012b6f4 <test_kfreelast+0x219a>
f012b6d7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b6db:	75 17                	jne    f012b6f4 <test_kfreelast+0x219a>
f012b6dd:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b6e4:	83 ec 0c             	sub    $0xc,%esp
f012b6e7:	68 20 c1 13 f0       	push   $0xf013c120
f012b6ec:	e8 1d 56 fd ff       	call   f0100d0e <cprintf>
f012b6f1:	83 c4 10             	add    $0x10,%esp

		if(start_freeFrames != (sys_calculate_free_frames())) if (!f) {f=1; cprintf("\nWrong kfree: not all pages removed correctly at end");}
f012b6f4:	e8 a4 14 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b6f9:	89 c2                	mov    %eax,%edx
f012b6fb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012b6fe:	39 c2                	cmp    %eax,%edx
f012b700:	74 1d                	je     f012b71f <test_kfreelast+0x21c5>
f012b702:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b706:	75 17                	jne    f012b71f <test_kfreelast+0x21c5>
f012b708:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b70f:	83 ec 0c             	sub    $0xc,%esp
f012b712:	68 80 c2 13 f0       	push   $0xf013c280
f012b717:	e8 f2 55 fd ff       	call   f0100d0e <cprintf>
f012b71c:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012b71f:	83 ec 0c             	sub    $0xc,%esp
f012b722:	6a 03                	push   $0x3
f012b724:	e8 14 19 fe ff       	call   f010d03d <sys_bypassPageFault>
f012b729:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 15; ++i)
f012b72c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b733:	e9 8e 00 00 00       	jmp    f012b7c6 <test_kfreelast+0x226c>
		{
			ptr = (char *) ptr_allocations[i];
f012b738:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012b73b:	8b 84 85 6c fd ff ff 	mov    -0x294(%ebp,%eax,4),%eax
f012b742:	89 45 84             	mov    %eax,-0x7c(%ebp)
			ptr[0] = 10;
f012b745:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b748:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012b74b:	e8 db 18 fe ff       	call   f010d02b <sys_rcr2>
f012b750:	89 c2                	mov    %eax,%edx
f012b752:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b755:	39 c2                	cmp    %eax,%edx
f012b757:	74 1d                	je     f012b776 <test_kfreelast+0x221c>
f012b759:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b75d:	75 17                	jne    f012b776 <test_kfreelast+0x221c>
f012b75f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b766:	83 ec 0c             	sub    $0xc,%esp
f012b769:	68 38 c2 13 f0       	push   $0xf013c238
f012b76e:	e8 9b 55 fd ff       	call   f0100d0e <cprintf>
f012b773:	83 c4 10             	add    $0x10,%esp
			ptr[lastIndices[i]] = 10;
f012b776:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012b779:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012b780:	89 c2                	mov    %eax,%edx
f012b782:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b785:	01 d0                	add    %edx,%eax
f012b787:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012b78a:	e8 9c 18 fe ff       	call   f010d02b <sys_rcr2>
f012b78f:	89 c2                	mov    %eax,%edx
f012b791:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012b794:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012b79b:	89 c1                	mov    %eax,%ecx
f012b79d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b7a0:	01 c8                	add    %ecx,%eax
f012b7a2:	39 c2                	cmp    %eax,%edx
f012b7a4:	74 1d                	je     f012b7c3 <test_kfreelast+0x2269>
f012b7a6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b7aa:	75 17                	jne    f012b7c3 <test_kfreelast+0x2269>
f012b7ac:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b7b3:	83 ec 0c             	sub    $0xc,%esp
f012b7b6:	68 38 c2 13 f0       	push   $0xf013c238
f012b7bb:	e8 4e 55 fd ff       	call   f0100d0e <cprintf>
f012b7c0:	83 c4 10             	add    $0x10,%esp
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 15; ++i)
f012b7c3:	ff 45 f4             	incl   -0xc(%ebp)
f012b7c6:	83 7d f4 0e          	cmpl   $0xe,-0xc(%ebp)
f012b7ca:	0f 8e 68 ff ff ff    	jle    f012b738 <test_kfreelast+0x21de>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012b7d0:	83 ec 0c             	sub    $0xc,%esp
f012b7d3:	6a 00                	push   $0x0
f012b7d5:	e8 63 18 fe ff       	call   f010d03d <sys_bypassPageFault>
f012b7da:	83 c4 10             	add    $0x10,%esp
	}

	//kfree non-exist item
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012b7dd:	e8 bb 13 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b7e2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b7e5:	e8 de 85 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b7ea:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[0]);
f012b7ed:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012b7f3:	83 ec 0c             	sub    $0xc,%esp
f012b7f6:	50                   	push   %eax
f012b7f7:	e8 54 c1 fd ff       	call   f0107950 <kfree>
f012b7fc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b7ff:	e8 c4 85 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b804:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b807:	74 1d                	je     f012b826 <test_kfreelast+0x22cc>
f012b809:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b80d:	75 17                	jne    f012b826 <test_kfreelast+0x22cc>
f012b80f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b816:	83 ec 0c             	sub    $0xc,%esp
f012b819:	68 b4 c0 13 f0       	push   $0xf013c0b4
f012b81e:	e8 eb 54 fd ff       	call   f0100d0e <cprintf>
f012b823:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012b826:	e8 72 13 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b82b:	89 c2                	mov    %eax,%edx
f012b82d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b830:	39 c2                	cmp    %eax,%edx
f012b832:	74 1d                	je     f012b851 <test_kfreelast+0x22f7>
f012b834:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b838:	75 17                	jne    f012b851 <test_kfreelast+0x22f7>
f012b83a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b841:	83 ec 0c             	sub    $0xc,%esp
f012b844:	68 b8 c2 13 f0       	push   $0xf013c2b8
f012b849:	e8 c0 54 fd ff       	call   f0100d0e <cprintf>
f012b84e:	83 c4 10             	add    $0x10,%esp

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012b851:	e8 47 13 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b856:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b859:	e8 6a 85 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b85e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012b861:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012b867:	83 ec 0c             	sub    $0xc,%esp
f012b86a:	50                   	push   %eax
f012b86b:	e8 e0 c0 fd ff       	call   f0107950 <kfree>
f012b870:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b873:	e8 50 85 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b878:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b87b:	74 1d                	je     f012b89a <test_kfreelast+0x2340>
f012b87d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b881:	75 17                	jne    f012b89a <test_kfreelast+0x2340>
f012b883:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b88a:	83 ec 0c             	sub    $0xc,%esp
f012b88d:	68 b4 c0 13 f0       	push   $0xf013c0b4
f012b892:	e8 77 54 fd ff       	call   f0100d0e <cprintf>
f012b897:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012b89a:	e8 fe 12 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b89f:	89 c2                	mov    %eax,%edx
f012b8a1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b8a4:	39 c2                	cmp    %eax,%edx
f012b8a6:	74 1d                	je     f012b8c5 <test_kfreelast+0x236b>
f012b8a8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b8ac:	75 17                	jne    f012b8c5 <test_kfreelast+0x236b>
f012b8ae:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b8b5:	83 ec 0c             	sub    $0xc,%esp
f012b8b8:	68 b8 c2 13 f0       	push   $0xf013c2b8
f012b8bd:	e8 4c 54 fd ff       	call   f0100d0e <cprintf>
f012b8c2:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012b8c5:	e8 d3 12 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b8ca:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b8cd:	e8 f6 84 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b8d2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012b8d5:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012b8db:	83 ec 0c             	sub    $0xc,%esp
f012b8de:	50                   	push   %eax
f012b8df:	e8 6c c0 fd ff       	call   f0107950 <kfree>
f012b8e4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b8e7:	e8 dc 84 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b8ec:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b8ef:	74 1d                	je     f012b90e <test_kfreelast+0x23b4>
f012b8f1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b8f5:	75 17                	jne    f012b90e <test_kfreelast+0x23b4>
f012b8f7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b8fe:	83 ec 0c             	sub    $0xc,%esp
f012b901:	68 b4 c0 13 f0       	push   $0xf013c0b4
f012b906:	e8 03 54 fd ff       	call   f0100d0e <cprintf>
f012b90b:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012b90e:	e8 8a 12 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b913:	89 c2                	mov    %eax,%edx
f012b915:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b918:	39 c2                	cmp    %eax,%edx
f012b91a:	74 1d                	je     f012b939 <test_kfreelast+0x23df>
f012b91c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b920:	75 17                	jne    f012b939 <test_kfreelast+0x23df>
f012b922:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b929:	83 ec 0c             	sub    $0xc,%esp
f012b92c:	68 b8 c2 13 f0       	push   $0xf013c2b8
f012b931:	e8 d8 53 fd ff       	call   f0100d0e <cprintf>
f012b936:	83 c4 10             	add    $0x10,%esp

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012b939:	e8 5f 12 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b93e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b941:	e8 82 84 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b946:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012b949:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012b94f:	83 ec 0c             	sub    $0xc,%esp
f012b952:	50                   	push   %eax
f012b953:	e8 f8 bf fd ff       	call   f0107950 <kfree>
f012b958:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b95b:	e8 68 84 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b960:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b963:	74 1d                	je     f012b982 <test_kfreelast+0x2428>
f012b965:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b969:	75 17                	jne    f012b982 <test_kfreelast+0x2428>
f012b96b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b972:	83 ec 0c             	sub    $0xc,%esp
f012b975:	68 b4 c0 13 f0       	push   $0xf013c0b4
f012b97a:	e8 8f 53 fd ff       	call   f0100d0e <cprintf>
f012b97f:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012b982:	e8 16 12 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012b987:	89 c2                	mov    %eax,%edx
f012b989:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b98c:	39 c2                	cmp    %eax,%edx
f012b98e:	74 1d                	je     f012b9ad <test_kfreelast+0x2453>
f012b990:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b994:	75 17                	jne    f012b9ad <test_kfreelast+0x2453>
f012b996:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b99d:	83 ec 0c             	sub    $0xc,%esp
f012b9a0:	68 b8 c2 13 f0       	push   $0xf013c2b8
f012b9a5:	e8 64 53 fd ff       	call   f0100d0e <cprintf>
f012b9aa:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b9ad:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b9b1:	75 17                	jne    f012b9ca <test_kfreelast+0x2470>
f012b9b3:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012b9b7:	83 ec 08             	sub    $0x8,%esp
f012b9ba:	ff 75 f0             	pushl  -0x10(%ebp)
f012b9bd:	68 8c c0 13 f0       	push   $0xf013c08c
f012b9c2:	e8 47 53 fd ff       	call   f0100d0e <cprintf>
f012b9c7:	83 c4 10             	add    $0x10,%esp
f012b9ca:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//cprintf("\nCongratulations!! your modification is run successfully.\n");

	return 1;
f012b9d1:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012b9d6:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012b9d9:	5b                   	pop    %ebx
f012b9da:	5f                   	pop    %edi
f012b9db:	5d                   	pop    %ebp
f012b9dc:	c3                   	ret    

f012b9dd <test_krealloc>:

int test_krealloc() {
f012b9dd:	55                   	push   %ebp
f012b9de:	89 e5                	mov    %esp,%ebp
f012b9e0:	57                   	push   %edi
f012b9e1:	53                   	push   %ebx
f012b9e2:	81 ec 50 02 00 00    	sub    $0x250,%esp
	cprintf("==============================================\n");
f012b9e8:	83 ec 0c             	sub    $0xc,%esp
f012b9eb:	68 9c af 13 f0       	push   $0xf013af9c
f012b9f0:	e8 19 53 fd ff       	call   f0100d0e <cprintf>
f012b9f5:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012b9f8:	83 ec 0c             	sub    $0xc,%esp
f012b9fb:	68 cc af 13 f0       	push   $0xf013afcc
f012ba00:	e8 09 53 fd ff       	call   f0100d0e <cprintf>
f012ba05:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012ba08:	83 ec 0c             	sub    $0xc,%esp
f012ba0b:	68 9c af 13 f0       	push   $0xf013af9c
f012ba10:	e8 f9 52 fd ff       	call   f0100d0e <cprintf>
f012ba15:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012ba18:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012ba1c:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012ba20:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012ba26:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012ba2c:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012ba33:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012ba3a:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f012ba40:	b9 14 00 00 00       	mov    $0x14,%ecx
f012ba45:	b8 00 00 00 00       	mov    $0x0,%eax
f012ba4a:	89 d7                	mov    %edx,%edi
f012ba4c:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012ba4e:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012ba55:	8d 95 08 fe ff ff    	lea    -0x1f8(%ebp),%edx
f012ba5b:	b9 14 00 00 00       	mov    $0x14,%ecx
f012ba60:	b8 00 00 00 00       	mov    $0x0,%eax
f012ba65:	89 d7                	mov    %edx,%edi
f012ba67:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012ba69:	8d 95 b8 fd ff ff    	lea    -0x248(%ebp),%edx
f012ba6f:	b9 14 00 00 00       	mov    $0x14,%ecx
f012ba74:	b8 00 00 00 00       	mov    $0x0,%eax
f012ba79:	89 d7                	mov    %edx,%edi
f012ba7b:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012ba7d:	e8 1b 11 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012ba82:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012ba85:	83 ec 08             	sub    $0x8,%esp
f012ba88:	68 00 fc 0f 00       	push   $0xffc00
f012ba8d:	6a 00                	push   $0x0
f012ba8f:	e8 b1 c0 fd ff       	call   f0107b45 <krealloc>
f012ba94:	83 c4 10             	add    $0x10,%esp
f012ba97:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012ba9d:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012baa3:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012baa8:	77 17                	ja     f012bac1 <test_krealloc+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012baaa:	83 ec 04             	sub    $0x4,%esp
f012baad:	68 00 c3 13 f0       	push   $0xf013c300
f012bab2:	68 e2 0e 00 00       	push   $0xee2
f012bab7:	68 5a b0 13 f0       	push   $0xf013b05a
f012babc:	e8 44 47 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012bac1:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012bac7:	89 c1                	mov    %eax,%ecx
f012bac9:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012bad0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012bad3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012bad8:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012badb:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012bade:	ba 00 00 00 00       	mov    $0x0,%edx
f012bae3:	f7 75 b4             	divl   -0x4c(%ebp)
f012bae6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012bae9:	29 d0                	sub    %edx,%eax
f012baeb:	89 c3                	mov    %eax,%ebx
f012baed:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012baf4:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012baf9:	0f b6 d0             	movzbl %al,%edx
f012bafc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012baff:	01 d0                	add    %edx,%eax
f012bb01:	48                   	dec    %eax
f012bb02:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012bb05:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012bb08:	ba 00 00 00 00       	mov    $0x0,%edx
f012bb0d:	f7 75 ac             	divl   -0x54(%ebp)
f012bb10:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012bb13:	29 d0                	sub    %edx,%eax
f012bb15:	01 c3                	add    %eax,%ebx
f012bb17:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012bb1e:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012bb23:	0f b6 c0             	movzbl %al,%eax
f012bb26:	c1 e0 04             	shl    $0x4,%eax
f012bb29:	89 c2                	mov    %eax,%edx
f012bb2b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012bb2e:	01 d0                	add    %edx,%eax
f012bb30:	48                   	dec    %eax
f012bb31:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012bb34:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012bb37:	ba 00 00 00 00       	mov    $0x0,%edx
f012bb3c:	f7 75 a4             	divl   -0x5c(%ebp)
f012bb3f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012bb42:	29 d0                	sub    %edx,%eax
f012bb44:	01 d8                	add    %ebx,%eax
f012bb46:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012bb4b:	39 c1                	cmp    %eax,%ecx
f012bb4d:	74 17                	je     f012bb66 <test_krealloc+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012bb4f:	83 ec 04             	sub    $0x4,%esp
f012bb52:	68 3c c3 13 f0       	push   $0xf013c33c
f012bb57:	68 e4 0e 00 00       	push   $0xee4
f012bb5c:	68 5a b0 13 f0       	push   $0xf013b05a
f012bb61:	e8 9f 46 fd ff       	call   f0100205 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012bb66:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bb69:	e8 2f 10 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012bb6e:	29 c3                	sub    %eax,%ebx
f012bb70:	89 d8                	mov    %ebx,%eax
f012bb72:	3d 00 01 00 00       	cmp    $0x100,%eax
f012bb77:	74 17                	je     f012bb90 <test_krealloc+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012bb79:	83 ec 04             	sub    $0x4,%esp
f012bb7c:	68 6e c3 13 f0       	push   $0xf013c36e
f012bb81:	68 e7 0e 00 00       	push   $0xee7
f012bb86:	68 5a b0 13 f0       	push   $0xf013b05a
f012bb8b:	e8 75 46 fd ff       	call   f0100205 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012bb90:	c7 85 08 fe ff ff ff 	movl   $0xffbff,-0x1f8(%ebp)
f012bb97:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012bb9a:	e8 fe 0f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012bb9f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012bba2:	83 ec 08             	sub    $0x8,%esp
f012bba5:	68 00 fc 0f 00       	push   $0xffc00
f012bbaa:	6a 00                	push   $0x0
f012bbac:	e8 94 bf fd ff       	call   f0107b45 <krealloc>
f012bbb1:	83 c4 10             	add    $0x10,%esp
f012bbb4:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012bbba:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012bbc0:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012bbc5:	77 17                	ja     f012bbde <test_krealloc+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bbc7:	83 ec 04             	sub    $0x4,%esp
f012bbca:	68 00 c3 13 f0       	push   $0xf013c300
f012bbcf:	68 ef 0e 00 00       	push   $0xeef
f012bbd4:	68 5a b0 13 f0       	push   $0xf013b05a
f012bbd9:	e8 27 46 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012bbde:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012bbe4:	89 c1                	mov    %eax,%ecx
f012bbe6:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012bbed:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012bbf0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012bbf5:	89 45 98             	mov    %eax,-0x68(%ebp)
f012bbf8:	8b 45 98             	mov    -0x68(%ebp),%eax
f012bbfb:	ba 00 00 00 00       	mov    $0x0,%edx
f012bc00:	f7 75 9c             	divl   -0x64(%ebp)
f012bc03:	8b 45 98             	mov    -0x68(%ebp),%eax
f012bc06:	29 d0                	sub    %edx,%eax
f012bc08:	89 c3                	mov    %eax,%ebx
f012bc0a:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012bc11:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012bc16:	0f b6 d0             	movzbl %al,%edx
f012bc19:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012bc1c:	01 d0                	add    %edx,%eax
f012bc1e:	48                   	dec    %eax
f012bc1f:	89 45 90             	mov    %eax,-0x70(%ebp)
f012bc22:	8b 45 90             	mov    -0x70(%ebp),%eax
f012bc25:	ba 00 00 00 00       	mov    $0x0,%edx
f012bc2a:	f7 75 94             	divl   -0x6c(%ebp)
f012bc2d:	8b 45 90             	mov    -0x70(%ebp),%eax
f012bc30:	29 d0                	sub    %edx,%eax
f012bc32:	01 c3                	add    %eax,%ebx
f012bc34:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012bc3b:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012bc40:	0f b6 c0             	movzbl %al,%eax
f012bc43:	c1 e0 04             	shl    $0x4,%eax
f012bc46:	89 c2                	mov    %eax,%edx
f012bc48:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012bc4b:	01 d0                	add    %edx,%eax
f012bc4d:	48                   	dec    %eax
f012bc4e:	89 45 88             	mov    %eax,-0x78(%ebp)
f012bc51:	8b 45 88             	mov    -0x78(%ebp),%eax
f012bc54:	ba 00 00 00 00       	mov    $0x0,%edx
f012bc59:	f7 75 8c             	divl   -0x74(%ebp)
f012bc5c:	8b 45 88             	mov    -0x78(%ebp),%eax
f012bc5f:	29 d0                	sub    %edx,%eax
f012bc61:	01 d8                	add    %ebx,%eax
f012bc63:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012bc68:	39 c1                	cmp    %eax,%ecx
f012bc6a:	74 17                	je     f012bc83 <test_krealloc+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012bc6c:	83 ec 04             	sub    $0x4,%esp
f012bc6f:	68 3c c3 13 f0       	push   $0xf013c33c
f012bc74:	68 f1 0e 00 00       	push   $0xef1
f012bc79:	68 5a b0 13 f0       	push   $0xf013b05a
f012bc7e:	e8 82 45 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012bc83:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bc86:	e8 12 0f fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012bc8b:	29 c3                	sub    %eax,%ebx
f012bc8d:	89 d8                	mov    %ebx,%eax
f012bc8f:	3d 00 01 00 00       	cmp    $0x100,%eax
f012bc94:	74 17                	je     f012bcad <test_krealloc+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012bc96:	83 ec 04             	sub    $0x4,%esp
f012bc99:	68 6e c3 13 f0       	push   $0xf013c36e
f012bc9e:	68 f3 0e 00 00       	push   $0xef3
f012bca3:	68 5a b0 13 f0       	push   $0xf013b05a
f012bca8:	e8 58 45 fd ff       	call   f0100205 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012bcad:	c7 85 0c fe ff ff ff 	movl   $0xffbff,-0x1f4(%ebp)
f012bcb4:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012bcb7:	e8 e1 0e fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012bcbc:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012bcbf:	83 ec 08             	sub    $0x8,%esp
f012bcc2:	68 00 fc 0f 00       	push   $0xffc00
f012bcc7:	6a 00                	push   $0x0
f012bcc9:	e8 77 be fd ff       	call   f0107b45 <krealloc>
f012bcce:	83 c4 10             	add    $0x10,%esp
f012bcd1:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012bcd7:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012bcdd:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012bce2:	77 17                	ja     f012bcfb <test_krealloc+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bce4:	83 ec 04             	sub    $0x4,%esp
f012bce7:	68 00 c3 13 f0       	push   $0xf013c300
f012bcec:	68 fb 0e 00 00       	push   $0xefb
f012bcf1:	68 5a b0 13 f0       	push   $0xf013b05a
f012bcf6:	e8 0a 45 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012bcfb:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012bd01:	89 c1                	mov    %eax,%ecx
f012bd03:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012bd0a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bd0d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012bd12:	89 45 80             	mov    %eax,-0x80(%ebp)
f012bd15:	8b 45 80             	mov    -0x80(%ebp),%eax
f012bd18:	ba 00 00 00 00       	mov    $0x0,%edx
f012bd1d:	f7 75 84             	divl   -0x7c(%ebp)
f012bd20:	8b 45 80             	mov    -0x80(%ebp),%eax
f012bd23:	29 d0                	sub    %edx,%eax
f012bd25:	89 c3                	mov    %eax,%ebx
f012bd27:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012bd2e:	10 00 00 
f012bd31:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012bd36:	0f b6 d0             	movzbl %al,%edx
f012bd39:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012bd3f:	01 d0                	add    %edx,%eax
f012bd41:	48                   	dec    %eax
f012bd42:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012bd48:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012bd4e:	ba 00 00 00 00       	mov    $0x0,%edx
f012bd53:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012bd59:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012bd5f:	29 d0                	sub    %edx,%eax
f012bd61:	01 c3                	add    %eax,%ebx
f012bd63:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012bd6a:	10 00 00 
f012bd6d:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012bd72:	0f b6 c0             	movzbl %al,%eax
f012bd75:	c1 e0 04             	shl    $0x4,%eax
f012bd78:	89 c2                	mov    %eax,%edx
f012bd7a:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012bd80:	01 d0                	add    %edx,%eax
f012bd82:	48                   	dec    %eax
f012bd83:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012bd89:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012bd8f:	ba 00 00 00 00       	mov    $0x0,%edx
f012bd94:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012bd9a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012bda0:	29 d0                	sub    %edx,%eax
f012bda2:	01 d8                	add    %ebx,%eax
f012bda4:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012bda9:	39 c1                	cmp    %eax,%ecx
f012bdab:	74 17                	je     f012bdc4 <test_krealloc+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012bdad:	83 ec 04             	sub    $0x4,%esp
f012bdb0:	68 3c c3 13 f0       	push   $0xf013c33c
f012bdb5:	68 fd 0e 00 00       	push   $0xefd
f012bdba:	68 5a b0 13 f0       	push   $0xf013b05a
f012bdbf:	e8 41 44 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012bdc4:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bdc7:	e8 d1 0d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012bdcc:	29 c3                	sub    %eax,%ebx
f012bdce:	89 d8                	mov    %ebx,%eax
f012bdd0:	3d 00 01 00 00       	cmp    $0x100,%eax
f012bdd5:	74 17                	je     f012bdee <test_krealloc+0x411>
			panic("krealloc: Wrong allocation: ");
f012bdd7:	83 ec 04             	sub    $0x4,%esp
f012bdda:	68 6e c3 13 f0       	push   $0xf013c36e
f012bddf:	68 ff 0e 00 00       	push   $0xeff
f012bde4:	68 5a b0 13 f0       	push   $0xf013b05a
f012bde9:	e8 17 44 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012bdee:	c7 85 10 fe ff ff ff 	movl   $0x3feff,-0x1f0(%ebp)
f012bdf5:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012bdf8:	e8 a0 0d fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012bdfd:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012be00:	83 ec 08             	sub    $0x8,%esp
f012be03:	68 00 fc 0f 00       	push   $0xffc00
f012be08:	6a 00                	push   $0x0
f012be0a:	e8 36 bd fd ff       	call   f0107b45 <krealloc>
f012be0f:	83 c4 10             	add    $0x10,%esp
f012be12:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012be18:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012be1e:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012be23:	77 17                	ja     f012be3c <test_krealloc+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012be25:	83 ec 04             	sub    $0x4,%esp
f012be28:	68 00 c3 13 f0       	push   $0xf013c300
f012be2d:	68 06 0f 00 00       	push   $0xf06
f012be32:	68 5a b0 13 f0       	push   $0xf013b05a
f012be37:	e8 c9 43 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012be3c:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012be42:	89 c1                	mov    %eax,%ecx
f012be44:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012be4b:	10 00 00 
f012be4e:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012be54:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012be59:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012be5f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012be65:	ba 00 00 00 00       	mov    $0x0,%edx
f012be6a:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012be70:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012be76:	29 d0                	sub    %edx,%eax
f012be78:	89 c3                	mov    %eax,%ebx
f012be7a:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012be81:	10 00 00 
f012be84:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012be89:	0f b6 d0             	movzbl %al,%edx
f012be8c:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012be92:	01 d0                	add    %edx,%eax
f012be94:	48                   	dec    %eax
f012be95:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012be9b:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012bea1:	ba 00 00 00 00       	mov    $0x0,%edx
f012bea6:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012beac:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012beb2:	29 d0                	sub    %edx,%eax
f012beb4:	01 c3                	add    %eax,%ebx
f012beb6:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012bebd:	10 00 00 
f012bec0:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012bec5:	0f b6 c0             	movzbl %al,%eax
f012bec8:	c1 e0 04             	shl    $0x4,%eax
f012becb:	89 c2                	mov    %eax,%edx
f012becd:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012bed3:	01 d0                	add    %edx,%eax
f012bed5:	48                   	dec    %eax
f012bed6:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012bedc:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012bee2:	ba 00 00 00 00       	mov    $0x0,%edx
f012bee7:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012beed:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012bef3:	29 d0                	sub    %edx,%eax
f012bef5:	01 d8                	add    %ebx,%eax
f012bef7:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012befc:	39 c1                	cmp    %eax,%ecx
f012befe:	74 17                	je     f012bf17 <test_krealloc+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012bf00:	83 ec 04             	sub    $0x4,%esp
f012bf03:	68 3c c3 13 f0       	push   $0xf013c33c
f012bf08:	68 08 0f 00 00       	push   $0xf08
f012bf0d:	68 5a b0 13 f0       	push   $0xf013b05a
f012bf12:	e8 ee 42 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012bf17:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bf1a:	e8 7e 0c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012bf1f:	29 c3                	sub    %eax,%ebx
f012bf21:	89 d8                	mov    %ebx,%eax
f012bf23:	3d 00 01 00 00       	cmp    $0x100,%eax
f012bf28:	74 17                	je     f012bf41 <test_krealloc+0x564>
			panic("krealloc: Wrong allocation: ");
f012bf2a:	83 ec 04             	sub    $0x4,%esp
f012bf2d:	68 6e c3 13 f0       	push   $0xf013c36e
f012bf32:	68 0a 0f 00 00       	push   $0xf0a
f012bf37:	68 5a b0 13 f0       	push   $0xf013b05a
f012bf3c:	e8 c4 42 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012bf41:	c7 85 14 fe ff ff ff 	movl   $0x3feff,-0x1ec(%ebp)
f012bf48:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012bf4b:	e8 4d 0c fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012bf50:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012bf53:	83 ec 08             	sub    $0x8,%esp
f012bf56:	68 00 fc 1f 00       	push   $0x1ffc00
f012bf5b:	6a 00                	push   $0x0
f012bf5d:	e8 e3 bb fd ff       	call   f0107b45 <krealloc>
f012bf62:	83 c4 10             	add    $0x10,%esp
f012bf65:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012bf6b:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012bf71:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012bf76:	77 17                	ja     f012bf8f <test_krealloc+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bf78:	83 ec 04             	sub    $0x4,%esp
f012bf7b:	68 00 c3 13 f0       	push   $0xf013c300
f012bf80:	68 11 0f 00 00       	push   $0xf11
f012bf85:	68 5a b0 13 f0       	push   $0xf013b05a
f012bf8a:	e8 76 42 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012bf8f:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012bf95:	89 c1                	mov    %eax,%ecx
f012bf97:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012bf9e:	10 00 00 
f012bfa1:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012bfa7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012bfac:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012bfb2:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012bfb8:	ba 00 00 00 00       	mov    $0x0,%edx
f012bfbd:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012bfc3:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012bfc9:	29 d0                	sub    %edx,%eax
f012bfcb:	89 c3                	mov    %eax,%ebx
f012bfcd:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012bfd4:	10 00 00 
f012bfd7:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012bfdc:	0f b6 d0             	movzbl %al,%edx
f012bfdf:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012bfe5:	01 d0                	add    %edx,%eax
f012bfe7:	48                   	dec    %eax
f012bfe8:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012bfee:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012bff4:	ba 00 00 00 00       	mov    $0x0,%edx
f012bff9:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012bfff:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012c005:	29 d0                	sub    %edx,%eax
f012c007:	01 c3                	add    %eax,%ebx
f012c009:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012c010:	10 00 00 
f012c013:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012c018:	0f b6 c0             	movzbl %al,%eax
f012c01b:	c1 e0 04             	shl    $0x4,%eax
f012c01e:	89 c2                	mov    %eax,%edx
f012c020:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012c026:	01 d0                	add    %edx,%eax
f012c028:	48                   	dec    %eax
f012c029:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012c02f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012c035:	ba 00 00 00 00       	mov    $0x0,%edx
f012c03a:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012c040:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012c046:	29 d0                	sub    %edx,%eax
f012c048:	01 d8                	add    %ebx,%eax
f012c04a:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012c04f:	39 c1                	cmp    %eax,%ecx
f012c051:	74 17                	je     f012c06a <test_krealloc+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012c053:	83 ec 04             	sub    $0x4,%esp
f012c056:	68 3c c3 13 f0       	push   $0xf013c33c
f012c05b:	68 13 0f 00 00       	push   $0xf13
f012c060:	68 5a b0 13 f0       	push   $0xf013b05a
f012c065:	e8 9b 41 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012c06a:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c06d:	e8 2b 0b fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c072:	29 c3                	sub    %eax,%ebx
f012c074:	89 d8                	mov    %ebx,%eax
f012c076:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c07b:	74 17                	je     f012c094 <test_krealloc+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012c07d:	83 ec 04             	sub    $0x4,%esp
f012c080:	68 6e c3 13 f0       	push   $0xf013c36e
f012c085:	68 15 0f 00 00       	push   $0xf15
f012c08a:	68 5a b0 13 f0       	push   $0xf013b05a
f012c08f:	e8 71 41 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012c094:	c7 85 18 fe ff ff ff 	movl   $0xffdff,-0x1e8(%ebp)
f012c09b:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012c09e:	e8 fa 0a fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c0a3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012c0a6:	83 ec 08             	sub    $0x8,%esp
f012c0a9:	68 00 fc 1f 00       	push   $0x1ffc00
f012c0ae:	6a 00                	push   $0x0
f012c0b0:	e8 90 ba fd ff       	call   f0107b45 <krealloc>
f012c0b5:	83 c4 10             	add    $0x10,%esp
f012c0b8:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012c0be:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c0c4:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012c0c9:	77 17                	ja     f012c0e2 <test_krealloc+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c0cb:	83 ec 04             	sub    $0x4,%esp
f012c0ce:	68 00 c3 13 f0       	push   $0xf013c300
f012c0d3:	68 1c 0f 00 00       	push   $0xf1c
f012c0d8:	68 5a b0 13 f0       	push   $0xf013b05a
f012c0dd:	e8 23 41 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012c0e2:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c0e8:	89 c1                	mov    %eax,%ecx
f012c0ea:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012c0f1:	10 00 00 
f012c0f4:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012c0fa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c0ff:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012c105:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012c10b:	ba 00 00 00 00       	mov    $0x0,%edx
f012c110:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012c116:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012c11c:	29 d0                	sub    %edx,%eax
f012c11e:	89 c3                	mov    %eax,%ebx
f012c120:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012c127:	10 00 00 
f012c12a:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012c12f:	0f b6 d0             	movzbl %al,%edx
f012c132:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012c138:	01 d0                	add    %edx,%eax
f012c13a:	48                   	dec    %eax
f012c13b:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012c141:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c147:	ba 00 00 00 00       	mov    $0x0,%edx
f012c14c:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012c152:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c158:	29 d0                	sub    %edx,%eax
f012c15a:	01 c3                	add    %eax,%ebx
f012c15c:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012c163:	10 00 00 
f012c166:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012c16b:	0f b6 c0             	movzbl %al,%eax
f012c16e:	c1 e0 04             	shl    $0x4,%eax
f012c171:	89 c2                	mov    %eax,%edx
f012c173:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c179:	01 d0                	add    %edx,%eax
f012c17b:	48                   	dec    %eax
f012c17c:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012c182:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c188:	ba 00 00 00 00       	mov    $0x0,%edx
f012c18d:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012c193:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c199:	29 d0                	sub    %edx,%eax
f012c19b:	01 d8                	add    %ebx,%eax
f012c19d:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012c1a2:	39 c1                	cmp    %eax,%ecx
f012c1a4:	74 17                	je     f012c1bd <test_krealloc+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012c1a6:	83 ec 04             	sub    $0x4,%esp
f012c1a9:	68 3c c3 13 f0       	push   $0xf013c33c
f012c1ae:	68 1e 0f 00 00       	push   $0xf1e
f012c1b3:	68 5a b0 13 f0       	push   $0xf013b05a
f012c1b8:	e8 48 40 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012c1bd:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c1c0:	e8 d8 09 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c1c5:	29 c3                	sub    %eax,%ebx
f012c1c7:	89 d8                	mov    %ebx,%eax
f012c1c9:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c1ce:	74 17                	je     f012c1e7 <test_krealloc+0x80a>
			panic("krealloc: Wrong allocation: ");
f012c1d0:	83 ec 04             	sub    $0x4,%esp
f012c1d3:	68 6e c3 13 f0       	push   $0xf013c36e
f012c1d8:	68 20 0f 00 00       	push   $0xf20
f012c1dd:	68 5a b0 13 f0       	push   $0xf013b05a
f012c1e2:	e8 1e 40 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012c1e7:	c7 85 1c fe ff ff ff 	movl   $0xffdff,-0x1e4(%ebp)
f012c1ee:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012c1f1:	e8 a7 09 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c1f6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012c1f9:	83 ec 08             	sub    $0x8,%esp
f012c1fc:	68 00 fc 2f 00       	push   $0x2ffc00
f012c201:	6a 00                	push   $0x0
f012c203:	e8 3d b9 fd ff       	call   f0107b45 <krealloc>
f012c208:	83 c4 10             	add    $0x10,%esp
f012c20b:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012c211:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c217:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012c21c:	77 17                	ja     f012c235 <test_krealloc+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c21e:	83 ec 04             	sub    $0x4,%esp
f012c221:	68 00 c3 13 f0       	push   $0xf013c300
f012c226:	68 27 0f 00 00       	push   $0xf27
f012c22b:	68 5a b0 13 f0       	push   $0xf013b05a
f012c230:	e8 d0 3f fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012c235:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c23b:	89 c1                	mov    %eax,%ecx
f012c23d:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012c244:	10 00 00 
f012c247:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c24d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c252:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012c258:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c25e:	ba 00 00 00 00       	mov    $0x0,%edx
f012c263:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012c269:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c26f:	29 d0                	sub    %edx,%eax
f012c271:	89 c3                	mov    %eax,%ebx
f012c273:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012c27a:	10 00 00 
f012c27d:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012c282:	0f b6 d0             	movzbl %al,%edx
f012c285:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012c28b:	01 d0                	add    %edx,%eax
f012c28d:	48                   	dec    %eax
f012c28e:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012c294:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012c29a:	ba 00 00 00 00       	mov    $0x0,%edx
f012c29f:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012c2a5:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012c2ab:	29 d0                	sub    %edx,%eax
f012c2ad:	01 c3                	add    %eax,%ebx
f012c2af:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012c2b6:	10 00 00 
f012c2b9:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012c2be:	0f b6 c0             	movzbl %al,%eax
f012c2c1:	c1 e0 04             	shl    $0x4,%eax
f012c2c4:	89 c2                	mov    %eax,%edx
f012c2c6:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012c2cc:	01 d0                	add    %edx,%eax
f012c2ce:	48                   	dec    %eax
f012c2cf:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012c2d5:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012c2db:	ba 00 00 00 00       	mov    $0x0,%edx
f012c2e0:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012c2e6:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012c2ec:	29 d0                	sub    %edx,%eax
f012c2ee:	01 d8                	add    %ebx,%eax
f012c2f0:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012c2f5:	39 c1                	cmp    %eax,%ecx
f012c2f7:	74 17                	je     f012c310 <test_krealloc+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012c2f9:	83 ec 04             	sub    $0x4,%esp
f012c2fc:	68 3c c3 13 f0       	push   $0xf013c33c
f012c301:	68 29 0f 00 00       	push   $0xf29
f012c306:	68 5a b0 13 f0       	push   $0xf013b05a
f012c30b:	e8 f5 3e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012c310:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c313:	e8 85 08 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c318:	29 c3                	sub    %eax,%ebx
f012c31a:	89 d8                	mov    %ebx,%eax
f012c31c:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c321:	74 17                	je     f012c33a <test_krealloc+0x95d>
			panic("Wrong allocation: ");
f012c323:	83 ec 04             	sub    $0x4,%esp
f012c326:	68 a4 b4 13 f0       	push   $0xf013b4a4
f012c32b:	68 2b 0f 00 00       	push   $0xf2b
f012c330:	68 5a b0 13 f0       	push   $0xf013b05a
f012c335:	e8 cb 3e fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012c33a:	c7 85 20 fe ff ff 7f 	movl   $0x5ff7f,-0x1e0(%ebp)
f012c341:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012c344:	e8 54 08 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c349:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012c34c:	83 ec 08             	sub    $0x8,%esp
f012c34f:	68 00 fc 2f 00       	push   $0x2ffc00
f012c354:	6a 00                	push   $0x0
f012c356:	e8 ea b7 fd ff       	call   f0107b45 <krealloc>
f012c35b:	83 c4 10             	add    $0x10,%esp
f012c35e:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012c364:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c36a:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012c36f:	77 17                	ja     f012c388 <test_krealloc+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c371:	83 ec 04             	sub    $0x4,%esp
f012c374:	68 00 c3 13 f0       	push   $0xf013c300
f012c379:	68 32 0f 00 00       	push   $0xf32
f012c37e:	68 5a b0 13 f0       	push   $0xf013b05a
f012c383:	e8 7d 3e fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012c388:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c38e:	89 c1                	mov    %eax,%ecx
f012c390:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012c397:	10 00 00 
f012c39a:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012c3a0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c3a5:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012c3ab:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012c3b1:	ba 00 00 00 00       	mov    $0x0,%edx
f012c3b6:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012c3bc:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012c3c2:	29 d0                	sub    %edx,%eax
f012c3c4:	89 c3                	mov    %eax,%ebx
f012c3c6:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012c3cd:	10 00 00 
f012c3d0:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012c3d5:	0f b6 d0             	movzbl %al,%edx
f012c3d8:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012c3de:	01 d0                	add    %edx,%eax
f012c3e0:	48                   	dec    %eax
f012c3e1:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012c3e7:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012c3ed:	ba 00 00 00 00       	mov    $0x0,%edx
f012c3f2:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012c3f8:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012c3fe:	29 d0                	sub    %edx,%eax
f012c400:	01 c3                	add    %eax,%ebx
f012c402:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012c409:	10 00 00 
f012c40c:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012c411:	0f b6 c0             	movzbl %al,%eax
f012c414:	c1 e0 04             	shl    $0x4,%eax
f012c417:	89 c2                	mov    %eax,%edx
f012c419:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012c41f:	01 d0                	add    %edx,%eax
f012c421:	48                   	dec    %eax
f012c422:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012c428:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012c42e:	ba 00 00 00 00       	mov    $0x0,%edx
f012c433:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012c439:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012c43f:	29 d0                	sub    %edx,%eax
f012c441:	01 d8                	add    %ebx,%eax
f012c443:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012c448:	39 c1                	cmp    %eax,%ecx
f012c44a:	74 17                	je     f012c463 <test_krealloc+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012c44c:	83 ec 04             	sub    $0x4,%esp
f012c44f:	68 3c c3 13 f0       	push   $0xf013c33c
f012c454:	68 34 0f 00 00       	push   $0xf34
f012c459:	68 5a b0 13 f0       	push   $0xf013b05a
f012c45e:	e8 a2 3d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012c463:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c466:	e8 32 07 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c46b:	29 c3                	sub    %eax,%ebx
f012c46d:	89 d8                	mov    %ebx,%eax
f012c46f:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c474:	74 17                	je     f012c48d <test_krealloc+0xab0>
			panic("krealloc: Wrong allocation: ");
f012c476:	83 ec 04             	sub    $0x4,%esp
f012c479:	68 6e c3 13 f0       	push   $0xf013c36e
f012c47e:	68 36 0f 00 00       	push   $0xf36
f012c483:	68 5a b0 13 f0       	push   $0xf013b05a
f012c488:	e8 78 3d fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012c48d:	c7 85 24 fe ff ff 7f 	movl   $0x5ff7f,-0x1dc(%ebp)
f012c494:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012c497:	e8 01 07 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012c49c:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012c49f:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012c4a6:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012c4a9:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c4af:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012c4b5:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012c4bb:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012c4be:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012c4c0:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012c4c6:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012c4cc:	01 c2                	add    %eax,%edx
f012c4ce:	8a 45 ce             	mov    -0x32(%ebp),%al
f012c4d1:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012c4d3:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c4d9:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012c4df:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012c4e6:	eb 11                	jmp    f012c4f9 <test_krealloc+0xb1c>
			ptr[i] = 2;
f012c4e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012c4eb:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c4f1:	01 d0                	add    %edx,%eax
f012c4f3:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012c4f6:	ff 45 f4             	incl   -0xc(%ebp)
f012c4f9:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012c4ff:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012c502:	7d e4                	jge    f012c4e8 <test_krealloc+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012c504:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c50a:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012c510:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c516:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012c51c:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012c522:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c529:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c52f:	01 d0                	add    %edx,%eax
f012c531:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012c537:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c53d:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012c543:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012c54a:	eb 1b                	jmp    f012c567 <test_krealloc+0xb8a>
			intArr[i] = 4;
f012c54c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012c54f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c556:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c55c:	01 d0                	add    %edx,%eax
f012c55e:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012c564:	ff 45 f0             	incl   -0x10(%ebp)
f012c567:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012c56d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012c570:	7d da                	jge    f012c54c <test_krealloc+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012c572:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c578:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012c57e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012c585:	eb 17                	jmp    f012c59e <test_krealloc+0xbc1>
			shortArr[i] = 5;
f012c587:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012c58a:	01 c0                	add    %eax,%eax
f012c58c:	89 c2                	mov    %eax,%edx
f012c58e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c594:	01 d0                	add    %edx,%eax
f012c596:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012c59b:	ff 45 ec             	incl   -0x14(%ebp)
f012c59e:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012c5a4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012c5a7:	7d de                	jge    f012c587 <test_krealloc+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012c5a9:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c5af:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012c5b5:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c5bb:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012c5c0:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012c5c6:	01 c0                	add    %eax,%eax
f012c5c8:	89 c2                	mov    %eax,%edx
f012c5ca:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c5d0:	01 d0                	add    %edx,%eax
f012c5d2:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012c5d7:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c5dd:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012c5e3:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012c5ea:	eb 49                	jmp    f012c635 <test_krealloc+0xc58>
			structArr[i].a = 7;
f012c5ec:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c5ef:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c5f6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c5fc:	01 d0                	add    %edx,%eax
f012c5fe:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012c601:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c604:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c60b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c611:	01 d0                	add    %edx,%eax
f012c613:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012c619:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c61c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c623:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c629:	01 d0                	add    %edx,%eax
f012c62b:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012c632:	ff 45 e8             	incl   -0x18(%ebp)
f012c635:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c63b:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012c63e:	7d ac                	jge    f012c5ec <test_krealloc+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012c640:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c646:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012c64c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c652:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012c655:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c65b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012c661:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c667:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012c66e:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c674:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c67b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c681:	01 d0                	add    %edx,%eax
f012c683:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012c686:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c68c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c693:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c699:	01 d0                	add    %edx,%eax
f012c69b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012c6a1:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c6a7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c6ae:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c6b4:	01 d0                	add    %edx,%eax
f012c6b6:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012c6bd:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012c6c3:	8a 00                	mov    (%eax),%al
f012c6c5:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012c6c8:	75 17                	jne    f012c6e1 <test_krealloc+0xd04>
f012c6ca:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012c6d0:	89 c2                	mov    %eax,%edx
f012c6d2:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012c6d8:	01 d0                	add    %edx,%eax
f012c6da:	8a 00                	mov    (%eax),%al
f012c6dc:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012c6df:	74 17                	je     f012c6f8 <test_krealloc+0xd1b>
			panic(
f012c6e1:	83 ec 04             	sub    $0x4,%esp
f012c6e4:	68 8c c3 13 f0       	push   $0xf013c38c
f012c6e9:	68 79 0f 00 00       	push   $0xf79
f012c6ee:	68 5a b0 13 f0       	push   $0xf013b05a
f012c6f3:	e8 0d 3b fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012c6f8:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c6fe:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012c704:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c70a:	8a 00                	mov    (%eax),%al
f012c70c:	3c 02                	cmp    $0x2,%al
f012c70e:	75 16                	jne    f012c726 <test_krealloc+0xd49>
f012c710:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012c716:	89 c2                	mov    %eax,%edx
f012c718:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c71e:	01 d0                	add    %edx,%eax
f012c720:	8a 00                	mov    (%eax),%al
f012c722:	3c 02                	cmp    $0x2,%al
f012c724:	74 20                	je     f012c746 <test_krealloc+0xd69>
			panic(
f012c726:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c72c:	8a 00                	mov    (%eax),%al
f012c72e:	0f be c0             	movsbl %al,%eax
f012c731:	50                   	push   %eax
f012c732:	68 cc c3 13 f0       	push   $0xf013c3cc
f012c737:	68 7f 0f 00 00       	push   $0xf7f
f012c73c:	68 5a b0 13 f0       	push   $0xf013b05a
f012c741:	e8 bf 3a fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012c746:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c74c:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012c752:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c758:	8b 00                	mov    (%eax),%eax
f012c75a:	83 f8 03             	cmp    $0x3,%eax
f012c75d:	75 1c                	jne    f012c77b <test_krealloc+0xd9e>
f012c75f:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012c765:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c76c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c772:	01 d0                	add    %edx,%eax
f012c774:	8b 00                	mov    (%eax),%eax
f012c776:	83 f8 03             	cmp    $0x3,%eax
f012c779:	74 17                	je     f012c792 <test_krealloc+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012c77b:	83 ec 04             	sub    $0x4,%esp
f012c77e:	68 18 c4 13 f0       	push   $0xf013c418
f012c783:	68 83 0f 00 00       	push   $0xf83
f012c788:	68 5a b0 13 f0       	push   $0xf013b05a
f012c78d:	e8 73 3a fd ff       	call   f0100205 <_panic>

		intArr = (int*) ptr_allocations[3];
f012c792:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c798:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012c79e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c7a4:	8b 00                	mov    (%eax),%eax
f012c7a6:	83 f8 04             	cmp    $0x4,%eax
f012c7a9:	75 1c                	jne    f012c7c7 <test_krealloc+0xdea>
f012c7ab:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012c7b1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c7b8:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c7be:	01 d0                	add    %edx,%eax
f012c7c0:	8b 00                	mov    (%eax),%eax
f012c7c2:	83 f8 04             	cmp    $0x4,%eax
f012c7c5:	74 17                	je     f012c7de <test_krealloc+0xe01>
			panic(
f012c7c7:	83 ec 04             	sub    $0x4,%esp
f012c7ca:	68 8c c3 13 f0       	push   $0xf013c38c
f012c7cf:	68 88 0f 00 00       	push   $0xf88
f012c7d4:	68 5a b0 13 f0       	push   $0xf013b05a
f012c7d9:	e8 27 3a fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012c7de:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c7e4:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012c7ea:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c7f0:	66 8b 00             	mov    (%eax),%ax
f012c7f3:	66 83 f8 05          	cmp    $0x5,%ax
f012c7f7:	75 1b                	jne    f012c814 <test_krealloc+0xe37>
f012c7f9:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012c7ff:	01 c0                	add    %eax,%eax
f012c801:	89 c2                	mov    %eax,%edx
f012c803:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c809:	01 d0                	add    %edx,%eax
f012c80b:	66 8b 00             	mov    (%eax),%ax
f012c80e:	66 83 f8 05          	cmp    $0x5,%ax
f012c812:	74 17                	je     f012c82b <test_krealloc+0xe4e>
			panic(
f012c814:	83 ec 04             	sub    $0x4,%esp
f012c817:	68 8c c3 13 f0       	push   $0xf013c38c
f012c81c:	68 8d 0f 00 00       	push   $0xf8d
f012c821:	68 5a b0 13 f0       	push   $0xf013b05a
f012c826:	e8 da 39 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012c82b:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c831:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012c837:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c83d:	66 8b 00             	mov    (%eax),%ax
f012c840:	66 83 f8 06          	cmp    $0x6,%ax
f012c844:	75 1b                	jne    f012c861 <test_krealloc+0xe84>
f012c846:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012c84c:	01 c0                	add    %eax,%eax
f012c84e:	89 c2                	mov    %eax,%edx
f012c850:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c856:	01 d0                	add    %edx,%eax
f012c858:	66 8b 00             	mov    (%eax),%ax
f012c85b:	66 83 f8 06          	cmp    $0x6,%ax
f012c85f:	74 17                	je     f012c878 <test_krealloc+0xe9b>
			panic(
f012c861:	83 ec 04             	sub    $0x4,%esp
f012c864:	68 8c c3 13 f0       	push   $0xf013c38c
f012c869:	68 92 0f 00 00       	push   $0xf92
f012c86e:	68 5a b0 13 f0       	push   $0xf013b05a
f012c873:	e8 8d 39 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012c878:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c87e:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012c884:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c88a:	8a 00                	mov    (%eax),%al
f012c88c:	3c 07                	cmp    $0x7,%al
f012c88e:	75 1b                	jne    f012c8ab <test_krealloc+0xece>
f012c890:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c896:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c89d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c8a3:	01 d0                	add    %edx,%eax
f012c8a5:	8a 00                	mov    (%eax),%al
f012c8a7:	3c 07                	cmp    $0x7,%al
f012c8a9:	74 17                	je     f012c8c2 <test_krealloc+0xee5>
			panic(
f012c8ab:	83 ec 04             	sub    $0x4,%esp
f012c8ae:	68 8c c3 13 f0       	push   $0xf013c38c
f012c8b3:	68 97 0f 00 00       	push   $0xf97
f012c8b8:	68 5a b0 13 f0       	push   $0xf013b05a
f012c8bd:	e8 43 39 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012c8c2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c8c8:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c8cc:	66 83 f8 07          	cmp    $0x7,%ax
f012c8d0:	75 1f                	jne    f012c8f1 <test_krealloc+0xf14>
f012c8d2:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c8d8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c8df:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c8e5:	01 d0                	add    %edx,%eax
f012c8e7:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c8eb:	66 83 f8 07          	cmp    $0x7,%ax
f012c8ef:	74 17                	je     f012c908 <test_krealloc+0xf2b>
			panic(
f012c8f1:	83 ec 04             	sub    $0x4,%esp
f012c8f4:	68 8c c3 13 f0       	push   $0xf013c38c
f012c8f9:	68 9a 0f 00 00       	push   $0xf9a
f012c8fe:	68 5a b0 13 f0       	push   $0xf013b05a
f012c903:	e8 fd 38 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012c908:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c90e:	8b 40 04             	mov    0x4(%eax),%eax
f012c911:	83 f8 07             	cmp    $0x7,%eax
f012c914:	75 1d                	jne    f012c933 <test_krealloc+0xf56>
f012c916:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c91c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c923:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c929:	01 d0                	add    %edx,%eax
f012c92b:	8b 40 04             	mov    0x4(%eax),%eax
f012c92e:	83 f8 07             	cmp    $0x7,%eax
f012c931:	74 17                	je     f012c94a <test_krealloc+0xf6d>
			panic(
f012c933:	83 ec 04             	sub    $0x4,%esp
f012c936:	68 8c c3 13 f0       	push   $0xf013c38c
f012c93b:	68 9d 0f 00 00       	push   $0xf9d
f012c940:	68 5a b0 13 f0       	push   $0xf013b05a
f012c945:	e8 bb 38 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012c94a:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c950:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012c956:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c95c:	8a 00                	mov    (%eax),%al
f012c95e:	3c 08                	cmp    $0x8,%al
f012c960:	75 1b                	jne    f012c97d <test_krealloc+0xfa0>
f012c962:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c968:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c96f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c975:	01 d0                	add    %edx,%eax
f012c977:	8a 00                	mov    (%eax),%al
f012c979:	3c 08                	cmp    $0x8,%al
f012c97b:	74 17                	je     f012c994 <test_krealloc+0xfb7>
			panic(
f012c97d:	83 ec 04             	sub    $0x4,%esp
f012c980:	68 8c c3 13 f0       	push   $0xf013c38c
f012c985:	68 a2 0f 00 00       	push   $0xfa2
f012c98a:	68 5a b0 13 f0       	push   $0xf013b05a
f012c98f:	e8 71 38 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012c994:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c99a:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c99e:	66 83 f8 08          	cmp    $0x8,%ax
f012c9a2:	75 1f                	jne    f012c9c3 <test_krealloc+0xfe6>
f012c9a4:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c9aa:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c9b1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c9b7:	01 d0                	add    %edx,%eax
f012c9b9:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c9bd:	66 83 f8 08          	cmp    $0x8,%ax
f012c9c1:	74 17                	je     f012c9da <test_krealloc+0xffd>
			panic(
f012c9c3:	83 ec 04             	sub    $0x4,%esp
f012c9c6:	68 8c c3 13 f0       	push   $0xf013c38c
f012c9cb:	68 a5 0f 00 00       	push   $0xfa5
f012c9d0:	68 5a b0 13 f0       	push   $0xf013b05a
f012c9d5:	e8 2b 38 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012c9da:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c9e0:	8b 40 04             	mov    0x4(%eax),%eax
f012c9e3:	83 f8 08             	cmp    $0x8,%eax
f012c9e6:	75 1d                	jne    f012ca05 <test_krealloc+0x1028>
f012c9e8:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c9ee:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c9f5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c9fb:	01 d0                	add    %edx,%eax
f012c9fd:	8b 40 04             	mov    0x4(%eax),%eax
f012ca00:	83 f8 08             	cmp    $0x8,%eax
f012ca03:	74 17                	je     f012ca1c <test_krealloc+0x103f>
			panic(
f012ca05:	83 ec 04             	sub    $0x4,%esp
f012ca08:	68 8c c3 13 f0       	push   $0xf013c38c
f012ca0d:	68 a8 0f 00 00       	push   $0xfa8
f012ca12:	68 5a b0 13 f0       	push   $0xf013b05a
f012ca17:	e8 e9 37 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012ca1c:	e8 7c 01 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012ca21:	89 c2                	mov    %eax,%edx
f012ca23:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ca26:	39 c2                	cmp    %eax,%edx
f012ca28:	74 17                	je     f012ca41 <test_krealloc+0x1064>
			panic(
f012ca2a:	83 ec 04             	sub    $0x4,%esp
f012ca2d:	68 4c c4 13 f0       	push   $0xf013c44c
f012ca32:	68 ac 0f 00 00       	push   $0xfac
f012ca37:	68 5a b0 13 f0       	push   $0xf013b05a
f012ca3c:	e8 c4 37 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012ca41:	83 ec 0c             	sub    $0xc,%esp
f012ca44:	68 98 c4 13 f0       	push   $0xf013c498
f012ca49:	e8 c0 42 fd ff       	call   f0100d0e <cprintf>
f012ca4e:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012ca51:	e8 47 01 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012ca56:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ca59:	e8 6a 73 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ca5e:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012ca64:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ca6a:	83 ec 08             	sub    $0x8,%esp
f012ca6d:	6a 00                	push   $0x0
f012ca6f:	50                   	push   %eax
f012ca70:	e8 d0 b0 fd ff       	call   f0107b45 <krealloc>
f012ca75:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012ca78:	e8 4b 73 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ca7d:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012ca83:	74 17                	je     f012ca9c <test_krealloc+0x10bf>
			panic(
f012ca85:	83 ec 04             	sub    $0x4,%esp
f012ca88:	68 bc c4 13 f0       	push   $0xf013c4bc
f012ca8d:	68 b9 0f 00 00       	push   $0xfb9
f012ca92:	68 5a b0 13 f0       	push   $0xf013b05a
f012ca97:	e8 69 37 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012ca9c:	e8 fc 00 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012caa1:	89 c2                	mov    %eax,%edx
f012caa3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012caa6:	29 c2                	sub    %eax,%edx
f012caa8:	89 d0                	mov    %edx,%eax
f012caaa:	3d 00 01 00 00       	cmp    $0x100,%eax
f012caaf:	74 17                	je     f012cac8 <test_krealloc+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012cab1:	83 ec 04             	sub    $0x4,%esp
f012cab4:	68 30 c5 13 f0       	push   $0xf013c530
f012cab9:	68 bb 0f 00 00       	push   $0xfbb
f012cabe:	68 5a b0 13 f0       	push   $0xf013b05a
f012cac3:	e8 3d 37 fd ff       	call   f0100205 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012cac8:	e8 d0 00 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012cacd:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012cad0:	e8 f3 72 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012cad5:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012cadb:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cae1:	83 ec 08             	sub    $0x8,%esp
f012cae4:	6a 00                	push   $0x0
f012cae6:	50                   	push   %eax
f012cae7:	e8 59 b0 fd ff       	call   f0107b45 <krealloc>
f012caec:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012caef:	e8 d4 72 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012caf4:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012cafa:	74 17                	je     f012cb13 <test_krealloc+0x1136>
			panic(
f012cafc:	83 ec 04             	sub    $0x4,%esp
f012caff:	68 bc c4 13 f0       	push   $0xf013c4bc
f012cb04:	68 c4 0f 00 00       	push   $0xfc4
f012cb09:	68 5a b0 13 f0       	push   $0xf013b05a
f012cb0e:	e8 f2 36 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012cb13:	e8 85 00 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012cb18:	89 c2                	mov    %eax,%edx
f012cb1a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cb1d:	29 c2                	sub    %eax,%edx
f012cb1f:	89 d0                	mov    %edx,%eax
f012cb21:	3d 00 01 00 00       	cmp    $0x100,%eax
f012cb26:	74 17                	je     f012cb3f <test_krealloc+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012cb28:	83 ec 04             	sub    $0x4,%esp
f012cb2b:	68 30 c5 13 f0       	push   $0xf013c530
f012cb30:	68 c6 0f 00 00       	push   $0xfc6
f012cb35:	68 5a b0 13 f0       	push   $0xf013b05a
f012cb3a:	e8 c6 36 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012cb3f:	e8 59 00 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012cb44:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012cb47:	e8 7c 72 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012cb4c:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012cb52:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012cb58:	83 ec 08             	sub    $0x8,%esp
f012cb5b:	6a 00                	push   $0x0
f012cb5d:	50                   	push   %eax
f012cb5e:	e8 e2 af fd ff       	call   f0107b45 <krealloc>
f012cb63:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012cb66:	e8 5d 72 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012cb6b:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012cb71:	74 17                	je     f012cb8a <test_krealloc+0x11ad>
			panic(
f012cb73:	83 ec 04             	sub    $0x4,%esp
f012cb76:	68 74 b0 13 f0       	push   $0xf013b074
f012cb7b:	68 ce 0f 00 00       	push   $0xfce
f012cb80:	68 5a b0 13 f0       	push   $0xf013b05a
f012cb85:	e8 7b 36 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012cb8a:	e8 0e 00 fe ff       	call   f010cb9d <sys_calculate_free_frames>
f012cb8f:	89 c2                	mov    %eax,%edx
f012cb91:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cb94:	29 c2                	sub    %eax,%edx
f012cb96:	89 d0                	mov    %edx,%eax
f012cb98:	3d 00 02 00 00       	cmp    $0x200,%eax
f012cb9d:	74 17                	je     f012cbb6 <test_krealloc+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012cb9f:	83 ec 04             	sub    $0x4,%esp
f012cba2:	68 30 c5 13 f0       	push   $0xf013c530
f012cba7:	68 d0 0f 00 00       	push   $0xfd0
f012cbac:	68 5a b0 13 f0       	push   $0xf013b05a
f012cbb1:	e8 4f 36 fd ff       	call   f0100205 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012cbb6:	e8 e2 ff fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012cbbb:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012cbbe:	e8 05 72 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012cbc3:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012cbc9:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012cbcf:	83 ec 08             	sub    $0x8,%esp
f012cbd2:	6a 00                	push   $0x0
f012cbd4:	50                   	push   %eax
f012cbd5:	e8 6b af fd ff       	call   f0107b45 <krealloc>
f012cbda:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012cbdd:	e8 e6 71 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012cbe2:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012cbe8:	74 17                	je     f012cc01 <test_krealloc+0x1224>
			panic(
f012cbea:	83 ec 04             	sub    $0x4,%esp
f012cbed:	68 bc c4 13 f0       	push   $0xf013c4bc
f012cbf2:	68 d8 0f 00 00       	push   $0xfd8
f012cbf7:	68 5a b0 13 f0       	push   $0xf013b05a
f012cbfc:	e8 04 36 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012cc01:	e8 97 ff fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012cc06:	89 c2                	mov    %eax,%edx
f012cc08:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cc0b:	29 c2                	sub    %eax,%edx
f012cc0d:	89 d0                	mov    %edx,%eax
f012cc0f:	3d 00 03 00 00       	cmp    $0x300,%eax
f012cc14:	74 17                	je     f012cc2d <test_krealloc+0x1250>
			panic(
f012cc16:	83 ec 04             	sub    $0x4,%esp
f012cc19:	68 64 c5 13 f0       	push   $0xf013c564
f012cc1e:	68 db 0f 00 00       	push   $0xfdb
f012cc23:	68 5a b0 13 f0       	push   $0xf013b05a
f012cc28:	e8 d8 35 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012cc2d:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012cc34:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012cc3b:	eb 48                	jmp    f012cc85 <test_krealloc+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012cc3d:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012cc40:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f012cc45:	83 ec 04             	sub    $0x4,%esp
f012cc48:	8d 8d b4 fd ff ff    	lea    -0x24c(%ebp),%ecx
f012cc4e:	51                   	push   %ecx
f012cc4f:	52                   	push   %edx
f012cc50:	50                   	push   %eax
f012cc51:	e8 5b 9e fd ff       	call   f0106ab1 <get_page_table>
f012cc56:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012cc59:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
f012cc5f:	85 c0                	test   %eax,%eax
f012cc61:	75 17                	jne    f012cc7a <test_krealloc+0x129d>
					panic(
f012cc63:	83 ec 04             	sub    $0x4,%esp
f012cc66:	68 5c b9 13 f0       	push   $0xf013b95c
f012cc6b:	68 e7 0f 00 00       	push   $0xfe7
f012cc70:	68 5a b0 13 f0       	push   $0xf013b05a
f012cc75:	e8 8b 35 fd ff       	call   f0100205 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012cc7a:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012cc81:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012cc85:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012cc89:	78 b2                	js     f012cc3d <test_krealloc+0x1260>
f012cc8b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012cc8f:	7f 09                	jg     f012cc9a <test_krealloc+0x12bd>
f012cc91:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012cc98:	76 a3                	jbe    f012cc3d <test_krealloc+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012cc9a:	83 ec 0c             	sub    $0xc,%esp
f012cc9d:	68 a3 c5 13 f0       	push   $0xf013c5a3
f012cca2:	e8 67 40 fd ff       	call   f0100d0e <cprintf>
f012cca7:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012ccaa:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ccb0:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012ccb6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012ccbd:	eb 21                	jmp    f012cce0 <test_krealloc+0x1303>
			sums[0] += ptr[i];
f012ccbf:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012ccc5:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012ccc8:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012ccce:	01 c8                	add    %ecx,%eax
f012ccd0:	8a 00                	mov    (%eax),%al
f012ccd2:	0f be c0             	movsbl %al,%eax
f012ccd5:	01 d0                	add    %edx,%eax
f012ccd7:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012ccdd:	ff 45 dc             	incl   -0x24(%ebp)
f012cce0:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012cce6:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012cce9:	7d d4                	jge    f012ccbf <test_krealloc+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012cceb:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012ccf1:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012ccf7:	42                   	inc    %edx
f012ccf8:	01 d2                	add    %edx,%edx
f012ccfa:	39 d0                	cmp    %edx,%eax
f012ccfc:	74 17                	je     f012cd15 <test_krealloc+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012ccfe:	83 ec 04             	sub    $0x4,%esp
f012cd01:	68 ac c5 13 f0       	push   $0xf013c5ac
f012cd06:	68 f9 0f 00 00       	push   $0xff9
f012cd0b:	68 5a b0 13 f0       	push   $0xf013b05a
f012cd10:	e8 f0 34 fd ff       	call   f0100205 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012cd15:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012cd1b:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012cd21:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012cd28:	eb 25                	jmp    f012cd4f <test_krealloc+0x1372>
			sums[1] += intArr[i];
f012cd2a:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012cd30:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012cd33:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012cd3a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012cd40:	01 c8                	add    %ecx,%eax
f012cd42:	8b 00                	mov    (%eax),%eax
f012cd44:	01 d0                	add    %edx,%eax
f012cd46:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012cd4c:	ff 45 dc             	incl   -0x24(%ebp)
f012cd4f:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012cd55:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012cd58:	7d d0                	jge    f012cd2a <test_krealloc+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012cd5a:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f012cd60:	8b 95 14 fe ff ff    	mov    -0x1ec(%ebp),%edx
f012cd66:	42                   	inc    %edx
f012cd67:	c1 e2 02             	shl    $0x2,%edx
f012cd6a:	39 d0                	cmp    %edx,%eax
f012cd6c:	74 17                	je     f012cd85 <test_krealloc+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012cd6e:	83 ec 04             	sub    $0x4,%esp
f012cd71:	68 ac c5 13 f0       	push   $0xf013c5ac
f012cd76:	68 03 10 00 00       	push   $0x1003
f012cd7b:	68 5a b0 13 f0       	push   $0xf013b05a
f012cd80:	e8 80 34 fd ff       	call   f0100205 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012cd85:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cd8b:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012cd91:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012cd98:	eb 24                	jmp    f012cdbe <test_krealloc+0x13e1>
			sums[2] += shortArr[i];
f012cd9a:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012cda0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012cda3:	01 c0                	add    %eax,%eax
f012cda5:	89 c1                	mov    %eax,%ecx
f012cda7:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cdad:	01 c8                	add    %ecx,%eax
f012cdaf:	66 8b 00             	mov    (%eax),%ax
f012cdb2:	98                   	cwtl   
f012cdb3:	01 d0                	add    %edx,%eax
f012cdb5:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012cdbb:	ff 45 dc             	incl   -0x24(%ebp)
f012cdbe:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012cdc4:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012cdc7:	7d d1                	jge    f012cd9a <test_krealloc+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012cdc9:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012cdcf:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012cdd5:	8d 48 01             	lea    0x1(%eax),%ecx
f012cdd8:	89 c8                	mov    %ecx,%eax
f012cdda:	c1 e0 02             	shl    $0x2,%eax
f012cddd:	01 c8                	add    %ecx,%eax
f012cddf:	39 c2                	cmp    %eax,%edx
f012cde1:	74 17                	je     f012cdfa <test_krealloc+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012cde3:	83 ec 04             	sub    $0x4,%esp
f012cde6:	68 ac c5 13 f0       	push   $0xf013c5ac
f012cdeb:	68 0d 10 00 00       	push   $0x100d
f012cdf0:	68 5a b0 13 f0       	push   $0xf013b05a
f012cdf5:	e8 0b 34 fd ff       	call   f0100205 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012cdfa:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012ce00:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012ce06:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012ce0d:	eb 70                	jmp    f012ce7f <test_krealloc+0x14a2>
			sums[3] += structArr[i].a;
f012ce0f:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012ce15:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ce18:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012ce1f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ce25:	01 c8                	add    %ecx,%eax
f012ce27:	8a 00                	mov    (%eax),%al
f012ce29:	0f be c0             	movsbl %al,%eax
f012ce2c:	01 d0                	add    %edx,%eax
f012ce2e:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
			sums[4] += structArr[i].b;
f012ce34:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012ce3a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ce3d:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012ce44:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ce4a:	01 c8                	add    %ecx,%eax
f012ce4c:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ce50:	98                   	cwtl   
f012ce51:	01 d0                	add    %edx,%eax
f012ce53:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
			sums[5] += structArr[i].c;
f012ce59:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012ce5f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ce62:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012ce69:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ce6f:	01 c8                	add    %ecx,%eax
f012ce71:	8b 40 04             	mov    0x4(%eax),%eax
f012ce74:	01 d0                	add    %edx,%eax
f012ce76:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012ce7c:	ff 45 dc             	incl   -0x24(%ebp)
f012ce7f:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012ce85:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012ce88:	7d 85                	jge    f012ce0f <test_krealloc+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012ce8a:	8b 8d c4 fd ff ff    	mov    -0x23c(%ebp),%ecx
f012ce90:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012ce96:	8d 50 01             	lea    0x1(%eax),%edx
f012ce99:	89 d0                	mov    %edx,%eax
f012ce9b:	01 c0                	add    %eax,%eax
f012ce9d:	01 d0                	add    %edx,%eax
f012ce9f:	01 c0                	add    %eax,%eax
f012cea1:	01 d0                	add    %edx,%eax
f012cea3:	39 c1                	cmp    %eax,%ecx
f012cea5:	75 3a                	jne    f012cee1 <test_krealloc+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012cea7:	8b 8d c8 fd ff ff    	mov    -0x238(%ebp),%ecx
f012cead:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012ceb3:	8d 50 01             	lea    0x1(%eax),%edx
f012ceb6:	89 d0                	mov    %edx,%eax
f012ceb8:	01 c0                	add    %eax,%eax
f012ceba:	01 d0                	add    %edx,%eax
f012cebc:	01 c0                	add    %eax,%eax
f012cebe:	01 d0                	add    %edx,%eax
f012cec0:	39 c1                	cmp    %eax,%ecx
f012cec2:	75 1d                	jne    f012cee1 <test_krealloc+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012cec4:	8b 8d cc fd ff ff    	mov    -0x234(%ebp),%ecx
f012ceca:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012ced0:	8d 50 01             	lea    0x1(%eax),%edx
f012ced3:	89 d0                	mov    %edx,%eax
f012ced5:	01 c0                	add    %eax,%eax
f012ced7:	01 d0                	add    %edx,%eax
f012ced9:	01 c0                	add    %eax,%eax
f012cedb:	01 d0                	add    %edx,%eax
f012cedd:	39 c1                	cmp    %eax,%ecx
f012cedf:	74 17                	je     f012cef8 <test_krealloc+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012cee1:	83 ec 04             	sub    $0x4,%esp
f012cee4:	68 ac c5 13 f0       	push   $0xf013c5ac
f012cee9:	68 1b 10 00 00       	push   $0x101b
f012ceee:	68 5a b0 13 f0       	push   $0xf013b05a
f012cef3:	e8 0d 33 fd ff       	call   f0100205 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012cef8:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012ceff:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012cf02:	e8 96 fc fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012cf07:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012cf0a:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cf10:	83 ec 08             	sub    $0x8,%esp
f012cf13:	68 00 3c 00 00       	push   $0x3c00
f012cf18:	50                   	push   %eax
f012cf19:	e8 27 ac fd ff       	call   f0107b45 <krealloc>
f012cf1e:	83 c4 10             	add    $0x10,%esp
f012cf21:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cf27:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012cf2d:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cf32:	77 17                	ja     f012cf4b <test_krealloc+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cf34:	83 ec 04             	sub    $0x4,%esp
f012cf37:	68 00 c3 13 f0       	push   $0xf013c300
f012cf3c:	68 27 10 00 00       	push   $0x1027
f012cf41:	68 5a b0 13 f0       	push   $0xf013b05a
f012cf46:	e8 ba 32 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012cf4b:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cf51:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012cf57:	74 17                	je     f012cf70 <test_krealloc+0x1593>
			panic(
f012cf59:	83 ec 04             	sub    $0x4,%esp
f012cf5c:	68 e4 c5 13 f0       	push   $0xf013c5e4
f012cf61:	68 2a 10 00 00       	push   $0x102a
f012cf66:	68 5a b0 13 f0       	push   $0xf013b05a
f012cf6b:	e8 95 32 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012cf70:	e8 28 fc fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012cf75:	89 c2                	mov    %eax,%edx
f012cf77:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cf7a:	39 c2                	cmp    %eax,%edx
f012cf7c:	74 17                	je     f012cf95 <test_krealloc+0x15b8>
			panic(
f012cf7e:	83 ec 04             	sub    $0x4,%esp
f012cf81:	68 50 c6 13 f0       	push   $0xf013c650
f012cf86:	68 2d 10 00 00       	push   $0x102d
f012cf8b:	68 5a b0 13 f0       	push   $0xf013b05a
f012cf90:	e8 70 32 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012cf95:	e8 03 fc fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012cf9a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012cf9d:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cfa3:	83 ec 08             	sub    $0x8,%esp
f012cfa6:	68 00 fc 0f 00       	push   $0xffc00
f012cfab:	50                   	push   %eax
f012cfac:	e8 94 ab fd ff       	call   f0107b45 <krealloc>
f012cfb1:	83 c4 10             	add    $0x10,%esp
f012cfb4:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cfba:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012cfc0:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cfc5:	77 17                	ja     f012cfde <test_krealloc+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cfc7:	83 ec 04             	sub    $0x4,%esp
f012cfca:	68 00 c3 13 f0       	push   $0xf013c300
f012cfcf:	68 33 10 00 00       	push   $0x1033
f012cfd4:	68 5a b0 13 f0       	push   $0xf013b05a
f012cfd9:	e8 27 32 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012cfde:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cfe4:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012cfea:	74 17                	je     f012d003 <test_krealloc+0x1626>
			panic(
f012cfec:	83 ec 04             	sub    $0x4,%esp
f012cfef:	68 e4 c5 13 f0       	push   $0xf013c5e4
f012cff4:	68 36 10 00 00       	push   $0x1036
f012cff9:	68 5a b0 13 f0       	push   $0xf013b05a
f012cffe:	e8 02 32 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d003:	e8 95 fb fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d008:	89 c2                	mov    %eax,%edx
f012d00a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d00d:	39 c2                	cmp    %eax,%edx
f012d00f:	74 17                	je     f012d028 <test_krealloc+0x164b>
			panic(
f012d011:	83 ec 04             	sub    $0x4,%esp
f012d014:	68 50 c6 13 f0       	push   $0xf013c650
f012d019:	68 39 10 00 00       	push   $0x1039
f012d01e:	68 5a b0 13 f0       	push   $0xf013b05a
f012d023:	e8 dd 31 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012d028:	e8 70 fb fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d02d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012d030:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d036:	83 ec 08             	sub    $0x8,%esp
f012d039:	68 00 fc 0f 00       	push   $0xffc00
f012d03e:	50                   	push   %eax
f012d03f:	e8 01 ab fd ff       	call   f0107b45 <krealloc>
f012d044:	83 c4 10             	add    $0x10,%esp
f012d047:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d04d:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012d053:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d058:	77 17                	ja     f012d071 <test_krealloc+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d05a:	83 ec 04             	sub    $0x4,%esp
f012d05d:	68 00 c3 13 f0       	push   $0xf013c300
f012d062:	68 3f 10 00 00       	push   $0x103f
f012d067:	68 5a b0 13 f0       	push   $0xf013b05a
f012d06c:	e8 94 31 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012d071:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d077:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012d07d:	74 17                	je     f012d096 <test_krealloc+0x16b9>
			panic(
f012d07f:	83 ec 04             	sub    $0x4,%esp
f012d082:	68 e4 c5 13 f0       	push   $0xf013c5e4
f012d087:	68 42 10 00 00       	push   $0x1042
f012d08c:	68 5a b0 13 f0       	push   $0xf013b05a
f012d091:	e8 6f 31 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d096:	e8 02 fb fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d09b:	89 c2                	mov    %eax,%edx
f012d09d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d0a0:	39 c2                	cmp    %eax,%edx
f012d0a2:	74 17                	je     f012d0bb <test_krealloc+0x16de>
			panic(
f012d0a4:	83 ec 04             	sub    $0x4,%esp
f012d0a7:	68 50 c6 13 f0       	push   $0xf013c650
f012d0ac:	68 45 10 00 00       	push   $0x1045
f012d0b1:	68 5a b0 13 f0       	push   $0xf013b05a
f012d0b6:	e8 4a 31 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012d0bb:	e8 dd fa fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d0c0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012d0c3:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d0c9:	83 ec 08             	sub    $0x8,%esp
f012d0cc:	68 00 fc 0f 00       	push   $0xffc00
f012d0d1:	50                   	push   %eax
f012d0d2:	e8 6e aa fd ff       	call   f0107b45 <krealloc>
f012d0d7:	83 c4 10             	add    $0x10,%esp
f012d0da:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d0e0:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012d0e6:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d0eb:	77 17                	ja     f012d104 <test_krealloc+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d0ed:	83 ec 04             	sub    $0x4,%esp
f012d0f0:	68 00 c3 13 f0       	push   $0xf013c300
f012d0f5:	68 4d 10 00 00       	push   $0x104d
f012d0fa:	68 5a b0 13 f0       	push   $0xf013b05a
f012d0ff:	e8 01 31 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[3])
f012d104:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d10a:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012d110:	74 17                	je     f012d129 <test_krealloc+0x174c>
			panic(
f012d112:	83 ec 04             	sub    $0x4,%esp
f012d115:	68 94 c6 13 f0       	push   $0xf013c694
f012d11a:	68 50 10 00 00       	push   $0x1050
f012d11f:	68 5a b0 13 f0       	push   $0xf013b05a
f012d124:	e8 dc 30 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d129:	e8 6f fa fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d12e:	89 c2                	mov    %eax,%edx
f012d130:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d133:	39 c2                	cmp    %eax,%edx
f012d135:	74 17                	je     f012d14e <test_krealloc+0x1771>
			panic(
f012d137:	83 ec 04             	sub    $0x4,%esp
f012d13a:	68 50 c6 13 f0       	push   $0xf013c650
f012d13f:	68 53 10 00 00       	push   $0x1053
f012d144:	68 5a b0 13 f0       	push   $0xf013b05a
f012d149:	e8 b7 30 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012d14e:	83 ec 0c             	sub    $0xc,%esp
f012d151:	68 73 b8 13 f0       	push   $0xf013b873
f012d156:	e8 b3 3b fd ff       	call   f0100d0e <cprintf>
f012d15b:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012d15e:	e8 3a fa fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d163:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1],
f012d166:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d16c:	83 ec 08             	sub    $0x8,%esp
f012d16f:	68 00 18 10 00       	push   $0x101800
f012d174:	50                   	push   %eax
f012d175:	e8 cb a9 fd ff       	call   f0107b45 <krealloc>
f012d17a:	83 c4 10             	add    $0x10,%esp
f012d17d:	89 45 bc             	mov    %eax,-0x44(%ebp)
				(1 * Mega - kilo) + (7 * kilo));
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d180:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d183:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d188:	77 17                	ja     f012d1a1 <test_krealloc+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d18a:	83 ec 04             	sub    $0x4,%esp
f012d18d:	68 00 c3 13 f0       	push   $0xf013c300
f012d192:	68 5c 10 00 00       	push   $0x105c
f012d197:	68 5a b0 13 f0       	push   $0xf013b05a
f012d19c:	e8 64 30 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012d1a1:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d1a7:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d1aa:	74 17                	je     f012d1c3 <test_krealloc+0x17e6>
			panic(
f012d1ac:	83 ec 04             	sub    $0x4,%esp
f012d1af:	68 f4 c6 13 f0       	push   $0xf013c6f4
f012d1b4:	68 5f 10 00 00       	push   $0x105f
f012d1b9:	68 5a b0 13 f0       	push   $0xf013b05a
f012d1be:	e8 42 30 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012d1c3:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d1c6:	e8 d2 f9 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d1cb:	29 c3                	sub    %eax,%ebx
f012d1cd:	89 d8                	mov    %ebx,%eax
f012d1cf:	83 f8 02             	cmp    $0x2,%eax
f012d1d2:	74 17                	je     f012d1eb <test_krealloc+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012d1d4:	83 ec 04             	sub    $0x4,%esp
f012d1d7:	68 70 c7 13 f0       	push   $0xf013c770
f012d1dc:	68 61 10 00 00       	push   $0x1061
f012d1e1:	68 5a b0 13 f0       	push   $0xf013b05a
f012d1e6:	e8 1a 30 fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012d1eb:	e8 ad f9 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d1f0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012d1f3:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d1f9:	83 ec 08             	sub    $0x8,%esp
f012d1fc:	68 00 fc 3f 00       	push   $0x3ffc00
f012d201:	50                   	push   %eax
f012d202:	e8 3e a9 fd ff       	call   f0107b45 <krealloc>
f012d207:	83 c4 10             	add    $0x10,%esp
f012d20a:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d20d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d210:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d215:	77 17                	ja     f012d22e <test_krealloc+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d217:	83 ec 04             	sub    $0x4,%esp
f012d21a:	68 00 c3 13 f0       	push   $0xf013c300
f012d21f:	68 67 10 00 00       	push   $0x1067
f012d224:	68 5a b0 13 f0       	push   $0xf013b05a
f012d229:	e8 d7 2f fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012d22e:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d234:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d237:	74 17                	je     f012d250 <test_krealloc+0x1873>
			panic(
f012d239:	83 ec 04             	sub    $0x4,%esp
f012d23c:	68 f4 c6 13 f0       	push   $0xf013c6f4
f012d241:	68 6a 10 00 00       	push   $0x106a
f012d246:	68 5a b0 13 f0       	push   $0xf013b05a
f012d24b:	e8 b5 2f fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012d250:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d253:	e8 45 f9 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d258:	29 c3                	sub    %eax,%ebx
f012d25a:	89 d8                	mov    %ebx,%eax
f012d25c:	3d 00 02 00 00       	cmp    $0x200,%eax
f012d261:	74 17                	je     f012d27a <test_krealloc+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012d263:	83 ec 04             	sub    $0x4,%esp
f012d266:	68 70 c7 13 f0       	push   $0xf013c770
f012d26b:	68 6d 10 00 00       	push   $0x106d
f012d270:	68 5a b0 13 f0       	push   $0xf013b05a
f012d275:	e8 8b 2f fd ff       	call   f0100205 <_panic>


	}
	cprintf("\b\b\b60%");
f012d27a:	83 ec 0c             	sub    $0xc,%esp
f012d27d:	68 b8 b8 13 f0       	push   $0xf013b8b8
f012d282:	e8 87 3a fd ff       	call   f0100d0e <cprintf>
f012d287:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012d28a:	e8 0e f9 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d28f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012d292:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d298:	83 ec 08             	sub    $0x8,%esp
f012d29b:	68 00 fc 9f 00       	push   $0x9ffc00
f012d2a0:	50                   	push   %eax
f012d2a1:	e8 9f a8 fd ff       	call   f0107b45 <krealloc>
f012d2a6:	83 c4 10             	add    $0x10,%esp
f012d2a9:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d2ac:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d2af:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d2b4:	77 17                	ja     f012d2cd <test_krealloc+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d2b6:	83 ec 04             	sub    $0x4,%esp
f012d2b9:	68 00 c3 13 f0       	push   $0xf013c300
f012d2be:	68 78 10 00 00       	push   $0x1078
f012d2c3:	68 5a b0 13 f0       	push   $0xf013b05a
f012d2c8:	e8 38 2f fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (14 * Mega))
f012d2cd:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012d2d4:	10 00 00 
f012d2d7:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012d2dd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d2e2:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012d2e8:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012d2ee:	ba 00 00 00 00       	mov    $0x0,%edx
f012d2f3:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012d2f9:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012d2ff:	29 d0                	sub    %edx,%eax
f012d301:	89 c1                	mov    %eax,%ecx
f012d303:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012d30a:	10 00 00 
f012d30d:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012d312:	0f b6 d0             	movzbl %al,%edx
f012d315:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012d31b:	01 d0                	add    %edx,%eax
f012d31d:	48                   	dec    %eax
f012d31e:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012d324:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012d32a:	ba 00 00 00 00       	mov    $0x0,%edx
f012d32f:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012d335:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012d33b:	29 d0                	sub    %edx,%eax
f012d33d:	01 c1                	add    %eax,%ecx
f012d33f:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012d346:	10 00 00 
f012d349:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012d34e:	0f b6 c0             	movzbl %al,%eax
f012d351:	c1 e0 04             	shl    $0x4,%eax
f012d354:	89 c2                	mov    %eax,%edx
f012d356:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012d35c:	01 d0                	add    %edx,%eax
f012d35e:	48                   	dec    %eax
f012d35f:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012d365:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012d36b:	ba 00 00 00 00       	mov    $0x0,%edx
f012d370:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012d376:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012d37c:	29 d0                	sub    %edx,%eax
f012d37e:	01 c8                	add    %ecx,%eax
f012d380:	8d 90 00 40 e0 f6    	lea    -0x91fc000(%eax),%edx
f012d386:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d389:	39 c2                	cmp    %eax,%edx
f012d38b:	74 18                	je     f012d3a5 <test_krealloc+0x19c8>
			panic(
f012d38d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d390:	50                   	push   %eax
f012d391:	68 a4 c7 13 f0       	push   $0xf013c7a4
f012d396:	68 7c 10 00 00       	push   $0x107c
f012d39b:	68 5a b0 13 f0       	push   $0xf013b05a
f012d3a0:	e8 60 2e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012d3a5:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d3ab:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d3ae:	75 17                	jne    f012d3c7 <test_krealloc+0x19ea>
			panic(
f012d3b0:	83 ec 04             	sub    $0x4,%esp
f012d3b3:	68 e8 c7 13 f0       	push   $0xf013c7e8
f012d3b8:	68 7f 10 00 00       	push   $0x107f
f012d3bd:	68 5a b0 13 f0       	push   $0xf013b05a
f012d3c2:	e8 3e 2e fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012d3c7:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d3ca:	e8 ce f7 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d3cf:	29 c3                	sub    %eax,%ebx
f012d3d1:	89 d8                	mov    %ebx,%eax
f012d3d3:	3d 00 06 00 00       	cmp    $0x600,%eax
f012d3d8:	74 17                	je     f012d3f1 <test_krealloc+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012d3da:	83 ec 04             	sub    $0x4,%esp
f012d3dd:	68 70 c7 13 f0       	push   $0xf013c770
f012d3e2:	68 82 10 00 00       	push   $0x1082
f012d3e7:	68 5a b0 13 f0       	push   $0xf013b05a
f012d3ec:	e8 14 2e fd ff       	call   f0100205 <_panic>

		ptr_allocations[4] = newAddress;
f012d3f1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d3f4:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 6 MB
		freeFrames = sys_calculate_free_frames();
f012d3fa:	e8 9e f7 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d3ff:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (6 * Mega - kilo));
f012d402:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d408:	83 ec 08             	sub    $0x8,%esp
f012d40b:	68 00 fc 5f 00       	push   $0x5ffc00
f012d410:	50                   	push   %eax
f012d411:	e8 2f a7 fd ff       	call   f0107b45 <krealloc>
f012d416:	83 c4 10             	add    $0x10,%esp
f012d419:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d41c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d41f:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d424:	77 17                	ja     f012d43d <test_krealloc+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d426:	83 ec 04             	sub    $0x4,%esp
f012d429:	68 00 c3 13 f0       	push   $0xf013c300
f012d42e:	68 8b 10 00 00       	push   $0x108b
f012d433:	68 5a b0 13 f0       	push   $0xf013b05a
f012d438:	e8 c8 2d fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[6])
f012d43d:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d443:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d446:	74 17                	je     f012d45f <test_krealloc+0x1a82>
			panic(
f012d448:	83 ec 04             	sub    $0x4,%esp
f012d44b:	68 f4 c6 13 f0       	push   $0xf013c6f4
f012d450:	68 8e 10 00 00       	push   $0x108e
f012d455:	68 5a b0 13 f0       	push   $0xf013b05a
f012d45a:	e8 a6 2d fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 768)
f012d45f:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d462:	e8 36 f7 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d467:	29 c3                	sub    %eax,%ebx
f012d469:	89 d8                	mov    %ebx,%eax
f012d46b:	3d 00 03 00 00       	cmp    $0x300,%eax
f012d470:	74 17                	je     f012d489 <test_krealloc+0x1aac>
			panic("krealloc: pages in memory are not loaded correctly");
f012d472:	83 ec 04             	sub    $0x4,%esp
f012d475:	68 70 c7 13 f0       	push   $0xf013c770
f012d47a:	68 91 10 00 00       	push   $0x1091
f012d47f:	68 5a b0 13 f0       	push   $0xf013b05a
f012d484:	e8 7c 2d fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 3 MB (already reallocated to 6 MB) to 20 MB. It should return new VA

		freeFrames = sys_calculate_free_frames();
f012d489:	e8 0f f7 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d48e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012d491:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d497:	83 ec 08             	sub    $0x8,%esp
f012d49a:	68 00 fc 3f 01       	push   $0x13ffc00
f012d49f:	50                   	push   %eax
f012d4a0:	e8 a0 a6 fd ff       	call   f0107b45 <krealloc>
f012d4a5:	83 c4 10             	add    $0x10,%esp
f012d4a8:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d4ab:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d4ae:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d4b3:	77 17                	ja     f012d4cc <test_krealloc+0x1aef>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d4b5:	83 ec 04             	sub    $0x4,%esp
f012d4b8:	68 00 c3 13 f0       	push   $0xf013c300
f012d4bd:	68 98 10 00 00       	push   $0x1098
f012d4c2:	68 5a b0 13 f0       	push   $0xf013b05a
f012d4c7:	e8 39 2d fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f012d4cc:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d4d2:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d4d5:	75 17                	jne    f012d4ee <test_krealloc+0x1b11>
			panic(
f012d4d7:	83 ec 04             	sub    $0x4,%esp
f012d4da:	68 e8 c7 13 f0       	push   $0xf013c7e8
f012d4df:	68 9b 10 00 00       	push   $0x109b
f012d4e4:	68 5a b0 13 f0       	push   $0xf013b05a
f012d4e9:	e8 17 2d fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		if ((uint32) newAddress != ACTUAL_START + (24 * Mega))
f012d4ee:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012d4f5:	10 00 00 
f012d4f8:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012d4fe:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d503:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012d509:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012d50f:	ba 00 00 00 00       	mov    $0x0,%edx
f012d514:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012d51a:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012d520:	29 d0                	sub    %edx,%eax
f012d522:	89 c1                	mov    %eax,%ecx
f012d524:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012d52b:	10 00 00 
f012d52e:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012d533:	0f b6 d0             	movzbl %al,%edx
f012d536:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012d53c:	01 d0                	add    %edx,%eax
f012d53e:	48                   	dec    %eax
f012d53f:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012d545:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d54b:	ba 00 00 00 00       	mov    $0x0,%edx
f012d550:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012d556:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d55c:	29 d0                	sub    %edx,%eax
f012d55e:	01 c1                	add    %eax,%ecx
f012d560:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012d567:	10 00 00 
f012d56a:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012d56f:	0f b6 c0             	movzbl %al,%eax
f012d572:	c1 e0 04             	shl    $0x4,%eax
f012d575:	89 c2                	mov    %eax,%edx
f012d577:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012d57d:	01 d0                	add    %edx,%eax
f012d57f:	48                   	dec    %eax
f012d580:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012d586:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d58c:	ba 00 00 00 00       	mov    $0x0,%edx
f012d591:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012d597:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d59d:	29 d0                	sub    %edx,%eax
f012d59f:	01 c8                	add    %ecx,%eax
f012d5a1:	8d 90 00 40 80 f7    	lea    -0x87fc000(%eax),%edx
f012d5a7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d5aa:	39 c2                	cmp    %eax,%edx
f012d5ac:	74 17                	je     f012d5c5 <test_krealloc+0x1be8>
			panic("krealloc: Wrong start address for reallocated space");
f012d5ae:	83 ec 04             	sub    $0x4,%esp
f012d5b1:	68 6c c8 13 f0       	push   $0xf013c86c
f012d5b6:	68 9d 10 00 00       	push   $0x109d
f012d5bb:	68 5a b0 13 f0       	push   $0xf013b05a
f012d5c0:	e8 40 2c fd ff       	call   f0100205 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 3584)
f012d5c5:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d5c8:	e8 d0 f5 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d5cd:	29 c3                	sub    %eax,%ebx
f012d5cf:	89 d8                	mov    %ebx,%eax
f012d5d1:	3d 00 0e 00 00       	cmp    $0xe00,%eax
f012d5d6:	74 17                	je     f012d5ef <test_krealloc+0x1c12>
			panic("krealloc: pages in memory are not loaded correctly");
f012d5d8:	83 ec 04             	sub    $0x4,%esp
f012d5db:	68 70 c7 13 f0       	push   $0xf013c770
f012d5e0:	68 a0 10 00 00       	push   $0x10a0
f012d5e5:	68 5a b0 13 f0       	push   $0xf013b05a
f012d5ea:	e8 16 2c fd ff       	call   f0100205 <_panic>

		ptr_allocations[6] = newAddress;
f012d5ef:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d5f2:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012d5f8:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d5fe:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012d604:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012d60b:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d60e:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d615:	eb 21                	jmp    f012d638 <test_krealloc+0x1c5b>
			sums[0] += ptr[i];
f012d617:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d61d:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012d620:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d626:	01 c8                	add    %ecx,%eax
f012d628:	8a 00                	mov    (%eax),%al
f012d62a:	0f be c0             	movsbl %al,%eax
f012d62d:	01 d0                	add    %edx,%eax
f012d62f:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d635:	ff 45 d8             	incl   -0x28(%ebp)
f012d638:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012d63e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d641:	7d d4                	jge    f012d617 <test_krealloc+0x1c3a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012d643:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012d649:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012d64f:	42                   	inc    %edx
f012d650:	01 d2                	add    %edx,%edx
f012d652:	39 d0                	cmp    %edx,%eax
f012d654:	74 17                	je     f012d66d <test_krealloc+0x1c90>
			panic("krealloc: invalid read after re-allocations");
f012d656:	83 ec 04             	sub    $0x4,%esp
f012d659:	68 a0 c8 13 f0       	push   $0xf013c8a0
f012d65e:	68 ae 10 00 00       	push   $0x10ae
f012d663:	68 5a b0 13 f0       	push   $0xf013b05a
f012d668:	e8 98 2b fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012d66d:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d673:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012d679:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012d680:	00 00 00 
		sums[1] = 0;
f012d683:	c7 85 bc fd ff ff 00 	movl   $0x0,-0x244(%ebp)
f012d68a:	00 00 00 
		sums[2] = 0;
f012d68d:	c7 85 c0 fd ff ff 00 	movl   $0x0,-0x240(%ebp)
f012d694:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012d697:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d69e:	eb 70                	jmp    f012d710 <test_krealloc+0x1d33>
			sums[0] += structArr[i].a;
f012d6a0:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d6a6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d6a9:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d6b0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d6b6:	01 c8                	add    %ecx,%eax
f012d6b8:	8a 00                	mov    (%eax),%al
f012d6ba:	0f be c0             	movsbl %al,%eax
f012d6bd:	01 d0                	add    %edx,%eax
f012d6bf:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
			sums[1] += structArr[i].b;
f012d6c5:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012d6cb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d6ce:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d6d5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d6db:	01 c8                	add    %ecx,%eax
f012d6dd:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d6e1:	98                   	cwtl   
f012d6e2:	01 d0                	add    %edx,%eax
f012d6e4:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
			sums[2] += structArr[i].c;
f012d6ea:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012d6f0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d6f3:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d6fa:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d700:	01 c8                	add    %ecx,%eax
f012d702:	8b 40 04             	mov    0x4(%eax),%eax
f012d705:	01 d0                	add    %edx,%eax
f012d707:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012d70d:	ff 45 d8             	incl   -0x28(%ebp)
f012d710:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d716:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d719:	7d 85                	jge    f012d6a0 <test_krealloc+0x1cc3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012d71b:	8b 8d b8 fd ff ff    	mov    -0x248(%ebp),%ecx
f012d721:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d727:	8d 50 01             	lea    0x1(%eax),%edx
f012d72a:	89 d0                	mov    %edx,%eax
f012d72c:	01 c0                	add    %eax,%eax
f012d72e:	01 d0                	add    %edx,%eax
f012d730:	01 c0                	add    %eax,%eax
f012d732:	01 d0                	add    %edx,%eax
f012d734:	39 c1                	cmp    %eax,%ecx
f012d736:	75 3a                	jne    f012d772 <test_krealloc+0x1d95>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012d738:	8b 8d bc fd ff ff    	mov    -0x244(%ebp),%ecx
f012d73e:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d744:	8d 50 01             	lea    0x1(%eax),%edx
f012d747:	89 d0                	mov    %edx,%eax
f012d749:	01 c0                	add    %eax,%eax
f012d74b:	01 d0                	add    %edx,%eax
f012d74d:	01 c0                	add    %eax,%eax
f012d74f:	01 d0                	add    %edx,%eax
f012d751:	39 c1                	cmp    %eax,%ecx
f012d753:	75 1d                	jne    f012d772 <test_krealloc+0x1d95>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012d755:	8b 8d c0 fd ff ff    	mov    -0x240(%ebp),%ecx
f012d75b:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d761:	8d 50 01             	lea    0x1(%eax),%edx
f012d764:	89 d0                	mov    %edx,%eax
f012d766:	01 c0                	add    %eax,%eax
f012d768:	01 d0                	add    %edx,%eax
f012d76a:	01 c0                	add    %eax,%eax
f012d76c:	01 d0                	add    %edx,%eax
f012d76e:	39 c1                	cmp    %eax,%ecx
f012d770:	74 17                	je     f012d789 <test_krealloc+0x1dac>
			panic("krealloc: invalid read after re-allocations");
f012d772:	83 ec 04             	sub    $0x4,%esp
f012d775:	68 a0 c8 13 f0       	push   $0xf013c8a0
f012d77a:	68 c0 10 00 00       	push   $0x10c0
f012d77f:	68 5a b0 13 f0       	push   $0xf013b05a
f012d784:	e8 7c 2a fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012d789:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d78f:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012d795:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012d79c:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012d79f:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d7a6:	eb 24                	jmp    f012d7cc <test_krealloc+0x1def>
			sums[0] += shortArr[i];
f012d7a8:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d7ae:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d7b1:	01 c0                	add    %eax,%eax
f012d7b3:	89 c1                	mov    %eax,%ecx
f012d7b5:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d7bb:	01 c8                	add    %ecx,%eax
f012d7bd:	66 8b 00             	mov    (%eax),%ax
f012d7c0:	98                   	cwtl   
f012d7c1:	01 d0                	add    %edx,%eax
f012d7c3:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012d7c9:	ff 45 d8             	incl   -0x28(%ebp)
f012d7cc:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d7d2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d7d5:	7d d1                	jge    f012d7a8 <test_krealloc+0x1dcb>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012d7d7:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d7dd:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d7e3:	8d 48 01             	lea    0x1(%eax),%ecx
f012d7e6:	89 c8                	mov    %ecx,%eax
f012d7e8:	c1 e0 02             	shl    $0x2,%eax
f012d7eb:	01 c8                	add    %ecx,%eax
f012d7ed:	39 c2                	cmp    %eax,%edx
f012d7ef:	74 17                	je     f012d808 <test_krealloc+0x1e2b>
			panic("krealloc: invalid read after re-allocations");
f012d7f1:	83 ec 04             	sub    $0x4,%esp
f012d7f4:	68 a0 c8 13 f0       	push   $0xf013c8a0
f012d7f9:	68 ca 10 00 00       	push   $0x10ca
f012d7fe:	68 5a b0 13 f0       	push   $0xf013b05a
f012d803:	e8 fd 29 fd ff       	call   f0100205 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012d808:	e8 90 f3 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d80d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d810:	e8 b3 65 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d815:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012d81b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d821:	83 ec 08             	sub    $0x8,%esp
f012d824:	6a 00                	push   $0x0
f012d826:	50                   	push   %eax
f012d827:	e8 19 a3 fd ff       	call   f0107b45 <krealloc>
f012d82c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d82f:	e8 94 65 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d834:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d83a:	74 17                	je     f012d853 <test_krealloc+0x1e76>
			panic(
f012d83c:	83 ec 04             	sub    $0x4,%esp
f012d83f:	68 74 b0 13 f0       	push   $0xf013b074
f012d844:	68 d2 10 00 00       	push   $0x10d2
f012d849:	68 5a b0 13 f0       	push   $0xf013b05a
f012d84e:	e8 b2 29 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012d853:	e8 45 f3 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d858:	89 c2                	mov    %eax,%edx
f012d85a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d85d:	29 c2                	sub    %eax,%edx
f012d85f:	89 d0                	mov    %edx,%eax
f012d861:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012d866:	74 17                	je     f012d87f <test_krealloc+0x1ea2>
			panic("krealloc: pages in memory are not freed correctly");
f012d868:	83 ec 04             	sub    $0x4,%esp
f012d86b:	68 30 c5 13 f0       	push   $0xf013c530
f012d870:	68 d4 10 00 00       	push   $0x10d4
f012d875:	68 5a b0 13 f0       	push   $0xf013b05a
f012d87a:	e8 86 29 fd ff       	call   f0100205 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012d87f:	e8 19 f3 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d884:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d887:	e8 3c 65 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d88c:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012d892:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d898:	83 ec 0c             	sub    $0xc,%esp
f012d89b:	50                   	push   %eax
f012d89c:	e8 af a0 fd ff       	call   f0107950 <kfree>
f012d8a1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d8a4:	e8 1f 65 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d8a9:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d8af:	74 17                	je     f012d8c8 <test_krealloc+0x1eeb>
			panic(
f012d8b1:	83 ec 04             	sub    $0x4,%esp
f012d8b4:	68 74 b0 13 f0       	push   $0xf013b074
f012d8b9:	68 dc 10 00 00       	push   $0x10dc
f012d8be:	68 5a b0 13 f0       	push   $0xf013b05a
f012d8c3:	e8 3d 29 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012d8c8:	e8 d0 f2 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012d8cd:	89 c2                	mov    %eax,%edx
f012d8cf:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d8d2:	29 c2                	sub    %eax,%edx
f012d8d4:	89 d0                	mov    %edx,%eax
f012d8d6:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012d8db:	74 17                	je     f012d8f4 <test_krealloc+0x1f17>
			panic("krealloc: pages in memory are not freed correctly");
f012d8dd:	83 ec 04             	sub    $0x4,%esp
f012d8e0:	68 30 c5 13 f0       	push   $0xf013c530
f012d8e5:	68 de 10 00 00       	push   $0x10de
f012d8ea:	68 5a b0 13 f0       	push   $0xf013b05a
f012d8ef:	e8 11 29 fd ff       	call   f0100205 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d8f4:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012d8fb:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012d902:	eb 48                	jmp    f012d94c <test_krealloc+0x1f6f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012d904:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012d907:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f012d90c:	83 ec 04             	sub    $0x4,%esp
f012d90f:	8d 8d b0 fd ff ff    	lea    -0x250(%ebp),%ecx
f012d915:	51                   	push   %ecx
f012d916:	52                   	push   %edx
f012d917:	50                   	push   %eax
f012d918:	e8 94 91 fd ff       	call   f0106ab1 <get_page_table>
f012d91d:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012d920:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f012d926:	85 c0                	test   %eax,%eax
f012d928:	75 17                	jne    f012d941 <test_krealloc+0x1f64>
					panic(
f012d92a:	83 ec 04             	sub    $0x4,%esp
f012d92d:	68 5c b9 13 f0       	push   $0xf013b95c
f012d932:	68 eb 10 00 00       	push   $0x10eb
f012d937:	68 5a b0 13 f0       	push   $0xf013b05a
f012d93c:	e8 c4 28 fd ff       	call   f0100205 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d941:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012d948:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012d94c:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012d950:	78 b2                	js     f012d904 <test_krealloc+0x1f27>
f012d952:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012d956:	7f 09                	jg     f012d961 <test_krealloc+0x1f84>
f012d958:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012d95f:	76 a3                	jbe    f012d904 <test_krealloc+0x1f27>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012d961:	83 ec 0c             	sub    $0xc,%esp
f012d964:	68 3e b2 13 f0       	push   $0xf013b23e
f012d969:	e8 a0 33 fd ff       	call   f0100d0e <cprintf>
f012d96e:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc completed successfully.\n");
f012d971:	83 ec 0c             	sub    $0xc,%esp
f012d974:	68 cc c8 13 f0       	push   $0xf013c8cc
f012d979:	e8 90 33 fd ff       	call   f0100d0e <cprintf>
f012d97e:	83 c4 10             	add    $0x10,%esp
	return 0;
f012d981:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012d986:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012d989:	5b                   	pop    %ebx
f012d98a:	5f                   	pop    %edi
f012d98b:	5d                   	pop    %ebp
f012d98c:	c3                   	ret    

f012d98d <test_krealloc_BF>:


int test_krealloc_BF() {
f012d98d:	55                   	push   %ebp
f012d98e:	89 e5                	mov    %esp,%ebp
f012d990:	57                   	push   %edi
f012d991:	53                   	push   %ebx
f012d992:	81 ec 60 02 00 00    	sub    $0x260,%esp
	cprintf("==============================================\n");
f012d998:	83 ec 0c             	sub    $0xc,%esp
f012d99b:	68 9c af 13 f0       	push   $0xf013af9c
f012d9a0:	e8 69 33 fd ff       	call   f0100d0e <cprintf>
f012d9a5:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012d9a8:	83 ec 0c             	sub    $0xc,%esp
f012d9ab:	68 cc af 13 f0       	push   $0xf013afcc
f012d9b0:	e8 59 33 fd ff       	call   f0100d0e <cprintf>
f012d9b5:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012d9b8:	83 ec 0c             	sub    $0xc,%esp
f012d9bb:	68 9c af 13 f0       	push   $0xf013af9c
f012d9c0:	e8 49 33 fd ff       	call   f0100d0e <cprintf>
f012d9c5:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012d9c8:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012d9cc:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012d9d0:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012d9d6:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012d9dc:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012d9e3:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012d9ea:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f012d9f0:	b9 14 00 00 00       	mov    $0x14,%ecx
f012d9f5:	b8 00 00 00 00       	mov    $0x0,%eax
f012d9fa:	89 d7                	mov    %edx,%edi
f012d9fc:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012d9fe:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012da05:	8d 95 f0 fd ff ff    	lea    -0x210(%ebp),%edx
f012da0b:	b9 14 00 00 00       	mov    $0x14,%ecx
f012da10:	b8 00 00 00 00       	mov    $0x0,%eax
f012da15:	89 d7                	mov    %edx,%edi
f012da17:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012da19:	8d 95 a0 fd ff ff    	lea    -0x260(%ebp),%edx
f012da1f:	b9 14 00 00 00       	mov    $0x14,%ecx
f012da24:	b8 00 00 00 00       	mov    $0x0,%eax
f012da29:	89 d7                	mov    %edx,%edi
f012da2b:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012da2d:	e8 6b f1 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012da32:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012da35:	83 ec 08             	sub    $0x8,%esp
f012da38:	68 00 fc 0f 00       	push   $0xffc00
f012da3d:	6a 00                	push   $0x0
f012da3f:	e8 01 a1 fd ff       	call   f0107b45 <krealloc>
f012da44:	83 c4 10             	add    $0x10,%esp
f012da47:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012da4d:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012da53:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012da58:	77 17                	ja     f012da71 <test_krealloc_BF+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012da5a:	83 ec 04             	sub    $0x4,%esp
f012da5d:	68 00 c3 13 f0       	push   $0xf013c300
f012da62:	68 1a 11 00 00       	push   $0x111a
f012da67:	68 5a b0 13 f0       	push   $0xf013b05a
f012da6c:	e8 94 27 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012da71:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012da77:	89 c1                	mov    %eax,%ecx
f012da79:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012da80:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012da83:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012da88:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012da8b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012da8e:	ba 00 00 00 00       	mov    $0x0,%edx
f012da93:	f7 75 b4             	divl   -0x4c(%ebp)
f012da96:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012da99:	29 d0                	sub    %edx,%eax
f012da9b:	89 c3                	mov    %eax,%ebx
f012da9d:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012daa4:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012daa9:	0f b6 d0             	movzbl %al,%edx
f012daac:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012daaf:	01 d0                	add    %edx,%eax
f012dab1:	48                   	dec    %eax
f012dab2:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012dab5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012dab8:	ba 00 00 00 00       	mov    $0x0,%edx
f012dabd:	f7 75 ac             	divl   -0x54(%ebp)
f012dac0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012dac3:	29 d0                	sub    %edx,%eax
f012dac5:	01 c3                	add    %eax,%ebx
f012dac7:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012dace:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012dad3:	0f b6 c0             	movzbl %al,%eax
f012dad6:	c1 e0 04             	shl    $0x4,%eax
f012dad9:	89 c2                	mov    %eax,%edx
f012dadb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012dade:	01 d0                	add    %edx,%eax
f012dae0:	48                   	dec    %eax
f012dae1:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012dae4:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012dae7:	ba 00 00 00 00       	mov    $0x0,%edx
f012daec:	f7 75 a4             	divl   -0x5c(%ebp)
f012daef:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012daf2:	29 d0                	sub    %edx,%eax
f012daf4:	01 d8                	add    %ebx,%eax
f012daf6:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012dafb:	39 c1                	cmp    %eax,%ecx
f012dafd:	74 17                	je     f012db16 <test_krealloc_BF+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012daff:	83 ec 04             	sub    $0x4,%esp
f012db02:	68 3c c3 13 f0       	push   $0xf013c33c
f012db07:	68 1c 11 00 00       	push   $0x111c
f012db0c:	68 5a b0 13 f0       	push   $0xf013b05a
f012db11:	e8 ef 26 fd ff       	call   f0100205 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012db16:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012db19:	e8 7f f0 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012db1e:	29 c3                	sub    %eax,%ebx
f012db20:	89 d8                	mov    %ebx,%eax
f012db22:	3d 00 01 00 00       	cmp    $0x100,%eax
f012db27:	74 17                	je     f012db40 <test_krealloc_BF+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012db29:	83 ec 04             	sub    $0x4,%esp
f012db2c:	68 6e c3 13 f0       	push   $0xf013c36e
f012db31:	68 1f 11 00 00       	push   $0x111f
f012db36:	68 5a b0 13 f0       	push   $0xf013b05a
f012db3b:	e8 c5 26 fd ff       	call   f0100205 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012db40:	c7 85 f0 fd ff ff ff 	movl   $0xffbff,-0x210(%ebp)
f012db47:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012db4a:	e8 4e f0 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012db4f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012db52:	83 ec 08             	sub    $0x8,%esp
f012db55:	68 00 fc 0f 00       	push   $0xffc00
f012db5a:	6a 00                	push   $0x0
f012db5c:	e8 e4 9f fd ff       	call   f0107b45 <krealloc>
f012db61:	83 c4 10             	add    $0x10,%esp
f012db64:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012db6a:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012db70:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012db75:	77 17                	ja     f012db8e <test_krealloc_BF+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012db77:	83 ec 04             	sub    $0x4,%esp
f012db7a:	68 00 c3 13 f0       	push   $0xf013c300
f012db7f:	68 27 11 00 00       	push   $0x1127
f012db84:	68 5a b0 13 f0       	push   $0xf013b05a
f012db89:	e8 77 26 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012db8e:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012db94:	89 c1                	mov    %eax,%ecx
f012db96:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012db9d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012dba0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012dba5:	89 45 98             	mov    %eax,-0x68(%ebp)
f012dba8:	8b 45 98             	mov    -0x68(%ebp),%eax
f012dbab:	ba 00 00 00 00       	mov    $0x0,%edx
f012dbb0:	f7 75 9c             	divl   -0x64(%ebp)
f012dbb3:	8b 45 98             	mov    -0x68(%ebp),%eax
f012dbb6:	29 d0                	sub    %edx,%eax
f012dbb8:	89 c3                	mov    %eax,%ebx
f012dbba:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012dbc1:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012dbc6:	0f b6 d0             	movzbl %al,%edx
f012dbc9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012dbcc:	01 d0                	add    %edx,%eax
f012dbce:	48                   	dec    %eax
f012dbcf:	89 45 90             	mov    %eax,-0x70(%ebp)
f012dbd2:	8b 45 90             	mov    -0x70(%ebp),%eax
f012dbd5:	ba 00 00 00 00       	mov    $0x0,%edx
f012dbda:	f7 75 94             	divl   -0x6c(%ebp)
f012dbdd:	8b 45 90             	mov    -0x70(%ebp),%eax
f012dbe0:	29 d0                	sub    %edx,%eax
f012dbe2:	01 c3                	add    %eax,%ebx
f012dbe4:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012dbeb:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012dbf0:	0f b6 c0             	movzbl %al,%eax
f012dbf3:	c1 e0 04             	shl    $0x4,%eax
f012dbf6:	89 c2                	mov    %eax,%edx
f012dbf8:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012dbfb:	01 d0                	add    %edx,%eax
f012dbfd:	48                   	dec    %eax
f012dbfe:	89 45 88             	mov    %eax,-0x78(%ebp)
f012dc01:	8b 45 88             	mov    -0x78(%ebp),%eax
f012dc04:	ba 00 00 00 00       	mov    $0x0,%edx
f012dc09:	f7 75 8c             	divl   -0x74(%ebp)
f012dc0c:	8b 45 88             	mov    -0x78(%ebp),%eax
f012dc0f:	29 d0                	sub    %edx,%eax
f012dc11:	01 d8                	add    %ebx,%eax
f012dc13:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012dc18:	39 c1                	cmp    %eax,%ecx
f012dc1a:	74 17                	je     f012dc33 <test_krealloc_BF+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012dc1c:	83 ec 04             	sub    $0x4,%esp
f012dc1f:	68 3c c3 13 f0       	push   $0xf013c33c
f012dc24:	68 29 11 00 00       	push   $0x1129
f012dc29:	68 5a b0 13 f0       	push   $0xf013b05a
f012dc2e:	e8 d2 25 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012dc33:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dc36:	e8 62 ef fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012dc3b:	29 c3                	sub    %eax,%ebx
f012dc3d:	89 d8                	mov    %ebx,%eax
f012dc3f:	3d 00 01 00 00       	cmp    $0x100,%eax
f012dc44:	74 17                	je     f012dc5d <test_krealloc_BF+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012dc46:	83 ec 04             	sub    $0x4,%esp
f012dc49:	68 6e c3 13 f0       	push   $0xf013c36e
f012dc4e:	68 2b 11 00 00       	push   $0x112b
f012dc53:	68 5a b0 13 f0       	push   $0xf013b05a
f012dc58:	e8 a8 25 fd ff       	call   f0100205 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012dc5d:	c7 85 f4 fd ff ff ff 	movl   $0xffbff,-0x20c(%ebp)
f012dc64:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012dc67:	e8 31 ef fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012dc6c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012dc6f:	83 ec 08             	sub    $0x8,%esp
f012dc72:	68 00 fc 0f 00       	push   $0xffc00
f012dc77:	6a 00                	push   $0x0
f012dc79:	e8 c7 9e fd ff       	call   f0107b45 <krealloc>
f012dc7e:	83 c4 10             	add    $0x10,%esp
f012dc81:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012dc87:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012dc8d:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012dc92:	77 17                	ja     f012dcab <test_krealloc_BF+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dc94:	83 ec 04             	sub    $0x4,%esp
f012dc97:	68 00 c3 13 f0       	push   $0xf013c300
f012dc9c:	68 33 11 00 00       	push   $0x1133
f012dca1:	68 5a b0 13 f0       	push   $0xf013b05a
f012dca6:	e8 5a 25 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012dcab:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012dcb1:	89 c1                	mov    %eax,%ecx
f012dcb3:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012dcba:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012dcbd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012dcc2:	89 45 80             	mov    %eax,-0x80(%ebp)
f012dcc5:	8b 45 80             	mov    -0x80(%ebp),%eax
f012dcc8:	ba 00 00 00 00       	mov    $0x0,%edx
f012dccd:	f7 75 84             	divl   -0x7c(%ebp)
f012dcd0:	8b 45 80             	mov    -0x80(%ebp),%eax
f012dcd3:	29 d0                	sub    %edx,%eax
f012dcd5:	89 c3                	mov    %eax,%ebx
f012dcd7:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012dcde:	10 00 00 
f012dce1:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012dce6:	0f b6 d0             	movzbl %al,%edx
f012dce9:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012dcef:	01 d0                	add    %edx,%eax
f012dcf1:	48                   	dec    %eax
f012dcf2:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012dcf8:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012dcfe:	ba 00 00 00 00       	mov    $0x0,%edx
f012dd03:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012dd09:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012dd0f:	29 d0                	sub    %edx,%eax
f012dd11:	01 c3                	add    %eax,%ebx
f012dd13:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012dd1a:	10 00 00 
f012dd1d:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012dd22:	0f b6 c0             	movzbl %al,%eax
f012dd25:	c1 e0 04             	shl    $0x4,%eax
f012dd28:	89 c2                	mov    %eax,%edx
f012dd2a:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012dd30:	01 d0                	add    %edx,%eax
f012dd32:	48                   	dec    %eax
f012dd33:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012dd39:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012dd3f:	ba 00 00 00 00       	mov    $0x0,%edx
f012dd44:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012dd4a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012dd50:	29 d0                	sub    %edx,%eax
f012dd52:	01 d8                	add    %ebx,%eax
f012dd54:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012dd59:	39 c1                	cmp    %eax,%ecx
f012dd5b:	74 17                	je     f012dd74 <test_krealloc_BF+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012dd5d:	83 ec 04             	sub    $0x4,%esp
f012dd60:	68 3c c3 13 f0       	push   $0xf013c33c
f012dd65:	68 35 11 00 00       	push   $0x1135
f012dd6a:	68 5a b0 13 f0       	push   $0xf013b05a
f012dd6f:	e8 91 24 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012dd74:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dd77:	e8 21 ee fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012dd7c:	29 c3                	sub    %eax,%ebx
f012dd7e:	89 d8                	mov    %ebx,%eax
f012dd80:	3d 00 01 00 00       	cmp    $0x100,%eax
f012dd85:	74 17                	je     f012dd9e <test_krealloc_BF+0x411>
			panic("krealloc: Wrong allocation: ");
f012dd87:	83 ec 04             	sub    $0x4,%esp
f012dd8a:	68 6e c3 13 f0       	push   $0xf013c36e
f012dd8f:	68 37 11 00 00       	push   $0x1137
f012dd94:	68 5a b0 13 f0       	push   $0xf013b05a
f012dd99:	e8 67 24 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012dd9e:	c7 85 f8 fd ff ff ff 	movl   $0x3feff,-0x208(%ebp)
f012dda5:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012dda8:	e8 f0 ed fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012ddad:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012ddb0:	83 ec 08             	sub    $0x8,%esp
f012ddb3:	68 00 fc 0f 00       	push   $0xffc00
f012ddb8:	6a 00                	push   $0x0
f012ddba:	e8 86 9d fd ff       	call   f0107b45 <krealloc>
f012ddbf:	83 c4 10             	add    $0x10,%esp
f012ddc2:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012ddc8:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012ddce:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012ddd3:	77 17                	ja     f012ddec <test_krealloc_BF+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ddd5:	83 ec 04             	sub    $0x4,%esp
f012ddd8:	68 00 c3 13 f0       	push   $0xf013c300
f012dddd:	68 3e 11 00 00       	push   $0x113e
f012dde2:	68 5a b0 13 f0       	push   $0xf013b05a
f012dde7:	e8 19 24 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012ddec:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012ddf2:	89 c1                	mov    %eax,%ecx
f012ddf4:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012ddfb:	10 00 00 
f012ddfe:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012de04:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012de09:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012de0f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012de15:	ba 00 00 00 00       	mov    $0x0,%edx
f012de1a:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012de20:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012de26:	29 d0                	sub    %edx,%eax
f012de28:	89 c3                	mov    %eax,%ebx
f012de2a:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012de31:	10 00 00 
f012de34:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012de39:	0f b6 d0             	movzbl %al,%edx
f012de3c:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012de42:	01 d0                	add    %edx,%eax
f012de44:	48                   	dec    %eax
f012de45:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012de4b:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012de51:	ba 00 00 00 00       	mov    $0x0,%edx
f012de56:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012de5c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012de62:	29 d0                	sub    %edx,%eax
f012de64:	01 c3                	add    %eax,%ebx
f012de66:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012de6d:	10 00 00 
f012de70:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012de75:	0f b6 c0             	movzbl %al,%eax
f012de78:	c1 e0 04             	shl    $0x4,%eax
f012de7b:	89 c2                	mov    %eax,%edx
f012de7d:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012de83:	01 d0                	add    %edx,%eax
f012de85:	48                   	dec    %eax
f012de86:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012de8c:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012de92:	ba 00 00 00 00       	mov    $0x0,%edx
f012de97:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012de9d:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012dea3:	29 d0                	sub    %edx,%eax
f012dea5:	01 d8                	add    %ebx,%eax
f012dea7:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012deac:	39 c1                	cmp    %eax,%ecx
f012deae:	74 17                	je     f012dec7 <test_krealloc_BF+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012deb0:	83 ec 04             	sub    $0x4,%esp
f012deb3:	68 3c c3 13 f0       	push   $0xf013c33c
f012deb8:	68 40 11 00 00       	push   $0x1140
f012debd:	68 5a b0 13 f0       	push   $0xf013b05a
f012dec2:	e8 3e 23 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012dec7:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012deca:	e8 ce ec fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012decf:	29 c3                	sub    %eax,%ebx
f012ded1:	89 d8                	mov    %ebx,%eax
f012ded3:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ded8:	74 17                	je     f012def1 <test_krealloc_BF+0x564>
			panic("krealloc: Wrong allocation: ");
f012deda:	83 ec 04             	sub    $0x4,%esp
f012dedd:	68 6e c3 13 f0       	push   $0xf013c36e
f012dee2:	68 42 11 00 00       	push   $0x1142
f012dee7:	68 5a b0 13 f0       	push   $0xf013b05a
f012deec:	e8 14 23 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012def1:	c7 85 fc fd ff ff ff 	movl   $0x3feff,-0x204(%ebp)
f012def8:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012defb:	e8 9d ec fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012df00:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012df03:	83 ec 08             	sub    $0x8,%esp
f012df06:	68 00 fc 1f 00       	push   $0x1ffc00
f012df0b:	6a 00                	push   $0x0
f012df0d:	e8 33 9c fd ff       	call   f0107b45 <krealloc>
f012df12:	83 c4 10             	add    $0x10,%esp
f012df15:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012df1b:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012df21:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012df26:	77 17                	ja     f012df3f <test_krealloc_BF+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012df28:	83 ec 04             	sub    $0x4,%esp
f012df2b:	68 00 c3 13 f0       	push   $0xf013c300
f012df30:	68 49 11 00 00       	push   $0x1149
f012df35:	68 5a b0 13 f0       	push   $0xf013b05a
f012df3a:	e8 c6 22 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012df3f:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012df45:	89 c1                	mov    %eax,%ecx
f012df47:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012df4e:	10 00 00 
f012df51:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012df57:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012df5c:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012df62:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012df68:	ba 00 00 00 00       	mov    $0x0,%edx
f012df6d:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012df73:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012df79:	29 d0                	sub    %edx,%eax
f012df7b:	89 c3                	mov    %eax,%ebx
f012df7d:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012df84:	10 00 00 
f012df87:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012df8c:	0f b6 d0             	movzbl %al,%edx
f012df8f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012df95:	01 d0                	add    %edx,%eax
f012df97:	48                   	dec    %eax
f012df98:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012df9e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012dfa4:	ba 00 00 00 00       	mov    $0x0,%edx
f012dfa9:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012dfaf:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012dfb5:	29 d0                	sub    %edx,%eax
f012dfb7:	01 c3                	add    %eax,%ebx
f012dfb9:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012dfc0:	10 00 00 
f012dfc3:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012dfc8:	0f b6 c0             	movzbl %al,%eax
f012dfcb:	c1 e0 04             	shl    $0x4,%eax
f012dfce:	89 c2                	mov    %eax,%edx
f012dfd0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012dfd6:	01 d0                	add    %edx,%eax
f012dfd8:	48                   	dec    %eax
f012dfd9:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012dfdf:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012dfe5:	ba 00 00 00 00       	mov    $0x0,%edx
f012dfea:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012dff0:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012dff6:	29 d0                	sub    %edx,%eax
f012dff8:	01 d8                	add    %ebx,%eax
f012dffa:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012dfff:	39 c1                	cmp    %eax,%ecx
f012e001:	74 17                	je     f012e01a <test_krealloc_BF+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012e003:	83 ec 04             	sub    $0x4,%esp
f012e006:	68 3c c3 13 f0       	push   $0xf013c33c
f012e00b:	68 4b 11 00 00       	push   $0x114b
f012e010:	68 5a b0 13 f0       	push   $0xf013b05a
f012e015:	e8 eb 21 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012e01a:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e01d:	e8 7b eb fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e022:	29 c3                	sub    %eax,%ebx
f012e024:	89 d8                	mov    %ebx,%eax
f012e026:	3d 00 02 00 00       	cmp    $0x200,%eax
f012e02b:	74 17                	je     f012e044 <test_krealloc_BF+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012e02d:	83 ec 04             	sub    $0x4,%esp
f012e030:	68 6e c3 13 f0       	push   $0xf013c36e
f012e035:	68 4d 11 00 00       	push   $0x114d
f012e03a:	68 5a b0 13 f0       	push   $0xf013b05a
f012e03f:	e8 c1 21 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012e044:	c7 85 00 fe ff ff ff 	movl   $0xffdff,-0x200(%ebp)
f012e04b:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012e04e:	e8 4a eb fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e053:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012e056:	83 ec 08             	sub    $0x8,%esp
f012e059:	68 00 fc 1f 00       	push   $0x1ffc00
f012e05e:	6a 00                	push   $0x0
f012e060:	e8 e0 9a fd ff       	call   f0107b45 <krealloc>
f012e065:	83 c4 10             	add    $0x10,%esp
f012e068:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012e06e:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e074:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012e079:	77 17                	ja     f012e092 <test_krealloc_BF+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e07b:	83 ec 04             	sub    $0x4,%esp
f012e07e:	68 00 c3 13 f0       	push   $0xf013c300
f012e083:	68 54 11 00 00       	push   $0x1154
f012e088:	68 5a b0 13 f0       	push   $0xf013b05a
f012e08d:	e8 73 21 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012e092:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e098:	89 c1                	mov    %eax,%ecx
f012e09a:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012e0a1:	10 00 00 
f012e0a4:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012e0aa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e0af:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012e0b5:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012e0bb:	ba 00 00 00 00       	mov    $0x0,%edx
f012e0c0:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012e0c6:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012e0cc:	29 d0                	sub    %edx,%eax
f012e0ce:	89 c3                	mov    %eax,%ebx
f012e0d0:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012e0d7:	10 00 00 
f012e0da:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012e0df:	0f b6 d0             	movzbl %al,%edx
f012e0e2:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012e0e8:	01 d0                	add    %edx,%eax
f012e0ea:	48                   	dec    %eax
f012e0eb:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012e0f1:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012e0f7:	ba 00 00 00 00       	mov    $0x0,%edx
f012e0fc:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012e102:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012e108:	29 d0                	sub    %edx,%eax
f012e10a:	01 c3                	add    %eax,%ebx
f012e10c:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012e113:	10 00 00 
f012e116:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012e11b:	0f b6 c0             	movzbl %al,%eax
f012e11e:	c1 e0 04             	shl    $0x4,%eax
f012e121:	89 c2                	mov    %eax,%edx
f012e123:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012e129:	01 d0                	add    %edx,%eax
f012e12b:	48                   	dec    %eax
f012e12c:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012e132:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012e138:	ba 00 00 00 00       	mov    $0x0,%edx
f012e13d:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012e143:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012e149:	29 d0                	sub    %edx,%eax
f012e14b:	01 d8                	add    %ebx,%eax
f012e14d:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012e152:	39 c1                	cmp    %eax,%ecx
f012e154:	74 17                	je     f012e16d <test_krealloc_BF+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012e156:	83 ec 04             	sub    $0x4,%esp
f012e159:	68 3c c3 13 f0       	push   $0xf013c33c
f012e15e:	68 56 11 00 00       	push   $0x1156
f012e163:	68 5a b0 13 f0       	push   $0xf013b05a
f012e168:	e8 98 20 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012e16d:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e170:	e8 28 ea fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e175:	29 c3                	sub    %eax,%ebx
f012e177:	89 d8                	mov    %ebx,%eax
f012e179:	3d 00 02 00 00       	cmp    $0x200,%eax
f012e17e:	74 17                	je     f012e197 <test_krealloc_BF+0x80a>
			panic("krealloc: Wrong allocation: ");
f012e180:	83 ec 04             	sub    $0x4,%esp
f012e183:	68 6e c3 13 f0       	push   $0xf013c36e
f012e188:	68 58 11 00 00       	push   $0x1158
f012e18d:	68 5a b0 13 f0       	push   $0xf013b05a
f012e192:	e8 6e 20 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012e197:	c7 85 04 fe ff ff ff 	movl   $0xffdff,-0x1fc(%ebp)
f012e19e:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012e1a1:	e8 f7 e9 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e1a6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012e1a9:	83 ec 08             	sub    $0x8,%esp
f012e1ac:	68 00 fc 2f 00       	push   $0x2ffc00
f012e1b1:	6a 00                	push   $0x0
f012e1b3:	e8 8d 99 fd ff       	call   f0107b45 <krealloc>
f012e1b8:	83 c4 10             	add    $0x10,%esp
f012e1bb:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012e1c1:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e1c7:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012e1cc:	77 17                	ja     f012e1e5 <test_krealloc_BF+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e1ce:	83 ec 04             	sub    $0x4,%esp
f012e1d1:	68 00 c3 13 f0       	push   $0xf013c300
f012e1d6:	68 5f 11 00 00       	push   $0x115f
f012e1db:	68 5a b0 13 f0       	push   $0xf013b05a
f012e1e0:	e8 20 20 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012e1e5:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e1eb:	89 c1                	mov    %eax,%ecx
f012e1ed:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012e1f4:	10 00 00 
f012e1f7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012e1fd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e202:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012e208:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012e20e:	ba 00 00 00 00       	mov    $0x0,%edx
f012e213:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012e219:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012e21f:	29 d0                	sub    %edx,%eax
f012e221:	89 c3                	mov    %eax,%ebx
f012e223:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012e22a:	10 00 00 
f012e22d:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012e232:	0f b6 d0             	movzbl %al,%edx
f012e235:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012e23b:	01 d0                	add    %edx,%eax
f012e23d:	48                   	dec    %eax
f012e23e:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012e244:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012e24a:	ba 00 00 00 00       	mov    $0x0,%edx
f012e24f:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012e255:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012e25b:	29 d0                	sub    %edx,%eax
f012e25d:	01 c3                	add    %eax,%ebx
f012e25f:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012e266:	10 00 00 
f012e269:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012e26e:	0f b6 c0             	movzbl %al,%eax
f012e271:	c1 e0 04             	shl    $0x4,%eax
f012e274:	89 c2                	mov    %eax,%edx
f012e276:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012e27c:	01 d0                	add    %edx,%eax
f012e27e:	48                   	dec    %eax
f012e27f:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012e285:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012e28b:	ba 00 00 00 00       	mov    $0x0,%edx
f012e290:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012e296:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012e29c:	29 d0                	sub    %edx,%eax
f012e29e:	01 d8                	add    %ebx,%eax
f012e2a0:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012e2a5:	39 c1                	cmp    %eax,%ecx
f012e2a7:	74 17                	je     f012e2c0 <test_krealloc_BF+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012e2a9:	83 ec 04             	sub    $0x4,%esp
f012e2ac:	68 3c c3 13 f0       	push   $0xf013c33c
f012e2b1:	68 61 11 00 00       	push   $0x1161
f012e2b6:	68 5a b0 13 f0       	push   $0xf013b05a
f012e2bb:	e8 45 1f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012e2c0:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e2c3:	e8 d5 e8 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e2c8:	29 c3                	sub    %eax,%ebx
f012e2ca:	89 d8                	mov    %ebx,%eax
f012e2cc:	3d 00 03 00 00       	cmp    $0x300,%eax
f012e2d1:	74 17                	je     f012e2ea <test_krealloc_BF+0x95d>
			panic("Wrong allocation: ");
f012e2d3:	83 ec 04             	sub    $0x4,%esp
f012e2d6:	68 a4 b4 13 f0       	push   $0xf013b4a4
f012e2db:	68 63 11 00 00       	push   $0x1163
f012e2e0:	68 5a b0 13 f0       	push   $0xf013b05a
f012e2e5:	e8 1b 1f fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012e2ea:	c7 85 08 fe ff ff 7f 	movl   $0x5ff7f,-0x1f8(%ebp)
f012e2f1:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012e2f4:	e8 a4 e8 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e2f9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012e2fc:	83 ec 08             	sub    $0x8,%esp
f012e2ff:	68 00 fc 2f 00       	push   $0x2ffc00
f012e304:	6a 00                	push   $0x0
f012e306:	e8 3a 98 fd ff       	call   f0107b45 <krealloc>
f012e30b:	83 c4 10             	add    $0x10,%esp
f012e30e:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012e314:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e31a:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012e31f:	77 17                	ja     f012e338 <test_krealloc_BF+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e321:	83 ec 04             	sub    $0x4,%esp
f012e324:	68 00 c3 13 f0       	push   $0xf013c300
f012e329:	68 6a 11 00 00       	push   $0x116a
f012e32e:	68 5a b0 13 f0       	push   $0xf013b05a
f012e333:	e8 cd 1e fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012e338:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e33e:	89 c1                	mov    %eax,%ecx
f012e340:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012e347:	10 00 00 
f012e34a:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012e350:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e355:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012e35b:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012e361:	ba 00 00 00 00       	mov    $0x0,%edx
f012e366:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012e36c:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012e372:	29 d0                	sub    %edx,%eax
f012e374:	89 c3                	mov    %eax,%ebx
f012e376:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012e37d:	10 00 00 
f012e380:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012e385:	0f b6 d0             	movzbl %al,%edx
f012e388:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012e38e:	01 d0                	add    %edx,%eax
f012e390:	48                   	dec    %eax
f012e391:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012e397:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012e39d:	ba 00 00 00 00       	mov    $0x0,%edx
f012e3a2:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012e3a8:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012e3ae:	29 d0                	sub    %edx,%eax
f012e3b0:	01 c3                	add    %eax,%ebx
f012e3b2:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012e3b9:	10 00 00 
f012e3bc:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012e3c1:	0f b6 c0             	movzbl %al,%eax
f012e3c4:	c1 e0 04             	shl    $0x4,%eax
f012e3c7:	89 c2                	mov    %eax,%edx
f012e3c9:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012e3cf:	01 d0                	add    %edx,%eax
f012e3d1:	48                   	dec    %eax
f012e3d2:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012e3d8:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012e3de:	ba 00 00 00 00       	mov    $0x0,%edx
f012e3e3:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012e3e9:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012e3ef:	29 d0                	sub    %edx,%eax
f012e3f1:	01 d8                	add    %ebx,%eax
f012e3f3:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012e3f8:	39 c1                	cmp    %eax,%ecx
f012e3fa:	74 17                	je     f012e413 <test_krealloc_BF+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012e3fc:	83 ec 04             	sub    $0x4,%esp
f012e3ff:	68 3c c3 13 f0       	push   $0xf013c33c
f012e404:	68 6c 11 00 00       	push   $0x116c
f012e409:	68 5a b0 13 f0       	push   $0xf013b05a
f012e40e:	e8 f2 1d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012e413:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e416:	e8 82 e7 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e41b:	29 c3                	sub    %eax,%ebx
f012e41d:	89 d8                	mov    %ebx,%eax
f012e41f:	3d 00 03 00 00       	cmp    $0x300,%eax
f012e424:	74 17                	je     f012e43d <test_krealloc_BF+0xab0>
			panic("krealloc: Wrong allocation: ");
f012e426:	83 ec 04             	sub    $0x4,%esp
f012e429:	68 6e c3 13 f0       	push   $0xf013c36e
f012e42e:	68 6e 11 00 00       	push   $0x116e
f012e433:	68 5a b0 13 f0       	push   $0xf013b05a
f012e438:	e8 c8 1d fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012e43d:	c7 85 0c fe ff ff 7f 	movl   $0x5ff7f,-0x1f4(%ebp)
f012e444:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012e447:	e8 51 e7 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e44c:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012e44f:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012e456:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012e459:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012e45f:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012e465:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012e46b:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012e46e:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012e470:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012e476:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012e47c:	01 c2                	add    %eax,%edx
f012e47e:	8a 45 ce             	mov    -0x32(%ebp),%al
f012e481:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012e483:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e489:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012e48f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e496:	eb 11                	jmp    f012e4a9 <test_krealloc_BF+0xb1c>
			ptr[i] = 2;
f012e498:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e49b:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e4a1:	01 d0                	add    %edx,%eax
f012e4a3:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012e4a6:	ff 45 f4             	incl   -0xc(%ebp)
f012e4a9:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012e4af:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012e4b2:	7d e4                	jge    f012e498 <test_krealloc_BF+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012e4b4:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e4ba:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012e4c0:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e4c6:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012e4cc:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012e4d2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e4d9:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e4df:	01 d0                	add    %edx,%eax
f012e4e1:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012e4e7:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e4ed:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012e4f3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012e4fa:	eb 1b                	jmp    f012e517 <test_krealloc_BF+0xb8a>
			intArr[i] = 4;
f012e4fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e4ff:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e506:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e50c:	01 d0                	add    %edx,%eax
f012e50e:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012e514:	ff 45 f0             	incl   -0x10(%ebp)
f012e517:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012e51d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012e520:	7d da                	jge    f012e4fc <test_krealloc_BF+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012e522:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e528:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012e52e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012e535:	eb 17                	jmp    f012e54e <test_krealloc_BF+0xbc1>
			shortArr[i] = 5;
f012e537:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012e53a:	01 c0                	add    %eax,%eax
f012e53c:	89 c2                	mov    %eax,%edx
f012e53e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e544:	01 d0                	add    %edx,%eax
f012e546:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012e54b:	ff 45 ec             	incl   -0x14(%ebp)
f012e54e:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012e554:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012e557:	7d de                	jge    f012e537 <test_krealloc_BF+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012e559:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e55f:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012e565:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e56b:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012e570:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012e576:	01 c0                	add    %eax,%eax
f012e578:	89 c2                	mov    %eax,%edx
f012e57a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e580:	01 d0                	add    %edx,%eax
f012e582:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012e587:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e58d:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012e593:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012e59a:	eb 49                	jmp    f012e5e5 <test_krealloc_BF+0xc58>
			structArr[i].a = 7;
f012e59c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e59f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e5a6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e5ac:	01 d0                	add    %edx,%eax
f012e5ae:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012e5b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e5b4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e5bb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e5c1:	01 d0                	add    %edx,%eax
f012e5c3:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012e5c9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e5cc:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e5d3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e5d9:	01 d0                	add    %edx,%eax
f012e5db:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012e5e2:	ff 45 e8             	incl   -0x18(%ebp)
f012e5e5:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e5eb:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012e5ee:	7d ac                	jge    f012e59c <test_krealloc_BF+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012e5f0:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e5f6:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012e5fc:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e602:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012e605:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e60b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012e611:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e617:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012e61e:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e624:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e62b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e631:	01 d0                	add    %edx,%eax
f012e633:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012e636:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e63c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e643:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e649:	01 d0                	add    %edx,%eax
f012e64b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012e651:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e657:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e65e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e664:	01 d0                	add    %edx,%eax
f012e666:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012e66d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012e673:	8a 00                	mov    (%eax),%al
f012e675:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012e678:	75 17                	jne    f012e691 <test_krealloc_BF+0xd04>
f012e67a:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012e680:	89 c2                	mov    %eax,%edx
f012e682:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012e688:	01 d0                	add    %edx,%eax
f012e68a:	8a 00                	mov    (%eax),%al
f012e68c:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012e68f:	74 17                	je     f012e6a8 <test_krealloc_BF+0xd1b>
			panic(
f012e691:	83 ec 04             	sub    $0x4,%esp
f012e694:	68 8c c3 13 f0       	push   $0xf013c38c
f012e699:	68 b1 11 00 00       	push   $0x11b1
f012e69e:	68 5a b0 13 f0       	push   $0xf013b05a
f012e6a3:	e8 5d 1b fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012e6a8:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e6ae:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012e6b4:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e6ba:	8a 00                	mov    (%eax),%al
f012e6bc:	3c 02                	cmp    $0x2,%al
f012e6be:	75 16                	jne    f012e6d6 <test_krealloc_BF+0xd49>
f012e6c0:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012e6c6:	89 c2                	mov    %eax,%edx
f012e6c8:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e6ce:	01 d0                	add    %edx,%eax
f012e6d0:	8a 00                	mov    (%eax),%al
f012e6d2:	3c 02                	cmp    $0x2,%al
f012e6d4:	74 20                	je     f012e6f6 <test_krealloc_BF+0xd69>
			panic(
f012e6d6:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e6dc:	8a 00                	mov    (%eax),%al
f012e6de:	0f be c0             	movsbl %al,%eax
f012e6e1:	50                   	push   %eax
f012e6e2:	68 cc c3 13 f0       	push   $0xf013c3cc
f012e6e7:	68 b7 11 00 00       	push   $0x11b7
f012e6ec:	68 5a b0 13 f0       	push   $0xf013b05a
f012e6f1:	e8 0f 1b fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012e6f6:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e6fc:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012e702:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e708:	8b 00                	mov    (%eax),%eax
f012e70a:	83 f8 03             	cmp    $0x3,%eax
f012e70d:	75 1c                	jne    f012e72b <test_krealloc_BF+0xd9e>
f012e70f:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012e715:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e71c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e722:	01 d0                	add    %edx,%eax
f012e724:	8b 00                	mov    (%eax),%eax
f012e726:	83 f8 03             	cmp    $0x3,%eax
f012e729:	74 17                	je     f012e742 <test_krealloc_BF+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012e72b:	83 ec 04             	sub    $0x4,%esp
f012e72e:	68 18 c4 13 f0       	push   $0xf013c418
f012e733:	68 bb 11 00 00       	push   $0x11bb
f012e738:	68 5a b0 13 f0       	push   $0xf013b05a
f012e73d:	e8 c3 1a fd ff       	call   f0100205 <_panic>

		intArr = (int*) ptr_allocations[3];
f012e742:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e748:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012e74e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e754:	8b 00                	mov    (%eax),%eax
f012e756:	83 f8 04             	cmp    $0x4,%eax
f012e759:	75 1c                	jne    f012e777 <test_krealloc_BF+0xdea>
f012e75b:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012e761:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e768:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e76e:	01 d0                	add    %edx,%eax
f012e770:	8b 00                	mov    (%eax),%eax
f012e772:	83 f8 04             	cmp    $0x4,%eax
f012e775:	74 17                	je     f012e78e <test_krealloc_BF+0xe01>
			panic(
f012e777:	83 ec 04             	sub    $0x4,%esp
f012e77a:	68 8c c3 13 f0       	push   $0xf013c38c
f012e77f:	68 c0 11 00 00       	push   $0x11c0
f012e784:	68 5a b0 13 f0       	push   $0xf013b05a
f012e789:	e8 77 1a fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012e78e:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e794:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012e79a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e7a0:	66 8b 00             	mov    (%eax),%ax
f012e7a3:	66 83 f8 05          	cmp    $0x5,%ax
f012e7a7:	75 1b                	jne    f012e7c4 <test_krealloc_BF+0xe37>
f012e7a9:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012e7af:	01 c0                	add    %eax,%eax
f012e7b1:	89 c2                	mov    %eax,%edx
f012e7b3:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e7b9:	01 d0                	add    %edx,%eax
f012e7bb:	66 8b 00             	mov    (%eax),%ax
f012e7be:	66 83 f8 05          	cmp    $0x5,%ax
f012e7c2:	74 17                	je     f012e7db <test_krealloc_BF+0xe4e>
			panic(
f012e7c4:	83 ec 04             	sub    $0x4,%esp
f012e7c7:	68 8c c3 13 f0       	push   $0xf013c38c
f012e7cc:	68 c5 11 00 00       	push   $0x11c5
f012e7d1:	68 5a b0 13 f0       	push   $0xf013b05a
f012e7d6:	e8 2a 1a fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012e7db:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e7e1:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012e7e7:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e7ed:	66 8b 00             	mov    (%eax),%ax
f012e7f0:	66 83 f8 06          	cmp    $0x6,%ax
f012e7f4:	75 1b                	jne    f012e811 <test_krealloc_BF+0xe84>
f012e7f6:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012e7fc:	01 c0                	add    %eax,%eax
f012e7fe:	89 c2                	mov    %eax,%edx
f012e800:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e806:	01 d0                	add    %edx,%eax
f012e808:	66 8b 00             	mov    (%eax),%ax
f012e80b:	66 83 f8 06          	cmp    $0x6,%ax
f012e80f:	74 17                	je     f012e828 <test_krealloc_BF+0xe9b>
			panic(
f012e811:	83 ec 04             	sub    $0x4,%esp
f012e814:	68 8c c3 13 f0       	push   $0xf013c38c
f012e819:	68 ca 11 00 00       	push   $0x11ca
f012e81e:	68 5a b0 13 f0       	push   $0xf013b05a
f012e823:	e8 dd 19 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012e828:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e82e:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012e834:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e83a:	8a 00                	mov    (%eax),%al
f012e83c:	3c 07                	cmp    $0x7,%al
f012e83e:	75 1b                	jne    f012e85b <test_krealloc_BF+0xece>
f012e840:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e846:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e84d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e853:	01 d0                	add    %edx,%eax
f012e855:	8a 00                	mov    (%eax),%al
f012e857:	3c 07                	cmp    $0x7,%al
f012e859:	74 17                	je     f012e872 <test_krealloc_BF+0xee5>
			panic(
f012e85b:	83 ec 04             	sub    $0x4,%esp
f012e85e:	68 8c c3 13 f0       	push   $0xf013c38c
f012e863:	68 cf 11 00 00       	push   $0x11cf
f012e868:	68 5a b0 13 f0       	push   $0xf013b05a
f012e86d:	e8 93 19 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012e872:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e878:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e87c:	66 83 f8 07          	cmp    $0x7,%ax
f012e880:	75 1f                	jne    f012e8a1 <test_krealloc_BF+0xf14>
f012e882:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e888:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e88f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e895:	01 d0                	add    %edx,%eax
f012e897:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e89b:	66 83 f8 07          	cmp    $0x7,%ax
f012e89f:	74 17                	je     f012e8b8 <test_krealloc_BF+0xf2b>
			panic(
f012e8a1:	83 ec 04             	sub    $0x4,%esp
f012e8a4:	68 8c c3 13 f0       	push   $0xf013c38c
f012e8a9:	68 d2 11 00 00       	push   $0x11d2
f012e8ae:	68 5a b0 13 f0       	push   $0xf013b05a
f012e8b3:	e8 4d 19 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012e8b8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e8be:	8b 40 04             	mov    0x4(%eax),%eax
f012e8c1:	83 f8 07             	cmp    $0x7,%eax
f012e8c4:	75 1d                	jne    f012e8e3 <test_krealloc_BF+0xf56>
f012e8c6:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e8cc:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e8d3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e8d9:	01 d0                	add    %edx,%eax
f012e8db:	8b 40 04             	mov    0x4(%eax),%eax
f012e8de:	83 f8 07             	cmp    $0x7,%eax
f012e8e1:	74 17                	je     f012e8fa <test_krealloc_BF+0xf6d>
			panic(
f012e8e3:	83 ec 04             	sub    $0x4,%esp
f012e8e6:	68 8c c3 13 f0       	push   $0xf013c38c
f012e8eb:	68 d5 11 00 00       	push   $0x11d5
f012e8f0:	68 5a b0 13 f0       	push   $0xf013b05a
f012e8f5:	e8 0b 19 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012e8fa:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e900:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012e906:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e90c:	8a 00                	mov    (%eax),%al
f012e90e:	3c 08                	cmp    $0x8,%al
f012e910:	75 1b                	jne    f012e92d <test_krealloc_BF+0xfa0>
f012e912:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e918:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e91f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e925:	01 d0                	add    %edx,%eax
f012e927:	8a 00                	mov    (%eax),%al
f012e929:	3c 08                	cmp    $0x8,%al
f012e92b:	74 17                	je     f012e944 <test_krealloc_BF+0xfb7>
			panic(
f012e92d:	83 ec 04             	sub    $0x4,%esp
f012e930:	68 8c c3 13 f0       	push   $0xf013c38c
f012e935:	68 da 11 00 00       	push   $0x11da
f012e93a:	68 5a b0 13 f0       	push   $0xf013b05a
f012e93f:	e8 c1 18 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012e944:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e94a:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e94e:	66 83 f8 08          	cmp    $0x8,%ax
f012e952:	75 1f                	jne    f012e973 <test_krealloc_BF+0xfe6>
f012e954:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e95a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e961:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e967:	01 d0                	add    %edx,%eax
f012e969:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e96d:	66 83 f8 08          	cmp    $0x8,%ax
f012e971:	74 17                	je     f012e98a <test_krealloc_BF+0xffd>
			panic(
f012e973:	83 ec 04             	sub    $0x4,%esp
f012e976:	68 8c c3 13 f0       	push   $0xf013c38c
f012e97b:	68 dd 11 00 00       	push   $0x11dd
f012e980:	68 5a b0 13 f0       	push   $0xf013b05a
f012e985:	e8 7b 18 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012e98a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e990:	8b 40 04             	mov    0x4(%eax),%eax
f012e993:	83 f8 08             	cmp    $0x8,%eax
f012e996:	75 1d                	jne    f012e9b5 <test_krealloc_BF+0x1028>
f012e998:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e99e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e9a5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e9ab:	01 d0                	add    %edx,%eax
f012e9ad:	8b 40 04             	mov    0x4(%eax),%eax
f012e9b0:	83 f8 08             	cmp    $0x8,%eax
f012e9b3:	74 17                	je     f012e9cc <test_krealloc_BF+0x103f>
			panic(
f012e9b5:	83 ec 04             	sub    $0x4,%esp
f012e9b8:	68 8c c3 13 f0       	push   $0xf013c38c
f012e9bd:	68 e0 11 00 00       	push   $0x11e0
f012e9c2:	68 5a b0 13 f0       	push   $0xf013b05a
f012e9c7:	e8 39 18 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012e9cc:	e8 cc e1 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012e9d1:	89 c2                	mov    %eax,%edx
f012e9d3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e9d6:	39 c2                	cmp    %eax,%edx
f012e9d8:	74 17                	je     f012e9f1 <test_krealloc_BF+0x1064>
			panic(
f012e9da:	83 ec 04             	sub    $0x4,%esp
f012e9dd:	68 4c c4 13 f0       	push   $0xf013c44c
f012e9e2:	68 e4 11 00 00       	push   $0x11e4
f012e9e7:	68 5a b0 13 f0       	push   $0xf013b05a
f012e9ec:	e8 14 18 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012e9f1:	83 ec 0c             	sub    $0xc,%esp
f012e9f4:	68 98 c4 13 f0       	push   $0xf013c498
f012e9f9:	e8 10 23 fd ff       	call   f0100d0e <cprintf>
f012e9fe:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012ea01:	e8 97 e1 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012ea06:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ea09:	e8 ba 53 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ea0e:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012ea14:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012ea1a:	83 ec 08             	sub    $0x8,%esp
f012ea1d:	6a 00                	push   $0x0
f012ea1f:	50                   	push   %eax
f012ea20:	e8 20 91 fd ff       	call   f0107b45 <krealloc>
f012ea25:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012ea28:	e8 9b 53 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ea2d:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012ea33:	74 17                	je     f012ea4c <test_krealloc_BF+0x10bf>
			panic(
f012ea35:	83 ec 04             	sub    $0x4,%esp
f012ea38:	68 bc c4 13 f0       	push   $0xf013c4bc
f012ea3d:	68 f1 11 00 00       	push   $0x11f1
f012ea42:	68 5a b0 13 f0       	push   $0xf013b05a
f012ea47:	e8 b9 17 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012ea4c:	e8 4c e1 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012ea51:	89 c2                	mov    %eax,%edx
f012ea53:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ea56:	29 c2                	sub    %eax,%edx
f012ea58:	89 d0                	mov    %edx,%eax
f012ea5a:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ea5f:	74 17                	je     f012ea78 <test_krealloc_BF+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012ea61:	83 ec 04             	sub    $0x4,%esp
f012ea64:	68 30 c5 13 f0       	push   $0xf013c530
f012ea69:	68 f3 11 00 00       	push   $0x11f3
f012ea6e:	68 5a b0 13 f0       	push   $0xf013b05a
f012ea73:	e8 8d 17 fd ff       	call   f0100205 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012ea78:	e8 20 e1 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012ea7d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ea80:	e8 43 53 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ea85:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012ea8b:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012ea91:	83 ec 08             	sub    $0x8,%esp
f012ea94:	6a 00                	push   $0x0
f012ea96:	50                   	push   %eax
f012ea97:	e8 a9 90 fd ff       	call   f0107b45 <krealloc>
f012ea9c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012ea9f:	e8 24 53 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012eaa4:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012eaaa:	74 17                	je     f012eac3 <test_krealloc_BF+0x1136>
			panic(
f012eaac:	83 ec 04             	sub    $0x4,%esp
f012eaaf:	68 bc c4 13 f0       	push   $0xf013c4bc
f012eab4:	68 fc 11 00 00       	push   $0x11fc
f012eab9:	68 5a b0 13 f0       	push   $0xf013b05a
f012eabe:	e8 42 17 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012eac3:	e8 d5 e0 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012eac8:	89 c2                	mov    %eax,%edx
f012eaca:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012eacd:	29 c2                	sub    %eax,%edx
f012eacf:	89 d0                	mov    %edx,%eax
f012ead1:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ead6:	74 17                	je     f012eaef <test_krealloc_BF+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012ead8:	83 ec 04             	sub    $0x4,%esp
f012eadb:	68 30 c5 13 f0       	push   $0xf013c530
f012eae0:	68 fe 11 00 00       	push   $0x11fe
f012eae5:	68 5a b0 13 f0       	push   $0xf013b05a
f012eaea:	e8 16 17 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012eaef:	e8 a9 e0 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012eaf4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012eaf7:	e8 cc 52 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012eafc:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012eb02:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012eb08:	83 ec 08             	sub    $0x8,%esp
f012eb0b:	6a 00                	push   $0x0
f012eb0d:	50                   	push   %eax
f012eb0e:	e8 32 90 fd ff       	call   f0107b45 <krealloc>
f012eb13:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012eb16:	e8 ad 52 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012eb1b:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012eb21:	74 17                	je     f012eb3a <test_krealloc_BF+0x11ad>
			panic(
f012eb23:	83 ec 04             	sub    $0x4,%esp
f012eb26:	68 74 b0 13 f0       	push   $0xf013b074
f012eb2b:	68 06 12 00 00       	push   $0x1206
f012eb30:	68 5a b0 13 f0       	push   $0xf013b05a
f012eb35:	e8 cb 16 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012eb3a:	e8 5e e0 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012eb3f:	89 c2                	mov    %eax,%edx
f012eb41:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012eb44:	29 c2                	sub    %eax,%edx
f012eb46:	89 d0                	mov    %edx,%eax
f012eb48:	3d 00 02 00 00       	cmp    $0x200,%eax
f012eb4d:	74 17                	je     f012eb66 <test_krealloc_BF+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012eb4f:	83 ec 04             	sub    $0x4,%esp
f012eb52:	68 30 c5 13 f0       	push   $0xf013c530
f012eb57:	68 08 12 00 00       	push   $0x1208
f012eb5c:	68 5a b0 13 f0       	push   $0xf013b05a
f012eb61:	e8 9f 16 fd ff       	call   f0100205 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012eb66:	e8 32 e0 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012eb6b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012eb6e:	e8 55 52 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012eb73:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012eb79:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012eb7f:	83 ec 08             	sub    $0x8,%esp
f012eb82:	6a 00                	push   $0x0
f012eb84:	50                   	push   %eax
f012eb85:	e8 bb 8f fd ff       	call   f0107b45 <krealloc>
f012eb8a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012eb8d:	e8 36 52 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012eb92:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012eb98:	74 17                	je     f012ebb1 <test_krealloc_BF+0x1224>
			panic(
f012eb9a:	83 ec 04             	sub    $0x4,%esp
f012eb9d:	68 bc c4 13 f0       	push   $0xf013c4bc
f012eba2:	68 10 12 00 00       	push   $0x1210
f012eba7:	68 5a b0 13 f0       	push   $0xf013b05a
f012ebac:	e8 54 16 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012ebb1:	e8 e7 df fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012ebb6:	89 c2                	mov    %eax,%edx
f012ebb8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ebbb:	29 c2                	sub    %eax,%edx
f012ebbd:	89 d0                	mov    %edx,%eax
f012ebbf:	3d 00 03 00 00       	cmp    $0x300,%eax
f012ebc4:	74 17                	je     f012ebdd <test_krealloc_BF+0x1250>
			panic(
f012ebc6:	83 ec 04             	sub    $0x4,%esp
f012ebc9:	68 64 c5 13 f0       	push   $0xf013c564
f012ebce:	68 13 12 00 00       	push   $0x1213
f012ebd3:	68 5a b0 13 f0       	push   $0xf013b05a
f012ebd8:	e8 28 16 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012ebdd:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012ebe4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012ebeb:	eb 48                	jmp    f012ec35 <test_krealloc_BF+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012ebed:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012ebf0:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f012ebf5:	83 ec 04             	sub    $0x4,%esp
f012ebf8:	8d 8d 9c fd ff ff    	lea    -0x264(%ebp),%ecx
f012ebfe:	51                   	push   %ecx
f012ebff:	52                   	push   %edx
f012ec00:	50                   	push   %eax
f012ec01:	e8 ab 7e fd ff       	call   f0106ab1 <get_page_table>
f012ec06:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012ec09:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012ec0f:	85 c0                	test   %eax,%eax
f012ec11:	75 17                	jne    f012ec2a <test_krealloc_BF+0x129d>
					panic(
f012ec13:	83 ec 04             	sub    $0x4,%esp
f012ec16:	68 5c b9 13 f0       	push   $0xf013b95c
f012ec1b:	68 1f 12 00 00       	push   $0x121f
f012ec20:	68 5a b0 13 f0       	push   $0xf013b05a
f012ec25:	e8 db 15 fd ff       	call   f0100205 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012ec2a:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012ec31:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012ec35:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012ec39:	78 b2                	js     f012ebed <test_krealloc_BF+0x1260>
f012ec3b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012ec3f:	7f 09                	jg     f012ec4a <test_krealloc_BF+0x12bd>
f012ec41:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012ec48:	76 a3                	jbe    f012ebed <test_krealloc_BF+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012ec4a:	83 ec 0c             	sub    $0xc,%esp
f012ec4d:	68 a3 c5 13 f0       	push   $0xf013c5a3
f012ec52:	e8 b7 20 fd ff       	call   f0100d0e <cprintf>
f012ec57:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012ec5a:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ec60:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012ec66:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012ec6d:	eb 21                	jmp    f012ec90 <test_krealloc_BF+0x1303>
			sums[0] += ptr[i];
f012ec6f:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012ec75:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012ec78:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012ec7e:	01 c8                	add    %ecx,%eax
f012ec80:	8a 00                	mov    (%eax),%al
f012ec82:	0f be c0             	movsbl %al,%eax
f012ec85:	01 d0                	add    %edx,%eax
f012ec87:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012ec8d:	ff 45 dc             	incl   -0x24(%ebp)
f012ec90:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012ec96:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012ec99:	7d d4                	jge    f012ec6f <test_krealloc_BF+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012ec9b:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012eca1:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012eca7:	42                   	inc    %edx
f012eca8:	01 d2                	add    %edx,%edx
f012ecaa:	39 d0                	cmp    %edx,%eax
f012ecac:	74 17                	je     f012ecc5 <test_krealloc_BF+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012ecae:	83 ec 04             	sub    $0x4,%esp
f012ecb1:	68 ac c5 13 f0       	push   $0xf013c5ac
f012ecb6:	68 31 12 00 00       	push   $0x1231
f012ecbb:	68 5a b0 13 f0       	push   $0xf013b05a
f012ecc0:	e8 40 15 fd ff       	call   f0100205 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012ecc5:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012eccb:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012ecd1:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012ecd8:	eb 25                	jmp    f012ecff <test_krealloc_BF+0x1372>
			sums[1] += intArr[i];
f012ecda:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012ece0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ece3:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012ecea:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ecf0:	01 c8                	add    %ecx,%eax
f012ecf2:	8b 00                	mov    (%eax),%eax
f012ecf4:	01 d0                	add    %edx,%eax
f012ecf6:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012ecfc:	ff 45 dc             	incl   -0x24(%ebp)
f012ecff:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012ed05:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012ed08:	7d d0                	jge    f012ecda <test_krealloc_BF+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012ed0a:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012ed10:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012ed16:	42                   	inc    %edx
f012ed17:	c1 e2 02             	shl    $0x2,%edx
f012ed1a:	39 d0                	cmp    %edx,%eax
f012ed1c:	74 17                	je     f012ed35 <test_krealloc_BF+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012ed1e:	83 ec 04             	sub    $0x4,%esp
f012ed21:	68 ac c5 13 f0       	push   $0xf013c5ac
f012ed26:	68 3b 12 00 00       	push   $0x123b
f012ed2b:	68 5a b0 13 f0       	push   $0xf013b05a
f012ed30:	e8 d0 14 fd ff       	call   f0100205 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012ed35:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ed3b:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012ed41:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012ed48:	eb 24                	jmp    f012ed6e <test_krealloc_BF+0x13e1>
			sums[2] += shortArr[i];
f012ed4a:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012ed50:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ed53:	01 c0                	add    %eax,%eax
f012ed55:	89 c1                	mov    %eax,%ecx
f012ed57:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ed5d:	01 c8                	add    %ecx,%eax
f012ed5f:	66 8b 00             	mov    (%eax),%ax
f012ed62:	98                   	cwtl   
f012ed63:	01 d0                	add    %edx,%eax
f012ed65:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012ed6b:	ff 45 dc             	incl   -0x24(%ebp)
f012ed6e:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012ed74:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012ed77:	7d d1                	jge    f012ed4a <test_krealloc_BF+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012ed79:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012ed7f:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012ed85:	8d 48 01             	lea    0x1(%eax),%ecx
f012ed88:	89 c8                	mov    %ecx,%eax
f012ed8a:	c1 e0 02             	shl    $0x2,%eax
f012ed8d:	01 c8                	add    %ecx,%eax
f012ed8f:	39 c2                	cmp    %eax,%edx
f012ed91:	74 17                	je     f012edaa <test_krealloc_BF+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012ed93:	83 ec 04             	sub    $0x4,%esp
f012ed96:	68 ac c5 13 f0       	push   $0xf013c5ac
f012ed9b:	68 45 12 00 00       	push   $0x1245
f012eda0:	68 5a b0 13 f0       	push   $0xf013b05a
f012eda5:	e8 5b 14 fd ff       	call   f0100205 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012edaa:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012edb0:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012edb6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012edbd:	eb 70                	jmp    f012ee2f <test_krealloc_BF+0x14a2>
			sums[3] += structArr[i].a;
f012edbf:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f012edc5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012edc8:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012edcf:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012edd5:	01 c8                	add    %ecx,%eax
f012edd7:	8a 00                	mov    (%eax),%al
f012edd9:	0f be c0             	movsbl %al,%eax
f012eddc:	01 d0                	add    %edx,%eax
f012edde:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
			sums[4] += structArr[i].b;
f012ede4:	8b 95 b0 fd ff ff    	mov    -0x250(%ebp),%edx
f012edea:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012eded:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012edf4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012edfa:	01 c8                	add    %ecx,%eax
f012edfc:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ee00:	98                   	cwtl   
f012ee01:	01 d0                	add    %edx,%eax
f012ee03:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
			sums[5] += structArr[i].c;
f012ee09:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f012ee0f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ee12:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012ee19:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ee1f:	01 c8                	add    %ecx,%eax
f012ee21:	8b 40 04             	mov    0x4(%eax),%eax
f012ee24:	01 d0                	add    %edx,%eax
f012ee26:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012ee2c:	ff 45 dc             	incl   -0x24(%ebp)
f012ee2f:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ee35:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012ee38:	7d 85                	jge    f012edbf <test_krealloc_BF+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012ee3a:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f012ee40:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ee46:	8d 50 01             	lea    0x1(%eax),%edx
f012ee49:	89 d0                	mov    %edx,%eax
f012ee4b:	01 c0                	add    %eax,%eax
f012ee4d:	01 d0                	add    %edx,%eax
f012ee4f:	01 c0                	add    %eax,%eax
f012ee51:	01 d0                	add    %edx,%eax
f012ee53:	39 c1                	cmp    %eax,%ecx
f012ee55:	75 3a                	jne    f012ee91 <test_krealloc_BF+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012ee57:	8b 8d b0 fd ff ff    	mov    -0x250(%ebp),%ecx
f012ee5d:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ee63:	8d 50 01             	lea    0x1(%eax),%edx
f012ee66:	89 d0                	mov    %edx,%eax
f012ee68:	01 c0                	add    %eax,%eax
f012ee6a:	01 d0                	add    %edx,%eax
f012ee6c:	01 c0                	add    %eax,%eax
f012ee6e:	01 d0                	add    %edx,%eax
f012ee70:	39 c1                	cmp    %eax,%ecx
f012ee72:	75 1d                	jne    f012ee91 <test_krealloc_BF+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012ee74:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f012ee7a:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ee80:	8d 50 01             	lea    0x1(%eax),%edx
f012ee83:	89 d0                	mov    %edx,%eax
f012ee85:	01 c0                	add    %eax,%eax
f012ee87:	01 d0                	add    %edx,%eax
f012ee89:	01 c0                	add    %eax,%eax
f012ee8b:	01 d0                	add    %edx,%eax
f012ee8d:	39 c1                	cmp    %eax,%ecx
f012ee8f:	74 17                	je     f012eea8 <test_krealloc_BF+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012ee91:	83 ec 04             	sub    $0x4,%esp
f012ee94:	68 ac c5 13 f0       	push   $0xf013c5ac
f012ee99:	68 53 12 00 00       	push   $0x1253
f012ee9e:	68 5a b0 13 f0       	push   $0xf013b05a
f012eea3:	e8 5d 13 fd ff       	call   f0100205 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012eea8:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012eeaf:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012eeb2:	e8 e6 dc fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012eeb7:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012eeba:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012eec0:	83 ec 08             	sub    $0x8,%esp
f012eec3:	68 00 3c 00 00       	push   $0x3c00
f012eec8:	50                   	push   %eax
f012eec9:	e8 77 8c fd ff       	call   f0107b45 <krealloc>
f012eece:	83 c4 10             	add    $0x10,%esp
f012eed1:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012eed7:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012eedd:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012eee2:	77 17                	ja     f012eefb <test_krealloc_BF+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012eee4:	83 ec 04             	sub    $0x4,%esp
f012eee7:	68 00 c3 13 f0       	push   $0xf013c300
f012eeec:	68 5f 12 00 00       	push   $0x125f
f012eef1:	68 5a b0 13 f0       	push   $0xf013b05a
f012eef6:	e8 0a 13 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012eefb:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ef01:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012ef07:	74 17                	je     f012ef20 <test_krealloc_BF+0x1593>
			panic(
f012ef09:	83 ec 04             	sub    $0x4,%esp
f012ef0c:	68 e4 c5 13 f0       	push   $0xf013c5e4
f012ef11:	68 62 12 00 00       	push   $0x1262
f012ef16:	68 5a b0 13 f0       	push   $0xf013b05a
f012ef1b:	e8 e5 12 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012ef20:	e8 78 dc fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012ef25:	89 c2                	mov    %eax,%edx
f012ef27:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ef2a:	39 c2                	cmp    %eax,%edx
f012ef2c:	74 17                	je     f012ef45 <test_krealloc_BF+0x15b8>
			panic(
f012ef2e:	83 ec 04             	sub    $0x4,%esp
f012ef31:	68 50 c6 13 f0       	push   $0xf013c650
f012ef36:	68 65 12 00 00       	push   $0x1265
f012ef3b:	68 5a b0 13 f0       	push   $0xf013b05a
f012ef40:	e8 c0 12 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012ef45:	e8 53 dc fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012ef4a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012ef4d:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ef53:	83 ec 08             	sub    $0x8,%esp
f012ef56:	68 00 fc 0f 00       	push   $0xffc00
f012ef5b:	50                   	push   %eax
f012ef5c:	e8 e4 8b fd ff       	call   f0107b45 <krealloc>
f012ef61:	83 c4 10             	add    $0x10,%esp
f012ef64:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ef6a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012ef70:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ef75:	77 17                	ja     f012ef8e <test_krealloc_BF+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ef77:	83 ec 04             	sub    $0x4,%esp
f012ef7a:	68 00 c3 13 f0       	push   $0xf013c300
f012ef7f:	68 6b 12 00 00       	push   $0x126b
f012ef84:	68 5a b0 13 f0       	push   $0xf013b05a
f012ef89:	e8 77 12 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012ef8e:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ef94:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012ef9a:	74 17                	je     f012efb3 <test_krealloc_BF+0x1626>
			panic(
f012ef9c:	83 ec 04             	sub    $0x4,%esp
f012ef9f:	68 e4 c5 13 f0       	push   $0xf013c5e4
f012efa4:	68 6e 12 00 00       	push   $0x126e
f012efa9:	68 5a b0 13 f0       	push   $0xf013b05a
f012efae:	e8 52 12 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012efb3:	e8 e5 db fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012efb8:	89 c2                	mov    %eax,%edx
f012efba:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012efbd:	39 c2                	cmp    %eax,%edx
f012efbf:	74 17                	je     f012efd8 <test_krealloc_BF+0x164b>
			panic(
f012efc1:	83 ec 04             	sub    $0x4,%esp
f012efc4:	68 50 c6 13 f0       	push   $0xf013c650
f012efc9:	68 71 12 00 00       	push   $0x1271
f012efce:	68 5a b0 13 f0       	push   $0xf013b05a
f012efd3:	e8 2d 12 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012efd8:	e8 c0 db fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012efdd:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012efe0:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012efe6:	83 ec 08             	sub    $0x8,%esp
f012efe9:	68 00 fc 0f 00       	push   $0xffc00
f012efee:	50                   	push   %eax
f012efef:	e8 51 8b fd ff       	call   f0107b45 <krealloc>
f012eff4:	83 c4 10             	add    $0x10,%esp
f012eff7:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012effd:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012f003:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f008:	77 17                	ja     f012f021 <test_krealloc_BF+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f00a:	83 ec 04             	sub    $0x4,%esp
f012f00d:	68 00 c3 13 f0       	push   $0xf013c300
f012f012:	68 77 12 00 00       	push   $0x1277
f012f017:	68 5a b0 13 f0       	push   $0xf013b05a
f012f01c:	e8 e4 11 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012f021:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f027:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012f02d:	74 17                	je     f012f046 <test_krealloc_BF+0x16b9>
			panic(
f012f02f:	83 ec 04             	sub    $0x4,%esp
f012f032:	68 e4 c5 13 f0       	push   $0xf013c5e4
f012f037:	68 7a 12 00 00       	push   $0x127a
f012f03c:	68 5a b0 13 f0       	push   $0xf013b05a
f012f041:	e8 bf 11 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012f046:	e8 52 db fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f04b:	89 c2                	mov    %eax,%edx
f012f04d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f050:	39 c2                	cmp    %eax,%edx
f012f052:	74 17                	je     f012f06b <test_krealloc_BF+0x16de>
			panic(
f012f054:	83 ec 04             	sub    $0x4,%esp
f012f057:	68 50 c6 13 f0       	push   $0xf013c650
f012f05c:	68 7d 12 00 00       	push   $0x127d
f012f061:	68 5a b0 13 f0       	push   $0xf013b05a
f012f066:	e8 9a 11 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012f06b:	e8 2d db fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f070:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012f073:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012f079:	83 ec 08             	sub    $0x8,%esp
f012f07c:	68 00 fc 0f 00       	push   $0xffc00
f012f081:	50                   	push   %eax
f012f082:	e8 be 8a fd ff       	call   f0107b45 <krealloc>
f012f087:	83 c4 10             	add    $0x10,%esp
f012f08a:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f090:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012f096:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f09b:	77 17                	ja     f012f0b4 <test_krealloc_BF+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f09d:	83 ec 04             	sub    $0x4,%esp
f012f0a0:	68 00 c3 13 f0       	push   $0xf013c300
f012f0a5:	68 85 12 00 00       	push   $0x1285
f012f0aa:	68 5a b0 13 f0       	push   $0xf013b05a
f012f0af:	e8 51 11 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[3])
f012f0b4:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012f0ba:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012f0c0:	74 17                	je     f012f0d9 <test_krealloc_BF+0x174c>
			panic(
f012f0c2:	83 ec 04             	sub    $0x4,%esp
f012f0c5:	68 94 c6 13 f0       	push   $0xf013c694
f012f0ca:	68 88 12 00 00       	push   $0x1288
f012f0cf:	68 5a b0 13 f0       	push   $0xf013b05a
f012f0d4:	e8 2c 11 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012f0d9:	e8 bf da fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f0de:	89 c2                	mov    %eax,%edx
f012f0e0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f0e3:	39 c2                	cmp    %eax,%edx
f012f0e5:	74 17                	je     f012f0fe <test_krealloc_BF+0x1771>
			panic(
f012f0e7:	83 ec 04             	sub    $0x4,%esp
f012f0ea:	68 50 c6 13 f0       	push   $0xf013c650
f012f0ef:	68 8b 12 00 00       	push   $0x128b
f012f0f4:	68 5a b0 13 f0       	push   $0xf013b05a
f012f0f9:	e8 07 11 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012f0fe:	83 ec 0c             	sub    $0xc,%esp
f012f101:	68 73 b8 13 f0       	push   $0xf013b873
f012f106:	e8 03 1c fd ff       	call   f0100d0e <cprintf>
f012f10b:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012f10e:	e8 8a da fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f113:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], (1 * Mega - kilo) + (7 * kilo));
f012f116:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f11c:	83 ec 08             	sub    $0x8,%esp
f012f11f:	68 00 18 10 00       	push   $0x101800
f012f124:	50                   	push   %eax
f012f125:	e8 1b 8a fd ff       	call   f0107b45 <krealloc>
f012f12a:	83 c4 10             	add    $0x10,%esp
f012f12d:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f130:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f133:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f138:	77 17                	ja     f012f151 <test_krealloc_BF+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f13a:	83 ec 04             	sub    $0x4,%esp
f012f13d:	68 00 c3 13 f0       	push   $0xf013c300
f012f142:	68 93 12 00 00       	push   $0x1293
f012f147:	68 5a b0 13 f0       	push   $0xf013b05a
f012f14c:	e8 b4 10 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012f151:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f157:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f15a:	74 17                	je     f012f173 <test_krealloc_BF+0x17e6>
			panic(
f012f15c:	83 ec 04             	sub    $0x4,%esp
f012f15f:	68 f4 c6 13 f0       	push   $0xf013c6f4
f012f164:	68 96 12 00 00       	push   $0x1296
f012f169:	68 5a b0 13 f0       	push   $0xf013b05a
f012f16e:	e8 92 10 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012f173:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f176:	e8 22 da fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f17b:	29 c3                	sub    %eax,%ebx
f012f17d:	89 d8                	mov    %ebx,%eax
f012f17f:	83 f8 02             	cmp    $0x2,%eax
f012f182:	74 17                	je     f012f19b <test_krealloc_BF+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012f184:	83 ec 04             	sub    $0x4,%esp
f012f187:	68 70 c7 13 f0       	push   $0xf013c770
f012f18c:	68 98 12 00 00       	push   $0x1298
f012f191:	68 5a b0 13 f0       	push   $0xf013b05a
f012f196:	e8 6a 10 fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012f19b:	e8 fd d9 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f1a0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012f1a3:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f1a9:	83 ec 08             	sub    $0x8,%esp
f012f1ac:	68 00 fc 3f 00       	push   $0x3ffc00
f012f1b1:	50                   	push   %eax
f012f1b2:	e8 8e 89 fd ff       	call   f0107b45 <krealloc>
f012f1b7:	83 c4 10             	add    $0x10,%esp
f012f1ba:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f1bd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f1c0:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f1c5:	77 17                	ja     f012f1de <test_krealloc_BF+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f1c7:	83 ec 04             	sub    $0x4,%esp
f012f1ca:	68 00 c3 13 f0       	push   $0xf013c300
f012f1cf:	68 9e 12 00 00       	push   $0x129e
f012f1d4:	68 5a b0 13 f0       	push   $0xf013b05a
f012f1d9:	e8 27 10 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012f1de:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f1e4:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f1e7:	74 17                	je     f012f200 <test_krealloc_BF+0x1873>
			panic(
f012f1e9:	83 ec 04             	sub    $0x4,%esp
f012f1ec:	68 f4 c6 13 f0       	push   $0xf013c6f4
f012f1f1:	68 a1 12 00 00       	push   $0x12a1
f012f1f6:	68 5a b0 13 f0       	push   $0xf013b05a
f012f1fb:	e8 05 10 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012f200:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f203:	e8 95 d9 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f208:	29 c3                	sub    %eax,%ebx
f012f20a:	89 d8                	mov    %ebx,%eax
f012f20c:	3d 00 02 00 00       	cmp    $0x200,%eax
f012f211:	74 17                	je     f012f22a <test_krealloc_BF+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012f213:	83 ec 04             	sub    $0x4,%esp
f012f216:	68 70 c7 13 f0       	push   $0xf013c770
f012f21b:	68 a4 12 00 00       	push   $0x12a4
f012f220:	68 5a b0 13 f0       	push   $0xf013b05a
f012f225:	e8 db 0f fd ff       	call   f0100205 <_panic>


	}
	cprintf("\b\b\b60%");
f012f22a:	83 ec 0c             	sub    $0xc,%esp
f012f22d:	68 b8 b8 13 f0       	push   $0xf013b8b8
f012f232:	e8 d7 1a fd ff       	call   f0100d0e <cprintf>
f012f237:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012f23a:	e8 5e d9 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f23f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012f242:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f248:	83 ec 08             	sub    $0x8,%esp
f012f24b:	68 00 fc 9f 00       	push   $0x9ffc00
f012f250:	50                   	push   %eax
f012f251:	e8 ef 88 fd ff       	call   f0107b45 <krealloc>
f012f256:	83 c4 10             	add    $0x10,%esp
f012f259:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f25c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f25f:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f264:	77 17                	ja     f012f27d <test_krealloc_BF+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f266:	83 ec 04             	sub    $0x4,%esp
f012f269:	68 00 c3 13 f0       	push   $0xf013c300
f012f26e:	68 af 12 00 00       	push   $0x12af
f012f273:	68 5a b0 13 f0       	push   $0xf013b05a
f012f278:	e8 88 0f fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (11 * Mega))
f012f27d:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012f284:	10 00 00 
f012f287:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012f28d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012f292:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012f298:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012f29e:	ba 00 00 00 00       	mov    $0x0,%edx
f012f2a3:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012f2a9:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012f2af:	29 d0                	sub    %edx,%eax
f012f2b1:	89 c1                	mov    %eax,%ecx
f012f2b3:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012f2ba:	10 00 00 
f012f2bd:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012f2c2:	0f b6 d0             	movzbl %al,%edx
f012f2c5:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012f2cb:	01 d0                	add    %edx,%eax
f012f2cd:	48                   	dec    %eax
f012f2ce:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012f2d4:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012f2da:	ba 00 00 00 00       	mov    $0x0,%edx
f012f2df:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012f2e5:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012f2eb:	29 d0                	sub    %edx,%eax
f012f2ed:	01 c1                	add    %eax,%ecx
f012f2ef:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012f2f6:	10 00 00 
f012f2f9:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012f2fe:	0f b6 c0             	movzbl %al,%eax
f012f301:	c1 e0 04             	shl    $0x4,%eax
f012f304:	89 c2                	mov    %eax,%edx
f012f306:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012f30c:	01 d0                	add    %edx,%eax
f012f30e:	48                   	dec    %eax
f012f30f:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012f315:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012f31b:	ba 00 00 00 00       	mov    $0x0,%edx
f012f320:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012f326:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012f32c:	29 d0                	sub    %edx,%eax
f012f32e:	01 c8                	add    %ecx,%eax
f012f330:	8d 90 00 40 b0 f6    	lea    -0x94fc000(%eax),%edx
f012f336:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f339:	39 c2                	cmp    %eax,%edx
f012f33b:	74 18                	je     f012f355 <test_krealloc_BF+0x19c8>
			panic(
f012f33d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f340:	50                   	push   %eax
f012f341:	68 a4 c7 13 f0       	push   $0xf013c7a4
f012f346:	68 b3 12 00 00       	push   $0x12b3
f012f34b:	68 5a b0 13 f0       	push   $0xf013b05a
f012f350:	e8 b0 0e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012f355:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f35b:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f35e:	75 17                	jne    f012f377 <test_krealloc_BF+0x19ea>
			panic(
f012f360:	83 ec 04             	sub    $0x4,%esp
f012f363:	68 e8 c7 13 f0       	push   $0xf013c7e8
f012f368:	68 b6 12 00 00       	push   $0x12b6
f012f36d:	68 5a b0 13 f0       	push   $0xf013b05a
f012f372:	e8 8e 0e fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012f377:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f37a:	e8 1e d8 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f37f:	29 c3                	sub    %eax,%ebx
f012f381:	89 d8                	mov    %ebx,%eax
f012f383:	3d 00 06 00 00       	cmp    $0x600,%eax
f012f388:	74 17                	je     f012f3a1 <test_krealloc_BF+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012f38a:	83 ec 04             	sub    $0x4,%esp
f012f38d:	68 70 c7 13 f0       	push   $0xf013c770
f012f392:	68 b9 12 00 00       	push   $0x12b9
f012f397:	68 5a b0 13 f0       	push   $0xf013b05a
f012f39c:	e8 64 0e fd ff       	call   f0100205 <_panic>

		ptr_allocations[4] = newAddress;
f012f3a1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f3a4:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 4 MB
		freeFrames = sys_calculate_free_frames();
f012f3aa:	e8 ee d7 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f3af:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (4 * Mega - kilo));
f012f3b2:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f3b8:	83 ec 08             	sub    $0x8,%esp
f012f3bb:	68 00 fc 3f 00       	push   $0x3ffc00
f012f3c0:	50                   	push   %eax
f012f3c1:	e8 7f 87 fd ff       	call   f0107b45 <krealloc>
f012f3c6:	83 c4 10             	add    $0x10,%esp
f012f3c9:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f3cc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f3cf:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f3d4:	77 17                	ja     f012f3ed <test_krealloc_BF+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f3d6:	83 ec 04             	sub    $0x4,%esp
f012f3d9:	68 00 c3 13 f0       	push   $0xf013c300
f012f3de:	68 c2 12 00 00       	push   $0x12c2
f012f3e3:	68 5a b0 13 f0       	push   $0xf013b05a
f012f3e8:	e8 18 0e fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f012f3ed:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f3f3:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f3f6:	75 17                	jne    f012f40f <test_krealloc_BF+0x1a82>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012f3f8:	83 ec 04             	sub    $0x4,%esp
f012f3fb:	68 e8 c7 13 f0       	push   $0xf013c7e8
f012f400:	68 c4 12 00 00       	push   $0x12c4
f012f405:	68 5a b0 13 f0       	push   $0xf013b05a
f012f40a:	e8 f6 0d fd ff       	call   f0100205 <_panic>
		if ((uint32)newAddress != ACTUAL_START + 4 * Mega) panic("krealloc: Wrong start address for allocated space");
f012f40f:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012f416:	10 00 00 
f012f419:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012f41f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012f424:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012f42a:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012f430:	ba 00 00 00 00       	mov    $0x0,%edx
f012f435:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012f43b:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012f441:	29 d0                	sub    %edx,%eax
f012f443:	89 c1                	mov    %eax,%ecx
f012f445:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012f44c:	10 00 00 
f012f44f:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012f454:	0f b6 d0             	movzbl %al,%edx
f012f457:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012f45d:	01 d0                	add    %edx,%eax
f012f45f:	48                   	dec    %eax
f012f460:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012f466:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012f46c:	ba 00 00 00 00       	mov    $0x0,%edx
f012f471:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012f477:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012f47d:	29 d0                	sub    %edx,%eax
f012f47f:	01 c1                	add    %eax,%ecx
f012f481:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012f488:	10 00 00 
f012f48b:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012f490:	0f b6 c0             	movzbl %al,%eax
f012f493:	c1 e0 04             	shl    $0x4,%eax
f012f496:	89 c2                	mov    %eax,%edx
f012f498:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012f49e:	01 d0                	add    %edx,%eax
f012f4a0:	48                   	dec    %eax
f012f4a1:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012f4a7:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012f4ad:	ba 00 00 00 00       	mov    $0x0,%edx
f012f4b2:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012f4b8:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012f4be:	29 d0                	sub    %edx,%eax
f012f4c0:	01 c8                	add    %ecx,%eax
f012f4c2:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f012f4c8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f4cb:	39 c2                	cmp    %eax,%edx
f012f4cd:	74 17                	je     f012f4e6 <test_krealloc_BF+0x1b59>
f012f4cf:	83 ec 04             	sub    $0x4,%esp
f012f4d2:	68 3c c3 13 f0       	push   $0xf013c33c
f012f4d7:	68 c5 12 00 00       	push   $0x12c5
f012f4dc:	68 5a b0 13 f0       	push   $0xf013b05a
f012f4e1:	e8 1f 0d fd ff       	call   f0100205 <_panic>

		//1 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 256)
f012f4e6:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f4e9:	e8 af d6 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f4ee:	29 c3                	sub    %eax,%ebx
f012f4f0:	89 d8                	mov    %ebx,%eax
f012f4f2:	3d 00 01 00 00       	cmp    $0x100,%eax
f012f4f7:	74 17                	je     f012f510 <test_krealloc_BF+0x1b83>
			panic("krealloc: pages in memory are not loaded correctly");
f012f4f9:	83 ec 04             	sub    $0x4,%esp
f012f4fc:	68 70 c7 13 f0       	push   $0xf013c770
f012f501:	68 c9 12 00 00       	push   $0x12c9
f012f506:	68 5a b0 13 f0       	push   $0xf013b05a
f012f50b:	e8 f5 0c fd ff       	call   f0100205 <_panic>
		ptr_allocations[6] = newAddress;
f012f510:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f513:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		//Reallocate 1st 3 MB (already reallocated to 4 MB) to 20 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012f519:	e8 7f d6 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f51e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012f521:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f527:	83 ec 08             	sub    $0x8,%esp
f012f52a:	68 00 fc 3f 01       	push   $0x13ffc00
f012f52f:	50                   	push   %eax
f012f530:	e8 10 86 fd ff       	call   f0107b45 <krealloc>
f012f535:	83 c4 10             	add    $0x10,%esp
f012f538:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f53b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f53e:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f543:	77 17                	ja     f012f55c <test_krealloc_BF+0x1bcf>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f545:	83 ec 04             	sub    $0x4,%esp
f012f548:	68 00 c3 13 f0       	push   $0xf013c300
f012f54d:	68 cf 12 00 00       	push   $0x12cf
f012f552:	68 5a b0 13 f0       	push   $0xf013b05a
f012f557:	e8 a9 0c fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f012f55c:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f562:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f565:	75 17                	jne    f012f57e <test_krealloc_BF+0x1bf1>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012f567:	83 ec 04             	sub    $0x4,%esp
f012f56a:	68 e8 c7 13 f0       	push   $0xf013c7e8
f012f56f:	68 d1 12 00 00       	push   $0x12d1
f012f574:	68 5a b0 13 f0       	push   $0xf013b05a
f012f579:	e8 87 0c fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (21 * Mega))
f012f57e:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f012f585:	10 00 00 
f012f588:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012f58e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012f593:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f012f599:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012f59f:	ba 00 00 00 00       	mov    $0x0,%edx
f012f5a4:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f012f5aa:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012f5b0:	29 d0                	sub    %edx,%eax
f012f5b2:	89 c1                	mov    %eax,%ecx
f012f5b4:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f012f5bb:	10 00 00 
f012f5be:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012f5c3:	0f b6 d0             	movzbl %al,%edx
f012f5c6:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012f5cc:	01 d0                	add    %edx,%eax
f012f5ce:	48                   	dec    %eax
f012f5cf:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f012f5d5:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012f5db:	ba 00 00 00 00       	mov    $0x0,%edx
f012f5e0:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f012f5e6:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012f5ec:	29 d0                	sub    %edx,%eax
f012f5ee:	01 c1                	add    %eax,%ecx
f012f5f0:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f012f5f7:	10 00 00 
f012f5fa:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012f5ff:	0f b6 c0             	movzbl %al,%eax
f012f602:	c1 e0 04             	shl    $0x4,%eax
f012f605:	89 c2                	mov    %eax,%edx
f012f607:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012f60d:	01 d0                	add    %edx,%eax
f012f60f:	48                   	dec    %eax
f012f610:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f012f616:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012f61c:	ba 00 00 00 00       	mov    $0x0,%edx
f012f621:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f012f627:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012f62d:	29 d0                	sub    %edx,%eax
f012f62f:	01 c8                	add    %ecx,%eax
f012f631:	8d 90 00 40 50 f7    	lea    -0x8afc000(%eax),%edx
f012f637:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f63a:	39 c2                	cmp    %eax,%edx
f012f63c:	74 17                	je     f012f655 <test_krealloc_BF+0x1cc8>
			panic("krealloc: Wrong start address for reallocated space\n");
f012f63e:	83 ec 04             	sub    $0x4,%esp
f012f641:	68 08 c9 13 f0       	push   $0xf013c908
f012f646:	68 d3 12 00 00       	push   $0x12d3
f012f64b:	68 5a b0 13 f0       	push   $0xf013b05a
f012f650:	e8 b0 0b fd ff       	call   f0100205 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != (16 * Mega) / PAGE_SIZE)
f012f655:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f658:	e8 40 d5 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f65d:	29 c3                	sub    %eax,%ebx
f012f65f:	89 d8                	mov    %ebx,%eax
f012f661:	3d 00 10 00 00       	cmp    $0x1000,%eax
f012f666:	74 17                	je     f012f67f <test_krealloc_BF+0x1cf2>
			panic("krealloc: pages in memory are not loaded correctly");
f012f668:	83 ec 04             	sub    $0x4,%esp
f012f66b:	68 70 c7 13 f0       	push   $0xf013c770
f012f670:	68 d6 12 00 00       	push   $0x12d6
f012f675:	68 5a b0 13 f0       	push   $0xf013b05a
f012f67a:	e8 86 0b fd ff       	call   f0100205 <_panic>

		ptr_allocations[6] = newAddress;
f012f67f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f682:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012f688:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f68e:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012f694:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012f69b:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012f69e:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012f6a5:	eb 21                	jmp    f012f6c8 <test_krealloc_BF+0x1d3b>
			sums[0] += ptr[i];
f012f6a7:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f6ad:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012f6b0:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012f6b6:	01 c8                	add    %ecx,%eax
f012f6b8:	8a 00                	mov    (%eax),%al
f012f6ba:	0f be c0             	movsbl %al,%eax
f012f6bd:	01 d0                	add    %edx,%eax
f012f6bf:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012f6c5:	ff 45 d8             	incl   -0x28(%ebp)
f012f6c8:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012f6ce:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012f6d1:	7d d4                	jge    f012f6a7 <test_krealloc_BF+0x1d1a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012f6d3:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012f6d9:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012f6df:	42                   	inc    %edx
f012f6e0:	01 d2                	add    %edx,%edx
f012f6e2:	39 d0                	cmp    %edx,%eax
f012f6e4:	74 17                	je     f012f6fd <test_krealloc_BF+0x1d70>
			panic("krealloc: invalid read after re-allocations");
f012f6e6:	83 ec 04             	sub    $0x4,%esp
f012f6e9:	68 a0 c8 13 f0       	push   $0xf013c8a0
f012f6ee:	68 e4 12 00 00       	push   $0x12e4
f012f6f3:	68 5a b0 13 f0       	push   $0xf013b05a
f012f6f8:	e8 08 0b fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012f6fd:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f703:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012f709:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012f710:	00 00 00 
		sums[1] = 0;
f012f713:	c7 85 a4 fd ff ff 00 	movl   $0x0,-0x25c(%ebp)
f012f71a:	00 00 00 
		sums[2] = 0;
f012f71d:	c7 85 a8 fd ff ff 00 	movl   $0x0,-0x258(%ebp)
f012f724:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012f727:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012f72e:	eb 70                	jmp    f012f7a0 <test_krealloc_BF+0x1e13>
			sums[0] += structArr[i].a;
f012f730:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f736:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f739:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f740:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f746:	01 c8                	add    %ecx,%eax
f012f748:	8a 00                	mov    (%eax),%al
f012f74a:	0f be c0             	movsbl %al,%eax
f012f74d:	01 d0                	add    %edx,%eax
f012f74f:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
			sums[1] += structArr[i].b;
f012f755:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012f75b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f75e:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f765:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f76b:	01 c8                	add    %ecx,%eax
f012f76d:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f771:	98                   	cwtl   
f012f772:	01 d0                	add    %edx,%eax
f012f774:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
			sums[2] += structArr[i].c;
f012f77a:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012f780:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f783:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f78a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f790:	01 c8                	add    %ecx,%eax
f012f792:	8b 40 04             	mov    0x4(%eax),%eax
f012f795:	01 d0                	add    %edx,%eax
f012f797:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012f79d:	ff 45 d8             	incl   -0x28(%ebp)
f012f7a0:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f7a6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012f7a9:	7d 85                	jge    f012f730 <test_krealloc_BF+0x1da3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012f7ab:	8b 8d a0 fd ff ff    	mov    -0x260(%ebp),%ecx
f012f7b1:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f7b7:	8d 50 01             	lea    0x1(%eax),%edx
f012f7ba:	89 d0                	mov    %edx,%eax
f012f7bc:	01 c0                	add    %eax,%eax
f012f7be:	01 d0                	add    %edx,%eax
f012f7c0:	01 c0                	add    %eax,%eax
f012f7c2:	01 d0                	add    %edx,%eax
f012f7c4:	39 c1                	cmp    %eax,%ecx
f012f7c6:	75 3a                	jne    f012f802 <test_krealloc_BF+0x1e75>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012f7c8:	8b 8d a4 fd ff ff    	mov    -0x25c(%ebp),%ecx
f012f7ce:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f7d4:	8d 50 01             	lea    0x1(%eax),%edx
f012f7d7:	89 d0                	mov    %edx,%eax
f012f7d9:	01 c0                	add    %eax,%eax
f012f7db:	01 d0                	add    %edx,%eax
f012f7dd:	01 c0                	add    %eax,%eax
f012f7df:	01 d0                	add    %edx,%eax
f012f7e1:	39 c1                	cmp    %eax,%ecx
f012f7e3:	75 1d                	jne    f012f802 <test_krealloc_BF+0x1e75>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012f7e5:	8b 8d a8 fd ff ff    	mov    -0x258(%ebp),%ecx
f012f7eb:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f7f1:	8d 50 01             	lea    0x1(%eax),%edx
f012f7f4:	89 d0                	mov    %edx,%eax
f012f7f6:	01 c0                	add    %eax,%eax
f012f7f8:	01 d0                	add    %edx,%eax
f012f7fa:	01 c0                	add    %eax,%eax
f012f7fc:	01 d0                	add    %edx,%eax
f012f7fe:	39 c1                	cmp    %eax,%ecx
f012f800:	74 17                	je     f012f819 <test_krealloc_BF+0x1e8c>
			panic("krealloc: invalid read after re-allocations");
f012f802:	83 ec 04             	sub    $0x4,%esp
f012f805:	68 a0 c8 13 f0       	push   $0xf013c8a0
f012f80a:	68 f6 12 00 00       	push   $0x12f6
f012f80f:	68 5a b0 13 f0       	push   $0xf013b05a
f012f814:	e8 ec 09 fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012f819:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f81f:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012f825:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012f82c:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012f82f:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012f836:	eb 24                	jmp    f012f85c <test_krealloc_BF+0x1ecf>
			sums[0] += shortArr[i];
f012f838:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f83e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f841:	01 c0                	add    %eax,%eax
f012f843:	89 c1                	mov    %eax,%ecx
f012f845:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f84b:	01 c8                	add    %ecx,%eax
f012f84d:	66 8b 00             	mov    (%eax),%ax
f012f850:	98                   	cwtl   
f012f851:	01 d0                	add    %edx,%eax
f012f853:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012f859:	ff 45 d8             	incl   -0x28(%ebp)
f012f85c:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f862:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012f865:	7d d1                	jge    f012f838 <test_krealloc_BF+0x1eab>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012f867:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f86d:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f873:	8d 48 01             	lea    0x1(%eax),%ecx
f012f876:	89 c8                	mov    %ecx,%eax
f012f878:	c1 e0 02             	shl    $0x2,%eax
f012f87b:	01 c8                	add    %ecx,%eax
f012f87d:	39 c2                	cmp    %eax,%edx
f012f87f:	74 17                	je     f012f898 <test_krealloc_BF+0x1f0b>
			panic("krealloc: invalid read after re-allocations");
f012f881:	83 ec 04             	sub    $0x4,%esp
f012f884:	68 a0 c8 13 f0       	push   $0xf013c8a0
f012f889:	68 00 13 00 00       	push   $0x1300
f012f88e:	68 5a b0 13 f0       	push   $0xf013b05a
f012f893:	e8 6d 09 fd ff       	call   f0100205 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012f898:	e8 00 d3 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f89d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f8a0:	e8 23 45 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f8a5:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012f8ab:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f8b1:	83 ec 08             	sub    $0x8,%esp
f012f8b4:	6a 00                	push   $0x0
f012f8b6:	50                   	push   %eax
f012f8b7:	e8 89 82 fd ff       	call   f0107b45 <krealloc>
f012f8bc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f8bf:	e8 04 45 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f8c4:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f8ca:	74 17                	je     f012f8e3 <test_krealloc_BF+0x1f56>
			panic(
f012f8cc:	83 ec 04             	sub    $0x4,%esp
f012f8cf:	68 74 b0 13 f0       	push   $0xf013b074
f012f8d4:	68 08 13 00 00       	push   $0x1308
f012f8d9:	68 5a b0 13 f0       	push   $0xf013b05a
f012f8de:	e8 22 09 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012f8e3:	e8 b5 d2 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f8e8:	89 c2                	mov    %eax,%edx
f012f8ea:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f8ed:	29 c2                	sub    %eax,%edx
f012f8ef:	89 d0                	mov    %edx,%eax
f012f8f1:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012f8f6:	74 17                	je     f012f90f <test_krealloc_BF+0x1f82>
			panic("krealloc: pages in memory are not freed correctly");
f012f8f8:	83 ec 04             	sub    $0x4,%esp
f012f8fb:	68 30 c5 13 f0       	push   $0xf013c530
f012f900:	68 0a 13 00 00       	push   $0x130a
f012f905:	68 5a b0 13 f0       	push   $0xf013b05a
f012f90a:	e8 f6 08 fd ff       	call   f0100205 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012f90f:	e8 89 d2 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f914:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f917:	e8 ac 44 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f91c:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012f922:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f928:	83 ec 0c             	sub    $0xc,%esp
f012f92b:	50                   	push   %eax
f012f92c:	e8 1f 80 fd ff       	call   f0107950 <kfree>
f012f931:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f934:	e8 8f 44 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f939:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f93f:	74 17                	je     f012f958 <test_krealloc_BF+0x1fcb>
			panic(
f012f941:	83 ec 04             	sub    $0x4,%esp
f012f944:	68 74 b0 13 f0       	push   $0xf013b074
f012f949:	68 12 13 00 00       	push   $0x1312
f012f94e:	68 5a b0 13 f0       	push   $0xf013b05a
f012f953:	e8 ad 08 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012f958:	e8 40 d2 fd ff       	call   f010cb9d <sys_calculate_free_frames>
f012f95d:	89 c2                	mov    %eax,%edx
f012f95f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f962:	29 c2                	sub    %eax,%edx
f012f964:	89 d0                	mov    %edx,%eax
f012f966:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012f96b:	74 17                	je     f012f984 <test_krealloc_BF+0x1ff7>
			panic("krealloc: pages in memory are not freed correctly");
f012f96d:	83 ec 04             	sub    $0x4,%esp
f012f970:	68 30 c5 13 f0       	push   $0xf013c530
f012f975:	68 14 13 00 00       	push   $0x1314
f012f97a:	68 5a b0 13 f0       	push   $0xf013b05a
f012f97f:	e8 81 08 fd ff       	call   f0100205 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012f984:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012f98b:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012f992:	eb 48                	jmp    f012f9dc <test_krealloc_BF+0x204f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012f994:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012f997:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f012f99c:	83 ec 04             	sub    $0x4,%esp
f012f99f:	8d 8d 98 fd ff ff    	lea    -0x268(%ebp),%ecx
f012f9a5:	51                   	push   %ecx
f012f9a6:	52                   	push   %edx
f012f9a7:	50                   	push   %eax
f012f9a8:	e8 04 71 fd ff       	call   f0106ab1 <get_page_table>
f012f9ad:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012f9b0:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012f9b6:	85 c0                	test   %eax,%eax
f012f9b8:	75 17                	jne    f012f9d1 <test_krealloc_BF+0x2044>
					panic(
f012f9ba:	83 ec 04             	sub    $0x4,%esp
f012f9bd:	68 5c b9 13 f0       	push   $0xf013b95c
f012f9c2:	68 21 13 00 00       	push   $0x1321
f012f9c7:	68 5a b0 13 f0       	push   $0xf013b05a
f012f9cc:	e8 34 08 fd ff       	call   f0100205 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012f9d1:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012f9d8:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012f9dc:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012f9e0:	78 b2                	js     f012f994 <test_krealloc_BF+0x2007>
f012f9e2:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012f9e6:	7f 09                	jg     f012f9f1 <test_krealloc_BF+0x2064>
f012f9e8:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012f9ef:	76 a3                	jbe    f012f994 <test_krealloc_BF+0x2007>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012f9f1:	83 ec 0c             	sub    $0xc,%esp
f012f9f4:	68 3e b2 13 f0       	push   $0xf013b23e
f012f9f9:	e8 10 13 fd ff       	call   f0100d0e <cprintf>
f012f9fe:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc BF completed successfully.\n");
f012fa01:	83 ec 0c             	sub    $0xc,%esp
f012fa04:	68 40 c9 13 f0       	push   $0xf013c940
f012fa09:	e8 00 13 fd ff       	call   f0100d0e <cprintf>
f012fa0e:	83 c4 10             	add    $0x10,%esp
	return 0;
f012fa11:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012fa16:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012fa19:	5b                   	pop    %ebx
f012fa1a:	5f                   	pop    %edi
f012fa1b:	5d                   	pop    %ebp
f012fa1c:	c3                   	ret    

f012fa1d <test_initialize_dyn_block_system>:

//2022
int test_initialize_dyn_block_system(int freeFrames_before, int freeDiskFrames_before, int freeFrames_after, int freeDiskFrames_after)
{
f012fa1d:	55                   	push   %ebp
f012fa1e:	89 e5                	mov    %esp,%ebp
f012fa20:	83 ec 28             	sub    $0x28,%esp
		panic("USE_KHEAP = 0 & it shall be 1. Go to 'inc/memlayout.h' and set USE_KHEAP by 1. Then, repeat the test again.");
	if(STATIC_MEMBLOCK_ALLOC != 0)
		panic("STATIC_MEMBLOCK_ALLOC = 1 & it shall be 0. Go to 'inc/dynamic_allocator.h' and set STATIC_MEMBLOCK_ALLOC by 0. Then, repeat the test again.");

	//Check MAX_MEM_BLOCK_CNT
	if(MAX_MEM_BLOCK_CNT != ((0xFFFFF000-0xF6000000)/4096))
f012fa23:	a1 04 5d 87 f0       	mov    0xf0875d04,%eax
f012fa28:	3d ff 9f 00 00       	cmp    $0x9fff,%eax
f012fa2d:	74 17                	je     f012fa46 <test_initialize_dyn_block_system+0x29>
	{
		panic("Wrong initialize: MAX_MEM_BLOCK_CNT is not set with the correct size of the array");
f012fa2f:	83 ec 04             	sub    $0x4,%esp
f012fa32:	68 80 c9 13 f0       	push   $0xf013c980
f012fa37:	68 39 13 00 00       	push   $0x1339
f012fa3c:	68 5a b0 13 f0       	push   $0xf013b05a
f012fa41:	e8 bf 07 fd ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != MAX_MEM_BLOCK_CNT-1)
f012fa46:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f012fa4b:	8b 15 04 5d 87 f0    	mov    0xf0875d04,%edx
f012fa51:	4a                   	dec    %edx
f012fa52:	39 d0                	cmp    %edx,%eax
f012fa54:	74 17                	je     f012fa6d <test_initialize_dyn_block_system+0x50>
	{
		panic("Wrong initialize: Wrong size for the AvailableMemBlocksList");
f012fa56:	83 ec 04             	sub    $0x4,%esp
f012fa59:	68 d4 c9 13 f0       	push   $0xf013c9d4
f012fa5e:	68 3f 13 00 00       	push   $0x133f
f012fa63:	68 5a b0 13 f0       	push   $0xf013b05a
f012fa68:	e8 98 07 fd ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f012fa6d:	a1 d4 5c 87 f0       	mov    0xf0875cd4,%eax
f012fa72:	85 c0                	test   %eax,%eax
f012fa74:	74 17                	je     f012fa8d <test_initialize_dyn_block_system+0x70>
	{
		panic("Wrong initialize: Wrong size for the AllocMemBlocksList");
f012fa76:	83 ec 04             	sub    $0x4,%esp
f012fa79:	68 10 ca 13 f0       	push   $0xf013ca10
f012fa7e:	68 45 13 00 00       	push   $0x1345
f012fa83:	68 5a b0 13 f0       	push   $0xf013b05a
f012fa88:	e8 78 07 fd ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in FreeMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 1)
f012fa8d:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f012fa92:	83 f8 01             	cmp    $0x1,%eax
f012fa95:	74 17                	je     f012faae <test_initialize_dyn_block_system+0x91>
	{
		panic("Wrong initialize: Wrong size for the FreeMemBlocksList");
f012fa97:	83 ec 04             	sub    $0x4,%esp
f012fa9a:	68 48 ca 13 f0       	push   $0xf013ca48
f012fa9f:	68 4b 13 00 00       	push   $0x134b
f012faa4:	68 5a b0 13 f0       	push   $0xf013b05a
f012faa9:	e8 57 07 fd ff       	call   f0100205 <_panic>
	}

	//Check content of FreeMemBlocksList
	struct MemBlock* block = LIST_FIRST(&FreeMemBlocksList);
f012faae:	a1 64 5d 87 f0       	mov    0xf0875d64,%eax
f012fab3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(block == NULL || block->size != (KERNEL_HEAP_MAX-0xF6000000-DYNAMIC_ALLOCATOR_DS) || block->sva != 0xF6000000+DYNAMIC_ALLOCATOR_DS)
f012fab6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012faba:	74 66                	je     f012fb22 <test_initialize_dyn_block_system+0x105>
f012fabc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fabf:	8b 48 0c             	mov    0xc(%eax),%ecx
f012fac2:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f012fac9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012facc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012fad1:	89 45 e8             	mov    %eax,-0x18(%ebp)
f012fad4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012fad7:	ba 00 00 00 00       	mov    $0x0,%edx
f012fadc:	f7 75 ec             	divl   -0x14(%ebp)
f012fadf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012fae2:	29 d0                	sub    %edx,%eax
f012fae4:	ba 00 f0 ff 09       	mov    $0x9fff000,%edx
f012fae9:	29 c2                	sub    %eax,%edx
f012faeb:	89 d0                	mov    %edx,%eax
f012faed:	39 c1                	cmp    %eax,%ecx
f012faef:	75 31                	jne    f012fb22 <test_initialize_dyn_block_system+0x105>
f012faf1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012faf4:	8b 48 08             	mov    0x8(%eax),%ecx
f012faf7:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f012fafe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012fb01:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012fb06:	89 45 e0             	mov    %eax,-0x20(%ebp)
f012fb09:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012fb0c:	ba 00 00 00 00       	mov    $0x0,%edx
f012fb11:	f7 75 e4             	divl   -0x1c(%ebp)
f012fb14:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012fb17:	29 d0                	sub    %edx,%eax
f012fb19:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f012fb1e:	39 c1                	cmp    %eax,%ecx
f012fb20:	74 17                	je     f012fb39 <test_initialize_dyn_block_system+0x11c>
	{
		panic("Wrong initialize: Wrong content for the FreeMemBlocksList.");
f012fb22:	83 ec 04             	sub    $0x4,%esp
f012fb25:	68 80 ca 13 f0       	push   $0xf013ca80
f012fb2a:	68 52 13 00 00       	push   $0x1352
f012fb2f:	68 5a b0 13 f0       	push   $0xf013b05a
f012fb34:	e8 cc 06 fd ff       	call   f0100205 <_panic>
	}

	//Check number of disk and memory frames
	if ((freeDiskFrames_after - freeDiskFrames_before) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012fb39:	8b 45 14             	mov    0x14(%ebp),%eax
f012fb3c:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012fb3f:	74 17                	je     f012fb58 <test_initialize_dyn_block_system+0x13b>
f012fb41:	83 ec 04             	sub    $0x4,%esp
f012fb44:	68 74 b0 13 f0       	push   $0xf013b074
f012fb49:	68 56 13 00 00       	push   $0x1356
f012fb4e:	68 5a b0 13 f0       	push   $0xf013b05a
f012fb53:	e8 ad 06 fd ff       	call   f0100205 <_panic>
	if ((freeFrames_before - freeFrames_after) != 160) panic("Wrong allocation: pages are not loaded successfully into memory %d", (freeFrames_before - freeFrames_after));
f012fb58:	8b 45 08             	mov    0x8(%ebp),%eax
f012fb5b:	2b 45 10             	sub    0x10(%ebp),%eax
f012fb5e:	3d a0 00 00 00       	cmp    $0xa0,%eax
f012fb63:	74 1b                	je     f012fb80 <test_initialize_dyn_block_system+0x163>
f012fb65:	8b 45 08             	mov    0x8(%ebp),%eax
f012fb68:	2b 45 10             	sub    0x10(%ebp),%eax
f012fb6b:	50                   	push   %eax
f012fb6c:	68 bc ca 13 f0       	push   $0xf013cabc
f012fb71:	68 57 13 00 00       	push   $0x1357
f012fb76:	68 5a b0 13 f0       	push   $0xf013b05a
f012fb7b:	e8 85 06 fd ff       	call   f0100205 <_panic>

	//Checking permissions on the allocated spaces
	{
		uint32 a = 0xF6000000;
f012fb80:	c7 45 f4 00 00 00 f6 	movl   $0xf6000000,-0xc(%ebp)
		while(1)
		{
			if (CB(ptr_page_directory, a, 0)!=1 || CB(ptr_page_directory, a, 1)!=1 || CB(ptr_page_directory, a, 2)!=0)
f012fb87:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f012fb8c:	83 ec 04             	sub    $0x4,%esp
f012fb8f:	6a 00                	push   $0x0
f012fb91:	ff 75 f4             	pushl  -0xc(%ebp)
f012fb94:	50                   	push   %eax
f012fb95:	e8 e9 5f fe ff       	call   f0115b83 <CB>
f012fb9a:	83 c4 10             	add    $0x10,%esp
f012fb9d:	83 f8 01             	cmp    $0x1,%eax
f012fba0:	75 35                	jne    f012fbd7 <test_initialize_dyn_block_system+0x1ba>
f012fba2:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f012fba7:	83 ec 04             	sub    $0x4,%esp
f012fbaa:	6a 01                	push   $0x1
f012fbac:	ff 75 f4             	pushl  -0xc(%ebp)
f012fbaf:	50                   	push   %eax
f012fbb0:	e8 ce 5f fe ff       	call   f0115b83 <CB>
f012fbb5:	83 c4 10             	add    $0x10,%esp
f012fbb8:	83 f8 01             	cmp    $0x1,%eax
f012fbbb:	75 1a                	jne    f012fbd7 <test_initialize_dyn_block_system+0x1ba>
f012fbbd:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f012fbc2:	83 ec 04             	sub    $0x4,%esp
f012fbc5:	6a 02                	push   $0x2
f012fbc7:	ff 75 f4             	pushl  -0xc(%ebp)
f012fbca:	50                   	push   %eax
f012fbcb:	e8 b3 5f fe ff       	call   f0115b83 <CB>
f012fbd0:	83 c4 10             	add    $0x10,%esp
f012fbd3:	85 c0                	test   %eax,%eax
f012fbd5:	74 17                	je     f012fbee <test_initialize_dyn_block_system+0x1d1>
				panic("Wrong initialize: Wrong permissions - pages mapped with wrong permissions. Check them again.");
f012fbd7:	83 ec 04             	sub    $0x4,%esp
f012fbda:	68 00 cb 13 f0       	push   $0xf013cb00
f012fbdf:	68 5f 13 00 00       	push   $0x135f
f012fbe4:	68 5a b0 13 f0       	push   $0xf013b05a
f012fbe9:	e8 17 06 fd ff       	call   f0100205 <_panic>

			a+=4096;
f012fbee:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
			if(a == (0xF6000000+DYNAMIC_ALLOCATOR_DS))
f012fbf5:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f012fbfc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012fbff:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012fc04:	89 45 d8             	mov    %eax,-0x28(%ebp)
f012fc07:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012fc0a:	ba 00 00 00 00       	mov    $0x0,%edx
f012fc0f:	f7 75 dc             	divl   -0x24(%ebp)
f012fc12:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012fc15:	29 d0                	sub    %edx,%eax
f012fc17:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f012fc1c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012fc1f:	74 05                	je     f012fc26 <test_initialize_dyn_block_system+0x209>
				break;
		}
f012fc21:	e9 61 ff ff ff       	jmp    f012fb87 <test_initialize_dyn_block_system+0x16a>
			if (CB(ptr_page_directory, a, 0)!=1 || CB(ptr_page_directory, a, 1)!=1 || CB(ptr_page_directory, a, 2)!=0)
				panic("Wrong initialize: Wrong permissions - pages mapped with wrong permissions. Check them again.");

			a+=4096;
			if(a == (0xF6000000+DYNAMIC_ALLOCATOR_DS))
				break;
f012fc26:	90                   	nop
		}
	}

	//===============================================//
	cprintf("\nCongratulations!! test initialize_dyn_block_system of KHEAP completed successfully.\n");
f012fc27:	83 ec 0c             	sub    $0xc,%esp
f012fc2a:	68 60 cb 13 f0       	push   $0xf013cb60
f012fc2f:	e8 da 10 fd ff       	call   f0100d0e <cprintf>
f012fc34:	83 c4 10             	add    $0x10,%esp
	return 0;
f012fc37:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012fc3c:	c9                   	leave  
f012fc3d:	c3                   	ret    

f012fc3e <nearest_pow2_ceil>:
#include <kern/cpu/sched.h>
#include <kern/disk/pagefile_manager.h>
#include <kern/mem/memory_manager.h>
#include "../cons/console.h"

inline unsigned int nearest_pow2_ceil(unsigned int x) {
f012fc3e:	55                   	push   %ebp
f012fc3f:	89 e5                	mov    %esp,%ebp
f012fc41:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012fc44:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012fc48:	77 07                	ja     f012fc51 <nearest_pow2_ceil+0x13>
f012fc4a:	b8 01 00 00 00       	mov    $0x1,%eax
f012fc4f:	eb 20                	jmp    f012fc71 <nearest_pow2_ceil+0x33>
    int power = 2;
f012fc51:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012fc58:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012fc5b:	eb 08                	jmp    f012fc65 <nearest_pow2_ceil+0x27>
    	power <<= 1;
f012fc5d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012fc60:	01 c0                	add    %eax,%eax
f012fc62:	89 45 fc             	mov    %eax,-0x4(%ebp)

inline unsigned int nearest_pow2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    int power = 2;
    x--;
    while (x >>= 1) {
f012fc65:	d1 6d 08             	shrl   0x8(%ebp)
f012fc68:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012fc6c:	75 ef                	jne    f012fc5d <nearest_pow2_ceil+0x1f>
    	power <<= 1;
    }
    return power;
f012fc6e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012fc71:	c9                   	leave  
f012fc72:	c3                   	ret    

f012fc73 <log2_ceil>:
inline unsigned int log2_ceil(unsigned int x) {
f012fc73:	55                   	push   %ebp
f012fc74:	89 e5                	mov    %esp,%ebp
f012fc76:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012fc79:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012fc7d:	77 07                	ja     f012fc86 <log2_ceil+0x13>
f012fc7f:	b8 01 00 00 00       	mov    $0x1,%eax
f012fc84:	eb 1b                	jmp    f012fca1 <log2_ceil+0x2e>
    //int power = 2;
    int bits_cnt = 2 ;
f012fc86:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012fc8d:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012fc90:	eb 03                	jmp    f012fc95 <log2_ceil+0x22>
    	//power <<= 1;
    	bits_cnt++ ;
f012fc92:	ff 45 fc             	incl   -0x4(%ebp)
inline unsigned int log2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    //int power = 2;
    int bits_cnt = 2 ;
    x--;
    while (x >>= 1) {
f012fc95:	d1 6d 08             	shrl   0x8(%ebp)
f012fc98:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012fc9c:	75 f4                	jne    f012fc92 <log2_ceil+0x1f>
    	//power <<= 1;
    	bits_cnt++ ;
    }
    return bits_cnt;
f012fc9e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012fca1:	c9                   	leave  
f012fca2:	c3                   	ret    

f012fca3 <detect_loop_in_FrameInfo_list>:
void detect_loop_in_FrameInfo_list(struct FrameInfo_List* fi_list)
{
f012fca3:	55                   	push   %ebp
f012fca4:	89 e5                	mov    %esp,%ebp
f012fca6:	83 ec 18             	sub    $0x18,%esp
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
f012fca9:	8b 45 08             	mov    0x8(%ebp),%eax
f012fcac:	8b 00                	mov    (%eax),%eax
f012fcae:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);
f012fcb1:	8b 45 08             	mov    0x8(%ebp),%eax
f012fcb4:	8b 00                	mov    (%eax),%eax
f012fcb6:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f012fcb9:	eb 52                	jmp    f012fd0d <detect_loop_in_FrameInfo_list+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f012fcbb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fcbe:	8b 00                	mov    (%eax),%eax
f012fcc0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f012fcc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fcc6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012fcc9:	75 12                	jne    f012fcdd <detect_loop_in_FrameInfo_list+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f012fccb:	83 ec 0c             	sub    $0xc,%esp
f012fcce:	68 b8 cb 13 f0       	push   $0xf013cbb8
f012fcd3:	e8 36 10 fd ff       	call   f0100d0e <cprintf>
f012fcd8:	83 c4 10             	add    $0x10,%esp
			break;
f012fcdb:	eb 3f                	jmp    f012fd1c <detect_loop_in_FrameInfo_list+0x79>
		}

		if (fastPtr == NULL) {
f012fcdd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012fce1:	74 38                	je     f012fd1b <detect_loop_in_FrameInfo_list+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f012fce3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fce6:	8b 00                	mov    (%eax),%eax
f012fce8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f012fceb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fcee:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012fcf1:	75 12                	jne    f012fd05 <detect_loop_in_FrameInfo_list+0x62>
			cprintf("loop detected in list\n");
f012fcf3:	83 ec 0c             	sub    $0xc,%esp
f012fcf6:	68 d4 cb 13 f0       	push   $0xf013cbd4
f012fcfb:	e8 0e 10 fd ff       	call   f0100d0e <cprintf>
f012fd00:	83 c4 10             	add    $0x10,%esp
			break;
f012fd03:	eb 17                	jmp    f012fd1c <detect_loop_in_FrameInfo_list+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f012fd05:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fd08:	8b 00                	mov    (%eax),%eax
f012fd0a:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);


	while (slowPtr && fastPtr) {
f012fd0d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012fd11:	74 09                	je     f012fd1c <detect_loop_in_FrameInfo_list+0x79>
f012fd13:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012fd17:	75 a2                	jne    f012fcbb <detect_loop_in_FrameInfo_list+0x18>
f012fd19:	eb 01                	jmp    f012fd1c <detect_loop_in_FrameInfo_list+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f012fd1b:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished  loop detection\n");
f012fd1c:	83 ec 0c             	sub    $0xc,%esp
f012fd1f:	68 eb cb 13 f0       	push   $0xf013cbeb
f012fd24:	e8 e5 0f fd ff       	call   f0100d0e <cprintf>
f012fd29:	83 c4 10             	add    $0x10,%esp
}
f012fd2c:	90                   	nop
f012fd2d:	c9                   	leave  
f012fd2e:	c3                   	ret    

f012fd2f <scarce_memory>:

void scarce_memory()
{
f012fd2f:	55                   	push   %ebp
f012fd30:	89 e5                	mov    %esp,%ebp
f012fd32:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f012fd35:	a1 f0 5c 87 f0       	mov    0xf0875cf0,%eax
f012fd3a:	ba 64 00 00 00       	mov    $0x64,%edx
f012fd3f:	29 c2                	sub    %eax,%edx
f012fd41:	a1 10 5d 87 f0       	mov    0xf0875d10,%eax
f012fd46:	0f af c2             	imul   %edx,%eax
f012fd49:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012fd4e:	f7 e2                	mul    %edx
f012fd50:	89 d0                	mov    %edx,%eax
f012fd52:	c1 e8 05             	shr    $0x5,%eax
f012fd55:	89 45 f4             	mov    %eax,-0xc(%ebp)
//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f012fd58:	a1 f0 5c 87 f0       	mov    0xf0875cf0,%eax
f012fd5d:	ba 64 00 00 00       	mov    $0x64,%edx
f012fd62:	29 c2                	sub    %eax,%edx
f012fd64:	a1 10 5d 87 f0       	mov    0xf0875d10,%eax
f012fd69:	89 d1                	mov    %edx,%ecx
f012fd6b:	0f af c8             	imul   %eax,%ecx
f012fd6e:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012fd73:	f7 e1                	mul    %ecx
f012fd75:	c1 ea 05             	shr    $0x5,%edx
f012fd78:	89 d0                	mov    %edx,%eax
f012fd7a:	c1 e0 02             	shl    $0x2,%eax
f012fd7d:	01 d0                	add    %edx,%eax
f012fd7f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012fd86:	01 d0                	add    %edx,%eax
f012fd88:	c1 e0 02             	shl    $0x2,%eax
f012fd8b:	29 c1                	sub    %eax,%ecx
f012fd8d:	89 ca                	mov    %ecx,%edx
f012fd8f:	85 d2                	test   %edx,%edx
f012fd91:	74 03                	je     f012fd96 <scarce_memory+0x67>
		total_size_tobe_allocated++;
f012fd93:	ff 45 f4             	incl   -0xc(%ebp)

	uint32 size_of_already_allocated = number_of_frames - LIST_SIZE(&free_frame_list) ;
f012fd96:	8b 15 10 5d 87 f0    	mov    0xf0875d10,%edx
f012fd9c:	a1 24 5d 87 f0       	mov    0xf0875d24,%eax
f012fda1:	29 c2                	sub    %eax,%edx
f012fda3:	89 d0                	mov    %edx,%eax
f012fda5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f012fda8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fdab:	2b 45 ec             	sub    -0x14(%ebp),%eax
f012fdae:	89 45 e8             	mov    %eax,-0x18(%ebp)
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
f012fdb1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f012fdb8:	eb 12                	jmp    f012fdcc <scarce_memory+0x9d>
	{
		allocate_frame(&ptr_tmp_FI) ;
f012fdba:	83 ec 0c             	sub    $0xc,%esp
f012fdbd:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f012fdc0:	50                   	push   %eax
f012fdc1:	e8 2c 6b fd ff       	call   f01068f2 <allocate_frame>
f012fdc6:	83 c4 10             	add    $0x10,%esp
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f012fdc9:	ff 45 f0             	incl   -0x10(%ebp)
f012fdcc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fdcf:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012fdd2:	76 e6                	jbe    f012fdba <scarce_memory+0x8b>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f012fdd4:	90                   	nop
f012fdd5:	c9                   	leave  
f012fdd6:	c3                   	ret    

f012fdd7 <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f012fdd7:	55                   	push   %ebp
f012fdd8:	89 e5                	mov    %esp,%ebp
f012fdda:	83 ec 38             	sub    $0x38,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f012fddd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f012fde4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f012fdeb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f012fdf2:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012fdf6:	0f 85 d0 01 00 00    	jne    f012ffcc <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f5>
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012fdfc:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012fe03:	e9 de 00 00 00       	jmp    f012fee6 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x10f>
		{
			struct Env * ptr_ready_env = NULL;
f012fe08:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012fe0f:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f012fe14:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012fe17:	c1 e2 04             	shl    $0x4,%edx
f012fe1a:	01 d0                	add    %edx,%eax
f012fe1c:	8b 00                	mov    (%eax),%eax
f012fe1e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012fe21:	e9 85 00 00 00       	jmp    f012feab <calc_no_pages_tobe_removed_from_ready_exit_queues+0xd4>
			{
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_ready_env);
f012fe26:	83 ec 0c             	sub    $0xc,%esp
f012fe29:	ff 75 e4             	pushl  -0x1c(%ebp)
f012fe2c:	e8 e5 7f fd ff       	call   f0107e16 <env_page_ws_get_size>
f012fe31:	83 c4 10             	add    $0x10,%esp
f012fe34:	89 45 d0             	mov    %eax,-0x30(%ebp)
				int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012fe37:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f012fe3c:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f012fe42:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012fe45:	0f af c2             	imul   %edx,%eax
f012fe48:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012fe4d:	f7 e2                	mul    %edx
f012fe4f:	89 d0                	mov    %edx,%eax
f012fe51:	c1 e8 05             	shr    $0x5,%eax
f012fe54:	89 45 e0             	mov    %eax,-0x20(%ebp)
				if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012fe57:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f012fe5c:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f012fe62:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012fe65:	89 d1                	mov    %edx,%ecx
f012fe67:	0f af c8             	imul   %eax,%ecx
f012fe6a:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012fe6f:	f7 e1                	mul    %ecx
f012fe71:	c1 ea 05             	shr    $0x5,%edx
f012fe74:	89 d0                	mov    %edx,%eax
f012fe76:	c1 e0 02             	shl    $0x2,%eax
f012fe79:	01 d0                	add    %edx,%eax
f012fe7b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012fe82:	01 d0                	add    %edx,%eax
f012fe84:	c1 e0 02             	shl    $0x2,%eax
f012fe87:	29 c1                	sub    %eax,%ecx
f012fe89:	89 ca                	mov    %ecx,%edx
f012fe8b:	85 d2                	test   %edx,%edx
f012fe8d:	74 03                	je     f012fe92 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xbb>
					num_of_pages_to_be_removed++;
f012fe8f:	ff 45 e0             	incl   -0x20(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f012fe92:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012fe95:	01 45 f4             	add    %eax,-0xc(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
		{
			struct Env * ptr_ready_env = NULL;
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012fe98:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f012fe9d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012fea0:	c1 e2 04             	shl    $0x4,%edx
f012fea3:	01 d0                	add    %edx,%eax
f012fea5:	8b 40 08             	mov    0x8(%eax),%eax
f012fea8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012feab:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f012feb0:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012feb3:	c1 e2 04             	shl    $0x4,%edx
f012feb6:	01 d0                	add    %edx,%eax
f012feb8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012febc:	74 08                	je     f012fec6 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xef>
f012febe:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f012fec1:	8b 52 44             	mov    0x44(%edx),%edx
f012fec4:	eb 05                	jmp    f012fecb <calc_no_pages_tobe_removed_from_ready_exit_queues+0xf4>
f012fec6:	ba 00 00 00 00       	mov    $0x0,%edx
f012fecb:	89 50 08             	mov    %edx,0x8(%eax)
f012fece:	8b 40 08             	mov    0x8(%eax),%eax
f012fed1:	85 c0                	test   %eax,%eax
f012fed3:	0f 85 4d ff ff ff    	jne    f012fe26 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4f>
f012fed9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012fedd:	0f 85 43 ff ff ff    	jne    f012fe26 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4f>
	uint32 no_of_pages_tobe_removed_from_ready = 0;
	uint32 no_of_pages_tobe_removed_from_exit = 0;
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012fee3:	ff 45 e8             	incl   -0x18(%ebp)
f012fee6:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f012feeb:	0f b6 c0             	movzbl %al,%eax
f012feee:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012fef1:	0f 8f 11 ff ff ff    	jg     f012fe08 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x31>
					num_of_pages_to_be_removed++;
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
f012fef7:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f012fefe:	a1 f4 5c 87 f0       	mov    0xf0875cf4,%eax
f012ff03:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012ff06:	eb 19                	jmp    f012ff21 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x14a>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
f012ff08:	83 ec 0c             	sub    $0xc,%esp
f012ff0b:	ff 75 dc             	pushl  -0x24(%ebp)
f012ff0e:	e8 03 7f fd ff       	call   f0107e16 <env_page_ws_get_size>
f012ff13:	83 c4 10             	add    $0x10,%esp
f012ff16:	01 45 f0             	add    %eax,-0x10(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f012ff19:	a1 fc 5c 87 f0       	mov    0xf0875cfc,%eax
f012ff1e:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012ff21:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012ff25:	74 08                	je     f012ff2f <calc_no_pages_tobe_removed_from_ready_exit_queues+0x158>
f012ff27:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ff2a:	8b 40 44             	mov    0x44(%eax),%eax
f012ff2d:	eb 05                	jmp    f012ff34 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x15d>
f012ff2f:	b8 00 00 00 00       	mov    $0x0,%eax
f012ff34:	a3 fc 5c 87 f0       	mov    %eax,0xf0875cfc
f012ff39:	a1 fc 5c 87 f0       	mov    0xf0875cfc,%eax
f012ff3e:	85 c0                	test   %eax,%eax
f012ff40:	75 c6                	jne    f012ff08 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x131>
f012ff42:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012ff46:	75 c0                	jne    f012ff08 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x131>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
		}

		if(curenv != NULL)
f012ff48:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f012ff4d:	85 c0                	test   %eax,%eax
f012ff4f:	0f 84 ec 00 00 00    	je     f0130041 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26a>
		{
			int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f012ff55:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f012ff5a:	83 ec 0c             	sub    $0xc,%esp
f012ff5d:	50                   	push   %eax
f012ff5e:	e8 b3 7e fd ff       	call   f0107e16 <env_page_ws_get_size>
f012ff63:	83 c4 10             	add    $0x10,%esp
f012ff66:	89 45 cc             	mov    %eax,-0x34(%ebp)
			int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012ff69:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f012ff6e:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f012ff74:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012ff77:	0f af c2             	imul   %edx,%eax
f012ff7a:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012ff7f:	f7 e2                	mul    %edx
f012ff81:	89 d0                	mov    %edx,%eax
f012ff83:	c1 e8 05             	shr    $0x5,%eax
f012ff86:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012ff89:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f012ff8e:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f012ff94:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012ff97:	89 d1                	mov    %edx,%ecx
f012ff99:	0f af c8             	imul   %eax,%ecx
f012ff9c:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012ffa1:	f7 e1                	mul    %ecx
f012ffa3:	c1 ea 05             	shr    $0x5,%edx
f012ffa6:	89 d0                	mov    %edx,%eax
f012ffa8:	c1 e0 02             	shl    $0x2,%eax
f012ffab:	01 d0                	add    %edx,%eax
f012ffad:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ffb4:	01 d0                	add    %edx,%eax
f012ffb6:	c1 e0 02             	shl    $0x2,%eax
f012ffb9:	29 c1                	sub    %eax,%ecx
f012ffbb:	89 ca                	mov    %ecx,%edx
f012ffbd:	85 d2                	test   %edx,%edx
f012ffbf:	74 03                	je     f012ffc4 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1ed>
				num_of_pages_to_be_removed++;
f012ffc1:	ff 45 d8             	incl   -0x28(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012ffc4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012ffc7:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012ffca:	eb 75                	jmp    f0130041 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26a>
		}
	}
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
		int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f012ffcc:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f012ffd1:	83 ec 0c             	sub    $0xc,%esp
f012ffd4:	50                   	push   %eax
f012ffd5:	e8 3c 7e fd ff       	call   f0107e16 <env_page_ws_get_size>
f012ffda:	83 c4 10             	add    $0x10,%esp
f012ffdd:	89 45 c8             	mov    %eax,-0x38(%ebp)
		int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012ffe0:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f012ffe5:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f012ffeb:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012ffee:	0f af c2             	imul   %edx,%eax
f012fff1:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012fff6:	f7 e2                	mul    %edx
f012fff8:	89 d0                	mov    %edx,%eax
f012fffa:	c1 e8 05             	shr    $0x5,%eax
f012fffd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f0130000:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f0130005:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f013000b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f013000e:	89 d1                	mov    %edx,%ecx
f0130010:	0f af c8             	imul   %eax,%ecx
f0130013:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130018:	f7 e1                	mul    %ecx
f013001a:	c1 ea 05             	shr    $0x5,%edx
f013001d:	89 d0                	mov    %edx,%eax
f013001f:	c1 e0 02             	shl    $0x2,%eax
f0130022:	01 d0                	add    %edx,%eax
f0130024:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f013002b:	01 d0                	add    %edx,%eax
f013002d:	c1 e0 02             	shl    $0x2,%eax
f0130030:	29 c1                	sub    %eax,%ecx
f0130032:	89 ca                	mov    %ecx,%edx
f0130034:	85 d2                	test   %edx,%edx
f0130036:	74 03                	je     f013003b <calc_no_pages_tobe_removed_from_ready_exit_queues+0x264>
			num_of_pages_to_be_removed++;
f0130038:	ff 45 d4             	incl   -0x2c(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f013003b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f013003e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f0130041:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0130044:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130047:	01 c2                	add    %eax,%edx
f0130049:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013004c:	01 d0                	add    %edx,%eax
}
f013004e:	c9                   	leave  
f013004f:	c3                   	ret    

f0130050 <schenv>:


void schenv()
{
f0130050:	55                   	push   %ebp
f0130051:	89 e5                	mov    %esp,%ebp
f0130053:	83 ec 18             	sub    $0x18,%esp
	__nl = 0;
f0130056:	c6 05 a8 5d 87 f0 00 	movb   $0x0,0xf0875da8
	__ne = NULL;
f013005d:	c7 05 38 5d 87 f0 00 	movl   $0x0,0xf0875d38
f0130064:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f0130067:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f013006e:	eb 3f                	jmp    f01300af <schenv+0x5f>
	{
		if (queue_size(&(env_ready_queues[i])))
f0130070:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f0130075:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130078:	c1 e2 04             	shl    $0x4,%edx
f013007b:	01 d0                	add    %edx,%eax
f013007d:	83 ec 0c             	sub    $0xc,%esp
f0130080:	50                   	push   %eax
f0130081:	e8 ff 43 fd ff       	call   f0104485 <queue_size>
f0130086:	83 c4 10             	add    $0x10,%esp
f0130089:	85 c0                	test   %eax,%eax
f013008b:	74 1f                	je     f01300ac <schenv+0x5c>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f013008d:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f0130092:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130095:	c1 e2 04             	shl    $0x4,%edx
f0130098:	01 d0                	add    %edx,%eax
f013009a:	8b 40 04             	mov    0x4(%eax),%eax
f013009d:	a3 38 5d 87 f0       	mov    %eax,0xf0875d38
			__nl = i;
f01300a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01300a5:	a2 a8 5d 87 f0       	mov    %al,0xf0875da8
			break;
f01300aa:	eb 10                	jmp    f01300bc <schenv+0x6c>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f01300ac:	ff 45 f4             	incl   -0xc(%ebp)
f01300af:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f01300b4:	0f b6 c0             	movzbl %al,%eax
f01300b7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01300ba:	7f b4                	jg     f0130070 <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f01300bc:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f01300c1:	85 c0                	test   %eax,%eax
f01300c3:	0f 84 86 00 00 00    	je     f013014f <schenv+0xff>
	{
		if (__ne != NULL)
f01300c9:	a1 38 5d 87 f0       	mov    0xf0875d38,%eax
f01300ce:	85 c0                	test   %eax,%eax
f01300d0:	74 4b                	je     f013011d <schenv+0xcd>
		{
			if ((__pl + 1) < __nl)
f01300d2:	a0 e0 5c 87 f0       	mov    0xf0875ce0,%al
f01300d7:	0f b6 c0             	movzbl %al,%eax
f01300da:	8d 50 01             	lea    0x1(%eax),%edx
f01300dd:	a0 a8 5d 87 f0       	mov    0xf0875da8,%al
f01300e2:	0f b6 c0             	movzbl %al,%eax
f01300e5:	39 c2                	cmp    %eax,%edx
f01300e7:	7d 66                	jge    f013014f <schenv+0xff>
			{
				__ne = curenv;
f01300e9:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f01300ee:	a3 38 5d 87 f0       	mov    %eax,0xf0875d38
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f01300f3:	a0 e0 5c 87 f0       	mov    0xf0875ce0,%al
f01300f8:	0f b6 c0             	movzbl %al,%eax
f01300fb:	8a 15 80 5d 87 f0    	mov    0xf0875d80,%dl
f0130101:	0f b6 d2             	movzbl %dl,%edx
f0130104:	4a                   	dec    %edx
f0130105:	39 d0                	cmp    %edx,%eax
f0130107:	7d 08                	jge    f0130111 <schenv+0xc1>
f0130109:	a0 e0 5c 87 f0       	mov    0xf0875ce0,%al
f013010e:	40                   	inc    %eax
f013010f:	eb 05                	jmp    f0130116 <schenv+0xc6>
f0130111:	a0 e0 5c 87 f0       	mov    0xf0875ce0,%al
f0130116:	a2 a8 5d 87 f0       	mov    %al,0xf0875da8
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f013011b:	eb 32                	jmp    f013014f <schenv+0xff>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f013011d:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f0130122:	a3 38 5d 87 f0       	mov    %eax,0xf0875d38
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f0130127:	a0 e0 5c 87 f0       	mov    0xf0875ce0,%al
f013012c:	0f b6 c0             	movzbl %al,%eax
f013012f:	8a 15 80 5d 87 f0    	mov    0xf0875d80,%dl
f0130135:	0f b6 d2             	movzbl %dl,%edx
f0130138:	4a                   	dec    %edx
f0130139:	39 d0                	cmp    %edx,%eax
f013013b:	7d 08                	jge    f0130145 <schenv+0xf5>
f013013d:	a0 e0 5c 87 f0       	mov    0xf0875ce0,%al
f0130142:	40                   	inc    %eax
f0130143:	eb 05                	jmp    f013014a <schenv+0xfa>
f0130145:	a0 e0 5c 87 f0       	mov    0xf0875ce0,%al
f013014a:	a2 a8 5d 87 f0       	mov    %al,0xf0875da8
		}
	}
}
f013014f:	90                   	nop
f0130150:	c9                   	leave  
f0130151:	c3                   	ret    

f0130152 <chksch>:

void chksch(uint8 onoff)
{
f0130152:	55                   	push   %ebp
f0130153:	89 e5                	mov    %esp,%ebp
f0130155:	83 ec 04             	sub    $0x4,%esp
f0130158:	8b 45 08             	mov    0x8(%ebp),%eax
f013015b:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f013015e:	c7 05 94 5d 87 f0 00 	movl   $0x0,0xf0875d94
f0130165:	00 00 00 
	__ne = NULL;
f0130168:	c7 05 38 5d 87 f0 00 	movl   $0x0,0xf0875d38
f013016f:	00 00 00 
	__pl = 0 ;
f0130172:	c6 05 e0 5c 87 f0 00 	movb   $0x0,0xf0875ce0
	__nl = 0 ;
f0130179:	c6 05 a8 5d 87 f0 00 	movb   $0x0,0xf0875da8
	__chkstatus = onoff;
f0130180:	8a 45 fc             	mov    -0x4(%ebp),%al
f0130183:	a2 34 5d 87 f0       	mov    %al,0xf0875d34
}
f0130188:	90                   	nop
f0130189:	c9                   	leave  
f013018a:	c3                   	ret    

f013018b <chk1>:
void chk1()
{
f013018b:	55                   	push   %ebp
f013018c:	89 e5                	mov    %esp,%ebp
f013018e:	83 ec 08             	sub    $0x8,%esp
	if (__chkstatus == 0)
f0130191:	a0 34 5d 87 f0       	mov    0xf0875d34,%al
f0130196:	84 c0                	test   %al,%al
f0130198:	74 2b                	je     f01301c5 <chk1+0x3a>
		return ;
	__pe = curenv;
f013019a:	a1 f4 53 87 f0       	mov    0xf08753f4,%eax
f013019f:	a3 94 5d 87 f0       	mov    %eax,0xf0875d94
	__pl = __nl ;
f01301a4:	a0 a8 5d 87 f0       	mov    0xf0875da8,%al
f01301a9:	a2 e0 5c 87 f0       	mov    %al,0xf0875ce0
	if (__pe == NULL)
f01301ae:	a1 94 5d 87 f0       	mov    0xf0875d94,%eax
f01301b3:	85 c0                	test   %eax,%eax
f01301b5:	75 07                	jne    f01301be <chk1+0x33>
	{
		__pl = 0;
f01301b7:	c6 05 e0 5c 87 f0 00 	movb   $0x0,0xf0875ce0
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f01301be:	e8 8d fe ff ff       	call   f0130050 <schenv>
f01301c3:	eb 01                	jmp    f01301c6 <chk1+0x3b>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f01301c5:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f01301c6:	c9                   	leave  
f01301c7:	c3                   	ret    

f01301c8 <chk2>:
void chk2(struct Env* __se)
{
f01301c8:	55                   	push   %ebp
f01301c9:	89 e5                	mov    %esp,%ebp
f01301cb:	53                   	push   %ebx
f01301cc:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f01301cf:	a0 34 5d 87 f0       	mov    0xf0875d34,%al
f01301d4:	84 c0                	test   %al,%al
f01301d6:	0f 84 43 02 00 00    	je     f013041f <chk2+0x257>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f01301dc:	a1 38 5d 87 f0       	mov    0xf0875d38,%eax
f01301e1:	39 45 08             	cmp    %eax,0x8(%ebp)
f01301e4:	74 19                	je     f01301ff <chk2+0x37>
f01301e6:	68 05 cc 13 f0       	push   $0xf013cc05
f01301eb:	68 12 cc 13 f0       	push   $0xf013cc12
f01301f0:	68 c0 00 00 00       	push   $0xc0
f01301f5:	68 27 cc 13 f0       	push   $0xf013cc27
f01301fa:	e8 bc 00 fd ff       	call   f01002bb <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f01301ff:	a1 38 5d 87 f0       	mov    0xf0875d38,%eax
f0130204:	85 c0                	test   %eax,%eax
f0130206:	0f 84 25 01 00 00    	je     f0130331 <chk2+0x169>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f013020c:	8b 15 2c 5d 87 f0    	mov    0xf0875d2c,%edx
f0130212:	a0 a8 5d 87 f0       	mov    0xf0875da8,%al
f0130217:	0f b6 c0             	movzbl %al,%eax
f013021a:	01 d0                	add    %edx,%eax
f013021c:	8a 00                	mov    (%eax),%al
f013021e:	0f b6 d8             	movzbl %al,%ebx
f0130221:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0130226:	99                   	cltd   
f0130227:	f7 fb                	idiv   %ebx
f0130229:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f013022f:	8b 15 2c 5d 87 f0    	mov    0xf0875d2c,%edx
f0130235:	a0 a8 5d 87 f0       	mov    0xf0875da8,%al
f013023a:	0f b6 c0             	movzbl %al,%eax
f013023d:	01 d0                	add    %edx,%eax
f013023f:	8a 00                	mov    (%eax),%al
f0130241:	0f b6 d8             	movzbl %al,%ebx
f0130244:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0130249:	99                   	cltd   
f013024a:	f7 fb                	idiv   %ebx
f013024c:	89 c3                	mov    %eax,%ebx
f013024e:	89 c8                	mov    %ecx,%eax
f0130250:	99                   	cltd   
f0130251:	f7 fb                	idiv   %ebx
f0130253:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		upper = upper % 2 == 1? upper+1 : upper ;
f0130257:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f013025b:	83 e0 01             	and    $0x1,%eax
f013025e:	66 85 c0             	test   %ax,%ax
f0130261:	74 07                	je     f013026a <chk2+0xa2>
f0130263:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0130267:	40                   	inc    %eax
f0130268:	eb 04                	jmp    f013026e <chk2+0xa6>
f013026a:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f013026e:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f0130272:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f0130276:	89 d0                	mov    %edx,%eax
f0130278:	c1 e0 02             	shl    $0x2,%eax
f013027b:	01 d0                	add    %edx,%eax
f013027d:	01 c0                	add    %eax,%eax
f013027f:	01 d0                	add    %edx,%eax
f0130281:	c1 e0 02             	shl    $0x2,%eax
f0130284:	01 d0                	add    %edx,%eax
f0130286:	01 c0                	add    %eax,%eax
f0130288:	89 c1                	mov    %eax,%ecx
f013028a:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f013028f:	f7 e9                	imul   %ecx
f0130291:	c1 fa 05             	sar    $0x5,%edx
f0130294:	89 c8                	mov    %ecx,%eax
f0130296:	c1 f8 1f             	sar    $0x1f,%eax
f0130299:	29 c2                	sub    %eax,%edx
f013029b:	89 d0                	mov    %edx,%eax
f013029d:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0();
f01302a1:	e8 b0 40 fd ff       	call   f0104356 <kclock_read_cnt0>
f01302a6:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f01302aa:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f01302ae:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f01302b2:	76 0a                	jbe    f01302be <chk2+0xf6>
f01302b4:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f01302b8:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f01302bc:	76 19                	jbe    f01302d7 <chk2+0x10f>
f01302be:	68 40 cc 13 f0       	push   $0xf013cc40
f01302c3:	68 12 cc 13 f0       	push   $0xf013cc12
f01302c8:	68 ca 00 00 00       	push   $0xca
f01302cd:	68 27 cc 13 f0       	push   $0xf013cc27
f01302d2:	e8 e4 ff fc ff       	call   f01002bb <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f01302d7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01302de:	eb 44                	jmp    f0130324 <chk2+0x15c>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f01302e0:	a1 38 5d 87 f0       	mov    0xf0875d38,%eax
f01302e5:	8b 40 4c             	mov    0x4c(%eax),%eax
f01302e8:	89 c2                	mov    %eax,%edx
f01302ea:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f01302ef:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01302f2:	c1 e1 04             	shl    $0x4,%ecx
f01302f5:	01 c8                	add    %ecx,%eax
f01302f7:	83 ec 08             	sub    $0x8,%esp
f01302fa:	52                   	push   %edx
f01302fb:	50                   	push   %eax
f01302fc:	e8 9e 43 fd ff       	call   f010469f <find_env_in_queue>
f0130301:	83 c4 10             	add    $0x10,%esp
f0130304:	85 c0                	test   %eax,%eax
f0130306:	74 19                	je     f0130321 <chk2+0x159>
f0130308:	68 64 cc 13 f0       	push   $0xf013cc64
f013030d:	68 12 cc 13 f0       	push   $0xf013cc12
f0130312:	68 ce 00 00 00       	push   $0xce
f0130317:	68 27 cc 13 f0       	push   $0xf013cc27
f013031c:	e8 9a ff fc ff       	call   f01002bb <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f0130321:	ff 45 f4             	incl   -0xc(%ebp)
f0130324:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0130329:	0f b6 c0             	movzbl %al,%eax
f013032c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f013032f:	7f af                	jg     f01302e0 <chk2+0x118>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f0130331:	a1 94 5d 87 f0       	mov    0xf0875d94,%eax
f0130336:	85 c0                	test   %eax,%eax
f0130338:	0f 84 e2 00 00 00    	je     f0130420 <chk2+0x258>
f013033e:	8b 15 94 5d 87 f0    	mov    0xf0875d94,%edx
f0130344:	a1 38 5d 87 f0       	mov    0xf0875d38,%eax
f0130349:	39 c2                	cmp    %eax,%edx
f013034b:	0f 84 cf 00 00 00    	je     f0130420 <chk2+0x258>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f0130351:	a0 e0 5c 87 f0       	mov    0xf0875ce0,%al
f0130356:	0f b6 c0             	movzbl %al,%eax
f0130359:	8a 15 80 5d 87 f0    	mov    0xf0875d80,%dl
f013035f:	0f b6 d2             	movzbl %dl,%edx
f0130362:	4a                   	dec    %edx
f0130363:	39 d0                	cmp    %edx,%eax
f0130365:	74 08                	je     f013036f <chk2+0x1a7>
f0130367:	a0 e0 5c 87 f0       	mov    0xf0875ce0,%al
f013036c:	40                   	inc    %eax
f013036d:	eb 05                	jmp    f0130374 <chk2+0x1ac>
f013036f:	a0 e0 5c 87 f0       	mov    0xf0875ce0,%al
f0130374:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f0130377:	a1 94 5d 87 f0       	mov    0xf0875d94,%eax
f013037c:	8b 40 4c             	mov    0x4c(%eax),%eax
f013037f:	89 c2                	mov    %eax,%edx
f0130381:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f0130386:	0f b6 4d e9          	movzbl -0x17(%ebp),%ecx
f013038a:	c1 e1 04             	shl    $0x4,%ecx
f013038d:	01 c8                	add    %ecx,%eax
f013038f:	83 ec 08             	sub    $0x8,%esp
f0130392:	52                   	push   %edx
f0130393:	50                   	push   %eax
f0130394:	e8 06 43 fd ff       	call   f010469f <find_env_in_queue>
f0130399:	83 c4 10             	add    $0x10,%esp
f013039c:	85 c0                	test   %eax,%eax
f013039e:	75 19                	jne    f01303b9 <chk2+0x1f1>
f01303a0:	68 a4 cc 13 f0       	push   $0xf013cca4
f01303a5:	68 12 cc 13 f0       	push   $0xf013cc12
f01303aa:	68 d4 00 00 00       	push   $0xd4
f01303af:	68 27 cc 13 f0       	push   $0xf013cc27
f01303b4:	e8 02 ff fc ff       	call   f01002bb <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f01303b9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01303c0:	eb 4e                	jmp    f0130410 <chk2+0x248>
		{
			if (i == __tl) continue;
f01303c2:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f01303c6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01303c9:	74 41                	je     f013040c <chk2+0x244>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f01303cb:	a1 94 5d 87 f0       	mov    0xf0875d94,%eax
f01303d0:	8b 40 4c             	mov    0x4c(%eax),%eax
f01303d3:	89 c2                	mov    %eax,%edx
f01303d5:	a1 e8 5c 87 f0       	mov    0xf0875ce8,%eax
f01303da:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f01303dd:	c1 e1 04             	shl    $0x4,%ecx
f01303e0:	01 c8                	add    %ecx,%eax
f01303e2:	83 ec 08             	sub    $0x8,%esp
f01303e5:	52                   	push   %edx
f01303e6:	50                   	push   %eax
f01303e7:	e8 b3 42 fd ff       	call   f010469f <find_env_in_queue>
f01303ec:	83 c4 10             	add    $0x10,%esp
f01303ef:	85 c0                	test   %eax,%eax
f01303f1:	74 1a                	je     f013040d <chk2+0x245>
f01303f3:	68 e8 cc 13 f0       	push   $0xf013cce8
f01303f8:	68 12 cc 13 f0       	push   $0xf013cc12
f01303fd:	68 d8 00 00 00       	push   $0xd8
f0130402:	68 27 cc 13 f0       	push   $0xf013cc27
f0130407:	e8 af fe fc ff       	call   f01002bb <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f013040c:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f013040d:	ff 45 f0             	incl   -0x10(%ebp)
f0130410:	a0 80 5d 87 f0       	mov    0xf0875d80,%al
f0130415:	0f b6 c0             	movzbl %al,%eax
f0130418:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f013041b:	7f a5                	jg     f01303c2 <chk2+0x1fa>
f013041d:	eb 01                	jmp    f0130420 <chk2+0x258>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f013041f:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f0130420:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0130423:	c9                   	leave  
f0130424:	c3                   	ret    

f0130425 <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f0130425:	55                   	push   %ebp
f0130426:	89 e5                	mov    %esp,%ebp
f0130428:	83 ec 18             	sub    $0x18,%esp

	//2016
	// check phys mem
	#if USE_KHEAP
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f013042b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130432:	eb 40                	jmp    f0130474 <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f0130434:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130437:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f013043d:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0130442:	83 ec 08             	sub    $0x8,%esp
f0130445:	52                   	push   %edx
f0130446:	50                   	push   %eax
f0130447:	e8 9b 01 00 00       	call   f01305e7 <check_va2pa>
f013044c:	83 c4 10             	add    $0x10,%esp
f013044f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130452:	74 19                	je     f013046d <check_boot_pgdir+0x48>
f0130454:	68 28 cd 13 f0       	push   $0xf013cd28
f0130459:	68 12 cc 13 f0       	push   $0xf013cc12
f013045e:	68 fa 00 00 00       	push   $0xfa
f0130463:	68 27 cc 13 f0       	push   $0xf013cc27
f0130468:	e8 98 fd fc ff       	call   f0100205 <_panic>

	//2016
	// check phys mem
	#if USE_KHEAP
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f013046d:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0130474:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130477:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f013047d:	a1 78 5d 87 f0       	mov    0xf0875d78,%eax
f0130482:	39 c2                	cmp    %eax,%edx
f0130484:	72 ae                	jb     f0130434 <check_boot_pgdir+0xf>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0130486:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f013048d:	eb 74                	jmp    f0130503 <check_boot_pgdir+0xde>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f013048f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130492:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f0130498:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f013049d:	83 ec 08             	sub    $0x8,%esp
f01304a0:	52                   	push   %edx
f01304a1:	50                   	push   %eax
f01304a2:	e8 40 01 00 00       	call   f01305e7 <check_va2pa>
f01304a7:	83 c4 10             	add    $0x10,%esp
f01304aa:	c7 45 f0 00 a0 18 f0 	movl   $0xf018a000,-0x10(%ebp)
f01304b1:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f01304b8:	77 17                	ja     f01304d1 <check_boot_pgdir+0xac>
f01304ba:	ff 75 f0             	pushl  -0x10(%ebp)
f01304bd:	68 60 cd 13 f0       	push   $0xf013cd60
f01304c2:	68 04 01 00 00       	push   $0x104
f01304c7:	68 27 cc 13 f0       	push   $0xf013cc27
f01304cc:	e8 34 fd fc ff       	call   f0100205 <_panic>
f01304d1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01304d4:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f01304da:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01304dd:	01 ca                	add    %ecx,%edx
f01304df:	39 d0                	cmp    %edx,%eax
f01304e1:	74 19                	je     f01304fc <check_boot_pgdir+0xd7>
f01304e3:	68 94 cd 13 f0       	push   $0xf013cd94
f01304e8:	68 12 cc 13 f0       	push   $0xf013cc12
f01304ed:	68 04 01 00 00       	push   $0x104
f01304f2:	68 27 cc 13 f0       	push   $0xf013cc27
f01304f7:	e8 09 fd fc ff       	call   f0100205 <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f01304fc:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0130503:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f013050a:	76 83                	jbe    f013048f <check_boot_pgdir+0x6a>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f013050c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130513:	e9 af 00 00 00       	jmp    f01305c7 <check_boot_pgdir+0x1a2>
		switch (i) {
f0130518:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013051b:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f0130520:	74 11                	je     f0130533 <check_boot_pgdir+0x10e>
f0130522:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f0130527:	72 36                	jb     f013055f <check_boot_pgdir+0x13a>
f0130529:	2d bd 03 00 00       	sub    $0x3bd,%eax
f013052e:	83 f8 02             	cmp    $0x2,%eax
f0130531:	77 2c                	ja     f013055f <check_boot_pgdir+0x13a>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f0130533:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0130538:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013053b:	c1 e2 02             	shl    $0x2,%edx
f013053e:	01 d0                	add    %edx,%eax
f0130540:	8b 00                	mov    (%eax),%eax
f0130542:	85 c0                	test   %eax,%eax
f0130544:	75 7a                	jne    f01305c0 <check_boot_pgdir+0x19b>
f0130546:	68 16 ce 13 f0       	push   $0xf013ce16
f013054b:	68 12 cc 13 f0       	push   $0xf013cc12
f0130550:	68 0f 01 00 00       	push   $0x10f
f0130555:	68 27 cc 13 f0       	push   $0xf013cc27
f013055a:	e8 a6 fc fc ff       	call   f0100205 <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f013055f:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f0130566:	76 2c                	jbe    f0130594 <check_boot_pgdir+0x16f>
				assert(ptr_page_directory[i]);
f0130568:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f013056d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130570:	c1 e2 02             	shl    $0x2,%edx
f0130573:	01 d0                	add    %edx,%eax
f0130575:	8b 00                	mov    (%eax),%eax
f0130577:	85 c0                	test   %eax,%eax
f0130579:	75 48                	jne    f01305c3 <check_boot_pgdir+0x19e>
f013057b:	68 16 ce 13 f0       	push   $0xf013ce16
f0130580:	68 12 cc 13 f0       	push   $0xf013cc12
f0130585:	68 13 01 00 00       	push   $0x113
f013058a:	68 27 cc 13 f0       	push   $0xf013cc27
f013058f:	e8 71 fc fc ff       	call   f0100205 <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f0130594:	a1 7c 5d 87 f0       	mov    0xf0875d7c,%eax
f0130599:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013059c:	c1 e2 02             	shl    $0x2,%edx
f013059f:	01 d0                	add    %edx,%eax
f01305a1:	8b 00                	mov    (%eax),%eax
f01305a3:	85 c0                	test   %eax,%eax
f01305a5:	74 1c                	je     f01305c3 <check_boot_pgdir+0x19e>
f01305a7:	68 2c ce 13 f0       	push   $0xf013ce2c
f01305ac:	68 12 cc 13 f0       	push   $0xf013cc12
f01305b1:	68 15 01 00 00       	push   $0x115
f01305b6:	68 27 cc 13 f0       	push   $0xf013cc27
f01305bb:	e8 45 fc fc ff       	call   f0100205 <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f01305c0:	90                   	nop
f01305c1:	eb 01                	jmp    f01305c4 <check_boot_pgdir+0x19f>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f01305c3:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f01305c4:	ff 45 f4             	incl   -0xc(%ebp)
f01305c7:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f01305ce:	0f 86 44 ff ff ff    	jbe    f0130518 <check_boot_pgdir+0xf3>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f01305d4:	83 ec 0c             	sub    $0xc,%esp
f01305d7:	68 48 ce 13 f0       	push   $0xf013ce48
f01305dc:	e8 2d 07 fd ff       	call   f0100d0e <cprintf>
f01305e1:	83 c4 10             	add    $0x10,%esp
}
f01305e4:	90                   	nop
f01305e5:	c9                   	leave  
f01305e6:	c3                   	ret    

f01305e7 <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f01305e7:	55                   	push   %ebp
f01305e8:	89 e5                	mov    %esp,%ebp
f01305ea:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f01305ed:	8b 45 0c             	mov    0xc(%ebp),%eax
f01305f0:	c1 e8 16             	shr    $0x16,%eax
f01305f3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01305fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01305fd:	01 d0                	add    %edx,%eax
f01305ff:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f0130602:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130605:	8b 00                	mov    (%eax),%eax
f0130607:	83 e0 01             	and    $0x1,%eax
f013060a:	85 c0                	test   %eax,%eax
f013060c:	75 0a                	jne    f0130618 <check_va2pa+0x31>
		return ~0;
f013060e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0130613:	e9 87 00 00 00       	jmp    f013069f <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f0130618:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013061b:	8b 00                	mov    (%eax),%eax
f013061d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0130622:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130625:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130628:	c1 e8 0c             	shr    $0xc,%eax
f013062b:	89 45 ec             	mov    %eax,-0x14(%ebp)
f013062e:	a1 10 5d 87 f0       	mov    0xf0875d10,%eax
f0130633:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0130636:	72 17                	jb     f013064f <check_va2pa+0x68>
f0130638:	ff 75 f0             	pushl  -0x10(%ebp)
f013063b:	68 68 ce 13 f0       	push   $0xf013ce68
f0130640:	68 2b 01 00 00       	push   $0x12b
f0130645:	68 27 cc 13 f0       	push   $0xf013cc27
f013064a:	e8 b6 fb fc ff       	call   f0100205 <_panic>
f013064f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130652:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0130657:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f013065a:	8b 45 0c             	mov    0xc(%ebp),%eax
f013065d:	c1 e8 0c             	shr    $0xc,%eax
f0130660:	25 ff 03 00 00       	and    $0x3ff,%eax
f0130665:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f013066c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013066f:	01 d0                	add    %edx,%eax
f0130671:	8b 00                	mov    (%eax),%eax
f0130673:	83 e0 01             	and    $0x1,%eax
f0130676:	85 c0                	test   %eax,%eax
f0130678:	75 07                	jne    f0130681 <check_va2pa+0x9a>
		return ~0;
f013067a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f013067f:	eb 1e                	jmp    f013069f <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f0130681:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130684:	c1 e8 0c             	shr    $0xc,%eax
f0130687:	25 ff 03 00 00       	and    $0x3ff,%eax
f013068c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130693:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0130696:	01 d0                	add    %edx,%eax
f0130698:	8b 00                	mov    (%eax),%eax
f013069a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f013069f:	c9                   	leave  
f01306a0:	c3                   	ret    

f01306a1 <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f01306a1:	55                   	push   %ebp
f01306a2:	89 e5                	mov    %esp,%ebp
f01306a4:	53                   	push   %ebx
f01306a5:	83 ec 14             	sub    $0x14,%esp
f01306a8:	8b 45 10             	mov    0x10(%ebp),%eax
f01306ab:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01306ae:	8b 45 14             	mov    0x14(%ebp),%eax
f01306b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f01306b4:	8b 45 18             	mov    0x18(%ebp),%eax
f01306b7:	ba 00 00 00 00       	mov    $0x0,%edx
f01306bc:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f01306bf:	77 55                	ja     f0130716 <printnum+0x75>
f01306c1:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f01306c4:	72 05                	jb     f01306cb <printnum+0x2a>
f01306c6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01306c9:	77 4b                	ja     f0130716 <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f01306cb:	8b 45 1c             	mov    0x1c(%ebp),%eax
f01306ce:	8d 58 ff             	lea    -0x1(%eax),%ebx
f01306d1:	8b 45 18             	mov    0x18(%ebp),%eax
f01306d4:	ba 00 00 00 00       	mov    $0x0,%edx
f01306d9:	52                   	push   %edx
f01306da:	50                   	push   %eax
f01306db:	ff 75 f4             	pushl  -0xc(%ebp)
f01306de:	ff 75 f0             	pushl  -0x10(%ebp)
f01306e1:	e8 0a 28 00 00       	call   f0132ef0 <__udivdi3>
f01306e6:	83 c4 10             	add    $0x10,%esp
f01306e9:	83 ec 04             	sub    $0x4,%esp
f01306ec:	ff 75 20             	pushl  0x20(%ebp)
f01306ef:	53                   	push   %ebx
f01306f0:	ff 75 18             	pushl  0x18(%ebp)
f01306f3:	52                   	push   %edx
f01306f4:	50                   	push   %eax
f01306f5:	ff 75 0c             	pushl  0xc(%ebp)
f01306f8:	ff 75 08             	pushl  0x8(%ebp)
f01306fb:	e8 a1 ff ff ff       	call   f01306a1 <printnum>
f0130700:	83 c4 20             	add    $0x20,%esp
f0130703:	eb 1a                	jmp    f013071f <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f0130705:	83 ec 08             	sub    $0x8,%esp
f0130708:	ff 75 0c             	pushl  0xc(%ebp)
f013070b:	ff 75 20             	pushl  0x20(%ebp)
f013070e:	8b 45 08             	mov    0x8(%ebp),%eax
f0130711:	ff d0                	call   *%eax
f0130713:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f0130716:	ff 4d 1c             	decl   0x1c(%ebp)
f0130719:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f013071d:	7f e6                	jg     f0130705 <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f013071f:	8b 4d 18             	mov    0x18(%ebp),%ecx
f0130722:	bb 00 00 00 00       	mov    $0x0,%ebx
f0130727:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013072a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013072d:	53                   	push   %ebx
f013072e:	51                   	push   %ecx
f013072f:	52                   	push   %edx
f0130730:	50                   	push   %eax
f0130731:	e8 ca 28 00 00       	call   f0133000 <__umoddi3>
f0130736:	83 c4 10             	add    $0x10,%esp
f0130739:	05 b4 d0 13 f0       	add    $0xf013d0b4,%eax
f013073e:	8a 00                	mov    (%eax),%al
f0130740:	0f be c0             	movsbl %al,%eax
f0130743:	83 ec 08             	sub    $0x8,%esp
f0130746:	ff 75 0c             	pushl  0xc(%ebp)
f0130749:	50                   	push   %eax
f013074a:	8b 45 08             	mov    0x8(%ebp),%eax
f013074d:	ff d0                	call   *%eax
f013074f:	83 c4 10             	add    $0x10,%esp
}
f0130752:	90                   	nop
f0130753:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0130756:	c9                   	leave  
f0130757:	c3                   	ret    

f0130758 <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f0130758:	55                   	push   %ebp
f0130759:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f013075b:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f013075f:	7e 1c                	jle    f013077d <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f0130761:	8b 45 08             	mov    0x8(%ebp),%eax
f0130764:	8b 00                	mov    (%eax),%eax
f0130766:	8d 50 08             	lea    0x8(%eax),%edx
f0130769:	8b 45 08             	mov    0x8(%ebp),%eax
f013076c:	89 10                	mov    %edx,(%eax)
f013076e:	8b 45 08             	mov    0x8(%ebp),%eax
f0130771:	8b 00                	mov    (%eax),%eax
f0130773:	83 e8 08             	sub    $0x8,%eax
f0130776:	8b 50 04             	mov    0x4(%eax),%edx
f0130779:	8b 00                	mov    (%eax),%eax
f013077b:	eb 40                	jmp    f01307bd <getuint+0x65>
	else if (lflag)
f013077d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130781:	74 1e                	je     f01307a1 <getuint+0x49>
		return va_arg(*ap, unsigned long);
f0130783:	8b 45 08             	mov    0x8(%ebp),%eax
f0130786:	8b 00                	mov    (%eax),%eax
f0130788:	8d 50 04             	lea    0x4(%eax),%edx
f013078b:	8b 45 08             	mov    0x8(%ebp),%eax
f013078e:	89 10                	mov    %edx,(%eax)
f0130790:	8b 45 08             	mov    0x8(%ebp),%eax
f0130793:	8b 00                	mov    (%eax),%eax
f0130795:	83 e8 04             	sub    $0x4,%eax
f0130798:	8b 00                	mov    (%eax),%eax
f013079a:	ba 00 00 00 00       	mov    $0x0,%edx
f013079f:	eb 1c                	jmp    f01307bd <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f01307a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01307a4:	8b 00                	mov    (%eax),%eax
f01307a6:	8d 50 04             	lea    0x4(%eax),%edx
f01307a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01307ac:	89 10                	mov    %edx,(%eax)
f01307ae:	8b 45 08             	mov    0x8(%ebp),%eax
f01307b1:	8b 00                	mov    (%eax),%eax
f01307b3:	83 e8 04             	sub    $0x4,%eax
f01307b6:	8b 00                	mov    (%eax),%eax
f01307b8:	ba 00 00 00 00       	mov    $0x0,%edx
}
f01307bd:	5d                   	pop    %ebp
f01307be:	c3                   	ret    

f01307bf <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f01307bf:	55                   	push   %ebp
f01307c0:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f01307c2:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f01307c6:	7e 1c                	jle    f01307e4 <getint+0x25>
		return va_arg(*ap, long long);
f01307c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01307cb:	8b 00                	mov    (%eax),%eax
f01307cd:	8d 50 08             	lea    0x8(%eax),%edx
f01307d0:	8b 45 08             	mov    0x8(%ebp),%eax
f01307d3:	89 10                	mov    %edx,(%eax)
f01307d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01307d8:	8b 00                	mov    (%eax),%eax
f01307da:	83 e8 08             	sub    $0x8,%eax
f01307dd:	8b 50 04             	mov    0x4(%eax),%edx
f01307e0:	8b 00                	mov    (%eax),%eax
f01307e2:	eb 38                	jmp    f013081c <getint+0x5d>
	else if (lflag)
f01307e4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01307e8:	74 1a                	je     f0130804 <getint+0x45>
		return va_arg(*ap, long);
f01307ea:	8b 45 08             	mov    0x8(%ebp),%eax
f01307ed:	8b 00                	mov    (%eax),%eax
f01307ef:	8d 50 04             	lea    0x4(%eax),%edx
f01307f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01307f5:	89 10                	mov    %edx,(%eax)
f01307f7:	8b 45 08             	mov    0x8(%ebp),%eax
f01307fa:	8b 00                	mov    (%eax),%eax
f01307fc:	83 e8 04             	sub    $0x4,%eax
f01307ff:	8b 00                	mov    (%eax),%eax
f0130801:	99                   	cltd   
f0130802:	eb 18                	jmp    f013081c <getint+0x5d>
	else
		return va_arg(*ap, int);
f0130804:	8b 45 08             	mov    0x8(%ebp),%eax
f0130807:	8b 00                	mov    (%eax),%eax
f0130809:	8d 50 04             	lea    0x4(%eax),%edx
f013080c:	8b 45 08             	mov    0x8(%ebp),%eax
f013080f:	89 10                	mov    %edx,(%eax)
f0130811:	8b 45 08             	mov    0x8(%ebp),%eax
f0130814:	8b 00                	mov    (%eax),%eax
f0130816:	83 e8 04             	sub    $0x4,%eax
f0130819:	8b 00                	mov    (%eax),%eax
f013081b:	99                   	cltd   
}
f013081c:	5d                   	pop    %ebp
f013081d:	c3                   	ret    

f013081e <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f013081e:	55                   	push   %ebp
f013081f:	89 e5                	mov    %esp,%ebp
f0130821:	56                   	push   %esi
f0130822:	53                   	push   %ebx
f0130823:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f0130826:	eb 17                	jmp    f013083f <vprintfmt+0x21>
			if (ch == '\0')
f0130828:	85 db                	test   %ebx,%ebx
f013082a:	0f 84 af 03 00 00    	je     f0130bdf <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f0130830:	83 ec 08             	sub    $0x8,%esp
f0130833:	ff 75 0c             	pushl  0xc(%ebp)
f0130836:	53                   	push   %ebx
f0130837:	8b 45 08             	mov    0x8(%ebp),%eax
f013083a:	ff d0                	call   *%eax
f013083c:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f013083f:	8b 45 10             	mov    0x10(%ebp),%eax
f0130842:	8d 50 01             	lea    0x1(%eax),%edx
f0130845:	89 55 10             	mov    %edx,0x10(%ebp)
f0130848:	8a 00                	mov    (%eax),%al
f013084a:	0f b6 d8             	movzbl %al,%ebx
f013084d:	83 fb 25             	cmp    $0x25,%ebx
f0130850:	75 d6                	jne    f0130828 <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f0130852:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f0130856:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f013085d:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f0130864:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f013086b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f0130872:	8b 45 10             	mov    0x10(%ebp),%eax
f0130875:	8d 50 01             	lea    0x1(%eax),%edx
f0130878:	89 55 10             	mov    %edx,0x10(%ebp)
f013087b:	8a 00                	mov    (%eax),%al
f013087d:	0f b6 d8             	movzbl %al,%ebx
f0130880:	8d 43 dd             	lea    -0x23(%ebx),%eax
f0130883:	83 f8 55             	cmp    $0x55,%eax
f0130886:	0f 87 2b 03 00 00    	ja     f0130bb7 <vprintfmt+0x399>
f013088c:	8b 04 85 d8 d0 13 f0 	mov    -0xfec2f28(,%eax,4),%eax
f0130893:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f0130895:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f0130899:	eb d7                	jmp    f0130872 <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f013089b:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f013089f:	eb d1                	jmp    f0130872 <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f01308a1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f01308a8:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01308ab:	89 d0                	mov    %edx,%eax
f01308ad:	c1 e0 02             	shl    $0x2,%eax
f01308b0:	01 d0                	add    %edx,%eax
f01308b2:	01 c0                	add    %eax,%eax
f01308b4:	01 d8                	add    %ebx,%eax
f01308b6:	83 e8 30             	sub    $0x30,%eax
f01308b9:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f01308bc:	8b 45 10             	mov    0x10(%ebp),%eax
f01308bf:	8a 00                	mov    (%eax),%al
f01308c1:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f01308c4:	83 fb 2f             	cmp    $0x2f,%ebx
f01308c7:	7e 3e                	jle    f0130907 <vprintfmt+0xe9>
f01308c9:	83 fb 39             	cmp    $0x39,%ebx
f01308cc:	7f 39                	jg     f0130907 <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f01308ce:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f01308d1:	eb d5                	jmp    f01308a8 <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f01308d3:	8b 45 14             	mov    0x14(%ebp),%eax
f01308d6:	83 c0 04             	add    $0x4,%eax
f01308d9:	89 45 14             	mov    %eax,0x14(%ebp)
f01308dc:	8b 45 14             	mov    0x14(%ebp),%eax
f01308df:	83 e8 04             	sub    $0x4,%eax
f01308e2:	8b 00                	mov    (%eax),%eax
f01308e4:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f01308e7:	eb 1f                	jmp    f0130908 <vprintfmt+0xea>

		case '.':
			if (width < 0)
f01308e9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01308ed:	79 83                	jns    f0130872 <vprintfmt+0x54>
				width = 0;
f01308ef:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f01308f6:	e9 77 ff ff ff       	jmp    f0130872 <vprintfmt+0x54>

		case '#':
			altflag = 1;
f01308fb:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f0130902:	e9 6b ff ff ff       	jmp    f0130872 <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f0130907:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f0130908:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f013090c:	0f 89 60 ff ff ff    	jns    f0130872 <vprintfmt+0x54>
				width = precision, precision = -1;
f0130912:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0130915:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0130918:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f013091f:	e9 4e ff ff ff       	jmp    f0130872 <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f0130924:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f0130927:	e9 46 ff ff ff       	jmp    f0130872 <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f013092c:	8b 45 14             	mov    0x14(%ebp),%eax
f013092f:	83 c0 04             	add    $0x4,%eax
f0130932:	89 45 14             	mov    %eax,0x14(%ebp)
f0130935:	8b 45 14             	mov    0x14(%ebp),%eax
f0130938:	83 e8 04             	sub    $0x4,%eax
f013093b:	8b 00                	mov    (%eax),%eax
f013093d:	83 ec 08             	sub    $0x8,%esp
f0130940:	ff 75 0c             	pushl  0xc(%ebp)
f0130943:	50                   	push   %eax
f0130944:	8b 45 08             	mov    0x8(%ebp),%eax
f0130947:	ff d0                	call   *%eax
f0130949:	83 c4 10             	add    $0x10,%esp
			break;
f013094c:	e9 89 02 00 00       	jmp    f0130bda <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f0130951:	8b 45 14             	mov    0x14(%ebp),%eax
f0130954:	83 c0 04             	add    $0x4,%eax
f0130957:	89 45 14             	mov    %eax,0x14(%ebp)
f013095a:	8b 45 14             	mov    0x14(%ebp),%eax
f013095d:	83 e8 04             	sub    $0x4,%eax
f0130960:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f0130962:	85 db                	test   %ebx,%ebx
f0130964:	79 02                	jns    f0130968 <vprintfmt+0x14a>
				err = -err;
f0130966:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f0130968:	83 fb 64             	cmp    $0x64,%ebx
f013096b:	7f 0b                	jg     f0130978 <vprintfmt+0x15a>
f013096d:	8b 34 9d 20 cf 13 f0 	mov    -0xfec30e0(,%ebx,4),%esi
f0130974:	85 f6                	test   %esi,%esi
f0130976:	75 19                	jne    f0130991 <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f0130978:	53                   	push   %ebx
f0130979:	68 c5 d0 13 f0       	push   $0xf013d0c5
f013097e:	ff 75 0c             	pushl  0xc(%ebp)
f0130981:	ff 75 08             	pushl  0x8(%ebp)
f0130984:	e8 5e 02 00 00       	call   f0130be7 <printfmt>
f0130989:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f013098c:	e9 49 02 00 00       	jmp    f0130bda <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f0130991:	56                   	push   %esi
f0130992:	68 ce d0 13 f0       	push   $0xf013d0ce
f0130997:	ff 75 0c             	pushl  0xc(%ebp)
f013099a:	ff 75 08             	pushl  0x8(%ebp)
f013099d:	e8 45 02 00 00       	call   f0130be7 <printfmt>
f01309a2:	83 c4 10             	add    $0x10,%esp
			break;
f01309a5:	e9 30 02 00 00       	jmp    f0130bda <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f01309aa:	8b 45 14             	mov    0x14(%ebp),%eax
f01309ad:	83 c0 04             	add    $0x4,%eax
f01309b0:	89 45 14             	mov    %eax,0x14(%ebp)
f01309b3:	8b 45 14             	mov    0x14(%ebp),%eax
f01309b6:	83 e8 04             	sub    $0x4,%eax
f01309b9:	8b 30                	mov    (%eax),%esi
f01309bb:	85 f6                	test   %esi,%esi
f01309bd:	75 05                	jne    f01309c4 <vprintfmt+0x1a6>
				p = "(null)";
f01309bf:	be d1 d0 13 f0       	mov    $0xf013d0d1,%esi
			if (width > 0 && padc != '-')
f01309c4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01309c8:	7e 6d                	jle    f0130a37 <vprintfmt+0x219>
f01309ca:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f01309ce:	74 67                	je     f0130a37 <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f01309d0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01309d3:	83 ec 08             	sub    $0x8,%esp
f01309d6:	50                   	push   %eax
f01309d7:	56                   	push   %esi
f01309d8:	e8 12 05 00 00       	call   f0130eef <strnlen>
f01309dd:	83 c4 10             	add    $0x10,%esp
f01309e0:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f01309e3:	eb 16                	jmp    f01309fb <vprintfmt+0x1dd>
					putch(padc, putdat);
f01309e5:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f01309e9:	83 ec 08             	sub    $0x8,%esp
f01309ec:	ff 75 0c             	pushl  0xc(%ebp)
f01309ef:	50                   	push   %eax
f01309f0:	8b 45 08             	mov    0x8(%ebp),%eax
f01309f3:	ff d0                	call   *%eax
f01309f5:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f01309f8:	ff 4d e4             	decl   -0x1c(%ebp)
f01309fb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01309ff:	7f e4                	jg     f01309e5 <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f0130a01:	eb 34                	jmp    f0130a37 <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f0130a03:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0130a07:	74 1c                	je     f0130a25 <vprintfmt+0x207>
f0130a09:	83 fb 1f             	cmp    $0x1f,%ebx
f0130a0c:	7e 05                	jle    f0130a13 <vprintfmt+0x1f5>
f0130a0e:	83 fb 7e             	cmp    $0x7e,%ebx
f0130a11:	7e 12                	jle    f0130a25 <vprintfmt+0x207>
					putch('?', putdat);
f0130a13:	83 ec 08             	sub    $0x8,%esp
f0130a16:	ff 75 0c             	pushl  0xc(%ebp)
f0130a19:	6a 3f                	push   $0x3f
f0130a1b:	8b 45 08             	mov    0x8(%ebp),%eax
f0130a1e:	ff d0                	call   *%eax
f0130a20:	83 c4 10             	add    $0x10,%esp
f0130a23:	eb 0f                	jmp    f0130a34 <vprintfmt+0x216>
				else
					putch(ch, putdat);
f0130a25:	83 ec 08             	sub    $0x8,%esp
f0130a28:	ff 75 0c             	pushl  0xc(%ebp)
f0130a2b:	53                   	push   %ebx
f0130a2c:	8b 45 08             	mov    0x8(%ebp),%eax
f0130a2f:	ff d0                	call   *%eax
f0130a31:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f0130a34:	ff 4d e4             	decl   -0x1c(%ebp)
f0130a37:	89 f0                	mov    %esi,%eax
f0130a39:	8d 70 01             	lea    0x1(%eax),%esi
f0130a3c:	8a 00                	mov    (%eax),%al
f0130a3e:	0f be d8             	movsbl %al,%ebx
f0130a41:	85 db                	test   %ebx,%ebx
f0130a43:	74 24                	je     f0130a69 <vprintfmt+0x24b>
f0130a45:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0130a49:	78 b8                	js     f0130a03 <vprintfmt+0x1e5>
f0130a4b:	ff 4d e0             	decl   -0x20(%ebp)
f0130a4e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0130a52:	79 af                	jns    f0130a03 <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f0130a54:	eb 13                	jmp    f0130a69 <vprintfmt+0x24b>
				putch(' ', putdat);
f0130a56:	83 ec 08             	sub    $0x8,%esp
f0130a59:	ff 75 0c             	pushl  0xc(%ebp)
f0130a5c:	6a 20                	push   $0x20
f0130a5e:	8b 45 08             	mov    0x8(%ebp),%eax
f0130a61:	ff d0                	call   *%eax
f0130a63:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f0130a66:	ff 4d e4             	decl   -0x1c(%ebp)
f0130a69:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130a6d:	7f e7                	jg     f0130a56 <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f0130a6f:	e9 66 01 00 00       	jmp    f0130bda <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f0130a74:	83 ec 08             	sub    $0x8,%esp
f0130a77:	ff 75 e8             	pushl  -0x18(%ebp)
f0130a7a:	8d 45 14             	lea    0x14(%ebp),%eax
f0130a7d:	50                   	push   %eax
f0130a7e:	e8 3c fd ff ff       	call   f01307bf <getint>
f0130a83:	83 c4 10             	add    $0x10,%esp
f0130a86:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130a89:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f0130a8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130a8f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130a92:	85 d2                	test   %edx,%edx
f0130a94:	79 23                	jns    f0130ab9 <vprintfmt+0x29b>
				putch('-', putdat);
f0130a96:	83 ec 08             	sub    $0x8,%esp
f0130a99:	ff 75 0c             	pushl  0xc(%ebp)
f0130a9c:	6a 2d                	push   $0x2d
f0130a9e:	8b 45 08             	mov    0x8(%ebp),%eax
f0130aa1:	ff d0                	call   *%eax
f0130aa3:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f0130aa6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130aa9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130aac:	f7 d8                	neg    %eax
f0130aae:	83 d2 00             	adc    $0x0,%edx
f0130ab1:	f7 da                	neg    %edx
f0130ab3:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130ab6:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f0130ab9:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f0130ac0:	e9 bc 00 00 00       	jmp    f0130b81 <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f0130ac5:	83 ec 08             	sub    $0x8,%esp
f0130ac8:	ff 75 e8             	pushl  -0x18(%ebp)
f0130acb:	8d 45 14             	lea    0x14(%ebp),%eax
f0130ace:	50                   	push   %eax
f0130acf:	e8 84 fc ff ff       	call   f0130758 <getuint>
f0130ad4:	83 c4 10             	add    $0x10,%esp
f0130ad7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130ada:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f0130add:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f0130ae4:	e9 98 00 00 00       	jmp    f0130b81 <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f0130ae9:	83 ec 08             	sub    $0x8,%esp
f0130aec:	ff 75 0c             	pushl  0xc(%ebp)
f0130aef:	6a 58                	push   $0x58
f0130af1:	8b 45 08             	mov    0x8(%ebp),%eax
f0130af4:	ff d0                	call   *%eax
f0130af6:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f0130af9:	83 ec 08             	sub    $0x8,%esp
f0130afc:	ff 75 0c             	pushl  0xc(%ebp)
f0130aff:	6a 58                	push   $0x58
f0130b01:	8b 45 08             	mov    0x8(%ebp),%eax
f0130b04:	ff d0                	call   *%eax
f0130b06:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f0130b09:	83 ec 08             	sub    $0x8,%esp
f0130b0c:	ff 75 0c             	pushl  0xc(%ebp)
f0130b0f:	6a 58                	push   $0x58
f0130b11:	8b 45 08             	mov    0x8(%ebp),%eax
f0130b14:	ff d0                	call   *%eax
f0130b16:	83 c4 10             	add    $0x10,%esp
			break;
f0130b19:	e9 bc 00 00 00       	jmp    f0130bda <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f0130b1e:	83 ec 08             	sub    $0x8,%esp
f0130b21:	ff 75 0c             	pushl  0xc(%ebp)
f0130b24:	6a 30                	push   $0x30
f0130b26:	8b 45 08             	mov    0x8(%ebp),%eax
f0130b29:	ff d0                	call   *%eax
f0130b2b:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f0130b2e:	83 ec 08             	sub    $0x8,%esp
f0130b31:	ff 75 0c             	pushl  0xc(%ebp)
f0130b34:	6a 78                	push   $0x78
f0130b36:	8b 45 08             	mov    0x8(%ebp),%eax
f0130b39:	ff d0                	call   *%eax
f0130b3b:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f0130b3e:	8b 45 14             	mov    0x14(%ebp),%eax
f0130b41:	83 c0 04             	add    $0x4,%eax
f0130b44:	89 45 14             	mov    %eax,0x14(%ebp)
f0130b47:	8b 45 14             	mov    0x14(%ebp),%eax
f0130b4a:	83 e8 04             	sub    $0x4,%eax
f0130b4d:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f0130b4f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130b52:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f0130b59:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f0130b60:	eb 1f                	jmp    f0130b81 <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f0130b62:	83 ec 08             	sub    $0x8,%esp
f0130b65:	ff 75 e8             	pushl  -0x18(%ebp)
f0130b68:	8d 45 14             	lea    0x14(%ebp),%eax
f0130b6b:	50                   	push   %eax
f0130b6c:	e8 e7 fb ff ff       	call   f0130758 <getuint>
f0130b71:	83 c4 10             	add    $0x10,%esp
f0130b74:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130b77:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f0130b7a:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f0130b81:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f0130b85:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0130b88:	83 ec 04             	sub    $0x4,%esp
f0130b8b:	52                   	push   %edx
f0130b8c:	ff 75 e4             	pushl  -0x1c(%ebp)
f0130b8f:	50                   	push   %eax
f0130b90:	ff 75 f4             	pushl  -0xc(%ebp)
f0130b93:	ff 75 f0             	pushl  -0x10(%ebp)
f0130b96:	ff 75 0c             	pushl  0xc(%ebp)
f0130b99:	ff 75 08             	pushl  0x8(%ebp)
f0130b9c:	e8 00 fb ff ff       	call   f01306a1 <printnum>
f0130ba1:	83 c4 20             	add    $0x20,%esp
			break;
f0130ba4:	eb 34                	jmp    f0130bda <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f0130ba6:	83 ec 08             	sub    $0x8,%esp
f0130ba9:	ff 75 0c             	pushl  0xc(%ebp)
f0130bac:	53                   	push   %ebx
f0130bad:	8b 45 08             	mov    0x8(%ebp),%eax
f0130bb0:	ff d0                	call   *%eax
f0130bb2:	83 c4 10             	add    $0x10,%esp
			break;
f0130bb5:	eb 23                	jmp    f0130bda <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f0130bb7:	83 ec 08             	sub    $0x8,%esp
f0130bba:	ff 75 0c             	pushl  0xc(%ebp)
f0130bbd:	6a 25                	push   $0x25
f0130bbf:	8b 45 08             	mov    0x8(%ebp),%eax
f0130bc2:	ff d0                	call   *%eax
f0130bc4:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f0130bc7:	ff 4d 10             	decl   0x10(%ebp)
f0130bca:	eb 03                	jmp    f0130bcf <vprintfmt+0x3b1>
f0130bcc:	ff 4d 10             	decl   0x10(%ebp)
f0130bcf:	8b 45 10             	mov    0x10(%ebp),%eax
f0130bd2:	48                   	dec    %eax
f0130bd3:	8a 00                	mov    (%eax),%al
f0130bd5:	3c 25                	cmp    $0x25,%al
f0130bd7:	75 f3                	jne    f0130bcc <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f0130bd9:	90                   	nop
		}
	}
f0130bda:	e9 47 fc ff ff       	jmp    f0130826 <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f0130bdf:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f0130be0:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0130be3:	5b                   	pop    %ebx
f0130be4:	5e                   	pop    %esi
f0130be5:	5d                   	pop    %ebp
f0130be6:	c3                   	ret    

f0130be7 <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f0130be7:	55                   	push   %ebp
f0130be8:	89 e5                	mov    %esp,%ebp
f0130bea:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0130bed:	8d 45 10             	lea    0x10(%ebp),%eax
f0130bf0:	83 c0 04             	add    $0x4,%eax
f0130bf3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f0130bf6:	8b 45 10             	mov    0x10(%ebp),%eax
f0130bf9:	ff 75 f4             	pushl  -0xc(%ebp)
f0130bfc:	50                   	push   %eax
f0130bfd:	ff 75 0c             	pushl  0xc(%ebp)
f0130c00:	ff 75 08             	pushl  0x8(%ebp)
f0130c03:	e8 16 fc ff ff       	call   f013081e <vprintfmt>
f0130c08:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f0130c0b:	90                   	nop
f0130c0c:	c9                   	leave  
f0130c0d:	c3                   	ret    

f0130c0e <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f0130c0e:	55                   	push   %ebp
f0130c0f:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f0130c11:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130c14:	8b 40 08             	mov    0x8(%eax),%eax
f0130c17:	8d 50 01             	lea    0x1(%eax),%edx
f0130c1a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130c1d:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f0130c20:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130c23:	8b 10                	mov    (%eax),%edx
f0130c25:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130c28:	8b 40 04             	mov    0x4(%eax),%eax
f0130c2b:	39 c2                	cmp    %eax,%edx
f0130c2d:	73 12                	jae    f0130c41 <sprintputch+0x33>
		*b->buf++ = ch;
f0130c2f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130c32:	8b 00                	mov    (%eax),%eax
f0130c34:	8d 48 01             	lea    0x1(%eax),%ecx
f0130c37:	8b 55 0c             	mov    0xc(%ebp),%edx
f0130c3a:	89 0a                	mov    %ecx,(%edx)
f0130c3c:	8b 55 08             	mov    0x8(%ebp),%edx
f0130c3f:	88 10                	mov    %dl,(%eax)
}
f0130c41:	90                   	nop
f0130c42:	5d                   	pop    %ebp
f0130c43:	c3                   	ret    

f0130c44 <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f0130c44:	55                   	push   %ebp
f0130c45:	89 e5                	mov    %esp,%ebp
f0130c47:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f0130c4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0130c4d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0130c50:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130c53:	8d 50 ff             	lea    -0x1(%eax),%edx
f0130c56:	8b 45 08             	mov    0x8(%ebp),%eax
f0130c59:	01 d0                	add    %edx,%eax
f0130c5b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130c5e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f0130c65:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130c69:	74 06                	je     f0130c71 <vsnprintf+0x2d>
f0130c6b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130c6f:	7f 07                	jg     f0130c78 <vsnprintf+0x34>
		return -E_INVAL;
f0130c71:	b8 03 00 00 00       	mov    $0x3,%eax
f0130c76:	eb 20                	jmp    f0130c98 <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f0130c78:	ff 75 14             	pushl  0x14(%ebp)
f0130c7b:	ff 75 10             	pushl  0x10(%ebp)
f0130c7e:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0130c81:	50                   	push   %eax
f0130c82:	68 0e 0c 13 f0       	push   $0xf0130c0e
f0130c87:	e8 92 fb ff ff       	call   f013081e <vprintfmt>
f0130c8c:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f0130c8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0130c92:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f0130c95:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0130c98:	c9                   	leave  
f0130c99:	c3                   	ret    

f0130c9a <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f0130c9a:	55                   	push   %ebp
f0130c9b:	89 e5                	mov    %esp,%ebp
f0130c9d:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f0130ca0:	8d 45 10             	lea    0x10(%ebp),%eax
f0130ca3:	83 c0 04             	add    $0x4,%eax
f0130ca6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f0130ca9:	8b 45 10             	mov    0x10(%ebp),%eax
f0130cac:	ff 75 f4             	pushl  -0xc(%ebp)
f0130caf:	50                   	push   %eax
f0130cb0:	ff 75 0c             	pushl  0xc(%ebp)
f0130cb3:	ff 75 08             	pushl  0x8(%ebp)
f0130cb6:	e8 89 ff ff ff       	call   f0130c44 <vsnprintf>
f0130cbb:	83 c4 10             	add    $0x10,%esp
f0130cbe:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f0130cc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0130cc4:	c9                   	leave  
f0130cc5:	c3                   	ret    

f0130cc6 <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f0130cc6:	55                   	push   %ebp
f0130cc7:	89 e5                	mov    %esp,%ebp
f0130cc9:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f0130ccc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130cd0:	74 13                	je     f0130ce5 <readline+0x1f>
		cprintf("%s", prompt);
f0130cd2:	83 ec 08             	sub    $0x8,%esp
f0130cd5:	ff 75 08             	pushl  0x8(%ebp)
f0130cd8:	68 30 d2 13 f0       	push   $0xf013d230
f0130cdd:	e8 2c 00 fd ff       	call   f0100d0e <cprintf>
f0130ce2:	83 c4 10             	add    $0x10,%esp

	i = 0;
f0130ce5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f0130cec:	83 ec 0c             	sub    $0xc,%esp
f0130cef:	6a 00                	push   $0x0
f0130cf1:	e8 c5 ff fc ff       	call   f0100cbb <iscons>
f0130cf6:	83 c4 10             	add    $0x10,%esp
f0130cf9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f0130cfc:	e8 a1 ff fc ff       	call   f0100ca2 <getchar>
f0130d01:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f0130d04:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0130d08:	79 22                	jns    f0130d2c <readline+0x66>
			if (c != -E_EOF)
f0130d0a:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f0130d0e:	0f 84 ad 00 00 00    	je     f0130dc1 <readline+0xfb>
				cprintf("read error: %e\n", c);
f0130d14:	83 ec 08             	sub    $0x8,%esp
f0130d17:	ff 75 ec             	pushl  -0x14(%ebp)
f0130d1a:	68 33 d2 13 f0       	push   $0xf013d233
f0130d1f:	e8 ea ff fc ff       	call   f0100d0e <cprintf>
f0130d24:	83 c4 10             	add    $0x10,%esp
			return;
f0130d27:	e9 95 00 00 00       	jmp    f0130dc1 <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f0130d2c:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f0130d30:	7e 34                	jle    f0130d66 <readline+0xa0>
f0130d32:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f0130d39:	7f 2b                	jg     f0130d66 <readline+0xa0>
			if (echoing)
f0130d3b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130d3f:	74 0e                	je     f0130d4f <readline+0x89>
				cputchar(c);
f0130d41:	83 ec 0c             	sub    $0xc,%esp
f0130d44:	ff 75 ec             	pushl  -0x14(%ebp)
f0130d47:	e8 3f ff fc ff       	call   f0100c8b <cputchar>
f0130d4c:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0130d4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130d52:	8d 50 01             	lea    0x1(%eax),%edx
f0130d55:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0130d58:	89 c2                	mov    %eax,%edx
f0130d5a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130d5d:	01 d0                	add    %edx,%eax
f0130d5f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0130d62:	88 10                	mov    %dl,(%eax)
f0130d64:	eb 56                	jmp    f0130dbc <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f0130d66:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f0130d6a:	75 1f                	jne    f0130d8b <readline+0xc5>
f0130d6c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0130d70:	7e 19                	jle    f0130d8b <readline+0xc5>
			if (echoing)
f0130d72:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130d76:	74 0e                	je     f0130d86 <readline+0xc0>
				cputchar(c);
f0130d78:	83 ec 0c             	sub    $0xc,%esp
f0130d7b:	ff 75 ec             	pushl  -0x14(%ebp)
f0130d7e:	e8 08 ff fc ff       	call   f0100c8b <cputchar>
f0130d83:	83 c4 10             	add    $0x10,%esp

			i--;
f0130d86:	ff 4d f4             	decl   -0xc(%ebp)
f0130d89:	eb 31                	jmp    f0130dbc <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f0130d8b:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f0130d8f:	74 0a                	je     f0130d9b <readline+0xd5>
f0130d91:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f0130d95:	0f 85 61 ff ff ff    	jne    f0130cfc <readline+0x36>
			if (echoing)
f0130d9b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130d9f:	74 0e                	je     f0130daf <readline+0xe9>
				cputchar(c);
f0130da1:	83 ec 0c             	sub    $0xc,%esp
f0130da4:	ff 75 ec             	pushl  -0x14(%ebp)
f0130da7:	e8 df fe fc ff       	call   f0100c8b <cputchar>
f0130dac:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f0130daf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130db2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130db5:	01 d0                	add    %edx,%eax
f0130db7:	c6 00 00             	movb   $0x0,(%eax)
			return;
f0130dba:	eb 06                	jmp    f0130dc2 <readline+0xfc>
		}
	}
f0130dbc:	e9 3b ff ff ff       	jmp    f0130cfc <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f0130dc1:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f0130dc2:	c9                   	leave  
f0130dc3:	c3                   	ret    

f0130dc4 <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f0130dc4:	55                   	push   %ebp
f0130dc5:	89 e5                	mov    %esp,%ebp
f0130dc7:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f0130dca:	e8 4f bf fd ff       	call   f010cd1e <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f0130dcf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130dd3:	74 13                	je     f0130de8 <atomic_readline+0x24>
		cprintf("%s", prompt);
f0130dd5:	83 ec 08             	sub    $0x8,%esp
f0130dd8:	ff 75 08             	pushl  0x8(%ebp)
f0130ddb:	68 30 d2 13 f0       	push   $0xf013d230
f0130de0:	e8 29 ff fc ff       	call   f0100d0e <cprintf>
f0130de5:	83 c4 10             	add    $0x10,%esp

	i = 0;
f0130de8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f0130def:	83 ec 0c             	sub    $0xc,%esp
f0130df2:	6a 00                	push   $0x0
f0130df4:	e8 c2 fe fc ff       	call   f0100cbb <iscons>
f0130df9:	83 c4 10             	add    $0x10,%esp
f0130dfc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f0130dff:	e8 9e fe fc ff       	call   f0100ca2 <getchar>
f0130e04:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f0130e07:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0130e0b:	79 23                	jns    f0130e30 <atomic_readline+0x6c>
			if (c != -E_EOF)
f0130e0d:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f0130e11:	74 13                	je     f0130e26 <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f0130e13:	83 ec 08             	sub    $0x8,%esp
f0130e16:	ff 75 ec             	pushl  -0x14(%ebp)
f0130e19:	68 33 d2 13 f0       	push   $0xf013d233
f0130e1e:	e8 eb fe fc ff       	call   f0100d0e <cprintf>
f0130e23:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f0130e26:	e8 0d bf fd ff       	call   f010cd38 <sys_enable_interrupt>
			return;
f0130e2b:	e9 9a 00 00 00       	jmp    f0130eca <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f0130e30:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f0130e34:	7e 34                	jle    f0130e6a <atomic_readline+0xa6>
f0130e36:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f0130e3d:	7f 2b                	jg     f0130e6a <atomic_readline+0xa6>
			if (echoing)
f0130e3f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130e43:	74 0e                	je     f0130e53 <atomic_readline+0x8f>
				cputchar(c);
f0130e45:	83 ec 0c             	sub    $0xc,%esp
f0130e48:	ff 75 ec             	pushl  -0x14(%ebp)
f0130e4b:	e8 3b fe fc ff       	call   f0100c8b <cputchar>
f0130e50:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0130e53:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130e56:	8d 50 01             	lea    0x1(%eax),%edx
f0130e59:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0130e5c:	89 c2                	mov    %eax,%edx
f0130e5e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130e61:	01 d0                	add    %edx,%eax
f0130e63:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0130e66:	88 10                	mov    %dl,(%eax)
f0130e68:	eb 5b                	jmp    f0130ec5 <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f0130e6a:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f0130e6e:	75 1f                	jne    f0130e8f <atomic_readline+0xcb>
f0130e70:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0130e74:	7e 19                	jle    f0130e8f <atomic_readline+0xcb>
			if (echoing)
f0130e76:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130e7a:	74 0e                	je     f0130e8a <atomic_readline+0xc6>
				cputchar(c);
f0130e7c:	83 ec 0c             	sub    $0xc,%esp
f0130e7f:	ff 75 ec             	pushl  -0x14(%ebp)
f0130e82:	e8 04 fe fc ff       	call   f0100c8b <cputchar>
f0130e87:	83 c4 10             	add    $0x10,%esp
			i--;
f0130e8a:	ff 4d f4             	decl   -0xc(%ebp)
f0130e8d:	eb 36                	jmp    f0130ec5 <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f0130e8f:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f0130e93:	74 0a                	je     f0130e9f <atomic_readline+0xdb>
f0130e95:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f0130e99:	0f 85 60 ff ff ff    	jne    f0130dff <atomic_readline+0x3b>
			if (echoing)
f0130e9f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130ea3:	74 0e                	je     f0130eb3 <atomic_readline+0xef>
				cputchar(c);
f0130ea5:	83 ec 0c             	sub    $0xc,%esp
f0130ea8:	ff 75 ec             	pushl  -0x14(%ebp)
f0130eab:	e8 db fd fc ff       	call   f0100c8b <cputchar>
f0130eb0:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f0130eb3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130eb6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130eb9:	01 d0                	add    %edx,%eax
f0130ebb:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f0130ebe:	e8 75 be fd ff       	call   f010cd38 <sys_enable_interrupt>
			return;
f0130ec3:	eb 05                	jmp    f0130eca <atomic_readline+0x106>
		}
	}
f0130ec5:	e9 35 ff ff ff       	jmp    f0130dff <atomic_readline+0x3b>
}
f0130eca:	c9                   	leave  
f0130ecb:	c3                   	ret    

f0130ecc <strlen>:

#include <inc/string.h>

int
strlen(const char *s)
{
f0130ecc:	55                   	push   %ebp
f0130ecd:	89 e5                	mov    %esp,%ebp
f0130ecf:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f0130ed2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0130ed9:	eb 06                	jmp    f0130ee1 <strlen+0x15>
		n++;
f0130edb:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f0130ede:	ff 45 08             	incl   0x8(%ebp)
f0130ee1:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ee4:	8a 00                	mov    (%eax),%al
f0130ee6:	84 c0                	test   %al,%al
f0130ee8:	75 f1                	jne    f0130edb <strlen+0xf>
		n++;
	return n;
f0130eea:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0130eed:	c9                   	leave  
f0130eee:	c3                   	ret    

f0130eef <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f0130eef:	55                   	push   %ebp
f0130ef0:	89 e5                	mov    %esp,%ebp
f0130ef2:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f0130ef5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0130efc:	eb 09                	jmp    f0130f07 <strnlen+0x18>
		n++;
f0130efe:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f0130f01:	ff 45 08             	incl   0x8(%ebp)
f0130f04:	ff 4d 0c             	decl   0xc(%ebp)
f0130f07:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130f0b:	74 09                	je     f0130f16 <strnlen+0x27>
f0130f0d:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f10:	8a 00                	mov    (%eax),%al
f0130f12:	84 c0                	test   %al,%al
f0130f14:	75 e8                	jne    f0130efe <strnlen+0xf>
		n++;
	return n;
f0130f16:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0130f19:	c9                   	leave  
f0130f1a:	c3                   	ret    

f0130f1b <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f0130f1b:	55                   	push   %ebp
f0130f1c:	89 e5                	mov    %esp,%ebp
f0130f1e:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f0130f21:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f24:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f0130f27:	90                   	nop
f0130f28:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f2b:	8d 50 01             	lea    0x1(%eax),%edx
f0130f2e:	89 55 08             	mov    %edx,0x8(%ebp)
f0130f31:	8b 55 0c             	mov    0xc(%ebp),%edx
f0130f34:	8d 4a 01             	lea    0x1(%edx),%ecx
f0130f37:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0130f3a:	8a 12                	mov    (%edx),%dl
f0130f3c:	88 10                	mov    %dl,(%eax)
f0130f3e:	8a 00                	mov    (%eax),%al
f0130f40:	84 c0                	test   %al,%al
f0130f42:	75 e4                	jne    f0130f28 <strcpy+0xd>
		/* do nothing */;
	return ret;
f0130f44:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0130f47:	c9                   	leave  
f0130f48:	c3                   	ret    

f0130f49 <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f0130f49:	55                   	push   %ebp
f0130f4a:	89 e5                	mov    %esp,%ebp
f0130f4c:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f0130f4f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f52:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f0130f55:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0130f5c:	eb 1f                	jmp    f0130f7d <strncpy+0x34>
		*dst++ = *src;
f0130f5e:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f61:	8d 50 01             	lea    0x1(%eax),%edx
f0130f64:	89 55 08             	mov    %edx,0x8(%ebp)
f0130f67:	8b 55 0c             	mov    0xc(%ebp),%edx
f0130f6a:	8a 12                	mov    (%edx),%dl
f0130f6c:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f0130f6e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130f71:	8a 00                	mov    (%eax),%al
f0130f73:	84 c0                	test   %al,%al
f0130f75:	74 03                	je     f0130f7a <strncpy+0x31>
			src++;
f0130f77:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f0130f7a:	ff 45 fc             	incl   -0x4(%ebp)
f0130f7d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130f80:	3b 45 10             	cmp    0x10(%ebp),%eax
f0130f83:	72 d9                	jb     f0130f5e <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f0130f85:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0130f88:	c9                   	leave  
f0130f89:	c3                   	ret    

f0130f8a <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f0130f8a:	55                   	push   %ebp
f0130f8b:	89 e5                	mov    %esp,%ebp
f0130f8d:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f0130f90:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f93:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f0130f96:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130f9a:	74 30                	je     f0130fcc <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f0130f9c:	eb 16                	jmp    f0130fb4 <strlcpy+0x2a>
			*dst++ = *src++;
f0130f9e:	8b 45 08             	mov    0x8(%ebp),%eax
f0130fa1:	8d 50 01             	lea    0x1(%eax),%edx
f0130fa4:	89 55 08             	mov    %edx,0x8(%ebp)
f0130fa7:	8b 55 0c             	mov    0xc(%ebp),%edx
f0130faa:	8d 4a 01             	lea    0x1(%edx),%ecx
f0130fad:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0130fb0:	8a 12                	mov    (%edx),%dl
f0130fb2:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f0130fb4:	ff 4d 10             	decl   0x10(%ebp)
f0130fb7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130fbb:	74 09                	je     f0130fc6 <strlcpy+0x3c>
f0130fbd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130fc0:	8a 00                	mov    (%eax),%al
f0130fc2:	84 c0                	test   %al,%al
f0130fc4:	75 d8                	jne    f0130f9e <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f0130fc6:	8b 45 08             	mov    0x8(%ebp),%eax
f0130fc9:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f0130fcc:	8b 55 08             	mov    0x8(%ebp),%edx
f0130fcf:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130fd2:	29 c2                	sub    %eax,%edx
f0130fd4:	89 d0                	mov    %edx,%eax
}
f0130fd6:	c9                   	leave  
f0130fd7:	c3                   	ret    

f0130fd8 <strcmp>:

int
strcmp(const char *p, const char *q)
{
f0130fd8:	55                   	push   %ebp
f0130fd9:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f0130fdb:	eb 06                	jmp    f0130fe3 <strcmp+0xb>
		p++, q++;
f0130fdd:	ff 45 08             	incl   0x8(%ebp)
f0130fe0:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f0130fe3:	8b 45 08             	mov    0x8(%ebp),%eax
f0130fe6:	8a 00                	mov    (%eax),%al
f0130fe8:	84 c0                	test   %al,%al
f0130fea:	74 0e                	je     f0130ffa <strcmp+0x22>
f0130fec:	8b 45 08             	mov    0x8(%ebp),%eax
f0130fef:	8a 10                	mov    (%eax),%dl
f0130ff1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130ff4:	8a 00                	mov    (%eax),%al
f0130ff6:	38 c2                	cmp    %al,%dl
f0130ff8:	74 e3                	je     f0130fdd <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f0130ffa:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ffd:	8a 00                	mov    (%eax),%al
f0130fff:	0f b6 d0             	movzbl %al,%edx
f0131002:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131005:	8a 00                	mov    (%eax),%al
f0131007:	0f b6 c0             	movzbl %al,%eax
f013100a:	29 c2                	sub    %eax,%edx
f013100c:	89 d0                	mov    %edx,%eax
}
f013100e:	5d                   	pop    %ebp
f013100f:	c3                   	ret    

f0131010 <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f0131010:	55                   	push   %ebp
f0131011:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f0131013:	eb 09                	jmp    f013101e <strncmp+0xe>
		n--, p++, q++;
f0131015:	ff 4d 10             	decl   0x10(%ebp)
f0131018:	ff 45 08             	incl   0x8(%ebp)
f013101b:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f013101e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131022:	74 17                	je     f013103b <strncmp+0x2b>
f0131024:	8b 45 08             	mov    0x8(%ebp),%eax
f0131027:	8a 00                	mov    (%eax),%al
f0131029:	84 c0                	test   %al,%al
f013102b:	74 0e                	je     f013103b <strncmp+0x2b>
f013102d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131030:	8a 10                	mov    (%eax),%dl
f0131032:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131035:	8a 00                	mov    (%eax),%al
f0131037:	38 c2                	cmp    %al,%dl
f0131039:	74 da                	je     f0131015 <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f013103b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f013103f:	75 07                	jne    f0131048 <strncmp+0x38>
		return 0;
f0131041:	b8 00 00 00 00       	mov    $0x0,%eax
f0131046:	eb 14                	jmp    f013105c <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f0131048:	8b 45 08             	mov    0x8(%ebp),%eax
f013104b:	8a 00                	mov    (%eax),%al
f013104d:	0f b6 d0             	movzbl %al,%edx
f0131050:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131053:	8a 00                	mov    (%eax),%al
f0131055:	0f b6 c0             	movzbl %al,%eax
f0131058:	29 c2                	sub    %eax,%edx
f013105a:	89 d0                	mov    %edx,%eax
}
f013105c:	5d                   	pop    %ebp
f013105d:	c3                   	ret    

f013105e <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f013105e:	55                   	push   %ebp
f013105f:	89 e5                	mov    %esp,%ebp
f0131061:	83 ec 04             	sub    $0x4,%esp
f0131064:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131067:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f013106a:	eb 12                	jmp    f013107e <strchr+0x20>
		if (*s == c)
f013106c:	8b 45 08             	mov    0x8(%ebp),%eax
f013106f:	8a 00                	mov    (%eax),%al
f0131071:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0131074:	75 05                	jne    f013107b <strchr+0x1d>
			return (char *) s;
f0131076:	8b 45 08             	mov    0x8(%ebp),%eax
f0131079:	eb 11                	jmp    f013108c <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f013107b:	ff 45 08             	incl   0x8(%ebp)
f013107e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131081:	8a 00                	mov    (%eax),%al
f0131083:	84 c0                	test   %al,%al
f0131085:	75 e5                	jne    f013106c <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f0131087:	b8 00 00 00 00       	mov    $0x0,%eax
}
f013108c:	c9                   	leave  
f013108d:	c3                   	ret    

f013108e <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f013108e:	55                   	push   %ebp
f013108f:	89 e5                	mov    %esp,%ebp
f0131091:	83 ec 04             	sub    $0x4,%esp
f0131094:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131097:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f013109a:	eb 0d                	jmp    f01310a9 <strfind+0x1b>
		if (*s == c)
f013109c:	8b 45 08             	mov    0x8(%ebp),%eax
f013109f:	8a 00                	mov    (%eax),%al
f01310a1:	3a 45 fc             	cmp    -0x4(%ebp),%al
f01310a4:	74 0e                	je     f01310b4 <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f01310a6:	ff 45 08             	incl   0x8(%ebp)
f01310a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01310ac:	8a 00                	mov    (%eax),%al
f01310ae:	84 c0                	test   %al,%al
f01310b0:	75 ea                	jne    f013109c <strfind+0xe>
f01310b2:	eb 01                	jmp    f01310b5 <strfind+0x27>
		if (*s == c)
			break;
f01310b4:	90                   	nop
	return (char *) s;
f01310b5:	8b 45 08             	mov    0x8(%ebp),%eax
}
f01310b8:	c9                   	leave  
f01310b9:	c3                   	ret    

f01310ba <memset>:


void *
memset(void *v, int c, uint32 n)
{
f01310ba:	55                   	push   %ebp
f01310bb:	89 e5                	mov    %esp,%ebp
f01310bd:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f01310c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01310c3:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f01310c6:	8b 45 10             	mov    0x10(%ebp),%eax
f01310c9:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f01310cc:	eb 0e                	jmp    f01310dc <memset+0x22>
		*p++ = c;
f01310ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01310d1:	8d 50 01             	lea    0x1(%eax),%edx
f01310d4:	89 55 fc             	mov    %edx,-0x4(%ebp)
f01310d7:	8b 55 0c             	mov    0xc(%ebp),%edx
f01310da:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f01310dc:	ff 4d f8             	decl   -0x8(%ebp)
f01310df:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f01310e3:	79 e9                	jns    f01310ce <memset+0x14>
		*p++ = c;

	return v;
f01310e5:	8b 45 08             	mov    0x8(%ebp),%eax
}
f01310e8:	c9                   	leave  
f01310e9:	c3                   	ret    

f01310ea <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f01310ea:	55                   	push   %ebp
f01310eb:	89 e5                	mov    %esp,%ebp
f01310ed:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f01310f0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01310f3:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f01310f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01310f9:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f01310fc:	eb 16                	jmp    f0131114 <memcpy+0x2a>
		*d++ = *s++;
f01310fe:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131101:	8d 50 01             	lea    0x1(%eax),%edx
f0131104:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0131107:	8b 55 fc             	mov    -0x4(%ebp),%edx
f013110a:	8d 4a 01             	lea    0x1(%edx),%ecx
f013110d:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f0131110:	8a 12                	mov    (%edx),%dl
f0131112:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f0131114:	8b 45 10             	mov    0x10(%ebp),%eax
f0131117:	8d 50 ff             	lea    -0x1(%eax),%edx
f013111a:	89 55 10             	mov    %edx,0x10(%ebp)
f013111d:	85 c0                	test   %eax,%eax
f013111f:	75 dd                	jne    f01310fe <memcpy+0x14>
		*d++ = *s++;

	return dst;
f0131121:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131124:	c9                   	leave  
f0131125:	c3                   	ret    

f0131126 <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f0131126:	55                   	push   %ebp
f0131127:	89 e5                	mov    %esp,%ebp
f0131129:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f013112c:	8b 45 0c             	mov    0xc(%ebp),%eax
f013112f:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0131132:	8b 45 08             	mov    0x8(%ebp),%eax
f0131135:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f0131138:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013113b:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f013113e:	73 50                	jae    f0131190 <memmove+0x6a>
f0131140:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131143:	8b 45 10             	mov    0x10(%ebp),%eax
f0131146:	01 d0                	add    %edx,%eax
f0131148:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f013114b:	76 43                	jbe    f0131190 <memmove+0x6a>
		s += n;
f013114d:	8b 45 10             	mov    0x10(%ebp),%eax
f0131150:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f0131153:	8b 45 10             	mov    0x10(%ebp),%eax
f0131156:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f0131159:	eb 10                	jmp    f013116b <memmove+0x45>
			*--d = *--s;
f013115b:	ff 4d f8             	decl   -0x8(%ebp)
f013115e:	ff 4d fc             	decl   -0x4(%ebp)
f0131161:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131164:	8a 10                	mov    (%eax),%dl
f0131166:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131169:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f013116b:	8b 45 10             	mov    0x10(%ebp),%eax
f013116e:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131171:	89 55 10             	mov    %edx,0x10(%ebp)
f0131174:	85 c0                	test   %eax,%eax
f0131176:	75 e3                	jne    f013115b <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f0131178:	eb 23                	jmp    f013119d <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f013117a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013117d:	8d 50 01             	lea    0x1(%eax),%edx
f0131180:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0131183:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131186:	8d 4a 01             	lea    0x1(%edx),%ecx
f0131189:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f013118c:	8a 12                	mov    (%edx),%dl
f013118e:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f0131190:	8b 45 10             	mov    0x10(%ebp),%eax
f0131193:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131196:	89 55 10             	mov    %edx,0x10(%ebp)
f0131199:	85 c0                	test   %eax,%eax
f013119b:	75 dd                	jne    f013117a <memmove+0x54>
			*d++ = *s++;

	return dst;
f013119d:	8b 45 08             	mov    0x8(%ebp),%eax
}
f01311a0:	c9                   	leave  
f01311a1:	c3                   	ret    

f01311a2 <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f01311a2:	55                   	push   %ebp
f01311a3:	89 e5                	mov    %esp,%ebp
f01311a5:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f01311a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01311ab:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f01311ae:	8b 45 0c             	mov    0xc(%ebp),%eax
f01311b1:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f01311b4:	eb 2a                	jmp    f01311e0 <memcmp+0x3e>
		if (*s1 != *s2)
f01311b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01311b9:	8a 10                	mov    (%eax),%dl
f01311bb:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01311be:	8a 00                	mov    (%eax),%al
f01311c0:	38 c2                	cmp    %al,%dl
f01311c2:	74 16                	je     f01311da <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f01311c4:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01311c7:	8a 00                	mov    (%eax),%al
f01311c9:	0f b6 d0             	movzbl %al,%edx
f01311cc:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01311cf:	8a 00                	mov    (%eax),%al
f01311d1:	0f b6 c0             	movzbl %al,%eax
f01311d4:	29 c2                	sub    %eax,%edx
f01311d6:	89 d0                	mov    %edx,%eax
f01311d8:	eb 18                	jmp    f01311f2 <memcmp+0x50>
		s1++, s2++;
f01311da:	ff 45 fc             	incl   -0x4(%ebp)
f01311dd:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f01311e0:	8b 45 10             	mov    0x10(%ebp),%eax
f01311e3:	8d 50 ff             	lea    -0x1(%eax),%edx
f01311e6:	89 55 10             	mov    %edx,0x10(%ebp)
f01311e9:	85 c0                	test   %eax,%eax
f01311eb:	75 c9                	jne    f01311b6 <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f01311ed:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01311f2:	c9                   	leave  
f01311f3:	c3                   	ret    

f01311f4 <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f01311f4:	55                   	push   %ebp
f01311f5:	89 e5                	mov    %esp,%ebp
f01311f7:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f01311fa:	8b 55 08             	mov    0x8(%ebp),%edx
f01311fd:	8b 45 10             	mov    0x10(%ebp),%eax
f0131200:	01 d0                	add    %edx,%eax
f0131202:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f0131205:	eb 15                	jmp    f013121c <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f0131207:	8b 45 08             	mov    0x8(%ebp),%eax
f013120a:	8a 00                	mov    (%eax),%al
f013120c:	0f b6 d0             	movzbl %al,%edx
f013120f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131212:	0f b6 c0             	movzbl %al,%eax
f0131215:	39 c2                	cmp    %eax,%edx
f0131217:	74 0d                	je     f0131226 <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f0131219:	ff 45 08             	incl   0x8(%ebp)
f013121c:	8b 45 08             	mov    0x8(%ebp),%eax
f013121f:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f0131222:	72 e3                	jb     f0131207 <memfind+0x13>
f0131224:	eb 01                	jmp    f0131227 <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f0131226:	90                   	nop
	return (void *) s;
f0131227:	8b 45 08             	mov    0x8(%ebp),%eax
}
f013122a:	c9                   	leave  
f013122b:	c3                   	ret    

f013122c <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f013122c:	55                   	push   %ebp
f013122d:	89 e5                	mov    %esp,%ebp
f013122f:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f0131232:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f0131239:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0131240:	eb 03                	jmp    f0131245 <strtol+0x19>
		s++;
f0131242:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0131245:	8b 45 08             	mov    0x8(%ebp),%eax
f0131248:	8a 00                	mov    (%eax),%al
f013124a:	3c 20                	cmp    $0x20,%al
f013124c:	74 f4                	je     f0131242 <strtol+0x16>
f013124e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131251:	8a 00                	mov    (%eax),%al
f0131253:	3c 09                	cmp    $0x9,%al
f0131255:	74 eb                	je     f0131242 <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f0131257:	8b 45 08             	mov    0x8(%ebp),%eax
f013125a:	8a 00                	mov    (%eax),%al
f013125c:	3c 2b                	cmp    $0x2b,%al
f013125e:	75 05                	jne    f0131265 <strtol+0x39>
		s++;
f0131260:	ff 45 08             	incl   0x8(%ebp)
f0131263:	eb 13                	jmp    f0131278 <strtol+0x4c>
	else if (*s == '-')
f0131265:	8b 45 08             	mov    0x8(%ebp),%eax
f0131268:	8a 00                	mov    (%eax),%al
f013126a:	3c 2d                	cmp    $0x2d,%al
f013126c:	75 0a                	jne    f0131278 <strtol+0x4c>
		s++, neg = 1;
f013126e:	ff 45 08             	incl   0x8(%ebp)
f0131271:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f0131278:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f013127c:	74 06                	je     f0131284 <strtol+0x58>
f013127e:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f0131282:	75 20                	jne    f01312a4 <strtol+0x78>
f0131284:	8b 45 08             	mov    0x8(%ebp),%eax
f0131287:	8a 00                	mov    (%eax),%al
f0131289:	3c 30                	cmp    $0x30,%al
f013128b:	75 17                	jne    f01312a4 <strtol+0x78>
f013128d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131290:	40                   	inc    %eax
f0131291:	8a 00                	mov    (%eax),%al
f0131293:	3c 78                	cmp    $0x78,%al
f0131295:	75 0d                	jne    f01312a4 <strtol+0x78>
		s += 2, base = 16;
f0131297:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f013129b:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f01312a2:	eb 28                	jmp    f01312cc <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f01312a4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01312a8:	75 15                	jne    f01312bf <strtol+0x93>
f01312aa:	8b 45 08             	mov    0x8(%ebp),%eax
f01312ad:	8a 00                	mov    (%eax),%al
f01312af:	3c 30                	cmp    $0x30,%al
f01312b1:	75 0c                	jne    f01312bf <strtol+0x93>
		s++, base = 8;
f01312b3:	ff 45 08             	incl   0x8(%ebp)
f01312b6:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f01312bd:	eb 0d                	jmp    f01312cc <strtol+0xa0>
	else if (base == 0)
f01312bf:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01312c3:	75 07                	jne    f01312cc <strtol+0xa0>
		base = 10;
f01312c5:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f01312cc:	8b 45 08             	mov    0x8(%ebp),%eax
f01312cf:	8a 00                	mov    (%eax),%al
f01312d1:	3c 2f                	cmp    $0x2f,%al
f01312d3:	7e 19                	jle    f01312ee <strtol+0xc2>
f01312d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01312d8:	8a 00                	mov    (%eax),%al
f01312da:	3c 39                	cmp    $0x39,%al
f01312dc:	7f 10                	jg     f01312ee <strtol+0xc2>
			dig = *s - '0';
f01312de:	8b 45 08             	mov    0x8(%ebp),%eax
f01312e1:	8a 00                	mov    (%eax),%al
f01312e3:	0f be c0             	movsbl %al,%eax
f01312e6:	83 e8 30             	sub    $0x30,%eax
f01312e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01312ec:	eb 42                	jmp    f0131330 <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f01312ee:	8b 45 08             	mov    0x8(%ebp),%eax
f01312f1:	8a 00                	mov    (%eax),%al
f01312f3:	3c 60                	cmp    $0x60,%al
f01312f5:	7e 19                	jle    f0131310 <strtol+0xe4>
f01312f7:	8b 45 08             	mov    0x8(%ebp),%eax
f01312fa:	8a 00                	mov    (%eax),%al
f01312fc:	3c 7a                	cmp    $0x7a,%al
f01312fe:	7f 10                	jg     f0131310 <strtol+0xe4>
			dig = *s - 'a' + 10;
f0131300:	8b 45 08             	mov    0x8(%ebp),%eax
f0131303:	8a 00                	mov    (%eax),%al
f0131305:	0f be c0             	movsbl %al,%eax
f0131308:	83 e8 57             	sub    $0x57,%eax
f013130b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013130e:	eb 20                	jmp    f0131330 <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f0131310:	8b 45 08             	mov    0x8(%ebp),%eax
f0131313:	8a 00                	mov    (%eax),%al
f0131315:	3c 40                	cmp    $0x40,%al
f0131317:	7e 39                	jle    f0131352 <strtol+0x126>
f0131319:	8b 45 08             	mov    0x8(%ebp),%eax
f013131c:	8a 00                	mov    (%eax),%al
f013131e:	3c 5a                	cmp    $0x5a,%al
f0131320:	7f 30                	jg     f0131352 <strtol+0x126>
			dig = *s - 'A' + 10;
f0131322:	8b 45 08             	mov    0x8(%ebp),%eax
f0131325:	8a 00                	mov    (%eax),%al
f0131327:	0f be c0             	movsbl %al,%eax
f013132a:	83 e8 37             	sub    $0x37,%eax
f013132d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f0131330:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131333:	3b 45 10             	cmp    0x10(%ebp),%eax
f0131336:	7d 19                	jge    f0131351 <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f0131338:	ff 45 08             	incl   0x8(%ebp)
f013133b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013133e:	0f af 45 10          	imul   0x10(%ebp),%eax
f0131342:	89 c2                	mov    %eax,%edx
f0131344:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131347:	01 d0                	add    %edx,%eax
f0131349:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f013134c:	e9 7b ff ff ff       	jmp    f01312cc <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f0131351:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f0131352:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0131356:	74 08                	je     f0131360 <strtol+0x134>
		*endptr = (char *) s;
f0131358:	8b 45 0c             	mov    0xc(%ebp),%eax
f013135b:	8b 55 08             	mov    0x8(%ebp),%edx
f013135e:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f0131360:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131364:	74 07                	je     f013136d <strtol+0x141>
f0131366:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131369:	f7 d8                	neg    %eax
f013136b:	eb 03                	jmp    f0131370 <strtol+0x144>
f013136d:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0131370:	c9                   	leave  
f0131371:	c3                   	ret    

f0131372 <ltostr>:

void
ltostr(long value, char *str)
{
f0131372:	55                   	push   %ebp
f0131373:	89 e5                	mov    %esp,%ebp
f0131375:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f0131378:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f013137f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f0131386:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013138a:	79 13                	jns    f013139f <ltostr+0x2d>
	{
		neg = 1;
f013138c:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f0131393:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131396:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f0131399:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f013139c:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f013139f:	8b 45 08             	mov    0x8(%ebp),%eax
f01313a2:	b9 0a 00 00 00       	mov    $0xa,%ecx
f01313a7:	99                   	cltd   
f01313a8:	f7 f9                	idiv   %ecx
f01313aa:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f01313ad:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01313b0:	8d 50 01             	lea    0x1(%eax),%edx
f01313b3:	89 55 f8             	mov    %edx,-0x8(%ebp)
f01313b6:	89 c2                	mov    %eax,%edx
f01313b8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01313bb:	01 d0                	add    %edx,%eax
f01313bd:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01313c0:	83 c2 30             	add    $0x30,%edx
f01313c3:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f01313c5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01313c8:	b8 67 66 66 66       	mov    $0x66666667,%eax
f01313cd:	f7 e9                	imul   %ecx
f01313cf:	c1 fa 02             	sar    $0x2,%edx
f01313d2:	89 c8                	mov    %ecx,%eax
f01313d4:	c1 f8 1f             	sar    $0x1f,%eax
f01313d7:	29 c2                	sub    %eax,%edx
f01313d9:	89 d0                	mov    %edx,%eax
f01313db:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f01313de:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01313e1:	b8 67 66 66 66       	mov    $0x66666667,%eax
f01313e6:	f7 e9                	imul   %ecx
f01313e8:	c1 fa 02             	sar    $0x2,%edx
f01313eb:	89 c8                	mov    %ecx,%eax
f01313ed:	c1 f8 1f             	sar    $0x1f,%eax
f01313f0:	29 c2                	sub    %eax,%edx
f01313f2:	89 d0                	mov    %edx,%eax
f01313f4:	c1 e0 02             	shl    $0x2,%eax
f01313f7:	01 d0                	add    %edx,%eax
f01313f9:	01 c0                	add    %eax,%eax
f01313fb:	29 c1                	sub    %eax,%ecx
f01313fd:	89 ca                	mov    %ecx,%edx
f01313ff:	85 d2                	test   %edx,%edx
f0131401:	75 9c                	jne    f013139f <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f0131403:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f013140a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013140d:	48                   	dec    %eax
f013140e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f0131411:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131415:	74 3d                	je     f0131454 <ltostr+0xe2>
		start = 1 ;
f0131417:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f013141e:	eb 34                	jmp    f0131454 <ltostr+0xe2>
	{
		char tmp = str[start] ;
f0131420:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131423:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131426:	01 d0                	add    %edx,%eax
f0131428:	8a 00                	mov    (%eax),%al
f013142a:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f013142d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131430:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131433:	01 c2                	add    %eax,%edx
f0131435:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0131438:	8b 45 0c             	mov    0xc(%ebp),%eax
f013143b:	01 c8                	add    %ecx,%eax
f013143d:	8a 00                	mov    (%eax),%al
f013143f:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f0131441:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131444:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131447:	01 c2                	add    %eax,%edx
f0131449:	8a 45 eb             	mov    -0x15(%ebp),%al
f013144c:	88 02                	mov    %al,(%edx)
		start++ ;
f013144e:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f0131451:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f0131454:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131457:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f013145a:	7c c4                	jl     f0131420 <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f013145c:	8b 55 f8             	mov    -0x8(%ebp),%edx
f013145f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131462:	01 d0                	add    %edx,%eax
f0131464:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f0131467:	90                   	nop
f0131468:	c9                   	leave  
f0131469:	c3                   	ret    

f013146a <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f013146a:	55                   	push   %ebp
f013146b:	89 e5                	mov    %esp,%ebp
f013146d:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f0131470:	ff 75 08             	pushl  0x8(%ebp)
f0131473:	e8 54 fa ff ff       	call   f0130ecc <strlen>
f0131478:	83 c4 04             	add    $0x4,%esp
f013147b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f013147e:	ff 75 0c             	pushl  0xc(%ebp)
f0131481:	e8 46 fa ff ff       	call   f0130ecc <strlen>
f0131486:	83 c4 04             	add    $0x4,%esp
f0131489:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f013148c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f0131493:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f013149a:	eb 17                	jmp    f01314b3 <strcconcat+0x49>
		final[s] = str1[s] ;
f013149c:	8b 55 fc             	mov    -0x4(%ebp),%edx
f013149f:	8b 45 10             	mov    0x10(%ebp),%eax
f01314a2:	01 c2                	add    %eax,%edx
f01314a4:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f01314a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01314aa:	01 c8                	add    %ecx,%eax
f01314ac:	8a 00                	mov    (%eax),%al
f01314ae:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f01314b0:	ff 45 fc             	incl   -0x4(%ebp)
f01314b3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01314b6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01314b9:	7c e1                	jl     f013149c <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f01314bb:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f01314c2:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f01314c9:	eb 1f                	jmp    f01314ea <strcconcat+0x80>
		final[s++] = str2[i] ;
f01314cb:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01314ce:	8d 50 01             	lea    0x1(%eax),%edx
f01314d1:	89 55 fc             	mov    %edx,-0x4(%ebp)
f01314d4:	89 c2                	mov    %eax,%edx
f01314d6:	8b 45 10             	mov    0x10(%ebp),%eax
f01314d9:	01 c2                	add    %eax,%edx
f01314db:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f01314de:	8b 45 0c             	mov    0xc(%ebp),%eax
f01314e1:	01 c8                	add    %ecx,%eax
f01314e3:	8a 00                	mov    (%eax),%al
f01314e5:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f01314e7:	ff 45 f8             	incl   -0x8(%ebp)
f01314ea:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01314ed:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01314f0:	7c d9                	jl     f01314cb <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f01314f2:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01314f5:	8b 45 10             	mov    0x10(%ebp),%eax
f01314f8:	01 d0                	add    %edx,%eax
f01314fa:	c6 00 00             	movb   $0x0,(%eax)
}
f01314fd:	90                   	nop
f01314fe:	c9                   	leave  
f01314ff:	c3                   	ret    

f0131500 <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f0131500:	55                   	push   %ebp
f0131501:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f0131503:	8b 45 14             	mov    0x14(%ebp),%eax
f0131506:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f013150c:	8b 45 14             	mov    0x14(%ebp),%eax
f013150f:	8b 00                	mov    (%eax),%eax
f0131511:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0131518:	8b 45 10             	mov    0x10(%ebp),%eax
f013151b:	01 d0                	add    %edx,%eax
f013151d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0131523:	eb 0c                	jmp    f0131531 <strsplit+0x31>
			*string++ = 0;
f0131525:	8b 45 08             	mov    0x8(%ebp),%eax
f0131528:	8d 50 01             	lea    0x1(%eax),%edx
f013152b:	89 55 08             	mov    %edx,0x8(%ebp)
f013152e:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0131531:	8b 45 08             	mov    0x8(%ebp),%eax
f0131534:	8a 00                	mov    (%eax),%al
f0131536:	84 c0                	test   %al,%al
f0131538:	74 18                	je     f0131552 <strsplit+0x52>
f013153a:	8b 45 08             	mov    0x8(%ebp),%eax
f013153d:	8a 00                	mov    (%eax),%al
f013153f:	0f be c0             	movsbl %al,%eax
f0131542:	50                   	push   %eax
f0131543:	ff 75 0c             	pushl  0xc(%ebp)
f0131546:	e8 13 fb ff ff       	call   f013105e <strchr>
f013154b:	83 c4 08             	add    $0x8,%esp
f013154e:	85 c0                	test   %eax,%eax
f0131550:	75 d3                	jne    f0131525 <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f0131552:	8b 45 08             	mov    0x8(%ebp),%eax
f0131555:	8a 00                	mov    (%eax),%al
f0131557:	84 c0                	test   %al,%al
f0131559:	74 5a                	je     f01315b5 <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f013155b:	8b 45 14             	mov    0x14(%ebp),%eax
f013155e:	8b 00                	mov    (%eax),%eax
f0131560:	83 f8 0f             	cmp    $0xf,%eax
f0131563:	75 07                	jne    f013156c <strsplit+0x6c>
		{
			return 0;
f0131565:	b8 00 00 00 00       	mov    $0x0,%eax
f013156a:	eb 66                	jmp    f01315d2 <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f013156c:	8b 45 14             	mov    0x14(%ebp),%eax
f013156f:	8b 00                	mov    (%eax),%eax
f0131571:	8d 48 01             	lea    0x1(%eax),%ecx
f0131574:	8b 55 14             	mov    0x14(%ebp),%edx
f0131577:	89 0a                	mov    %ecx,(%edx)
f0131579:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0131580:	8b 45 10             	mov    0x10(%ebp),%eax
f0131583:	01 c2                	add    %eax,%edx
f0131585:	8b 45 08             	mov    0x8(%ebp),%eax
f0131588:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f013158a:	eb 03                	jmp    f013158f <strsplit+0x8f>
			string++;
f013158c:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f013158f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131592:	8a 00                	mov    (%eax),%al
f0131594:	84 c0                	test   %al,%al
f0131596:	74 8b                	je     f0131523 <strsplit+0x23>
f0131598:	8b 45 08             	mov    0x8(%ebp),%eax
f013159b:	8a 00                	mov    (%eax),%al
f013159d:	0f be c0             	movsbl %al,%eax
f01315a0:	50                   	push   %eax
f01315a1:	ff 75 0c             	pushl  0xc(%ebp)
f01315a4:	e8 b5 fa ff ff       	call   f013105e <strchr>
f01315a9:	83 c4 08             	add    $0x8,%esp
f01315ac:	85 c0                	test   %eax,%eax
f01315ae:	74 dc                	je     f013158c <strsplit+0x8c>
			string++;
	}
f01315b0:	e9 6e ff ff ff       	jmp    f0131523 <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f01315b5:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f01315b6:	8b 45 14             	mov    0x14(%ebp),%eax
f01315b9:	8b 00                	mov    (%eax),%eax
f01315bb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01315c2:	8b 45 10             	mov    0x10(%ebp),%eax
f01315c5:	01 d0                	add    %edx,%eax
f01315c7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f01315cd:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01315d2:	c9                   	leave  
f01315d3:	c3                   	ret    

f01315d4 <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f01315d4:	55                   	push   %ebp
f01315d5:	89 e5                	mov    %esp,%ebp
f01315d7:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f01315da:	90                   	nop
f01315db:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01315e2:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01315e5:	89 c2                	mov    %eax,%edx
f01315e7:	ec                   	in     (%dx),%al
f01315e8:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f01315eb:	8a 45 f7             	mov    -0x9(%ebp),%al
f01315ee:	0f b6 c0             	movzbl %al,%eax
f01315f1:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01315f4:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01315f7:	25 c0 00 00 00       	and    $0xc0,%eax
f01315fc:	83 f8 40             	cmp    $0x40,%eax
f01315ff:	75 da                	jne    f01315db <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f0131601:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131605:	74 11                	je     f0131618 <ide_wait_ready+0x44>
f0131607:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013160a:	83 e0 21             	and    $0x21,%eax
f013160d:	85 c0                	test   %eax,%eax
f013160f:	74 07                	je     f0131618 <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f0131611:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0131616:	eb 05                	jmp    f013161d <ide_wait_ready+0x49>
	}
	return 0;
f0131618:	b8 00 00 00 00       	mov    $0x0,%eax
}
f013161d:	c9                   	leave  
f013161e:	c3                   	ret    

f013161f <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f013161f:	55                   	push   %ebp
f0131620:	89 e5                	mov    %esp,%ebp
f0131622:	57                   	push   %edi
f0131623:	53                   	push   %ebx
f0131624:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f0131627:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f013162e:	76 16                	jbe    f0131646 <ide_read+0x27>
f0131630:	68 43 d2 13 f0       	push   $0xf013d243
f0131635:	68 50 d2 13 f0       	push   $0xf013d250
f013163a:	6a 25                	push   $0x25
f013163c:	68 65 d2 13 f0       	push   $0xf013d265
f0131641:	e8 bf eb fc ff       	call   f0100205 <_panic>

	ide_wait_ready(0);
f0131646:	83 ec 0c             	sub    $0xc,%esp
f0131649:	6a 00                	push   $0x0
f013164b:	e8 84 ff ff ff       	call   f01315d4 <ide_wait_ready>
f0131650:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f0131653:	8b 45 10             	mov    0x10(%ebp),%eax
f0131656:	0f b6 c0             	movzbl %al,%eax
f0131659:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0131660:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0131663:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0131666:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131669:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f013166a:	8b 45 08             	mov    0x8(%ebp),%eax
f013166d:	0f b6 c0             	movzbl %al,%eax
f0131670:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0131677:	88 45 d3             	mov    %al,-0x2d(%ebp)
f013167a:	8a 45 d3             	mov    -0x2d(%ebp),%al
f013167d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131680:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f0131681:	8b 45 08             	mov    0x8(%ebp),%eax
f0131684:	c1 e8 08             	shr    $0x8,%eax
f0131687:	0f b6 c0             	movzbl %al,%eax
f013168a:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f0131691:	88 45 d4             	mov    %al,-0x2c(%ebp)
f0131694:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0131697:	8b 55 e8             	mov    -0x18(%ebp),%edx
f013169a:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f013169b:	8b 45 08             	mov    0x8(%ebp),%eax
f013169e:	c1 e8 10             	shr    $0x10,%eax
f01316a1:	0f b6 c0             	movzbl %al,%eax
f01316a4:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f01316ab:	88 45 d5             	mov    %al,-0x2b(%ebp)
f01316ae:	8a 45 d5             	mov    -0x2b(%ebp),%al
f01316b1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01316b4:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f01316b5:	a1 ac 5c 87 f0       	mov    0xf0875cac,%eax
f01316ba:	83 e0 01             	and    $0x1,%eax
f01316bd:	c1 e0 04             	shl    $0x4,%eax
f01316c0:	88 c2                	mov    %al,%dl
f01316c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01316c5:	c1 e8 18             	shr    $0x18,%eax
f01316c8:	83 e0 0f             	and    $0xf,%eax
f01316cb:	09 d0                	or     %edx,%eax
f01316cd:	83 c8 e0             	or     $0xffffffe0,%eax
f01316d0:	0f b6 c0             	movzbl %al,%eax
f01316d3:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f01316da:	88 45 d6             	mov    %al,-0x2a(%ebp)
f01316dd:	8a 45 d6             	mov    -0x2a(%ebp),%al
f01316e0:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01316e3:	ee                   	out    %al,(%dx)
f01316e4:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f01316eb:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f01316ef:	8a 45 d7             	mov    -0x29(%ebp),%al
f01316f2:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01316f5:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f01316f6:	eb 55                	jmp    f013174d <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f01316f8:	83 ec 0c             	sub    $0xc,%esp
f01316fb:	6a 01                	push   $0x1
f01316fd:	e8 d2 fe ff ff       	call   f01315d4 <ide_wait_ready>
f0131702:	83 c4 10             	add    $0x10,%esp
f0131705:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0131708:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f013170c:	79 05                	jns    f0131713 <ide_read+0xf4>
			return r;
f013170e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0131711:	eb 45                	jmp    f0131758 <ide_read+0x139>
f0131713:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f013171a:	8b 45 0c             	mov    0xc(%ebp),%eax
f013171d:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0131720:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f0131727:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013172a:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f013172d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0131730:	89 cb                	mov    %ecx,%ebx
f0131732:	89 df                	mov    %ebx,%edi
f0131734:	89 c1                	mov    %eax,%ecx
f0131736:	fc                   	cld    
f0131737:	f2 6d                	repnz insl (%dx),%es:(%edi)
f0131739:	89 c8                	mov    %ecx,%eax
f013173b:	89 fb                	mov    %edi,%ebx
f013173d:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0131740:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0131743:	ff 4d 10             	decl   0x10(%ebp)
f0131746:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f013174d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131751:	75 a5                	jne    f01316f8 <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f0131753:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131758:	8d 65 f8             	lea    -0x8(%ebp),%esp
f013175b:	5b                   	pop    %ebx
f013175c:	5f                   	pop    %edi
f013175d:	5d                   	pop    %ebp
f013175e:	c3                   	ret    

f013175f <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f013175f:	55                   	push   %ebp
f0131760:	89 e5                	mov    %esp,%ebp
f0131762:	56                   	push   %esi
f0131763:	53                   	push   %ebx
f0131764:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f0131767:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f013176e:	76 16                	jbe    f0131786 <ide_write+0x27>
f0131770:	68 43 d2 13 f0       	push   $0xf013d243
f0131775:	68 50 d2 13 f0       	push   $0xf013d250
f013177a:	6a 3e                	push   $0x3e
f013177c:	68 65 d2 13 f0       	push   $0xf013d265
f0131781:	e8 7f ea fc ff       	call   f0100205 <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f0131786:	83 ec 0c             	sub    $0xc,%esp
f0131789:	6a 00                	push   $0x0
f013178b:	e8 44 fe ff ff       	call   f01315d4 <ide_wait_ready>
f0131790:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f0131793:	8b 45 10             	mov    0x10(%ebp),%eax
f0131796:	0f b6 c0             	movzbl %al,%eax
f0131799:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f01317a0:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01317a3:	8a 45 d2             	mov    -0x2e(%ebp),%al
f01317a6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01317a9:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f01317aa:	8b 45 08             	mov    0x8(%ebp),%eax
f01317ad:	0f b6 c0             	movzbl %al,%eax
f01317b0:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f01317b7:	88 45 d3             	mov    %al,-0x2d(%ebp)
f01317ba:	8a 45 d3             	mov    -0x2d(%ebp),%al
f01317bd:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01317c0:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f01317c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01317c4:	c1 e8 08             	shr    $0x8,%eax
f01317c7:	0f b6 c0             	movzbl %al,%eax
f01317ca:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f01317d1:	88 45 d4             	mov    %al,-0x2c(%ebp)
f01317d4:	8a 45 d4             	mov    -0x2c(%ebp),%al
f01317d7:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01317da:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f01317db:	8b 45 08             	mov    0x8(%ebp),%eax
f01317de:	c1 e8 10             	shr    $0x10,%eax
f01317e1:	0f b6 c0             	movzbl %al,%eax
f01317e4:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f01317eb:	88 45 d5             	mov    %al,-0x2b(%ebp)
f01317ee:	8a 45 d5             	mov    -0x2b(%ebp),%al
f01317f1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01317f4:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f01317f5:	a1 ac 5c 87 f0       	mov    0xf0875cac,%eax
f01317fa:	83 e0 01             	and    $0x1,%eax
f01317fd:	c1 e0 04             	shl    $0x4,%eax
f0131800:	88 c2                	mov    %al,%dl
f0131802:	8b 45 08             	mov    0x8(%ebp),%eax
f0131805:	c1 e8 18             	shr    $0x18,%eax
f0131808:	83 e0 0f             	and    $0xf,%eax
f013180b:	09 d0                	or     %edx,%eax
f013180d:	83 c8 e0             	or     $0xffffffe0,%eax
f0131810:	0f b6 c0             	movzbl %al,%eax
f0131813:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f013181a:	88 45 d6             	mov    %al,-0x2a(%ebp)
f013181d:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0131820:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0131823:	ee                   	out    %al,(%dx)
f0131824:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f013182b:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f013182f:	8a 45 d7             	mov    -0x29(%ebp),%al
f0131832:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0131835:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0131836:	eb 55                	jmp    f013188d <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0131838:	83 ec 0c             	sub    $0xc,%esp
f013183b:	6a 01                	push   $0x1
f013183d:	e8 92 fd ff ff       	call   f01315d4 <ide_wait_ready>
f0131842:	83 c4 10             	add    $0x10,%esp
f0131845:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0131848:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f013184c:	79 05                	jns    f0131853 <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f013184e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0131851:	eb 45                	jmp    f0131898 <ide_write+0x139>
f0131853:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f013185a:	8b 45 0c             	mov    0xc(%ebp),%eax
f013185d:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0131860:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f0131867:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013186a:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f013186d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0131870:	89 cb                	mov    %ecx,%ebx
f0131872:	89 de                	mov    %ebx,%esi
f0131874:	89 c1                	mov    %eax,%ecx
f0131876:	fc                   	cld    
f0131877:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f0131879:	89 c8                	mov    %ecx,%eax
f013187b:	89 f3                	mov    %esi,%ebx
f013187d:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0131880:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0131883:	ff 4d 10             	decl   0x10(%ebp)
f0131886:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f013188d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131891:	75 a5                	jne    f0131838 <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f0131893:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131898:	8d 65 f8             	lea    -0x8(%ebp),%esp
f013189b:	5b                   	pop    %ebx
f013189c:	5e                   	pop    %esi
f013189d:	5d                   	pop    %ebp
f013189e:	c3                   	ret    

f013189f <print_mem_block_lists>:
//===========================
// PRINT MEM BLOCK LISTS:
//===========================

void print_mem_block_lists()
{
f013189f:	55                   	push   %ebp
f01318a0:	89 e5                	mov    %esp,%ebp
f01318a2:	83 ec 18             	sub    $0x18,%esp
	cprintf("\n=========================================\n");
f01318a5:	83 ec 0c             	sub    $0xc,%esp
f01318a8:	68 70 d2 13 f0       	push   $0xf013d270
f01318ad:	e8 5c f4 fc ff       	call   f0100d0e <cprintf>
f01318b2:	83 c4 10             	add    $0x10,%esp
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
f01318b5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nFreeMemBlocksList:\n");
f01318bc:	83 ec 0c             	sub    $0xc,%esp
f01318bf:	68 9c d2 13 f0       	push   $0xf013d29c
f01318c4:	e8 45 f4 fc ff       	call   f0100d0e <cprintf>
f01318c9:	83 c4 10             	add    $0x10,%esp
	uint8 sorted = 1 ;
f01318cc:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &FreeMemBlocksList)
f01318d0:	a1 64 5d 87 f0       	mov    0xf0875d64,%eax
f01318d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01318d8:	eb 56                	jmp    f0131930 <print_mem_block_lists+0x91>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f01318da:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01318de:	74 1c                	je     f01318fc <print_mem_block_lists+0x5d>
f01318e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01318e3:	8b 50 08             	mov    0x8(%eax),%edx
f01318e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01318e9:	8b 48 08             	mov    0x8(%eax),%ecx
f01318ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01318ef:	8b 40 0c             	mov    0xc(%eax),%eax
f01318f2:	01 c8                	add    %ecx,%eax
f01318f4:	39 c2                	cmp    %eax,%edx
f01318f6:	73 04                	jae    f01318fc <print_mem_block_lists+0x5d>
			sorted = 0 ;
f01318f8:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f01318fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01318ff:	8b 50 08             	mov    0x8(%eax),%edx
f0131902:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131905:	8b 40 0c             	mov    0xc(%eax),%eax
f0131908:	01 c2                	add    %eax,%edx
f013190a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013190d:	8b 40 08             	mov    0x8(%eax),%eax
f0131910:	83 ec 04             	sub    $0x4,%esp
f0131913:	52                   	push   %edx
f0131914:	50                   	push   %eax
f0131915:	68 b1 d2 13 f0       	push   $0xf013d2b1
f013191a:	e8 ef f3 fc ff       	call   f0100d0e <cprintf>
f013191f:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f0131922:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131925:	89 45 f0             	mov    %eax,-0x10(%ebp)
	cprintf("\n=========================================\n");
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
	cprintf("\nFreeMemBlocksList:\n");
	uint8 sorted = 1 ;
	LIST_FOREACH(blk, &FreeMemBlocksList)
f0131928:	a1 6c 5d 87 f0       	mov    0xf0875d6c,%eax
f013192d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131930:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131934:	74 07                	je     f013193d <print_mem_block_lists+0x9e>
f0131936:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131939:	8b 00                	mov    (%eax),%eax
f013193b:	eb 05                	jmp    f0131942 <print_mem_block_lists+0xa3>
f013193d:	b8 00 00 00 00       	mov    $0x0,%eax
f0131942:	a3 6c 5d 87 f0       	mov    %eax,0xf0875d6c
f0131947:	a1 6c 5d 87 f0       	mov    0xf0875d6c,%eax
f013194c:	85 c0                	test   %eax,%eax
f013194e:	75 8a                	jne    f01318da <print_mem_block_lists+0x3b>
f0131950:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131954:	75 84                	jne    f01318da <print_mem_block_lists+0x3b>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;
f0131956:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f013195a:	75 10                	jne    f013196c <print_mem_block_lists+0xcd>
f013195c:	83 ec 0c             	sub    $0xc,%esp
f013195f:	68 c0 d2 13 f0       	push   $0xf013d2c0
f0131964:	e8 a5 f3 fc ff       	call   f0100d0e <cprintf>
f0131969:	83 c4 10             	add    $0x10,%esp

	lastBlk = NULL ;
f013196c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nAllocMemBlocksList:\n");
f0131973:	83 ec 0c             	sub    $0xc,%esp
f0131976:	68 e4 d2 13 f0       	push   $0xf013d2e4
f013197b:	e8 8e f3 fc ff       	call   f0100d0e <cprintf>
f0131980:	83 c4 10             	add    $0x10,%esp
	sorted = 1 ;
f0131983:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &AllocMemBlocksList)
f0131987:	a1 c8 5c 87 f0       	mov    0xf0875cc8,%eax
f013198c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013198f:	eb 56                	jmp    f01319e7 <print_mem_block_lists+0x148>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f0131991:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131995:	74 1c                	je     f01319b3 <print_mem_block_lists+0x114>
f0131997:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013199a:	8b 50 08             	mov    0x8(%eax),%edx
f013199d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01319a0:	8b 48 08             	mov    0x8(%eax),%ecx
f01319a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01319a6:	8b 40 0c             	mov    0xc(%eax),%eax
f01319a9:	01 c8                	add    %ecx,%eax
f01319ab:	39 c2                	cmp    %eax,%edx
f01319ad:	73 04                	jae    f01319b3 <print_mem_block_lists+0x114>
			sorted = 0 ;
f01319af:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f01319b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01319b6:	8b 50 08             	mov    0x8(%eax),%edx
f01319b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01319bc:	8b 40 0c             	mov    0xc(%eax),%eax
f01319bf:	01 c2                	add    %eax,%edx
f01319c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01319c4:	8b 40 08             	mov    0x8(%eax),%eax
f01319c7:	83 ec 04             	sub    $0x4,%esp
f01319ca:	52                   	push   %edx
f01319cb:	50                   	push   %eax
f01319cc:	68 b1 d2 13 f0       	push   $0xf013d2b1
f01319d1:	e8 38 f3 fc ff       	call   f0100d0e <cprintf>
f01319d6:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f01319d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01319dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;

	lastBlk = NULL ;
	cprintf("\nAllocMemBlocksList:\n");
	sorted = 1 ;
	LIST_FOREACH(blk, &AllocMemBlocksList)
f01319df:	a1 d0 5c 87 f0       	mov    0xf0875cd0,%eax
f01319e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01319e7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01319eb:	74 07                	je     f01319f4 <print_mem_block_lists+0x155>
f01319ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01319f0:	8b 00                	mov    (%eax),%eax
f01319f2:	eb 05                	jmp    f01319f9 <print_mem_block_lists+0x15a>
f01319f4:	b8 00 00 00 00       	mov    $0x0,%eax
f01319f9:	a3 d0 5c 87 f0       	mov    %eax,0xf0875cd0
f01319fe:	a1 d0 5c 87 f0       	mov    0xf0875cd0,%eax
f0131a03:	85 c0                	test   %eax,%eax
f0131a05:	75 8a                	jne    f0131991 <print_mem_block_lists+0xf2>
f0131a07:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131a0b:	75 84                	jne    f0131991 <print_mem_block_lists+0xf2>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nAllocMemBlocksList is NOT SORTED!!\n") ;
f0131a0d:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f0131a11:	75 10                	jne    f0131a23 <print_mem_block_lists+0x184>
f0131a13:	83 ec 0c             	sub    $0xc,%esp
f0131a16:	68 fc d2 13 f0       	push   $0xf013d2fc
f0131a1b:	e8 ee f2 fc ff       	call   f0100d0e <cprintf>
f0131a20:	83 c4 10             	add    $0x10,%esp
	cprintf("\n=========================================\n");
f0131a23:	83 ec 0c             	sub    $0xc,%esp
f0131a26:	68 70 d2 13 f0       	push   $0xf013d270
f0131a2b:	e8 de f2 fc ff       	call   f0100d0e <cprintf>
f0131a30:	83 c4 10             	add    $0x10,%esp

}
f0131a33:	90                   	nop
f0131a34:	c9                   	leave  
f0131a35:	c3                   	ret    

f0131a36 <initialize_MemBlocksList>:

//===============================
// [1] INITIALIZE AVAILABLE LIST:
//===============================
void initialize_MemBlocksList(uint32 numOfBlocks)
{
f0131a36:	55                   	push   %ebp
f0131a37:	89 e5                	mov    %esp,%ebp
f0131a39:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");
	LIST_INIT(&AvailableMemBlocksList);
f0131a3c:	c7 05 98 5d 87 f0 00 	movl   $0x0,0xf0875d98
f0131a43:	00 00 00 
f0131a46:	c7 05 9c 5d 87 f0 00 	movl   $0x0,0xf0875d9c
f0131a4d:	00 00 00 
f0131a50:	c7 05 a4 5d 87 f0 00 	movl   $0x0,0xf0875da4
f0131a57:	00 00 00 

	for(int y=0;y<numOfBlocks;y++)
f0131a5a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0131a61:	e9 9e 00 00 00       	jmp    f0131b04 <initialize_MemBlocksList+0xce>
	{
		LIST_INSERT_HEAD(&AvailableMemBlocksList, &(MemBlockNodes[y]));
f0131a66:	a1 d8 5c 87 f0       	mov    0xf0875cd8,%eax
f0131a6b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131a6e:	c1 e2 04             	shl    $0x4,%edx
f0131a71:	01 d0                	add    %edx,%eax
f0131a73:	85 c0                	test   %eax,%eax
f0131a75:	75 14                	jne    f0131a8b <initialize_MemBlocksList+0x55>
f0131a77:	83 ec 04             	sub    $0x4,%esp
f0131a7a:	68 24 d3 13 f0       	push   $0xf013d324
f0131a7f:	6a 46                	push   $0x46
f0131a81:	68 47 d3 13 f0       	push   $0xf013d347
f0131a86:	e8 7a e7 fc ff       	call   f0100205 <_panic>
f0131a8b:	a1 d8 5c 87 f0       	mov    0xf0875cd8,%eax
f0131a90:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131a93:	c1 e2 04             	shl    $0x4,%edx
f0131a96:	01 d0                	add    %edx,%eax
f0131a98:	8b 15 98 5d 87 f0    	mov    0xf0875d98,%edx
f0131a9e:	89 10                	mov    %edx,(%eax)
f0131aa0:	8b 00                	mov    (%eax),%eax
f0131aa2:	85 c0                	test   %eax,%eax
f0131aa4:	74 18                	je     f0131abe <initialize_MemBlocksList+0x88>
f0131aa6:	a1 98 5d 87 f0       	mov    0xf0875d98,%eax
f0131aab:	8b 15 d8 5c 87 f0    	mov    0xf0875cd8,%edx
f0131ab1:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0131ab4:	c1 e1 04             	shl    $0x4,%ecx
f0131ab7:	01 ca                	add    %ecx,%edx
f0131ab9:	89 50 04             	mov    %edx,0x4(%eax)
f0131abc:	eb 12                	jmp    f0131ad0 <initialize_MemBlocksList+0x9a>
f0131abe:	a1 d8 5c 87 f0       	mov    0xf0875cd8,%eax
f0131ac3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131ac6:	c1 e2 04             	shl    $0x4,%edx
f0131ac9:	01 d0                	add    %edx,%eax
f0131acb:	a3 9c 5d 87 f0       	mov    %eax,0xf0875d9c
f0131ad0:	a1 d8 5c 87 f0       	mov    0xf0875cd8,%eax
f0131ad5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131ad8:	c1 e2 04             	shl    $0x4,%edx
f0131adb:	01 d0                	add    %edx,%eax
f0131add:	a3 98 5d 87 f0       	mov    %eax,0xf0875d98
f0131ae2:	a1 d8 5c 87 f0       	mov    0xf0875cd8,%eax
f0131ae7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131aea:	c1 e2 04             	shl    $0x4,%edx
f0131aed:	01 d0                	add    %edx,%eax
f0131aef:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131af6:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f0131afb:	40                   	inc    %eax
f0131afc:	a3 a4 5d 87 f0       	mov    %eax,0xf0875da4
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");
	LIST_INIT(&AvailableMemBlocksList);

	for(int y=0;y<numOfBlocks;y++)
f0131b01:	ff 45 f4             	incl   -0xc(%ebp)
f0131b04:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b07:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131b0a:	0f 82 56 ff ff ff    	jb     f0131a66 <initialize_MemBlocksList+0x30>
	{
		LIST_INSERT_HEAD(&AvailableMemBlocksList, &(MemBlockNodes[y]));
	}
}
f0131b10:	90                   	nop
f0131b11:	c9                   	leave  
f0131b12:	c3                   	ret    

f0131b13 <find_block>:

//===============================
// [2] FIND BLOCK:
//===============================
struct MemBlock *find_block(struct MemBlock_List *blockList, uint32 va)
{
f0131b13:	55                   	push   %ebp
f0131b14:	89 e5                	mov    %esp,%ebp
f0131b16:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	//panic("find_block() is not implemented yet...!!");
	struct MemBlock *point;

	LIST_FOREACH(point,blockList)
f0131b19:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b1c:	8b 00                	mov    (%eax),%eax
f0131b1e:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0131b21:	eb 19                	jmp    f0131b3c <find_block+0x29>
	{
		if(va==point->sva)
f0131b23:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131b26:	8b 40 08             	mov    0x8(%eax),%eax
f0131b29:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0131b2c:	75 05                	jne    f0131b33 <find_block+0x20>
		   return point;
f0131b2e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131b31:	eb 36                	jmp    f0131b69 <find_block+0x56>
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	//panic("find_block() is not implemented yet...!!");
	struct MemBlock *point;

	LIST_FOREACH(point,blockList)
f0131b33:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b36:	8b 40 08             	mov    0x8(%eax),%eax
f0131b39:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0131b3c:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131b40:	74 07                	je     f0131b49 <find_block+0x36>
f0131b42:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131b45:	8b 00                	mov    (%eax),%eax
f0131b47:	eb 05                	jmp    f0131b4e <find_block+0x3b>
f0131b49:	b8 00 00 00 00       	mov    $0x0,%eax
f0131b4e:	8b 55 08             	mov    0x8(%ebp),%edx
f0131b51:	89 42 08             	mov    %eax,0x8(%edx)
f0131b54:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b57:	8b 40 08             	mov    0x8(%eax),%eax
f0131b5a:	85 c0                	test   %eax,%eax
f0131b5c:	75 c5                	jne    f0131b23 <find_block+0x10>
f0131b5e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131b62:	75 bf                	jne    f0131b23 <find_block+0x10>
	{
		if(va==point->sva)
		   return point;
	}
	return NULL;
f0131b64:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131b69:	c9                   	leave  
f0131b6a:	c3                   	ret    

f0131b6b <insert_sorted_allocList>:

//=========================================
// [3] INSERT BLOCK IN ALLOC LIST [SORTED]:
//=========================================
void insert_sorted_allocList(struct MemBlock *blockToInsert)
{
f0131b6b:	55                   	push   %ebp
f0131b6c:	89 e5                	mov    %esp,%ebp
f0131b6e:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_allocList
	// Write your code here, remove the panic and write your code
	//panic("insert_sorted_allocList() is not implemented yet...!!");
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
f0131b71:	a1 c8 5c 87 f0       	mov    0xf0875cc8,%eax
f0131b76:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;
f0131b79:	a1 cc 5c 87 f0       	mov    0xf0875ccc,%eax
f0131b7e:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
f0131b81:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131b84:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0131b87:	74 24                	je     f0131bad <insert_sorted_allocList+0x42>
f0131b89:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b8c:	8b 50 08             	mov    0x8(%eax),%edx
f0131b8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131b92:	8b 40 08             	mov    0x8(%eax),%eax
f0131b95:	39 c2                	cmp    %eax,%edx
f0131b97:	76 14                	jbe    f0131bad <insert_sorted_allocList+0x42>
f0131b99:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b9c:	8b 50 08             	mov    0x8(%eax),%edx
f0131b9f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131ba2:	8b 40 08             	mov    0x8(%eax),%eax
f0131ba5:	39 c2                	cmp    %eax,%edx
f0131ba7:	0f 82 60 01 00 00    	jb     f0131d0d <insert_sorted_allocList+0x1a2>
	{
		if(head == NULL )
f0131bad:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131bb1:	75 65                	jne    f0131c18 <insert_sorted_allocList+0xad>
		{
			LIST_INSERT_HEAD(&AllocMemBlocksList, blockToInsert);
f0131bb3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131bb7:	75 14                	jne    f0131bcd <insert_sorted_allocList+0x62>
f0131bb9:	83 ec 04             	sub    $0x4,%esp
f0131bbc:	68 24 d3 13 f0       	push   $0xf013d324
f0131bc1:	6a 6b                	push   $0x6b
f0131bc3:	68 47 d3 13 f0       	push   $0xf013d347
f0131bc8:	e8 38 e6 fc ff       	call   f0100205 <_panic>
f0131bcd:	8b 15 c8 5c 87 f0    	mov    0xf0875cc8,%edx
f0131bd3:	8b 45 08             	mov    0x8(%ebp),%eax
f0131bd6:	89 10                	mov    %edx,(%eax)
f0131bd8:	8b 45 08             	mov    0x8(%ebp),%eax
f0131bdb:	8b 00                	mov    (%eax),%eax
f0131bdd:	85 c0                	test   %eax,%eax
f0131bdf:	74 0d                	je     f0131bee <insert_sorted_allocList+0x83>
f0131be1:	a1 c8 5c 87 f0       	mov    0xf0875cc8,%eax
f0131be6:	8b 55 08             	mov    0x8(%ebp),%edx
f0131be9:	89 50 04             	mov    %edx,0x4(%eax)
f0131bec:	eb 08                	jmp    f0131bf6 <insert_sorted_allocList+0x8b>
f0131bee:	8b 45 08             	mov    0x8(%ebp),%eax
f0131bf1:	a3 cc 5c 87 f0       	mov    %eax,0xf0875ccc
f0131bf6:	8b 45 08             	mov    0x8(%ebp),%eax
f0131bf9:	a3 c8 5c 87 f0       	mov    %eax,0xf0875cc8
f0131bfe:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c01:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131c08:	a1 d4 5c 87 f0       	mov    0xf0875cd4,%eax
f0131c0d:	40                   	inc    %eax
f0131c0e:	a3 d4 5c 87 f0       	mov    %eax,0xf0875cd4
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0131c13:	e9 dc 01 00 00       	jmp    f0131df4 <insert_sorted_allocList+0x289>
		{
			LIST_INSERT_HEAD(&AllocMemBlocksList, blockToInsert);
		}
		else if (blockToInsert->sva <= head->sva)
f0131c18:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c1b:	8b 50 08             	mov    0x8(%eax),%edx
f0131c1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131c21:	8b 40 08             	mov    0x8(%eax),%eax
f0131c24:	39 c2                	cmp    %eax,%edx
f0131c26:	77 6c                	ja     f0131c94 <insert_sorted_allocList+0x129>
		{
			LIST_INSERT_BEFORE(&AllocMemBlocksList,head, blockToInsert);
f0131c28:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131c2c:	74 06                	je     f0131c34 <insert_sorted_allocList+0xc9>
f0131c2e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131c32:	75 14                	jne    f0131c48 <insert_sorted_allocList+0xdd>
f0131c34:	83 ec 04             	sub    $0x4,%esp
f0131c37:	68 60 d3 13 f0       	push   $0xf013d360
f0131c3c:	6a 6f                	push   $0x6f
f0131c3e:	68 47 d3 13 f0       	push   $0xf013d347
f0131c43:	e8 bd e5 fc ff       	call   f0100205 <_panic>
f0131c48:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131c4b:	8b 50 04             	mov    0x4(%eax),%edx
f0131c4e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c51:	89 50 04             	mov    %edx,0x4(%eax)
f0131c54:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c57:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131c5a:	89 10                	mov    %edx,(%eax)
f0131c5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131c5f:	8b 40 04             	mov    0x4(%eax),%eax
f0131c62:	85 c0                	test   %eax,%eax
f0131c64:	74 0d                	je     f0131c73 <insert_sorted_allocList+0x108>
f0131c66:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131c69:	8b 40 04             	mov    0x4(%eax),%eax
f0131c6c:	8b 55 08             	mov    0x8(%ebp),%edx
f0131c6f:	89 10                	mov    %edx,(%eax)
f0131c71:	eb 08                	jmp    f0131c7b <insert_sorted_allocList+0x110>
f0131c73:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c76:	a3 c8 5c 87 f0       	mov    %eax,0xf0875cc8
f0131c7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131c7e:	8b 55 08             	mov    0x8(%ebp),%edx
f0131c81:	89 50 04             	mov    %edx,0x4(%eax)
f0131c84:	a1 d4 5c 87 f0       	mov    0xf0875cd4,%eax
f0131c89:	40                   	inc    %eax
f0131c8a:	a3 d4 5c 87 f0       	mov    %eax,0xf0875cd4
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0131c8f:	e9 60 01 00 00       	jmp    f0131df4 <insert_sorted_allocList+0x289>
		}
		else if (blockToInsert->sva <= head->sva)
		{
			LIST_INSERT_BEFORE(&AllocMemBlocksList,head, blockToInsert);
		}
		else if (blockToInsert->sva >= tail->sva )
f0131c94:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c97:	8b 50 08             	mov    0x8(%eax),%edx
f0131c9a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131c9d:	8b 40 08             	mov    0x8(%eax),%eax
f0131ca0:	39 c2                	cmp    %eax,%edx
f0131ca2:	0f 82 4c 01 00 00    	jb     f0131df4 <insert_sorted_allocList+0x289>
		{
			LIST_INSERT_TAIL(&AllocMemBlocksList, blockToInsert);
f0131ca8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131cac:	75 14                	jne    f0131cc2 <insert_sorted_allocList+0x157>
f0131cae:	83 ec 04             	sub    $0x4,%esp
f0131cb1:	68 98 d3 13 f0       	push   $0xf013d398
f0131cb6:	6a 73                	push   $0x73
f0131cb8:	68 47 d3 13 f0       	push   $0xf013d347
f0131cbd:	e8 43 e5 fc ff       	call   f0100205 <_panic>
f0131cc2:	8b 15 cc 5c 87 f0    	mov    0xf0875ccc,%edx
f0131cc8:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ccb:	89 50 04             	mov    %edx,0x4(%eax)
f0131cce:	8b 45 08             	mov    0x8(%ebp),%eax
f0131cd1:	8b 40 04             	mov    0x4(%eax),%eax
f0131cd4:	85 c0                	test   %eax,%eax
f0131cd6:	74 0c                	je     f0131ce4 <insert_sorted_allocList+0x179>
f0131cd8:	a1 cc 5c 87 f0       	mov    0xf0875ccc,%eax
f0131cdd:	8b 55 08             	mov    0x8(%ebp),%edx
f0131ce0:	89 10                	mov    %edx,(%eax)
f0131ce2:	eb 08                	jmp    f0131cec <insert_sorted_allocList+0x181>
f0131ce4:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ce7:	a3 c8 5c 87 f0       	mov    %eax,0xf0875cc8
f0131cec:	8b 45 08             	mov    0x8(%ebp),%eax
f0131cef:	a3 cc 5c 87 f0       	mov    %eax,0xf0875ccc
f0131cf4:	8b 45 08             	mov    0x8(%ebp),%eax
f0131cf7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131cfd:	a1 d4 5c 87 f0       	mov    0xf0875cd4,%eax
f0131d02:	40                   	inc    %eax
f0131d03:	a3 d4 5c 87 f0       	mov    %eax,0xf0875cd4
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0131d08:	e9 e7 00 00 00       	jmp    f0131df4 <insert_sorted_allocList+0x289>
			LIST_INSERT_TAIL(&AllocMemBlocksList, blockToInsert);
		}
	}
	else
	{
		struct MemBlock *current_block = head;
f0131d0d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131d10:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct MemBlock *next_block = NULL;
f0131d13:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		LIST_FOREACH (current_block, &AllocMemBlocksList)
f0131d1a:	a1 c8 5c 87 f0       	mov    0xf0875cc8,%eax
f0131d1f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131d22:	e9 9d 00 00 00       	jmp    f0131dc4 <insert_sorted_allocList+0x259>
		{
			next_block = LIST_NEXT(current_block);
f0131d27:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d2a:	8b 00                	mov    (%eax),%eax
f0131d2c:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if (blockToInsert->sva > current_block->sva && blockToInsert->sva < next_block->sva)
f0131d2f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d32:	8b 50 08             	mov    0x8(%eax),%edx
f0131d35:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d38:	8b 40 08             	mov    0x8(%eax),%eax
f0131d3b:	39 c2                	cmp    %eax,%edx
f0131d3d:	76 7d                	jbe    f0131dbc <insert_sorted_allocList+0x251>
f0131d3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d42:	8b 50 08             	mov    0x8(%eax),%edx
f0131d45:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131d48:	8b 40 08             	mov    0x8(%eax),%eax
f0131d4b:	39 c2                	cmp    %eax,%edx
f0131d4d:	73 6d                	jae    f0131dbc <insert_sorted_allocList+0x251>
			{
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
f0131d4f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131d53:	74 06                	je     f0131d5b <insert_sorted_allocList+0x1f0>
f0131d55:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131d59:	75 14                	jne    f0131d6f <insert_sorted_allocList+0x204>
f0131d5b:	83 ec 04             	sub    $0x4,%esp
f0131d5e:	68 bc d3 13 f0       	push   $0xf013d3bc
f0131d63:	6a 7f                	push   $0x7f
f0131d65:	68 47 d3 13 f0       	push   $0xf013d347
f0131d6a:	e8 96 e4 fc ff       	call   f0100205 <_panic>
f0131d6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d72:	8b 10                	mov    (%eax),%edx
f0131d74:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d77:	89 10                	mov    %edx,(%eax)
f0131d79:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d7c:	8b 00                	mov    (%eax),%eax
f0131d7e:	85 c0                	test   %eax,%eax
f0131d80:	74 0b                	je     f0131d8d <insert_sorted_allocList+0x222>
f0131d82:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d85:	8b 00                	mov    (%eax),%eax
f0131d87:	8b 55 08             	mov    0x8(%ebp),%edx
f0131d8a:	89 50 04             	mov    %edx,0x4(%eax)
f0131d8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d90:	8b 55 08             	mov    0x8(%ebp),%edx
f0131d93:	89 10                	mov    %edx,(%eax)
f0131d95:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d98:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131d9b:	89 50 04             	mov    %edx,0x4(%eax)
f0131d9e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131da1:	8b 00                	mov    (%eax),%eax
f0131da3:	85 c0                	test   %eax,%eax
f0131da5:	75 08                	jne    f0131daf <insert_sorted_allocList+0x244>
f0131da7:	8b 45 08             	mov    0x8(%ebp),%eax
f0131daa:	a3 cc 5c 87 f0       	mov    %eax,0xf0875ccc
f0131daf:	a1 d4 5c 87 f0       	mov    0xf0875cd4,%eax
f0131db4:	40                   	inc    %eax
f0131db5:	a3 d4 5c 87 f0       	mov    %eax,0xf0875cd4
				break;
f0131dba:	eb 39                	jmp    f0131df5 <insert_sorted_allocList+0x28a>
	}
	else
	{
		struct MemBlock *current_block = head;
		struct MemBlock *next_block = NULL;
		LIST_FOREACH (current_block, &AllocMemBlocksList)
f0131dbc:	a1 d0 5c 87 f0       	mov    0xf0875cd0,%eax
f0131dc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131dc4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131dc8:	74 07                	je     f0131dd1 <insert_sorted_allocList+0x266>
f0131dca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131dcd:	8b 00                	mov    (%eax),%eax
f0131dcf:	eb 05                	jmp    f0131dd6 <insert_sorted_allocList+0x26b>
f0131dd1:	b8 00 00 00 00       	mov    $0x0,%eax
f0131dd6:	a3 d0 5c 87 f0       	mov    %eax,0xf0875cd0
f0131ddb:	a1 d0 5c 87 f0       	mov    0xf0875cd0,%eax
f0131de0:	85 c0                	test   %eax,%eax
f0131de2:	0f 85 3f ff ff ff    	jne    f0131d27 <insert_sorted_allocList+0x1bc>
f0131de8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131dec:	0f 85 35 ff ff ff    	jne    f0131d27 <insert_sorted_allocList+0x1bc>
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
				break;
			}
		}
	}
}
f0131df2:	eb 01                	jmp    f0131df5 <insert_sorted_allocList+0x28a>
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0131df4:	90                   	nop
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
				break;
			}
		}
	}
}
f0131df5:	90                   	nop
f0131df6:	c9                   	leave  
f0131df7:	c3                   	ret    

f0131df8 <alloc_block_FF>:

//=========================================
// [4] ALLOCATE BLOCK BY FIRST FIT:
//=========================================
struct MemBlock *alloc_block_FF(uint32 size)
{
f0131df8:	55                   	push   %ebp
f0131df9:	89 e5                	mov    %esp,%ebp
f0131dfb:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_FF
	// Write your code here, remove the panic and write your code
	struct MemBlock *point;
	LIST_FOREACH(point,&FreeMemBlocksList)
f0131dfe:	a1 64 5d 87 f0       	mov    0xf0875d64,%eax
f0131e03:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131e06:	e9 85 01 00 00       	jmp    f0131f90 <alloc_block_FF+0x198>
	{
		if(size <= point->size)
f0131e0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e0e:	8b 40 0c             	mov    0xc(%eax),%eax
f0131e11:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131e14:	0f 82 6e 01 00 00    	jb     f0131f88 <alloc_block_FF+0x190>
		{
		   if(size == point->size){
f0131e1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e1d:	8b 40 0c             	mov    0xc(%eax),%eax
f0131e20:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131e23:	0f 85 8a 00 00 00    	jne    f0131eb3 <alloc_block_FF+0xbb>
			   LIST_REMOVE(&FreeMemBlocksList,point);
f0131e29:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131e2d:	75 17                	jne    f0131e46 <alloc_block_FF+0x4e>
f0131e2f:	83 ec 04             	sub    $0x4,%esp
f0131e32:	68 f0 d3 13 f0       	push   $0xf013d3f0
f0131e37:	68 93 00 00 00       	push   $0x93
f0131e3c:	68 47 d3 13 f0       	push   $0xf013d347
f0131e41:	e8 bf e3 fc ff       	call   f0100205 <_panic>
f0131e46:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e49:	8b 00                	mov    (%eax),%eax
f0131e4b:	85 c0                	test   %eax,%eax
f0131e4d:	74 10                	je     f0131e5f <alloc_block_FF+0x67>
f0131e4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e52:	8b 00                	mov    (%eax),%eax
f0131e54:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131e57:	8b 52 04             	mov    0x4(%edx),%edx
f0131e5a:	89 50 04             	mov    %edx,0x4(%eax)
f0131e5d:	eb 0b                	jmp    f0131e6a <alloc_block_FF+0x72>
f0131e5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e62:	8b 40 04             	mov    0x4(%eax),%eax
f0131e65:	a3 68 5d 87 f0       	mov    %eax,0xf0875d68
f0131e6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e6d:	8b 40 04             	mov    0x4(%eax),%eax
f0131e70:	85 c0                	test   %eax,%eax
f0131e72:	74 0f                	je     f0131e83 <alloc_block_FF+0x8b>
f0131e74:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e77:	8b 40 04             	mov    0x4(%eax),%eax
f0131e7a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131e7d:	8b 12                	mov    (%edx),%edx
f0131e7f:	89 10                	mov    %edx,(%eax)
f0131e81:	eb 0a                	jmp    f0131e8d <alloc_block_FF+0x95>
f0131e83:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e86:	8b 00                	mov    (%eax),%eax
f0131e88:	a3 64 5d 87 f0       	mov    %eax,0xf0875d64
f0131e8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e90:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131e96:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e99:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131ea0:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f0131ea5:	48                   	dec    %eax
f0131ea6:	a3 70 5d 87 f0       	mov    %eax,0xf0875d70
			   return  point;
f0131eab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131eae:	e9 10 01 00 00       	jmp    f0131fc3 <alloc_block_FF+0x1cb>
			   break;
		   }
		   else if (size < point->size){
f0131eb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131eb6:	8b 40 0c             	mov    0xc(%eax),%eax
f0131eb9:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131ebc:	0f 86 c6 00 00 00    	jbe    f0131f88 <alloc_block_FF+0x190>
			   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0131ec2:	a1 98 5d 87 f0       	mov    0xf0875d98,%eax
f0131ec7:	89 45 f0             	mov    %eax,-0x10(%ebp)
			   ReturnedBlock->sva = point->sva;
f0131eca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ecd:	8b 50 08             	mov    0x8(%eax),%edx
f0131ed0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131ed3:	89 50 08             	mov    %edx,0x8(%eax)
			   ReturnedBlock->size = size;
f0131ed6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131ed9:	8b 55 08             	mov    0x8(%ebp),%edx
f0131edc:	89 50 0c             	mov    %edx,0xc(%eax)
			   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0131edf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131ee3:	75 17                	jne    f0131efc <alloc_block_FF+0x104>
f0131ee5:	83 ec 04             	sub    $0x4,%esp
f0131ee8:	68 f0 d3 13 f0       	push   $0xf013d3f0
f0131eed:	68 9b 00 00 00       	push   $0x9b
f0131ef2:	68 47 d3 13 f0       	push   $0xf013d347
f0131ef7:	e8 09 e3 fc ff       	call   f0100205 <_panic>
f0131efc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131eff:	8b 00                	mov    (%eax),%eax
f0131f01:	85 c0                	test   %eax,%eax
f0131f03:	74 10                	je     f0131f15 <alloc_block_FF+0x11d>
f0131f05:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131f08:	8b 00                	mov    (%eax),%eax
f0131f0a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131f0d:	8b 52 04             	mov    0x4(%edx),%edx
f0131f10:	89 50 04             	mov    %edx,0x4(%eax)
f0131f13:	eb 0b                	jmp    f0131f20 <alloc_block_FF+0x128>
f0131f15:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131f18:	8b 40 04             	mov    0x4(%eax),%eax
f0131f1b:	a3 9c 5d 87 f0       	mov    %eax,0xf0875d9c
f0131f20:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131f23:	8b 40 04             	mov    0x4(%eax),%eax
f0131f26:	85 c0                	test   %eax,%eax
f0131f28:	74 0f                	je     f0131f39 <alloc_block_FF+0x141>
f0131f2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131f2d:	8b 40 04             	mov    0x4(%eax),%eax
f0131f30:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131f33:	8b 12                	mov    (%edx),%edx
f0131f35:	89 10                	mov    %edx,(%eax)
f0131f37:	eb 0a                	jmp    f0131f43 <alloc_block_FF+0x14b>
f0131f39:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131f3c:	8b 00                	mov    (%eax),%eax
f0131f3e:	a3 98 5d 87 f0       	mov    %eax,0xf0875d98
f0131f43:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131f46:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131f4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131f4f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131f56:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f0131f5b:	48                   	dec    %eax
f0131f5c:	a3 a4 5d 87 f0       	mov    %eax,0xf0875da4
			   point->sva += size;
f0131f61:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f64:	8b 50 08             	mov    0x8(%eax),%edx
f0131f67:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f6a:	01 c2                	add    %eax,%edx
f0131f6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f6f:	89 50 08             	mov    %edx,0x8(%eax)
			   point->size -= size;
f0131f72:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f75:	8b 40 0c             	mov    0xc(%eax),%eax
f0131f78:	2b 45 08             	sub    0x8(%ebp),%eax
f0131f7b:	89 c2                	mov    %eax,%edx
f0131f7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f80:	89 50 0c             	mov    %edx,0xc(%eax)
			   return ReturnedBlock;
f0131f83:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131f86:	eb 3b                	jmp    f0131fc3 <alloc_block_FF+0x1cb>
struct MemBlock *alloc_block_FF(uint32 size)
{
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_FF
	// Write your code here, remove the panic and write your code
	struct MemBlock *point;
	LIST_FOREACH(point,&FreeMemBlocksList)
f0131f88:	a1 6c 5d 87 f0       	mov    0xf0875d6c,%eax
f0131f8d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131f90:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131f94:	74 07                	je     f0131f9d <alloc_block_FF+0x1a5>
f0131f96:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f99:	8b 00                	mov    (%eax),%eax
f0131f9b:	eb 05                	jmp    f0131fa2 <alloc_block_FF+0x1aa>
f0131f9d:	b8 00 00 00 00       	mov    $0x0,%eax
f0131fa2:	a3 6c 5d 87 f0       	mov    %eax,0xf0875d6c
f0131fa7:	a1 6c 5d 87 f0       	mov    0xf0875d6c,%eax
f0131fac:	85 c0                	test   %eax,%eax
f0131fae:	0f 85 57 fe ff ff    	jne    f0131e0b <alloc_block_FF+0x13>
f0131fb4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131fb8:	0f 85 4d fe ff ff    	jne    f0131e0b <alloc_block_FF+0x13>
			   return ReturnedBlock;
			   break;
		   }
		}
	}
	return NULL;
f0131fbe:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131fc3:	c9                   	leave  
f0131fc4:	c3                   	ret    

f0131fc5 <alloc_block_BF>:

//=========================================
// [5] ALLOCATE BLOCK BY BEST FIT:
//=========================================
struct MemBlock *alloc_block_BF(uint32 size)
{
f0131fc5:	55                   	push   %ebp
f0131fc6:	89 e5                	mov    %esp,%ebp
f0131fc8:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_BF
	// Write your code here, remove the panic and write your code
	struct MemBlock *currentMemBlock;
	uint32 minSize;
	uint32 svaOfMinSize;
	bool isFound = 1==0;
f0131fcb:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	LIST_FOREACH(currentMemBlock,&FreeMemBlocksList)
f0131fd2:	a1 64 5d 87 f0       	mov    0xf0875d64,%eax
f0131fd7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131fda:	e9 df 00 00 00       	jmp    f01320be <alloc_block_BF+0xf9>
	{
		if(size <= currentMemBlock->size)
f0131fdf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fe2:	8b 40 0c             	mov    0xc(%eax),%eax
f0131fe5:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131fe8:	0f 82 c8 00 00 00    	jb     f01320b6 <alloc_block_BF+0xf1>
		{
		   if(size == currentMemBlock->size)
f0131fee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ff1:	8b 40 0c             	mov    0xc(%eax),%eax
f0131ff4:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131ff7:	0f 85 8a 00 00 00    	jne    f0132087 <alloc_block_BF+0xc2>
		   {
			   LIST_REMOVE(&FreeMemBlocksList,currentMemBlock);
f0131ffd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132001:	75 17                	jne    f013201a <alloc_block_BF+0x55>
f0132003:	83 ec 04             	sub    $0x4,%esp
f0132006:	68 f0 d3 13 f0       	push   $0xf013d3f0
f013200b:	68 b7 00 00 00       	push   $0xb7
f0132010:	68 47 d3 13 f0       	push   $0xf013d347
f0132015:	e8 eb e1 fc ff       	call   f0100205 <_panic>
f013201a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013201d:	8b 00                	mov    (%eax),%eax
f013201f:	85 c0                	test   %eax,%eax
f0132021:	74 10                	je     f0132033 <alloc_block_BF+0x6e>
f0132023:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132026:	8b 00                	mov    (%eax),%eax
f0132028:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013202b:	8b 52 04             	mov    0x4(%edx),%edx
f013202e:	89 50 04             	mov    %edx,0x4(%eax)
f0132031:	eb 0b                	jmp    f013203e <alloc_block_BF+0x79>
f0132033:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132036:	8b 40 04             	mov    0x4(%eax),%eax
f0132039:	a3 68 5d 87 f0       	mov    %eax,0xf0875d68
f013203e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132041:	8b 40 04             	mov    0x4(%eax),%eax
f0132044:	85 c0                	test   %eax,%eax
f0132046:	74 0f                	je     f0132057 <alloc_block_BF+0x92>
f0132048:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013204b:	8b 40 04             	mov    0x4(%eax),%eax
f013204e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132051:	8b 12                	mov    (%edx),%edx
f0132053:	89 10                	mov    %edx,(%eax)
f0132055:	eb 0a                	jmp    f0132061 <alloc_block_BF+0x9c>
f0132057:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013205a:	8b 00                	mov    (%eax),%eax
f013205c:	a3 64 5d 87 f0       	mov    %eax,0xf0875d64
f0132061:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132064:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013206a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013206d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132074:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f0132079:	48                   	dec    %eax
f013207a:	a3 70 5d 87 f0       	mov    %eax,0xf0875d70
			   return currentMemBlock;
f013207f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132082:	e9 4d 01 00 00       	jmp    f01321d4 <alloc_block_BF+0x20f>
		   }
		   else if (size < currentMemBlock->size && currentMemBlock->size < minSize)
f0132087:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013208a:	8b 40 0c             	mov    0xc(%eax),%eax
f013208d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132090:	76 24                	jbe    f01320b6 <alloc_block_BF+0xf1>
f0132092:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132095:	8b 40 0c             	mov    0xc(%eax),%eax
f0132098:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f013209b:	73 19                	jae    f01320b6 <alloc_block_BF+0xf1>
		   {
			   isFound = 1==1;
f013209d:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
			   minSize = currentMemBlock->size;
f01320a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320a7:	8b 40 0c             	mov    0xc(%eax),%eax
f01320aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
			   svaOfMinSize = currentMemBlock->sva;
f01320ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320b0:	8b 40 08             	mov    0x8(%eax),%eax
f01320b3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	// Write your code here, remove the panic and write your code
	struct MemBlock *currentMemBlock;
	uint32 minSize;
	uint32 svaOfMinSize;
	bool isFound = 1==0;
	LIST_FOREACH(currentMemBlock,&FreeMemBlocksList)
f01320b6:	a1 6c 5d 87 f0       	mov    0xf0875d6c,%eax
f01320bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01320be:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01320c2:	74 07                	je     f01320cb <alloc_block_BF+0x106>
f01320c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320c7:	8b 00                	mov    (%eax),%eax
f01320c9:	eb 05                	jmp    f01320d0 <alloc_block_BF+0x10b>
f01320cb:	b8 00 00 00 00       	mov    $0x0,%eax
f01320d0:	a3 6c 5d 87 f0       	mov    %eax,0xf0875d6c
f01320d5:	a1 6c 5d 87 f0       	mov    0xf0875d6c,%eax
f01320da:	85 c0                	test   %eax,%eax
f01320dc:	0f 85 fd fe ff ff    	jne    f0131fdf <alloc_block_BF+0x1a>
f01320e2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01320e6:	0f 85 f3 fe ff ff    	jne    f0131fdf <alloc_block_BF+0x1a>
			   minSize = currentMemBlock->size;
			   svaOfMinSize = currentMemBlock->sva;
		   }
		}
	}
	if(isFound)
f01320ec:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01320f0:	0f 84 d9 00 00 00    	je     f01321cf <alloc_block_BF+0x20a>
	{
		struct MemBlock * foundBlock = LIST_FIRST(&AvailableMemBlocksList);
f01320f6:	a1 98 5d 87 f0       	mov    0xf0875d98,%eax
f01320fb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		foundBlock->sva = svaOfMinSize;
f01320fe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132101:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0132104:	89 50 08             	mov    %edx,0x8(%eax)
		foundBlock->size = size;
f0132107:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013210a:	8b 55 08             	mov    0x8(%ebp),%edx
f013210d:	89 50 0c             	mov    %edx,0xc(%eax)
		LIST_REMOVE(&AvailableMemBlocksList,foundBlock);
f0132110:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0132114:	75 17                	jne    f013212d <alloc_block_BF+0x168>
f0132116:	83 ec 04             	sub    $0x4,%esp
f0132119:	68 f0 d3 13 f0       	push   $0xf013d3f0
f013211e:	68 c7 00 00 00       	push   $0xc7
f0132123:	68 47 d3 13 f0       	push   $0xf013d347
f0132128:	e8 d8 e0 fc ff       	call   f0100205 <_panic>
f013212d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132130:	8b 00                	mov    (%eax),%eax
f0132132:	85 c0                	test   %eax,%eax
f0132134:	74 10                	je     f0132146 <alloc_block_BF+0x181>
f0132136:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132139:	8b 00                	mov    (%eax),%eax
f013213b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f013213e:	8b 52 04             	mov    0x4(%edx),%edx
f0132141:	89 50 04             	mov    %edx,0x4(%eax)
f0132144:	eb 0b                	jmp    f0132151 <alloc_block_BF+0x18c>
f0132146:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132149:	8b 40 04             	mov    0x4(%eax),%eax
f013214c:	a3 9c 5d 87 f0       	mov    %eax,0xf0875d9c
f0132151:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132154:	8b 40 04             	mov    0x4(%eax),%eax
f0132157:	85 c0                	test   %eax,%eax
f0132159:	74 0f                	je     f013216a <alloc_block_BF+0x1a5>
f013215b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013215e:	8b 40 04             	mov    0x4(%eax),%eax
f0132161:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0132164:	8b 12                	mov    (%edx),%edx
f0132166:	89 10                	mov    %edx,(%eax)
f0132168:	eb 0a                	jmp    f0132174 <alloc_block_BF+0x1af>
f013216a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013216d:	8b 00                	mov    (%eax),%eax
f013216f:	a3 98 5d 87 f0       	mov    %eax,0xf0875d98
f0132174:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132177:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013217d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132180:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132187:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f013218c:	48                   	dec    %eax
f013218d:	a3 a4 5d 87 f0       	mov    %eax,0xf0875da4
		struct MemBlock *cMemBlock = find_block(&FreeMemBlocksList, svaOfMinSize);
f0132192:	83 ec 08             	sub    $0x8,%esp
f0132195:	ff 75 ec             	pushl  -0x14(%ebp)
f0132198:	68 64 5d 87 f0       	push   $0xf0875d64
f013219d:	e8 71 f9 ff ff       	call   f0131b13 <find_block>
f01321a2:	83 c4 10             	add    $0x10,%esp
f01321a5:	89 45 e0             	mov    %eax,-0x20(%ebp)
		cMemBlock->sva += size;
f01321a8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01321ab:	8b 50 08             	mov    0x8(%eax),%edx
f01321ae:	8b 45 08             	mov    0x8(%ebp),%eax
f01321b1:	01 c2                	add    %eax,%edx
f01321b3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01321b6:	89 50 08             	mov    %edx,0x8(%eax)
		cMemBlock->size -= size;
f01321b9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01321bc:	8b 40 0c             	mov    0xc(%eax),%eax
f01321bf:	2b 45 08             	sub    0x8(%ebp),%eax
f01321c2:	89 c2                	mov    %eax,%edx
f01321c4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01321c7:	89 50 0c             	mov    %edx,0xc(%eax)
		return foundBlock;
f01321ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01321cd:	eb 05                	jmp    f01321d4 <alloc_block_BF+0x20f>
	}
	return NULL;
f01321cf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01321d4:	c9                   	leave  
f01321d5:	c3                   	ret    

f01321d6 <alloc_block_NF>:
uint32 svaOfNF = 0;
//=========================================
// [7] ALLOCATE BLOCK BY NEXT FIT:
//=========================================
struct MemBlock *alloc_block_NF(uint32 size)
{
f01321d6:	55                   	push   %ebp
f01321d7:	89 e5                	mov    %esp,%ebp
f01321d9:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your codestruct MemBlock *point;
	struct MemBlock *point;
	if(svaOfNF == 0)
f01321dc:	a1 b0 5c 87 f0       	mov    0xf0875cb0,%eax
f01321e1:	85 c0                	test   %eax,%eax
f01321e3:	0f 85 de 01 00 00    	jne    f01323c7 <alloc_block_NF+0x1f1>
	{
		LIST_FOREACH(point,&FreeMemBlocksList)
f01321e9:	a1 64 5d 87 f0       	mov    0xf0875d64,%eax
f01321ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01321f1:	e9 9e 01 00 00       	jmp    f0132394 <alloc_block_NF+0x1be>
		{
			if(size <= point->size)
f01321f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01321f9:	8b 40 0c             	mov    0xc(%eax),%eax
f01321fc:	3b 45 08             	cmp    0x8(%ebp),%eax
f01321ff:	0f 82 87 01 00 00    	jb     f013238c <alloc_block_NF+0x1b6>
			{
			   if(size == point->size){
f0132205:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132208:	8b 40 0c             	mov    0xc(%eax),%eax
f013220b:	3b 45 08             	cmp    0x8(%ebp),%eax
f013220e:	0f 85 95 00 00 00    	jne    f01322a9 <alloc_block_NF+0xd3>
				   LIST_REMOVE(&FreeMemBlocksList,point);
f0132214:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132218:	75 17                	jne    f0132231 <alloc_block_NF+0x5b>
f013221a:	83 ec 04             	sub    $0x4,%esp
f013221d:	68 f0 d3 13 f0       	push   $0xf013d3f0
f0132222:	68 e0 00 00 00       	push   $0xe0
f0132227:	68 47 d3 13 f0       	push   $0xf013d347
f013222c:	e8 d4 df fc ff       	call   f0100205 <_panic>
f0132231:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132234:	8b 00                	mov    (%eax),%eax
f0132236:	85 c0                	test   %eax,%eax
f0132238:	74 10                	je     f013224a <alloc_block_NF+0x74>
f013223a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013223d:	8b 00                	mov    (%eax),%eax
f013223f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132242:	8b 52 04             	mov    0x4(%edx),%edx
f0132245:	89 50 04             	mov    %edx,0x4(%eax)
f0132248:	eb 0b                	jmp    f0132255 <alloc_block_NF+0x7f>
f013224a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013224d:	8b 40 04             	mov    0x4(%eax),%eax
f0132250:	a3 68 5d 87 f0       	mov    %eax,0xf0875d68
f0132255:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132258:	8b 40 04             	mov    0x4(%eax),%eax
f013225b:	85 c0                	test   %eax,%eax
f013225d:	74 0f                	je     f013226e <alloc_block_NF+0x98>
f013225f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132262:	8b 40 04             	mov    0x4(%eax),%eax
f0132265:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132268:	8b 12                	mov    (%edx),%edx
f013226a:	89 10                	mov    %edx,(%eax)
f013226c:	eb 0a                	jmp    f0132278 <alloc_block_NF+0xa2>
f013226e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132271:	8b 00                	mov    (%eax),%eax
f0132273:	a3 64 5d 87 f0       	mov    %eax,0xf0875d64
f0132278:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013227b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132281:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132284:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013228b:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f0132290:	48                   	dec    %eax
f0132291:	a3 70 5d 87 f0       	mov    %eax,0xf0875d70
				   svaOfNF = point->sva;
f0132296:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132299:	8b 40 08             	mov    0x8(%eax),%eax
f013229c:	a3 b0 5c 87 f0       	mov    %eax,0xf0875cb0
				   return  point;
f01322a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01322a4:	e9 f8 04 00 00       	jmp    f01327a1 <alloc_block_NF+0x5cb>
				   break;
			   }
			   else if (size < point->size){
f01322a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01322ac:	8b 40 0c             	mov    0xc(%eax),%eax
f01322af:	3b 45 08             	cmp    0x8(%ebp),%eax
f01322b2:	0f 86 d4 00 00 00    	jbe    f013238c <alloc_block_NF+0x1b6>
				   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f01322b8:	a1 98 5d 87 f0       	mov    0xf0875d98,%eax
f01322bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
				   ReturnedBlock->sva = point->sva;
f01322c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01322c3:	8b 50 08             	mov    0x8(%eax),%edx
f01322c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01322c9:	89 50 08             	mov    %edx,0x8(%eax)
				   ReturnedBlock->size = size;
f01322cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01322cf:	8b 55 08             	mov    0x8(%ebp),%edx
f01322d2:	89 50 0c             	mov    %edx,0xc(%eax)
				   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f01322d5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01322d9:	75 17                	jne    f01322f2 <alloc_block_NF+0x11c>
f01322db:	83 ec 04             	sub    $0x4,%esp
f01322de:	68 f0 d3 13 f0       	push   $0xf013d3f0
f01322e3:	68 e9 00 00 00       	push   $0xe9
f01322e8:	68 47 d3 13 f0       	push   $0xf013d347
f01322ed:	e8 13 df fc ff       	call   f0100205 <_panic>
f01322f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01322f5:	8b 00                	mov    (%eax),%eax
f01322f7:	85 c0                	test   %eax,%eax
f01322f9:	74 10                	je     f013230b <alloc_block_NF+0x135>
f01322fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01322fe:	8b 00                	mov    (%eax),%eax
f0132300:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132303:	8b 52 04             	mov    0x4(%edx),%edx
f0132306:	89 50 04             	mov    %edx,0x4(%eax)
f0132309:	eb 0b                	jmp    f0132316 <alloc_block_NF+0x140>
f013230b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013230e:	8b 40 04             	mov    0x4(%eax),%eax
f0132311:	a3 9c 5d 87 f0       	mov    %eax,0xf0875d9c
f0132316:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132319:	8b 40 04             	mov    0x4(%eax),%eax
f013231c:	85 c0                	test   %eax,%eax
f013231e:	74 0f                	je     f013232f <alloc_block_NF+0x159>
f0132320:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132323:	8b 40 04             	mov    0x4(%eax),%eax
f0132326:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132329:	8b 12                	mov    (%edx),%edx
f013232b:	89 10                	mov    %edx,(%eax)
f013232d:	eb 0a                	jmp    f0132339 <alloc_block_NF+0x163>
f013232f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132332:	8b 00                	mov    (%eax),%eax
f0132334:	a3 98 5d 87 f0       	mov    %eax,0xf0875d98
f0132339:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013233c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132342:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132345:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013234c:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f0132351:	48                   	dec    %eax
f0132352:	a3 a4 5d 87 f0       	mov    %eax,0xf0875da4
				   svaOfNF = ReturnedBlock->sva;
f0132357:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013235a:	8b 40 08             	mov    0x8(%eax),%eax
f013235d:	a3 b0 5c 87 f0       	mov    %eax,0xf0875cb0
				   point->sva += size;
f0132362:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132365:	8b 50 08             	mov    0x8(%eax),%edx
f0132368:	8b 45 08             	mov    0x8(%ebp),%eax
f013236b:	01 c2                	add    %eax,%edx
f013236d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132370:	89 50 08             	mov    %edx,0x8(%eax)
				   point->size -= size;
f0132373:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132376:	8b 40 0c             	mov    0xc(%eax),%eax
f0132379:	2b 45 08             	sub    0x8(%ebp),%eax
f013237c:	89 c2                	mov    %eax,%edx
f013237e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132381:	89 50 0c             	mov    %edx,0xc(%eax)
				   return ReturnedBlock;
f0132384:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132387:	e9 15 04 00 00       	jmp    f01327a1 <alloc_block_NF+0x5cb>
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your codestruct MemBlock *point;
	struct MemBlock *point;
	if(svaOfNF == 0)
	{
		LIST_FOREACH(point,&FreeMemBlocksList)
f013238c:	a1 6c 5d 87 f0       	mov    0xf0875d6c,%eax
f0132391:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132394:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132398:	74 07                	je     f01323a1 <alloc_block_NF+0x1cb>
f013239a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013239d:	8b 00                	mov    (%eax),%eax
f013239f:	eb 05                	jmp    f01323a6 <alloc_block_NF+0x1d0>
f01323a1:	b8 00 00 00 00       	mov    $0x0,%eax
f01323a6:	a3 6c 5d 87 f0       	mov    %eax,0xf0875d6c
f01323ab:	a1 6c 5d 87 f0       	mov    0xf0875d6c,%eax
f01323b0:	85 c0                	test   %eax,%eax
f01323b2:	0f 85 3e fe ff ff    	jne    f01321f6 <alloc_block_NF+0x20>
f01323b8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01323bc:	0f 85 34 fe ff ff    	jne    f01321f6 <alloc_block_NF+0x20>
f01323c2:	e9 d5 03 00 00       	jmp    f013279c <alloc_block_NF+0x5c6>
			}
		}
	}
	else
	{
		LIST_FOREACH(point, &FreeMemBlocksList)
f01323c7:	a1 64 5d 87 f0       	mov    0xf0875d64,%eax
f01323cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01323cf:	e9 b1 01 00 00       	jmp    f0132585 <alloc_block_NF+0x3af>
		{
			if(point->sva >= svaOfNF)
f01323d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323d7:	8b 50 08             	mov    0x8(%eax),%edx
f01323da:	a1 b0 5c 87 f0       	mov    0xf0875cb0,%eax
f01323df:	39 c2                	cmp    %eax,%edx
f01323e1:	0f 82 96 01 00 00    	jb     f013257d <alloc_block_NF+0x3a7>
			{
				if(size <= point->size)
f01323e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323ea:	8b 40 0c             	mov    0xc(%eax),%eax
f01323ed:	3b 45 08             	cmp    0x8(%ebp),%eax
f01323f0:	0f 82 87 01 00 00    	jb     f013257d <alloc_block_NF+0x3a7>
				{
				   if(size == point->size){
f01323f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323f9:	8b 40 0c             	mov    0xc(%eax),%eax
f01323fc:	3b 45 08             	cmp    0x8(%ebp),%eax
f01323ff:	0f 85 95 00 00 00    	jne    f013249a <alloc_block_NF+0x2c4>
					   LIST_REMOVE(&FreeMemBlocksList,point);
f0132405:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132409:	75 17                	jne    f0132422 <alloc_block_NF+0x24c>
f013240b:	83 ec 04             	sub    $0x4,%esp
f013240e:	68 f0 d3 13 f0       	push   $0xf013d3f0
f0132413:	68 fc 00 00 00       	push   $0xfc
f0132418:	68 47 d3 13 f0       	push   $0xf013d347
f013241d:	e8 e3 dd fc ff       	call   f0100205 <_panic>
f0132422:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132425:	8b 00                	mov    (%eax),%eax
f0132427:	85 c0                	test   %eax,%eax
f0132429:	74 10                	je     f013243b <alloc_block_NF+0x265>
f013242b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013242e:	8b 00                	mov    (%eax),%eax
f0132430:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132433:	8b 52 04             	mov    0x4(%edx),%edx
f0132436:	89 50 04             	mov    %edx,0x4(%eax)
f0132439:	eb 0b                	jmp    f0132446 <alloc_block_NF+0x270>
f013243b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013243e:	8b 40 04             	mov    0x4(%eax),%eax
f0132441:	a3 68 5d 87 f0       	mov    %eax,0xf0875d68
f0132446:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132449:	8b 40 04             	mov    0x4(%eax),%eax
f013244c:	85 c0                	test   %eax,%eax
f013244e:	74 0f                	je     f013245f <alloc_block_NF+0x289>
f0132450:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132453:	8b 40 04             	mov    0x4(%eax),%eax
f0132456:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132459:	8b 12                	mov    (%edx),%edx
f013245b:	89 10                	mov    %edx,(%eax)
f013245d:	eb 0a                	jmp    f0132469 <alloc_block_NF+0x293>
f013245f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132462:	8b 00                	mov    (%eax),%eax
f0132464:	a3 64 5d 87 f0       	mov    %eax,0xf0875d64
f0132469:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013246c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132472:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132475:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013247c:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f0132481:	48                   	dec    %eax
f0132482:	a3 70 5d 87 f0       	mov    %eax,0xf0875d70
					   svaOfNF = point->sva;
f0132487:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013248a:	8b 40 08             	mov    0x8(%eax),%eax
f013248d:	a3 b0 5c 87 f0       	mov    %eax,0xf0875cb0
					   return  point;
f0132492:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132495:	e9 07 03 00 00       	jmp    f01327a1 <alloc_block_NF+0x5cb>
				   }
				   else if (size < point->size){
f013249a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013249d:	8b 40 0c             	mov    0xc(%eax),%eax
f01324a0:	3b 45 08             	cmp    0x8(%ebp),%eax
f01324a3:	0f 86 d4 00 00 00    	jbe    f013257d <alloc_block_NF+0x3a7>
					   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f01324a9:	a1 98 5d 87 f0       	mov    0xf0875d98,%eax
f01324ae:	89 45 e8             	mov    %eax,-0x18(%ebp)
					   ReturnedBlock->sva = point->sva;
f01324b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01324b4:	8b 50 08             	mov    0x8(%eax),%edx
f01324b7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01324ba:	89 50 08             	mov    %edx,0x8(%eax)
					   ReturnedBlock->size = size;
f01324bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01324c0:	8b 55 08             	mov    0x8(%ebp),%edx
f01324c3:	89 50 0c             	mov    %edx,0xc(%eax)
					   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f01324c6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01324ca:	75 17                	jne    f01324e3 <alloc_block_NF+0x30d>
f01324cc:	83 ec 04             	sub    $0x4,%esp
f01324cf:	68 f0 d3 13 f0       	push   $0xf013d3f0
f01324d4:	68 04 01 00 00       	push   $0x104
f01324d9:	68 47 d3 13 f0       	push   $0xf013d347
f01324de:	e8 22 dd fc ff       	call   f0100205 <_panic>
f01324e3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01324e6:	8b 00                	mov    (%eax),%eax
f01324e8:	85 c0                	test   %eax,%eax
f01324ea:	74 10                	je     f01324fc <alloc_block_NF+0x326>
f01324ec:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01324ef:	8b 00                	mov    (%eax),%eax
f01324f1:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01324f4:	8b 52 04             	mov    0x4(%edx),%edx
f01324f7:	89 50 04             	mov    %edx,0x4(%eax)
f01324fa:	eb 0b                	jmp    f0132507 <alloc_block_NF+0x331>
f01324fc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01324ff:	8b 40 04             	mov    0x4(%eax),%eax
f0132502:	a3 9c 5d 87 f0       	mov    %eax,0xf0875d9c
f0132507:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013250a:	8b 40 04             	mov    0x4(%eax),%eax
f013250d:	85 c0                	test   %eax,%eax
f013250f:	74 0f                	je     f0132520 <alloc_block_NF+0x34a>
f0132511:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132514:	8b 40 04             	mov    0x4(%eax),%eax
f0132517:	8b 55 e8             	mov    -0x18(%ebp),%edx
f013251a:	8b 12                	mov    (%edx),%edx
f013251c:	89 10                	mov    %edx,(%eax)
f013251e:	eb 0a                	jmp    f013252a <alloc_block_NF+0x354>
f0132520:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132523:	8b 00                	mov    (%eax),%eax
f0132525:	a3 98 5d 87 f0       	mov    %eax,0xf0875d98
f013252a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013252d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132533:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132536:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013253d:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f0132542:	48                   	dec    %eax
f0132543:	a3 a4 5d 87 f0       	mov    %eax,0xf0875da4
					   svaOfNF = ReturnedBlock->sva;
f0132548:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013254b:	8b 40 08             	mov    0x8(%eax),%eax
f013254e:	a3 b0 5c 87 f0       	mov    %eax,0xf0875cb0
					   point->sva += size;
f0132553:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132556:	8b 50 08             	mov    0x8(%eax),%edx
f0132559:	8b 45 08             	mov    0x8(%ebp),%eax
f013255c:	01 c2                	add    %eax,%edx
f013255e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132561:	89 50 08             	mov    %edx,0x8(%eax)
					   point->size -= size;
f0132564:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132567:	8b 40 0c             	mov    0xc(%eax),%eax
f013256a:	2b 45 08             	sub    0x8(%ebp),%eax
f013256d:	89 c2                	mov    %eax,%edx
f013256f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132572:	89 50 0c             	mov    %edx,0xc(%eax)
					   return ReturnedBlock;
f0132575:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132578:	e9 24 02 00 00       	jmp    f01327a1 <alloc_block_NF+0x5cb>
			}
		}
	}
	else
	{
		LIST_FOREACH(point, &FreeMemBlocksList)
f013257d:	a1 6c 5d 87 f0       	mov    0xf0875d6c,%eax
f0132582:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132585:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132589:	74 07                	je     f0132592 <alloc_block_NF+0x3bc>
f013258b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013258e:	8b 00                	mov    (%eax),%eax
f0132590:	eb 05                	jmp    f0132597 <alloc_block_NF+0x3c1>
f0132592:	b8 00 00 00 00       	mov    $0x0,%eax
f0132597:	a3 6c 5d 87 f0       	mov    %eax,0xf0875d6c
f013259c:	a1 6c 5d 87 f0       	mov    0xf0875d6c,%eax
f01325a1:	85 c0                	test   %eax,%eax
f01325a3:	0f 85 2b fe ff ff    	jne    f01323d4 <alloc_block_NF+0x1fe>
f01325a9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01325ad:	0f 85 21 fe ff ff    	jne    f01323d4 <alloc_block_NF+0x1fe>
					   return ReturnedBlock;
				   }
				}
			}
		}
		LIST_FOREACH(point, &FreeMemBlocksList)
f01325b3:	a1 64 5d 87 f0       	mov    0xf0875d64,%eax
f01325b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01325bb:	e9 ae 01 00 00       	jmp    f013276e <alloc_block_NF+0x598>
		{
			if(point->sva < svaOfNF)
f01325c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01325c3:	8b 50 08             	mov    0x8(%eax),%edx
f01325c6:	a1 b0 5c 87 f0       	mov    0xf0875cb0,%eax
f01325cb:	39 c2                	cmp    %eax,%edx
f01325cd:	0f 83 93 01 00 00    	jae    f0132766 <alloc_block_NF+0x590>
			{
				if(size <= point->size)
f01325d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01325d6:	8b 40 0c             	mov    0xc(%eax),%eax
f01325d9:	3b 45 08             	cmp    0x8(%ebp),%eax
f01325dc:	0f 82 84 01 00 00    	jb     f0132766 <alloc_block_NF+0x590>
				{
				   if(size == point->size){
f01325e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01325e5:	8b 40 0c             	mov    0xc(%eax),%eax
f01325e8:	3b 45 08             	cmp    0x8(%ebp),%eax
f01325eb:	0f 85 95 00 00 00    	jne    f0132686 <alloc_block_NF+0x4b0>
					   LIST_REMOVE(&FreeMemBlocksList,point);
f01325f1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01325f5:	75 17                	jne    f013260e <alloc_block_NF+0x438>
f01325f7:	83 ec 04             	sub    $0x4,%esp
f01325fa:	68 f0 d3 13 f0       	push   $0xf013d3f0
f01325ff:	68 14 01 00 00       	push   $0x114
f0132604:	68 47 d3 13 f0       	push   $0xf013d347
f0132609:	e8 f7 db fc ff       	call   f0100205 <_panic>
f013260e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132611:	8b 00                	mov    (%eax),%eax
f0132613:	85 c0                	test   %eax,%eax
f0132615:	74 10                	je     f0132627 <alloc_block_NF+0x451>
f0132617:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013261a:	8b 00                	mov    (%eax),%eax
f013261c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013261f:	8b 52 04             	mov    0x4(%edx),%edx
f0132622:	89 50 04             	mov    %edx,0x4(%eax)
f0132625:	eb 0b                	jmp    f0132632 <alloc_block_NF+0x45c>
f0132627:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013262a:	8b 40 04             	mov    0x4(%eax),%eax
f013262d:	a3 68 5d 87 f0       	mov    %eax,0xf0875d68
f0132632:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132635:	8b 40 04             	mov    0x4(%eax),%eax
f0132638:	85 c0                	test   %eax,%eax
f013263a:	74 0f                	je     f013264b <alloc_block_NF+0x475>
f013263c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013263f:	8b 40 04             	mov    0x4(%eax),%eax
f0132642:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132645:	8b 12                	mov    (%edx),%edx
f0132647:	89 10                	mov    %edx,(%eax)
f0132649:	eb 0a                	jmp    f0132655 <alloc_block_NF+0x47f>
f013264b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013264e:	8b 00                	mov    (%eax),%eax
f0132650:	a3 64 5d 87 f0       	mov    %eax,0xf0875d64
f0132655:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132658:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013265e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132661:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132668:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f013266d:	48                   	dec    %eax
f013266e:	a3 70 5d 87 f0       	mov    %eax,0xf0875d70
					   svaOfNF = point->sva;
f0132673:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132676:	8b 40 08             	mov    0x8(%eax),%eax
f0132679:	a3 b0 5c 87 f0       	mov    %eax,0xf0875cb0
					   return  point;
f013267e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132681:	e9 1b 01 00 00       	jmp    f01327a1 <alloc_block_NF+0x5cb>
				   }
				   else if (size < point->size){
f0132686:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132689:	8b 40 0c             	mov    0xc(%eax),%eax
f013268c:	3b 45 08             	cmp    0x8(%ebp),%eax
f013268f:	0f 86 d1 00 00 00    	jbe    f0132766 <alloc_block_NF+0x590>
					   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0132695:	a1 98 5d 87 f0       	mov    0xf0875d98,%eax
f013269a:	89 45 ec             	mov    %eax,-0x14(%ebp)
					   ReturnedBlock->sva = point->sva;
f013269d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01326a0:	8b 50 08             	mov    0x8(%eax),%edx
f01326a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01326a6:	89 50 08             	mov    %edx,0x8(%eax)
					   ReturnedBlock->size = size;
f01326a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01326ac:	8b 55 08             	mov    0x8(%ebp),%edx
f01326af:	89 50 0c             	mov    %edx,0xc(%eax)
					   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f01326b2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01326b6:	75 17                	jne    f01326cf <alloc_block_NF+0x4f9>
f01326b8:	83 ec 04             	sub    $0x4,%esp
f01326bb:	68 f0 d3 13 f0       	push   $0xf013d3f0
f01326c0:	68 1c 01 00 00       	push   $0x11c
f01326c5:	68 47 d3 13 f0       	push   $0xf013d347
f01326ca:	e8 36 db fc ff       	call   f0100205 <_panic>
f01326cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01326d2:	8b 00                	mov    (%eax),%eax
f01326d4:	85 c0                	test   %eax,%eax
f01326d6:	74 10                	je     f01326e8 <alloc_block_NF+0x512>
f01326d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01326db:	8b 00                	mov    (%eax),%eax
f01326dd:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01326e0:	8b 52 04             	mov    0x4(%edx),%edx
f01326e3:	89 50 04             	mov    %edx,0x4(%eax)
f01326e6:	eb 0b                	jmp    f01326f3 <alloc_block_NF+0x51d>
f01326e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01326eb:	8b 40 04             	mov    0x4(%eax),%eax
f01326ee:	a3 9c 5d 87 f0       	mov    %eax,0xf0875d9c
f01326f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01326f6:	8b 40 04             	mov    0x4(%eax),%eax
f01326f9:	85 c0                	test   %eax,%eax
f01326fb:	74 0f                	je     f013270c <alloc_block_NF+0x536>
f01326fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132700:	8b 40 04             	mov    0x4(%eax),%eax
f0132703:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0132706:	8b 12                	mov    (%edx),%edx
f0132708:	89 10                	mov    %edx,(%eax)
f013270a:	eb 0a                	jmp    f0132716 <alloc_block_NF+0x540>
f013270c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013270f:	8b 00                	mov    (%eax),%eax
f0132711:	a3 98 5d 87 f0       	mov    %eax,0xf0875d98
f0132716:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132719:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013271f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132722:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132729:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f013272e:	48                   	dec    %eax
f013272f:	a3 a4 5d 87 f0       	mov    %eax,0xf0875da4
					   svaOfNF = ReturnedBlock->sva;
f0132734:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132737:	8b 40 08             	mov    0x8(%eax),%eax
f013273a:	a3 b0 5c 87 f0       	mov    %eax,0xf0875cb0
					   point->sva += size;
f013273f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132742:	8b 50 08             	mov    0x8(%eax),%edx
f0132745:	8b 45 08             	mov    0x8(%ebp),%eax
f0132748:	01 c2                	add    %eax,%edx
f013274a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013274d:	89 50 08             	mov    %edx,0x8(%eax)
					   point->size -= size;
f0132750:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132753:	8b 40 0c             	mov    0xc(%eax),%eax
f0132756:	2b 45 08             	sub    0x8(%ebp),%eax
f0132759:	89 c2                	mov    %eax,%edx
f013275b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013275e:	89 50 0c             	mov    %edx,0xc(%eax)
					   return ReturnedBlock;
f0132761:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132764:	eb 3b                	jmp    f01327a1 <alloc_block_NF+0x5cb>
					   return ReturnedBlock;
				   }
				}
			}
		}
		LIST_FOREACH(point, &FreeMemBlocksList)
f0132766:	a1 6c 5d 87 f0       	mov    0xf0875d6c,%eax
f013276b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013276e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132772:	74 07                	je     f013277b <alloc_block_NF+0x5a5>
f0132774:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132777:	8b 00                	mov    (%eax),%eax
f0132779:	eb 05                	jmp    f0132780 <alloc_block_NF+0x5aa>
f013277b:	b8 00 00 00 00       	mov    $0x0,%eax
f0132780:	a3 6c 5d 87 f0       	mov    %eax,0xf0875d6c
f0132785:	a1 6c 5d 87 f0       	mov    0xf0875d6c,%eax
f013278a:	85 c0                	test   %eax,%eax
f013278c:	0f 85 2e fe ff ff    	jne    f01325c0 <alloc_block_NF+0x3ea>
f0132792:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132796:	0f 85 24 fe ff ff    	jne    f01325c0 <alloc_block_NF+0x3ea>
				   }
				}
			}
		}
	}
	return NULL;
f013279c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01327a1:	c9                   	leave  
f01327a2:	c3                   	ret    

f01327a3 <insert_sorted_with_merge_freeList>:

//===================================================
// [8] INSERT BLOCK (SORTED WITH MERGE) IN FREE LIST:
//===================================================
void insert_sorted_with_merge_freeList(struct MemBlock *blockToInsert)
{
f01327a3:	55                   	push   %ebp
f01327a4:	89 e5                	mov    %esp,%ebp
f01327a6:	83 ec 18             	sub    $0x18,%esp
	//cprintf("BEFORE INSERT with MERGE: insert [%x, %x)\n=====================\n", blockToInsert->sva, blockToInsert->sva + blockToInsert->size);
	//print_mem_block_lists() ;

	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_with_merge_freeList
	// Write your code here, remove the panic and write your code
	struct MemBlock *head = LIST_FIRST(&FreeMemBlocksList) ;
f01327a9:	a1 64 5d 87 f0       	mov    0xf0875d64,%eax
f01327ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;
f01327b1:	a1 68 5d 87 f0       	mov    0xf0875d68,%eax
f01327b6:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
f01327b9:	a1 64 5d 87 f0       	mov    0xf0875d64,%eax
f01327be:	85 c0                	test   %eax,%eax
f01327c0:	74 14                	je     f01327d6 <insert_sorted_with_merge_freeList+0x33>
f01327c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01327c5:	8b 50 08             	mov    0x8(%eax),%edx
f01327c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01327cb:	8b 40 08             	mov    0x8(%eax),%eax
f01327ce:	39 c2                	cmp    %eax,%edx
f01327d0:	0f 87 9b 01 00 00    	ja     f0132971 <insert_sorted_with_merge_freeList+0x1ce>
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
f01327d6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01327da:	75 17                	jne    f01327f3 <insert_sorted_with_merge_freeList+0x50>
f01327dc:	83 ec 04             	sub    $0x4,%esp
f01327df:	68 24 d3 13 f0       	push   $0xf013d324
f01327e4:	68 38 01 00 00       	push   $0x138
f01327e9:	68 47 d3 13 f0       	push   $0xf013d347
f01327ee:	e8 12 da fc ff       	call   f0100205 <_panic>
f01327f3:	8b 15 64 5d 87 f0    	mov    0xf0875d64,%edx
f01327f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01327fc:	89 10                	mov    %edx,(%eax)
f01327fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0132801:	8b 00                	mov    (%eax),%eax
f0132803:	85 c0                	test   %eax,%eax
f0132805:	74 0d                	je     f0132814 <insert_sorted_with_merge_freeList+0x71>
f0132807:	a1 64 5d 87 f0       	mov    0xf0875d64,%eax
f013280c:	8b 55 08             	mov    0x8(%ebp),%edx
f013280f:	89 50 04             	mov    %edx,0x4(%eax)
f0132812:	eb 08                	jmp    f013281c <insert_sorted_with_merge_freeList+0x79>
f0132814:	8b 45 08             	mov    0x8(%ebp),%eax
f0132817:	a3 68 5d 87 f0       	mov    %eax,0xf0875d68
f013281c:	8b 45 08             	mov    0x8(%ebp),%eax
f013281f:	a3 64 5d 87 f0       	mov    %eax,0xf0875d64
f0132824:	8b 45 08             	mov    0x8(%ebp),%eax
f0132827:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013282e:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f0132833:	40                   	inc    %eax
f0132834:	a3 70 5d 87 f0       	mov    %eax,0xf0875d70
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f0132839:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013283d:	0f 84 a8 06 00 00    	je     f0132eeb <insert_sorted_with_merge_freeList+0x748>
f0132843:	8b 45 08             	mov    0x8(%ebp),%eax
f0132846:	8b 50 08             	mov    0x8(%eax),%edx
f0132849:	8b 45 08             	mov    0x8(%ebp),%eax
f013284c:	8b 40 0c             	mov    0xc(%eax),%eax
f013284f:	01 c2                	add    %eax,%edx
f0132851:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132854:	8b 40 08             	mov    0x8(%eax),%eax
f0132857:	39 c2                	cmp    %eax,%edx
f0132859:	0f 85 8c 06 00 00    	jne    f0132eeb <insert_sorted_with_merge_freeList+0x748>
		{
			blockToInsert->size += head->size;
f013285f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132862:	8b 50 0c             	mov    0xc(%eax),%edx
f0132865:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132868:	8b 40 0c             	mov    0xc(%eax),%eax
f013286b:	01 c2                	add    %eax,%edx
f013286d:	8b 45 08             	mov    0x8(%ebp),%eax
f0132870:	89 50 0c             	mov    %edx,0xc(%eax)
			LIST_REMOVE(&FreeMemBlocksList, head);
f0132873:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132877:	75 17                	jne    f0132890 <insert_sorted_with_merge_freeList+0xed>
f0132879:	83 ec 04             	sub    $0x4,%esp
f013287c:	68 f0 d3 13 f0       	push   $0xf013d3f0
f0132881:	68 3c 01 00 00       	push   $0x13c
f0132886:	68 47 d3 13 f0       	push   $0xf013d347
f013288b:	e8 75 d9 fc ff       	call   f0100205 <_panic>
f0132890:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132893:	8b 00                	mov    (%eax),%eax
f0132895:	85 c0                	test   %eax,%eax
f0132897:	74 10                	je     f01328a9 <insert_sorted_with_merge_freeList+0x106>
f0132899:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013289c:	8b 00                	mov    (%eax),%eax
f013289e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01328a1:	8b 52 04             	mov    0x4(%edx),%edx
f01328a4:	89 50 04             	mov    %edx,0x4(%eax)
f01328a7:	eb 0b                	jmp    f01328b4 <insert_sorted_with_merge_freeList+0x111>
f01328a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01328ac:	8b 40 04             	mov    0x4(%eax),%eax
f01328af:	a3 68 5d 87 f0       	mov    %eax,0xf0875d68
f01328b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01328b7:	8b 40 04             	mov    0x4(%eax),%eax
f01328ba:	85 c0                	test   %eax,%eax
f01328bc:	74 0f                	je     f01328cd <insert_sorted_with_merge_freeList+0x12a>
f01328be:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01328c1:	8b 40 04             	mov    0x4(%eax),%eax
f01328c4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01328c7:	8b 12                	mov    (%edx),%edx
f01328c9:	89 10                	mov    %edx,(%eax)
f01328cb:	eb 0a                	jmp    f01328d7 <insert_sorted_with_merge_freeList+0x134>
f01328cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01328d0:	8b 00                	mov    (%eax),%eax
f01328d2:	a3 64 5d 87 f0       	mov    %eax,0xf0875d64
f01328d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01328da:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01328e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01328e3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01328ea:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f01328ef:	48                   	dec    %eax
f01328f0:	a3 70 5d 87 f0       	mov    %eax,0xf0875d70
			head->size = 0;
f01328f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01328f8:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
			head->sva = 0;
f01328ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132902:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&AvailableMemBlocksList, head);
f0132909:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013290d:	75 17                	jne    f0132926 <insert_sorted_with_merge_freeList+0x183>
f013290f:	83 ec 04             	sub    $0x4,%esp
f0132912:	68 24 d3 13 f0       	push   $0xf013d324
f0132917:	68 3f 01 00 00       	push   $0x13f
f013291c:	68 47 d3 13 f0       	push   $0xf013d347
f0132921:	e8 df d8 fc ff       	call   f0100205 <_panic>
f0132926:	8b 15 98 5d 87 f0    	mov    0xf0875d98,%edx
f013292c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013292f:	89 10                	mov    %edx,(%eax)
f0132931:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132934:	8b 00                	mov    (%eax),%eax
f0132936:	85 c0                	test   %eax,%eax
f0132938:	74 0d                	je     f0132947 <insert_sorted_with_merge_freeList+0x1a4>
f013293a:	a1 98 5d 87 f0       	mov    0xf0875d98,%eax
f013293f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132942:	89 50 04             	mov    %edx,0x4(%eax)
f0132945:	eb 08                	jmp    f013294f <insert_sorted_with_merge_freeList+0x1ac>
f0132947:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013294a:	a3 9c 5d 87 f0       	mov    %eax,0xf0875d9c
f013294f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132952:	a3 98 5d 87 f0       	mov    %eax,0xf0875d98
f0132957:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013295a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132961:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f0132966:	40                   	inc    %eax
f0132967:	a3 a4 5d 87 f0       	mov    %eax,0xf0875da4
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f013296c:	e9 7a 05 00 00       	jmp    f0132eeb <insert_sorted_with_merge_freeList+0x748>
			head->size = 0;
			head->sva = 0;
			LIST_INSERT_HEAD(&AvailableMemBlocksList, head);
		}
	}
	else if (blockToInsert->sva >= tail->sva)
f0132971:	8b 45 08             	mov    0x8(%ebp),%eax
f0132974:	8b 50 08             	mov    0x8(%eax),%edx
f0132977:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013297a:	8b 40 08             	mov    0x8(%eax),%eax
f013297d:	39 c2                	cmp    %eax,%edx
f013297f:	0f 82 14 01 00 00    	jb     f0132a99 <insert_sorted_with_merge_freeList+0x2f6>
	{
		if(tail->sva + tail->size == blockToInsert->sva)
f0132985:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132988:	8b 50 08             	mov    0x8(%eax),%edx
f013298b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013298e:	8b 40 0c             	mov    0xc(%eax),%eax
f0132991:	01 c2                	add    %eax,%edx
f0132993:	8b 45 08             	mov    0x8(%ebp),%eax
f0132996:	8b 40 08             	mov    0x8(%eax),%eax
f0132999:	39 c2                	cmp    %eax,%edx
f013299b:	0f 85 90 00 00 00    	jne    f0132a31 <insert_sorted_with_merge_freeList+0x28e>
		{
			tail->size += blockToInsert->size;
f01329a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01329a4:	8b 50 0c             	mov    0xc(%eax),%edx
f01329a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01329aa:	8b 40 0c             	mov    0xc(%eax),%eax
f01329ad:	01 c2                	add    %eax,%edx
f01329af:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01329b2:	89 50 0c             	mov    %edx,0xc(%eax)
			blockToInsert->size = 0;
f01329b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01329b8:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
			blockToInsert->sva = 0;
f01329bf:	8b 45 08             	mov    0x8(%ebp),%eax
f01329c2:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f01329c9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01329cd:	75 17                	jne    f01329e6 <insert_sorted_with_merge_freeList+0x243>
f01329cf:	83 ec 04             	sub    $0x4,%esp
f01329d2:	68 24 d3 13 f0       	push   $0xf013d324
f01329d7:	68 49 01 00 00       	push   $0x149
f01329dc:	68 47 d3 13 f0       	push   $0xf013d347
f01329e1:	e8 1f d8 fc ff       	call   f0100205 <_panic>
f01329e6:	8b 15 98 5d 87 f0    	mov    0xf0875d98,%edx
f01329ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01329ef:	89 10                	mov    %edx,(%eax)
f01329f1:	8b 45 08             	mov    0x8(%ebp),%eax
f01329f4:	8b 00                	mov    (%eax),%eax
f01329f6:	85 c0                	test   %eax,%eax
f01329f8:	74 0d                	je     f0132a07 <insert_sorted_with_merge_freeList+0x264>
f01329fa:	a1 98 5d 87 f0       	mov    0xf0875d98,%eax
f01329ff:	8b 55 08             	mov    0x8(%ebp),%edx
f0132a02:	89 50 04             	mov    %edx,0x4(%eax)
f0132a05:	eb 08                	jmp    f0132a0f <insert_sorted_with_merge_freeList+0x26c>
f0132a07:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a0a:	a3 9c 5d 87 f0       	mov    %eax,0xf0875d9c
f0132a0f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a12:	a3 98 5d 87 f0       	mov    %eax,0xf0875d98
f0132a17:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a1a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132a21:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f0132a26:	40                   	inc    %eax
f0132a27:	a3 a4 5d 87 f0       	mov    %eax,0xf0875da4
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0132a2c:	e9 bb 04 00 00       	jmp    f0132eec <insert_sorted_with_merge_freeList+0x749>
			blockToInsert->size = 0;
			blockToInsert->sva = 0;
			LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
		}
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, blockToInsert);
f0132a31:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132a35:	75 17                	jne    f0132a4e <insert_sorted_with_merge_freeList+0x2ab>
f0132a37:	83 ec 04             	sub    $0x4,%esp
f0132a3a:	68 98 d3 13 f0       	push   $0xf013d398
f0132a3f:	68 4c 01 00 00       	push   $0x14c
f0132a44:	68 47 d3 13 f0       	push   $0xf013d347
f0132a49:	e8 b7 d7 fc ff       	call   f0100205 <_panic>
f0132a4e:	8b 15 68 5d 87 f0    	mov    0xf0875d68,%edx
f0132a54:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a57:	89 50 04             	mov    %edx,0x4(%eax)
f0132a5a:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a5d:	8b 40 04             	mov    0x4(%eax),%eax
f0132a60:	85 c0                	test   %eax,%eax
f0132a62:	74 0c                	je     f0132a70 <insert_sorted_with_merge_freeList+0x2cd>
f0132a64:	a1 68 5d 87 f0       	mov    0xf0875d68,%eax
f0132a69:	8b 55 08             	mov    0x8(%ebp),%edx
f0132a6c:	89 10                	mov    %edx,(%eax)
f0132a6e:	eb 08                	jmp    f0132a78 <insert_sorted_with_merge_freeList+0x2d5>
f0132a70:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a73:	a3 64 5d 87 f0       	mov    %eax,0xf0875d64
f0132a78:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a7b:	a3 68 5d 87 f0       	mov    %eax,0xf0875d68
f0132a80:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a83:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132a89:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f0132a8e:	40                   	inc    %eax
f0132a8f:	a3 70 5d 87 f0       	mov    %eax,0xf0875d70
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0132a94:	e9 53 04 00 00       	jmp    f0132eec <insert_sorted_with_merge_freeList+0x749>
	}
	else
	{
		struct MemBlock *currentBlock;
		struct MemBlock *nextBlock;
		LIST_FOREACH(currentBlock, &FreeMemBlocksList)
f0132a99:	a1 64 5d 87 f0       	mov    0xf0875d64,%eax
f0132a9e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132aa1:	e9 15 04 00 00       	jmp    f0132ebb <insert_sorted_with_merge_freeList+0x718>
		{
			nextBlock = LIST_NEXT(currentBlock);
f0132aa6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132aa9:	8b 00                	mov    (%eax),%eax
f0132aab:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if(blockToInsert->sva > currentBlock->sva && blockToInsert->sva < nextBlock->sva)
f0132aae:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ab1:	8b 50 08             	mov    0x8(%eax),%edx
f0132ab4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132ab7:	8b 40 08             	mov    0x8(%eax),%eax
f0132aba:	39 c2                	cmp    %eax,%edx
f0132abc:	0f 86 f1 03 00 00    	jbe    f0132eb3 <insert_sorted_with_merge_freeList+0x710>
f0132ac2:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ac5:	8b 50 08             	mov    0x8(%eax),%edx
f0132ac8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132acb:	8b 40 08             	mov    0x8(%eax),%eax
f0132ace:	39 c2                	cmp    %eax,%edx
f0132ad0:	0f 83 dd 03 00 00    	jae    f0132eb3 <insert_sorted_with_merge_freeList+0x710>
			{
				if(currentBlock->sva + currentBlock->size == blockToInsert->sva)
f0132ad6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132ad9:	8b 50 08             	mov    0x8(%eax),%edx
f0132adc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132adf:	8b 40 0c             	mov    0xc(%eax),%eax
f0132ae2:	01 c2                	add    %eax,%edx
f0132ae4:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ae7:	8b 40 08             	mov    0x8(%eax),%eax
f0132aea:	39 c2                	cmp    %eax,%edx
f0132aec:	0f 85 b9 01 00 00    	jne    f0132cab <insert_sorted_with_merge_freeList+0x508>
				{
					if(blockToInsert->sva + blockToInsert->size == nextBlock->sva)
f0132af2:	8b 45 08             	mov    0x8(%ebp),%eax
f0132af5:	8b 50 08             	mov    0x8(%eax),%edx
f0132af8:	8b 45 08             	mov    0x8(%ebp),%eax
f0132afb:	8b 40 0c             	mov    0xc(%eax),%eax
f0132afe:	01 c2                	add    %eax,%edx
f0132b00:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132b03:	8b 40 08             	mov    0x8(%eax),%eax
f0132b06:	39 c2                	cmp    %eax,%edx
f0132b08:	0f 85 0d 01 00 00    	jne    f0132c1b <insert_sorted_with_merge_freeList+0x478>
					{
						currentBlock->size += nextBlock->size;
f0132b0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b11:	8b 50 0c             	mov    0xc(%eax),%edx
f0132b14:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132b17:	8b 40 0c             	mov    0xc(%eax),%eax
f0132b1a:	01 c2                	add    %eax,%edx
f0132b1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b1f:	89 50 0c             	mov    %edx,0xc(%eax)
						LIST_REMOVE(&FreeMemBlocksList, nextBlock);
f0132b22:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132b26:	75 17                	jne    f0132b3f <insert_sorted_with_merge_freeList+0x39c>
f0132b28:	83 ec 04             	sub    $0x4,%esp
f0132b2b:	68 f0 d3 13 f0       	push   $0xf013d3f0
f0132b30:	68 5c 01 00 00       	push   $0x15c
f0132b35:	68 47 d3 13 f0       	push   $0xf013d347
f0132b3a:	e8 c6 d6 fc ff       	call   f0100205 <_panic>
f0132b3f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132b42:	8b 00                	mov    (%eax),%eax
f0132b44:	85 c0                	test   %eax,%eax
f0132b46:	74 10                	je     f0132b58 <insert_sorted_with_merge_freeList+0x3b5>
f0132b48:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132b4b:	8b 00                	mov    (%eax),%eax
f0132b4d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132b50:	8b 52 04             	mov    0x4(%edx),%edx
f0132b53:	89 50 04             	mov    %edx,0x4(%eax)
f0132b56:	eb 0b                	jmp    f0132b63 <insert_sorted_with_merge_freeList+0x3c0>
f0132b58:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132b5b:	8b 40 04             	mov    0x4(%eax),%eax
f0132b5e:	a3 68 5d 87 f0       	mov    %eax,0xf0875d68
f0132b63:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132b66:	8b 40 04             	mov    0x4(%eax),%eax
f0132b69:	85 c0                	test   %eax,%eax
f0132b6b:	74 0f                	je     f0132b7c <insert_sorted_with_merge_freeList+0x3d9>
f0132b6d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132b70:	8b 40 04             	mov    0x4(%eax),%eax
f0132b73:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132b76:	8b 12                	mov    (%edx),%edx
f0132b78:	89 10                	mov    %edx,(%eax)
f0132b7a:	eb 0a                	jmp    f0132b86 <insert_sorted_with_merge_freeList+0x3e3>
f0132b7c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132b7f:	8b 00                	mov    (%eax),%eax
f0132b81:	a3 64 5d 87 f0       	mov    %eax,0xf0875d64
f0132b86:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132b89:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132b8f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132b92:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132b99:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f0132b9e:	48                   	dec    %eax
f0132b9f:	a3 70 5d 87 f0       	mov    %eax,0xf0875d70
						nextBlock->sva = 0;
f0132ba4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132ba7:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
						nextBlock->size = 0;
f0132bae:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132bb1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
						LIST_INSERT_HEAD(&AvailableMemBlocksList, nextBlock);
f0132bb8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132bbc:	75 17                	jne    f0132bd5 <insert_sorted_with_merge_freeList+0x432>
f0132bbe:	83 ec 04             	sub    $0x4,%esp
f0132bc1:	68 24 d3 13 f0       	push   $0xf013d324
f0132bc6:	68 5f 01 00 00       	push   $0x15f
f0132bcb:	68 47 d3 13 f0       	push   $0xf013d347
f0132bd0:	e8 30 d6 fc ff       	call   f0100205 <_panic>
f0132bd5:	8b 15 98 5d 87 f0    	mov    0xf0875d98,%edx
f0132bdb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132bde:	89 10                	mov    %edx,(%eax)
f0132be0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132be3:	8b 00                	mov    (%eax),%eax
f0132be5:	85 c0                	test   %eax,%eax
f0132be7:	74 0d                	je     f0132bf6 <insert_sorted_with_merge_freeList+0x453>
f0132be9:	a1 98 5d 87 f0       	mov    0xf0875d98,%eax
f0132bee:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132bf1:	89 50 04             	mov    %edx,0x4(%eax)
f0132bf4:	eb 08                	jmp    f0132bfe <insert_sorted_with_merge_freeList+0x45b>
f0132bf6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132bf9:	a3 9c 5d 87 f0       	mov    %eax,0xf0875d9c
f0132bfe:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132c01:	a3 98 5d 87 f0       	mov    %eax,0xf0875d98
f0132c06:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132c09:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132c10:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f0132c15:	40                   	inc    %eax
f0132c16:	a3 a4 5d 87 f0       	mov    %eax,0xf0875da4
					}
					currentBlock->size += blockToInsert->size;
f0132c1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c1e:	8b 50 0c             	mov    0xc(%eax),%edx
f0132c21:	8b 45 08             	mov    0x8(%ebp),%eax
f0132c24:	8b 40 0c             	mov    0xc(%eax),%eax
f0132c27:	01 c2                	add    %eax,%edx
f0132c29:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c2c:	89 50 0c             	mov    %edx,0xc(%eax)
					blockToInsert->sva = 0;
f0132c2f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132c32:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
					blockToInsert->size = 0;
f0132c39:	8b 45 08             	mov    0x8(%ebp),%eax
f0132c3c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
					LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f0132c43:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132c47:	75 17                	jne    f0132c60 <insert_sorted_with_merge_freeList+0x4bd>
f0132c49:	83 ec 04             	sub    $0x4,%esp
f0132c4c:	68 24 d3 13 f0       	push   $0xf013d324
f0132c51:	68 64 01 00 00       	push   $0x164
f0132c56:	68 47 d3 13 f0       	push   $0xf013d347
f0132c5b:	e8 a5 d5 fc ff       	call   f0100205 <_panic>
f0132c60:	8b 15 98 5d 87 f0    	mov    0xf0875d98,%edx
f0132c66:	8b 45 08             	mov    0x8(%ebp),%eax
f0132c69:	89 10                	mov    %edx,(%eax)
f0132c6b:	8b 45 08             	mov    0x8(%ebp),%eax
f0132c6e:	8b 00                	mov    (%eax),%eax
f0132c70:	85 c0                	test   %eax,%eax
f0132c72:	74 0d                	je     f0132c81 <insert_sorted_with_merge_freeList+0x4de>
f0132c74:	a1 98 5d 87 f0       	mov    0xf0875d98,%eax
f0132c79:	8b 55 08             	mov    0x8(%ebp),%edx
f0132c7c:	89 50 04             	mov    %edx,0x4(%eax)
f0132c7f:	eb 08                	jmp    f0132c89 <insert_sorted_with_merge_freeList+0x4e6>
f0132c81:	8b 45 08             	mov    0x8(%ebp),%eax
f0132c84:	a3 9c 5d 87 f0       	mov    %eax,0xf0875d9c
f0132c89:	8b 45 08             	mov    0x8(%ebp),%eax
f0132c8c:	a3 98 5d 87 f0       	mov    %eax,0xf0875d98
f0132c91:	8b 45 08             	mov    0x8(%ebp),%eax
f0132c94:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132c9b:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f0132ca0:	40                   	inc    %eax
f0132ca1:	a3 a4 5d 87 f0       	mov    %eax,0xf0875da4
					break;
f0132ca6:	e9 41 02 00 00       	jmp    f0132eec <insert_sorted_with_merge_freeList+0x749>
				}
				else if(blockToInsert->sva + blockToInsert->size == nextBlock->sva)
f0132cab:	8b 45 08             	mov    0x8(%ebp),%eax
f0132cae:	8b 50 08             	mov    0x8(%eax),%edx
f0132cb1:	8b 45 08             	mov    0x8(%ebp),%eax
f0132cb4:	8b 40 0c             	mov    0xc(%eax),%eax
f0132cb7:	01 c2                	add    %eax,%edx
f0132cb9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132cbc:	8b 40 08             	mov    0x8(%eax),%eax
f0132cbf:	39 c2                	cmp    %eax,%edx
f0132cc1:	0f 85 7c 01 00 00    	jne    f0132e43 <insert_sorted_with_merge_freeList+0x6a0>
				{
					LIST_INSERT_BEFORE(&FreeMemBlocksList, nextBlock, blockToInsert);
f0132cc7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132ccb:	74 06                	je     f0132cd3 <insert_sorted_with_merge_freeList+0x530>
f0132ccd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132cd1:	75 17                	jne    f0132cea <insert_sorted_with_merge_freeList+0x547>
f0132cd3:	83 ec 04             	sub    $0x4,%esp
f0132cd6:	68 60 d3 13 f0       	push   $0xf013d360
f0132cdb:	68 69 01 00 00       	push   $0x169
f0132ce0:	68 47 d3 13 f0       	push   $0xf013d347
f0132ce5:	e8 1b d5 fc ff       	call   f0100205 <_panic>
f0132cea:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132ced:	8b 50 04             	mov    0x4(%eax),%edx
f0132cf0:	8b 45 08             	mov    0x8(%ebp),%eax
f0132cf3:	89 50 04             	mov    %edx,0x4(%eax)
f0132cf6:	8b 45 08             	mov    0x8(%ebp),%eax
f0132cf9:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132cfc:	89 10                	mov    %edx,(%eax)
f0132cfe:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132d01:	8b 40 04             	mov    0x4(%eax),%eax
f0132d04:	85 c0                	test   %eax,%eax
f0132d06:	74 0d                	je     f0132d15 <insert_sorted_with_merge_freeList+0x572>
f0132d08:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132d0b:	8b 40 04             	mov    0x4(%eax),%eax
f0132d0e:	8b 55 08             	mov    0x8(%ebp),%edx
f0132d11:	89 10                	mov    %edx,(%eax)
f0132d13:	eb 08                	jmp    f0132d1d <insert_sorted_with_merge_freeList+0x57a>
f0132d15:	8b 45 08             	mov    0x8(%ebp),%eax
f0132d18:	a3 64 5d 87 f0       	mov    %eax,0xf0875d64
f0132d1d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132d20:	8b 55 08             	mov    0x8(%ebp),%edx
f0132d23:	89 50 04             	mov    %edx,0x4(%eax)
f0132d26:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f0132d2b:	40                   	inc    %eax
f0132d2c:	a3 70 5d 87 f0       	mov    %eax,0xf0875d70
					blockToInsert->size += nextBlock->size;
f0132d31:	8b 45 08             	mov    0x8(%ebp),%eax
f0132d34:	8b 50 0c             	mov    0xc(%eax),%edx
f0132d37:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132d3a:	8b 40 0c             	mov    0xc(%eax),%eax
f0132d3d:	01 c2                	add    %eax,%edx
f0132d3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132d42:	89 50 0c             	mov    %edx,0xc(%eax)
					LIST_REMOVE(&FreeMemBlocksList, nextBlock);
f0132d45:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132d49:	75 17                	jne    f0132d62 <insert_sorted_with_merge_freeList+0x5bf>
f0132d4b:	83 ec 04             	sub    $0x4,%esp
f0132d4e:	68 f0 d3 13 f0       	push   $0xf013d3f0
f0132d53:	68 6b 01 00 00       	push   $0x16b
f0132d58:	68 47 d3 13 f0       	push   $0xf013d347
f0132d5d:	e8 a3 d4 fc ff       	call   f0100205 <_panic>
f0132d62:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132d65:	8b 00                	mov    (%eax),%eax
f0132d67:	85 c0                	test   %eax,%eax
f0132d69:	74 10                	je     f0132d7b <insert_sorted_with_merge_freeList+0x5d8>
f0132d6b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132d6e:	8b 00                	mov    (%eax),%eax
f0132d70:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132d73:	8b 52 04             	mov    0x4(%edx),%edx
f0132d76:	89 50 04             	mov    %edx,0x4(%eax)
f0132d79:	eb 0b                	jmp    f0132d86 <insert_sorted_with_merge_freeList+0x5e3>
f0132d7b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132d7e:	8b 40 04             	mov    0x4(%eax),%eax
f0132d81:	a3 68 5d 87 f0       	mov    %eax,0xf0875d68
f0132d86:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132d89:	8b 40 04             	mov    0x4(%eax),%eax
f0132d8c:	85 c0                	test   %eax,%eax
f0132d8e:	74 0f                	je     f0132d9f <insert_sorted_with_merge_freeList+0x5fc>
f0132d90:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132d93:	8b 40 04             	mov    0x4(%eax),%eax
f0132d96:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132d99:	8b 12                	mov    (%edx),%edx
f0132d9b:	89 10                	mov    %edx,(%eax)
f0132d9d:	eb 0a                	jmp    f0132da9 <insert_sorted_with_merge_freeList+0x606>
f0132d9f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132da2:	8b 00                	mov    (%eax),%eax
f0132da4:	a3 64 5d 87 f0       	mov    %eax,0xf0875d64
f0132da9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132dac:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132db2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132db5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132dbc:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f0132dc1:	48                   	dec    %eax
f0132dc2:	a3 70 5d 87 f0       	mov    %eax,0xf0875d70
					nextBlock->sva = 0;
f0132dc7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132dca:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
					nextBlock->size = 0;
f0132dd1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132dd4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
					LIST_INSERT_HEAD(&AvailableMemBlocksList, nextBlock);
f0132ddb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132ddf:	75 17                	jne    f0132df8 <insert_sorted_with_merge_freeList+0x655>
f0132de1:	83 ec 04             	sub    $0x4,%esp
f0132de4:	68 24 d3 13 f0       	push   $0xf013d324
f0132de9:	68 6e 01 00 00       	push   $0x16e
f0132dee:	68 47 d3 13 f0       	push   $0xf013d347
f0132df3:	e8 0d d4 fc ff       	call   f0100205 <_panic>
f0132df8:	8b 15 98 5d 87 f0    	mov    0xf0875d98,%edx
f0132dfe:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132e01:	89 10                	mov    %edx,(%eax)
f0132e03:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132e06:	8b 00                	mov    (%eax),%eax
f0132e08:	85 c0                	test   %eax,%eax
f0132e0a:	74 0d                	je     f0132e19 <insert_sorted_with_merge_freeList+0x676>
f0132e0c:	a1 98 5d 87 f0       	mov    0xf0875d98,%eax
f0132e11:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132e14:	89 50 04             	mov    %edx,0x4(%eax)
f0132e17:	eb 08                	jmp    f0132e21 <insert_sorted_with_merge_freeList+0x67e>
f0132e19:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132e1c:	a3 9c 5d 87 f0       	mov    %eax,0xf0875d9c
f0132e21:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132e24:	a3 98 5d 87 f0       	mov    %eax,0xf0875d98
f0132e29:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132e2c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132e33:	a1 a4 5d 87 f0       	mov    0xf0875da4,%eax
f0132e38:	40                   	inc    %eax
f0132e39:	a3 a4 5d 87 f0       	mov    %eax,0xf0875da4
					break;
f0132e3e:	e9 a9 00 00 00       	jmp    f0132eec <insert_sorted_with_merge_freeList+0x749>
				}
				else
				{
					LIST_INSERT_AFTER(&FreeMemBlocksList, currentBlock, blockToInsert);
f0132e43:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132e47:	74 06                	je     f0132e4f <insert_sorted_with_merge_freeList+0x6ac>
f0132e49:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132e4d:	75 17                	jne    f0132e66 <insert_sorted_with_merge_freeList+0x6c3>
f0132e4f:	83 ec 04             	sub    $0x4,%esp
f0132e52:	68 bc d3 13 f0       	push   $0xf013d3bc
f0132e57:	68 73 01 00 00       	push   $0x173
f0132e5c:	68 47 d3 13 f0       	push   $0xf013d347
f0132e61:	e8 9f d3 fc ff       	call   f0100205 <_panic>
f0132e66:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e69:	8b 10                	mov    (%eax),%edx
f0132e6b:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e6e:	89 10                	mov    %edx,(%eax)
f0132e70:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e73:	8b 00                	mov    (%eax),%eax
f0132e75:	85 c0                	test   %eax,%eax
f0132e77:	74 0b                	je     f0132e84 <insert_sorted_with_merge_freeList+0x6e1>
f0132e79:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e7c:	8b 00                	mov    (%eax),%eax
f0132e7e:	8b 55 08             	mov    0x8(%ebp),%edx
f0132e81:	89 50 04             	mov    %edx,0x4(%eax)
f0132e84:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e87:	8b 55 08             	mov    0x8(%ebp),%edx
f0132e8a:	89 10                	mov    %edx,(%eax)
f0132e8c:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e8f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132e92:	89 50 04             	mov    %edx,0x4(%eax)
f0132e95:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e98:	8b 00                	mov    (%eax),%eax
f0132e9a:	85 c0                	test   %eax,%eax
f0132e9c:	75 08                	jne    f0132ea6 <insert_sorted_with_merge_freeList+0x703>
f0132e9e:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ea1:	a3 68 5d 87 f0       	mov    %eax,0xf0875d68
f0132ea6:	a1 70 5d 87 f0       	mov    0xf0875d70,%eax
f0132eab:	40                   	inc    %eax
f0132eac:	a3 70 5d 87 f0       	mov    %eax,0xf0875d70
					break;
f0132eb1:	eb 39                	jmp    f0132eec <insert_sorted_with_merge_freeList+0x749>
	}
	else
	{
		struct MemBlock *currentBlock;
		struct MemBlock *nextBlock;
		LIST_FOREACH(currentBlock, &FreeMemBlocksList)
f0132eb3:	a1 6c 5d 87 f0       	mov    0xf0875d6c,%eax
f0132eb8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132ebb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132ebf:	74 07                	je     f0132ec8 <insert_sorted_with_merge_freeList+0x725>
f0132ec1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132ec4:	8b 00                	mov    (%eax),%eax
f0132ec6:	eb 05                	jmp    f0132ecd <insert_sorted_with_merge_freeList+0x72a>
f0132ec8:	b8 00 00 00 00       	mov    $0x0,%eax
f0132ecd:	a3 6c 5d 87 f0       	mov    %eax,0xf0875d6c
f0132ed2:	a1 6c 5d 87 f0       	mov    0xf0875d6c,%eax
f0132ed7:	85 c0                	test   %eax,%eax
f0132ed9:	0f 85 c7 fb ff ff    	jne    f0132aa6 <insert_sorted_with_merge_freeList+0x303>
f0132edf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132ee3:	0f 85 bd fb ff ff    	jne    f0132aa6 <insert_sorted_with_merge_freeList+0x303>
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0132ee9:	eb 01                	jmp    f0132eec <insert_sorted_with_merge_freeList+0x749>
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f0132eeb:	90                   	nop
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0132eec:	90                   	nop
f0132eed:	c9                   	leave  
f0132eee:	c3                   	ret    
f0132eef:	90                   	nop

f0132ef0 <__udivdi3>:
f0132ef0:	55                   	push   %ebp
f0132ef1:	57                   	push   %edi
f0132ef2:	56                   	push   %esi
f0132ef3:	53                   	push   %ebx
f0132ef4:	83 ec 1c             	sub    $0x1c,%esp
f0132ef7:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f0132efb:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f0132eff:	8b 7c 24 38          	mov    0x38(%esp),%edi
f0132f03:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f0132f07:	89 ca                	mov    %ecx,%edx
f0132f09:	89 f8                	mov    %edi,%eax
f0132f0b:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f0132f0f:	85 f6                	test   %esi,%esi
f0132f11:	75 2d                	jne    f0132f40 <__udivdi3+0x50>
f0132f13:	39 cf                	cmp    %ecx,%edi
f0132f15:	77 65                	ja     f0132f7c <__udivdi3+0x8c>
f0132f17:	89 fd                	mov    %edi,%ebp
f0132f19:	85 ff                	test   %edi,%edi
f0132f1b:	75 0b                	jne    f0132f28 <__udivdi3+0x38>
f0132f1d:	b8 01 00 00 00       	mov    $0x1,%eax
f0132f22:	31 d2                	xor    %edx,%edx
f0132f24:	f7 f7                	div    %edi
f0132f26:	89 c5                	mov    %eax,%ebp
f0132f28:	31 d2                	xor    %edx,%edx
f0132f2a:	89 c8                	mov    %ecx,%eax
f0132f2c:	f7 f5                	div    %ebp
f0132f2e:	89 c1                	mov    %eax,%ecx
f0132f30:	89 d8                	mov    %ebx,%eax
f0132f32:	f7 f5                	div    %ebp
f0132f34:	89 cf                	mov    %ecx,%edi
f0132f36:	89 fa                	mov    %edi,%edx
f0132f38:	83 c4 1c             	add    $0x1c,%esp
f0132f3b:	5b                   	pop    %ebx
f0132f3c:	5e                   	pop    %esi
f0132f3d:	5f                   	pop    %edi
f0132f3e:	5d                   	pop    %ebp
f0132f3f:	c3                   	ret    
f0132f40:	39 ce                	cmp    %ecx,%esi
f0132f42:	77 28                	ja     f0132f6c <__udivdi3+0x7c>
f0132f44:	0f bd fe             	bsr    %esi,%edi
f0132f47:	83 f7 1f             	xor    $0x1f,%edi
f0132f4a:	75 40                	jne    f0132f8c <__udivdi3+0x9c>
f0132f4c:	39 ce                	cmp    %ecx,%esi
f0132f4e:	72 0a                	jb     f0132f5a <__udivdi3+0x6a>
f0132f50:	3b 44 24 08          	cmp    0x8(%esp),%eax
f0132f54:	0f 87 9e 00 00 00    	ja     f0132ff8 <__udivdi3+0x108>
f0132f5a:	b8 01 00 00 00       	mov    $0x1,%eax
f0132f5f:	89 fa                	mov    %edi,%edx
f0132f61:	83 c4 1c             	add    $0x1c,%esp
f0132f64:	5b                   	pop    %ebx
f0132f65:	5e                   	pop    %esi
f0132f66:	5f                   	pop    %edi
f0132f67:	5d                   	pop    %ebp
f0132f68:	c3                   	ret    
f0132f69:	8d 76 00             	lea    0x0(%esi),%esi
f0132f6c:	31 ff                	xor    %edi,%edi
f0132f6e:	31 c0                	xor    %eax,%eax
f0132f70:	89 fa                	mov    %edi,%edx
f0132f72:	83 c4 1c             	add    $0x1c,%esp
f0132f75:	5b                   	pop    %ebx
f0132f76:	5e                   	pop    %esi
f0132f77:	5f                   	pop    %edi
f0132f78:	5d                   	pop    %ebp
f0132f79:	c3                   	ret    
f0132f7a:	66 90                	xchg   %ax,%ax
f0132f7c:	89 d8                	mov    %ebx,%eax
f0132f7e:	f7 f7                	div    %edi
f0132f80:	31 ff                	xor    %edi,%edi
f0132f82:	89 fa                	mov    %edi,%edx
f0132f84:	83 c4 1c             	add    $0x1c,%esp
f0132f87:	5b                   	pop    %ebx
f0132f88:	5e                   	pop    %esi
f0132f89:	5f                   	pop    %edi
f0132f8a:	5d                   	pop    %ebp
f0132f8b:	c3                   	ret    
f0132f8c:	bd 20 00 00 00       	mov    $0x20,%ebp
f0132f91:	89 eb                	mov    %ebp,%ebx
f0132f93:	29 fb                	sub    %edi,%ebx
f0132f95:	89 f9                	mov    %edi,%ecx
f0132f97:	d3 e6                	shl    %cl,%esi
f0132f99:	89 c5                	mov    %eax,%ebp
f0132f9b:	88 d9                	mov    %bl,%cl
f0132f9d:	d3 ed                	shr    %cl,%ebp
f0132f9f:	89 e9                	mov    %ebp,%ecx
f0132fa1:	09 f1                	or     %esi,%ecx
f0132fa3:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f0132fa7:	89 f9                	mov    %edi,%ecx
f0132fa9:	d3 e0                	shl    %cl,%eax
f0132fab:	89 c5                	mov    %eax,%ebp
f0132fad:	89 d6                	mov    %edx,%esi
f0132faf:	88 d9                	mov    %bl,%cl
f0132fb1:	d3 ee                	shr    %cl,%esi
f0132fb3:	89 f9                	mov    %edi,%ecx
f0132fb5:	d3 e2                	shl    %cl,%edx
f0132fb7:	8b 44 24 08          	mov    0x8(%esp),%eax
f0132fbb:	88 d9                	mov    %bl,%cl
f0132fbd:	d3 e8                	shr    %cl,%eax
f0132fbf:	09 c2                	or     %eax,%edx
f0132fc1:	89 d0                	mov    %edx,%eax
f0132fc3:	89 f2                	mov    %esi,%edx
f0132fc5:	f7 74 24 0c          	divl   0xc(%esp)
f0132fc9:	89 d6                	mov    %edx,%esi
f0132fcb:	89 c3                	mov    %eax,%ebx
f0132fcd:	f7 e5                	mul    %ebp
f0132fcf:	39 d6                	cmp    %edx,%esi
f0132fd1:	72 19                	jb     f0132fec <__udivdi3+0xfc>
f0132fd3:	74 0b                	je     f0132fe0 <__udivdi3+0xf0>
f0132fd5:	89 d8                	mov    %ebx,%eax
f0132fd7:	31 ff                	xor    %edi,%edi
f0132fd9:	e9 58 ff ff ff       	jmp    f0132f36 <__udivdi3+0x46>
f0132fde:	66 90                	xchg   %ax,%ax
f0132fe0:	8b 54 24 08          	mov    0x8(%esp),%edx
f0132fe4:	89 f9                	mov    %edi,%ecx
f0132fe6:	d3 e2                	shl    %cl,%edx
f0132fe8:	39 c2                	cmp    %eax,%edx
f0132fea:	73 e9                	jae    f0132fd5 <__udivdi3+0xe5>
f0132fec:	8d 43 ff             	lea    -0x1(%ebx),%eax
f0132fef:	31 ff                	xor    %edi,%edi
f0132ff1:	e9 40 ff ff ff       	jmp    f0132f36 <__udivdi3+0x46>
f0132ff6:	66 90                	xchg   %ax,%ax
f0132ff8:	31 c0                	xor    %eax,%eax
f0132ffa:	e9 37 ff ff ff       	jmp    f0132f36 <__udivdi3+0x46>
f0132fff:	90                   	nop

f0133000 <__umoddi3>:
f0133000:	55                   	push   %ebp
f0133001:	57                   	push   %edi
f0133002:	56                   	push   %esi
f0133003:	53                   	push   %ebx
f0133004:	83 ec 1c             	sub    $0x1c,%esp
f0133007:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f013300b:	8b 74 24 34          	mov    0x34(%esp),%esi
f013300f:	8b 7c 24 38          	mov    0x38(%esp),%edi
f0133013:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f0133017:	89 44 24 0c          	mov    %eax,0xc(%esp)
f013301b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f013301f:	89 f3                	mov    %esi,%ebx
f0133021:	89 fa                	mov    %edi,%edx
f0133023:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f0133027:	89 34 24             	mov    %esi,(%esp)
f013302a:	85 c0                	test   %eax,%eax
f013302c:	75 1a                	jne    f0133048 <__umoddi3+0x48>
f013302e:	39 f7                	cmp    %esi,%edi
f0133030:	0f 86 a2 00 00 00    	jbe    f01330d8 <__umoddi3+0xd8>
f0133036:	89 c8                	mov    %ecx,%eax
f0133038:	89 f2                	mov    %esi,%edx
f013303a:	f7 f7                	div    %edi
f013303c:	89 d0                	mov    %edx,%eax
f013303e:	31 d2                	xor    %edx,%edx
f0133040:	83 c4 1c             	add    $0x1c,%esp
f0133043:	5b                   	pop    %ebx
f0133044:	5e                   	pop    %esi
f0133045:	5f                   	pop    %edi
f0133046:	5d                   	pop    %ebp
f0133047:	c3                   	ret    
f0133048:	39 f0                	cmp    %esi,%eax
f013304a:	0f 87 ac 00 00 00    	ja     f01330fc <__umoddi3+0xfc>
f0133050:	0f bd e8             	bsr    %eax,%ebp
f0133053:	83 f5 1f             	xor    $0x1f,%ebp
f0133056:	0f 84 ac 00 00 00    	je     f0133108 <__umoddi3+0x108>
f013305c:	bf 20 00 00 00       	mov    $0x20,%edi
f0133061:	29 ef                	sub    %ebp,%edi
f0133063:	89 fe                	mov    %edi,%esi
f0133065:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f0133069:	89 e9                	mov    %ebp,%ecx
f013306b:	d3 e0                	shl    %cl,%eax
f013306d:	89 d7                	mov    %edx,%edi
f013306f:	89 f1                	mov    %esi,%ecx
f0133071:	d3 ef                	shr    %cl,%edi
f0133073:	09 c7                	or     %eax,%edi
f0133075:	89 e9                	mov    %ebp,%ecx
f0133077:	d3 e2                	shl    %cl,%edx
f0133079:	89 14 24             	mov    %edx,(%esp)
f013307c:	89 d8                	mov    %ebx,%eax
f013307e:	d3 e0                	shl    %cl,%eax
f0133080:	89 c2                	mov    %eax,%edx
f0133082:	8b 44 24 08          	mov    0x8(%esp),%eax
f0133086:	d3 e0                	shl    %cl,%eax
f0133088:	89 44 24 04          	mov    %eax,0x4(%esp)
f013308c:	8b 44 24 08          	mov    0x8(%esp),%eax
f0133090:	89 f1                	mov    %esi,%ecx
f0133092:	d3 e8                	shr    %cl,%eax
f0133094:	09 d0                	or     %edx,%eax
f0133096:	d3 eb                	shr    %cl,%ebx
f0133098:	89 da                	mov    %ebx,%edx
f013309a:	f7 f7                	div    %edi
f013309c:	89 d3                	mov    %edx,%ebx
f013309e:	f7 24 24             	mull   (%esp)
f01330a1:	89 c6                	mov    %eax,%esi
f01330a3:	89 d1                	mov    %edx,%ecx
f01330a5:	39 d3                	cmp    %edx,%ebx
f01330a7:	0f 82 87 00 00 00    	jb     f0133134 <__umoddi3+0x134>
f01330ad:	0f 84 91 00 00 00    	je     f0133144 <__umoddi3+0x144>
f01330b3:	8b 54 24 04          	mov    0x4(%esp),%edx
f01330b7:	29 f2                	sub    %esi,%edx
f01330b9:	19 cb                	sbb    %ecx,%ebx
f01330bb:	89 d8                	mov    %ebx,%eax
f01330bd:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f01330c1:	d3 e0                	shl    %cl,%eax
f01330c3:	89 e9                	mov    %ebp,%ecx
f01330c5:	d3 ea                	shr    %cl,%edx
f01330c7:	09 d0                	or     %edx,%eax
f01330c9:	89 e9                	mov    %ebp,%ecx
f01330cb:	d3 eb                	shr    %cl,%ebx
f01330cd:	89 da                	mov    %ebx,%edx
f01330cf:	83 c4 1c             	add    $0x1c,%esp
f01330d2:	5b                   	pop    %ebx
f01330d3:	5e                   	pop    %esi
f01330d4:	5f                   	pop    %edi
f01330d5:	5d                   	pop    %ebp
f01330d6:	c3                   	ret    
f01330d7:	90                   	nop
f01330d8:	89 fd                	mov    %edi,%ebp
f01330da:	85 ff                	test   %edi,%edi
f01330dc:	75 0b                	jne    f01330e9 <__umoddi3+0xe9>
f01330de:	b8 01 00 00 00       	mov    $0x1,%eax
f01330e3:	31 d2                	xor    %edx,%edx
f01330e5:	f7 f7                	div    %edi
f01330e7:	89 c5                	mov    %eax,%ebp
f01330e9:	89 f0                	mov    %esi,%eax
f01330eb:	31 d2                	xor    %edx,%edx
f01330ed:	f7 f5                	div    %ebp
f01330ef:	89 c8                	mov    %ecx,%eax
f01330f1:	f7 f5                	div    %ebp
f01330f3:	89 d0                	mov    %edx,%eax
f01330f5:	e9 44 ff ff ff       	jmp    f013303e <__umoddi3+0x3e>
f01330fa:	66 90                	xchg   %ax,%ax
f01330fc:	89 c8                	mov    %ecx,%eax
f01330fe:	89 f2                	mov    %esi,%edx
f0133100:	83 c4 1c             	add    $0x1c,%esp
f0133103:	5b                   	pop    %ebx
f0133104:	5e                   	pop    %esi
f0133105:	5f                   	pop    %edi
f0133106:	5d                   	pop    %ebp
f0133107:	c3                   	ret    
f0133108:	3b 04 24             	cmp    (%esp),%eax
f013310b:	72 06                	jb     f0133113 <__umoddi3+0x113>
f013310d:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f0133111:	77 0f                	ja     f0133122 <__umoddi3+0x122>
f0133113:	89 f2                	mov    %esi,%edx
f0133115:	29 f9                	sub    %edi,%ecx
f0133117:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f013311b:	89 14 24             	mov    %edx,(%esp)
f013311e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f0133122:	8b 44 24 04          	mov    0x4(%esp),%eax
f0133126:	8b 14 24             	mov    (%esp),%edx
f0133129:	83 c4 1c             	add    $0x1c,%esp
f013312c:	5b                   	pop    %ebx
f013312d:	5e                   	pop    %esi
f013312e:	5f                   	pop    %edi
f013312f:	5d                   	pop    %ebp
f0133130:	c3                   	ret    
f0133131:	8d 76 00             	lea    0x0(%esi),%esi
f0133134:	2b 04 24             	sub    (%esp),%eax
f0133137:	19 fa                	sbb    %edi,%edx
f0133139:	89 d1                	mov    %edx,%ecx
f013313b:	89 c6                	mov    %eax,%esi
f013313d:	e9 71 ff ff ff       	jmp    f01330b3 <__umoddi3+0xb3>
f0133142:	66 90                	xchg   %ax,%ax
f0133144:	39 44 24 04          	cmp    %eax,0x4(%esp)
f0133148:	72 ea                	jb     f0133134 <__umoddi3+0x134>
f013314a:	89 d9                	mov    %ebx,%ecx
f013314c:	e9 62 ff ff ff       	jmp    f01330b3 <__umoddi3+0xb3>
